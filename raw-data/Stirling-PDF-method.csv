package,filepath,class_path,method_name,signature,line_range,author_lines_map,author_edit_ratio_map,dominant_author,test_class,code
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AdminJobController.java,AdminJobController,getJobStats,ResponseEntity<JobStats> getJobStats(),"[35, 44]","{'A233': [(35, 44)]}",{'A233': 1.0},A233,,"    @GetMapping(""/api/v1/admin/job/stats"")
    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    public ResponseEntity<JobStats> getJobStats() {
        JobStats stats = taskManager.getJobStats();
        log.info(
                ""Admin requested job stats: {} active, {} completed jobs"",
                stats.getActiveJobs(),
                stats.getCompletedJobs());
        return ResponseEntity.ok(stats);
    }
"
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AdminJobController.java,AdminJobController,getQueueStats,ResponseEntity<?> getQueueStats(),"[51, 57]","{'A233': [(51, 57)]}",{'A233': 1.0},A233,,"    @GetMapping(""/api/v1/admin/job/queue/stats"")
    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    public ResponseEntity<?> getQueueStats() {
        Map<String, Object> queueStats = jobQueue.getQueueStats();
        log.info(""Admin requested queue stats: {} queued jobs"", queueStats.get(""queuedJobs""));
        return ResponseEntity.ok(queueStats);
    }
"
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AdminJobController.java,AdminJobController,cleanupOldJobs,ResponseEntity<?> cleanupOldJobs(),"[64, 82]","{'A233': [(64, 82)]}",{'A233': 1.0},A233,,"    @PostMapping(""/api/v1/admin/job/cleanup"")
    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    public ResponseEntity<?> cleanupOldJobs() {
        int beforeCount = taskManager.getJobStats().getTotalJobs();
        taskManager.cleanupOldJobs();
        int afterCount = taskManager.getJobStats().getTotalJobs();
        int removedCount = beforeCount - afterCount;

        log.info(
                ""Admin triggered job cleanup: removed {} jobs, {} remaining"",
                removedCount,
                afterCount);

        return ResponseEntity.ok(
                Map.of(
                        ""message"", ""Cleanup complete"",
                        ""removedJobs"", removedCount,
                        ""remainingJobs"", afterCount));
    }
"
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AuditDashboardController.java,AuditDashboardController,showDashboard,String showDashboard(Model),"[61, 75]","{'A233': [(61, 66), (68, 69), (71, 72), (74, 75)], 'A234': [(67, 67), (70, 70), (73, 73)]}","{'A233': 0.8, 'A234': 0.2}",A233,,"    @GetMapping
    public String showDashboard(Model model) {
        model.addAttribute(""auditEnabled"", auditConfig.isEnabled());
        model.addAttribute(""auditLevel"", auditConfig.getAuditLevel());
        model.addAttribute(""auditLevelInt"", auditConfig.getLevel());
        model.addAttribute(""retentionDays"", auditConfig.getRetentionDays());

        // Add audit level enum values for display
        model.addAttribute(""auditLevels"", AuditLevel.values());

        // Add audit event types for the dropdown
        model.addAttribute(""auditEventTypes"", AuditEventType.values());

        return ""audit/dashboard"";
    }
"
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AuditDashboardController.java,AuditDashboardController,getAuditData,"Map<String, Object> getAuditData(int,int,String,String,LocalDate,LocalDate,HttpServletRequest)","[78, 146]","{'A233': [(78, 84), (92, 101), (105, 116), (120, 146)], 'A234': [(85, 91), (102, 104), (117, 119)]}","{'A233': 0.8115942028985508, 'A234': 0.18840579710144928}",A233,,"    @GetMapping(""/data"")
    @ResponseBody
    public Map<String, Object> getAuditData(
            @RequestParam(value = ""page"", defaultValue = ""0"") int page,
            @RequestParam(value = ""size"", defaultValue = ""30"") int size,
            @RequestParam(value = ""type"", required = false) String type,
            @RequestParam(value = ""principal"", required = false) String principal,
            @RequestParam(value = ""startDate"", required = false)
                    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
                    LocalDate startDate,
            @RequestParam(value = ""endDate"", required = false)
                    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
                    LocalDate endDate,
            HttpServletRequest request) {

        Pageable pageable = PageRequest.of(page, size, Sort.by(""timestamp"").descending());
        Page<PersistentAuditEvent> events;

        String mode;

        if (type != null && principal != null && startDate != null && endDate != null) {
            mode = ""principal + type + startDate + endDate"";
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events =
                    auditRepository.findByPrincipalAndTypeAndTimestampBetween(
                            principal, type, start, end, pageable);
        } else if (type != null && principal != null) {
            mode = ""principal + type"";
            events = auditRepository.findByPrincipalAndType(principal, type, pageable);
        } else if (type != null && startDate != null && endDate != null) {
            mode = ""type + startDate + endDate"";
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events = auditRepository.findByTypeAndTimestampBetween(type, start, end, pageable);
        } else if (principal != null && startDate != null && endDate != null) {
            mode = ""principal + startDate + endDate"";
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events =
                    auditRepository.findByPrincipalAndTimestampBetween(
                            principal, start, end, pageable);
        } else if (startDate != null && endDate != null) {
            mode = ""startDate + endDate"";
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events = auditRepository.findByTimestampBetween(start, end, pageable);
        } else if (type != null) {
            mode = ""type"";
            events = auditRepository.findByType(type, pageable);
        } else if (principal != null) {
            mode = ""principal"";
            events = auditRepository.findByPrincipal(principal, pageable);
        } else {
            mode = ""all"";
            events = auditRepository.findAll(pageable);
        }

        // Logging
        List<PersistentAuditEvent> content = events.getContent();

        Map<String, Object> response = new HashMap<>();
        response.put(""content"", content);
        response.put(""totalPages"", events.getTotalPages());
        response.put(""totalElements"", events.getTotalElements());
        response.put(""currentPage"", events.getNumber());

        return response;
    }
"
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AuditDashboardController.java,AuditDashboardController,getAuditStats,"Map<String, Object> getAuditStats(int)","[149, 191]","{'A233': [(149, 152), (154, 156), (158, 158), (165, 165), (172, 172), (184, 188), (190, 191)], 'A234': [(153, 153), (157, 157), (159, 164), (166, 171), (173, 183), (189, 189)]}","{'A233': 0.3953488372093023, 'A234': 0.6046511627906976}",A234,,"    @GetMapping(""/stats"")
    @ResponseBody
    public Map<String, Object> getAuditStats(
            @RequestParam(value = ""days"", defaultValue = ""7"") int days) {

        // Get events from the last X days
        Instant startDate = Instant.now().minus(java.time.Duration.ofDays(days));
        List<PersistentAuditEvent> events = auditRepository.findByTimestampAfter(startDate);

        // Count events by type
        Map<String, Long> eventsByType =
                events.stream()
                        .collect(
                                Collectors.groupingBy(
                                        PersistentAuditEvent::getType, Collectors.counting()));

        // Count events by principal
        Map<String, Long> eventsByPrincipal =
                events.stream()
                        .collect(
                                Collectors.groupingBy(
                                        PersistentAuditEvent::getPrincipal, Collectors.counting()));

        // Count events by day
        Map<String, Long> eventsByDay =
                events.stream()
                        .collect(
                                Collectors.groupingBy(
                                        e ->
                                                LocalDateTime.ofInstant(
                                                                e.getTimestamp(),
                                                                ZoneId.systemDefault())
                                                        .format(DateTimeFormatter.ISO_LOCAL_DATE),
                                        Collectors.counting()));

        Map<String, Object> stats = new HashMap<>();
        stats.put(""eventsByType"", eventsByType);
        stats.put(""eventsByPrincipal"", eventsByPrincipal);
        stats.put(""eventsByDay"", eventsByDay);
        stats.put(""totalEvents"", events.size());

        return stats;
    }
"
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AuditDashboardController.java,AuditDashboardController,getAuditTypes,List<String> getAuditTypes(),"[194, 212]","{'A233': [(194, 198), (200, 200), (206, 209), (211, 212)], 'A234': [(199, 199), (201, 205), (210, 210)]}","{'A233': 0.631578947368421, 'A234': 0.3684210526315789}",A233,,"    @GetMapping(""/types"")
    @ResponseBody
    public List<String> getAuditTypes() {
        // Get distinct event types from the database
        List<String> dbTypes = auditRepository.findDistinctEventTypes();

        // Include standard enum types in case they're not in the database yet
        List<String> enumTypes =
                Arrays.stream(AuditEventType.values())
                        .map(AuditEventType::name)
                        .collect(Collectors.toList());

        // Combine both sources, remove duplicates, and sort
        Set<String> combinedTypes = new HashSet<>();
        combinedTypes.addAll(dbTypes);
        combinedTypes.addAll(enumTypes);

        return combinedTypes.stream().sorted().collect(Collectors.toList());
    }
"
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AuditDashboardController.java,AuditDashboardController,exportAuditData,"ResponseEntity<byte[]> exportAuditData(String,String,LocalDate,LocalDate)","[215, 281]","{'A233': [(215, 218), (226, 227), (229, 231), (235, 243), (247, 257), (259, 261), (263, 263), (265, 271), (273, 273), (275, 278), (281, 281)], 'A234': [(219, 225), (228, 228), (232, 234), (244, 246), (258, 258), (262, 262), (264, 264), (272, 272), (274, 274), (279, 280)]}","{'A233': 0.6865671641791045, 'A234': 0.31343283582089554}",A233,,"    @GetMapping(""/export"")
    public ResponseEntity<byte[]> exportAuditData(
            @RequestParam(value = ""type"", required = false) String type,
            @RequestParam(value = ""principal"", required = false) String principal,
            @RequestParam(value = ""startDate"", required = false)
                    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
                    LocalDate startDate,
            @RequestParam(value = ""endDate"", required = false)
                    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
                    LocalDate endDate) {

        // Get data with same filtering as getAuditData
        List<PersistentAuditEvent> events;

        if (type != null && principal != null && startDate != null && endDate != null) {
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events =
                    auditRepository.findAllByPrincipalAndTypeAndTimestampBetweenForExport(
                            principal, type, start, end);
        } else if (type != null && principal != null) {
            events = auditRepository.findAllByPrincipalAndTypeForExport(principal, type);
        } else if (type != null && startDate != null && endDate != null) {
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events = auditRepository.findAllByTypeAndTimestampBetweenForExport(type, start, end);
        } else if (principal != null && startDate != null && endDate != null) {
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events =
                    auditRepository.findAllByPrincipalAndTimestampBetweenForExport(
                            principal, start, end);
        } else if (startDate != null && endDate != null) {
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events = auditRepository.findAllByTimestampBetweenForExport(start, end);
        } else if (type != null) {
            events = auditRepository.findByTypeForExport(type);
        } else if (principal != null) {
            events = auditRepository.findAllByPrincipalForExport(principal);
        } else {
            events = auditRepository.findAll();
        }

        // Convert to CSV
        StringBuilder csv = new StringBuilder();
        csv.append(""ID,Principal,Type,Timestamp,Data\n"");

        DateTimeFormatter formatter = DateTimeFormatter.ISO_INSTANT;

        for (PersistentAuditEvent event : events) {
            csv.append(event.getId()).append("","");
            csv.append(escapeCSV(event.getPrincipal())).append("","");
            csv.append(escapeCSV(event.getType())).append("","");
            csv.append(formatter.format(event.getTimestamp())).append("","");
            csv.append(escapeCSV(event.getData())).append(""\n"");
        }

        byte[] csvBytes = csv.toString().getBytes();

        // Set up HTTP headers for download
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setContentDispositionFormData(""attachment"", ""audit_export.csv"");

        return ResponseEntity.ok().headers(headers).body(csvBytes);
    }
"
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AuditDashboardController.java,AuditDashboardController,exportAuditDataJson,"ResponseEntity<byte[]> exportAuditDataJson(String,String,LocalDate,LocalDate)","[284, 342]","{'A233': [(284, 287), (295, 296), (298, 300), (304, 312), (316, 326), (328, 330), (332, 335), (338, 342)], 'A234': [(288, 294), (297, 297), (301, 303), (313, 315), (327, 327), (331, 331), (336, 337)]}","{'A233': 0.6949152542372882, 'A234': 0.3050847457627119}",A233,,"    @GetMapping(""/export/json"")
    public ResponseEntity<byte[]> exportAuditDataJson(
            @RequestParam(value = ""type"", required = false) String type,
            @RequestParam(value = ""principal"", required = false) String principal,
            @RequestParam(value = ""startDate"", required = false)
                    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
                    LocalDate startDate,
            @RequestParam(value = ""endDate"", required = false)
                    @DateTimeFormat(iso = DateTimeFormat.ISO.DATE)
                    LocalDate endDate) {

        // Get data with same filtering as getAuditData
        List<PersistentAuditEvent> events;

        if (type != null && principal != null && startDate != null && endDate != null) {
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events =
                    auditRepository.findAllByPrincipalAndTypeAndTimestampBetweenForExport(
                            principal, type, start, end);
        } else if (type != null && principal != null) {
            events = auditRepository.findAllByPrincipalAndTypeForExport(principal, type);
        } else if (type != null && startDate != null && endDate != null) {
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events = auditRepository.findAllByTypeAndTimestampBetweenForExport(type, start, end);
        } else if (principal != null && startDate != null && endDate != null) {
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events =
                    auditRepository.findAllByPrincipalAndTimestampBetweenForExport(
                            principal, start, end);
        } else if (startDate != null && endDate != null) {
            Instant start = startDate.atStartOfDay(ZoneId.systemDefault()).toInstant();
            Instant end = endDate.plusDays(1).atStartOfDay(ZoneId.systemDefault()).toInstant();
            events = auditRepository.findAllByTimestampBetweenForExport(start, end);
        } else if (type != null) {
            events = auditRepository.findByTypeForExport(type);
        } else if (principal != null) {
            events = auditRepository.findAllByPrincipalForExport(principal);
        } else {
            events = auditRepository.findAll();
        }

        // Convert to JSON
        try {
            byte[] jsonBytes = objectMapper.writeValueAsBytes(events);

            // Set up HTTP headers for download
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setContentDispositionFormData(""attachment"", ""audit_export.json"");

            return ResponseEntity.ok().headers(headers).body(jsonBytes);
        } catch (JsonProcessingException e) {
            log.error(""Error serializing audit events to JSON"", e);
            return ResponseEntity.internalServerError().build();
        }
    }
"
stirling.software.proprietary.controller,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/controller/AuditDashboardController.java,AuditDashboardController,escapeCSV,String escapeCSV(String),"[345, 351]","{'A233': [(345, 351)]}",{'A233': 1.0},A233,,"    private String escapeCSV(String field) {
        if (field == null) {
            return """";
        }
        // Replace double quotes with two double quotes and wrap in quotes
        return ""\"""" + field.replace(""\"""", ""\""\"""") + ""\"""";
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditCleanupService.java,AuditCleanupService,cleanupOldAuditEvents,void cleanupOldAuditEvents(),"[36, 59]","{'A233': [(36, 40), (42, 45), (47, 47), (49, 51), (56, 59)], 'A234': [(41, 41), (46, 46), (48, 48), (52, 55)]}","{'A233': 0.7083333333333334, 'A234': 0.2916666666666667}",A233,,"    @Scheduled(fixedDelay = 1, initialDelay = 1, timeUnit = TimeUnit.DAYS)
    public void cleanupOldAuditEvents() {
        if (!auditConfig.isEnabled()) {
            return;
        }

        int retentionDays = auditConfig.getRetentionDays();
        if (retentionDays <= 0) {
            return;
        }

        log.info(""Starting audit cleanup for events older than {} days"", retentionDays);

        try {
            Instant cutoffDate = Instant.now().minus(retentionDays, ChronoUnit.DAYS);
            int totalDeleted = batchDeleteEvents(cutoffDate);
            log.info(
                    ""Successfully cleaned up {} audit events older than {}"",
                    totalDeleted,
                    cutoffDate);
        } catch (Exception e) {
            log.error(""Error cleaning up old audit events"", e);
        }
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditCleanupService.java,AuditCleanupService,batchDeleteEvents,int batchDeleteEvents(Instant),"[65, 87]","{'A233': [(65, 67), (69, 71), (73, 77), (79, 84), (86, 87)], 'A234': [(68, 68), (72, 72), (78, 78), (85, 85)]}","{'A233': 0.8260869565217391, 'A234': 0.17391304347826086}",A233,,"    private int batchDeleteEvents(Instant cutoffDate) {
        int totalDeleted = 0;
        boolean hasMore = true;

        while (hasMore) {
            // Start a new transaction for each batch
            List<Long> batchIds = findBatchOfIdsToDelete(cutoffDate);

            if (batchIds.isEmpty()) {
                hasMore = false;
            } else {
                int deleted = deleteBatch(batchIds);
                totalDeleted += deleted;

                // If we got fewer records than the batch size, we're done
                if (batchIds.size() < BATCH_SIZE) {
                    hasMore = false;
                }
            }
        }

        return totalDeleted;
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditCleanupService.java,AuditCleanupService,findBatchOfIdsToDelete,List<Long> findBatchOfIdsToDelete(Instant),"[90, 94]","{'A233': [(90, 94)]}",{'A233': 1.0},A233,,"    @Transactional(readOnly = true)
    private List<Long> findBatchOfIdsToDelete(Instant cutoffDate) {
        PageRequest pageRequest = PageRequest.of(0, BATCH_SIZE, Sort.by(""id""));
        return auditRepository.findIdsForBatchDeletion(cutoffDate, pageRequest);
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditCleanupService.java,AuditCleanupService,deleteBatch,int deleteBatch(List<Long>),"[97, 108]","{'A233': [(97, 101), (103, 105), (107, 108)], 'A234': [(102, 102), (106, 106)]}","{'A233': 0.8333333333333334, 'A234': 0.16666666666666666}",A233,,"    @Transactional
    private int deleteBatch(List<Long> batchIds) {
        if (batchIds.isEmpty()) {
            return 0;
        }

        int batchSize = batchIds.size();
        auditRepository.deleteAllByIdInBatch(batchIds);
        log.debug(""Deleted batch of {} audit events"", batchSize);

        return batchSize;
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditService.java,AuditService,audit,"void audit(AuditEventType,Map<String, Object>,AuditLevel)","[47, 57]","{'A233': [(47, 48), (52, 53), (55, 57)], 'A234': [(49, 51), (54, 54)]}","{'A233': 0.6363636363636364, 'A234': 0.36363636363636365}",A233,,"    public void audit(AuditEventType type, Map<String, Object> data, AuditLevel level) {
        // Skip auditing if this level is not enabled or if not Enterprise edition
        if (!auditConfig.isEnabled()
                || !auditConfig.getAuditLevel().includes(level)
                || !runningEE) {
            return;
        }

        String principal = getCurrentUsername();
        repository.add(new AuditEvent(principal, type.name(), data));
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditService.java,AuditService,audit,"void audit(AuditEventType,Map<String, Object>)","[66, 69]","{'A233': [(66, 69)]}",{'A233': 1.0},A233,,"    public void audit(AuditEventType type, Map<String, Object> data) {
        // Default to STANDARD level
        audit(type, data, AuditLevel.STANDARD);
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditService.java,AuditService,audit,"void audit(String,AuditEventType,Map<String, Object>,AuditLevel)","[80, 88]","{'A233': [(82, 85), (87, 88)], 'A234': [(80, 81), (86, 86)]}","{'A233': 0.6666666666666666, 'A234': 0.3333333333333333}",A233,,"    public void audit(
            String principal, AuditEventType type, Map<String, Object> data, AuditLevel level) {
        // Skip auditing if this level is not enabled or if not Enterprise edition
        if (!auditConfig.isLevelEnabled(level) || !runningEE) {
            return;
        }

        repository.add(new AuditEvent(principal, type.name(), data));
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditService.java,AuditService,audit,"void audit(String,AuditEventType,Map<String, Object>)","[98, 101]","{'A233': [(98, 101)]}",{'A233': 1.0},A233,,"    public void audit(String principal, AuditEventType type, Map<String, Object> data) {
        // Default to STANDARD level
        audit(principal, type, data, AuditLevel.STANDARD);
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditService.java,AuditService,audit,"void audit(String,Map<String, Object>,AuditLevel)","[111, 119]","{'A233': [(111, 115), (117, 119)], 'A234': [(116, 116)]}","{'A233': 0.8888888888888888, 'A234': 0.1111111111111111}",A233,,"    public void audit(String type, Map<String, Object> data, AuditLevel level) {
        // Skip auditing if this level is not enabled or if not Enterprise edition
        if (!auditConfig.isLevelEnabled(level) || !runningEE) {
            return;
        }

        String principal = getCurrentUsername();
        repository.add(new AuditEvent(principal, type, data));
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditService.java,AuditService,audit,"void audit(String,Map<String, Object>)","[128, 131]","{'A233': [(128, 131)]}",{'A233': 1.0},A233,,"    public void audit(String type, Map<String, Object> data) {
        // Default to STANDARD level
        audit(type, data, AuditLevel.STANDARD);
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditService.java,AuditService,audit,"void audit(String,String,Map<String, Object>,AuditLevel)","[142, 149]","{'A233': [(142, 146), (148, 149)], 'A234': [(147, 147)]}","{'A233': 0.875, 'A234': 0.125}",A233,,"    public void audit(String principal, String type, Map<String, Object> data, AuditLevel level) {
        // Skip auditing if this level is not enabled or if not Enterprise edition
        if (!auditConfig.isLevelEnabled(level) || !runningEE) {
            return;
        }

        repository.add(new AuditEvent(principal, type, data));
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditService.java,AuditService,audit,"void audit(String,String,Map<String, Object>)","[159, 162]","{'A233': [(159, 162)]}",{'A233': 1.0},A233,,"    public void audit(String principal, String type, Map<String, Object> data) {
        // Default to STANDARD level
        audit(principal, type, data, AuditLevel.STANDARD);
    }
"
stirling.software.proprietary.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/service/AuditService.java,AuditService,getCurrentUsername,String getCurrentUsername(),"[165, 168]","{'A233': [(165, 168)]}",{'A233': 1.0},A233,,"    private String getCurrentUsername() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        return (auth != null && auth.getName() != null) ? auth.getName() : ""system"";
    }
"
stirling.software.proprietary.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/model/Team.java,Team,addUser,void addUser(User),"[35, 38]","{'A233': [(35, 38)]}",{'A233': 1.0},A233,,"    public void addUser(User user) {
        users.add(user);
        user.setTeam(this);
    }
"
stirling.software.proprietary.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/model/Team.java,Team,removeUser,void removeUser(User),"[40, 43]","{'A233': [(40, 43)]}",{'A233': 1.0},A233,,"    public void removeUser(User user) {
        users.remove(user);
        user.setTeam(null);
    }
"
stirling.software.proprietary.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/config/AuditConfigurationProperties.java,AuditConfigurationProperties,getAuditLevel,AuditLevel getAuditLevel(),"[52, 54]","{'A233': [(52, 54)]}",{'A233': 1.0},A233,,"    public AuditLevel getAuditLevel() {
        return AuditLevel.fromInt(level);
    }
"
stirling.software.proprietary.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/config/AuditConfigurationProperties.java,AuditConfigurationProperties,isLevelEnabled,boolean isLevelEnabled(AuditLevel),"[62, 64]","{'A233': [(62, 64)]}",{'A233': 1.0},A233,,"    public boolean isLevelEnabled(AuditLevel requiredLevel) {
        return enabled && getAuditLevel().includes(requiredLevel);
    }
"
stirling.software.proprietary.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/config/AuditConfigurationProperties.java,AuditConfigurationProperties,getEffectiveRetentionDays,int getEffectiveRetentionDays(),"[71, 74]","{'A233': [(71, 74)]}",{'A233': 1.0},A233,,"    public int getEffectiveRetentionDays() {
        // 0 means infinite retention
        return retentionDays <= 0 ? -1 : retentionDays;
    }
"
stirling.software.proprietary.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/config/AsyncConfig.java,AsyncConfig.MDCContextTaskDecorator,decorate,Runnable decorate(Runnable),"[22, 40]","{'A233': [(22, 25), (27, 40)], 'A234': [(26, 26)]}","{'A233': 0.9473684210526315, 'A234': 0.05263157894736842}",A233,,"        @Override
        public Runnable decorate(Runnable runnable) {
            // Capture the MDC context from the current thread
            Map<String, String> contextMap = MDC.getCopyOfContextMap();

            return () -> {
                try {
                    // Set the captured context on the worker thread
                    if (contextMap != null) {
                        MDC.setContextMap(contextMap);
                    }
                    // Execute the task
                    runnable.run();
                } finally {
                    // Clear the context to prevent memory leaks
                    MDC.clear();
                }
            };
        }
"
stirling.software.proprietary.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/config/AsyncConfig.java,AsyncConfig,auditExecutor,Executor auditExecutor(),"[43, 56]","{'A233': [(43, 49), (51, 52), (54, 56)], 'A234': [(50, 50), (53, 53)]}","{'A233': 0.8571428571428571, 'A234': 0.14285714285714285}",A233,,"    @Bean(name = ""auditExecutor"")
    public Executor auditExecutor() {
        ThreadPoolTaskExecutor exec = new ThreadPoolTaskExecutor();
        exec.setCorePoolSize(2);
        exec.setMaxPoolSize(8);
        exec.setQueueCapacity(1_000);
        exec.setThreadNamePrefix(""audit-"");

        // Set the task decorator to propagate MDC context
        exec.setTaskDecorator(new MDCContextTaskDecorator());

        exec.initialize();
        return exec;
    }
"
stirling.software.proprietary.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/config/CustomAuditEventRepository.java,CustomAuditEventRepository,find,"List<AuditEvent> find(String,Instant,String)","[34, 37]","{'A233': [(34, 37)]}",{'A233': 1.0},A233,,"    @Override
    public List<AuditEvent> find(String p, Instant after, String type) {
        return List.of();
    }
"
stirling.software.proprietary.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/config/CustomAuditEventRepository.java,CustomAuditEventRepository,add,void add(AuditEvent),"[40, 73]","{'A233': [(40, 44), (48, 48), (52, 52), (54, 59), (69, 70), (72, 73)], 'A234': [(45, 47), (49, 51), (53, 53), (60, 68), (71, 71)]}","{'A233': 0.5, 'A234': 0.5}",A233,,"    @Async(""auditExecutor"")
    @Override
    public void add(AuditEvent ev) {
        try {
            Map<String, Object> clean =
                    CollectionUtils.isEmpty(ev.getData())
                            ? Map.of()
                            : SecretMasker.mask(ev.getData());

            if (clean.isEmpty() || (clean.size() == 1 && clean.containsKey(""details""))) {
                return;
            }
            String rid = MDC.get(""requestId"");

            if (rid != null) {
                clean = new java.util.HashMap<>(clean);
                clean.put(""requestId"", rid);
            }

            String auditEventData = mapper.writeValueAsString(clean);
            log.debug(""AuditEvent data (JSON): {}"", auditEventData);

            PersistentAuditEvent ent =
                    PersistentAuditEvent.builder()
                            .principal(ev.getPrincipal())
                            .type(ev.getType())
                            .data(auditEventData)
                            .timestamp(ev.getTimestamp())
                            .build();
            repo.save(ent);
        } catch (Exception e) {
            e.printStackTrace(); // fail-open
        }
    }
"
stirling.software.proprietary.web,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/web/AuditWebFilter.java,AuditWebFilter,doFilterInternal,"void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)","[34, 92]","{'A233': [(34, 34), (39, 45), (47, 50), (52, 55), (57, 60), (62, 64), (70, 71), (73, 78), (80, 81), (83, 92)], 'A234': [(35, 38), (46, 46), (51, 51), (56, 56), (61, 61), (65, 69), (72, 72), (79, 79), (82, 82)]}","{'A233': 0.7288135593220338, 'A234': 0.2711864406779661}",A233,,"    @Override
    protected void doFilterInternal(
            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        // Store key request info in MDC for logging and later audit use
        try {
            // Store request headers
            String userAgent = request.getHeader(USER_AGENT_HEADER);
            if (userAgent != null) {
                MDC.put(""userAgent"", userAgent);
            }

            String referer = request.getHeader(REFERER_HEADER);
            if (referer != null) {
                MDC.put(""referer"", referer);
            }

            String acceptLanguage = request.getHeader(ACCEPT_LANGUAGE_HEADER);
            if (acceptLanguage != null) {
                MDC.put(""acceptLanguage"", acceptLanguage);
            }

            String contentType = request.getHeader(CONTENT_TYPE_HEADER);
            if (contentType != null) {
                MDC.put(""contentType"", contentType);
            }

            // Store authenticated user roles if available
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            if (auth != null && auth.getAuthorities() != null) {
                String roles =
                        auth.getAuthorities().stream()
                                .map(a -> a.getAuthority())
                                .reduce((a, b) -> a + "","" + b)
                                .orElse("""");
                MDC.put(""userRoles"", roles);
            }

            // Store query parameters (without values for privacy)
            Map<String, String[]> parameterMap = request.getParameterMap();
            if (parameterMap != null && !parameterMap.isEmpty()) {
                String params = String.join("","", parameterMap.keySet());
                MDC.put(""queryParams"", params);
            }

            // Continue with the filter chain
            filterChain.doFilter(request, response);

        } finally {
            // Clear MDC after request is processed
            MDC.remove(""userAgent"");
            MDC.remove(""referer"");
            MDC.remove(""acceptLanguage"");
            MDC.remove(""contentType"");
            MDC.remove(""userRoles"");
            MDC.remove(""queryParams"");
        }
    }
"
stirling.software.proprietary.web,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/web/CorrelationIdFilter.java,CorrelationIdFilter,doFilterInternal,"void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)","[28, 46]","{'A233': [(28, 28), (31, 46)], 'A234': [(29, 30)]}","{'A233': 0.8947368421052632, 'A234': 0.10526315789473684}",A233,,"    @Override
    protected void doFilterInternal(
            HttpServletRequest req, HttpServletResponse res, FilterChain chain)
            throws ServletException, IOException {

        try {
            String id = req.getHeader(HEADER);
            if (!StringUtils.hasText(id)) {
                id = UUID.randomUUID().toString();
            }
            req.setAttribute(MDC_KEY, id);
            MDC.put(MDC_KEY, id);
            res.setHeader(HEADER, Newlines.stripAll(id));

            chain.doFilter(req, res);
        } finally {
            MDC.remove(MDC_KEY);
        }
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditLevel.java,AuditLevel,getLevel,int getLevel(),"[36, 38]","{'A233': [(36, 38)]}",{'A233': 1.0},A233,,"    public int getLevel() {
        return level;
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditLevel.java,AuditLevel,includes,boolean includes(AuditLevel),"[46, 48]","{'A233': [(46, 48)]}",{'A233': 1.0},A233,,"    public boolean includes(AuditLevel otherLevel) {
        return this.level >= otherLevel.level;
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditLevel.java,AuditLevel,fromInt,AuditLevel fromInt(int),"[56, 68]","{'A233': [(56, 58), (60, 64), (66, 68)], 'A234': [(59, 59), (65, 65)]}","{'A233': 0.8461538461538461, 'A234': 0.15384615384615385}",A233,,"    public static AuditLevel fromInt(int level) {
        // Ensure level is within valid bounds
        int boundedLevel = Math.min(Math.max(level, 0), 3);

        for (AuditLevel auditLevel : values()) {
            if (auditLevel.level == boundedLevel) {
                return auditLevel;
            }
        }

        // Default to STANDARD if somehow we didn't match
        return STANDARD;
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditAspect.java,AuditAspect,auditMethod,Object auditMethod(ProceedingJoinPoint),"[36, 138]","{'A233': [(36, 40), (42, 46), (48, 48), (52, 52), (55, 61), (63, 63), (69, 71), (73, 78), (80, 81), (83, 83), (89, 92), (94, 99), (101, 103), (106, 107), (111, 118), (128, 138)], 'A234': [(41, 41), (47, 47), (49, 51), (53, 54), (62, 62), (64, 68), (72, 72), (79, 79), (82, 82), (84, 88), (93, 93), (100, 100), (104, 105), (108, 110), (119, 127)]}","{'A233': 0.6407766990291263, 'A234': 0.3592233009708738}",A233,,"    @Around(""@annotation(stirling.software.proprietary.audit.Audited)"")
    public Object auditMethod(ProceedingJoinPoint joinPoint) throws Throwable {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Method method = signature.getMethod();
        Audited auditedAnnotation = method.getAnnotation(Audited.class);

        // Fast path: use unified check to determine if we should audit
        // This avoids all data collection if auditing is disabled
        if (!AuditUtils.shouldAudit(method, auditConfig)) {
            return joinPoint.proceed();
        }

        // Only create the map once we know we'll use it
        Map<String, Object> auditData =
                AuditUtils.createBaseAuditData(joinPoint, auditedAnnotation.level());

        // Add HTTP information if we're in a web context
        ServletRequestAttributes attrs =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        if (attrs != null) {
            HttpServletRequest req = attrs.getRequest();
            String path = req.getRequestURI();
            String httpMethod = req.getMethod();
            AuditUtils.addHttpData(auditData, httpMethod, path, auditedAnnotation.level());
            AuditUtils.addFileData(auditData, joinPoint, auditedAnnotation.level());
        }

        // Add arguments if requested and if at VERBOSE level, or if specifically requested
        boolean includeArgs =
                auditedAnnotation.includeArgs()
                        && (auditedAnnotation.level() == AuditLevel.VERBOSE
                                || auditConfig.getAuditLevel() == AuditLevel.VERBOSE);

        if (includeArgs) {
            AuditUtils.addMethodArguments(auditData, joinPoint, AuditLevel.VERBOSE);
        }

        // Record start time for latency calculation
        long startTime = System.currentTimeMillis();
        Object result;
        try {
            // Execute the method
            result = joinPoint.proceed();

            // Add success status
            auditData.put(""status"", ""success"");

            // Add result if requested and if at VERBOSE level
            boolean includeResult =
                    auditedAnnotation.includeResult()
                            && (auditedAnnotation.level() == AuditLevel.VERBOSE
                                    || auditConfig.getAuditLevel() == AuditLevel.VERBOSE);

            if (includeResult && result != null) {
                // Use safe string conversion with size limiting
                auditData.put(""result"", AuditUtils.safeToString(result, 1000));
            }

            return result;
        } catch (Throwable ex) {
            // Always add failure information regardless of level
            auditData.put(""status"", ""failure"");
            auditData.put(""errorType"", ex.getClass().getName());
            auditData.put(""errorMessage"", ex.getMessage());

            // Re-throw the exception
            throw ex;
        } finally {
            // Add timing information - use isHttpRequest=false to ensure we get timing for non-HTTP
            // methods
            HttpServletResponse resp = attrs != null ? attrs.getResponse() : null;
            boolean isHttpRequest = attrs != null;
            AuditUtils.addTimingData(
                    auditData, startTime, resp, auditedAnnotation.level(), isHttpRequest);

            // Resolve the event type based on annotation and context
            String httpMethod = null;
            String path = null;
            if (attrs != null) {
                HttpServletRequest req = attrs.getRequest();
                httpMethod = req.getMethod();
                path = req.getRequestURI();
            }

            AuditEventType eventType =
                    AuditUtils.resolveEventType(
                            method,
                            joinPoint.getTarget().getClass(),
                            path,
                            httpMethod,
                            auditedAnnotation);

            // Check if we should use string type instead
            String typeString = auditedAnnotation.typeString();
            if (eventType == AuditEventType.HTTP_REQUEST && StringUtils.isNotEmpty(typeString)) {
                // Use the string type (for backward compatibility)
                auditService.audit(typeString, auditData, auditedAnnotation.level());
            } else {
                // Use the enum type (preferred)
                auditService.audit(eventType, auditData, auditedAnnotation.level());
            }
        }
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditEventType.java,AuditEventType,getDescription,String getDescription(),"[31, 33]","{'A233': [(31, 33)]}",{'A233': 1.0},A233,,"    public String getDescription() {
        return description;
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditEventType.java,AuditEventType,fromString,AuditEventType fromString(String),"[42, 59]","{'A233': [(42, 45), (47, 51), (54, 59)], 'A234': [(46, 46), (52, 53)]}","{'A233': 0.8333333333333334, 'A234': 0.16666666666666666}",A233,,"    public static AuditEventType fromString(String type) {
        if (type == null) {
            return null;
        }

        try {
            return AuditEventType.valueOf(type);
        } catch (IllegalArgumentException e) {
            // If the exact enum name doesn't match, try finding a similar one
            for (AuditEventType eventType : values()) {
                if (eventType.name().equalsIgnoreCase(type)
                        || eventType.getDescription().equalsIgnoreCase(type)) {
                    return eventType;
                }
            }
            return null;
        }
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,createBaseAuditData,"Map<String, Object> createBaseAuditData(ProceedingJoinPoint,AuditLevel)","[44, 68]","{'A233': [(46, 46), (48, 49), (51, 57), (59, 61), (65, 65), (67, 68)], 'A234': [(44, 45), (47, 47), (50, 50), (58, 58), (62, 64), (66, 66)]}","{'A233': 0.64, 'A234': 0.36}",A233,,"    public static Map<String, Object> createBaseAuditData(
            ProceedingJoinPoint joinPoint, AuditLevel auditLevel) {
        Map<String, Object> data = new HashMap<>();

        // Common data for all levels
        data.put(""timestamp"", Instant.now().toString());

        // Add principal if available
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && auth.getName() != null) {
            data.put(""principal"", auth.getName());
        } else {
            data.put(""principal"", ""system"");
        }

        // Add class name and method name only at VERBOSE level
        if (auditLevel.includes(AuditLevel.VERBOSE)) {
            data.put(""className"", joinPoint.getTarget().getClass().getName());
            data.put(
                    ""methodName"",
                    ((MethodSignature) joinPoint.getSignature()).getMethod().getName());
        }

        return data;
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,addHttpData,"void addHttpData(Map<String, Object>,String,String,AuditLevel)","[78, 128]","{'A233': [(80, 82), (84, 86), (88, 88), (91, 93), (95, 98), (100, 102), (106, 106), (108, 108), (114, 114), (118, 120), (122, 128)], 'A234': [(78, 79), (83, 83), (87, 87), (89, 90), (94, 94), (99, 99), (103, 105), (107, 107), (109, 113), (115, 117), (121, 121)]}","{'A233': 0.5882352941176471, 'A234': 0.4117647058823529}",A233,,"    public static void addHttpData(
            Map<String, Object> data, String httpMethod, String path, AuditLevel auditLevel) {
        if (httpMethod == null || path == null) {
            return; // Skip if we don't have basic HTTP info
        }

        // BASIC level HTTP data
        data.put(""httpMethod"", httpMethod);
        data.put(""path"", path);

        // Get request attributes safely
        ServletRequestAttributes attrs =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        if (attrs == null) {
            return; // No request context available
        }

        HttpServletRequest req = attrs.getRequest();
        if (req == null) {
            return; // No request available
        }

        // STANDARD level HTTP data
        if (auditLevel.includes(AuditLevel.STANDARD)) {
            data.put(""clientIp"", req.getRemoteAddr());
            data.put(
                    ""sessionId"",
                    req.getSession(false) != null ? req.getSession(false).getId() : null);
            data.put(""requestId"", MDC.get(""requestId""));

            // Form data for POST/PUT/PATCH
            if ((""POST"".equalsIgnoreCase(httpMethod)
                            || ""PUT"".equalsIgnoreCase(httpMethod)
                            || ""PATCH"".equalsIgnoreCase(httpMethod))
                    && req.getContentType() != null) {

                String contentType = req.getContentType();
                if (contentType.contains(""application/x-www-form-urlencoded"")
                        || contentType.contains(""multipart/form-data"")) {

                    Map<String, String[]> params = new HashMap<>(req.getParameterMap());
                    // Remove CSRF token from logged parameters
                    params.remove(""_csrf"");

                    if (!params.isEmpty()) {
                        data.put(""formParams"", params);
                    }
                }
            }
        }
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,addFileData,"void addFileData(Map<String, Object>,ProceedingJoinPoint,AuditLevel)","[137, 162]","{'A233': [(139, 139), (145, 146), (158, 162)], 'A234': [(137, 138), (140, 144), (147, 157)]}","{'A233': 0.3076923076923077, 'A234': 0.6923076923076923}",A234,,"    public static void addFileData(
            Map<String, Object> data, ProceedingJoinPoint joinPoint, AuditLevel auditLevel) {
        if (auditLevel.includes(AuditLevel.STANDARD)) {
            List<MultipartFile> files =
                    Arrays.stream(joinPoint.getArgs())
                            .filter(a -> a instanceof MultipartFile)
                            .map(a -> (MultipartFile) a)
                            .collect(Collectors.toList());

            if (!files.isEmpty()) {
                List<Map<String, Object>> fileInfos =
                        files.stream()
                                .map(
                                        f -> {
                                            Map<String, Object> m = new HashMap<>();
                                            m.put(""name"", f.getOriginalFilename());
                                            m.put(""size"", f.getSize());
                                            m.put(""type"", f.getContentType());
                                            return m;
                                        })
                                .collect(Collectors.toList());

                data.put(""files"", fileInfos);
            }
        }
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,addMethodArguments,"void addMethodArguments(Map<String, Object>,ProceedingJoinPoint,AuditLevel)","[171, 190]","{'A233': [(173, 178), (188, 190)], 'A234': [(171, 172), (179, 187)]}","{'A233': 0.45, 'A234': 0.55}",A234,,"    public static void addMethodArguments(
            Map<String, Object> data, ProceedingJoinPoint joinPoint, AuditLevel auditLevel) {
        if (auditLevel.includes(AuditLevel.VERBOSE)) {
            MethodSignature sig = (MethodSignature) joinPoint.getSignature();
            String[] names = sig.getParameterNames();
            Object[] vals = joinPoint.getArgs();
            if (names != null && vals != null) {
                IntStream.range(0, names.length)
                        .forEach(
                                i -> {
                                    if (vals[i] != null) {
                                        // Convert objects to safe string representation
                                        data.put(""arg_"" + names[i], safeToString(vals[i], 500));
                                    } else {
                                        data.put(""arg_"" + names[i], null);
                                    }
                                });
            }
        }
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,safeToString,"String safeToString(Object,int)","[199, 228]","{'A233': [(199, 202), (204, 216), (218, 221), (223, 228)], 'A234': [(203, 203), (217, 217), (222, 222)]}","{'A233': 0.9, 'A234': 0.1}",A233,,"    public static String safeToString(Object obj, int maxLength) {
        if (obj == null) {
            return ""null"";
        }

        String result;
        try {
            // Handle common types directly to avoid toString() overhead
            if (obj instanceof String) {
                result = (String) obj;
            } else if (obj instanceof Number || obj instanceof Boolean) {
                result = obj.toString();
            } else if (obj instanceof byte[]) {
                result = ""[binary data length="" + ((byte[]) obj).length + ""]"";
            } else {
                // For complex objects, use toString but handle exceptions
                result = obj.toString();
            }

            // Truncate if necessary
            if (result != null && result.length() > maxLength) {
                return StringUtils.truncate(result, maxLength - 3) + ""..."";
            }

            return result;
        } catch (Exception e) {
            // If toString() fails, return the class name
            return ""["" + obj.getClass().getName() + "" - toString() failed]"";
        }
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,shouldAudit,"boolean shouldAudit(Method,AuditConfigurationProperties)","[237, 250]","{'A233': [(237, 241), (243, 244), (248, 250)], 'A234': [(242, 242), (245, 247)]}","{'A233': 0.7142857142857143, 'A234': 0.2857142857142857}",A233,,"    public static boolean shouldAudit(Method method, AuditConfigurationProperties auditConfig) {
        // First check if audit is globally enabled - fast path
        if (!auditConfig.isEnabled()) {
            return false;
        }

        // Check for annotation override
        Audited auditedAnnotation = method.getAnnotation(Audited.class);
        AuditLevel requiredLevel =
                (auditedAnnotation != null) ? auditedAnnotation.level() : AuditLevel.BASIC;

        // Check if the required level is enabled
        return auditConfig.getAuditLevel().includes(requiredLevel);
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,addTimingData,"void addTimingData(Map<String, Object>,long,HttpServletResponse,AuditLevel,boolean)","[261, 283]","{'A233': [(267, 272), (274, 283)], 'A234': [(261, 266), (273, 273)]}","{'A233': 0.6956521739130435, 'A234': 0.30434782608695654}",A233,,"    public static void addTimingData(
            Map<String, Object> data,
            long startTime,
            HttpServletResponse response,
            AuditLevel level,
            boolean isHttpRequest) {
        if (level.includes(AuditLevel.STANDARD)) {
            // For HTTP requests, let ControllerAuditAspect handle timing separately
            // For non-HTTP methods, add execution time here
            if (!isHttpRequest) {
                data.put(""latencyMs"", System.currentTimeMillis() - startTime);
            }

            // Add HTTP status code if available
            if (response != null) {
                try {
                    data.put(""statusCode"", response.getStatus());
                } catch (Exception e) {
                    // Ignore - response might be in an inconsistent state
                }
            }
        }
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,resolveEventType,"AuditEventType resolveEventType(Method,Class<?>,String,String,Audited)","[295, 332]","{'A233': [(301, 304), (306, 309), (311, 311), (318, 318), (322, 322), (325, 328), (330, 332)], 'A234': [(295, 300), (305, 305), (310, 310), (312, 317), (319, 321), (323, 324), (329, 329)]}","{'A233': 0.47368421052631576, 'A234': 0.5263157894736842}",A234,,"    public static AuditEventType resolveEventType(
            Method method,
            Class<?> controller,
            String path,
            String httpMethod,
            Audited annotation) {
        // First check if we have an explicit annotation
        if (annotation != null && annotation.type() != AuditEventType.HTTP_REQUEST) {
            return annotation.type();
        }

        // For HTTP methods, infer based on controller and path
        if (httpMethod != null && path != null) {
            String cls = controller.getSimpleName().toLowerCase();
            String pkg = controller.getPackage().getName().toLowerCase();

            if (""GET"".equals(httpMethod)) return AuditEventType.HTTP_REQUEST;

            if (cls.contains(""user"")
                    || cls.contains(""auth"")
                    || pkg.contains(""auth"")
                    || path.startsWith(""/user"")
                    || path.startsWith(""/login"")) {
                return AuditEventType.USER_PROFILE_UPDATE;
            } else if (cls.contains(""admin"")
                    || path.startsWith(""/admin"")
                    || path.startsWith(""/settings"")) {
                return AuditEventType.SETTINGS_CHANGED;
            } else if (cls.contains(""file"")
                    || path.startsWith(""/file"")
                    || path.matches(""(?i).*/(upload|download)/.*"")) {
                return AuditEventType.FILE_OPERATION;
            }
        }

        // Default for non-HTTP methods or when no specific match
        return AuditEventType.PDF_PROCESS;
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,getEffectiveAuditLevel,"AuditLevel getEffectiveAuditLevel(Method,AuditLevel,AuditConfigurationProperties)","[342, 352]","{'A233': [(344, 348), (350, 352)], 'A234': [(342, 343), (349, 349)]}","{'A233': 0.7272727272727273, 'A234': 0.2727272727272727}",A233,,"    public static AuditLevel getEffectiveAuditLevel(
            Method method, AuditLevel defaultLevel, AuditConfigurationProperties auditConfig) {
        Audited auditedAnnotation = method.getAnnotation(Audited.class);
        if (auditedAnnotation != null) {
            // Method has @Audited - use its level
            return auditedAnnotation.level();
        }

        // Use default level (typically from global config)
        return defaultLevel;
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,determineAuditEventType,"AuditEventType determineAuditEventType(Method,Class<?>,String,String)","[363, 394]","{'A233': [(365, 369), (371, 373), (375, 375), (382, 382), (386, 386), (389, 394)], 'A234': [(363, 364), (370, 370), (374, 374), (376, 381), (383, 385), (387, 388)]}","{'A233': 0.53125, 'A234': 0.46875}",A233,,"    public static AuditEventType determineAuditEventType(
            Method method, Class<?> controller, String path, String httpMethod) {
        // First check for explicit annotation
        Audited auditedAnnotation = method.getAnnotation(Audited.class);
        if (auditedAnnotation != null) {
            return auditedAnnotation.type();
        }

        // Otherwise infer from controller and path
        String cls = controller.getSimpleName().toLowerCase();
        String pkg = controller.getPackage().getName().toLowerCase();

        if (""GET"".equals(httpMethod)) return AuditEventType.HTTP_REQUEST;

        if (cls.contains(""user"")
                || cls.contains(""auth"")
                || pkg.contains(""auth"")
                || path.startsWith(""/user"")
                || path.startsWith(""/login"")) {
            return AuditEventType.USER_PROFILE_UPDATE;
        } else if (cls.contains(""admin"")
                || path.startsWith(""/admin"")
                || path.startsWith(""/settings"")) {
            return AuditEventType.SETTINGS_CHANGED;
        } else if (cls.contains(""file"")
                || path.startsWith(""/file"")
                || path.matches(""(?i).*/(upload|download)/.*"")) {
            return AuditEventType.FILE_OPERATION;
        } else {
            return AuditEventType.PDF_PROCESS;
        }
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,getCurrentRequest,HttpServletRequest getCurrentRequest(),"[401, 405]","{'A233': [(401, 401), (404, 405)], 'A234': [(402, 403)]}","{'A233': 0.6, 'A234': 0.4}",A233,,"    public static HttpServletRequest getCurrentRequest() {
        ServletRequestAttributes attrs =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        return attrs != null ? attrs.getRequest() : null;
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/AuditUtils.java,AuditUtils,isStaticResourceRequest,boolean isStaticResourceRequest(HttpServletRequest),"[413, 417]","{'A233': [(413, 413), (417, 417)], 'A234': [(414, 416)]}","{'A233': 0.4, 'A234': 0.6}",A234,,"    public static boolean isStaticResourceRequest(HttpServletRequest request) {
        return request != null
                && !RequestUriUtils.isTrackableResource(
                        request.getContextPath(), request.getRequestURI());
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/ControllerAuditAspect.java,ControllerAuditAspect,auditStaticResource,Object auditStaticResource(ProceedingJoinPoint),"[46, 50]","{'A233': [(48, 50)], 'A234': [(46, 47)]}","{'A233': 0.6, 'A234': 0.4}",A233,,"    @Around(
            ""execution(* org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(..))"")
    public Object auditStaticResource(ProceedingJoinPoint jp) throws Throwable {
        return auditController(jp, ""GET"");
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/ControllerAuditAspect.java,ControllerAuditAspect,auditGetMethod,Object auditGetMethod(ProceedingJoinPoint),"[53, 56]","{'A233': [(53, 56)]}",{'A233': 1.0},A233,,"    @Around(""@annotation(org.springframework.web.bind.annotation.GetMapping)"")
    public Object auditGetMethod(ProceedingJoinPoint joinPoint) throws Throwable {
        return auditController(joinPoint, ""GET"");
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/ControllerAuditAspect.java,ControllerAuditAspect,auditPostMethod,Object auditPostMethod(ProceedingJoinPoint),"[59, 62]","{'A233': [(59, 62)]}",{'A233': 1.0},A233,,"    @Around(""@annotation(org.springframework.web.bind.annotation.PostMapping)"")
    public Object auditPostMethod(ProceedingJoinPoint joinPoint) throws Throwable {
        return auditController(joinPoint, ""POST"");
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/ControllerAuditAspect.java,ControllerAuditAspect,auditPutMethod,Object auditPutMethod(ProceedingJoinPoint),"[65, 68]","{'A233': [(65, 68)]}",{'A233': 1.0},A233,,"    @Around(""@annotation(org.springframework.web.bind.annotation.PutMapping)"")
    public Object auditPutMethod(ProceedingJoinPoint joinPoint) throws Throwable {
        return auditController(joinPoint, ""PUT"");
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/ControllerAuditAspect.java,ControllerAuditAspect,auditDeleteMethod,Object auditDeleteMethod(ProceedingJoinPoint),"[71, 74]","{'A233': [(71, 74)]}",{'A233': 1.0},A233,,"    @Around(""@annotation(org.springframework.web.bind.annotation.DeleteMapping)"")
    public Object auditDeleteMethod(ProceedingJoinPoint joinPoint) throws Throwable {
        return auditController(joinPoint, ""DELETE"");
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/ControllerAuditAspect.java,ControllerAuditAspect,auditPatchMethod,Object auditPatchMethod(ProceedingJoinPoint),"[77, 80]","{'A233': [(77, 80)]}",{'A233': 1.0},A233,,"    @Around(""@annotation(org.springframework.web.bind.annotation.PatchMapping)"")
    public Object auditPatchMethod(ProceedingJoinPoint joinPoint) throws Throwable {
        return auditController(joinPoint, ""PATCH"");
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/ControllerAuditAspect.java,ControllerAuditAspect,auditAutoJobMethod,Object auditAutoJobMethod(ProceedingJoinPoint),"[83, 86]","{'A233': [(83, 86)]}",{'A233': 1.0},A233,,"    @Around(""@annotation(stirling.software.common.annotations.AutoJobPostMapping)"")
    public Object auditAutoJobMethod(ProceedingJoinPoint joinPoint) throws Throwable {
        return auditController(joinPoint, ""POST"");
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/ControllerAuditAspect.java,ControllerAuditAspect,auditController,"Object auditController(ProceedingJoinPoint,String)","[88, 188]","{'A233': [(90, 91), (93, 97), (99, 101), (103, 118), (121, 124), (126, 127), (129, 130), (132, 133), (135, 154), (156, 157), (159, 163), (165, 165), (174, 176), (179, 182), (184, 188)], 'A234': [(88, 89), (92, 92), (98, 98), (102, 102), (119, 120), (125, 125), (128, 128), (131, 131), (134, 134), (155, 155), (158, 158), (164, 164), (166, 173), (177, 178), (183, 183)]}","{'A233': 0.7524752475247525, 'A234': 0.24752475247524752}",A233,,"    private Object auditController(ProceedingJoinPoint joinPoint, String httpMethod)
            throws Throwable {
        MethodSignature sig = (MethodSignature) joinPoint.getSignature();
        Method method = sig.getMethod();

        // Fast path: check if auditing is enabled before doing any work
        // This avoids all data collection if auditing is disabled
        if (!AuditUtils.shouldAudit(method, auditConfig)) {
            return joinPoint.proceed();
        }

        // Check if method is explicitly annotated with @Audited
        Audited auditedAnnotation = method.getAnnotation(Audited.class);
        AuditLevel level = auditConfig.getAuditLevel();

        // If @Audited annotation is present, respect its level setting
        if (auditedAnnotation != null) {
            // Use the level from annotation if it's stricter than global level
            level = auditedAnnotation.level();
        }

        String path = getRequestPath(method, httpMethod);

        // Skip static GET resources
        if (""GET"".equals(httpMethod)) {
            HttpServletRequest maybe = AuditUtils.getCurrentRequest();
            if (maybe != null && AuditUtils.isStaticResourceRequest(maybe)) {
                return joinPoint.proceed();
            }
        }

        ServletRequestAttributes attrs =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest req = attrs != null ? attrs.getRequest() : null;
        HttpServletResponse resp = attrs != null ? attrs.getResponse() : null;

        long start = System.currentTimeMillis();

        // Use AuditUtils to create the base audit data
        Map<String, Object> data = AuditUtils.createBaseAuditData(joinPoint, level);

        // Add HTTP-specific information
        AuditUtils.addHttpData(data, httpMethod, path, level);

        // Add file information if present
        AuditUtils.addFileData(data, joinPoint, level);

        // Add method arguments if at VERBOSE level
        if (level.includes(AuditLevel.VERBOSE)) {
            AuditUtils.addMethodArguments(data, joinPoint, level);
        }

        Object result = null;
        try {
            result = joinPoint.proceed();
            data.put(""outcome"", ""success"");
        } catch (Throwable ex) {
            data.put(""outcome"", ""failure"");
            data.put(""errorType"", ex.getClass().getSimpleName());
            data.put(""errorMessage"", ex.getMessage());
            throw ex;
        } finally {
            // Handle timing directly for HTTP requests
            if (level.includes(AuditLevel.STANDARD)) {
                data.put(""latencyMs"", System.currentTimeMillis() - start);
                if (resp != null) data.put(""statusCode"", resp.getStatus());
            }

            // Call AuditUtils but with isHttpRequest=true to skip additional timing
            AuditUtils.addTimingData(data, start, resp, level, true);

            // Add result for VERBOSE level
            if (level.includes(AuditLevel.VERBOSE) && result != null) {
                // Use safe string conversion with size limiting
                data.put(""result"", AuditUtils.safeToString(result, 1000));
            }

            // Resolve the event type using the unified method
            AuditEventType eventType =
                    AuditUtils.resolveEventType(
                            method,
                            joinPoint.getTarget().getClass(),
                            path,
                            httpMethod,
                            auditedAnnotation);

            // Check if we should use string type instead (for backward compatibility)
            if (auditedAnnotation != null) {
                String typeString = auditedAnnotation.typeString();
                if (eventType == AuditEventType.HTTP_REQUEST
                        && StringUtils.isNotEmpty(typeString)) {
                    auditService.audit(typeString, data, level);
                    return result;
                }
            }

            // Use the enum type
            auditService.audit(eventType, data, level);
        }
        return result;
    }
"
stirling.software.proprietary.audit,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/audit/ControllerAuditAspect.java,ControllerAuditAspect,getRequestPath,"String getRequestPath(Method,String)","[192, 212]","{'A233': [(192, 196), (206, 212)], 'A234': [(197, 205)]}","{'A233': 0.5714285714285714, 'A234': 0.42857142857142855}",A233,,"    private String getRequestPath(Method method, String httpMethod) {
        String base = """";
        RequestMapping cm = method.getDeclaringClass().getAnnotation(RequestMapping.class);
        if (cm != null && cm.value().length > 0) base = cm.value()[0];
        String mp = """";
        Annotation ann =
                switch (httpMethod) {
                    case ""GET"" -> method.getAnnotation(GetMapping.class);
                    case ""POST"" -> method.getAnnotation(PostMapping.class);
                    case ""PUT"" -> method.getAnnotation(PutMapping.class);
                    case ""DELETE"" -> method.getAnnotation(DeleteMapping.class);
                    case ""PATCH"" -> method.getAnnotation(PatchMapping.class);
                    default -> null;
                };
        if (ann instanceof GetMapping gm && gm.value().length > 0) mp = gm.value()[0];
        if (ann instanceof PostMapping pm && pm.value().length > 0) mp = pm.value()[0];
        if (ann instanceof PutMapping pum && pum.value().length > 0) mp = pum.value()[0];
        if (ann instanceof DeleteMapping dm && dm.value().length > 0) mp = dm.value()[0];
        if (ann instanceof PatchMapping pam && pam.value().length > 0) mp = pam.value()[0];
        return base + mp;
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/CustomLogoutSuccessHandler.java,CustomLogoutSuccessHandler,onLogoutSuccess,"void onLogoutSuccess(HttpServletRequest,HttpServletResponse,Authentication)","[47, 76]","{'A236': [(51, 51), (55, 55), (58, 58), (60, 64), (66, 68), (72, 73)], 'A237': [(47, 47), (75, 75)], 'A234': [(52, 54), (56, 57), (59, 59), (65, 65), (69, 71), (74, 74), (76, 76)], 'A233': [(48, 50)]}","{'A236': 0.43333333333333335, 'A237': 0.06666666666666667, 'A234': 0.4, 'A233': 0.1}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/CustomLogoutSuccessHandlerTest.java,"    @Override
    @Audited(type = AuditEventType.USER_LOGOUT, level = AuditLevel.BASIC)
    public void onLogoutSuccess(
            HttpServletRequest request, HttpServletResponse response, Authentication authentication)
            throws IOException {
        if (!response.isCommitted()) {
            if (authentication != null) {
                if (authentication instanceof Saml2Authentication samlAuthentication) {
                    // Handle SAML2 logout redirection
                    getRedirect_saml2(request, response, samlAuthentication);
                } else if (authentication instanceof OAuth2AuthenticationToken oAuthToken) {
                    // Handle OAuth2 logout redirection
                    getRedirect_oauth2(request, response, oAuthToken);
                } else if (authentication instanceof UsernamePasswordAuthenticationToken) {
                    // Handle Username/Password logout
                    getRedirectStrategy().sendRedirect(request, response, LOGOUT_PATH);
                } else {
                    // Handle unknown authentication types
                    log.error(
                            ""Authentication class unknown: {}"",
                            authentication.getClass().getSimpleName());
                    getRedirectStrategy().sendRedirect(request, response, LOGOUT_PATH);
                }
            } else {
                // Redirect to login page after logout
                String path = checkForErrors(request);
                getRedirectStrategy().sendRedirect(request, response, path);
            }
        }
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/CustomLogoutSuccessHandler.java,CustomLogoutSuccessHandler,getRedirect_saml2,"void getRedirect_saml2(HttpServletRequest,HttpServletResponse,Saml2Authentication)","[79, 121]","{'A236': [(91, 91), (102, 102), (111, 111), (114, 119)], 'A234': [(79, 90), (92, 101), (103, 110), (112, 113), (120, 121)]}","{'A236': 0.20930232558139536, 'A234': 0.7906976744186046}",A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/CustomLogoutSuccessHandlerTest.java,"    private void getRedirect_saml2(
            HttpServletRequest request,
            HttpServletResponse response,
            Saml2Authentication samlAuthentication)
            throws IOException {

        SAML2 samlConf = applicationProperties.getSecurity().getSaml2();
        String registrationId = samlConf.getRegistrationId();

        CustomSaml2AuthenticatedPrincipal principal =
                (CustomSaml2AuthenticatedPrincipal) samlAuthentication.getPrincipal();

        String nameIdValue = principal.name();

        try {
            // Read certificate from the resource
            Resource certificateResource = samlConf.getSpCert();
            X509Certificate certificate = CertificateUtils.readCertificate(certificateResource);

            List<X509Certificate> certificates = new ArrayList<>();
            certificates.add(certificate);

            // Construct URLs required for SAML configuration
            SamlClient samlClient = getSamlClient(registrationId, samlConf, certificates);

            // Read private key for service provider
            Resource privateKeyResource = samlConf.getPrivateKey();
            RSAPrivateKey privateKey = CertificateUtils.readPrivateKey(privateKeyResource);

            // Set service provider keys for the SamlClient
            samlClient.setSPKeys(certificate, privateKey);

            // Redirect to identity provider for logout. todo: add relay state
            samlClient.redirectToIdentityProvider(response, null, nameIdValue);
        } catch (Exception e) {
            log.error(
                    ""Error retrieving logout URL from Provider {} for user {}"",
                    samlConf.getProvider(),
                    nameIdValue,
                    e);
            getRedirectStrategy().sendRedirect(request, response, LOGOUT_PATH);
        }
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/CustomLogoutSuccessHandler.java,CustomLogoutSuccessHandler,getRedirect_oauth2,"void getRedirect_oauth2(HttpServletRequest,HttpServletResponse,OAuth2AuthenticationToken)","[124, 179]","{'A236': [(129, 129), (131, 131), (133, 133), (138, 139), (166, 177)], 'A234': [(124, 128), (130, 130), (132, 132), (134, 137), (140, 165), (178, 179)]}","{'A236': 0.30357142857142855, 'A234': 0.6964285714285714}",A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/CustomLogoutSuccessHandlerTest.java,"    private void getRedirect_oauth2(
            HttpServletRequest request,
            HttpServletResponse response,
            OAuth2AuthenticationToken oAuthToken)
            throws IOException {
        String registrationId;
        OAUTH2 oauth = applicationProperties.getSecurity().getOauth2();
        String path = checkForErrors(request);

        String redirectUrl = UrlUtils.getOrigin(request) + ""/login?"" + path;
        registrationId = oAuthToken.getAuthorizedClientRegistrationId();

        // Redirect based on OAuth2 provider
        switch (registrationId.toLowerCase()) {
            case ""keycloak"" -> {
                KeycloakProvider keycloak = oauth.getClient().getKeycloak();

                boolean isKeycloak = !keycloak.getIssuer().isBlank();
                boolean isCustomOAuth = !oauth.getIssuer().isBlank();

                String logoutUrl = redirectUrl;

                if (isKeycloak) {
                    logoutUrl = keycloak.getIssuer();
                } else if (isCustomOAuth) {
                    logoutUrl = oauth.getIssuer();
                }
                if (isKeycloak || isCustomOAuth) {
                    logoutUrl +=
                            ""/protocol/openid-connect/logout""
                                    + ""?client_id=""
                                    + oauth.getClientId()
                                    + ""&post_logout_redirect_uri=""
                                    + response.encodeRedirectURL(redirectUrl);
                    log.info(""Redirecting to Keycloak logout URL: {}"", logoutUrl);
                } else {
                    log.info(
                            ""No redirect URL for {} available. Redirecting to default logout URL: {}"",
                            registrationId,
                            logoutUrl);
                }
                response.sendRedirect(logoutUrl);
            }
            case ""github"", ""google"" -> {
                log.info(
                        ""No redirect URL for {} available. Redirecting to default logout URL: {}"",
                        registrationId,
                        redirectUrl);
                response.sendRedirect(redirectUrl);
            }
            default -> {
                log.info(""Redirecting to default logout URL: {}"", redirectUrl);
                response.sendRedirect(redirectUrl);
            }
        }
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/CustomLogoutSuccessHandler.java,CustomLogoutSuccessHandler,getSamlClient,"SamlClient getSamlClient(String,SAML2,List<X509Certificate>)","[181, 203]","{'A236': [(181, 183), (185, 203)], 'A239': [(184, 184)]}","{'A236': 0.9565217391304348, 'A239': 0.043478260869565216}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/CustomLogoutSuccessHandlerTest.java,"    private SamlClient getSamlClient(
            String registrationId, SAML2 samlConf, List<X509Certificate> certificates)
            throws SamlException {
        String serverUrl = appConfig.getBaseUrl() + "":"" + appConfig.getServerPort();

        String relyingPartyIdentifier =
                serverUrl + ""/saml2/service-provider-metadata/"" + registrationId;

        String assertionConsumerServiceUrl = serverUrl + ""/login/saml2/sso/"" + registrationId;

        String idpSLOUrl = samlConf.getIdpSingleLogoutUrl();

        String idpIssuer = samlConf.getIdpIssuer();

        // Create SamlClient instance for SAML logout
        return new SamlClient(
                relyingPartyIdentifier,
                assertionConsumerServiceUrl,
                idpSLOUrl,
                idpIssuer,
                certificates,
                SamlClient.SamlIdpBinding.POST);
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/CustomLogoutSuccessHandler.java,CustomLogoutSuccessHandler,checkForErrors,String checkForErrors(HttpServletRequest),"[212, 233]","{'A236': [(212, 233)]}",{'A236': 1.0},A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/CustomLogoutSuccessHandlerTest.java,"    private String checkForErrors(HttpServletRequest request) {
        String errorMessage;
        String path = ""logout=true"";

        if (request.getParameter(""oAuth2AuthenticationErrorWeb"") != null) {
            path = ""errorOAuth=userAlreadyExistsWeb"";
        } else if ((errorMessage = request.getParameter(""errorOAuth"")) != null) {
            path = ""errorOAuth="" + sanitizeInput(errorMessage);
        } else if (request.getParameter(""oAuth2AutoCreateDisabled"") != null) {
            path = ""errorOAuth=oAuth2AutoCreateDisabled"";
        } else if (request.getParameter(""oAuth2AdminBlockedUser"") != null) {
            path = ""errorOAuth=oAuth2AdminBlockedUser"";
        } else if (request.getParameter(""userIsDisabled"") != null) {
            path = ""errorOAuth=userIsDisabled"";
        } else if ((errorMessage = request.getParameter(""error"")) != null) {
            path = ""errorOAuth="" + sanitizeInput(errorMessage);
        } else if (request.getParameter(""badCredentials"") != null) {
            path = ""errorOAuth=badCredentials"";
        }

        return path;
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/CustomLogoutSuccessHandler.java,CustomLogoutSuccessHandler,sanitizeInput,String sanitizeInput(String),"[241, 243]","{'A237': [(243, 243)], 'A234': [(241, 242)]}","{'A237': 0.3333333333333333, 'A234': 0.6666666666666666}",A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/CustomLogoutSuccessHandlerTest.java,"    private String sanitizeInput(String input) {
        return input.replaceAll(""[^a-zA-Z0-9 ]"", """");
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/DatabaseConfig.java,DatabaseConfig,dataSource,DataSource dataSource(),"[61, 72]","{'A236': [(61, 62), (64, 72)], 'A233': [(63, 63)]}","{'A236': 0.9166666666666666, 'A233': 0.08333333333333333}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/DatabaseConfigTest.java,"    @Bean
    @Qualifier(""dataSource"")
    @Primary
    public DataSource dataSource() throws UnsupportedProviderException {
        DataSourceBuilder<?> dataSourceBuilder = DataSourceBuilder.create();

        if (!runningProOrHigher || !datasource.isEnableCustomDatabase()) {
            return useDefaultDataSource(dataSourceBuilder);
        }

        return useCustomDataSource(dataSourceBuilder);
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/DatabaseConfig.java,DatabaseConfig,useDefaultDataSource,DataSource useDefaultDataSource(DataSourceBuilder<?>),"[74, 83]","{'A236': [(74, 76), (81, 83)], 'A239': [(77, 80)]}","{'A236': 0.6, 'A239': 0.4}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/DatabaseConfigTest.java,"    private DataSource useDefaultDataSource(DataSourceBuilder<?> dataSourceBuilder) {
        log.info(""Using default H2 database"");

        dataSourceBuilder
                .url(DATASOURCE_DEFAULT_URL)
                .driverClassName(DatabaseDriver.H2.getDriverClassName())
                .username(DEFAULT_USERNAME);

        return dataSourceBuilder.build();
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/DatabaseConfig.java,DatabaseConfig,useCustomDataSource,DataSource useCustomDataSource(DataSourceBuilder<?>),"[85, 109]","{'A236': [(85, 85), (88, 98), (104, 109)], 'A239': [(86, 87), (99, 103)]}","{'A236': 0.72, 'A239': 0.28}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/DatabaseConfigTest.java,"    @ConditionalOnBooleanProperty(name = ""premium.enabled"")
    private DataSource useCustomDataSource(DataSourceBuilder<?> dataSourceBuilder)
            throws UnsupportedProviderException {
        log.info(""Using custom database configuration"");

        if (!datasource.getCustomDatabaseUrl().isBlank()) {
            if (datasource.getCustomDatabaseUrl().contains(""postgresql"")) {
                dataSourceBuilder.driverClassName(DatabaseDriver.POSTGRESQL.getDriverClassName());
            }

            dataSourceBuilder.url(datasource.getCustomDatabaseUrl());
        } else {
            dataSourceBuilder.driverClassName(getDriverClassName(datasource.getType()));
            dataSourceBuilder.url(
                    generateCustomDataSourceUrl(
                            datasource.getType(),
                            datasource.getHostName(),
                            datasource.getPort(),
                            datasource.getName()));
        }
        dataSourceBuilder.username(datasource.getUsername());
        dataSourceBuilder.password(datasource.getPassword());

        return dataSourceBuilder.build();
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/DatabaseConfig.java,DatabaseConfig,generateCustomDataSourceUrl,"String generateCustomDataSourceUrl(String,String,Integer,String)","[120, 123]","{'A236': [(120, 123)]}",{'A236': 1.0},A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/DatabaseConfigTest.java,"    private String generateCustomDataSourceUrl(
            String dataSourceType, String hostname, Integer port, String dataSourceName) {
        return DATASOURCE_URL_TEMPLATE.formatted(dataSourceType, hostname, port, dataSourceName);
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/DatabaseConfig.java,DatabaseConfig,getDriverClassName,String getDriverClassName(String),"[132, 156]","{'A236': [(132, 156)]}",{'A236': 1.0},A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/DatabaseConfigTest.java,"    private String getDriverClassName(String driverName) throws UnsupportedProviderException {
        try {
            ApplicationProperties.Driver driver =
                    ApplicationProperties.Driver.valueOf(driverName.toUpperCase());

            switch (driver) {
                case H2 -> {
                    log.debug(""H2 driver selected"");
                    return DatabaseDriver.H2.getDriverClassName();
                }
                case POSTGRESQL -> {
                    log.debug(""Postgres driver selected"");
                    return DatabaseDriver.POSTGRESQL.getDriverClassName();
                }
                default -> {
                    log.warn(""{} driver selected"", driverName);
                    throw new UnsupportedProviderException(
                            driverName + "" is not currently supported"");
                }
            }
        } catch (IllegalArgumentException e) {
            log.warn(""Unknown driver: {}"", driverName);
            throw new UnsupportedProviderException(driverName + "" is not currently supported"");
        }
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/MailConfig.java,MailConfig,javaMailSender,JavaMailSender javaMailSender(),"[29, 53]","{'A234': [(29, 53)]}",{'A234': 1.0},A234,,"    @Bean
    public JavaMailSender javaMailSender() {

        ApplicationProperties.Mail mailProperties = applicationProperties.getMail();

        // Creates a new instance of JavaMailSenderImpl, which is a Spring implementation
        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
        mailSender.setHost(mailProperties.getHost());
        mailSender.setPort(mailProperties.getPort());
        mailSender.setUsername(mailProperties.getUsername());
        mailSender.setPassword(mailProperties.getPassword());
        mailSender.setDefaultEncoding(""UTF-8"");

        // Retrieves the JavaMail properties to configure additional SMTP parameters
        Properties props = mailSender.getJavaMailProperties();

        // Enables SMTP authentication
        props.put(""mail.smtp.auth"", ""true"");

        // Enables STARTTLS to encrypt the connection if supported by the SMTP server
        props.put(""mail.smtp.starttls.enable"", ""true"");

        // Returns the configured mail sender, ready to send emails
        return mailSender;
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/SecurityConfiguration.java,SecurityConfiguration,passwordEncoder,PasswordEncoder passwordEncoder(),"[111, 114]","{'A236': [(111, 114)]}",{'A236': 1.0},A236,,"    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/SecurityConfiguration.java,SecurityConfiguration,filterChain,SecurityFilterChain filterChain(HttpSecurity),"[116, 307]","{'A236': [(116, 123), (125, 126), (128, 128), (130, 131), (158, 161), (169, 171), (182, 182), (184, 184), (197, 197), (226, 228), (240, 243), (270, 274), (276, 276), (278, 278), (301, 307)], 'A239': [(124, 124), (127, 127), (129, 129), (132, 157), (162, 168), (172, 181), (183, 183), (185, 196), (198, 225), (229, 239), (244, 269), (275, 275), (277, 277), (279, 300)]}","{'A236': 0.22916666666666666, 'A239': 0.7708333333333334}",A239,,"    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        if (applicationProperties.getSecurity().getCsrfDisabled() || !loginEnabledValue) {
            http.csrf(csrf -> csrf.disable());
        }

        if (loginEnabledValue) {
            http.addFilterBefore(
                    userAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
            if (!applicationProperties.getSecurity().getCsrfDisabled()) {
                CookieCsrfTokenRepository cookieRepo =
                        CookieCsrfTokenRepository.withHttpOnlyFalse();
                CsrfTokenRequestAttributeHandler requestHandler =
                        new CsrfTokenRequestAttributeHandler();
                requestHandler.setCsrfRequestAttributeName(null);
                http.csrf(
                        csrf ->
                                csrf.ignoringRequestMatchers(
                                                request -> {
                                                    String apiKey = request.getHeader(""X-API-KEY"");
                                                    // If there's no API key, don't ignore CSRF
                                                    // (return false)
                                                    if (apiKey == null || apiKey.trim().isEmpty()) {
                                                        return false;
                                                    }
                                                    // Validate API key using existing UserService
                                                    try {
                                                        Optional<User> user =
                                                                userService.getUserByApiKey(apiKey);
                                                        // If API key is valid, ignore CSRF (return
                                                        // true)
                                                        // If API key is invalid, don't ignore CSRF
                                                        // (return false)
                                                        return user.isPresent();
                                                    } catch (Exception e) {
                                                        // If there's any error validating the API
                                                        // key, don't ignore CSRF
                                                        return false;
                                                    }
                                                })
                                        .csrfTokenRepository(cookieRepo)
                                        .csrfTokenRequestHandler(requestHandler));
            }
            http.addFilterBefore(rateLimitingFilter(), UsernamePasswordAuthenticationFilter.class);
            http.addFilterAfter(firstLoginFilter, UsernamePasswordAuthenticationFilter.class);
            http.sessionManagement(
                    sessionManagement ->
                            sessionManagement
                                    .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
                                    .maximumSessions(10)
                                    .maxSessionsPreventsLogin(false)
                                    .sessionRegistry(sessionRegistry)
                                    .expiredUrl(""/login?logout=true""));
            http.authenticationProvider(daoAuthenticationProvider());
            http.requestCache(requestCache -> requestCache.requestCache(new NullRequestCache()));
            http.logout(
                    logout ->
                            logout.logoutRequestMatcher(
                                            PathPatternRequestMatcher.withDefaults()
                                                    .matcher(""/logout""))
                                    .logoutSuccessHandler(
                                            new CustomLogoutSuccessHandler(
                                                    applicationProperties, appConfig))
                                    .clearAuthentication(true)
                                    .invalidateHttpSession(true)
                                    .deleteCookies(""JSESSIONID"", ""remember-me""));
            http.rememberMe(
                    rememberMeConfigurer -> // Use the configurator directly
                    rememberMeConfigurer
                                    .tokenRepository(persistentTokenRepository())
                                    .tokenValiditySeconds( // 14 days
                                            14 * 24 * 60 * 60)
                                    .userDetailsService( // Your existing UserDetailsService
                                            userDetailsService)
                                    .useSecureCookie( // Enable secure cookie
                                            true)
                                    .rememberMeParameter( // Form parameter name
                                            ""remember-me"")
                                    .rememberMeCookieName( // Cookie name
                                            ""remember-me"")
                                    .alwaysRemember(false));
            http.authorizeHttpRequests(
                    authz ->
                            authz.requestMatchers(
                                            req -> {
                                                String uri = req.getRequestURI();
                                                String contextPath = req.getContextPath();
                                                // Remove the context path from the URI
                                                String trimmedUri =
                                                        uri.startsWith(contextPath)
                                                                ? uri.substring(
                                                                        contextPath.length())
                                                                : uri;
                                                return trimmedUri.startsWith(""/login"")
                                                        || trimmedUri.startsWith(""/oauth"")
                                                        || trimmedUri.startsWith(""/saml2"")
                                                        || trimmedUri.endsWith("".svg"")
                                                        || trimmedUri.startsWith(""/register"")
                                                        || trimmedUri.startsWith(""/error"")
                                                        || trimmedUri.startsWith(""/images/"")
                                                        || trimmedUri.startsWith(""/public/"")
                                                        || trimmedUri.startsWith(""/css/"")
                                                        || trimmedUri.startsWith(""/fonts/"")
                                                        || trimmedUri.startsWith(""/js/"")
                                                        || trimmedUri.startsWith(
                                                                ""/api/v1/info/status"");
                                            })
                                    .permitAll()
                                    .anyRequest()
                                    .authenticated());
            // Handle User/Password Logins
            if (applicationProperties.getSecurity().isUserPass()) {
                http.formLogin(
                        formLogin ->
                                formLogin
                                        .loginPage(""/login"")
                                        .successHandler(
                                                new CustomAuthenticationSuccessHandler(
                                                        loginAttemptService, userService))
                                        .failureHandler(
                                                new CustomAuthenticationFailureHandler(
                                                        loginAttemptService, userService))
                                        .defaultSuccessUrl(""/"")
                                        .permitAll());
            }
            // Handle OAUTH2 Logins
            if (applicationProperties.getSecurity().isOauth2Active()) {
                http.oauth2Login(
                        oauth2 ->
                                oauth2.loginPage(""/oauth2"")
                                        /*
                                        This Custom handler is used to check if the OAUTH2 user trying to log in, already exists in the database.
                                        If user exists, login proceeds as usual. If user does not exist, then it is auto-created but only if 'OAUTH2AutoCreateUser'
                                        is set as true, else login fails with an error message advising the same.
                                         */
                                        .successHandler(
                                                new CustomOAuth2AuthenticationSuccessHandler(
                                                        loginAttemptService,
                                                        applicationProperties,
                                                        userService))
                                        .failureHandler(
                                                new CustomOAuth2AuthenticationFailureHandler())
                                        . // Add existing Authorities from the database
                                        userInfoEndpoint(
                                                userInfoEndpoint ->
                                                        userInfoEndpoint
                                                                .oidcUserService(
                                                                        new CustomOAuth2UserService(
                                                                                applicationProperties,
                                                                                userService,
                                                                                loginAttemptService))
                                                                .userAuthoritiesMapper(
                                                                        oAuth2userAuthoritiesMapper))
                                        .permitAll());
            }
            // Handle SAML
            if (applicationProperties.getSecurity().isSaml2Active() && runningProOrHigher) {
                // Configure the authentication provider
                OpenSaml4AuthenticationProvider authenticationProvider =
                        new OpenSaml4AuthenticationProvider();
                authenticationProvider.setResponseAuthenticationConverter(
                        new CustomSaml2ResponseAuthenticationConverter(userService));
                http.authenticationProvider(authenticationProvider)
                        .saml2Login(
                                saml2 -> {
                                    try {
                                        saml2.loginPage(""/saml2"")
                                                .relyingPartyRegistrationRepository(
                                                        saml2RelyingPartyRegistrations)
                                                .authenticationManager(
                                                        new ProviderManager(authenticationProvider))
                                                .successHandler(
                                                        new CustomSaml2AuthenticationSuccessHandler(
                                                                loginAttemptService,
                                                                applicationProperties,
                                                                userService))
                                                .failureHandler(
                                                        new CustomSaml2AuthenticationFailureHandler())
                                                .authenticationRequestResolver(
                                                        saml2AuthenticationRequestResolver);
                                    } catch (Exception e) {
                                        log.error(""Error configuring SAML 2 login"", e);
                                        throw new RuntimeException(e);
                                    }
                                });
            }
        } else {
            log.debug(""Login is not enabled."");
            http.authorizeHttpRequests(authz -> authz.anyRequest().permitAll());
        }
        return http.build();
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/SecurityConfiguration.java,SecurityConfiguration,daoAuthenticationProvider,DaoAuthenticationProvider daoAuthenticationProvider(),"[309, 313]","{'A236': [(309, 313)]}",{'A236': 1.0},A236,,"    public DaoAuthenticationProvider daoAuthenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider(userDetailsService);
        provider.setPasswordEncoder(passwordEncoder());
        return provider;
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/SecurityConfiguration.java,SecurityConfiguration,rateLimitingFilter,IPRateLimitingFilter rateLimitingFilter(),"[315, 320]","{'A236': [(315, 320)]}",{'A236': 1.0},A236,,"    @Bean
    public IPRateLimitingFilter rateLimitingFilter() {
        // Example limit TODO add config level
        int maxRequestsPerIp = 1000000;
        return new IPRateLimitingFilter(maxRequestsPerIp, maxRequestsPerIp);
    }
"
stirling.software.proprietary.security.configuration,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/SecurityConfiguration.java,SecurityConfiguration,persistentTokenRepository,PersistentTokenRepository persistentTokenRepository(),"[322, 325]","{'A236': [(322, 325)]}",{'A236': 1.0},A236,,"    @Bean
    public PersistentTokenRepository persistentTokenRepository() {
        return new JPATokenRepositoryImpl(persistentLoginRepository);
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,verifyLicense,License verifyLicense(String),"[67, 100]","{'A233': [(67, 70), (72, 72), (76, 76), (78, 78), (84, 84), (86, 86), (92, 92), (94, 94), (100, 100)], 'A234': [(71, 71), (73, 75), (77, 77), (79, 83), (85, 85), (87, 91), (93, 93), (95, 99)]}","{'A233': 0.35294117647058826, 'A234': 0.6470588235294118}",A234,,"    public License verifyLicense(String licenseKeyOrCert) {
        if (!applicationProperties.getPremium().isEnabled()) {
            return License.NORMAL;
        }
        License license;
        LicenseContext context = new LicenseContext();

        if (isCertificateLicense(licenseKeyOrCert)) {
            log.info(""Detected certificate-based license. Processing..."");
            boolean isValid = verifyCertificateLicense(licenseKeyOrCert, context);
            if (isValid) {
                license = context.isEnterpriseLicense ? License.ENTERPRISE : License.PRO;
            } else {
                license = License.NORMAL;
            }
        } else if (isJWTLicense(licenseKeyOrCert)) {
            log.info(""Detected JWT-style license key. Processing..."");
            boolean isValid = verifyJWTLicense(licenseKeyOrCert, context);
            if (isValid) {
                license = context.isEnterpriseLicense ? License.ENTERPRISE : License.PRO;
            } else {
                license = License.NORMAL;
            }
        } else {
            log.info(""Detected standard license key. Processing..."");
            boolean isValid = verifyStandardLicense(licenseKeyOrCert, context);
            if (isValid) {
                license = context.isEnterpriseLicense ? License.ENTERPRISE : License.PRO;
            } else {
                license = License.NORMAL;
            }
        }
        return license;
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,isCertificateLicense,boolean isCertificateLicense(String),"[104, 106]","{'A233': [(104, 106)]}",{'A233': 1.0},A233,,"    private boolean isCertificateLicense(String license) {
        return license != null && license.trim().startsWith(CERT_PREFIX);
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,isJWTLicense,boolean isJWTLicense(String),"[108, 110]","{'A233': [(108, 110)]}",{'A233': 1.0},A233,,"    private boolean isJWTLicense(String license) {
        return license != null && license.trim().startsWith(JWT_PREFIX);
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,verifyCertificateLicense,"boolean verifyCertificateLicense(String,LicenseContext)","[112, 174]","{'A233': [(112, 141), (143, 174)], 'A234': [(142, 142)]}","{'A233': 0.9841269841269841, 'A234': 0.015873015873015872}",A233,,"    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {
        try {
            String encodedPayload = licenseFile;
            // Remove the header
            encodedPayload = encodedPayload.replace(CERT_PREFIX, """");
            // Remove the footer
            encodedPayload = encodedPayload.replace(CERT_SUFFIX, """");
            // Remove all newlines
            encodedPayload = encodedPayload.replaceAll(""\\r?\\n"", """");

            byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);
            String payload = new String(payloadBytes);

            log.info(""Decoded certificate payload: {}"", payload);

            String encryptedData = """";
            String encodedSignature = """";
            String algorithm = """";

            try {
                JSONObject attrs = new JSONObject(payload);
                encryptedData = (String) attrs.get(""enc"");
                encodedSignature = (String) attrs.get(""sig"");
                algorithm = (String) attrs.get(""alg"");
            } catch (JSONException e) {
                log.error(""Failed to parse license file: {}"", e.getMessage());
                return false;
            }

            // Verify license file algorithm
            if (!""base64+ed25519"".equals(algorithm)) {
                log.error(
                        ""Unsupported algorithm: {}. Only base64+ed25519 is supported."", algorithm);
                return false;
            }

            // Verify signature
            boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);
            if (!isSignatureValid) {
                log.error(""License file signature is invalid"");
                return false;
            }

            log.info(""License file signature is valid"");

            // Decode the base64 data
            String decodedData;
            try {
                decodedData = new String(Base64.getDecoder().decode(encryptedData));
            } catch (IllegalArgumentException e) {
                log.error(""Failed to decode license data: {}"", e.getMessage());
                return false;
            }

            // Process the certificate data
            boolean isValid = processCertificateData(decodedData, context);

            return isValid;
        } catch (Exception e) {
            log.error(""Error verifying certificate license: {}"", e.getMessage(), e);
            return false;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,verifyEd25519Signature,"boolean verifyEd25519Signature(String,String)","[176, 208]","{'A233': [(176, 208)]}",{'A233': 1.0},A233,,"    private boolean verifyEd25519Signature(String encryptedData, String encodedSignature) {
        try {
            log.info(""Signature to verify: {}"", encodedSignature);

            byte[] signatureBytes = Base64.getDecoder().decode(encodedSignature);

            // Create the signing data format - prefix with ""license/""
            String signingData = String.format(""license/%s"", encryptedData);
            byte[] signingDataBytes = signingData.getBytes();

            log.info(""Signing data length: {} bytes"", signingDataBytes.length);

            byte[] publicKeyBytes = Hex.decode(PUBLIC_KEY);

            Ed25519PublicKeyParameters verifierParams =
                    new Ed25519PublicKeyParameters(publicKeyBytes, 0);
            Ed25519Signer verifier = new Ed25519Signer();

            verifier.init(false, verifierParams);
            verifier.update(signingDataBytes, 0, signingDataBytes.length);

            // Verify the signature
            boolean result = verifier.verifySignature(signatureBytes);
            if (!result) {
                log.error(""Signature verification failed with standard public key"");
            }

            return result;
        } catch (Exception e) {
            log.error(""Error verifying Ed25519 signature: {}"", e.getMessage(), e);
            return false;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,processCertificateData,"boolean processCertificateData(String,LicenseContext)","[210, 280]","{'A233': [(210, 224), (227, 267), (270, 280)], 'A234': [(225, 226), (268, 269)]}","{'A233': 0.9436619718309859, 'A234': 0.056338028169014086}",A233,,"    private boolean processCertificateData(String certData, LicenseContext context) {
        try {
            JSONObject licenseData = new JSONObject(certData);
            JSONObject metaObj = licenseData.optJSONObject(""meta"");
            if (metaObj != null) {
                String issuedStr = metaObj.optString(""issued"", null);
                String expiryStr = metaObj.optString(""expiry"", null);

                if (issuedStr != null && expiryStr != null) {
                    java.time.Instant issued = java.time.Instant.parse(issuedStr);
                    java.time.Instant expiry = java.time.Instant.parse(expiryStr);
                    java.time.Instant now = java.time.Instant.now();

                    if (issued.isAfter(now)) {
                        log.error(
                                ""License file issued date is in the future. Please adjust system""
                                        + "" time or request a new license"");
                        return false;
                    }

                    // Check if the license file has expired
                    if (expiry.isBefore(now)) {
                        log.error(""License file has expired on {}"", expiryStr);
                        return false;
                    }

                    log.info(""License file valid until {}"", expiryStr);
                }
            }

            // Get the main license data
            JSONObject dataObj = licenseData.optJSONObject(""data"");
            if (dataObj == null) {
                log.error(""No data object found in certificate"");
                return false;
            }

            // Extract license or machine information
            JSONObject attributesObj = dataObj.optJSONObject(""attributes"");
            if (attributesObj != null) {
                log.info(""Found attributes in certificate data"");

                // Check for floating license
                context.isFloatingLicense = attributesObj.optBoolean(""floating"", false);
                context.maxMachines = attributesObj.optInt(""maxMachines"", 1);

                // Extract metadata
                JSONObject metadataObj = attributesObj.optJSONObject(""metadata"");
                if (metadataObj != null) {
                    int users = metadataObj.optInt(""users"", 1);
                    applicationProperties.getPremium().setMaxUsers(users);
                    log.info(""License allows for {} users"", users);
                    context.isEnterpriseLicense = metadataObj.optBoolean(""isEnterprise"", false);
                }

                // Check license status if available
                String status = attributesObj.optString(""status"", null);
                if (status != null
                        && !""ACTIVE"".equals(status)
                        && !""EXPIRING"".equals(status)) { // Accept ""EXPIRING"" status as valid
                    log.error(""License status is not active: {}"", status);
                    return false;
                }
            }

            return true;
        } catch (Exception e) {
            log.error(""Error processing certificate data: {}"", e.getMessage(), e);
            return false;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,verifyJWTLicense,"boolean verifyJWTLicense(String,LicenseContext)","[282, 323]","{'A233': [(282, 292), (295, 323)], 'A234': [(293, 294)]}","{'A233': 0.9523809523809523, 'A234': 0.047619047619047616}",A233,,"    private boolean verifyJWTLicense(String licenseKey, LicenseContext context) {
        try {
            log.info(""Verifying ED25519_SIGN format license key"");

            // Remove the ""key/"" prefix
            String licenseData = licenseKey.substring(JWT_PREFIX.length());

            // Split into payload and signature
            String[] parts = licenseData.split(""\\."", 2);
            if (parts.length != 2) {
                log.error(
                        ""Invalid ED25519_SIGN license format. Expected format:""
                                + "" key/payload.signature"");
                return false;
            }

            String encodedPayload = parts[0];
            String encodedSignature = parts[1];

            // Verify signature
            boolean isSignatureValid = verifyJWTSignature(encodedPayload, encodedSignature);
            if (!isSignatureValid) {
                log.error(""ED25519_SIGN license signature is invalid"");
                return false;
            }

            log.info(""ED25519_SIGN license signature is valid"");

            // Decode and process payload - first convert from URL-safe base64 if needed
            String base64Payload = encodedPayload.replace('-', '+').replace('_', '/');
            byte[] payloadBytes = Base64.getDecoder().decode(base64Payload);
            String payload = new String(payloadBytes);

            // Process the license payload
            boolean isValid = processJWTLicensePayload(payload, context);

            return isValid;
        } catch (Exception e) {
            log.error(""Error verifying ED25519_SIGN license: {}"", e.getMessage());
            return false;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,verifyJWTSignature,"boolean verifyJWTSignature(String,String)","[325, 350]","{'A233': [(325, 350)]}",{'A233': 1.0},A233,,"    private boolean verifyJWTSignature(String encodedPayload, String encodedSignature) {
        try {
            // Decode base64 signature
            byte[] signatureBytes =
                    Base64.getDecoder()
                            .decode(encodedSignature.replace('-', '+').replace('_', '/'));

            // For ED25519_SIGN format, the signing data is ""key/"" + encodedPayload
            String signingData = String.format(""key/%s"", encodedPayload);
            byte[] dataBytes = signingData.getBytes();

            byte[] publicKeyBytes = Hex.decode(PUBLIC_KEY);
            Ed25519PublicKeyParameters verifierParams =
                    new Ed25519PublicKeyParameters(publicKeyBytes, 0);
            Ed25519Signer verifier = new Ed25519Signer();

            verifier.init(false, verifierParams);
            verifier.update(dataBytes, 0, dataBytes.length);

            // Verify the signature
            return verifier.verifySignature(signatureBytes);
        } catch (Exception e) {
            log.error(""Error verifying JWT signature: {}"", e.getMessage());
            return false;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,processJWTLicensePayload,"boolean processJWTLicensePayload(String,LicenseContext)","[352, 458]","{'A233': [(352, 381), (383, 430), (432, 437), (439, 441), (443, 458)], 'A234': [(382, 382), (438, 438)], 'A235': [(431, 431), (442, 442)]}","{'A233': 0.9626168224299065, 'A234': 0.018691588785046728, 'A235': 0.018691588785046728}",A233,,"    private boolean processJWTLicensePayload(String payload, LicenseContext context) {
        try {
            log.info(""Processing license payload: {}"", payload);

            JSONObject licenseData = new JSONObject(payload);

            JSONObject licenseObj = licenseData.optJSONObject(""license"");
            if (licenseObj == null) {
                String id = licenseData.optString(""id"", null);
                if (id != null) {
                    log.info(""Found license ID: {}"", id);
                    licenseObj = licenseData; // Use the root object as the license object
                } else {
                    log.error(""License data not found in payload"");
                    return false;
                }
            }

            String licenseId = licenseObj.optString(""id"", ""unknown"");
            log.info(""Processing license with ID: {}"", licenseId);

            // Check for floating license in license object
            context.isFloatingLicense = licenseObj.optBoolean(""floating"", false);
            context.maxMachines = licenseObj.optInt(""maxMachines"", 1);
            if (context.isFloatingLicense) {
                log.info(""Detected floating license with max machines: {}"", context.maxMachines);
            }

            // Check expiry date
            String expiryStr = licenseObj.optString(""expiry"", null);
            if (expiryStr != null && !""null"".equals(expiryStr)) {
                java.time.Instant expiry = java.time.Instant.parse(expiryStr);
                java.time.Instant now = java.time.Instant.now();

                if (now.isAfter(expiry)) {
                    log.error(""License has expired on {}"", expiryStr);
                    return false;
                }

                log.info(""License valid until {}"", expiryStr);
            } else {
                log.info(""License has no expiration date"");
            }

            // Extract account, product, policy info
            JSONObject accountObj = licenseData.optJSONObject(""account"");
            if (accountObj != null) {
                String accountId = accountObj.optString(""id"", ""unknown"");
                log.info(""License belongs to account: {}"", accountId);

                // Verify this matches your expected account ID
                if (!ACCOUNT_ID.equals(accountId)) {
                    log.warn(""License account ID does not match expected account ID"");
                    // You might want to fail verification here depending on your requirements
                }
            }

            // Extract policy information if available
            JSONObject policyObj = licenseData.optJSONObject(""policy"");
            if (policyObj != null) {
                String policyId = policyObj.optString(""id"", ""unknown"");
                log.info(""License uses policy: {}"", policyId);

                // Check for floating license in policy
                boolean policyFloating = policyObj.optBoolean(""floating"", false);
                int policyMaxMachines = policyObj.optInt(""maxMachines"", 1);

                // Policy settings take precedence
                if (policyFloating) {
                    context.isFloatingLicense = true;
                    context.maxMachines = policyMaxMachines;
                    log.info(
                            ""Policy defines floating license with max machines: {}"",
                            context.maxMachines);
                }

                // Extract max users and isEnterprise from policy or metadata
                int users = policyObj.optInt(""users"", 1);
                context.isEnterpriseLicense = policyObj.optBoolean(""isEnterprise"", false);

                if (users > 0) {
                    applicationProperties.getPremium().setMaxUsers(users);
                    log.info(""License allows for {} users"", users);
                } else {
                    // Try to get users from metadata if present
                    Object metadataObj = policyObj.opt(""metadata"");
                    if (metadataObj instanceof JSONObject metadata) {
                        users = metadata.optInt(""users"", 1);
                        applicationProperties.getPremium().setMaxUsers(users);
                        log.info(""License allows for {} users (from metadata)"", users);

                        // Check for isEnterprise flag in metadata
                        context.isEnterpriseLicense = metadata.optBoolean(""isEnterprise"", false);
                    } else {
                        // Default value
                        applicationProperties.getPremium().setMaxUsers(1);
                        log.info(""Using default of 1 user for license"");
                    }
                }
            }

            return true;
        } catch (Exception e) {
            log.error(""Error processing license payload: {}"", e.getMessage(), e);
            return false;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,verifyStandardLicense,"boolean verifyStandardLicense(String,LicenseContext)","[460, 502]","{'A233': [(460, 476), (479, 502)], 'A234': [(477, 478)]}","{'A233': 0.9534883720930233, 'A234': 0.046511627906976744}",A233,,"    private boolean verifyStandardLicense(String licenseKey, LicenseContext context) {
        try {
            log.info(""Checking standard license key"");
            String machineFingerprint = generateMachineFingerprint();

            // First, try to validate the license
            JsonNode validationResponse = validateLicense(licenseKey, machineFingerprint, context);
            if (validationResponse != null) {
                boolean isValid = validationResponse.path(""meta"").path(""valid"").asBoolean();
                String licenseId = validationResponse.path(""data"").path(""id"").asText();
                if (!isValid) {
                    String code = validationResponse.path(""meta"").path(""code"").asText();
                    log.info(code);
                    if (""NO_MACHINE"".equals(code)
                            || ""NO_MACHINES"".equals(code)
                            || ""FINGERPRINT_SCOPE_MISMATCH"".equals(code)) {
                        log.info(
                                ""License not activated for this machine. Attempting to""
                                        + "" activate..."");
                        boolean activated =
                                activateMachine(licenseKey, licenseId, machineFingerprint, context);
                        if (activated) {
                            // Revalidate after activation
                            validationResponse =
                                    validateLicense(licenseKey, machineFingerprint, context);
                            isValid =
                                    validationResponse != null
                                            && validationResponse
                                                    .path(""meta"")
                                                    .path(""valid"")
                                                    .asBoolean();
                        }
                    }
                }
                return isValid;
            }

            return false;
        } catch (Exception e) {
            log.error(""Error verifying standard license: {}"", e.getMessage());
            return false;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,validateLicense,"JsonNode validateLicense(String,String,LicenseContext)","[504, 607]","{'A236': [(526, 526), (535, 537), (601, 601), (604, 604)], 'A233': [(504, 525), (527, 534), (538, 590), (592, 599), (602, 603), (605, 607)], 'A235': [(591, 591), (600, 600)]}","{'A236': 0.057692307692307696, 'A233': 0.9230769230769231, 'A235': 0.019230769230769232}",A233,,"    private JsonNode validateLicense(
            String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {
        String requestBody =
                String.format(
                        ""{\""meta\"":{\""key\"":\""%s\"",\""scope\"":{\""fingerprint\"":\""%s\""}}}"",
                        licenseKey, machineFingerprint);
        HttpRequest request =
                HttpRequest.newBuilder()
                        .uri(
                                URI.create(
                                        BASE_URL
                                                + ""/""
                                                + ACCOUNT_ID
                                                + ""/licenses/actions/validate-key""))
                        .header(""Content-Type"", ""application/vnd.api+json"")
                        .header(""Accept"", ""application/vnd.api+json"")
                        // .header(""Authorization"", ""License "" + licenseKey)
                        .POST(HttpRequest.BodyPublishers.ofString(requestBody))
                        .build();

        HttpResponse<String> response =
                httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        log.debug(""ValidateLicenseResponse body: {}"", response.body());
        JsonNode jsonResponse = objectMapper.readTree(response.body());
        if (response.statusCode() == 200) {
            JsonNode metaNode = jsonResponse.path(""meta"");
            boolean isValid = metaNode.path(""valid"").asBoolean();

            String detail = metaNode.path(""detail"").asText();
            String code = metaNode.path(""code"").asText();

            log.info(""License validity: {}"", isValid);
            log.info(""Validation detail: {}"", detail);
            log.info(""Validation code: {}"", code);

            // Check if the license itself has floating attribute
            JsonNode licenseAttrs = jsonResponse.path(""data"").path(""attributes"");
            if (!licenseAttrs.isMissingNode()) {
                context.isFloatingLicense = licenseAttrs.path(""floating"").asBoolean(false);
                context.maxMachines = licenseAttrs.path(""maxMachines"").asInt(1);

                log.info(
                        ""License floating (from license): {}, maxMachines: {}"",
                        context.isFloatingLicense,
                        context.maxMachines);
            }

            // Also check the policy for floating license support if included
            JsonNode includedNode = jsonResponse.path(""included"");
            JsonNode policyNode = null;

            if (includedNode.isArray()) {
                for (JsonNode node : includedNode) {
                    if (""policies"".equals(node.path(""type"").asText())) {
                        policyNode = node;
                        break;
                    }
                }
            }

            if (policyNode != null) {
                // Check if this is a floating license from policy
                boolean policyFloating =
                        policyNode.path(""attributes"").path(""floating"").asBoolean(false);
                int policyMaxMachines = policyNode.path(""attributes"").path(""maxMachines"").asInt(1);

                // Policy takes precedence over license attributes
                if (policyFloating) {
                    context.isFloatingLicense = true;
                    context.maxMachines = policyMaxMachines;
                }

                log.info(
                        ""License floating (from policy): {}, maxMachines: {}"",
                        context.isFloatingLicense,
                        context.maxMachines);
            }

            // Extract user count, default to 1 if not specified
            int users =
                    jsonResponse
                            .path(""data"")
                            .path(""attributes"")
                            .path(""metadata"")
                            .path(""users"")
                            .asInt(1);
            applicationProperties.getPremium().setMaxUsers(users);

            // Extract isEnterprise flag
            context.isEnterpriseLicense =
                    jsonResponse
                            .path(""data"")
                            .path(""attributes"")
                            .path(""metadata"")
                            .path(""isEnterprise"")
                            .asBoolean(false);

            log.debug(applicationProperties.toString());

        } else {
            log.error(""Error validating license. Status code: {}"", response.statusCode());
        }
        return jsonResponse;
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,activateMachine,"boolean activateMachine(String,String,String,LicenseContext)","[609, 768]","{'A233': [(609, 768)]}",{'A233': 1.0},A233,,"    private boolean activateMachine(
            String licenseKey, String licenseId, String machineFingerprint, LicenseContext context)
            throws Exception {
        // For floating licenses, we first need to check if we need to deregister any machines
        if (context.isFloatingLicense) {
            log.info(
                    ""Processing floating license activation. Max machines allowed: {}"",
                    context.maxMachines);

            // Get the current machines for this license
            JsonNode machinesResponse = fetchMachinesForLicense(licenseKey, licenseId);
            if (machinesResponse != null) {
                JsonNode machines = machinesResponse.path(""data"");
                int currentMachines = machines.size();

                log.info(
                        ""Current machine count: {}, Max allowed: {}"",
                        currentMachines,
                        context.maxMachines);

                // Check if the current fingerprint is already activated
                boolean isCurrentMachineActivated = false;
                String currentMachineId = null;

                for (JsonNode machine : machines) {
                    if (machineFingerprint.equals(
                            machine.path(""attributes"").path(""fingerprint"").asText())) {
                        isCurrentMachineActivated = true;
                        currentMachineId = machine.path(""id"").asText();
                        log.info(
                                ""Current machine is already activated with ID: {}"",
                                currentMachineId);
                        break;
                    }
                }

                // If the current machine is already activated, there's no need to do anything
                if (isCurrentMachineActivated) {
                    log.info(""Machine already activated. No action needed."");
                    return true;
                }

                // If we've reached the max machines limit, we need to deregister the oldest machine
                if (currentMachines >= context.maxMachines) {
                    log.info(
                            ""Max machines reached. Deregistering oldest machine to make room for the new machine."");

                    // Find the oldest machine based on creation timestamp
                    if (machines.size() > 0) {
                        // Find the machine with the oldest creation date
                        String oldestMachineId = null;
                        java.time.Instant oldestTime = null;

                        for (JsonNode machine : machines) {
                            String createdStr =
                                    machine.path(""attributes"").path(""created"").asText(null);
                            if (createdStr != null && !createdStr.isEmpty()) {
                                try {
                                    java.time.Instant createdTime =
                                            java.time.Instant.parse(createdStr);
                                    if (oldestTime == null || createdTime.isBefore(oldestTime)) {
                                        oldestTime = createdTime;
                                        oldestMachineId = machine.path(""id"").asText();
                                    }
                                } catch (Exception e) {
                                    log.warn(
                                            ""Could not parse creation time for machine: {}"",
                                            e.getMessage());
                                }
                            }
                        }

                        // If we couldn't determine the oldest by timestamp, use the first one
                        if (oldestMachineId == null) {
                            log.warn(
                                    ""Could not determine oldest machine by timestamp, using first machine in list"");
                            oldestMachineId = machines.path(0).path(""id"").asText();
                        }

                        log.info(""Deregistering machine with ID: {}"", oldestMachineId);

                        boolean deregistered = deregisterMachine(licenseKey, oldestMachineId);
                        if (!deregistered) {
                            log.error(
                                    ""Failed to deregister machine. Cannot proceed with activation."");
                            return false;
                        }
                        log.info(
                                ""Machine deregistered successfully. Proceeding with activation of new machine."");
                    } else {
                        log.error(
                                ""License has reached machine limit but no machines were found to deregister. This is unexpected."");
                        // We'll still try to activate, but it might fail
                    }
                }
            }
        }

        // Proceed with machine activation
        String hostname;
        try {
            hostname = java.net.InetAddress.getLocalHost().getHostName();
        } catch (Exception e) {
            hostname = ""Unknown"";
        }

        JSONObject body =
                new JSONObject()
                        .put(
                                ""data"",
                                new JSONObject()
                                        .put(""type"", ""machines"")
                                        .put(
                                                ""attributes"",
                                                new JSONObject()
                                                        .put(""fingerprint"", machineFingerprint)
                                                        .put(
                                                                ""platform"",
                                                                System.getProperty(""os.name""))
                                                        .put(""name"", hostname))
                                        .put(
                                                ""relationships"",
                                                new JSONObject()
                                                        .put(
                                                                ""license"",
                                                                new JSONObject()
                                                                        .put(
                                                                                ""data"",
                                                                                new JSONObject()
                                                                                        .put(
                                                                                                ""type"",
                                                                                                ""licenses"")
                                                                                        .put(
                                                                                                ""id"",
                                                                                                licenseId)))));

        HttpRequest request =
                HttpRequest.newBuilder()
                        .uri(URI.create(BASE_URL + ""/"" + ACCOUNT_ID + ""/machines""))
                        .header(""Content-Type"", ""application/vnd.api+json"")
                        .header(""Accept"", ""application/vnd.api+json"")
                        .header(""Authorization"", ""License "" + licenseKey)
                        .POST(HttpRequest.BodyPublishers.ofString(body.toString()))
                        .build();

        HttpResponse<String> response =
                httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        log.info(""activateMachine Response body: "" + response.body());
        if (response.statusCode() == 201) {
            log.info(""Machine activated successfully"");
            return true;
        } else {
            log.error(
                    ""Error activating machine. Status code: {}, error: {}"",
                    response.statusCode(),
                    response.body());

            return false;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,generateMachineFingerprint,String generateMachineFingerprint(),"[770, 772]","{'A233': [(770, 772)]}",{'A233': 1.0},A233,,"    private String generateMachineFingerprint() {
        return GeneralUtils.generateMachineFingerprint();
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,fetchMachinesForLicense,"JsonNode fetchMachinesForLicense(String,String)","[782, 812]","{'A233': [(782, 812)]}",{'A233': 1.0},A233,,"    private JsonNode fetchMachinesForLicense(String licenseKey, String licenseId) throws Exception {
        HttpRequest request =
                HttpRequest.newBuilder()
                        .uri(
                                URI.create(
                                        BASE_URL
                                                + ""/""
                                                + ACCOUNT_ID
                                                + ""/licenses/""
                                                + licenseId
                                                + ""/machines""))
                        .header(""Content-Type"", ""application/vnd.api+json"")
                        .header(""Accept"", ""application/vnd.api+json"")
                        .header(""Authorization"", ""License "" + licenseKey)
                        .GET()
                        .build();

        HttpResponse<String> response =
                httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        log.info(""fetchMachinesForLicense Response body: {}"", response.body());

        if (response.statusCode() == 200) {
            return objectMapper.readTree(response.body());
        } else {
            log.error(
                    ""Error fetching machines for license. Status code: {}, error: {}"",
                    response.statusCode(),
                    response.body());
            return null;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/KeygenLicenseVerifier.java,KeygenLicenseVerifier,deregisterMachine,"boolean deregisterMachine(String,String)","[821, 849]","{'A233': [(821, 849)]}",{'A233': 1.0},A233,,"    private boolean deregisterMachine(String licenseKey, String machineId) {
        try {
            HttpRequest request =
                    HttpRequest.newBuilder()
                            .uri(URI.create(BASE_URL + ""/"" + ACCOUNT_ID + ""/machines/"" + machineId))
                            .header(""Content-Type"", ""application/vnd.api+json"")
                            .header(""Accept"", ""application/vnd.api+json"")
                            .header(""Authorization"", ""License "" + licenseKey)
                            .DELETE()
                            .build();

            HttpResponse<String> response =
                    httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 204) {
                log.info(""Machine {} successfully deregistered"", machineId);
                return true;
            } else {
                log.error(
                        ""Error deregistering machine. Status code: {}, error: {}"",
                        response.statusCode(),
                        response.body());
                return false;
            }
        } catch (Exception e) {
            log.error(""Exception during machine deregistration: {}"", e.getMessage(), e);
            return false;
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/EEAppConfig.java,EEAppConfig,runningProOrHigher,boolean runningProOrHigher(),"[32, 37]","{'A233': [(32, 37)]}",{'A233': 1.0},A233,,"    @Profile(""security"")
    @Bean(name = ""runningProOrHigher"")
    @Primary
    public boolean runningProOrHigher() {
        return licenseKeyChecker.getPremiumLicenseEnabledResult() != License.NORMAL;
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/EEAppConfig.java,EEAppConfig,licenseType,String licenseType(),"[39, 44]","{'A233': [(39, 44)]}",{'A233': 1.0},A233,,"    @Profile(""security"")
    @Bean(name = ""license"")
    @Primary
    public String licenseType() {
        return licenseKeyChecker.getPremiumLicenseEnabledResult().name();
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/EEAppConfig.java,EEAppConfig,runningEnterprise,boolean runningEnterprise(),"[46, 51]","{'A233': [(46, 51)]}",{'A233': 1.0},A233,,"    @Profile(""security"")
    @Bean(name = ""runningEE"")
    @Primary
    public boolean runningEnterprise() {
        return licenseKeyChecker.getPremiumLicenseEnabledResult() == License.ENTERPRISE;
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/EEAppConfig.java,EEAppConfig,ssoAutoLogin,boolean ssoAutoLogin(),"[53, 56]","{'A233': [(53, 56)]}",{'A233': 1.0},A233,,"    @Bean(name = ""SSOAutoLogin"")
    public boolean ssoAutoLogin() {
        return applicationProperties.getPremium().getProFeatures().isSsoAutoLogin();
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/EEAppConfig.java,EEAppConfig,googleDriveEnabled,boolean googleDriveEnabled(),"[58, 64]","{'A233': [(58, 58), (60, 60)], 'A241': [(59, 59), (61, 64)]}","{'A233': 0.2857142857142857, 'A241': 0.7142857142857143}",A241,,"    @Profile(""security"")
    @Bean(name = ""GoogleDriveEnabled"")
    @Primary
    public boolean googleDriveEnabled() {
        return runningProOrHigher()
                && applicationProperties.getPremium().getProFeatures().getGoogleDrive().isEnabled();
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/EEAppConfig.java,EEAppConfig,googleDriveConfig,GoogleDrive googleDriveConfig(),"[66, 69]","{'A241': [(66, 69)]}",{'A241': 1.0},A241,,"    @Bean(name = ""GoogleDriveConfig"")
    public GoogleDrive googleDriveConfig() {
        return applicationProperties.getPremium().getProFeatures().getGoogleDrive();
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/EEAppConfig.java,EEAppConfig,migrateEnterpriseSettingsToPremium,void migrateEnterpriseSettingsToPremium(ApplicationProperties),"[72, 138]","{'A233': [(72, 83), (85, 85), (87, 138)], 'A234': [(84, 84), (86, 86)]}","{'A233': 0.9701492537313433, 'A234': 0.029850746268656716}",A233,,"    @SuppressWarnings(""deprecation"")
    public void migrateEnterpriseSettingsToPremium(ApplicationProperties applicationProperties) {
        EnterpriseEdition enterpriseEdition = applicationProperties.getEnterpriseEdition();
        Premium premium = applicationProperties.getPremium();

        // Only proceed if both objects exist
        if (enterpriseEdition == null || premium == null) {
            return;
        }

        // Copy the license key if it's set in enterprise but not in premium
        if (premium.getKey() == null
                || ""00000000-0000-0000-0000-000000000000"".equals(premium.getKey())) {
            if (enterpriseEdition.getKey() != null
                    && !""00000000-0000-0000-0000-000000000000"".equals(enterpriseEdition.getKey())) {
                premium.setKey(enterpriseEdition.getKey());
            }
        }

        // Copy enabled state if enterprise is enabled but premium is not
        if (!premium.isEnabled() && enterpriseEdition.isEnabled()) {
            premium.setEnabled(true);
        }

        // Copy SSO auto login setting
        if (!premium.getProFeatures().isSsoAutoLogin() && enterpriseEdition.isSsoAutoLogin()) {
            premium.getProFeatures().setSsoAutoLogin(true);
        }

        // Copy CustomMetadata settings
        Premium.ProFeatures.CustomMetadata premiumMetadata =
                premium.getProFeatures().getCustomMetadata();
        EnterpriseEdition.CustomMetadata enterpriseMetadata = enterpriseEdition.getCustomMetadata();

        if (enterpriseMetadata != null && premiumMetadata != null) {
            // Copy autoUpdateMetadata setting
            if (!premiumMetadata.isAutoUpdateMetadata()
                    && enterpriseMetadata.isAutoUpdateMetadata()) {
                premiumMetadata.setAutoUpdateMetadata(true);
            }

            // Copy author if not set in premium but set in enterprise
            if ((premiumMetadata.getAuthor() == null
                            || premiumMetadata.getAuthor().trim().isEmpty()
                            || ""username"".equals(premiumMetadata.getAuthor()))
                    && enterpriseMetadata.getAuthor() != null
                    && !enterpriseMetadata.getAuthor().trim().isEmpty()) {
                premiumMetadata.setAuthor(enterpriseMetadata.getAuthor());
            }

            // Copy creator if not set in premium but set in enterprise and different from default
            if ((premiumMetadata.getCreator() == null
                            || ""Stirling-PDF"".equals(premiumMetadata.getCreator()))
                    && enterpriseMetadata.getCreator() != null
                    && !""Stirling-PDF"".equals(enterpriseMetadata.getCreator())) {
                premiumMetadata.setCreator(enterpriseMetadata.getCreator());
            }

            // Copy producer if not set in premium but set in enterprise and different from default
            if ((premiumMetadata.getProducer() == null
                            || ""Stirling-PDF"".equals(premiumMetadata.getProducer()))
                    && enterpriseMetadata.getProducer() != null
                    && !""Stirling-PDF"".equals(enterpriseMetadata.getProducer())) {
                premiumMetadata.setProducer(enterpriseMetadata.getProducer());
            }
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyChecker.java,LicenseKeyChecker,checkLicensePeriodically,void checkLicensePeriodically(),"[36, 39]","{'A233': [(36, 39)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyCheckerTest.java,"    @Scheduled(initialDelay = 604800000, fixedRate = 604800000) // 7 days in milliseconds
    public void checkLicensePeriodically() {
        checkLicense();
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyChecker.java,LicenseKeyChecker,checkLicense,void checkLicense(),"[41, 60]","{'A233': [(41, 60)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyCheckerTest.java,"    private void checkLicense() {
        if (!applicationProperties.getPremium().isEnabled()) {
            premiumEnabledResult = License.NORMAL;
        } else {
            String licenseKey = getLicenseKeyContent(applicationProperties.getPremium().getKey());
            if (licenseKey != null) {
                premiumEnabledResult = licenseService.verifyLicense(licenseKey);
                if (License.ENTERPRISE == premiumEnabledResult) {
                    log.info(""License key is Enterprise."");
                } else if (License.PRO == premiumEnabledResult) {
                    log.info(""License key is Pro."");
                } else {
                    log.info(""License key is invalid, defaulting to non pro license."");
                }
            } else {
                log.error(""Failed to obtain license key content."");
                premiumEnabledResult = License.NORMAL;
            }
        }
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyChecker.java,LicenseKeyChecker,getLicenseKeyContent,String getLicenseKeyContent(String),"[62, 87]","{'A233': [(62, 87)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyCheckerTest.java,"    private String getLicenseKeyContent(String keyOrFilePath) {
        if (keyOrFilePath == null || keyOrFilePath.trim().isEmpty()) {
            log.error(""License key is not specified"");
            return null;
        }

        // Check if it's a file reference
        if (keyOrFilePath.startsWith(FILE_PREFIX)) {
            String filePath = keyOrFilePath.substring(FILE_PREFIX.length());
            try {
                Path path = Paths.get(filePath);
                if (!Files.exists(path)) {
                    log.error(""License file does not exist: {}"", filePath);
                    return null;
                }
                log.info(""Reading license from file: {}"", filePath);
                return Files.readString(path);
            } catch (IOException e) {
                log.error(""Failed to read license file: {}"", e.getMessage());
                return null;
            }
        }

        // It's a direct license key
        return keyOrFilePath;
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyChecker.java,LicenseKeyChecker,updateLicenseKey,void updateLicenseKey(String),"[89, 93]","{'A233': [(89, 90), (92, 93)], 'A234': [(91, 91)]}","{'A233': 0.8, 'A234': 0.2}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyCheckerTest.java,"    public void updateLicenseKey(String newKey) throws IOException {
        applicationProperties.getPremium().setKey(newKey);
        GeneralUtils.saveKeyToSettings(""EnterpriseEdition.key"", newKey);
        checkLicense();
    }
"
stirling.software.proprietary.security.configuration.ee,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyChecker.java,LicenseKeyChecker,getPremiumLicenseEnabledResult,License getPremiumLicenseEnabledResult(),"[95, 97]","{'A233': [(95, 97)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/configuration/ee/LicenseKeyCheckerTest.java,"    public License getPremiumLicenseEnabledResult() {
        return premiumEnabledResult;
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/DatabaseController.java,DatabaseController,importDatabase,"String importDatabase(MultipartFile,RedirectAttributes)","[44, 73]","{'A236': [(62, 62)], 'A234': [(44, 44), (48, 48), (54, 61), (63, 73)], 'A238': [(45, 47), (49, 53)]}","{'A236': 0.03333333333333333, 'A234': 0.7, 'A238': 0.26666666666666666}",A234,,"    @Operation(
            summary = ""Import a database backup file"",
            description = ""Uploads and imports a database backup SQL file."")
    @PostMapping(consumes = ""multipart/form-data"", value = ""import-database"")
    public String importDatabase(
            @Parameter(description = ""SQL file to import"", required = true)
                    @RequestParam(""fileInput"")
                    MultipartFile file,
            RedirectAttributes redirectAttributes)
            throws IOException {
        if (file == null || file.isEmpty()) {
            redirectAttributes.addAttribute(""error"", ""fileNullOrEmpty"");
            return ""redirect:/database"";
        }
        log.info(""Received file: {}"", file.getOriginalFilename());
        Path tempTemplatePath = Files.createTempFile(""backup_"", "".sql"");
        try (InputStream in = file.getInputStream()) {
            Files.copy(in, tempTemplatePath, StandardCopyOption.REPLACE_EXISTING);
            boolean importSuccess = databaseService.importDatabaseFromUI(tempTemplatePath);
            if (importSuccess) {
                redirectAttributes.addAttribute(""infoMessage"", ""importIntoDatabaseSuccessed"");
            } else {
                redirectAttributes.addAttribute(""error"", ""failedImportFile"");
            }
        } catch (Exception e) {
            log.error(""Error importing database: {}"", e.getMessage());
            redirectAttributes.addAttribute(""error"", ""failedImportFile"");
        }
        return ""redirect:/database"";
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/DatabaseController.java,DatabaseController,importDatabaseFromBackupUI,String importDatabaseFromBackupUI(String),"[75, 100]","{'A236': [(82, 82), (88, 88), (95, 95)], 'A234': [(75, 75), (79, 79), (83, 87), (89, 94), (96, 100)], 'A238': [(76, 78), (80, 81)]}","{'A236': 0.11538461538461539, 'A234': 0.6923076923076923, 'A238': 0.19230769230769232}",A234,,"    @Hidden
    @Operation(
            summary = ""Import database backup by filename"",
            description = ""Imports a database backup file from the server using its file name."")
    @GetMapping(""/import-database-file/{fileName}"")
    public String importDatabaseFromBackupUI(
            @Parameter(description = ""Name of the file to import"", required = true) @PathVariable
                    String fileName) {
        if (fileName == null || fileName.isEmpty()) {
            return ""redirect:/database?error=fileNullOrEmpty"";
        }
        // Check if the file exists in the backup list
        boolean fileExists =
                databaseService.getBackupList().stream()
                        .anyMatch(backup -> backup.getFileName().equals(fileName));
        if (!fileExists) {
            log.error(""File {} not found in backup list"", fileName);
            return ""redirect:/database?error=fileNotFound"";
        }
        log.info(""Received file: {}"", fileName);
        if (databaseService.importDatabaseFromUI(fileName)) {
            log.info(""File {} imported to database"", fileName);
            return ""redirect:/database?infoMessage=importIntoDatabaseSuccessed"";
        }
        return ""redirect:/database?error=failedImportFile"";
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/DatabaseController.java,DatabaseController,deleteFile,String deleteFile(String),"[102, 125]","{'A236': [(114, 114)], 'A234': [(102, 104), (110, 113), (115, 125)], 'A238': [(105, 109)]}","{'A236': 0.041666666666666664, 'A234': 0.75, 'A238': 0.20833333333333334}",A234,,"    @Hidden
    @Operation(
            summary = ""Delete a database backup file"",
            description = ""Deletes a specified database backup file from the server."")
    @GetMapping(""/delete/{fileName}"")
    public String deleteFile(
            @Parameter(description = ""Name of the file to delete"", required = true) @PathVariable
                    String fileName) {
        if (fileName == null || fileName.isEmpty()) {
            throw new IllegalArgumentException(""File must not be null or empty"");
        }
        try {
            if (databaseService.deleteBackupFile(fileName)) {
                log.info(""Deleted file: {}"", fileName);
            } else {
                log.error(""Failed to delete file: {}"", fileName);
                return ""redirect:/database?error=failedToDeleteFile"";
            }
        } catch (IOException e) {
            log.error(""Error deleting file: {}"", e.getMessage());
            return ""redirect:/database?error="" + e.getMessage();
        }
        return ""redirect:/database"";
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/DatabaseController.java,DatabaseController,downloadFile,ResponseEntity<?> downloadFile(String),"[127, 152]","{'A236': [(139, 139)], 'A234': [(127, 129), (135, 138), (140, 152)], 'A238': [(130, 134)]}","{'A236': 0.038461538461538464, 'A234': 0.7692307692307693, 'A238': 0.19230769230769232}",A234,,"    @Hidden
    @Operation(
            summary = ""Download a database backup file"",
            description = ""Downloads the specified database backup file from the server."")
    @GetMapping(""/download/{fileName}"")
    public ResponseEntity<?> downloadFile(
            @Parameter(description = ""Name of the file to download"", required = true) @PathVariable
                    String fileName) {
        if (fileName == null || fileName.isEmpty()) {
            throw new IllegalArgumentException(""File must not be null or empty"");
        }
        try {
            Path filePath = databaseService.getBackupFilePath(fileName);
            InputStreamResource resource = new InputStreamResource(Files.newInputStream(filePath));
            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, ""attachment;filename="" + fileName)
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .contentLength(Files.size(filePath))
                    .body(resource);
        } catch (IOException e) {
            log.error(""Error downloading file: {}"", e.getMessage());
            return ResponseEntity.status(HttpStatus.SEE_OTHER_303)
                    .location(URI.create(""/database?error=downloadFailed""))
                    .build();
        }
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/DatabaseController.java,DatabaseController,createDatabaseBackup,String createDatabaseBackup(),"[154, 165]","{'A236': [(161, 163)], 'A238': [(154, 160), (164, 165)]}","{'A236': 0.25, 'A238': 0.75}",A238,,"    @Operation(
            summary = ""Create a database backup"",
            description =
                    ""This endpoint triggers the creation of a database backup and redirects to the""
                            + "" database management page."")
    @GetMapping(""/createDatabaseBackup"")
    public String createDatabaseBackup() {
        log.info(""Starting database backup creation..."");
        databaseService.exportDatabase();
        log.info(""Database backup successfully created."");
        return ""redirect:/database?infoMessage=backupCreated"";
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/EmailController.java,EmailController,sendEmailWithAttachment,ResponseEntity<String> sendEmailWithAttachment(Email),"[45, 69]","{'A234': [(45, 69)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/controller/api/EmailControllerTest.java,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/send-email"")
    @Operation(
            summary = ""Send an email with an attachment"",
            description =
                    ""This endpoint sends an email with an attachment. Input:PDF""
                            + "" Output:Success/Failure Type:MISO"")
    public ResponseEntity<String> sendEmailWithAttachment(@Valid @ModelAttribute Email email) {
        log.info(""Sending email to: {}"", email.toString());
        try {
            // Calls the service to send the email with attachment
            emailService.sendEmailWithAttachment(email);
            return ResponseEntity.ok(""Email sent successfully"");
        } catch (MailSendException ex) {
            // handles your ""Invalid Addresses"" case
            String errorMsg = ex.getMessage();
            log.error(""MailSendException: {}"", errorMsg, ex);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorMsg);
        } catch (MessagingException e) {
            // Catches any messaging exception (e.g., invalid email address, SMTP server issues)
            String errorMsg = ""Failed to send email: "" + e.getMessage();
            log.error(errorMsg, e); // Logging the detailed error
            // Returns an error response with status 500 (Internal Server Error)
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorMsg);
        }
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/TeamController.java,TeamController,createTeam,RedirectView createTeam(String),"[35, 45]","{'A233': [(35, 38), (40, 43), (45, 45)], 'A234': [(39, 39), (44, 44)]}","{'A233': 0.8181818181818182, 'A234': 0.18181818181818182}",A233,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @PostMapping(""/create"")
    public RedirectView createTeam(@RequestParam(""name"") String name) {
        if (teamRepository.existsByNameIgnoreCase(name)) {
            return new RedirectView(""/teams?messageType=teamExists"");
        }
        Team team = new Team();
        team.setName(name);
        teamRepository.save(team);
        return new RedirectView(""/teams?messageType=teamCreated"");
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/TeamController.java,TeamController,renameTeam,"RedirectView renameTeam(Long,String)","[47, 68]","{'A233': [(47, 52), (54, 55), (57, 58), (60, 61), (63, 63), (65, 66), (68, 68)], 'A234': [(53, 53), (56, 56), (62, 62), (67, 67)], 'A235': [(59, 59), (64, 64)]}","{'A233': 0.7272727272727273, 'A234': 0.18181818181818182, 'A235': 0.09090909090909091}",A233,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @PostMapping(""/rename"")
    public RedirectView renameTeam(
            @RequestParam(""teamId"") Long teamId, @RequestParam(""newName"") String newName) {
        Optional<Team> existing = teamRepository.findById(teamId);
        if (existing.isEmpty()) {
            return new RedirectView(""/teams?messageType=teamNotFound"");
        }
        if (teamRepository.existsByNameIgnoreCase(newName)) {
            return new RedirectView(""/teams?messageType=teamNameExists"");
        }
        Team team = existing.get();

        // Prevent renaming the Internal team
        if (team.getName().equals(TeamService.INTERNAL_TEAM_NAME)) {
            return new RedirectView(""/teams?messageType=internalTeamNotAccessible"");
        }

        team.setName(newName);
        teamRepository.save(team);
        return new RedirectView(""/teams?messageType=teamRenamed"");
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/TeamController.java,TeamController,deleteTeam,RedirectView deleteTeam(Long),"[70, 93]","{'A233': [(70, 75), (77, 79), (81, 82), (84, 84), (86, 87), (89, 91), (93, 93)], 'A234': [(76, 76), (83, 83), (88, 88), (92, 92)], 'A235': [(80, 80), (85, 85)]}","{'A233': 0.75, 'A234': 0.16666666666666666, 'A235': 0.08333333333333333}",A233,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @PostMapping(""/delete"")
    @Transactional
    public RedirectView deleteTeam(@RequestParam(""teamId"") Long teamId) {
        Optional<Team> teamOpt = teamRepository.findById(teamId);
        if (teamOpt.isEmpty()) {
            return new RedirectView(""/teams?messageType=teamNotFound"");
        }

        Team team = teamOpt.get();

        // Prevent deleting the Internal team
        if (team.getName().equals(TeamService.INTERNAL_TEAM_NAME)) {
            return new RedirectView(""/teams?messageType=internalTeamNotAccessible"");
        }

        long memberCount = userRepository.countByTeam(team);
        if (memberCount > 0) {
            return new RedirectView(""/teams?messageType=teamHasUsers"");
        }

        teamRepository.delete(team);
        return new RedirectView(""/teams?messageType=teamDeleted"");
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/TeamController.java,TeamController,addUserToTeam,"RedirectView addUserToTeam(Long,Long)","[95, 130]","{'A233': [(95, 98), (101, 101), (107, 110), (112, 112), (118, 118), (121, 122), (124, 126), (128, 130)], 'A234': [(99, 99), (102, 105), (113, 116), (119, 120)], 'A235': [(100, 100), (106, 106), (111, 111), (117, 117), (123, 123), (127, 127)]}","{'A233': 0.5277777777777778, 'A234': 0.3055555555555556, 'A235': 0.16666666666666666}",A233,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @PostMapping(""/addUser"")
    @Transactional
    public RedirectView addUserToTeam(
            @RequestParam(""teamId"") Long teamId, @RequestParam(""userId"") Long userId) {

        // Find the team
        Team team =
                teamRepository
                        .findById(teamId)
                        .orElseThrow(() -> new RuntimeException(""Team not found""));

        // Prevent adding users to the Internal team
        if (team.getName().equals(TeamService.INTERNAL_TEAM_NAME)) {
            return new RedirectView(""/teams?error=internalTeamNotAccessible"");
        }

        // Find the user
        User user =
                userRepository
                        .findById(userId)
                        .orElseThrow(() -> new RuntimeException(""User not found""));

        // Check if user is in the Internal team - prevent moving them
        if (user.getTeam() != null
                && user.getTeam().getName().equals(TeamService.INTERNAL_TEAM_NAME)) {
            return new RedirectView(""/teams/"" + teamId + ""?error=cannotMoveInternalUsers"");
        }

        // Assign user to team
        user.setTeam(team);
        userRepository.save(user);

        // Redirect back to team details page
        return new RedirectView(""/teams/"" + teamId + ""?messageType=userAdded"");
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,register,"String register(UsernameAndPass,Model)","[61, 81]","{'A236': [(64, 64)], 'A233': [(61, 62), (66, 68), (70, 76), (80, 81)], 'A234': [(63, 63), (65, 65)], 'A238': [(69, 69), (77, 79)]}","{'A236': 0.047619047619047616, 'A233': 0.6666666666666666, 'A234': 0.09523809523809523, 'A238': 0.19047619047619047}",A233,,"    @PreAuthorize(""!hasAuthority('ROLE_DEMO_USER')"")
    @PostMapping(""/register"")
    public String register(@ModelAttribute UsernameAndPass requestModel, Model model)
            throws SQLException, UnsupportedProviderException {
        if (userService.usernameExistsIgnoreCase(requestModel.getUsername())) {
            model.addAttribute(""error"", ""Username already exists"");
            return ""register"";
        }
        try {
            Team team = teamRepository.findByName(TeamService.DEFAULT_TEAM_NAME).orElse(null);
            userService.saveUser(
                    requestModel.getUsername(),
                    requestModel.getPassword(),
                    team,
                    Role.USER.getRoleId(),
                    false);
        } catch (IllegalArgumentException e) {
            return ""redirect:/login?messageType=invalidUsername"";
        }
        return ""redirect:/login?registered=true"";
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,changeUsername,"RedirectView changeUsername(Principal,String,String,HttpServletRequest,HttpServletResponse,RedirectAttributes)","[83, 124]","{'A236': [(92, 92)], 'A233': [(83, 86), (88, 90), (94, 94), (96, 98), (101, 104), (106, 106), (108, 114), (118, 118), (120, 124)], 'A234': [(87, 87), (91, 91), (93, 93), (95, 95), (99, 100), (105, 105), (107, 107)], 'A238': [(115, 117), (119, 119)]}","{'A236': 0.023809523809523808, 'A233': 0.6904761904761905, 'A234': 0.19047619047619047, 'A238': 0.09523809523809523}",A233,,"    @PreAuthorize(""!hasAuthority('ROLE_DEMO_USER')"")
    @PostMapping(""/change-username"")
    public RedirectView changeUsername(
            Principal principal,
            @RequestParam(name = ""currentPasswordChangeUsername"") String currentPassword,
            @RequestParam(name = ""newUsername"") String newUsername,
            HttpServletRequest request,
            HttpServletResponse response,
            RedirectAttributes redirectAttributes)
            throws IOException, SQLException, UnsupportedProviderException {
        if (!userService.isUsernameValid(newUsername)) {
            return new RedirectView(""/account?messageType=invalidUsername"", true);
        }
        if (principal == null) {
            return new RedirectView(""/account?messageType=notAuthenticated"", true);
        }
        // The username MUST be unique when renaming
        Optional<User> userOpt = userService.findByUsername(principal.getName());
        if (userOpt == null || userOpt.isEmpty()) {
            return new RedirectView(""/account?messageType=userNotFound"", true);
        }
        User user = userOpt.get();
        if (user.getUsername().equals(newUsername)) {
            return new RedirectView(""/account?messageType=usernameExists"", true);
        }
        if (!userService.isPasswordCorrect(user, currentPassword)) {
            return new RedirectView(""/account?messageType=incorrectPassword"", true);
        }
        if (!user.getUsername().equals(newUsername) && userService.usernameExists(newUsername)) {
            return new RedirectView(""/account?messageType=usernameExists"", true);
        }
        if (newUsername != null && newUsername.length() > 0) {
            try {
                userService.changeUsername(user, newUsername);
            } catch (IllegalArgumentException e) {
                return new RedirectView(""/account?messageType=invalidUsername"", true);
            }
        }
        // Logout using Spring's utility
        new SecurityContextLogoutHandler().logout(request, response, null);
        return new RedirectView(LOGIN_MESSAGETYPE_CREDSUPDATED, true);
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,changePasswordOnLogin,"RedirectView changePasswordOnLogin(Principal,String,String,HttpServletRequest,HttpServletResponse,RedirectAttributes)","[126, 152]","{'A236': [(135, 135), (140, 140)], 'A233': [(126, 133), (136, 138), (141, 152)], 'A234': [(134, 134), (139, 139)]}","{'A236': 0.07407407407407407, 'A233': 0.8518518518518519, 'A234': 0.07407407407407407}",A233,,"    @PreAuthorize(""!hasAuthority('ROLE_DEMO_USER')"")
    @PostMapping(""/change-password-on-login"")
    public RedirectView changePasswordOnLogin(
            Principal principal,
            @RequestParam(name = ""currentPassword"") String currentPassword,
            @RequestParam(name = ""newPassword"") String newPassword,
            HttpServletRequest request,
            HttpServletResponse response,
            RedirectAttributes redirectAttributes)
            throws SQLException, UnsupportedProviderException {
        if (principal == null) {
            return new RedirectView(""/change-creds?messageType=notAuthenticated"", true);
        }
        Optional<User> userOpt = userService.findByUsernameIgnoreCase(principal.getName());
        if (userOpt.isEmpty()) {
            return new RedirectView(""/change-creds?messageType=userNotFound"", true);
        }
        User user = userOpt.get();
        if (!userService.isPasswordCorrect(user, currentPassword)) {
            return new RedirectView(""/change-creds?messageType=incorrectPassword"", true);
        }
        userService.changePassword(user, newPassword);
        userService.changeFirstUse(user, false);
        // Logout using Spring's utility
        new SecurityContextLogoutHandler().logout(request, response, null);
        return new RedirectView(LOGIN_MESSAGETYPE_CREDSUPDATED, true);
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,changePassword,"RedirectView changePassword(Principal,String,String,HttpServletRequest,HttpServletResponse,RedirectAttributes)","[154, 179]","{'A236': [(163, 163), (168, 168)], 'A233': [(154, 161), (164, 166), (169, 179)], 'A234': [(162, 162), (167, 167)]}","{'A236': 0.07692307692307693, 'A233': 0.8461538461538461, 'A234': 0.07692307692307693}",A233,,"    @PreAuthorize(""!hasAuthority('ROLE_DEMO_USER')"")
    @PostMapping(""/change-password"")
    public RedirectView changePassword(
            Principal principal,
            @RequestParam(name = ""currentPassword"") String currentPassword,
            @RequestParam(name = ""newPassword"") String newPassword,
            HttpServletRequest request,
            HttpServletResponse response,
            RedirectAttributes redirectAttributes)
            throws SQLException, UnsupportedProviderException {
        if (principal == null) {
            return new RedirectView(""/account?messageType=notAuthenticated"", true);
        }
        Optional<User> userOpt = userService.findByUsernameIgnoreCase(principal.getName());
        if (userOpt.isEmpty()) {
            return new RedirectView(""/account?messageType=userNotFound"", true);
        }
        User user = userOpt.get();
        if (!userService.isPasswordCorrect(user, currentPassword)) {
            return new RedirectView(""/account?messageType=incorrectPassword"", true);
        }
        userService.changePassword(user, newPassword);
        // Logout using Spring's utility
        new SecurityContextLogoutHandler().logout(request, response, null);
        return new RedirectView(LOGIN_MESSAGETYPE_CREDSUPDATED, true);
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,updateUserSettings,"String updateUserSettings(Map<String, String>,Principal)","[181, 208]","{'A236': [(187, 194), (198, 199), (202, 203)], 'A233': [(181, 182), (204, 208)], 'A234': [(183, 186), (195, 197), (200, 201)]}","{'A236': 0.42857142857142855, 'A233': 0.25, 'A234': 0.32142857142857145}",A236,,"    @PreAuthorize(""!hasAuthority('ROLE_DEMO_USER')"")
    @PostMapping(""/updateUserSettings"")
    /**
     * Updates the user settings based on the provided JSON payload.
     *
     * @param updates A map containing the settings to update. The expected structure is:
     *     <ul>
     *       <li><b>emailNotifications</b> (optional): ""true"" or ""false"" - Enable or disable email
     *           notifications.
     *       <li><b>theme</b> (optional): ""light"" or ""dark"" - Set the user's preferred theme.
     *       <li><b>language</b> (optional): A string representing the preferred language (e.g.,
     *           ""en"", ""fr"").
     *     </ul>
     *     Keys not listed above will be ignored.
     * @param principal The currently authenticated user.
     * @return A redirect string to the account page after updating the settings.
     * @throws SQLException If a database error occurs.
     * @throws UnsupportedProviderException If the operation is not supported for the user's
     *     provider.
     */
    public String updateUserSettings(@RequestBody Map<String, String> updates, Principal principal)
            throws SQLException, UnsupportedProviderException {
        log.debug(""Processed updates: {}"", updates);
        // Assuming you have a method in userService to update the settings for a user
        userService.updateUserSettings(principal.getName(), updates);
        // Redirect to a page of your choice after updating
        return ""redirect:/account"";
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,saveUser,"RedirectView saveUser(String,String,String,Long,String,boolean)","[210, 280]","{'A236': [(220, 220), (232, 232)], 'A233': [(210, 216), (218, 218), (222, 227), (233, 233), (237, 249), (251, 253), (256, 261), (266, 267), (269, 270), (273, 273), (275, 275), (277, 280)], 'A234': [(217, 217), (219, 219), (221, 221), (228, 231), (234, 236), (254, 255), (262, 265), (271, 272), (274, 274), (276, 276)], 'A235': [(250, 250), (268, 268)]}","{'A236': 0.028169014084507043, 'A233': 0.6619718309859155, 'A234': 0.28169014084507044, 'A235': 0.028169014084507043}",A233,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @PostMapping(""/admin/saveUser"")
    public RedirectView saveUser(
            @RequestParam(name = ""username"", required = true) String username,
            @RequestParam(name = ""password"", required = false) String password,
            @RequestParam(name = ""role"") String role,
            @RequestParam(name = ""teamId"", required = false) Long teamId,
            @RequestParam(name = ""authType"") String authType,
            @RequestParam(name = ""forceChange"", required = false, defaultValue = ""false"")
                    boolean forceChange)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        if (!userService.isUsernameValid(username)) {
            return new RedirectView(""/adminSettings?messageType=invalidUsername"", true);
        }
        if (applicationProperties.getPremium().isEnabled()
                && applicationProperties.getPremium().getMaxUsers()
                        <= userService.getTotalUsersCount()) {
            return new RedirectView(""/adminSettings?messageType=maxUsersReached"", true);
        }
        Optional<User> userOpt = userService.findByUsernameIgnoreCase(username);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            if (user.getUsername().equalsIgnoreCase(username)) {
                return new RedirectView(""/adminSettings?messageType=usernameExists"", true);
            }
        }
        if (userService.usernameExistsIgnoreCase(username)) {
            return new RedirectView(""/adminSettings?messageType=usernameExists"", true);
        }
        try {
            // Validate the role
            Role roleEnum = Role.fromString(role);
            if (roleEnum == Role.INTERNAL_API_USER) {
                // If the role is INTERNAL_API_USER, reject the request
                return new RedirectView(""/adminSettings?messageType=invalidRole"", true);
            }
        } catch (IllegalArgumentException e) {
            // If the role ID is not valid, redirect with an error message
            return new RedirectView(""/adminSettings?messageType=invalidRole"", true);
        }

        // Use teamId if provided, otherwise use default team
        Long effectiveTeamId = teamId;
        if (effectiveTeamId == null) {
            Team defaultTeam =
                    teamRepository.findByName(TeamService.DEFAULT_TEAM_NAME).orElse(null);
            if (defaultTeam != null) {
                effectiveTeamId = defaultTeam.getId();
            }
        } else {
            // Check if the selected team is Internal - prevent assigning to it
            Team selectedTeam = teamRepository.findById(effectiveTeamId).orElse(null);
            if (selectedTeam != null
                    && TeamService.INTERNAL_TEAM_NAME.equals(selectedTeam.getName())) {
                return new RedirectView(
                        ""/adminSettings?messageType=internalTeamNotAccessible"", true);
            }
        }

        if (authType.equalsIgnoreCase(AuthenticationType.SSO.toString())) {
            userService.saveUser(username, AuthenticationType.SSO, effectiveTeamId, role);
        } else {
            if (password.isBlank()) {
                return new RedirectView(""/adminSettings?messageType=invalidPassword"", true);
            }
            userService.saveUser(username, password, effectiveTeamId, role, forceChange);
        }
        return new RedirectView(
                ""/adminSettings"", // Redirect to account page after adding the user
                true);
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,changeRole,"RedirectView changeRole(String,String,Long,Authentication)","[282, 343]","{'A236': [(290, 290)], 'A233': [(284, 284), (288, 288), (293, 293), (296, 296), (302, 302), (309, 309), (313, 313), (317, 322), (325, 325), (327, 327), (332, 332), (334, 337), (341, 342)], 'A234': [(289, 289), (323, 324), (328, 331), (340, 340), (343, 343)], 'A235': [(316, 316), (326, 326), (333, 333), (338, 338)], 'A237': [(282, 283), (285, 287), (291, 292), (294, 295), (297, 301), (303, 308), (310, 312), (314, 315), (339, 339)]}","{'A236': 0.016129032258064516, 'A233': 0.3548387096774194, 'A234': 0.14516129032258066, 'A235': 0.06451612903225806, 'A237': 0.41935483870967744}",A237,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @PostMapping(""/admin/changeRole"")
    @Transactional
    public RedirectView changeRole(
            @RequestParam(name = ""username"") String username,
            @RequestParam(name = ""role"") String role,
            @RequestParam(name = ""teamId"", required = false) Long teamId,
            Authentication authentication)
            throws SQLException, UnsupportedProviderException {
        Optional<User> userOpt = userService.findByUsernameIgnoreCase(username);
        if (!userOpt.isPresent()) {
            return new RedirectView(""/adminSettings?messageType=userNotFound"", true);
        }
        if (!userService.usernameExistsIgnoreCase(username)) {
            return new RedirectView(""/adminSettings?messageType=userNotFound"", true);
        }
        // Get the currently authenticated username
        String currentUsername = authentication.getName();
        // Check if the provided username matches the current session's username
        if (currentUsername.equalsIgnoreCase(username)) {
            return new RedirectView(""/adminSettings?messageType=downgradeCurrentUser"", true);
        }
        try {
            // Validate the role
            Role roleEnum = Role.fromString(role);
            if (roleEnum == Role.INTERNAL_API_USER) {
                // If the role is INTERNAL_API_USER, reject the request
                return new RedirectView(""/adminSettings?messageType=invalidRole"", true);
            }
        } catch (IllegalArgumentException e) {
            // If the role ID is not valid, redirect with an error message
            return new RedirectView(""/adminSettings?messageType=invalidRole"", true);
        }
        User user = userOpt.get();

        // Update the team if a teamId is provided
        if (teamId != null) {
            Team team = teamRepository.findById(teamId).orElse(null);
            if (team != null) {
                // Prevent assigning to Internal team
                if (TeamService.INTERNAL_TEAM_NAME.equals(team.getName())) {
                    return new RedirectView(
                            ""/adminSettings?messageType=internalTeamNotAccessible"", true);
                }

                // Prevent moving users from Internal team
                if (user.getTeam() != null
                        && TeamService.INTERNAL_TEAM_NAME.equals(user.getTeam().getName())) {
                    return new RedirectView(
                            ""/adminSettings?messageType=cannotMoveInternalUsers"", true);
                }

                user.setTeam(team);
                userRepository.save(user);
            }
        }

        userService.changeRole(user, role);
        return new RedirectView(
                ""/adminSettings"", // Redirect to account page after adding the user
                true);
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,changeUserEnabled,"RedirectView changeUserEnabled(String,boolean,Authentication)","[345, 393]","{'A236': [(351, 351), (353, 353), (372, 372), (384, 385)], 'A233': [(354, 354), (357, 357), (363, 363), (390, 392)], 'A234': [(345, 350), (352, 352), (355, 356), (358, 362), (364, 371), (373, 383), (386, 389)], 'A237': [(393, 393)]}","{'A236': 0.10204081632653061, 'A233': 0.12244897959183673, 'A234': 0.7551020408163265, 'A237': 0.02040816326530612}",A234,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @PostMapping(""/admin/changeUserEnabled/{username}"")
    public RedirectView changeUserEnabled(
            @PathVariable(""username"") String username,
            @RequestParam(""enabled"") boolean enabled,
            Authentication authentication)
            throws SQLException, UnsupportedProviderException {
        Optional<User> userOpt = userService.findByUsernameIgnoreCase(username);
        if (userOpt.isEmpty()) {
            return new RedirectView(""/adminSettings?messageType=userNotFound"", true);
        }
        if (!userService.usernameExistsIgnoreCase(username)) {
            return new RedirectView(""/adminSettings?messageType=userNotFound"", true);
        }
        // Get the currently authenticated username
        String currentUsername = authentication.getName();
        // Check if the provided username matches the current session's username
        if (currentUsername.equalsIgnoreCase(username)) {
            return new RedirectView(""/adminSettings?messageType=disabledCurrentUser"", true);
        }
        User user = userOpt.get();
        userService.changeUserEnabled(user, enabled);
        if (!enabled) {
            // Invalidate all sessions if the user is being disabled
            List<Object> principals = sessionRegistry.getAllPrincipals();
            String userNameP = """";
            for (Object principal : principals) {
                List<SessionInformation> sessionsInformation =
                        sessionRegistry.getAllSessions(principal, false);
                if (principal instanceof UserDetails detailsUser) {
                    userNameP = detailsUser.getUsername();
                } else if (principal instanceof OAuth2User oAuth2User) {
                    userNameP = oAuth2User.getName();
                } else if (principal instanceof CustomSaml2AuthenticatedPrincipal saml2User) {
                    userNameP = saml2User.name();
                } else if (principal instanceof String stringUser) {
                    userNameP = stringUser;
                }
                if (userNameP.equalsIgnoreCase(username)) {
                    for (SessionInformation sessionInfo : sessionsInformation) {
                        sessionRegistry.expireSession(sessionInfo.getSessionId());
                    }
                }
            }
        }
        return new RedirectView(
                ""/adminSettings"", // Redirect to account page after adding the user
                true);
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,deleteUser,"RedirectView deleteUser(String,Authentication)","[395, 417]","{'A233': [(395, 397), (400, 400), (402, 404), (406, 407), (414, 414), (416, 417)], 'A234': [(398, 399), (401, 401), (405, 405), (408, 413), (415, 415)]}","{'A233': 0.5217391304347826, 'A234': 0.4782608695652174}",A233,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @PostMapping(""/admin/deleteUser/{username}"")
    public RedirectView deleteUser(
            @PathVariable(""username"") String username, Authentication authentication) {
        if (!userService.usernameExistsIgnoreCase(username)) {
            return new RedirectView(""/adminSettings?messageType=deleteUsernameExists"", true);
        }
        // Get the currently authenticated username
        String currentUsername = authentication.getName();
        // Check if the provided username matches the current session's username
        if (currentUsername.equalsIgnoreCase(username)) {
            return new RedirectView(""/adminSettings?messageType=deleteCurrentUser"", true);
        }
        // Invalidate all sessions before deleting the user
        List<SessionInformation> sessionsInformations =
                sessionRegistry.getAllSessions(username, false);
        for (SessionInformation sessionsInformation : sessionsInformations) {
            sessionRegistry.expireSession(sessionsInformation.getSessionId());
            sessionRegistry.removeSessionInformation(sessionsInformation.getSessionId());
        }
        userService.deleteUser(username);
        return new RedirectView(""/adminSettings"", true);
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,getApiKey,ResponseEntity<String> getApiKey(Principal),"[419, 431]","{'A233': [(419, 431)]}",{'A233': 1.0},A233,,"    @PreAuthorize(""!hasAuthority('ROLE_DEMO_USER')"")
    @PostMapping(""/get-api-key"")
    public ResponseEntity<String> getApiKey(Principal principal) {
        if (principal == null) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""User not authenticated."");
        }
        String username = principal.getName();
        String apiKey = userService.getApiKeyForUser(username);
        if (apiKey == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(""API key not found for user."");
        }
        return ResponseEntity.ok(apiKey);
    }
"
stirling.software.proprietary.security.controller.api,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/UserController.java,UserController,updateApiKey,ResponseEntity<String> updateApiKey(Principal),"[433, 446]","{'A233': [(433, 446)]}",{'A233': 1.0},A233,,"    @PreAuthorize(""!hasAuthority('ROLE_DEMO_USER')"")
    @PostMapping(""/update-api-key"")
    public ResponseEntity<String> updateApiKey(Principal principal) {
        if (principal == null) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""User not authenticated."");
        }
        String username = principal.getName();
        User user = userService.refreshApiKeyForUser(username);
        String apiKey = user.getApiKey();
        if (apiKey == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(""API key not found for user."");
        }
        return ResponseEntity.ok(apiKey);
    }
"
stirling.software.proprietary.security.controller.web,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/web/TeamWebController.java,TeamWebController,listTeams,"String listTeams(HttpServletRequest,Model)","[38, 87]","{'A233': [(38, 39), (41, 42), (44, 44), (49, 60), (82, 84), (86, 87)], 'A234': [(40, 40), (45, 48), (61, 81)], 'A235': [(43, 43), (85, 85)]}","{'A233': 0.44, 'A234': 0.52, 'A235': 0.04}",A234,,"    @GetMapping
    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    public String listTeams(HttpServletRequest request, Model model) {
        // Get teams with user counts using a DTO projection
        List<TeamWithUserCountDTO> allTeamsWithCounts = teamRepository.findAllTeamsWithUserCount();

        // Filter out the Internal team
        List<TeamWithUserCountDTO> teamsWithCounts =
                allTeamsWithCounts.stream()
                        .filter(team -> !team.getName().equals(TeamService.INTERNAL_TEAM_NAME))
                        .toList();

        // Get the latest activity for each team
        List<Object[]> teamActivities = sessionRepository.findLatestActivityByTeam();

        // Convert the query results to a map for easy access in the view
        Map<Long, Date> teamLastRequest = new HashMap<>();
        for (Object[] result : teamActivities) {
            Long teamId = (Long) result[0]; // teamId alias
            Date lastActivity = (Date) result[1]; // lastActivity alias
            teamLastRequest.put(teamId, lastActivity);
        }

        String messageType = request.getParameter(""messageType"");
        if (messageType != null) {
            if (""teamCreated"".equals(messageType)) {
                model.addAttribute(""addMessage"", ""teamCreated"");
            } else if (""teamExists"".equals(messageType)) {
                model.addAttribute(""errorMessage"", ""teamExists"");
            } else if (""teamNotFound"".equals(messageType)) {
                model.addAttribute(""errorMessage"", ""teamNotFound"");
            } else if (""teamNameExists"".equals(messageType)) {
                model.addAttribute(""errorMessage"", ""teamNameExists"");
            } else if (""internalTeamNotAccessible"".equals(messageType)) {
                model.addAttribute(""errorMessage"", ""team.internalTeamNotAccessible"");
            } else if (""teamRenamed"".equals(messageType)) {
                model.addAttribute(""changeMessage"", ""teamRenamed"");
            } else if (""teamHasUsers"".equals(messageType)) {
                model.addAttribute(""errorMessage"", ""teamHasUsers"");
            } else if (""teamDeleted"".equals(messageType)) {
                model.addAttribute(""deleteMessage"", ""teamDeleted"");
            }
        }

        // Add data to the model
        model.addAttribute(""teamsWithCounts"", teamsWithCounts);
        model.addAttribute(""teamLastRequest"", teamLastRequest);

        return ""accounts/teams"";
    }
"
stirling.software.proprietary.security.controller.web,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/web/TeamWebController.java,TeamWebController,viewTeamDetails,"String viewTeamDetails(HttpServletRequest,Long,Model)","[89, 147]","{'A233': [(89, 90), (93, 93), (99, 102), (104, 105), (107, 109), (124, 134), (142, 147)], 'A234': [(91, 92), (94, 97), (110, 122), (135, 141)], 'A235': [(98, 98), (103, 103), (106, 106), (123, 123)]}","{'A233': 0.4915254237288136, 'A234': 0.4406779661016949, 'A235': 0.06779661016949153}",A233,,"    @GetMapping(""/{id}"")
    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    public String viewTeamDetails(
            HttpServletRequest request, @PathVariable(""id"") Long id, Model model) {
        // Get the team
        Team team =
                teamRepository
                        .findById(id)
                        .orElseThrow(() -> new RuntimeException(""Team not found""));

        // Prevent access to Internal team
        if (team.getName().equals(TeamService.INTERNAL_TEAM_NAME)) {
            return ""redirect:/teams?error=internalTeamNotAccessible"";
        }

        // Get users for this team directly using the direct query
        List<User> teamUsers = userRepository.findAllByTeamId(id);

        // Get all users not in this team for the Add User to Team dropdown
        // Exclude users that are in the Internal team
        List<User> allUsers = userRepository.findAllWithTeam();
        List<User> availableUsers =
                allUsers.stream()
                        .filter(
                                user ->
                                        (user.getTeam() == null
                                                        || !user.getTeam().getId().equals(id))
                                                && (user.getTeam() == null
                                                        || !user.getTeam()
                                                                .getName()
                                                                .equals(
                                                                        TeamService
                                                                                .INTERNAL_TEAM_NAME)))
                        .toList();

        // Get the latest session for each user in the team
        List<Object[]> userSessions = sessionRepository.findLatestSessionByTeamId(id);

        // Create a map of username to last request date
        Map<String, Date> userLastRequest = new HashMap<>();
        for (Object[] result : userSessions) {
            String username = (String) result[0]; // username alias
            Date lastRequest = (Date) result[1]; // lastRequest alias
            userLastRequest.put(username, lastRequest);
        }

        String errorMessage = request.getParameter(""error"");
        if (errorMessage != null) {
            if (""cannotMoveInternalUsers"".equals(errorMessage)) {
                model.addAttribute(""errorMessage"", ""team.cannotMoveInternalUsers"");
            }
        }

        model.addAttribute(""team"", team);
        model.addAttribute(""teamUsers"", teamUsers);
        model.addAttribute(""availableUsers"", availableUsers);
        model.addAttribute(""userLastRequest"", userLastRequest);
        return ""accounts/team-details"";
    }
"
stirling.software.proprietary.security.controller.web,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/controller/web/DatabaseWebController.java,DatabaseWebController,database,"String database(HttpServletRequest,Model,Authentication)","[27, 45]","{'A236': [(37, 37)], 'A234': [(27, 36), (38, 45)]}","{'A236': 0.05263157894736842, 'A234': 0.9473684210526315}",A234,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @GetMapping(""/database"")
    public String database(HttpServletRequest request, Model model, Authentication authentication) {
        String error = request.getParameter(""error"");
        String confirmed = request.getParameter(""infoMessage"");
        if (error != null) {
            model.addAttribute(""error"", error);
        } else if (confirmed != null) {
            model.addAttribute(""infoMessage"", confirmed);
        }
        List<FileInfo> backupList = databaseService.getBackupList();
        model.addAttribute(""backupFiles"", backupList);
        String dbVersion = databaseService.getH2Version();
        model.addAttribute(""databaseVersion"", dbVersion);
        if (""Unknown"".equalsIgnoreCase(dbVersion)) {
            model.addAttribute(""infoMessage"", ""notSupported"");
        }
        return ""database"";
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticatedPrincipal.java,,getName,String getName(),"[18, 21]","{'A234': [(18, 21)]}",{'A234': 1.0},A234,,"    @Override
    public String getName() {
        return this.name;
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticatedPrincipal.java,,getAttributes,"Map<String, List<Object>> getAttributes()","[23, 26]","{'A234': [(23, 26)]}",{'A234': 1.0},A234,,"    @Override
    public Map<String, List<Object>> getAttributes() {
        return this.attributes;
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticationFailureHandler.java,CustomSaml2AuthenticationFailureHandler,onAuthenticationFailure,"void onAuthenticationFailure(HttpServletRequest,HttpServletResponse,AuthenticationException)","[21, 40]","{'A236': [(26, 28), (32, 32), (38, 38)], 'A234': [(21, 25), (29, 31), (33, 37), (39, 40)]}","{'A236': 0.25, 'A234': 0.75}",A234,,"    @Override
    public void onAuthenticationFailure(
            HttpServletRequest request,
            HttpServletResponse response,
            AuthenticationException exception)
            throws IOException {
        log.error(""Authentication error"", exception);

        if (exception instanceof Saml2AuthenticationException) {
            Saml2Error error = ((Saml2AuthenticationException) exception).getSaml2Error();
            getRedirectStrategy()
                    .sendRedirect(request, response, ""/login?errorOAuth="" + error.getErrorCode());
        } else if (exception instanceof ProviderNotFoundException) {
            getRedirectStrategy()
                    .sendRedirect(
                            request,
                            response,
                            ""/login?errorOAuth=not_authentication_provider_found"");
        }
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticationSuccessHandler.java,CustomSaml2AuthenticationSuccessHandler,onAuthenticationSuccess,"void onAuthenticationSuccess(HttpServletRequest,HttpServletResponse,Authentication)","[36, 126]","{'A236': [(100, 100), (108, 108), (115, 115)], 'A234': [(36, 41), (43, 45), (48, 54), (60, 62), (66, 68), (72, 73), (75, 80), (99, 99), (101, 102), (104, 104), (107, 107), (109, 110), (114, 114), (119, 122), (124, 126)], 'A233': [(42, 42), (46, 47), (55, 59), (63, 65), (69, 71), (74, 74), (81, 98), (103, 103), (105, 106), (111, 113), (116, 118), (123, 123)]}","{'A236': 0.03296703296703297, 'A234': 0.4945054945054945, 'A233': 0.4725274725274725}",A234,,"    @Override
    public void onAuthenticationSuccess(
            HttpServletRequest request, HttpServletResponse response, Authentication authentication)
            throws ServletException, IOException {

        Object principal = authentication.getPrincipal();
        log.debug(""Starting SAML2 authentication success handling"");

        if (principal instanceof CustomSaml2AuthenticatedPrincipal saml2Principal) {
            String username = saml2Principal.name();
            log.debug(""Authenticated principal found for user: {}"", username);

            HttpSession session = request.getSession(false);
            String contextPath = request.getContextPath();
            SavedRequest savedRequest =
                    (session != null)
                            ? (SavedRequest) session.getAttribute(""SPRING_SECURITY_SAVED_REQUEST"")
                            : null;

            log.debug(
                    ""Session exists: {}, Saved request exists: {}"",
                    session != null,
                    savedRequest != null);

            if (savedRequest != null
                    && !RequestUriUtils.isStaticResource(
                            contextPath, savedRequest.getRedirectUrl())) {
                log.debug(
                        ""Valid saved request found, redirecting to original destination: {}"",
                        savedRequest.getRedirectUrl());
                super.onAuthenticationSuccess(request, response, authentication);
            } else {
                SAML2 saml2 = applicationProperties.getSecurity().getSaml2();
                log.debug(
                        ""Processing SAML2 authentication with autoCreateUser: {}"",
                        saml2.getAutoCreateUser());

                if (loginAttemptService.isBlocked(username)) {
                    log.debug(""User {} is blocked due to too many login attempts"", username);
                    if (session != null) {
                        session.removeAttribute(""SPRING_SECURITY_SAVED_REQUEST"");
                    }
                    throw new LockedException(
                            ""Your account has been locked due to too many failed login attempts."");
                }

                boolean userExists = userService.usernameExistsIgnoreCase(username);
                boolean hasPassword = userExists && userService.hasPassword(username);
                boolean isSSOUser =
                        userExists
                                && userService.isAuthenticationTypeByUsername(
                                        username, AuthenticationType.SSO);

                log.debug(
                        ""User status - Exists: {}, Has password: {}, Is SSO user: {}"",
                        userExists,
                        hasPassword,
                        isSSOUser);

                if (userExists && hasPassword && !isSSOUser && saml2.getAutoCreateUser()) {
                    log.debug(
                            ""User {} exists with password but is not SSO user, redirecting to logout"",
                            username);
                    response.sendRedirect(
                            contextPath + ""/logout?oAuth2AuthenticationErrorWeb=true"");
                    return;
                }

                try {
                    if (saml2.getBlockRegistration() && !userExists) {
                        log.debug(""Registration blocked for new user: {}"", username);
                        response.sendRedirect(
                                contextPath + ""/login?errorOAuth=oAuth2AdminBlockedUser"");
                        return;
                    }
                    log.debug(""Processing SSO post-login for user: {}"", username);
                    userService.processSSOPostLogin(username, saml2.getAutoCreateUser());
                    log.debug(""Successfully processed authentication for user: {}"", username);
                    response.sendRedirect(contextPath + ""/"");
                } catch (IllegalArgumentException | SQLException | UnsupportedProviderException e) {
                    log.debug(
                            ""Invalid username detected for user: {}, redirecting to logout"",
                            username);
                    response.sendRedirect(contextPath + ""/logout?invalidUsername=true"");
                }
            }
        } else {
            log.debug(""Non-SAML2 principal detected, delegating to parent handler"");
            super.onAuthenticationSuccess(request, response, authentication);
        }
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java,SAML2Configuration,relyingPartyRegistrations,RelyingPartyRegistrationRepository relyingPartyRegistrations(),"[38, 77]","{'A236': [(39, 39), (42, 42), (54, 60), (68, 73)], 'A233': [(38, 38), (40, 41), (43, 53), (61, 67), (74, 77)]}","{'A236': 0.375, 'A233': 0.625}",A233,,"    @Bean
    @ConditionalOnProperty(name = ""security.saml2.enabled"", havingValue = ""true"")
    public RelyingPartyRegistrationRepository relyingPartyRegistrations() throws Exception {
        SAML2 samlConf = applicationProperties.getSecurity().getSaml2();
        X509Certificate idpCert = CertificateUtils.readCertificate(samlConf.getIdpCert());
        Saml2X509Credential verificationCredential = Saml2X509Credential.verification(idpCert);
        Resource privateKeyResource = samlConf.getPrivateKey();
        Resource certificateResource = samlConf.getSpCert();
        Saml2X509Credential signingCredential =
                new Saml2X509Credential(
                        CertificateUtils.readPrivateKey(privateKeyResource),
                        CertificateUtils.readCertificate(certificateResource),
                        Saml2X509CredentialType.SIGNING);
        RelyingPartyRegistration rp =
                RelyingPartyRegistration.withRegistrationId(samlConf.getRegistrationId())
                        .signingX509Credentials(c -> c.add(signingCredential))
                        .entityId(samlConf.getIdpIssuer())
                        .singleLogoutServiceBinding(Saml2MessageBinding.POST)
                        .singleLogoutServiceLocation(samlConf.getIdpSingleLogoutUrl())
                        .singleLogoutServiceResponseLocation(""http://localhost:8080/login"")
                        .assertionConsumerServiceBinding(Saml2MessageBinding.POST)
                        .assertionConsumerServiceLocation(
                                ""{baseUrl}/login/saml2/sso/{registrationId}"")
                        .assertingPartyMetadata(
                                metadata ->
                                        metadata.entityId(samlConf.getIdpIssuer())
                                                .verificationX509Credentials(
                                                        c -> c.add(verificationCredential))
                                                .singleSignOnServiceBinding(
                                                        Saml2MessageBinding.POST)
                                                .singleSignOnServiceLocation(
                                                        samlConf.getIdpSingleLoginUrl())
                                                .singleLogoutServiceBinding(
                                                        Saml2MessageBinding.POST)
                                                .singleLogoutServiceLocation(
                                                        samlConf.getIdpSingleLogoutUrl())
                                                .wantAuthnRequestsSigned(true))
                        .build();
        return new InMemoryRelyingPartyRegistrationRepository(rp);
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java,SAML2Configuration,authenticationRequestResolver,OpenSaml4AuthenticationRequestResolver authenticationRequestResolver(RelyingPartyRegistrationRepository),"[79, 121]","{'A236': [(80, 80), (85, 85), (89, 97), (99, 114), (116, 118)], 'A233': [(79, 79), (81, 84), (86, 88), (98, 98), (115, 115), (119, 121)]}","{'A236': 0.6976744186046512, 'A233': 0.3023255813953488}",A236,,"    @Bean
    @ConditionalOnProperty(name = ""security.saml2.enabled"", havingValue = ""true"")
    public OpenSaml4AuthenticationRequestResolver authenticationRequestResolver(
            RelyingPartyRegistrationRepository relyingPartyRegistrationRepository) {
        OpenSaml4AuthenticationRequestResolver resolver =
                new OpenSaml4AuthenticationRequestResolver(relyingPartyRegistrationRepository);

        resolver.setAuthnRequestCustomizer(
                customizer -> {
                    HttpServletRequest request = customizer.getRequest();
                    AuthnRequest authnRequest = customizer.getAuthnRequest();
                    HttpSessionSaml2AuthenticationRequestRepository requestRepository =
                            new HttpSessionSaml2AuthenticationRequestRepository();
                    AbstractSaml2AuthenticationRequest saml2AuthenticationRequest =
                            requestRepository.loadAuthenticationRequest(request);

                    if (saml2AuthenticationRequest != null) {
                        String sessionId = request.getSession(false).getId();

                        log.debug(
                                ""Retrieving SAML 2 authentication request ID from the current HTTP session {}"",
                                sessionId);

                        String authenticationRequestId = saml2AuthenticationRequest.getId();

                        if (!authenticationRequestId.isBlank()) {
                            authnRequest.setID(authenticationRequestId);
                        } else {
                            log.warn(
                                    ""No authentication request found for HTTP session {}. Generating new ID"",
                                    sessionId);
                            authnRequest.setID(""ARQ"" + UUID.randomUUID().toString().substring(1));
                        }
                    } else {
                        log.debug(""Generating new authentication request ID"");
                        authnRequest.setID(""ARQ"" + UUID.randomUUID().toString().substring(1));
                    }

                    logAuthnRequestDetails(authnRequest);
                    logHttpRequestDetails(request);
                });
        return resolver;
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java,SAML2Configuration,logAuthnRequestDetails,void logAuthnRequestDetails(AuthnRequest),"[123, 143]","{'A236': [(123, 143)]}",{'A236': 1.0},A236,,"    private static void logAuthnRequestDetails(AuthnRequest authnRequest) {
        String message =
                """"""
                        AuthnRequest:

                        ID: {}
                        Issuer: {}
                        IssueInstant: {}
                        AssertionConsumerService (ACS) URL: {}
                        """""";
        log.debug(
                message,
                authnRequest.getID(),
                authnRequest.getIssuer() != null ? authnRequest.getIssuer().getValue() : null,
                authnRequest.getIssueInstant(),
                authnRequest.getAssertionConsumerServiceURL());

        if (authnRequest.getNameIDPolicy() != null) {
            log.debug(""NameIDPolicy Format: {}"", authnRequest.getNameIDPolicy().getFormat());
        }
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java,SAML2Configuration,logHttpRequestDetails,void logHttpRequestDetails(HttpServletRequest),"[145, 173]","{'A236': [(145, 173)]}",{'A236': 1.0},A236,,"    private static void logHttpRequestDetails(HttpServletRequest request) {
        log.debug(""HTTP Headers: "");
        Collections.list(request.getHeaderNames())
                .forEach(
                        headerName ->
                                log.debug(""{}: {}"", headerName, request.getHeader(headerName)));
        String message =
                """"""
                        HTTP Request Method: {}
                        Session ID: {}
                        Request Path: {}
                        Query String: {}
                        Remote Address: {}

                        SAML Request Parameters:

                        SAMLRequest: {}
                        RelayState: {}
                        """""";
        log.debug(
                message,
                request.getMethod(),
                request.getSession().getId(),
                request.getRequestURI(),
                request.getQueryString(),
                request.getRemoteAddr(),
                request.getParameter(""SAMLRequest""),
                request.getParameter(""RelayState""));
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2ResponseAuthenticationConverter.java,CustomSaml2ResponseAuthenticationConverter,extractAttributes,"Map<String, List<Object>> extractAttributes(Assertion)","[34, 60]","{'A233': [(34, 60)]}",{'A233': 1.0},A233,,"    private Map<String, List<Object>> extractAttributes(Assertion assertion) {
        Map<String, List<Object>> attributes = new HashMap<>();

        for (AttributeStatement attributeStatement : assertion.getAttributeStatements()) {
            for (Attribute attribute : attributeStatement.getAttributes()) {
                String attributeName = attribute.getName();
                List<Object> values = new ArrayList<>();

                for (XMLObject xmlObject : attribute.getAttributeValues()) {
                    // Get the text content directly
                    String value = xmlObject.getDOM().getTextContent();
                    if (value != null && !value.trim().isEmpty()) {
                        values.add(value);
                    }
                }

                if (!values.isEmpty()) {
                    // Store with both full URI and last part of the URI
                    attributes.put(attributeName, values);
                    String shortName = attributeName.substring(attributeName.lastIndexOf('/') + 1);
                    attributes.put(shortName, values);
                }
            }
        }

        return attributes;
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2ResponseAuthenticationConverter.java,CustomSaml2ResponseAuthenticationConverter,convert,Saml2Authentication convert(ResponseToken),"[62, 108]","{'A236': [(68, 68), (71, 71), (91, 92), (107, 107)], 'A234': [(62, 64), (69, 69), (85, 85), (88, 90), (93, 100), (103, 106), (108, 108)], 'A233': [(65, 67), (70, 70), (72, 84), (86, 87), (101, 102)]}","{'A236': 0.10638297872340426, 'A234': 0.44680851063829785, 'A233': 0.44680851063829785}",A234,,"    @Override
    public Saml2Authentication convert(ResponseToken responseToken) {
        Assertion assertion = responseToken.getResponse().getAssertions().get(0);
        Map<String, List<Object>> attributes = extractAttributes(assertion);

        // Debug log with actual values
        log.debug(""Extracted SAML Attributes: {}"", attributes);

        // Try to get username/identifier in order of preference
        String userIdentifier;
        if (hasAttribute(attributes, ""username"")) {
            userIdentifier = getFirstAttributeValue(attributes, ""username"");
        } else if (hasAttribute(attributes, ""emailaddress"")) {
            userIdentifier = getFirstAttributeValue(attributes, ""emailaddress"");
        } else if (hasAttribute(attributes, ""name"")) {
            userIdentifier = getFirstAttributeValue(attributes, ""name"");
        } else if (hasAttribute(attributes, ""upn"")) {
            userIdentifier = getFirstAttributeValue(attributes, ""upn"");
        } else if (hasAttribute(attributes, ""uid"")) {
            userIdentifier = getFirstAttributeValue(attributes, ""uid"");
        } else {
            userIdentifier = assertion.getSubject().getNameID().getValue();
        }

        // Rest of your existing code...
        Optional<User> userOpt = userService.findByUsernameIgnoreCase(userIdentifier);
        SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(""ROLE_USER"");
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            simpleGrantedAuthority =
                    new SimpleGrantedAuthority(userService.findRole(user).getAuthority());
        }

        List<String> sessionIndexes = new ArrayList<>();
        for (AuthnStatement authnStatement : assertion.getAuthnStatements()) {
            sessionIndexes.add(authnStatement.getSessionIndex());
        }

        CustomSaml2AuthenticatedPrincipal principal =
                new CustomSaml2AuthenticatedPrincipal(
                        userIdentifier, attributes, userIdentifier, sessionIndexes);

        return new Saml2Authentication(
                principal,
                responseToken.getToken().getSaml2Response(),
                List.of(simpleGrantedAuthority));
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2ResponseAuthenticationConverter.java,CustomSaml2ResponseAuthenticationConverter,hasAttribute,"boolean hasAttribute(Map<String, List<Object>>,String)","[110, 112]","{'A233': [(110, 112)]}",{'A233': 1.0},A233,,"    private boolean hasAttribute(Map<String, List<Object>> attributes, String name) {
        return attributes.containsKey(name) && !attributes.get(name).isEmpty();
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2ResponseAuthenticationConverter.java,CustomSaml2ResponseAuthenticationConverter,getFirstAttributeValue,"String getFirstAttributeValue(Map<String, List<Object>>,String)","[114, 117]","{'A234': [(117, 117)], 'A233': [(114, 116)]}","{'A234': 0.25, 'A233': 0.75}",A233,,"    private String getFirstAttributeValue(Map<String, List<Object>> attributes, String name) {
        List<Object> values = attributes.get(name);
        return values != null && !values.isEmpty() ? values.get(0).toString() : null;
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CertificateUtils.java,CertificateUtils,readCertificate,X509Certificate readCertificate(Resource),"[22, 32]","{'A234': [(22, 32)]}",{'A234': 1.0},A234,,"    public static X509Certificate readCertificate(Resource certificateResource) throws Exception {
        try (PemReader pemReader =
                new PemReader(
                        new InputStreamReader(
                                certificateResource.getInputStream(), StandardCharsets.UTF_8))) {
            PemObject pemObject = pemReader.readPemObject();
            byte[] decodedCert = pemObject.getContent();
            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
            return (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(decodedCert));
        }
    }
"
stirling.software.proprietary.security.saml2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CertificateUtils.java,CertificateUtils,readPrivateKey,RSAPrivateKey readPrivateKey(Resource),"[34, 55]","{'A234': [(34, 34), (37, 38), (43, 43), (46, 46), (48, 48), (54, 55)], 'A233': [(35, 36), (39, 42), (44, 45), (47, 47), (49, 53)]}","{'A234': 0.36363636363636365, 'A233': 0.6363636363636364}",A233,,"    public static RSAPrivateKey readPrivateKey(Resource privateKeyResource) throws Exception {
        try (PEMParser pemParser =
                new PEMParser(
                        new InputStreamReader(
                                privateKeyResource.getInputStream(), StandardCharsets.UTF_8))) {

            Object object = pemParser.readObject();
            JcaPEMKeyConverter converter = new JcaPEMKeyConverter();

            if (object instanceof PEMKeyPair keypair) {
                // Handle traditional RSA private key format
                return (RSAPrivateKey) converter.getPrivateKey(keypair.getPrivateKeyInfo());
            } else if (object instanceof PrivateKeyInfo keyInfo) {
                // Handle PKCS#8 format
                return (RSAPrivateKey) converter.getPrivateKey(keyInfo);
            } else {
                throw new IllegalArgumentException(
                        ""Unsupported key format: ""
                                + (object != null ? object.getClass().getName() : ""null""));
            }
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/LoginAttemptService.java,LoginAttemptService,init,void init(),"[31, 42]","{'A233': [(31, 32), (38, 40), (42, 42)], 'A234': [(34, 37)], 'A238': [(33, 33), (41, 41)]}","{'A233': 0.5, 'A234': 0.3333333333333333, 'A238': 0.16666666666666666}",A233,,"    @PostConstruct
    public void init() {
        MAX_ATTEMPT = applicationProperties.getSecurity().getLoginAttemptCount();
        if (MAX_ATTEMPT == -1) {
            isBlockedEnabled = false;
            log.info(""Login attempt tracking is disabled."");
        }
        ATTEMPT_INCREMENT_TIME =
                TimeUnit.MINUTES.toMillis(
                        applicationProperties.getSecurity().getLoginResetTimeMinutes());
        attemptsCache = new ConcurrentHashMap<>();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/LoginAttemptService.java,LoginAttemptService,loginSucceeded,void loginSucceeded(String),"[44, 49]","{'A233': [(44, 44), (49, 49)], 'A234': [(45, 45)], 'A238': [(46, 48)]}","{'A233': 0.3333333333333333, 'A234': 0.16666666666666666, 'A238': 0.5}",A238,,"    public void loginSucceeded(String key) {
        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {
            return;
        }
        attemptsCache.remove(key.toLowerCase());
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/LoginAttemptService.java,LoginAttemptService,loginFailed,void loginFailed(String),"[51, 65]","{'A233': [(65, 65)], 'A234': [(52, 54)], 'A238': [(51, 51), (55, 64)]}","{'A233': 0.06666666666666667, 'A234': 0.2, 'A238': 0.7333333333333333}",A238,,"    public void loginFailed(String key) {
        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {
            return;
        }
        AttemptCounter attemptCounter = attemptsCache.get(key.toLowerCase());
        if (attemptCounter == null) {
            attemptCounter = new AttemptCounter();
            attemptsCache.put(key.toLowerCase(), attemptCounter);
        } else {
            if (attemptCounter.shouldReset(ATTEMPT_INCREMENT_TIME)) {
                attemptCounter.reset();
            }
            attemptCounter.increment();
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/LoginAttemptService.java,LoginAttemptService,isBlocked,boolean isBlocked(String),"[67, 76]","{'A233': [(67, 67), (74, 74)], 'A234': [(68, 70)], 'A238': [(71, 73), (75, 76)]}","{'A233': 0.2, 'A234': 0.3, 'A238': 0.5}",A238,,"    public boolean isBlocked(String key) {
        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {
            return false;
        }
        AttemptCounter attemptCounter = attemptsCache.get(key.toLowerCase());
        if (attemptCounter == null) {
            return false;
        }
        return attemptCounter.getAttemptCount() >= MAX_ATTEMPT;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/LoginAttemptService.java,LoginAttemptService,getRemainingAttempts,int getRemainingAttempts(String),"[78, 88]","{'A233': [(80, 81), (88, 88)], 'A234': [(79, 79), (82, 82)], 'A238': [(78, 78), (83, 87)]}","{'A233': 0.2727272727272727, 'A234': 0.18181818181818182, 'A238': 0.5454545454545454}",A238,,"    public int getRemainingAttempts(String key) {
        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {
            // Arbitrarily high number if tracking is disabled
            return Integer.MAX_VALUE;
        }
        AttemptCounter attemptCounter = attemptsCache.get(key.toLowerCase());
        if (attemptCounter == null) {
            return MAX_ATTEMPT;
        }
        return MAX_ATTEMPT - attemptCounter.getAttemptCount();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,hasBackup,boolean hasBackup(),"[60, 69]","{'A236': [(60, 61), (63, 63), (65, 69)], 'A234': [(62, 62)], 'A233': [(64, 64)]}","{'A236': 0.8, 'A234': 0.1, 'A233': 0.1}",A236,,"    @Override
    public boolean hasBackup() {
        createBackupDirectory();

        if (Files.exists(BACKUP_DIR)) {
            return !getBackupList().isEmpty();
        }

        return false;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,getBackupList,List<FileInfo> getBackupList(),"[76, 115]","{'A236': [(76, 80), (83, 84), (86, 115)], 'A234': [(81, 82)], 'A233': [(85, 85)]}","{'A236': 0.925, 'A234': 0.05, 'A233': 0.025}",A236,,"    @Override
    public List<FileInfo> getBackupList() {
        List<FileInfo> backupFiles = new ArrayList<>();

        if (isH2Database()) {
            createBackupDirectory();

            try (DirectoryStream<Path> stream =
                    Files.newDirectoryStream(
                            BACKUP_DIR,
                            path ->
                                    path.getFileName().toString().startsWith(BACKUP_PREFIX)
                                            && path.getFileName()
                                                    .toString()
                                                    .endsWith(SQL_SUFFIX))) {
                for (Path entry : stream) {
                    BasicFileAttributes attrs =
                            Files.readAttributes(entry, BasicFileAttributes.class);
                    LocalDateTime modificationDate =
                            LocalDateTime.ofInstant(
                                    attrs.lastModifiedTime().toInstant(), ZoneId.systemDefault());
                    LocalDateTime creationDate =
                            LocalDateTime.ofInstant(
                                    attrs.creationTime().toInstant(), ZoneId.systemDefault());
                    long fileSize = attrs.size();
                    backupFiles.add(
                            new FileInfo(
                                    entry.getFileName().toString(),
                                    entry.toString(),
                                    modificationDate,
                                    fileSize,
                                    creationDate));
                }
            } catch (IOException e) {
                log.error(""Error reading backup directory: {}"", e.getMessage(), e);
            }
        }

        return backupFiles;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,createBackupDirectory,void createBackupDirectory(),"[117, 126]","{'A234': [(117, 117), (119, 119), (121, 126)], 'A233': [(118, 118), (120, 120)]}","{'A234': 0.8, 'A233': 0.2}",A234,,"    private void createBackupDirectory() {
        if (!Files.exists(BACKUP_DIR)) {
            try {
                Files.createDirectories(BACKUP_DIR);
                log.debug(""create backup directory: {}"", BACKUP_DIR);
            } catch (IOException e) {
                log.error(""Error create backup directory: {}"", e.getMessage(), e);
            }
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,importDatabase,void importDatabase(),"[128, 138]","{'A236': [(128, 138)]}",{'A236': 1.0},A236,,"    @Override
    public void importDatabase() {
        if (!hasBackup()) throw new BackupNotFoundException(""No backup scripts were found."");

        List<FileInfo> backupList = this.getBackupList();
        backupList.sort(Comparator.comparing(FileInfo::getModificationDate).reversed());

        Path latestExport = Paths.get(backupList.get(0).getFilePath());

        executeDatabaseScript(latestExport);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,importDatabaseFromUI,boolean importDatabaseFromUI(String),"[141, 153]","{'A236': [(141, 153)]}",{'A236': 1.0},A236,,"    public boolean importDatabaseFromUI(String fileName) {
        try {
            importDatabaseFromUI(getBackupFilePath(fileName));
            return true;
        } catch (IOException e) {
            log.error(
                    ""Error importing database from file: {}, message: {}"",
                    fileName,
                    e.getMessage(),
                    e.getCause());
            return false;
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,importDatabaseFromUI,boolean importDatabaseFromUI(Path),"[156, 166]","{'A236': [(156, 166)]}",{'A236': 1.0},A236,,"    public boolean importDatabaseFromUI(Path tempTemplatePath) throws IOException {
        executeDatabaseScript(tempTemplatePath);
        LocalDateTime dateNow = LocalDateTime.now();
        DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(""yyyyMMddHHmm"");
        Path insertOutputFilePath =
                this.getBackupFilePath(
                        BACKUP_PREFIX + ""user_"" + dateNow.format(myFormatObj) + SQL_SUFFIX);
        Files.copy(tempTemplatePath, insertOutputFilePath);
        Files.deleteIfExists(tempTemplatePath);
        return true;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,exportDatabase,void exportDatabase(),"[168, 199]","{'A236': [(168, 172), (174, 196), (199, 199)], 'A234': [(173, 173), (197, 198)]}","{'A236': 0.90625, 'A234': 0.09375}",A236,,"    @Override
    public void exportDatabase() {
        List<FileInfo> filteredBackupList =
                this.getBackupList().stream()
                        .filter(backup -> !backup.getFileName().startsWith(BACKUP_PREFIX + ""user_""))
                        .collect(Collectors.toList());

        if (filteredBackupList.size() > 5) {
            deleteOldestBackup(filteredBackupList);
        }

        LocalDateTime dateNow = LocalDateTime.now();
        DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(""yyyyMMddHHmm"");
        Path insertOutputFilePath =
                this.getBackupFilePath(BACKUP_PREFIX + dateNow.format(myFormatObj) + SQL_SUFFIX);

        if (isH2Database()) {
            String query = ""SCRIPT SIMPLE COLUMNS DROP to ?;"";

            try (Connection conn = dataSource.getConnection();
                    PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, insertOutputFilePath.toString());
                stmt.execute();
            } catch (SQLException e) {
                log.error(""Error during database export: {}"", e.getMessage(), e);
            } catch (CannotReadScriptException e) {
                log.error(""Error during database export: File {} not found"", insertOutputFilePath);
            }

            log.info(""Database export completed: {}"", insertOutputFilePath);
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,deleteOldestBackup,void deleteOldestBackup(List<FileInfo>),"[201, 213]","{'A236': [(201, 213)]}",{'A236': 1.0},A236,,"    private static void deleteOldestBackup(List<FileInfo> filteredBackupList) {
        try {
            filteredBackupList.sort(
                    Comparator.comparing(
                            p -> p.getFileName().substring(7, p.getFileName().length() - 4)));

            FileInfo oldestFile = filteredBackupList.get(0);
            Files.deleteIfExists(Paths.get(oldestFile.getFilePath()));
            log.info(""Deleted oldest backup: {}"", oldestFile.getFileName());
        } catch (IOException e) {
            log.error(""Unable to delete oldest backup, message: {}"", e.getMessage(), e);
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,getH2Version,String getH2Version(),"[220, 238]","{'A236': [(220, 238)]}",{'A236': 1.0},A236,,"    public String getH2Version() {
        String version = ""Unknown"";

        if (isH2Database()) {
            try (Connection conn = dataSource.getConnection()) {
                try (Statement stmt = conn.createStatement();
                        ResultSet rs = stmt.executeQuery(""SELECT H2VERSION() AS version"")) {
                    if (rs.next()) {
                        version = rs.getString(""version"");
                        log.info(""H2 Database Version: {}"", version);
                    }
                }
            } catch (SQLException e) {
                log.error(""Error retrieving H2 version: {}"", e.getMessage(), e);
            }
        }

        return version;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,isH2Database,boolean isH2Database(),"[240, 268]","{'A236': [(240, 240), (246, 246), (268, 268)], 'A234': [(241, 241), (243, 243), (247, 250), (253, 253), (256, 257), (260, 260), (263, 267)], 'A239': [(242, 242), (244, 245), (251, 252), (254, 255), (258, 259), (261, 262)]}","{'A236': 0.10344827586206896, 'A234': 0.5172413793103449, 'A239': 0.3793103448275862}",A234,,"    private boolean isH2Database() {
        boolean isTypeH2 =
                datasourceProps.getType().equalsIgnoreCase(ApplicationProperties.Driver.H2.name());
        boolean isDBUrlH2 =
                datasourceProps.getCustomDatabaseUrl().contains(""h2"")
                        || datasourceProps.getCustomDatabaseUrl().contains(""H2"");
        boolean isCustomDatabase = datasourceProps.isEnableCustomDatabase();

        if (isCustomDatabase) {
            if (isTypeH2 && !isDBUrlH2) {
                log.warn(
                        ""Datasource type is H2, but the URL does not contain 'h2'. ""
                                + ""Please check your configuration."");
                throw new IllegalStateException(
                        ""Datasource type is H2, but the URL does not contain 'h2'. Please check""
                                + "" your configuration."");
            } else if (!isTypeH2 && isDBUrlH2) {
                log.warn(
                        ""Datasource URL contains 'h2', but the type is not H2. ""
                                + ""Please check your configuration."");
                throw new IllegalStateException(
                        ""Datasource URL contains 'h2', but the type is not H2. Please check your""
                                + "" configuration."");
            }
        }
        boolean isH2 = isTypeH2 && isDBUrlH2;

        return !isCustomDatabase || isH2;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,deleteBackupFile,boolean deleteBackupFile(String),"[275, 288]","{'A236': [(275, 288)]}",{'A236': 1.0},A236,,"    public boolean deleteBackupFile(String fileName) throws IOException {
        if (!isValidFileName(fileName)) {
            log.error(""Invalid file name: {}"", fileName);
            return false;
        }
        Path filePath = this.getBackupFilePath(fileName);
        if (Files.deleteIfExists(filePath)) {
            log.info(""Deleted backup file: {}"", fileName);
            return true;
        } else {
            log.error(""File not found or could not be deleted: {}"", fileName);
            return false;
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,getBackupFilePath,Path getBackupFilePath(String),"[295, 302]","{'A236': [(295, 295), (298, 302)], 'A234': [(296, 296)], 'A233': [(297, 297)]}","{'A236': 0.75, 'A234': 0.125, 'A233': 0.125}",A236,,"    public Path getBackupFilePath(String fileName) {
        createBackupDirectory();
        Path filePath = BACKUP_DIR.resolve(fileName).normalize();
        if (!filePath.startsWith(BACKUP_DIR)) {
            throw new SecurityException(""Path traversal detected"");
        }
        return filePath;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,executeDatabaseScript,void executeDatabaseScript(Path),"[304, 320]","{'A236': [(304, 320)]}",{'A236': 1.0},A236,,"    private void executeDatabaseScript(Path scriptPath) {
        if (isH2Database()) {
            String query = ""RUNSCRIPT from ?;"";

            try (Connection conn = dataSource.getConnection();
                    PreparedStatement stmt = conn.prepareStatement(query)) {
                stmt.setString(1, scriptPath.toString());
                stmt.execute();
            } catch (SQLException e) {
                log.error(""Error during database import: {}"", e.getMessage(), e);
            } catch (ScriptException e) {
                log.error(""Error: File {} not found"", scriptPath.toString(), e);
            }
        }

        log.info(""Database import completed: {}"", scriptPath);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/DatabaseService.java,DatabaseService,isValidFileName,boolean isValidFileName(String),"[327, 339]","{'A236': [(327, 339)]}",{'A236': 1.0},A236,,"    private boolean isValidFileName(String fileName) {
        return fileName != null
                && !fileName.contains("".."")
                && !fileName.contains(""/"")
                && !fileName.contains(""\\"")
                && !fileName.contains("":"")
                && !fileName.contains(""*"")
                && !fileName.contains(""?"")
                && !fileName.contains(""\"""")
                && !fileName.contains(""<"")
                && !fileName.contains("">"")
                && !fileName.contains(""|"");
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/TeamService.java,TeamService,getOrCreateDefaultTeam,Team getOrCreateDefaultTeam(),"[19, 28]","{'A233': [(19, 28)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/TeamServiceTest.java,"    public Team getOrCreateDefaultTeam() {
        return teamRepository
                .findByName(DEFAULT_TEAM_NAME)
                .orElseGet(
                        () -> {
                            Team defaultTeam = new Team();
                            defaultTeam.setName(DEFAULT_TEAM_NAME);
                            return teamRepository.save(defaultTeam);
                        });
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/TeamService.java,TeamService,getOrCreateInternalTeam,Team getOrCreateInternalTeam(),"[30, 39]","{'A233': [(30, 39)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/TeamServiceTest.java,"    public Team getOrCreateInternalTeam() {
        return teamRepository
                .findByName(INTERNAL_TEAM_NAME)
                .orElseGet(
                        () -> {
                            Team internalTeam = new Team();
                            internalTeam.setName(INTERNAL_TEAM_NAME);
                            return teamRepository.save(internalTeam);
                        });
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/CustomOAuth2UserService.java,CustomOAuth2UserService,loadUser,OidcUser loadUser(OidcUserRequest),"[41, 80]","{'A236': [(45, 48), (50, 52), (54, 56), (58, 60), (62, 62), (72, 72)], 'A238': [(41, 44), (49, 49), (53, 53), (57, 57), (61, 61), (63, 71), (73, 80)]}","{'A236': 0.375, 'A238': 0.625}",A238,,"    @Override
    public OidcUser loadUser(OidcUserRequest userRequest) throws OAuth2AuthenticationException {
        try {
            OidcUser user = delegate.loadUser(userRequest);
            OAUTH2 oauth2 = applicationProperties.getSecurity().getOauth2();
            UsernameAttribute usernameAttribute =
                    UsernameAttribute.valueOf(oauth2.getUseAsUsername().toUpperCase());
            String usernameAttributeKey = usernameAttribute.getName();

            // todo: save user by OIDC ID instead of username
            Optional<User> internalUser =
                    userService.findByUsernameIgnoreCase(user.getAttribute(usernameAttributeKey));

            if (internalUser.isPresent()) {
                String internalUsername = internalUser.get().getUsername();
                if (loginAttemptService.isBlocked(internalUsername)) {
                    throw new LockedException(
                            ""The account ""
                                    + internalUsername
                                    + "" has been locked due to too many failed login attempts."");
                }
                if (userService.hasPassword(usernameAttributeKey)) {
                    throw new IllegalArgumentException(""Password must not be null"");
                }
            }

            // Return a new OidcUser with adjusted attributes
            return new DefaultOidcUser(
                    user.getAuthorities(),
                    userRequest.getIdToken(),
                    user.getUserInfo(),
                    usernameAttributeKey);
        } catch (IllegalArgumentException e) {
            log.error(""Error loading OIDC user: {}"", e.getMessage());
            throw new OAuth2AuthenticationException(new OAuth2Error(e.getMessage()), e);
        } catch (Exception e) {
            log.error(""Unexpected error loading OIDC user"", e);
            throw new OAuth2AuthenticationException(""Unexpected error during authentication"");
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/EmailService.java,EmailService,sendEmailWithAttachment,void sendEmailWithAttachment(Email),"[38, 75]","{'A234': [(38, 75)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/EmailServiceTest.java,"    @Async
    public void sendEmailWithAttachment(Email email) throws MessagingException {
        MultipartFile file = email.getFileInput();
        // 1) Validate recipient email address
        if (email.getTo() == null || email.getTo().trim().isEmpty()) {
            throw new MessagingException(""Invalid Addresses"");
        }

        // 2) Validate attachment
        if (file == null
                || file.isEmpty()
                || file.getOriginalFilename() == null
                || file.getOriginalFilename().isEmpty()) {
            throw new MessagingException(""An attachment is required to send the email."");
        }

        ApplicationProperties.Mail mailProperties = applicationProperties.getMail();

        // Creates a MimeMessage to represent the email
        MimeMessage message = mailSender.createMimeMessage();

        // Helper class to set up the message content and attachments
        MimeMessageHelper helper = new MimeMessageHelper(message, true);

        // Sets the recipient, subject, body, and sender email
        helper.addTo(email.getTo());
        helper.setSubject(email.getSubject());
        helper.setText(
                email.getBody(),
                true); // The ""true"" here indicates that the body contains HTML content.
        helper.setFrom(mailProperties.getFrom());

        // Adds the attachment to the email
        helper.addAttachment(file.getOriginalFilename(), file);

        // Sends the email via the configured mail sender
        mailSender.send(message);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/CustomUserDetailsService.java,CustomUserDetailsService,loadUserByUsername,UserDetails loadUserByUsername(String),"[28, 52]","{'A233': [(28, 40), (44, 52)], 'A238': [(41, 43)]}","{'A233': 0.88, 'A238': 0.12}",A233,,"    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        User user =
                userRepository
                        .findByUsername(username)
                        .orElseThrow(
                                () ->
                                        new UsernameNotFoundException(
                                                ""No user found with username: "" + username));
        if (loginAttemptService.isBlocked(username)) {
            throw new LockedException(
                    ""Your account has been locked due to too many failed login attempts."");
        }
        if (!user.hasPassword()) {
            throw new IllegalArgumentException(""Password must not be null"");
        }
        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(),
                user.isEnabled(),
                true,
                true,
                true,
                getAuthorities(user.getAuthorities()));
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/CustomUserDetailsService.java,CustomUserDetailsService,getAuthorities,Collection<? extends GrantedAuthority> getAuthorities(Set<Authority>),"[54, 58]","{'A233': [(54, 58)]}",{'A233': 1.0},A233,,"    private Collection<? extends GrantedAuthority> getAuthorities(Set<Authority> authorities) {
        return authorities.stream()
                .map(authority -> new SimpleGrantedAuthority(authority.getAuthority()))
                .toList();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/AppUpdateAuthService.java,AppUpdateAuthService,getShowUpdateOnlyAdmins,boolean getShowUpdateOnlyAdmins(),"[24, 43]","{'A234': [(25, 25), (27, 43)], 'A233': [(26, 26)], 'A243': [(24, 24)]}","{'A234': 0.9, 'A233': 0.05, 'A243': 0.05}",A234,,"    @Override
    public boolean getShowUpdateOnlyAdmins() {
        boolean showUpdate = applicationProperties.getSystem().isShowUpdate();
        if (!showUpdate) {
            return showUpdate;
        }
        boolean showUpdateOnlyAdmin = applicationProperties.getSystem().getShowUpdateOnlyAdmin();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated()) {
            return !showUpdateOnlyAdmin;
        }
        if (""anonymousUser"".equalsIgnoreCase(authentication.getName())) {
            return !showUpdateOnlyAdmin;
        }
        Optional<User> user = userRepository.findByUsername(authentication.getName());
        if (user.isPresent() && showUpdateOnlyAdmin) {
            return ""ROLE_ADMIN"".equals(user.get().getRolesAsString());
        }
        return showUpdate;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,migrateOauth2ToSSO,void migrateOauth2ToSSO(),"[64, 73]","{'A233': [(64, 73)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    @Transactional
    public void migrateOauth2ToSSO() {
        userRepository
                .findByAuthenticationTypeIgnoreCase(""OAUTH2"")
                .forEach(
                        user -> {
                            user.setAuthenticationType(AuthenticationType.SSO);
                            userRepository.save(user);
                        });
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,processSSOPostLogin,"void processSSOPostLogin(String,boolean)","[76, 88]","{'A236': [(76, 77), (79, 79), (83, 83)], 'A233': [(86, 86)], 'A234': [(81, 81)], 'A238': [(78, 78), (80, 80), (82, 82)], 'A237': [(84, 85), (87, 88)]}","{'A236': 0.3076923076923077, 'A233': 0.07692307692307693, 'A234': 0.07692307692307693, 'A238': 0.23076923076923078, 'A237': 0.3076923076923077}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void processSSOPostLogin(String username, boolean autoCreateUser)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        if (!isUsernameValid(username)) {
            return;
        }
        Optional<User> existingUser = findByUsernameIgnoreCase(username);
        if (existingUser.isPresent()) {
            return;
        }
        if (autoCreateUser) {
            saveUser(username, AuthenticationType.SSO);
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,getAuthentication,Authentication getAuthentication(String),"[90, 100]","{'A233': [(90, 90), (93, 100)], 'A234': [(91, 91)], 'A239': [(92, 92)]}","{'A233': 0.8181818181818182, 'A234': 0.09090909090909091, 'A239': 0.09090909090909091}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public Authentication getAuthentication(String apiKey) {
        Optional<User> user = getUserByApiKey(apiKey);
        if (user.isEmpty()) {
            throw new UsernameNotFoundException(""API key is not valid"");
        }
        // Convert the user into an Authentication object
        return new UsernamePasswordAuthenticationToken( // principal (typically the user)
                user, // credentials (we don't expose the password or API key here)
                null, // user's authorities (roles/permissions)
                getAuthorities(user.get()));
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,getAuthorities,Collection<? extends GrantedAuthority> getAuthorities(User),"[102, 107]","{'A233': [(102, 107)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    private Collection<? extends GrantedAuthority> getAuthorities(User user) {
        // Convert each Authority object into a SimpleGrantedAuthority object.
        return user.getAuthorities().stream()
                .map((Authority authority) -> new SimpleGrantedAuthority(authority.getAuthority()))
                .toList();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,generateApiKey,String generateApiKey(),"[109, 116]","{'A233': [(109, 116)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    private String generateApiKey() {
        String apiKey;
        do {
            apiKey = UUID.randomUUID().toString();
        } while ( // Ensure uniqueness
        userRepository.findByApiKey(apiKey).isPresent());
        return apiKey;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,addApiKeyToUser,User addApiKeyToUser(String),"[118, 127]","{'A233': [(118, 118), (127, 127)], 'A234': [(119, 126)]}","{'A233': 0.2, 'A234': 0.8}",A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public User addApiKeyToUser(String username) {
        Optional<User> userOpt = findByUsernameIgnoreCase(username);
        User user = saveUser(userOpt, generateApiKey());
        try {
            databaseService.exportDatabase();
        } catch (SQLException | UnsupportedProviderException e) {
            log.error(""Error exporting database after adding API key to user"", e);
        }
        return user;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,refreshApiKeyForUser,User refreshApiKeyForUser(String),"[129, 132]","{'A233': [(129, 132)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public User refreshApiKeyForUser(String username) {
        // reuse the add API key method for refreshing
        return addApiKeyToUser(username);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,getApiKeyForUser,String getApiKeyForUser(String),"[134, 142]","{'A233': [(134, 135), (137, 142)], 'A234': [(136, 136)]}","{'A233': 0.8888888888888888, 'A234': 0.1111111111111111}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public String getApiKeyForUser(String username) {
        User user =
                findByUsernameIgnoreCase(username)
                        .orElseThrow(() -> new UsernameNotFoundException(""User not found""));
        if (user.getApiKey() == null || user.getApiKey().length() == 0) {
            user = addApiKeyToUser(username);
        }
        return user.getApiKey();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,isValidApiKey,boolean isValidApiKey(String),"[144, 146]","{'A233': [(144, 144), (146, 146)], 'A234': [(145, 145)]}","{'A233': 0.6666666666666666, 'A234': 0.3333333333333333}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean isValidApiKey(String apiKey) {
        return userRepository.findByApiKey(apiKey).isPresent();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,getUserByApiKey,Optional<User> getUserByApiKey(String),"[148, 150]","{'A233': [(149, 150)], 'A234': [(148, 148)]}","{'A233': 0.6666666666666666, 'A234': 0.3333333333333333}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public Optional<User> getUserByApiKey(String apiKey) {
        return userRepository.findByApiKey(apiKey);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,loadUserByApiKey,Optional<User> loadUserByApiKey(String),"[152, 159]","{'A233': [(156, 159)], 'A234': [(152, 155)]}","{'A233': 0.5, 'A234': 0.5}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public Optional<User> loadUserByApiKey(String apiKey) {
        Optional<User> user = userRepository.findByApiKey(apiKey);
        if (user.isPresent()) {
            return user;
        }
        // or throw an exception
        return null;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,validateApiKeyForUser,"boolean validateApiKeyForUser(String,String)","[161, 164]","{'A233': [(161, 161), (164, 164)], 'A234': [(162, 162)], 'A238': [(163, 163)]}","{'A233': 0.5, 'A234': 0.25, 'A238': 0.25}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean validateApiKeyForUser(String username, String apiKey) {
        Optional<User> userOpt = findByUsernameIgnoreCase(username);
        return userOpt.isPresent() && apiKey.equals(userOpt.get().getApiKey());
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUser,"void saveUser(String,AuthenticationType)","[166, 169]","{'A236': [(167, 167)], 'A233': [(168, 168)], 'A234': [(169, 169)], 'A238': [(166, 166)]}","{'A236': 0.25, 'A233': 0.25, 'A234': 0.25, 'A238': 0.25}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void saveUser(String username, AuthenticationType authenticationType)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        saveUser(username, authenticationType, (Long) null, Role.USER.getRoleId());
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUser,"User saveUser(Optional<User>,String)","[171, 177]","{'A234': [(171, 177)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    private User saveUser(Optional<User> user, String apiKey) {
        if (user.isPresent()) {
            user.get().setApiKey(apiKey);
            return userRepository.save(user.get());
        }
        throw new UsernameNotFoundException(""User not found"");
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUser,"User saveUser(String,AuthenticationType,Long,String)","[179, 192]","{'A236': [(181, 181)], 'A233': [(179, 180), (182, 192)]}","{'A236': 0.07142857142857142, 'A233': 0.9285714285714286}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public User saveUser(
            String username, AuthenticationType authenticationType, Long teamId, String role)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        return saveUserCore(
                username, // username
                null, // password
                authenticationType, // authenticationType
                teamId, // teamId
                null, // team
                role, // role
                false, // firstLogin
                true // enabled
                );
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUser,"User saveUser(String,AuthenticationType,Team,String)","[194, 207]","{'A236': [(196, 196)], 'A233': [(194, 195), (197, 207)]}","{'A236': 0.07142857142857142, 'A233': 0.9285714285714286}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public User saveUser(
            String username, AuthenticationType authenticationType, Team team, String role)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        return saveUserCore(
                username, // username
                null, // password
                authenticationType, // authenticationType
                null, // teamId
                team, // team
                role, // role
                false, // firstLogin
                true // enabled
                );
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUser,"User saveUser(String,String,Long)","[209, 221]","{'A236': [(210, 210)], 'A233': [(209, 209), (211, 221)]}","{'A236': 0.07692307692307693, 'A233': 0.9230769230769231}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public User saveUser(String username, String password, Long teamId)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        return saveUserCore(
                username, // username
                password, // password
                AuthenticationType.WEB, // authenticationType
                teamId, // teamId
                null, // team
                Role.USER.getRoleId(), // role
                false, // firstLogin
                true // enabled
                );
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUser,"User saveUser(String,String,Team,String,boolean)","[223, 236]","{'A233': [(223, 236)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public User saveUser(
            String username, String password, Team team, String role, boolean firstLogin)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        return saveUserCore(
                username, // username
                password, // password
                AuthenticationType.WEB, // authenticationType
                null, // teamId
                team, // team
                role, // role
                firstLogin, // firstLogin
                true // enabled
                );
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUser,"User saveUser(String,String,Long,String,boolean)","[238, 251]","{'A233': [(238, 251)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public User saveUser(
            String username, String password, Long teamId, String role, boolean firstLogin)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        return saveUserCore(
                username, // username
                password, // password
                AuthenticationType.WEB, // authenticationType
                teamId, // teamId
                null, // team
                role, // role
                firstLogin, // firstLogin
                true // enabled
                );
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUser,"void saveUser(String,String,Long,String)","[253, 256]","{'A236': [(254, 254)], 'A233': [(253, 253), (255, 256)]}","{'A236': 0.25, 'A233': 0.75}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void saveUser(String username, String password, Long teamId, String role)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        saveUser(username, password, teamId, role, false);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUser,"void saveUser(String,String,Long,boolean,boolean)","[258, 271]","{'A233': [(258, 259), (261, 270)], 'A234': [(260, 260), (271, 271)]}","{'A233': 0.8571428571428571, 'A234': 0.14285714285714285}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void saveUser(
            String username, String password, Long teamId, boolean firstLogin, boolean enabled)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        saveUserCore(
                username, // username
                password, // password
                AuthenticationType.WEB, // authenticationType
                teamId, // teamId
                null, // team
                Role.USER.getRoleId(), // role
                firstLogin, // firstLogin
                enabled // enabled
                );
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,deleteUser,void deleteUser(String),"[273, 284]","{'A233': [(273, 273), (275, 282), (284, 284)], 'A234': [(274, 274), (283, 283)]}","{'A233': 0.8333333333333334, 'A234': 0.16666666666666666}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void deleteUser(String username) {
        Optional<User> userOpt = findByUsernameIgnoreCase(username);
        if (userOpt.isPresent()) {
            for (Authority authority : userOpt.get().getAuthorities()) {
                if (authority.getAuthority().equals(Role.INTERNAL_API_USER.getRoleId())) {
                    return;
                }
            }
            userRepository.delete(userOpt.get());
        }
        invalidateUserSessions(username);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,usernameExists,boolean usernameExists(String),"[286, 288]","{'A233': [(286, 286), (288, 288)], 'A234': [(287, 287)]}","{'A233': 0.6666666666666666, 'A234': 0.3333333333333333}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean usernameExists(String username) {
        return findByUsername(username).isPresent();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,usernameExistsIgnoreCase,boolean usernameExistsIgnoreCase(String),"[290, 292]","{'A234': [(290, 292)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean usernameExistsIgnoreCase(String username) {
        return findByUsernameIgnoreCase(username).isPresent();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,hasUsers,boolean hasUsers(),"[294, 300]","{'A233': [(294, 294), (300, 300)], 'A234': [(296, 296)], 'A238': [(295, 295), (297, 299)]}","{'A233': 0.2857142857142857, 'A234': 0.14285714285714285, 'A238': 0.5714285714285714}",A238,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean hasUsers() {
        long userCount = userRepository.count();
        if (findByUsernameIgnoreCase(Role.INTERNAL_API_USER.getRoleId()).isPresent()) {
            userCount -= 1;
        }
        return userCount > 0;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,updateUserSettings,"void updateUserSettings(String,Map<String, String>)","[302, 317]","{'A236': [(303, 303), (315, 315)], 'A233': [(305, 308), (310, 314), (316, 317)], 'A234': [(302, 302)], 'A238': [(309, 309)], 'A244': [(304, 304)]}","{'A236': 0.125, 'A233': 0.6875, 'A234': 0.0625, 'A238': 0.0625, 'A244': 0.0625}",A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void updateUserSettings(String username, Map<String, String> updates)
            throws SQLException, UnsupportedProviderException {
        Optional<User> userOpt = findByUsernameIgnoreCaseWithSettings(username);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            Map<String, String> settingsMap = user.getSettings();
            if (settingsMap == null) {
                settingsMap = new HashMap<>();
            }
            settingsMap.clear();
            settingsMap.putAll(updates);
            user.setSettings(settingsMap);
            userRepository.save(user);
            databaseService.exportDatabase();
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,findByUsername,Optional<User> findByUsername(String),"[319, 321]","{'A233': [(319, 321)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public Optional<User> findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,findByUsernameIgnoreCase,Optional<User> findByUsernameIgnoreCase(String),"[323, 325]","{'A234': [(323, 325)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public Optional<User> findByUsernameIgnoreCase(String username) {
        return userRepository.findByUsernameIgnoreCase(username);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,findByUsernameIgnoreCaseWithSettings,Optional<User> findByUsernameIgnoreCaseWithSettings(String),"[327, 329]","{'A244': [(327, 329)]}",{'A244': 1.0},A244,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public Optional<User> findByUsernameIgnoreCaseWithSettings(String username) {
        return userRepository.findByUsernameIgnoreCaseWithSettings(username);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,findRole,Authority findRole(User),"[331, 333]","{'A237': [(331, 333)]}",{'A237': 1.0},A237,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public Authority findRole(User user) {
        return authorityRepository.findByUserId(user.getId());
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,changeUsername,"void changeUsername(User,String)","[335, 343]","{'A236': [(342, 342)], 'A233': [(341, 341), (343, 343)], 'A234': [(335, 335)], 'A238': [(337, 340)], 'A239': [(336, 336)]}","{'A236': 0.1111111111111111, 'A233': 0.2222222222222222, 'A234': 0.1111111111111111, 'A238': 0.4444444444444444, 'A239': 0.1111111111111111}",A238,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void changeUsername(User user, String newUsername)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        if (!isUsernameValid(newUsername)) {
            throw new IllegalArgumentException(getInvalidUsernameMessage());
        }
        user.setUsername(newUsername);
        userRepository.save(user);
        databaseService.exportDatabase();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,changePassword,"void changePassword(User,String)","[345, 350]","{'A236': [(345, 346), (349, 349)], 'A233': [(347, 348), (350, 350)]}","{'A236': 0.5, 'A233': 0.5}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void changePassword(User user, String newPassword)
            throws SQLException, UnsupportedProviderException {
        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
        databaseService.exportDatabase();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,changeFirstUse,"void changeFirstUse(User,boolean)","[352, 357]","{'A236': [(352, 353), (356, 356)], 'A233': [(354, 355), (357, 357)]}","{'A236': 0.5, 'A233': 0.5}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void changeFirstUse(User user, boolean firstUse)
            throws SQLException, UnsupportedProviderException {
        user.setFirstLogin(firstUse);
        userRepository.save(user);
        databaseService.exportDatabase();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,changeRole,"void changeRole(User,String)","[359, 365]","{'A236': [(359, 360), (364, 364)], 'A234': [(365, 365)], 'A237': [(361, 363)]}","{'A236': 0.42857142857142855, 'A234': 0.14285714285714285, 'A237': 0.42857142857142855}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void changeRole(User user, String newRole)
            throws SQLException, UnsupportedProviderException {
        Authority userAuthority = this.findRole(user);
        userAuthority.setAuthority(newRole);
        authorityRepository.save(userAuthority);
        databaseService.exportDatabase();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,changeUserEnabled,"void changeUserEnabled(User,Boolean)","[367, 372]","{'A236': [(367, 368), (371, 371)], 'A234': [(369, 370)], 'A237': [(372, 372)]}","{'A236': 0.5, 'A234': 0.3333333333333333, 'A237': 0.16666666666666666}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void changeUserEnabled(User user, Boolean enbeled)
            throws SQLException, UnsupportedProviderException {
        user.setEnabled(enbeled);
        userRepository.save(user);
        databaseService.exportDatabase();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,changeUserTeam,"void changeUserTeam(User,Team)","[374, 382]","{'A234': [(374, 382)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void changeUserTeam(User user, Team team)
            throws SQLException, UnsupportedProviderException {
        if (team == null) {
            team = getDefaultTeam();
        }
        user.setTeam(team);
        userRepository.save(user);
        databaseService.exportDatabase();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,isPasswordCorrect,"boolean isPasswordCorrect(User,String)","[384, 386]","{'A233': [(384, 386)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean isPasswordCorrect(User user, String currentPassword) {
        return passwordEncoder.matches(currentPassword, user.getPassword());
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,resolveTeam,"Team resolveTeam(Long,Supplier<Team>)","[396, 404]","{'A233': [(396, 404)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    private Team resolveTeam(Long teamId, Supplier<Team> defaultTeamSupplier) {
        if (teamId == null) {
            return defaultTeamSupplier.get();
        }

        return teamRepository
                .findById(teamId)
                .orElseThrow(() -> new IllegalArgumentException(""Invalid team ID: "" + teamId));
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,getDefaultTeam,Team getDefaultTeam(),"[411, 420]","{'A233': [(411, 420)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    private Team getDefaultTeam() {
        return teamRepository
                .findByName(""Default"")
                .orElseGet(
                        () -> {
                            Team team = new Team();
                            team.setName(""Default"");
                            return teamRepository.save(team);
                        });
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveUserCore,"User saveUserCore(String,String,AuthenticationType,Long,Team,String,boolean,boolean)","[439, 491]","{'A233': [(439, 491)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    private User saveUserCore(
            String username,
            String password,
            AuthenticationType authenticationType,
            Long teamId,
            Team team,
            String role,
            boolean firstLogin,
            boolean enabled)
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {

        if (!isUsernameValid(username)) {
            throw new IllegalArgumentException(getInvalidUsernameMessage());
        }

        User user = new User();
        user.setUsername(username);

        // Set password if provided
        if (password != null && !password.isEmpty()) {
            user.setPassword(passwordEncoder.encode(password));
        }

        // Set authentication type
        user.setAuthenticationType(authenticationType);

        // Set enabled status
        user.setEnabled(enabled);

        // Set first login flag
        user.setFirstLogin(firstLogin);

        // Set role (authority)
        if (role == null) {
            role = Role.USER.getRoleId();
        }
        user.addAuthority(new Authority(role, user));

        // Resolve and set team
        if (team != null) {
            user.setTeam(team);
        } else {
            user.setTeam(resolveTeam(teamId, this::getDefaultTeam));
        }

        // Save user
        userRepository.save(user);

        // Export database
        databaseService.exportDatabase();

        return user;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,isUsernameValid,boolean isUsernameValid(String),"[493, 510]","{'A234': [(493, 493), (495, 495), (497, 498), (500, 500), (503, 509)], 'A238': [(494, 494), (496, 496), (499, 499), (501, 502), (510, 510)]}","{'A234': 0.6666666666666666, 'A238': 0.3333333333333333}",A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean isUsernameValid(String username) {
        // Checks whether the simple username is formatted correctly
        // Regular expression for user name: Min. 3 characters, max. 50 characters
        boolean isValidSimpleUsername =
                username.matches(""^[a-zA-Z0-9](?!.*[-@._+]{2,})[a-zA-Z0-9@._+-]{1,48}[a-zA-Z0-9]$"");

        // Checks whether the email address is formatted correctly
        // Regular expression for email addresses: Max. 320 characters, with RFC-like validation
        boolean isValidEmail =
                username.matches(
                        ""^(?=.{1,320}$)(?=.{1,64}@)[A-Za-z0-9](?:[A-Za-z0-9_.+-]*[A-Za-z0-9])?@[^-][A-Za-z0-9-]+(?:\\\\.[A-Za-z0-9-]+)*(?:\\\\.[A-Za-z]{2,})$"");

        List<String> notAllowedUserList = new ArrayList<>();
        notAllowedUserList.add(""ALL_USERS"".toLowerCase());
        notAllowedUserList.add(""anonymoususer"");
        boolean notAllowedUser = notAllowedUserList.contains(username.toLowerCase());
        return (isValidSimpleUsername || isValidEmail) && !notAllowedUser;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,getInvalidUsernameMessage,String getInvalidUsernameMessage(),"[512, 515]","{'A238': [(512, 515)]}",{'A238': 1.0},A238,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    private String getInvalidUsernameMessage() {
        return messageSource.getMessage(
                ""invalidUsernameMessage"", null, LocaleContextHolder.getLocale());
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,hasPassword,boolean hasPassword(String),"[517, 520]","{'A234': [(518, 518)], 'A238': [(517, 517), (519, 520)]}","{'A234': 0.25, 'A238': 0.75}",A238,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean hasPassword(String username) {
        Optional<User> user = findByUsernameIgnoreCase(username);
        return user.isPresent() && user.get().hasPassword();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,isAuthenticationTypeByUsername,"boolean isAuthenticationTypeByUsername(String,AuthenticationType)","[522, 527]","{'A234': [(524, 524), (527, 527)], 'A238': [(522, 523), (525, 526)]}","{'A234': 0.3333333333333333, 'A238': 0.6666666666666666}",A238,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean isAuthenticationTypeByUsername(
            String username, AuthenticationType authenticationType) {
        Optional<User> user = findByUsernameIgnoreCase(username);
        return user.isPresent()
                && authenticationType.name().equalsIgnoreCase(user.get().getAuthenticationType());
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,isUserDisabled,boolean isUserDisabled(String),"[529, 532]","{'A234': [(529, 532)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public boolean isUserDisabled(String username) {
        Optional<User> userOpt = findByUsernameIgnoreCase(username);
        return userOpt.map(user -> !user.isEnabled()).orElse(false);
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,invalidateUserSessions,void invalidateUserSessions(String),"[534, 554]","{'A236': [(536, 536), (542, 542), (544, 545)], 'A234': [(534, 535), (537, 541), (543, 543), (546, 554)]}","{'A236': 0.19047619047619047, 'A234': 0.8095238095238095}",A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void invalidateUserSessions(String username) {
        String usernameP = """";

        for (Object principal : sessionRegistry.getAllPrincipals()) {
            for (SessionInformation sessionsInformation :
                    sessionRegistry.getAllSessions(principal, false)) {
                if (principal instanceof UserDetails detailsUser) {
                    usernameP = detailsUser.getUsername();
                } else if (principal instanceof OAuth2User oAuth2User) {
                    usernameP = oAuth2User.getName();
                } else if (principal instanceof CustomSaml2AuthenticatedPrincipal saml2User) {
                    usernameP = saml2User.name();
                } else if (principal instanceof String stringUser) {
                    usernameP = stringUser;
                }
                if (usernameP.equalsIgnoreCase(username)) {
                    sessionRegistry.expireSession(sessionsInformation.getSessionId());
                }
            }
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,getCurrentUsername,String getCurrentUsername(),"[556, 571]","{'A236': [(558, 558), (561, 561), (564, 564)], 'A233': [(556, 557), (569, 569), (571, 571)], 'A234': [(559, 560), (562, 563), (565, 568), (570, 570)]}","{'A236': 0.1875, 'A233': 0.25, 'A234': 0.5625}",A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public String getCurrentUsername() {
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        if (principal instanceof UserDetails detailsUser) {
            return detailsUser.getUsername();
        } else if (principal instanceof User domainUser) {
            return domainUser.getUsername();
        } else if (principal instanceof OAuth2User oAuth2User) {
            return oAuth2User.getAttribute(oAuth2.getUseAsUsername());
        } else if (principal instanceof CustomSaml2AuthenticatedPrincipal saml2User) {
            return saml2User.name();
        } else if (principal instanceof String stringUser) {
            return stringUser;
        }
        return null;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,syncCustomApiUser,void syncCustomApiUser(String),"[573, 610]","{'A236': [(574, 575), (578, 578), (581, 608)], 'A233': [(573, 573), (576, 577), (579, 580), (609, 610)]}","{'A236': 0.8157894736842105, 'A233': 0.18421052631578946}",A236,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    @Transactional
    public void syncCustomApiUser(String customApiKey) {
        if (customApiKey == null || customApiKey.trim().isBlank()) {
            return;
        }

        String username = ""CUSTOM_API_USER"";
        Optional<User> existingUser = findByUsernameIgnoreCase(username);

        existingUser.ifPresentOrElse(
                user -> {
                    // Update API key if it has changed
                    User updatedUser = existingUser.get();

                    if (!customApiKey.equals(updatedUser.getApiKey())) {
                        updatedUser.setApiKey(customApiKey);
                        userRepository.save(updatedUser);
                    }
                },
                () -> {
                    // Create new user with API role
                    User user = new User();
                    user.setUsername(username);
                    user.setPassword(UUID.randomUUID().toString());
                    user.setEnabled(true);
                    user.setFirstLogin(false);
                    user.setAuthenticationType(AuthenticationType.WEB);
                    user.setApiKey(customApiKey);
                    user.addAuthority(new Authority(Role.INTERNAL_API_USER.getRoleId(), user));
                    userRepository.save(user);
                });

        try {
            databaseService.exportDatabase();
        } catch (SQLException | UnsupportedProviderException e) {
            log.error(""Error exporting database after synchronising custom API user"", e);
        }
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,getTotalUsersCount,long getTotalUsersCount(),"[612, 620]","{'A234': [(613, 619)], 'A242': [(612, 612), (620, 620)]}","{'A234': 0.7777777777777778, 'A242': 0.2222222222222222}",A234,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public long getTotalUsersCount() {
        // Count all users in the database
        long userCount = userRepository.count();
        // Exclude the internal API user from the count
        if (findByUsernameIgnoreCase(Role.INTERNAL_API_USER.getRoleId()).isPresent()) {
            userCount -= 1;
        }
        return userCount;
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,getUsersWithoutTeam,List<User> getUsersWithoutTeam(),"[622, 624]","{'A233': [(622, 624)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public List<User> getUsersWithoutTeam() {
        return userRepository.findAllWithoutTeam();
    }
"
stirling.software.proprietary.security.service,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java,UserService,saveAll,void saveAll(List<User>),"[626, 628]","{'A233': [(626, 628)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/proprietary/src/test/java/stirling/software/proprietary/security/service/UserServiceTest.java,"    public void saveAll(List<User> users) {
        userRepository.saveAll(users);
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/CustomAuthenticationSuccessHandler.java,CustomAuthenticationSuccessHandler,onAuthenticationSuccess,"void onAuthenticationSuccess(HttpServletRequest,HttpServletResponse,Authentication)","[36, 67]","{'A234': [(43, 46), (57, 58)], 'A233': [(36, 40), (49, 51), (53, 54), (56, 56), (59, 67)], 'A238': [(41, 42), (47, 48), (52, 52), (55, 55)]}","{'A234': 0.1875, 'A233': 0.625, 'A238': 0.1875}",A233,,"    @Override
    @Audited(type = AuditEventType.USER_LOGIN, level = AuditLevel.BASIC)
    public void onAuthenticationSuccess(
            HttpServletRequest request, HttpServletResponse response, Authentication authentication)
            throws ServletException, IOException {

        String userName = request.getParameter(""username"");
        if (userService.isUserDisabled(userName)) {
            getRedirectStrategy().sendRedirect(request, response, ""/logout?userIsDisabled=true"");
            return;
        }
        loginAttemptService.loginSucceeded(userName);

        // Get the saved request
        HttpSession session = request.getSession(false);
        SavedRequest savedRequest =
                (session != null)
                        ? (SavedRequest) session.getAttribute(""SPRING_SECURITY_SAVED_REQUEST"")
                        : null;

        if (savedRequest != null
                && !RequestUriUtils.isStaticResource(
                        request.getContextPath(), savedRequest.getRedirectUrl())) {
            // Redirect to the original destination
            super.onAuthenticationSuccess(request, response, authentication);
        } else {
            // Redirect to the root URL (considering context path)
            getRedirectStrategy().sendRedirect(request, response, ""/"");
        }

        // super.onAuthenticationSuccess(request, response, authentication);
    }
"
stirling.software.proprietary.security.database.repository,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/database/repository/JPATokenRepositoryImpl.java,JPATokenRepositoryImpl,createNewToken,void createNewToken(PersistentRememberMeToken),"[19, 28]","{'A233': [(19, 28)]}",{'A233': 1.0},A233,,"    @Override
    @Transactional
    public void createNewToken(PersistentRememberMeToken token) {
        PersistentLogin newToken = new PersistentLogin();
        newToken.setSeries(token.getSeries());
        newToken.setUsername(token.getUsername());
        newToken.setToken(token.getTokenValue());
        newToken.setLastUsed(token.getDate());
        persistentLoginRepository.save(newToken);
    }
"
stirling.software.proprietary.security.database.repository,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/database/repository/JPATokenRepositoryImpl.java,JPATokenRepositoryImpl,updateToken,"void updateToken(String,String,Date)","[30, 39]","{'A233': [(30, 39)]}",{'A233': 1.0},A233,,"    @Override
    @Transactional
    public void updateToken(String series, String tokenValue, Date lastUsed) {
        PersistentLogin existingToken = persistentLoginRepository.findById(series).orElse(null);
        if (existingToken != null) {
            existingToken.setToken(tokenValue);
            existingToken.setLastUsed(lastUsed);
            persistentLoginRepository.save(existingToken);
        }
    }
"
stirling.software.proprietary.security.database.repository,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/database/repository/JPATokenRepositoryImpl.java,JPATokenRepositoryImpl,getTokenForSeries,PersistentRememberMeToken getTokenForSeries(String),"[41, 49]","{'A233': [(41, 49)]}",{'A233': 1.0},A233,,"    @Override
    public PersistentRememberMeToken getTokenForSeries(String seriesId) {
        PersistentLogin token = persistentLoginRepository.findById(seriesId).orElse(null);
        if (token != null) {
            return new PersistentRememberMeToken(
                    token.getUsername(), token.getSeries(), token.getToken(), token.getLastUsed());
        }
        return null;
    }
"
stirling.software.proprietary.security.database.repository,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/database/repository/JPATokenRepositoryImpl.java,JPATokenRepositoryImpl,removeUserTokens,void removeUserTokens(String),"[51, 58]","{'A233': [(51, 58)]}",{'A233': 1.0},A233,,"    @Override
    @Transactional
    public void removeUserTokens(String username) {
        try {
            persistentLoginRepository.deleteByUsername(username);
        } catch (Exception e) {
        }
    }
"
stirling.software.proprietary.security.database,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/database/ScheduledTasks.java,ScheduledTasks,performBackup,void performBackup(),"[21, 24]","{'A236': [(22, 23)], 'A234': [(21, 21), (24, 24)]}","{'A236': 0.5, 'A234': 0.5}",A236,,"    @Scheduled(cron = ""0 0 0 * * ?"")
    public void performBackup() throws SQLException, UnsupportedProviderException {
        databaseService.exportDatabase();
    }
"
stirling.software.proprietary.security.database,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/database/H2SQLCondition.java,H2SQLCondition,matches,"boolean matches(ConditionContext,AnnotatedTypeMetadata)","[9, 22]","{'A236': [(15, 19), (21, 21)], 'A234': [(9, 14), (20, 20), (22, 22)]}","{'A236': 0.42857142857142855, 'A234': 0.5714285714285714}",A234,,"    @Override
    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
        boolean enableCustomDatabase =
                Boolean.parseBoolean(
                        context.getEnvironment()
                                .getProperty(""system.datasource.enableCustomDatabase""));

        if (!enableCustomDatabase) {
            return false;
        }

        String dataSourceType = context.getEnvironment().getProperty(""system.datasource.type"");
        return ""h2"".equalsIgnoreCase(dataSourceType);
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/ApiKeyAuthenticationToken.java,ApiKeyAuthenticationToken,getCredentials,Object getCredentials(),"[28, 31]","{'A233': [(28, 31)]}",{'A233': 1.0},A233,,"    @Override
    public Object getCredentials() {
        return credentials;
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/ApiKeyAuthenticationToken.java,ApiKeyAuthenticationToken,getPrincipal,Object getPrincipal(),"[33, 36]","{'A233': [(33, 36)]}",{'A233': 1.0},A233,,"    @Override
    public Object getPrincipal() {
        return principal;
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/ApiKeyAuthenticationToken.java,ApiKeyAuthenticationToken,setAuthenticated,void setAuthenticated(boolean),"[38, 45]","{'A233': [(38, 45)]}",{'A233': 1.0},A233,,"    @Override
    public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {
        if (isAuthenticated) {
            throw new IllegalArgumentException(
                    ""Cannot set this token to trusted. Use constructor which takes a GrantedAuthority list instead."");
        }
        super.setAuthenticated(false);
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/ApiKeyAuthenticationToken.java,ApiKeyAuthenticationToken,eraseCredentials,void eraseCredentials(),"[47, 51]","{'A233': [(47, 51)]}",{'A233': 1.0},A233,,"    @Override
    public void eraseCredentials() {
        super.eraseCredentials();
        credentials = null;
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java,User,getRoleName,String getRoleName(),"[72, 74]","{'A234': [(72, 74)]}",{'A234': 1.0},A234,,"    public String getRoleName() {
        return Role.getRoleNameByRoleId(getRolesAsString());
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java,User,isFirstLogin,boolean isFirstLogin(),"[76, 78]","{'A233': [(76, 78)]}",{'A233': 1.0},A233,,"    public boolean isFirstLogin() {
        return isFirstLogin != null && isFirstLogin;
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java,User,setFirstLogin,void setFirstLogin(boolean),"[80, 82]","{'A233': [(80, 82)]}",{'A233': 1.0},A233,,"    public void setFirstLogin(boolean isFirstLogin) {
        this.isFirstLogin = isFirstLogin;
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java,User,setAuthenticationType,void setAuthenticationType(AuthenticationType),"[84, 86]","{'A233': [(84, 86)]}",{'A233': 1.0},A233,,"    public void setAuthenticationType(AuthenticationType authenticationType) {
        this.authenticationType = authenticationType.toString().toLowerCase();
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java,User,addAuthorities,void addAuthorities(Set<Authority>),"[88, 90]","{'A233': [(88, 90)]}",{'A233': 1.0},A233,,"    public void addAuthorities(Set<Authority> authorities) {
        this.authorities.addAll(authorities);
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java,User,addAuthority,void addAuthority(Authority),"[92, 94]","{'A233': [(94, 94)], 'A234': [(92, 93)]}","{'A233': 0.3333333333333333, 'A234': 0.6666666666666666}",A234,,"    public void addAuthority(Authority authority) {
        this.authorities.add(authority);
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java,User,getRolesAsString,String getRolesAsString(),"[96, 100]","{'A233': [(96, 100)]}",{'A233': 1.0},A233,,"    public String getRolesAsString() {
        return this.authorities.stream()
                .map(Authority::getAuthority)
                .collect(Collectors.joining("", ""));
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java,User,hasPassword,boolean hasPassword(),"[102, 104]","{'A238': [(102, 104)]}",{'A238': 1.0},A238,,"    public boolean hasPassword() {
        return this.password != null && !this.password.isEmpty();
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/AttemptCounter.java,AttemptCounter,increment,void increment(),"[12, 15]","{'A233': [(12, 15)]}",{'A233': 1.0},A233,,"    public void increment() {
        this.attemptCount++;
        this.lastAttemptTime = System.currentTimeMillis();
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/AttemptCounter.java,AttemptCounter,getAttemptCount,int getAttemptCount(),"[17, 19]","{'A233': [(17, 19)]}",{'A233': 1.0},A233,,"    public int getAttemptCount() {
        return attemptCount;
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/AttemptCounter.java,AttemptCounter,getLastAttemptTime,long getLastAttemptTime(),"[21, 23]","{'A233': [(22, 23)], 'A238': [(21, 21)]}","{'A233': 0.6666666666666666, 'A238': 0.3333333333333333}",A233,,"    public long getLastAttemptTime() {
        return lastAttemptTime;
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/AttemptCounter.java,AttemptCounter,shouldReset,boolean shouldReset(long),"[25, 27]","{'A238': [(25, 27)]}",{'A238': 1.0},A238,,"    public boolean shouldReset(long attemptIncrementTime) {
        return System.currentTimeMillis() - lastAttemptTime > attemptIncrementTime;
    }
"
stirling.software.proprietary.security.model,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/model/AttemptCounter.java,AttemptCounter,reset,void reset(),"[29, 32]","{'A233': [(32, 32)], 'A238': [(29, 31)]}","{'A233': 0.25, 'A238': 0.75}",A238,,"    public void reset() {
        this.attemptCount = 0;
        this.lastAttemptTime = System.currentTimeMillis();
    }
"
stirling.software.proprietary.security.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/config/PremiumEndpointAspect.java,PremiumEndpointAspect,checkPremiumAccess,Object checkPremiumAccess(ProceedingJoinPoint),"[21, 29]","{'A233': [(21, 29)]}",{'A233': 1.0},A233,,"    @Around(
            ""@annotation(stirling.software.proprietary.security.config.PremiumEndpoint) || @within(stirling.software.proprietary.security.config.PremiumEndpoint)"")
    public Object checkPremiumAccess(ProceedingJoinPoint joinPoint) throws Throwable {
        if (!runningProOrHigher) {
            throw new ResponseStatusException(
                    HttpStatus.FORBIDDEN, ""This endpoint requires a Pro or higher license"");
        }
        return joinPoint.proceed();
    }
"
stirling.software.proprietary.security.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/config/AccountWebController.java,AccountWebController,login,"String login(HttpServletRequest,Model,Authentication)","[78, 204]","{'A233': [(78, 79), (81, 83), (130, 130), (134, 134), (185, 186), (197, 197), (199, 199), (201, 201), (203, 204)], 'A236': [(84, 84), (88, 88), (92, 95), (97, 97), (99, 99), (102, 103), (105, 105), (107, 110), (112, 112), (114, 114), (116, 117), (119, 119), (125, 125), (127, 129), (131, 133), (136, 138), (140, 140), (145, 145), (147, 149), (153, 153), (156, 158), (160, 160), (163, 184), (187, 189), (191, 192), (194, 194), (198, 198), (202, 202)], 'A234': [(80, 80), (86, 87), (90, 91), (98, 98), (100, 101), (104, 104), (106, 106), (111, 111), (113, 113), (115, 115), (118, 118), (120, 121), (126, 126), (135, 135), (139, 139), (141, 144), (146, 146), (150, 151), (200, 200)], 'A238': [(85, 85), (89, 89), (96, 96), (122, 124), (152, 152), (154, 155), (159, 159), (161, 162), (190, 190), (193, 193), (195, 196)]}","{'A233': 0.11023622047244094, 'A236': 0.5511811023622047, 'A234': 0.2125984251968504, 'A238': 0.12598425196850394}",A236,,"    @GetMapping(""/login"")
    public String login(HttpServletRequest request, Model model, Authentication authentication) {
        // If the user is already authenticated, redirect them to the home page.
        if (authentication != null && authentication.isAuthenticated()) {
            return ""redirect:/"";
        }

        Map<String, String> providerList = new HashMap<>();
        Security securityProps = applicationProperties.getSecurity();
        OAUTH2 oauth = securityProps.getOauth2();

        if (oauth != null) {
            if (oauth.getEnabled()) {
                if (oauth.isSettingsValid()) {
                    String firstChar = String.valueOf(oauth.getProvider().charAt(0));
                    String clientName =
                            oauth.getProvider().replaceFirst(firstChar, firstChar.toUpperCase());
                    providerList.put(OAUTH_2_AUTHORIZATION + oauth.getProvider(), clientName);
                }

                Client client = oauth.getClient();

                if (client != null) {
                    GoogleProvider google = client.getGoogle();

                    if (validateProvider(google)) {
                        providerList.put(
                                OAUTH_2_AUTHORIZATION + google.getName(), google.getClientName());
                    }

                    GitHubProvider github = client.getGithub();

                    if (validateProvider(github)) {
                        providerList.put(
                                OAUTH_2_AUTHORIZATION + github.getName(), github.getClientName());
                    }

                    KeycloakProvider keycloak = client.getKeycloak();

                    if (validateProvider(keycloak)) {
                        providerList.put(
                                OAUTH_2_AUTHORIZATION + keycloak.getName(),
                                keycloak.getClientName());
                    }
                }
            }
        }

        SAML2 saml2 = securityProps.getSaml2();

        if (securityProps.isSaml2Active()
                && applicationProperties.getSystem().getEnableAlphaFunctionality()
                && applicationProperties.getPremium().isEnabled()) {
            String samlIdp = saml2.getProvider();
            String saml2AuthenticationPath = ""/saml2/authenticate/"" + saml2.getRegistrationId();

            if (applicationProperties.getPremium().getProFeatures().isSsoAutoLogin()) {
                return ""redirect:"" + request.getRequestURL() + saml2AuthenticationPath;
            } else {
                providerList.put(saml2AuthenticationPath, samlIdp + "" (SAML 2)"");
            }
        }

        // Remove any null keys/values from the providerList
        providerList
                .entrySet()
                .removeIf(entry -> entry.getKey() == null || entry.getValue() == null);
        model.addAttribute(""providerList"", providerList);
        model.addAttribute(""loginMethod"", securityProps.getLoginMethod());

        boolean altLogin = !providerList.isEmpty() ? securityProps.isAltLogin() : false;

        model.addAttribute(""altLogin"", altLogin);
        model.addAttribute(""currentPage"", ""login"");
        String error = request.getParameter(""error"");

        if (error != null) {
            switch (error) {
                case ""badCredentials"" -> error = ""login.invalid"";
                case ""locked"" -> error = ""login.locked"";
                case ""oauth2AuthenticationError"" -> error = ""userAlreadyExistsOAuthMessage"";
            }

            model.addAttribute(""error"", error);
        }

        String errorOAuth = request.getParameter(""errorOAuth"");

        if (errorOAuth != null) {
            switch (errorOAuth) {
                case ""oAuth2AutoCreateDisabled"" -> errorOAuth = ""login.oAuth2AutoCreateDisabled"";
                case ""invalidUsername"" -> errorOAuth = ""login.invalid"";
                case ""userAlreadyExistsWeb"" -> errorOAuth = ""userAlreadyExistsWebMessage"";
                case ""oAuth2AuthenticationErrorWeb"" -> errorOAuth = ""login.oauth2InvalidUserType"";
                case ""invalid_token_response"" -> errorOAuth = ""login.oauth2InvalidTokenResponse"";
                case ""authorization_request_not_found"" ->
                        errorOAuth = ""login.oauth2RequestNotFound"";
                case ""access_denied"" -> errorOAuth = ""login.oauth2AccessDenied"";
                case ""invalid_user_info_response"" ->
                        errorOAuth = ""login.oauth2InvalidUserInfoResponse"";
                case ""invalid_request"" -> errorOAuth = ""login.oauth2invalidRequest"";
                case ""invalid_id_token"" -> errorOAuth = ""login.oauth2InvalidIdToken"";
                case ""oAuth2AdminBlockedUser"" -> errorOAuth = ""login.oAuth2AdminBlockedUser"";
                case ""userIsDisabled"" -> errorOAuth = ""login.userIsDisabled"";
                case ""invalid_destination"" -> errorOAuth = ""login.invalid_destination"";
                case ""relying_party_registration_not_found"" ->
                        errorOAuth = ""login.relyingPartyRegistrationNotFound"";
                // Valid InResponseTo was not available from the validation context, unable to
                // evaluate
                case ""invalid_in_response_to"" -> errorOAuth = ""login.invalid_in_response_to"";
                case ""not_authentication_provider_found"" ->
                        errorOAuth = ""login.not_authentication_provider_found"";
            }

            model.addAttribute(""errorOAuth"", errorOAuth);
        }

        if (request.getParameter(""messageType"") != null) {
            model.addAttribute(""messageType"", ""changedCredsMessage"");
        }

        if (request.getParameter(""logout"") != null) {
            model.addAttribute(""logoutMessage"", ""login.logoutMessage"");
        }

        return ""login"";
    }
"
stirling.software.proprietary.security.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/config/AccountWebController.java,AccountWebController,showUsage,String showUsage(),"[206, 213]","{'A233': [(206, 213)]}",{'A233': 1.0},A233,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @GetMapping(""/usage"")
    public String showUsage() {
        if (!runningEE) {
            return ""error"";
        }
        return ""usage"";
    }
"
stirling.software.proprietary.security.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/config/AccountWebController.java,AccountWebController,showAddUserForm,"String showAddUserForm(HttpServletRequest,Model,Authentication)","[215, 372]","{'A233': [(215, 216), (219, 220), (227, 230), (232, 235), (237, 239), (241, 241), (244, 245), (247, 251), (274, 275), (285, 286), (308, 308), (349, 349), (356, 357), (368, 372)], 'A236': [(310, 311), (313, 319), (321, 329), (332, 333), (335, 339), (343, 344), (347, 347)], 'A234': [(221, 226), (236, 236), (242, 243), (252, 273), (276, 284), (287, 307), (340, 342), (348, 348), (350, 355), (358, 367)], 'A238': [(217, 218), (309, 309), (312, 312), (320, 320), (330, 331), (334, 334), (345, 346)], 'A235': [(231, 231), (240, 240), (246, 246)]}","{'A233': 0.22784810126582278, 'A236': 0.17721518987341772, 'A234': 0.5126582278481012, 'A238': 0.06329113924050633, 'A235': 0.0189873417721519}",A234,,"    @PreAuthorize(""hasRole('ROLE_ADMIN')"")
    @GetMapping(""/adminSettings"")
    public String showAddUserForm(
            HttpServletRequest request, Model model, Authentication authentication) {
        List<User> allUsers = userRepository.findAllWithTeam();
        Iterator<User> iterator = allUsers.iterator();
        Map<String, String> roleDetails = Role.getAllRoleDetails();
        // Map to store session information and user activity status
        Map<String, Boolean> userSessions = new HashMap<>();
        Map<String, Date> userLastRequest = new HashMap<>();
        int activeUsers = 0;
        int disabledUsers = 0;
        while (iterator.hasNext()) {
            User user = iterator.next();
            if (user != null) {
                boolean shouldRemove = false;

                // Check if user is an INTERNAL_API_USER
                for (Authority authority : user.getAuthorities()) {
                    if (authority.getAuthority().equals(Role.INTERNAL_API_USER.getRoleId())) {
                        shouldRemove = true;
                        roleDetails.remove(Role.INTERNAL_API_USER.getRoleId());
                        break;
                    }
                }

                // Also check if user is part of the Internal team
                if (user.getTeam() != null
                        && user.getTeam().getName().equals(TeamService.INTERNAL_TEAM_NAME)) {
                    shouldRemove = true;
                }

                // Remove the user if either condition is true
                if (shouldRemove) {
                    iterator.remove();
                    continue;
                }
                // Determine the user's session status and last request time
                int maxInactiveInterval = sessionPersistentRegistry.getMaxInactiveInterval();
                boolean hasActiveSession = false;
                Date lastRequest = null;
                Optional<SessionEntity> latestSession =
                        sessionPersistentRegistry.findLatestSession(user.getUsername());
                if (latestSession.isPresent()) {
                    SessionEntity sessionEntity = latestSession.get();
                    Date lastAccessedTime = sessionEntity.getLastRequest();
                    Instant now = Instant.now();
                    // Calculate session expiration and update session status accordingly
                    Instant expirationTime =
                            lastAccessedTime
                                    .toInstant()
                                    .plus(maxInactiveInterval, ChronoUnit.SECONDS);
                    if (now.isAfter(expirationTime)) {
                        sessionPersistentRegistry.expireSession(sessionEntity.getSessionId());
                    } else {
                        hasActiveSession = !sessionEntity.isExpired();
                    }
                    lastRequest = sessionEntity.getLastRequest();
                } else {
                    // No session, set default last request time
                    lastRequest = new Date(0);
                }
                userSessions.put(user.getUsername(), hasActiveSession);
                userLastRequest.put(user.getUsername(), lastRequest);
                if (hasActiveSession) {
                    activeUsers++;
                }
                if (!user.isEnabled()) {
                    disabledUsers++;
                }
            }
        }
        // Sort users by active status and last request date
        List<User> sortedUsers =
                allUsers.stream()
                        .sorted(
                                (u1, u2) -> {
                                    boolean u1Active = userSessions.get(u1.getUsername());
                                    boolean u2Active = userSessions.get(u2.getUsername());
                                    if (u1Active && !u2Active) {
                                        return -1;
                                    } else if (!u1Active && u2Active) {
                                        return 1;
                                    } else {
                                        Date u1LastRequest =
                                                userLastRequest.getOrDefault(
                                                        u1.getUsername(), new Date(0));
                                        Date u2LastRequest =
                                                userLastRequest.getOrDefault(
                                                        u2.getUsername(), new Date(0));
                                        return u2LastRequest.compareTo(u1LastRequest);
                                    }
                                })
                        .toList();
        String messageType = request.getParameter(""messageType"");

        String deleteMessage;
        if (messageType != null) {
            deleteMessage =
                    switch (messageType) {
                        case ""deleteCurrentUser"" -> ""deleteCurrentUserMessage"";
                        case ""deleteUsernameExists"" -> ""deleteUsernameExistsMessage"";
                        default -> null;
                    };

            model.addAttribute(""deleteMessage"", deleteMessage);

            String addMessage;
            addMessage =
                    switch (messageType) {
                        case ""usernameExists"" -> ""usernameExistsMessage"";
                        case ""invalidUsername"" -> ""invalidUsernameMessage"";
                        case ""invalidPassword"" -> ""invalidPasswordMessage"";
                        default -> null;
                    };
            model.addAttribute(""addMessage"", addMessage);
        }

        String changeMessage;
        if (messageType != null) {
            changeMessage =
                    switch (messageType) {
                        case ""userNotFound"" -> ""userNotFoundMessage"";
                        case ""downgradeCurrentUser"" -> ""downgradeCurrentUserMessage"";
                        case ""disabledCurrentUser"" -> ""disabledCurrentUserMessage"";
                        case ""cannotMoveInternalUsers"" -> ""team.cannotMoveInternalUsers"";
                        case ""internalTeamNotAccessible"" -> ""team.internalTeamNotAccessible"";
                        case ""invalidRole"" -> ""invalidRoleMessage"";
                        default -> messageType;
                    };
            model.addAttribute(""changeMessage"", changeMessage);
        }

        model.addAttribute(""users"", sortedUsers);
        model.addAttribute(""currentUsername"", authentication.getName());
        model.addAttribute(""roleDetails"", roleDetails);
        model.addAttribute(""userSessions"", userSessions);
        model.addAttribute(""userLastRequest"", userLastRequest);
        model.addAttribute(""totalUsers"", allUsers.size());
        model.addAttribute(""activeUsers"", activeUsers);
        model.addAttribute(""disabledUsers"", disabledUsers);

        // Get all teams but filter out the Internal team
        List<Team> allTeams =
                teamRepository.findAll().stream()
                        .filter(
                                team ->
                                        !team.getName()
                                                .equals(
                                                        stirling.software.proprietary.security
                                                                .service.TeamService
                                                                .INTERNAL_TEAM_NAME))
                        .toList();
        model.addAttribute(""teams"", allTeams);

        model.addAttribute(""maxPaidUsers"", applicationProperties.getPremium().getMaxUsers());
        return ""adminSettings"";
    }
"
stirling.software.proprietary.security.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/config/AccountWebController.java,AccountWebController,account,"String account(HttpServletRequest,Model,Authentication)","[374, 437]","{'A233': [(374, 379), (381, 381), (398, 398), (402, 403), (405, 410), (412, 413), (426, 426), (428, 430), (432, 437)], 'A236': [(383, 384), (395, 396), (399, 401), (404, 404), (411, 411), (414, 414), (418, 422), (425, 425), (427, 427)], 'A234': [(380, 380), (385, 386), (389, 394), (431, 431)], 'A237': [(382, 382), (387, 388), (397, 397)], 'A238': [(415, 417), (423, 424)]}","{'A233': 0.4375, 'A236': 0.265625, 'A234': 0.15625, 'A237': 0.0625, 'A238': 0.078125}",A233,,"    @PreAuthorize(""!hasAuthority('ROLE_DEMO_USER')"")
    @GetMapping(""/account"")
    public String account(HttpServletRequest request, Model model, Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ""redirect:/"";
        }
        if (authentication.isAuthenticated()) {
            Object principal = authentication.getPrincipal();
            String username = null;

            // Retrieve username and other attributes and add login attributes to the model
            if (principal instanceof UserDetails detailsUser) {
                username = detailsUser.getUsername();
                model.addAttribute(""oAuth2Login"", false);
            }
            if (principal instanceof OAuth2User oAuth2User) {
                username = oAuth2User.getName();
                model.addAttribute(""oAuth2Login"", true);
            }
            if (principal instanceof CustomSaml2AuthenticatedPrincipal saml2User) {
                username = saml2User.name();
                model.addAttribute(""saml2Login"", true);
            }
            if (username != null) {
                // Fetch user details from the database
                Optional<User> user = userRepository.findByUsernameIgnoreCaseWithSettings(username);

                if (user.isEmpty()) {
                    return ""redirect:/error"";
                }

                // Convert settings map to JSON string
                ObjectMapper objectMapper = new ObjectMapper();
                String settingsJson;
                try {
                    settingsJson = objectMapper.writeValueAsString(user.get().getSettings());
                } catch (JsonProcessingException e) {
                    log.error(""Error converting settings map"", e);
                    return ""redirect:/error"";
                }

                String messageType = request.getParameter(""messageType"");
                if (messageType != null) {
                    switch (messageType) {
                        case ""notAuthenticated"" -> messageType = ""notAuthenticatedMessage"";
                        case ""userNotFound"" -> messageType = ""userNotFoundMessage"";
                        case ""incorrectPassword"" -> messageType = ""incorrectPasswordMessage"";
                        case ""usernameExists"" -> messageType = ""usernameExistsMessage"";
                        case ""invalidUsername"" -> messageType = ""invalidUsernameMessage"";
                    }
                }

                model.addAttribute(""username"", username);
                model.addAttribute(""messageType"", messageType);
                model.addAttribute(""role"", user.get().getRolesAsString());
                model.addAttribute(""settings"", settingsJson);
                model.addAttribute(""changeCredsFlag"", user.get().isFirstLogin());
                model.addAttribute(""currentPage"", ""account"");
            }
        } else {
            return ""redirect:/"";
        }
        return ""account"";
    }
"
stirling.software.proprietary.security.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/config/AccountWebController.java,AccountWebController,changeCreds,"String changeCreds(HttpServletRequest,Model,Authentication)","[439, 483]","{'A233': [(439, 445), (447, 447), (450, 450), (454, 455), (477, 483)], 'A236': [(451, 453), (476, 476)], 'A234': [(446, 446), (448, 449)], 'A238': [(456, 475)]}","{'A233': 0.4, 'A236': 0.08888888888888889, 'A234': 0.06666666666666667, 'A238': 0.4444444444444444}",A238,,"    @PreAuthorize(""!hasAuthority('ROLE_DEMO_USER')"")
    @GetMapping(""/change-creds"")
    public String changeCreds(
            HttpServletRequest request, Model model, Authentication authentication) {
        if (authentication == null || !authentication.isAuthenticated()) {
            return ""redirect:/"";
        }
        if (authentication.isAuthenticated()) {
            Object principal = authentication.getPrincipal();
            if (principal instanceof UserDetails detailsUser) {
                String username = detailsUser.getUsername();
                // Fetch user details from the database
                Optional<User> user = userRepository.findByUsernameIgnoreCase(username);
                if (user.isEmpty()) {
                    // Handle error appropriately, example redirection in case of error
                    return ""redirect:/error"";
                }
                String messageType = request.getParameter(""messageType"");
                if (messageType != null) {
                    switch (messageType) {
                        case ""notAuthenticated"":
                            messageType = ""notAuthenticatedMessage"";
                            break;
                        case ""userNotFound"":
                            messageType = ""userNotFoundMessage"";
                            break;
                        case ""incorrectPassword"":
                            messageType = ""incorrectPasswordMessage"";
                            break;
                        case ""usernameExists"":
                            messageType = ""usernameExistsMessage"";
                            break;
                        default:
                            break;
                    }
                    model.addAttribute(""messageType"", messageType);
                }

                model.addAttribute(""username"", username);
            }
        } else {
            return ""redirect:/"";
        }
        return ""change-creds"";
    }
"
stirling.software.proprietary.security.config,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/config/EnterpriseEndpointAspect.java,EnterpriseEndpointAspect,checkEnterpriseAccess,Object checkEnterpriseAccess(ProceedingJoinPoint),"[21, 29]","{'A233': [(21, 29)]}",{'A233': 1.0},A233,,"    @Around(
            ""@annotation(stirling.software.proprietary.security.config.EnterpriseEndpoint) || @within(stirling.software.proprietary.security.config.EnterpriseEndpoint)"")
    public Object checkEnterpriseAccess(ProceedingJoinPoint joinPoint) throws Throwable {
        if (!runningEE) {
            throw new ResponseStatusException(
                    HttpStatus.FORBIDDEN, ""This endpoint requires an Enterprise license"");
        }
        return joinPoint.proceed();
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/IPRateLimitingFilter.java,IPRateLimitingFilter,doFilter,"void doFilter(ServletRequest,ServletResponse,FilterChain)","[27, 62]","{'A233': [(27, 29), (32, 34), (37, 62)], 'A234': [(30, 31), (35, 36)]}","{'A233': 0.8888888888888888, 'A234': 0.1111111111111111}",A233,,"    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        if (request instanceof HttpServletRequest httpServletRequest) {
            HttpServletRequest httpRequest = httpServletRequest;
            String method = httpRequest.getMethod();
            String requestURI = httpRequest.getRequestURI();
            // Check if the request is for static resources
            boolean isStaticResource =
                    RequestUriUtils.isStaticResource(httpRequest.getContextPath(), requestURI);

            // If it's a static resource, just continue the filter chain and skip the logic below
            if (isStaticResource) {
                chain.doFilter(request, response);
                return;
            }

            String clientIp = request.getRemoteAddr();
            requestCounts.computeIfAbsent(clientIp, k -> new AtomicInteger(0));
            if (!""GET"".equalsIgnoreCase(method)) {

                if (requestCounts.get(clientIp).incrementAndGet() > maxRequests) {
                    // Handle limit exceeded (e.g., send error response)
                    response.getWriter().write(""Rate limit exceeded"");
                    return;
                }
            } else {
                if (requestCounts.get(clientIp).incrementAndGet() > maxGetRequests) {
                    // Handle limit exceeded (e.g., send error response)
                    response.getWriter().write(""GET Rate limit exceeded"");
                    return;
                }
            }
        }
        chain.doFilter(request, response);
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/IPRateLimitingFilter.java,IPRateLimitingFilter,resetRequestCounts,void resetRequestCounts(),"[64, 67]","{'A233': [(64, 67)]}",{'A233': 1.0},A233,,"    public void resetRequestCounts() {
        requestCounts.clear();
        getCounts.clear();
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/EnterpriseEndpointFilter.java,EnterpriseEndpointFilter,doFilterInternal,"void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)","[23, 33]","{'A233': [(23, 33)]}",{'A233': 1.0},A233,,"    @Override
    protected void doFilterInternal(
            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        if (!runningProOrHigher && isPrometheusEndpointRequest(request)) {
            response.setStatus(HttpStatus.NOT_FOUND.value());
            return;
        }
        filterChain.doFilter(request, response);
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/EnterpriseEndpointFilter.java,EnterpriseEndpointFilter,isPrometheusEndpointRequest,boolean isPrometheusEndpointRequest(HttpServletRequest),"[35, 37]","{'A233': [(35, 37)]}",{'A233': 1.0},A233,,"    private boolean isPrometheusEndpointRequest(HttpServletRequest request) {
        return request.getRequestURI().contains(""/actuator/"");
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/FirstLoginFilter.java,FirstLoginFilter,doFilterInternal,"void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)","[36, 76]","{'A233': [(36, 41), (43, 43), (45, 51), (53, 55), (58, 76)], 'A234': [(42, 42), (44, 44), (52, 52), (56, 57)]}","{'A233': 0.8780487804878049, 'A234': 0.12195121951219512}",A233,,"    @Override
    protected void doFilterInternal(
            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        String method = request.getMethod();
        String requestURI = request.getRequestURI();
        String contextPath = request.getContextPath();
        // Check if the request is for static resources
        boolean isStaticResource = RequestUriUtils.isStaticResource(contextPath, requestURI);
        // If it's a static resource, just continue the filter chain and skip the logic below
        if (isStaticResource) {
            filterChain.doFilter(request, response);
            return;
        }
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication != null && authentication.isAuthenticated()) {
            Optional<User> user = userService.findByUsernameIgnoreCase(authentication.getName());
            if (""GET"".equalsIgnoreCase(method)
                    && user.isPresent()
                    && user.get().isFirstLogin()
                    && !(contextPath + ""/change-creds"").equals(requestURI)) {
                response.sendRedirect(contextPath + ""/change-creds"");
                return;
            }
        }
        if (log.isDebugEnabled()) {
            HttpSession session = request.getSession(true);
            SimpleDateFormat timeFormat = new SimpleDateFormat(""HH:mm:ss"");
            String creationTime = timeFormat.format(new Date(session.getCreationTime()));
            log.debug(
                    ""Request Info - New: {}, creationTimeSession {}, ID:  {}, IP: {}, User-Agent: {}, Referer: {}, Request URL: {}"",
                    session.isNew(),
                    creationTime,
                    session.getId(),
                    request.getRemoteAddr(),
                    request.getHeader(""User-Agent""),
                    request.getHeader(""Referer""),
                    request.getRequestURL().toString());
        }
        filterChain.doFilter(request, response);
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/UserBasedRateLimitingFilter.java,UserBasedRateLimitingFilter,doFilterInternal,"void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)","[43, 96]","{'A233': [(43, 96)]}",{'A233': 1.0},A233,,"    @Override
    protected void doFilterInternal(
            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        if (!rateLimit) {
            // If rateLimit is not enabled, just pass all requests without rate limiting
            filterChain.doFilter(request, response);
            return;
        }
        String method = request.getMethod();
        if (!""POST"".equalsIgnoreCase(method)) {
            // If the request is not a POST, just pass it through without rate limiting
            filterChain.doFilter(request, response);
            return;
        }
        String identifier = null;
        // Check for API key in the request headers
        String apiKey = request.getHeader(""X-API-KEY"");
        if (apiKey != null && !apiKey.trim().isEmpty()) {
            identifier = // Prefix to distinguish between API keys and usernames
                    ""API_KEY_"" + apiKey;
        } else {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication != null && authentication.isAuthenticated()) {
                UserDetails userDetails = (UserDetails) authentication.getPrincipal();
                identifier = userDetails.getUsername();
            }
        }
        // If neither API key nor an authenticated user is present, use IP address
        if (identifier == null) {
            identifier = request.getRemoteAddr();
        }
        Role userRole =
                getRoleFromAuthentication(SecurityContextHolder.getContext().getAuthentication());
        if (request.getHeader(""X-API-KEY"") != null) {
            // It's an API call
            processRequest(
                    userRole.getApiCallsPerDay(),
                    identifier,
                    apiBuckets,
                    request,
                    response,
                    filterChain);
        } else {
            // It's a Web UI call
            processRequest(
                    userRole.getWebCallsPerDay(),
                    identifier,
                    webBuckets,
                    request,
                    response,
                    filterChain);
        }
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/UserBasedRateLimitingFilter.java,UserBasedRateLimitingFilter,getRoleFromAuthentication,Role getRoleFromAuthentication(Authentication),"[98, 109]","{'A233': [(98, 109)]}",{'A233': 1.0},A233,,"    private Role getRoleFromAuthentication(Authentication authentication) {
        if (authentication != null && authentication.isAuthenticated()) {
            for (GrantedAuthority authority : authentication.getAuthorities()) {
                try {
                    return Role.fromString(authority.getAuthority());
                } catch (IllegalArgumentException ex) {
                    // Ignore and continue to next authority.
                }
            }
        }
        throw new IllegalStateException(""User does not have a valid role."");
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/UserBasedRateLimitingFilter.java,UserBasedRateLimitingFilter,processRequest,"void processRequest(int,String,Map<String, Bucket>,HttpServletRequest,HttpServletResponse,FilterChain)","[111, 134]","{'A233': [(111, 123), (125, 134)], 'A243': [(124, 124)]}","{'A233': 0.9583333333333334, 'A243': 0.041666666666666664}",A233,,"    private void processRequest(
            int limitPerDay,
            String identifier,
            Map<String, Bucket> buckets,
            HttpServletRequest request,
            HttpServletResponse response,
            FilterChain filterChain)
            throws IOException, ServletException {
        Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));
        ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);
        if (probe.isConsumed()) {
            response.setHeader(
                    ""X-Rate-Limit-Remaining"",
                    stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));
            filterChain.doFilter(request, response);
        } else {
            long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;
            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());
            response.setHeader(
                    ""X-Rate-Limit-Retry-After-Seconds"",
                    Newlines.stripAll(String.valueOf(waitForRefill)));
            response.getWriter().write(""Rate limit exceeded for POST requests."");
        }
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/UserBasedRateLimitingFilter.java,UserBasedRateLimitingFilter,createUserBucket,Bucket createUserBucket(int),"[136, 143]","{'A233': [(136, 137), (142, 143)], 'A234': [(138, 141)]}","{'A233': 0.5, 'A234': 0.5}",A233,,"    private Bucket createUserBucket(int limitPerDay) {
        Bandwidth limit =
                Bandwidth.builder()
                        .capacity(limitPerDay)
                        .refillIntervally(limitPerDay, Duration.ofDays(1))
                        .build();
        return Bucket.builder().addLimit(limit).build();
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/UserBasedRateLimitingFilter.java,UserBasedRateLimitingFilter,stripNewlines,String stripNewlines(String),"[145, 147]","{'A243': [(145, 147)]}",{'A243': 1.0},A243,,"    private static String stripNewlines(final String s) {
        return s.replaceAll(""[\n\r]"", """");
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/UserAuthenticationFilter.java,UserAuthenticationFilter,doFilterInternal,"void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)","[56, 207]","{'A236': [(90, 90), (180, 180), (196, 196)], 'A233': [(56, 88), (91, 94), (101, 101), (103, 124), (130, 133), (206, 207)], 'A234': [(89, 89), (95, 100), (102, 102), (125, 129), (134, 179), (181, 195), (197, 205)]}","{'A236': 0.019736842105263157, 'A233': 0.4342105263157895, 'A234': 0.5460526315789473}",A234,,"    @Override
    protected void doFilterInternal(
            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        if (!loginEnabledValue) {
            // If login is not enabled, just pass all requests without authentication
            filterChain.doFilter(request, response);
            return;
        }
        String requestURI = request.getRequestURI();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        // Check for session expiration (unsure if needed)
        //        if (authentication != null && authentication.isAuthenticated()) {
        //            String sessionId = request.getSession().getId();
        //            SessionInformation sessionInfo =
        //                    sessionPersistentRegistry.getSessionInformation(sessionId);
        //
        //            if (sessionInfo != null && sessionInfo.isExpired()) {
        //                SecurityContextHolder.clearContext();
        //                response.sendRedirect(request.getContextPath() + ""/login?expired=true"");
        //                return;
        //            }
        //        }

        // Check for API key in the request headers if no authentication exists
        if (authentication == null || !authentication.isAuthenticated()) {
            String apiKey = request.getHeader(""X-API-KEY"");
            if (apiKey != null && !apiKey.trim().isEmpty()) {
                try {
                    // Use API key to authenticate. This requires you to have an authentication
                    // provider for API keys.
                    Optional<User> user = userService.getUserByApiKey(apiKey);
                    if (user.isEmpty()) {
                        response.setStatus(HttpStatus.UNAUTHORIZED.value());
                        response.getWriter().write(""Invalid API Key."");
                        return;
                    }
                    List<SimpleGrantedAuthority> authorities =
                            user.get().getAuthorities().stream()
                                    .map(
                                            authority ->
                                                    new SimpleGrantedAuthority(
                                                            authority.getAuthority()))
                                    .toList();
                    authentication = new ApiKeyAuthenticationToken(user.get(), apiKey, authorities);
                    SecurityContextHolder.getContext().setAuthentication(authentication);
                } catch (AuthenticationException e) {
                    // If API key authentication fails, deny the request
                    response.setStatus(HttpStatus.UNAUTHORIZED.value());
                    response.getWriter().write(""Invalid API Key."");
                    return;
                }
            }
        }

        // If we still don't have any authentication, deny the request
        if (authentication == null || !authentication.isAuthenticated()) {
            String method = request.getMethod();
            String contextPath = request.getContextPath();

            if (""GET"".equalsIgnoreCase(method) && !(contextPath + ""/login"").equals(requestURI)) {
                response.sendRedirect(contextPath + ""/login""); // redirect to the login page
                return;
            } else {
                response.setStatus(HttpStatus.UNAUTHORIZED.value());
                response.getWriter()
                        .write(
                                ""Authentication required. Please provide a X-API-KEY in request""
                                        + "" header.\n""
                                        + ""This is found in Settings -> Account Settings -> API Key\n""
                                        + ""Alternatively you can disable authentication if this is""
                                        + "" unexpected"");
                return;
            }
        }

        // Check if the authenticated user is disabled and invalidate their session if so
        if (authentication != null && authentication.isAuthenticated()) {

            LoginMethod loginMethod = LoginMethod.UNKNOWN;

            boolean blockRegistration = false;

            // Extract username and determine the login method
            Object principal = authentication.getPrincipal();
            String username = null;
            if (principal instanceof UserDetails detailsUser) {
                username = detailsUser.getUsername();
                loginMethod = LoginMethod.USERDETAILS;
            } else if (principal instanceof OAuth2User oAuth2User) {
                username = oAuth2User.getName();
                loginMethod = LoginMethod.OAUTH2USER;
                OAUTH2 oAuth = securityProp.getOauth2();
                blockRegistration = oAuth != null && oAuth.getBlockRegistration();
            } else if (principal instanceof CustomSaml2AuthenticatedPrincipal saml2User) {
                username = saml2User.name();
                loginMethod = LoginMethod.SAML2USER;
                SAML2 saml2 = securityProp.getSaml2();
                blockRegistration = saml2 != null && saml2.getBlockRegistration();
            } else if (principal instanceof String stringUser) {
                username = stringUser;
                loginMethod = LoginMethod.STRINGUSER;
            }

            // Retrieve all active sessions for the user
            List<SessionInformation> sessionsInformations =
                    sessionPersistentRegistry.getAllSessions(principal, false);

            // Check if the user exists, is disabled, or needs session invalidation
            if (username != null) {
                log.debug(""Validating user: {}"", username);
                boolean isUserExists = userService.usernameExistsIgnoreCase(username);
                boolean isUserDisabled = userService.isUserDisabled(username);

                boolean notSsoLogin =
                        !LoginMethod.OAUTH2USER.equals(loginMethod)
                                && !LoginMethod.SAML2USER.equals(loginMethod);

                // Block user registration if not allowed by configuration
                if (blockRegistration && !isUserExists) {
                    log.warn(""Blocked registration for OAuth2/SAML user: {}"", username);
                    response.sendRedirect(
                            request.getContextPath() + ""/logout?oAuth2AdminBlockedUser=true"");
                    return;
                }

                // Expire sessions and logout if the user does not exist or is disabled
                if (!isUserExists || isUserDisabled) {
                    log.info(
                            ""Invalidating session for disabled or non-existent user: {}"", username);
                    for (SessionInformation sessionsInformation : sessionsInformations) {
                        sessionsInformation.expireNow();
                        sessionPersistentRegistry.expireSession(sessionsInformation.getSessionId());
                    }
                }

                // Redirect to logout if credentials are invalid
                if (!isUserExists && notSsoLogin) {
                    response.sendRedirect(request.getContextPath() + ""/logout?badCredentials=true"");
                    return;
                }
                if (isUserDisabled) {
                    response.sendRedirect(request.getContextPath() + ""/logout?userIsDisabled=true"");
                    return;
                }
            }
        }

        filterChain.doFilter(request, response);
    }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/UserAuthenticationFilter.java,UserAuthenticationFilter.LoginMethod,toString,String toString(),"[222, 225]","{'A234': [(222, 225)]}",{'A234': 1.0},A234,,"        @Override
        public String toString() {
            return method;
        }
"
stirling.software.proprietary.security.filter,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/filter/UserAuthenticationFilter.java,UserAuthenticationFilter,shouldNotFilter,boolean shouldNotFilter(HttpServletRequest),"[228, 257]","{'A233': [(228, 238), (240, 241), (243, 257)], 'A234': [(242, 242)], 'A238': [(239, 239)]}","{'A233': 0.9333333333333333, 'A234': 0.03333333333333333, 'A238': 0.03333333333333333}",A233,,"    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {
        String uri = request.getRequestURI();
        String contextPath = request.getContextPath();
        String[] permitAllPatterns = {
            contextPath + ""/login"",
            contextPath + ""/register"",
            contextPath + ""/error"",
            contextPath + ""/images/"",
            contextPath + ""/public/"",
            contextPath + ""/css/"",
            contextPath + ""/fonts/"",
            contextPath + ""/js/"",
            contextPath + ""/pdfjs/"",
            contextPath + ""/pdfjs-legacy/"",
            contextPath + ""/api/v1/info/status"",
            contextPath + ""/site.webmanifest""
        };

        for (String pattern : permitAllPatterns) {
            if (uri.startsWith(pattern)
                    || uri.endsWith("".svg"")
                    || uri.endsWith("".png"")
                    || uri.endsWith("".ico"")) {
                return true;
            }
        }

        return false;
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java,OAuth2Configuration,clientRegistrationRepository,ClientRegistrationRepository clientRegistrationRepository(),"[57, 72]","{'A236': [(58, 59), (65, 65), (67, 68), (71, 71)], 'A233': [(57, 57), (60, 64), (66, 66), (69, 70), (72, 72)]}","{'A236': 0.375, 'A233': 0.625}",A233,,"    @Bean
    public ClientRegistrationRepository clientRegistrationRepository()
            throws NoProviderFoundException {
        List<ClientRegistration> registrations = new ArrayList<>();
        githubClientRegistration().ifPresent(registrations::add);
        oidcClientRegistration().ifPresent(registrations::add);
        googleClientRegistration().ifPresent(registrations::add);
        keycloakClientRegistration().ifPresent(registrations::add);

        if (registrations.isEmpty()) {
            log.error(""No OAuth2 provider registered"");
            throw new NoProviderFoundException(""At least one OAuth2 provider must be configured."");
        }

        return new InMemoryClientRegistrationRepository(registrations);
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java,OAuth2Configuration,keycloakClientRegistration,Optional<ClientRegistration> keycloakClientRegistration(),"[74, 102]","{'A236': [(75, 77), (80, 91), (98, 98)], 'A233': [(74, 74), (78, 79), (92, 97), (99, 102)]}","{'A236': 0.5517241379310345, 'A233': 0.4482758620689655}",A236,,"    private Optional<ClientRegistration> keycloakClientRegistration() {
        OAUTH2 oauth2 = applicationProperties.getSecurity().getOauth2();

        if (isOAuth2Enabled(oauth2) || isClientInitialised(oauth2)) {
            return Optional.empty();
        }

        Client client = oauth2.getClient();
        KeycloakProvider keycloakClient = client.getKeycloak();
        Provider keycloak =
                new KeycloakProvider(
                        keycloakClient.getIssuer(),
                        keycloakClient.getClientId(),
                        keycloakClient.getClientSecret(),
                        keycloakClient.getScopes(),
                        keycloakClient.getUseAsUsername());

        return validateProvider(keycloak)
                ? Optional.of(
                        ClientRegistrations.fromIssuerLocation(keycloak.getIssuer())
                                .registrationId(keycloak.getName())
                                .clientId(keycloak.getClientId())
                                .clientSecret(keycloak.getClientSecret())
                                .scope(keycloak.getScopes())
                                .userNameAttributeName(keycloak.getUseAsUsername().getName())
                                .clientName(keycloak.getClientName())
                                .build())
                : Optional.empty();
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java,OAuth2Configuration,googleClientRegistration,Optional<ClientRegistration> googleClientRegistration(),"[104, 135]","{'A236': [(104, 107), (110, 135)], 'A233': [(108, 109)]}","{'A236': 0.9375, 'A233': 0.0625}",A236,,"    private Optional<ClientRegistration> googleClientRegistration() {
        OAUTH2 oAuth2 = applicationProperties.getSecurity().getOauth2();

        if (isOAuth2Enabled(oAuth2) || isClientInitialised(oAuth2)) {
            return Optional.empty();
        }

        Client client = oAuth2.getClient();
        GoogleProvider googleClient = client.getGoogle();
        Provider google =
                new GoogleProvider(
                        googleClient.getClientId(),
                        googleClient.getClientSecret(),
                        googleClient.getScopes(),
                        googleClient.getUseAsUsername());

        return validateProvider(google)
                ? Optional.of(
                        ClientRegistration.withRegistrationId(google.getName())
                                .clientId(google.getClientId())
                                .clientSecret(google.getClientSecret())
                                .scope(google.getScopes())
                                .authorizationUri(google.getAuthorizationUri())
                                .tokenUri(google.getTokenUri())
                                .userInfoUri(google.getUserInfoUri())
                                .userNameAttributeName(google.getUseAsUsername().getName())
                                .clientName(google.getClientName())
                                .redirectUri(REDIRECT_URI_PATH + google.getName())
                                .authorizationGrantType(AUTHORIZATION_CODE)
                                .build())
                : Optional.empty();
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java,OAuth2Configuration,githubClientRegistration,Optional<ClientRegistration> githubClientRegistration(),"[137, 168]","{'A236': [(137, 140), (143, 153), (159, 162), (164, 165)], 'A233': [(141, 142), (154, 158), (163, 163), (166, 168)]}","{'A236': 0.65625, 'A233': 0.34375}",A236,,"    private Optional<ClientRegistration> githubClientRegistration() {
        OAUTH2 oAuth2 = applicationProperties.getSecurity().getOauth2();

        if (isOAuth2Enabled(oAuth2)) {
            return Optional.empty();
        }

        Client client = oAuth2.getClient();
        GitHubProvider githubClient = client.getGithub();
        Provider github =
                new GitHubProvider(
                        githubClient.getClientId(),
                        githubClient.getClientSecret(),
                        githubClient.getScopes(),
                        githubClient.getUseAsUsername());

        return validateProvider(github)
                ? Optional.of(
                        ClientRegistration.withRegistrationId(github.getName())
                                .clientId(github.getClientId())
                                .clientSecret(github.getClientSecret())
                                .scope(github.getScopes())
                                .authorizationUri(github.getAuthorizationUri())
                                .tokenUri(github.getTokenUri())
                                .userInfoUri(github.getUserInfoUri())
                                .userNameAttributeName(github.getUseAsUsername().getName())
                                .clientName(github.getClientName())
                                .redirectUri(REDIRECT_URI_PATH + github.getName())
                                .authorizationGrantType(AUTHORIZATION_CODE)
                                .build())
                : Optional.empty();
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java,OAuth2Configuration,oidcClientRegistration,Optional<ClientRegistration> oidcClientRegistration(),"[170, 207]","{'A236': [(172, 173), (176, 207)], 'A233': [(170, 171), (174, 175)]}","{'A236': 0.8947368421052632, 'A233': 0.10526315789473684}",A236,,"    private Optional<ClientRegistration> oidcClientRegistration() {
        OAUTH2 oauth = applicationProperties.getSecurity().getOauth2();

        if (isOAuth2Enabled(oauth) || isClientInitialised(oauth)) {
            return Optional.empty();
        }

        String name = oauth.getProvider();
        String firstChar = String.valueOf(name.charAt(0));
        String clientName = name.replaceFirst(firstChar, firstChar.toUpperCase());

        Provider oidcProvider =
                new Provider(
                        oauth.getIssuer(),
                        name,
                        clientName,
                        oauth.getClientId(),
                        oauth.getClientSecret(),
                        oauth.getScopes(),
                        UsernameAttribute.valueOf(oauth.getUseAsUsername().toUpperCase()),
                        null,
                        null,
                        null);

        return !isStringEmpty(oidcProvider.getIssuer()) || validateProvider(oidcProvider)
                ? Optional.of(
                        ClientRegistrations.fromIssuerLocation(oauth.getIssuer())
                                .registrationId(name)
                                .clientId(oidcProvider.getClientId())
                                .clientSecret(oidcProvider.getClientSecret())
                                .scope(oidcProvider.getScopes())
                                .userNameAttributeName(oidcProvider.getUseAsUsername().getName())
                                .clientName(clientName)
                                .redirectUri(REDIRECT_URI_PATH + ""oidc"")
                                .authorizationGrantType(AUTHORIZATION_CODE)
                                .build())
                : Optional.empty();
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java,OAuth2Configuration,isOAuth2Enabled,boolean isOAuth2Enabled(OAUTH2),"[209, 211]","{'A236': [(209, 211)]}",{'A236': 1.0},A236,,"    private boolean isOAuth2Enabled(OAUTH2 oAuth2) {
        return oAuth2 == null || !oAuth2.getEnabled();
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java,OAuth2Configuration,isClientInitialised,boolean isClientInitialised(OAUTH2),"[213, 216]","{'A236': [(213, 215)], 'A233': [(216, 216)]}","{'A236': 0.75, 'A233': 0.25}",A236,,"    private boolean isClientInitialised(OAUTH2 oauth2) {
        Client client = oauth2.getClient();
        return client == null;
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java,OAuth2Configuration,userAuthoritiesMapper,GrantedAuthoritiesMapper userAuthoritiesMapper(),"[223, 252]","{'A236': [(224, 224), (244, 246)], 'A233': [(223, 223), (225, 232), (234, 240), (242, 243), (247, 252)], 'A234': [(233, 233), (241, 241)]}","{'A236': 0.13333333333333333, 'A233': 0.8, 'A234': 0.06666666666666667}",A233,,"    @Bean
    @ConditionalOnProperty(value = ""security.oauth2.enabled"", havingValue = ""true"")
    GrantedAuthoritiesMapper userAuthoritiesMapper() {
        return (authorities) -> {
            Set<GrantedAuthority> mappedAuthorities = new HashSet<>();
            authorities.forEach(
                    authority -> {
                        // Add existing OAUTH2 Authorities
                        mappedAuthorities.add(new SimpleGrantedAuthority(authority.getAuthority()));
                        // Add Authorities from database for existing user, if user is present.
                        if (authority instanceof OAuth2UserAuthority oAuth2Auth) {
                            String useAsUsername =
                                    applicationProperties
                                            .getSecurity()
                                            .getOauth2()
                                            .getUseAsUsername();
                            Optional<User> userOpt =
                                    userService.findByUsernameIgnoreCase(
                                            (String) oAuth2Auth.getAttributes().get(useAsUsername));
                            if (userOpt.isPresent()) {
                                User user = userOpt.get();
                                mappedAuthorities.add(
                                        new SimpleGrantedAuthority(
                                                userService.findRole(user).getAuthority()));
                            }
                        }
                    });
            return mappedAuthorities;
        };
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/CustomOAuth2AuthenticationFailureHandler.java,CustomOAuth2AuthenticationFailureHandler,onAuthenticationFailure,"void onAuthenticationFailure(HttpServletRequest,HttpServletResponse,AuthenticationException)","[23, 62]","{'A236': [(32, 32), (53, 58)], 'A238': [(23, 28), (47, 49), (51, 52), (59, 59), (62, 62)], 'A234': [(29, 31), (33, 46), (50, 50), (60, 61)]}","{'A236': 0.175, 'A238': 0.325, 'A234': 0.5}",A234,,"    @Override
    public void onAuthenticationFailure(
            HttpServletRequest request,
            HttpServletResponse response,
            AuthenticationException exception)
            throws IOException, ServletException {

        if (exception instanceof BadCredentialsException) {
            log.error(""BadCredentialsException"", exception);
            getRedirectStrategy().sendRedirect(request, response, ""/login?error=badCredentials"");
            return;
        }
        if (exception instanceof DisabledException) {
            log.error(""User is deactivated: "", exception);
            getRedirectStrategy().sendRedirect(request, response, ""/logout?userIsDisabled=true"");
            return;
        }
        if (exception instanceof LockedException) {
            log.error(""Account locked: "", exception);
            getRedirectStrategy().sendRedirect(request, response, ""/logout?error=locked"");
            return;
        }
        if (exception instanceof OAuth2AuthenticationException oAuth2Exception) {
            OAuth2Error error = oAuth2Exception.getError();

            String errorCode = error.getErrorCode();

            if (""Password must not be null"".equals(error.getErrorCode())) {
                errorCode = ""userAlreadyExistsWeb"";
            }

            log.error(
                    ""OAuth2 Authentication error: {}"",
                    errorCode != null ? errorCode : exception.getMessage(),
                    exception);
            getRedirectStrategy().sendRedirect(request, response, ""/login?errorOAuth="" + errorCode);
        }
        log.error(""Unhandled authentication exception"", exception);
        super.onAuthenticationFailure(request, response, exception);
    }
"
stirling.software.proprietary.security.oauth2,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/CustomOAuth2AuthenticationSuccessHandler.java,CustomOAuth2AuthenticationSuccessHandler,onAuthenticationSuccess,"void onAuthenticationSuccess(HttpServletRequest,HttpServletResponse,Authentication)","[36, 100]","{'A236': [(72, 72), (82, 82), (85, 85), (89, 89), (96, 96)], 'A238': [(36, 40), (50, 51), (53, 58), (60, 62), (64, 71), (78, 79), (81, 81), (83, 83), (90, 91), (98, 100)], 'A234': [(41, 49), (52, 52), (59, 59), (73, 77), (84, 84), (86, 88), (92, 92), (94, 95), (97, 97)], 'A233': [(63, 63), (80, 80), (93, 93)]}","{'A236': 0.07692307692307693, 'A238': 0.5076923076923077, 'A234': 0.36923076923076925, 'A233': 0.046153846153846156}",A238,,"    @Override
    public void onAuthenticationSuccess(
            HttpServletRequest request, HttpServletResponse response, Authentication authentication)
            throws ServletException, IOException {

        Object principal = authentication.getPrincipal();
        String username = """";

        if (principal instanceof OAuth2User oAuth2User) {
            username = oAuth2User.getName();
        } else if (principal instanceof UserDetails detailsUser) {
            username = detailsUser.getUsername();
        }

        // Get the saved request
        HttpSession session = request.getSession(false);
        String contextPath = request.getContextPath();
        SavedRequest savedRequest =
                (session != null)
                        ? (SavedRequest) session.getAttribute(""SPRING_SECURITY_SAVED_REQUEST"")
                        : null;

        if (savedRequest != null
                && !RequestUriUtils.isStaticResource(contextPath, savedRequest.getRedirectUrl())) {
            // Redirect to the original destination
            super.onAuthenticationSuccess(request, response, authentication);
        } else {
            OAUTH2 oAuth = applicationProperties.getSecurity().getOauth2();

            if (loginAttemptService.isBlocked(username)) {
                if (session != null) {
                    session.removeAttribute(""SPRING_SECURITY_SAVED_REQUEST"");
                }
                throw new LockedException(
                        ""Your account has been locked due to too many failed login attempts."");
            }

            if (userService.isUserDisabled(username)) {
                getRedirectStrategy()
                        .sendRedirect(request, response, ""/logout?userIsDisabled=true"");
                return;
            }
            if (userService.usernameExistsIgnoreCase(username)
                    && userService.hasPassword(username)
                    && !userService.isAuthenticationTypeByUsername(username, AuthenticationType.SSO)
                    && oAuth.getAutoCreateUser()) {
                response.sendRedirect(contextPath + ""/logout?oAuth2AuthenticationErrorWeb=true"");
                return;
            }

            try {
                if (oAuth.getBlockRegistration()
                        && !userService.usernameExistsIgnoreCase(username)) {
                    response.sendRedirect(contextPath + ""/logout?oAuth2AdminBlockedUser=true"");
                    return;
                }
                if (principal instanceof OAuth2User) {
                    userService.processSSOPostLogin(username, oAuth.getAutoCreateUser());
                }
                response.sendRedirect(contextPath + ""/"");
            } catch (IllegalArgumentException | SQLException | UnsupportedProviderException e) {
                response.sendRedirect(contextPath + ""/logout?invalidUsername=true"");
            }
        }
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/CustomAuthenticationFailureHandler.java,CustomAuthenticationFailureHandler,onAuthenticationFailure,"void onAuthenticationFailure(HttpServletRequest,HttpServletResponse,AuthenticationException)","[40, 89]","{'A236': [(78, 78)], 'A233': [(40, 46), (56, 56), (61, 65), (74, 75), (86, 89)], 'A234': [(48, 52), (54, 55), (57, 58), (66, 66), (68, 68), (71, 72), (76, 77), (79, 84)], 'A238': [(47, 47), (53, 53), (59, 60), (67, 67), (69, 70), (73, 73), (85, 85)]}","{'A236': 0.02, 'A233': 0.38, 'A234': 0.42, 'A238': 0.18}",A234,,"    @Override
    @Audited(type = AuditEventType.USER_FAILED_LOGIN, level = AuditLevel.BASIC)
    public void onAuthenticationFailure(
            HttpServletRequest request,
            HttpServletResponse response,
            AuthenticationException exception)
            throws IOException, ServletException {

        if (exception instanceof DisabledException) {
            log.error(""User is deactivated: "", exception);
            getRedirectStrategy().sendRedirect(request, response, ""/logout?userIsDisabled=true"");
            return;
        }

        String ip = request.getRemoteAddr();
        log.error(""Failed login attempt from IP: {}"", ip);

        if (exception instanceof LockedException) {
            getRedirectStrategy().sendRedirect(request, response, ""/login?error=locked"");
            return;
        }

        String username = request.getParameter(""username"");
        Optional<User> optUser = userService.findByUsernameIgnoreCase(username);

        if (username != null && optUser.isPresent() && !isDemoUser(optUser)) {
            log.info(
                    ""Remaining attempts for user {}: {}"",
                    username,
                    loginAttemptService.getRemainingAttempts(username));
            loginAttemptService.loginFailed(username);
            if (loginAttemptService.isBlocked(username) || exception instanceof LockedException) {
                getRedirectStrategy().sendRedirect(request, response, ""/login?error=locked"");
                return;
            }
        }
        if (exception instanceof BadCredentialsException
                || exception instanceof UsernameNotFoundException) {
            getRedirectStrategy().sendRedirect(request, response, ""/login?error=badCredentials"");
            return;
        }
        if (exception instanceof InternalAuthenticationServiceException
                || ""Password must not be null"".equalsIgnoreCase(exception.getMessage())) {
            getRedirectStrategy()
                    .sendRedirect(request, response, ""/login?error=oauth2AuthenticationError"");
            return;
        }

        super.onAuthenticationFailure(request, response, exception);
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/CustomAuthenticationFailureHandler.java,CustomAuthenticationFailureHandler,isDemoUser,boolean isDemoUser(Optional<User>),"[91, 95]","{'A233': [(91, 95)]}",{'A233': 1.0},A233,,"    private boolean isDemoUser(Optional<User> user) {
        return user.isPresent()
                && user.get().getAuthorities().stream()
                        .anyMatch(authority -> ""ROLE_DEMO_USER"".equals(authority.getAuthority()));
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/RateLimitResetScheduler.java,RateLimitResetScheduler,resetRateLimit,void resetRateLimit(),"[16, 19]","{'A233': [(16, 19)]}",{'A233': 1.0},A233,,"    @Scheduled(cron = ""0 0 0 * * MON"") // At 00:00 every Monday TODO: configurable
    public void resetRateLimit() {
        rateLimitingFilter.resetRequestCounts();
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,getAllPrincipals,List<Object> getAllPrincipals(),"[35, 43]","{'A234': [(35, 43)]}",{'A234': 1.0},A234,,"    @Override
    public List<Object> getAllPrincipals() {
        List<SessionEntity> sessions = sessionRepository.findAll();
        List<Object> principals = new ArrayList<>();
        for (SessionEntity session : sessions) {
            principals.add(session.getPrincipalName());
        }
        return principals;
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,getAllSessions,"List<SessionInformation> getAllSessions(Object,boolean)","[45, 75]","{'A234': [(45, 75)]}",{'A234': 1.0},A234,,"    @Override
    public List<SessionInformation> getAllSessions(
            Object principal, boolean includeExpiredSessions) {
        List<SessionInformation> sessionInformations = new ArrayList<>();
        String principalName = null;

        if (principal instanceof UserDetails detailsUser) {
            principalName = detailsUser.getUsername();
        } else if (principal instanceof OAuth2User oAuth2User) {
            principalName = oAuth2User.getName();
        } else if (principal instanceof CustomSaml2AuthenticatedPrincipal saml2User) {
            principalName = saml2User.name();
        } else if (principal instanceof String stringUser) {
            principalName = stringUser;
        }

        if (principalName != null) {
            List<SessionEntity> sessionEntities =
                    sessionRepository.findByPrincipalName(principalName);
            for (SessionEntity sessionEntity : sessionEntities) {
                if (includeExpiredSessions || !sessionEntity.isExpired()) {
                    sessionInformations.add(
                            new SessionInformation(
                                    sessionEntity.getPrincipalName(),
                                    sessionEntity.getSessionId(),
                                    sessionEntity.getLastRequest()));
                }
            }
        }
        return sessionInformations;
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,registerNewSession,"void registerNewSession(String,Object)","[77, 108]","{'A234': [(77, 92), (101, 108)], 'A233': [(93, 100)]}","{'A234': 0.75, 'A233': 0.25}",A234,,"    @Override
    @Transactional
    public void registerNewSession(String sessionId, Object principal) {
        String principalName = null;

        if (principal instanceof UserDetails detailsUser) {
            principalName = detailsUser.getUsername();
        } else if (principal instanceof OAuth2User oAuth2User) {
            principalName = oAuth2User.getName();
        } else if (principal instanceof CustomSaml2AuthenticatedPrincipal saml2User) {
            principalName = saml2User.name();
        } else if (principal instanceof String stringUser) {
            principalName = stringUser;
        }

        if (principalName != null) {
            // Clear old sessions for the principal (unsure if needed)
            //            List<SessionEntity> existingSessions =
            //                    sessionRepository.findByPrincipalName(principalName);
            //            for (SessionEntity session : existingSessions) {
            //                session.setExpired(true);
            //                sessionRepository.save(session);
            //            }

            SessionEntity sessionEntity = new SessionEntity();
            sessionEntity.setSessionId(sessionId);
            sessionEntity.setPrincipalName(principalName);
            sessionEntity.setLastRequest(new Date()); // Set lastRequest to the current date
            sessionEntity.setExpired(false);
            sessionRepository.save(sessionEntity);
        }
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,removeSessionInformation,void removeSessionInformation(String),"[110, 114]","{'A234': [(110, 114)]}",{'A234': 1.0},A234,,"    @Override
    @Transactional
    public void removeSessionInformation(String sessionId) {
        sessionRepository.deleteById(sessionId);
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,refreshLastRequest,void refreshLastRequest(String),"[116, 125]","{'A234': [(116, 125)]}",{'A234': 1.0},A234,,"    @Override
    @Transactional
    public void refreshLastRequest(String sessionId) {
        Optional<SessionEntity> sessionEntityOpt = sessionRepository.findById(sessionId);
        if (sessionEntityOpt.isPresent()) {
            SessionEntity sessionEntity = sessionEntityOpt.get();
            sessionEntity.setLastRequest(new Date()); // Update lastRequest to the current date
            sessionRepository.save(sessionEntity);
        }
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,getSessionInformation,SessionInformation getSessionInformation(String),"[127, 138]","{'A234': [(127, 138)]}",{'A234': 1.0},A234,,"    @Override
    public SessionInformation getSessionInformation(String sessionId) {
        Optional<SessionEntity> sessionEntityOpt = sessionRepository.findById(sessionId);
        if (sessionEntityOpt.isPresent()) {
            SessionEntity sessionEntity = sessionEntityOpt.get();
            return new SessionInformation(
                    sessionEntity.getPrincipalName(),
                    sessionEntity.getSessionId(),
                    sessionEntity.getLastRequest());
        }
        return null;
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,getAllSessionsNotExpired,List<SessionEntity> getAllSessionsNotExpired(),"[141, 143]","{'A234': [(141, 143)]}",{'A234': 1.0},A234,,"    public List<SessionEntity> getAllSessionsNotExpired() {
        return sessionRepository.findByExpired(false);
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,getAllSessions,List<SessionEntity> getAllSessions(),"[146, 148]","{'A234': [(146, 148)]}",{'A234': 1.0},A234,,"    public List<SessionEntity> getAllSessions() {
        return sessionRepository.findAll();
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,expireSession,void expireSession(String),"[151, 158]","{'A234': [(151, 158)]}",{'A234': 1.0},A234,,"    public void expireSession(String sessionId) {
        Optional<SessionEntity> sessionEntityOpt = sessionRepository.findById(sessionId);
        if (sessionEntityOpt.isPresent()) {
            SessionEntity sessionEntity = sessionEntityOpt.get();
            sessionEntity.setExpired(true); // Set expired to true
            sessionRepository.save(sessionEntity);
        }
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,getMaxInactiveInterval,int getMaxInactiveInterval(),"[161, 163]","{'A234': [(161, 163)]}",{'A234': 1.0},A234,,"    public int getMaxInactiveInterval() {
        return (int) defaultMaxInactiveInterval.getSeconds();
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,getSessionEntity,SessionEntity getSessionEntity(String),"[166, 168]","{'A234': [(166, 168)]}",{'A234': 1.0},A234,,"    public SessionEntity getSessionEntity(String sessionId) {
        return sessionRepository.findBySessionId(sessionId);
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,updateSessionByPrincipalName,"void updateSessionByPrincipalName(String,boolean,Date)","[171, 174]","{'A234': [(171, 174)]}",{'A234': 1.0},A234,,"    public void updateSessionByPrincipalName(
            String principalName, boolean expired, Date lastRequest) {
        sessionRepository.saveByPrincipalName(expired, lastRequest, principalName);
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,findLatestSession,Optional<SessionEntity> findLatestSession(String),"[177, 196]","{'A234': [(177, 196)]}",{'A234': 1.0},A234,,"    public Optional<SessionEntity> findLatestSession(String principalName) {
        List<SessionEntity> allSessions = sessionRepository.findByPrincipalName(principalName);
        if (allSessions.isEmpty()) {
            return Optional.empty();
        }

        // Sort sessions by lastRequest in descending order
        Collections.sort(
                allSessions,
                new Comparator<SessionEntity>() {
                    @Override
                    public int compare(SessionEntity s1, SessionEntity s2) {
                        // Sort by lastRequest in descending order
                        return s2.getLastRequest().compareTo(s1.getLastRequest());
                    }
                });

        // The first session in the list is the latest session for the given principal name
        return Optional.of(allSessions.get(0));
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionPersistentRegistry.java,SessionPersistentRegistry,compare,"int compare(SessionEntity,SessionEntity)","[187, 191]","{'A234': [(187, 191)]}",{'A234': 1.0},A234,,"                    @Override
                    public int compare(SessionEntity s1, SessionEntity s2) {
                        // Sort by lastRequest in descending order
                        return s2.getLastRequest().compareTo(s1.getLastRequest());
                    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionRegistryConfig.java,SessionRegistryConfig,sessionRegistry,SessionRegistryImpl sessionRegistry(),"[12, 15]","{'A234': [(12, 15)]}",{'A234': 1.0},A234,,"    @Bean
    public SessionRegistryImpl sessionRegistry() {
        return new SessionRegistryImpl();
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionRegistryConfig.java,SessionRegistryConfig,sessionPersistentRegistry,SessionPersistentRegistry sessionPersistentRegistry(SessionRepository),"[17, 21]","{'A236': [(18, 19)], 'A234': [(17, 17), (20, 21)]}","{'A236': 0.4, 'A234': 0.6}",A234,,"    @Bean
    public SessionPersistentRegistry sessionPersistentRegistry(
            SessionRepository sessionRepository) {
        return new SessionPersistentRegistry(sessionRepository);
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/CustomHttpSessionListener.java,CustomHttpSessionListener,sessionCreated,void sessionCreated(HttpSessionEvent),"[21, 22]","{'A233': [(21, 22)]}",{'A233': 1.0},A233,,"    @Override
    public void sessionCreated(HttpSessionEvent se) {}
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/CustomHttpSessionListener.java,CustomHttpSessionListener,sessionDestroyed,void sessionDestroyed(HttpSessionEvent),"[24, 27]","{'A234': [(24, 27)]}",{'A234': 1.0},A234,,"    @Override
    public void sessionDestroyed(HttpSessionEvent se) {
        sessionPersistentRegistry.expireSession(se.getSession().getId());
    }
"
stirling.software.proprietary.security.session,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionScheduled.java,SessionScheduled,expireSessions,void expireSessions(),"[20, 36]","{'A234': [(20, 36)]}",{'A234': 1.0},A234,,"    @Scheduled(cron = ""0 0/5 * * * ?"")
    public void expireSessions() {
        Instant now = Instant.now();
        for (Object principal : sessionPersistentRegistry.getAllPrincipals()) {
            List<SessionInformation> sessionInformations =
                    sessionPersistentRegistry.getAllSessions(principal, false);
            for (SessionInformation sessionInformation : sessionInformations) {
                Date lastRequest = sessionInformation.getLastRequest();
                int maxInactiveInterval = sessionPersistentRegistry.getMaxInactiveInterval();
                Instant expirationTime =
                        lastRequest.toInstant().plus(maxInactiveInterval, ChronoUnit.SECONDS);
                if (now.isAfter(expirationTime)) {
                    sessionPersistentRegistry.expireSession(sessionInformation.getSessionId());
                }
            }
        }
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java,InitialSecuritySetup,init,void init(),"[34, 53]","{'A236': [(35, 38), (44, 45), (48, 51)], 'A233': [(34, 34), (46, 47)], 'A234': [(39, 43)], 'A238': [(52, 53)]}","{'A236': 0.5, 'A233': 0.15, 'A234': 0.25, 'A238': 0.1}",A236,,"    @PostConstruct
    public void init() {
        try {

            if (!userService.hasUsers()) {
                if (databaseService.hasBackup()) {
                    databaseService.importDatabase();
                } else {
                    initializeAdminUser();
                }
            }

            userService.migrateOauth2ToSSO();
            assignUsersToDefaultTeamIfMissing();
            initializeInternalApiUser();
        } catch (IllegalArgumentException | SQLException | UnsupportedProviderException e) {
            log.error(""Failed to initialize security setup."", e);
            System.exit(1);
        }
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java,InitialSecuritySetup,assignUsersToDefaultTeamIfMissing,void assignUsersToDefaultTeamIfMissing(),"[55, 74]","{'A233': [(55, 56), (58, 60), (66, 68), (73, 74)], 'A234': [(57, 57), (61, 65), (69, 72)]}","{'A233': 0.5, 'A234': 0.5}",A233,,"    private void assignUsersToDefaultTeamIfMissing() {
        Team defaultTeam = teamService.getOrCreateDefaultTeam();
        Team internalTeam = teamService.getOrCreateInternalTeam();
        List<User> usersWithoutTeam = userService.getUsersWithoutTeam();

        for (User user : usersWithoutTeam) {
            if (user.getUsername().equalsIgnoreCase(Role.INTERNAL_API_USER.getRoleId())) {
                user.setTeam(internalTeam);
            } else {
                user.setTeam(defaultTeam);
            }
        }

        userService.saveAll(usersWithoutTeam); // batch save
        if (usersWithoutTeam != null && !usersWithoutTeam.isEmpty()) {
            log.info(
                    ""Assigned {} user(s) without a team to the default team."",
                    usersWithoutTeam.size());
        }
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java,InitialSecuritySetup,initializeAdminUser,void initializeAdminUser(),"[76, 94]","{'A236': [(76, 76), (85, 86), (90, 90)], 'A233': [(87, 89), (93, 93)], 'A238': [(77, 84), (91, 92), (94, 94)]}","{'A236': 0.21052631578947367, 'A233': 0.21052631578947367, 'A238': 0.5789473684210527}",A238,,"    private void initializeAdminUser() throws SQLException, UnsupportedProviderException {
        String initialUsername =
                applicationProperties.getSecurity().getInitialLogin().getUsername();
        String initialPassword =
                applicationProperties.getSecurity().getInitialLogin().getPassword();
        if (initialUsername != null
                && !initialUsername.isEmpty()
                && initialPassword != null
                && !initialPassword.isEmpty()
                && userService.findByUsernameIgnoreCase(initialUsername).isEmpty()) {

            Team team = teamService.getOrCreateDefaultTeam();
            userService.saveUser(
                    initialUsername, initialPassword, team, Role.ADMIN.getRoleId(), false);
            log.info(""Admin user created: {}"", initialUsername);
        } else {
            createDefaultAdminUser();
        }
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java,InitialSecuritySetup,createDefaultAdminUser,void createDefaultAdminUser(),"[96, 106]","{'A236': [(96, 96), (99, 100), (104, 104)], 'A233': [(101, 103)], 'A238': [(97, 98), (105, 106)]}","{'A236': 0.36363636363636365, 'A233': 0.2727272727272727, 'A238': 0.36363636363636365}",A236,,"    private void createDefaultAdminUser() throws SQLException, UnsupportedProviderException {
        String defaultUsername = ""admin"";
        String defaultPassword = ""stirling"";

        if (userService.findByUsernameIgnoreCase(defaultUsername).isEmpty()) {
            Team team = teamService.getOrCreateDefaultTeam();
            userService.saveUser(
                    defaultUsername, defaultPassword, team, Role.ADMIN.getRoleId(), true);
            log.info(""Default admin user created: {}"", defaultUsername);
        }
    }
"
stirling.software.proprietary.security,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java,InitialSecuritySetup,initializeInternalApiUser,void initializeInternalApiUser(),"[108, 136]","{'A236': [(108, 109), (119, 119)], 'A233': [(111, 118), (134, 136)], 'A234': [(110, 110), (120, 133)]}","{'A236': 0.10344827586206896, 'A233': 0.3793103448275862, 'A234': 0.5172413793103449}",A234,,"    private void initializeInternalApiUser()
            throws IllegalArgumentException, SQLException, UnsupportedProviderException {
        if (!userService.usernameExistsIgnoreCase(Role.INTERNAL_API_USER.getRoleId())) {
            Team team = teamService.getOrCreateInternalTeam();
            userService.saveUser(
                    Role.INTERNAL_API_USER.getRoleId(),
                    UUID.randomUUID().toString(),
                    team,
                    Role.INTERNAL_API_USER.getRoleId(),
                    false);
            userService.addApiKeyToUser(Role.INTERNAL_API_USER.getRoleId());
            log.info(""Internal API user created: {}"", Role.INTERNAL_API_USER.getRoleId());
        } else {
            Optional<User> internalApiUserOpt =
                    userService.findByUsernameIgnoreCase(Role.INTERNAL_API_USER.getRoleId());
            if (internalApiUserOpt.isPresent()) {
                User internalApiUser = internalApiUserOpt.get();
                // move to team internal API user
                if (!internalApiUser.getTeam().getName().equals(TeamService.INTERNAL_TEAM_NAME)) {
                    log.info(
                            ""Moving internal API user to team: {}"", TeamService.INTERNAL_TEAM_NAME);
                    Team internalTeam = teamService.getOrCreateInternalTeam();

                    userService.changeUserTeam(internalApiUser, internalTeam);
                }
            }
        }
        userService.syncCustomApiUser(applicationProperties.getSecurity().getCustomGlobalAPIKey());
    }
"
stirling.software.proprietary.util,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/util/SecretMasker.java,SecretMasker,mask,"Map<String, Object> mask(Map<String, Object>)","[20, 28]","{'A233': [(21, 23), (28, 28)], 'A234': [(20, 20), (24, 27)]}","{'A233': 0.4444444444444444, 'A234': 0.5555555555555556}",A234,,"    public static Map<String, Object> mask(Map<String, Object> in) {
        if (in == null) return null;

        return in.entrySet().stream()
                .filter(e -> e.getValue() != null)
                .collect(
                        Collectors.toMap(
                                Map.Entry::getKey, e -> deepMaskValue(e.getKey(), e.getValue())));
    }
"
stirling.software.proprietary.util,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/util/SecretMasker.java,SecretMasker,deepMask,Object deepMask(Object),"[30, 43]","{'A233': [(30, 30), (32, 32), (38, 38), (40, 43)], 'A234': [(31, 31), (33, 37), (39, 39)]}","{'A233': 0.5, 'A234': 0.5}",A233,,"    private static Object deepMask(Object value) {
        if (value instanceof Map<?, ?> m) {
            return m.entrySet().stream()
                    .filter(e -> e.getValue() != null)
                    .collect(
                            Collectors.toMap(
                                    Map.Entry::getKey,
                                    e -> deepMaskValue((String) e.getKey(), e.getValue())));
        } else if (value instanceof List<?> list) {
            return list.stream().map(SecretMasker::deepMask).toList();
        } else {
            return value;
        }
    }
"
stirling.software.proprietary.util,../projects/Stirling-PDF/app/proprietary/src/main/java/stirling/software/proprietary/util/SecretMasker.java,SecretMasker,deepMaskValue,"Object deepMaskValue(String,Object)","[45, 50]","{'A233': [(45, 50)]}",{'A233': 1.0},A233,,"    private static Object deepMaskValue(String key, Object value) {
        if (key != null && SENSITIVE.matcher(key).find()) {
            return ""***REDACTED***"";
        }
        return deepMask(value);
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/common/src/main/java/org/apache/pdfbox/examples/util/DeletingRandomAccessFile.java,DeletingRandomAccessFile,close,void close(),"[22, 38]","{'A233': [(22, 38)]}",{'A233': 1.0},A233,,"    @Override
    public void close() throws IOException {
        try {
            super.close();
        } finally {
            try {
                boolean deleted = Files.deleteIfExists(tempFilePath);
                if (deleted) {
                    log.info(""Successfully deleted temp file: {}"", tempFilePath);
                } else {
                    log.warn(""Failed to delete temp file (may not exist): {}"", tempFilePath);
                }
            } catch (IOException e) {
                log.error(""Error deleting temp file: {}"", tempFilePath, e);
            }
        }
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/ConfigInitializer.java,ConfigInitializer,ensureConfigExists,void ensureConfigExists(),"[26, 83]","{'A236': [(81, 81)], 'A233': [(26, 43), (47, 47), (49, 49), (58, 58), (61, 63), (68, 71), (73, 73), (75, 75), (77, 78), (82, 82)], 'A234': [(44, 46), (48, 48), (50, 57), (59, 60), (64, 67), (72, 72), (74, 74), (76, 76), (79, 80)], 'A238': [(83, 83)]}","{'A236': 0.017241379310344827, 'A233': 0.5689655172413793, 'A234': 0.39655172413793105, 'A238': 0.017241379310344827}",A233,,"    public void ensureConfigExists() throws IOException, URISyntaxException {
        // 1) If settings file doesn't exist, create from template
        Path destPath = Paths.get(InstallationPathConfig.getSettingsPath());
        if (Files.notExists(destPath)) {
            Files.createDirectories(destPath.getParent());
            try (InputStream in =
                    getClass().getClassLoader().getResourceAsStream(""settings.yml.template"")) {
                if (in == null) {
                    throw new FileNotFoundException(
                            ""Resource file not found: settings.yml.template"");
                }
                Files.copy(in, destPath);
            }
            log.info(""Created settings file from template"");
        } else {
            // 2) Merge existing file with the template
            URL templateResource = getClass().getClassLoader().getResource(""settings.yml.template"");
            if (templateResource == null) {
                throw new IOException(""Resource not found: settings.yml.template"");
            }

            // Copy template to a temp location so we can read lines
            Path tempTemplatePath = Files.createTempFile(""settings.yml"", "".template"");
            try (InputStream in = templateResource.openStream()) {
                Files.copy(in, tempTemplatePath, StandardCopyOption.REPLACE_EXISTING);
            }

            // Copy setting.yaml to a temp location so we can read lines
            Path settingTempPath = Files.createTempFile(""settings"", "".yaml"");
            try (InputStream in = Files.newInputStream(destPath)) {
                Files.copy(in, settingTempPath, StandardCopyOption.REPLACE_EXISTING);
            }

            YamlHelper settingsTemplateFile = new YamlHelper(tempTemplatePath);
            YamlHelper settingsFile = new YamlHelper(settingTempPath);

            migrateEnterpriseEditionToPremium(settingsFile, settingsTemplateFile);

            boolean changesMade =
                    settingsTemplateFile.updateValuesFromYaml(settingsFile, settingsTemplateFile);
            if (changesMade) {
                settingsTemplateFile.save(destPath);
                log.info(""Settings file updated based on template changes."");
            } else {
                log.info(""No changes detected; settings file left as-is."");
            }

            Files.deleteIfExists(tempTemplatePath);
            Files.deleteIfExists(settingTempPath);
        }

        // 3) Ensure custom settings file exists
        Path customSettingsPath = Paths.get(InstallationPathConfig.getCustomSettingsPath());
        if (Files.notExists(customSettingsPath)) {
            Files.createFile(customSettingsPath);
            log.info(""Created custom_settings file: {}"", customSettingsPath);
        }
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/ConfigInitializer.java,ConfigInitializer,migrateEnterpriseEditionToPremium,"void migrateEnterpriseEditionToPremium(YamlHelper,YamlHelper)","[86, 125]","{'A233': [(86, 125)]}",{'A233': 1.0},A233,,"    private void migrateEnterpriseEditionToPremium(YamlHelper yaml, YamlHelper template) {
        if (yaml.getValueByExactKeyPath(""enterpriseEdition"", ""enabled"") != null) {
            template.updateValue(
                    List.of(""premium"", ""enabled""),
                    yaml.getValueByExactKeyPath(""enterpriseEdition"", ""enabled""));
        }
        if (yaml.getValueByExactKeyPath(""enterpriseEdition"", ""key"") != null) {
            template.updateValue(
                    List.of(""premium"", ""key""),
                    yaml.getValueByExactKeyPath(""enterpriseEdition"", ""key""));
        }
        if (yaml.getValueByExactKeyPath(""enterpriseEdition"", ""SSOAutoLogin"") != null) {
            template.updateValue(
                    List.of(""premium"", ""proFeatures"", ""SSOAutoLogin""),
                    yaml.getValueByExactKeyPath(""enterpriseEdition"", ""SSOAutoLogin""));
        }
        if (yaml.getValueByExactKeyPath(""enterpriseEdition"", ""CustomMetadata"", ""autoUpdateMetadata"")
                != null) {
            template.updateValue(
                    List.of(""premium"", ""proFeatures"", ""CustomMetadata"", ""autoUpdateMetadata""),
                    yaml.getValueByExactKeyPath(
                            ""enterpriseEdition"", ""CustomMetadata"", ""autoUpdateMetadata""));
        }
        if (yaml.getValueByExactKeyPath(""enterpriseEdition"", ""CustomMetadata"", ""author"") != null) {
            template.updateValue(
                    List.of(""premium"", ""proFeatures"", ""CustomMetadata"", ""author""),
                    yaml.getValueByExactKeyPath(""enterpriseEdition"", ""CustomMetadata"", ""author""));
        }
        if (yaml.getValueByExactKeyPath(""enterpriseEdition"", ""CustomMetadata"", ""creator"") != null) {
            template.updateValue(
                    List.of(""premium"", ""proFeatures"", ""CustomMetadata"", ""creator""),
                    yaml.getValueByExactKeyPath(""enterpriseEdition"", ""CustomMetadata"", ""creator""));
        }
        if (yaml.getValueByExactKeyPath(""enterpriseEdition"", ""CustomMetadata"", ""producer"")
                != null) {
            template.updateValue(
                    List.of(""premium"", ""proFeatures"", ""CustomMetadata"", ""producer""),
                    yaml.getValueByExactKeyPath(""enterpriseEdition"", ""CustomMetadata"", ""producer""));
        }
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,initializeBasePath,String initializeBasePath(),"[48, 72]","{'A233': [(48, 51), (56, 56), (63, 63), (69, 70), (72, 72)], 'A234': [(52, 55), (57, 62), (64, 68), (71, 71)]}","{'A233': 0.36, 'A234': 0.64}",A234,,"    private static String initializeBasePath() {
        if (Boolean.parseBoolean(System.getProperty(""STIRLING_PDF_DESKTOP_UI"", ""false""))) {
            String os = System.getProperty(""os.name"").toLowerCase();
            if (os.contains(""win"")) {
                return Paths.get(
                                System.getenv(""APPDATA""), // parent path
                                ""Stirling-PDF"")
                        + File.separator;
            } else if (os.contains(""mac"")) {
                return Paths.get(
                                System.getProperty(""user.home""),
                                ""Library"",
                                ""Application Support"",
                                ""Stirling-PDF"")
                        + File.separator;
            } else {
                return Paths.get(
                                System.getProperty(""user.home""), // parent path
                                "".config"",
                                ""Stirling-PDF"")
                        + File.separator;
            }
        }
        return ""."" + File.separator;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getPath,String getPath(),"[74, 76]","{'A233': [(74, 76)]}",{'A233': 1.0},A233,,"    public static String getPath() {
        return BASE_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getLogPath,String getLogPath(),"[78, 80]","{'A233': [(78, 80)]}",{'A233': 1.0},A233,,"    public static String getLogPath() {
        return LOG_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getConfigPath,String getConfigPath(),"[82, 84]","{'A233': [(82, 84)]}",{'A233': 1.0},A233,,"    public static String getConfigPath() {
        return CONFIG_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getCustomFilesPath,String getCustomFilesPath(),"[86, 88]","{'A233': [(86, 88)]}",{'A233': 1.0},A233,,"    public static String getCustomFilesPath() {
        return CUSTOM_FILES_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getClientWebUIPath,String getClientWebUIPath(),"[90, 92]","{'A233': [(90, 92)]}",{'A233': 1.0},A233,,"    public static String getClientWebUIPath() {
        return CLIENT_WEBUI_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getScriptsPath,String getScriptsPath(),"[94, 96]","{'A234': [(94, 96)]}",{'A234': 1.0},A234,,"    public static String getScriptsPath() {
        return SCRIPTS_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getSettingsPath,String getSettingsPath(),"[98, 100]","{'A233': [(98, 100)]}",{'A233': 1.0},A233,,"    public static String getSettingsPath() {
        return SETTINGS_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getCustomSettingsPath,String getCustomSettingsPath(),"[102, 104]","{'A233': [(102, 104)]}",{'A233': 1.0},A233,,"    public static String getCustomSettingsPath() {
        return CUSTOM_SETTINGS_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getStaticPath,String getStaticPath(),"[106, 108]","{'A233': [(106, 108)]}",{'A233': 1.0},A233,,"    public static String getStaticPath() {
        return STATIC_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getTemplatesPath,String getTemplatesPath(),"[110, 112]","{'A233': [(110, 112)]}",{'A233': 1.0},A233,,"    public static String getTemplatesPath() {
        return TEMPLATES_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java,InstallationPathConfig,getSignaturesPath,String getSignaturesPath(),"[114, 116]","{'A233': [(114, 116)]}",{'A233': 1.0},A233,,"    public static String getSignaturesPath() {
        return SIGNATURES_PATH;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/YamlPropertySourceFactory.java,YamlPropertySourceFactory,createPropertySource,"PropertySource<?> createPropertySource(String,EncodedResource)","[13, 21]","{'A236': [(14, 14)], 'A233': [(13, 13), (15, 21)]}","{'A236': 0.1111111111111111, 'A233': 0.8888888888888888}",A233,,"    @Override
    public PropertySource<?> createPropertySource(String name, EncodedResource encodedResource) {
        YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean();
        factory.setResources(encodedResource.getResource());
        Properties properties = factory.getObject();

        return new PropertiesPropertySource(
                encodedResource.getResource().getFilename(), properties);
    }
"
stirling.software.common.configuration.interfaces,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/interfaces/ShowAdminInterface.java,,getShowUpdateOnlyAdmins,boolean getShowUpdateOnlyAdmins(),"[4, 6]","{'A236': [(4, 6)]}",{'A236': 1.0},A236,,"    default boolean getShowUpdateOnlyAdmins() {
        return true;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/PostHogLoggerImpl.java,PostHogLoggerImpl,debug,void debug(String),"[13, 16]","{'A233': [(13, 16)]}",{'A233': 1.0},A233,,"    @Override
    public void debug(String message) {
        log.debug(message);
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/PostHogLoggerImpl.java,PostHogLoggerImpl,info,void info(String),"[18, 21]","{'A233': [(18, 21)]}",{'A233': 1.0},A233,,"    @Override
    public void info(String message) {
        log.info(message);
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/PostHogLoggerImpl.java,PostHogLoggerImpl,warn,void warn(String),"[23, 26]","{'A233': [(23, 26)]}",{'A233': 1.0},A233,,"    @Override
    public void warn(String message) {
        log.warn(message);
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/PostHogLoggerImpl.java,PostHogLoggerImpl,error,void error(String),"[28, 31]","{'A233': [(28, 31)]}",{'A233': 1.0},A233,,"    @Override
    public void error(String message) {
        log.error(message);
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/PostHogLoggerImpl.java,PostHogLoggerImpl,error,"void error(String,Throwable)","[33, 41]","{'A233': [(33, 41)]}",{'A233': 1.0},A233,,"    @Override
    public void error(String message, Throwable throwable) {
        if (message.contains(""Error sending events to PostHog"")) {
            log.warn(
                    ""Error sending metrics, Likely caused by no internet connection. Non Blocking"");
        } else {
            log.error(message, throwable);
        }
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,templateEngine,SpringTemplateEngine templateEngine(ResourceLoader),"[54, 60]","{'A236': [(55, 55)], 'A233': [(54, 54), (56, 60)]}","{'A236': 0.14285714285714285, 'A233': 0.8571428571428571}",A233,,"    @Bean
    @ConditionalOnProperty(name = ""system.customHTMLFiles"", havingValue = ""true"")
    public SpringTemplateEngine templateEngine(ResourceLoader resourceLoader) {
        SpringTemplateEngine templateEngine = new SpringTemplateEngine();
        templateEngine.addTemplateResolver(new FileFallbackTemplateResolver(resourceLoader));
        return templateEngine;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,loginEnabled,boolean loginEnabled(),"[62, 65]","{'A233': [(62, 65)]}",{'A233': 1.0},A233,,"    @Bean(name = ""loginEnabled"")
    public boolean loginEnabled() {
        return applicationProperties.getSecurity().getEnableLogin();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,appName,String appName(),"[67, 71]","{'A233': [(67, 71)]}",{'A233': 1.0},A233,,"    @Bean(name = ""appName"")
    public String appName() {
        String homeTitle = applicationProperties.getUi().getAppName();
        return (homeTitle != null) ? homeTitle : ""Stirling PDF"";
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,appVersion,String appVersion(),"[73, 84]","{'A233': [(73, 74), (84, 84)], 'A246': [(75, 80), (82, 83)], 'A238': [(81, 81)]}","{'A233': 0.25, 'A246': 0.6666666666666666, 'A238': 0.08333333333333333}",A246,,"    @Bean(name = ""appVersion"")
    public String appVersion() {
        Resource resource = new ClassPathResource(""version.properties"");
        Properties props = new Properties();
        try {
            props.load(resource.getInputStream());
            return props.getProperty(""version"");
        } catch (IOException e) {
            log.error(""exception"", e);
        }
        return ""0.0.0"";
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,homeText,String homeText(),"[86, 91]","{'A233': [(86, 91)]}",{'A233': 1.0},A233,,"    @Bean(name = ""homeText"")
    public String homeText() {
        return (applicationProperties.getUi().getHomeDescription() != null)
                ? applicationProperties.getUi().getHomeDescription()
                : ""null"";
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,languages,List<String> languages(),"[93, 96]","{'A234': [(93, 96)]}",{'A234': 1.0},A234,,"    @Bean(name = ""languages"")
    public List<String> languages() {
        return applicationProperties.getUi().getLanguages();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,contextPath,String contextPath(String),"[98, 101]","{'A234': [(98, 101)]}",{'A234': 1.0},A234,,"    @Bean
    public String contextPath(@Value(""${server.servlet.context-path}"") String contextPath) {
        return contextPath;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,navBarText,String navBarText(),"[103, 110]","{'A233': [(103, 110)]}",{'A233': 1.0},A233,,"    @Bean(name = ""navBarText"")
    public String navBarText() {
        String defaultNavBar =
                applicationProperties.getUi().getAppNameNavbar() != null
                        ? applicationProperties.getUi().getAppNameNavbar()
                        : applicationProperties.getUi().getAppName();
        return (defaultNavBar != null) ? defaultNavBar : ""Stirling PDF"";
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,enableAlphaFunctionality,boolean enableAlphaFunctionality(),"[112, 117]","{'A233': [(112, 117)]}",{'A233': 1.0},A233,,"    @Bean(name = ""enableAlphaFunctionality"")
    public boolean enableAlphaFunctionality() {
        return applicationProperties.getSystem().getEnableAlphaFunctionality() != null
                ? applicationProperties.getSystem().getEnableAlphaFunctionality()
                : false;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,rateLimit,boolean rateLimit(),"[119, 124]","{'A233': [(119, 120), (124, 124)], 'A234': [(121, 123)]}","{'A233': 0.5, 'A234': 0.5}",A233,,"    @Bean(name = ""rateLimit"")
    public boolean rateLimit() {
        String rateLimit = System.getProperty(""rateLimit"");
        if (rateLimit == null) rateLimit = System.getenv(""rateLimit"");
        return (rateLimit != null) ? Boolean.valueOf(rateLimit) : false;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,runningInDocker,boolean runningInDocker(),"[126, 129]","{'A233': [(126, 129)]}",{'A233': 1.0},A233,,"    @Bean(name = ""RunningInDocker"")
    public boolean runningInDocker() {
        return Files.exists(Paths.get(""/.dockerenv""));
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,isRunningInDockerWithConfig,boolean isRunningInDockerWithConfig(),"[131, 148]","{'A233': [(131, 148)]}",{'A233': 1.0},A233,,"    @Bean(name = ""configDirMounted"")
    public boolean isRunningInDockerWithConfig() {
        Path dockerEnv = Paths.get(""/.dockerenv"");
        // default to true if not docker
        if (!Files.exists(dockerEnv)) {
            return true;
        }
        Path mountInfo = Paths.get(""/proc/1/mountinfo"");
        // this should always exist, if not some unknown usecase
        if (!Files.exists(mountInfo)) {
            return true;
        }
        try {
            return Files.lines(mountInfo).anyMatch(line -> line.contains("" /configs ""));
        } catch (IOException e) {
            return false;
        }
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,missingActiveSecurity,boolean missingActiveSecurity(),"[150, 155]","{'A236': [(150, 152)], 'A233': [(153, 154)], 'A234': [(155, 155)]}","{'A236': 0.5, 'A233': 0.3333333333333333, 'A234': 0.16666666666666666}",A236,,"    @Bean(name = ""activeSecurity"")
    public boolean missingActiveSecurity() {
        return ClassUtils.isPresent(
                ""stirling.software.proprietary.security.configuration.SecurityConfiguration"",
                this.getClass().getClassLoader());
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,processOnlyFiles,Predicate<Path> processOnlyFiles(),"[157, 166]","{'A233': [(158, 158), (161, 161), (163, 163)], 'A247': [(157, 157), (159, 160), (162, 162), (164, 166)]}","{'A233': 0.3, 'A247': 0.7}",A247,,"    @Bean(name = ""directoryFilter"")
    public Predicate<Path> processOnlyFiles() {
        return path -> {
            if (Files.isDirectory(path)) {
                return !path.toString().contains(""processing"");
            } else {
                return true;
            }
        };
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,termsAndConditions,String termsAndConditions(),"[168, 171]","{'A233': [(168, 171)]}",{'A233': 1.0},A233,,"    @Bean(name = ""termsAndConditions"")
    public String termsAndConditions() {
        return applicationProperties.getLegal().getTermsAndConditions();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,privacyPolicy,String privacyPolicy(),"[173, 176]","{'A233': [(173, 176)]}",{'A233': 1.0},A233,,"    @Bean(name = ""privacyPolicy"")
    public String privacyPolicy() {
        return applicationProperties.getLegal().getPrivacyPolicy();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,cookiePolicy,String cookiePolicy(),"[178, 181]","{'A233': [(178, 181)]}",{'A233': 1.0},A233,,"    @Bean(name = ""cookiePolicy"")
    public String cookiePolicy() {
        return applicationProperties.getLegal().getCookiePolicy();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,impressum,String impressum(),"[183, 186]","{'A233': [(183, 186)]}",{'A233': 1.0},A233,,"    @Bean(name = ""impressum"")
    public String impressum() {
        return applicationProperties.getLegal().getImpressum();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,accessibilityStatement,String accessibilityStatement(),"[188, 191]","{'A233': [(188, 191)]}",{'A233': 1.0},A233,,"    @Bean(name = ""accessibilityStatement"")
    public String accessibilityStatement() {
        return applicationProperties.getLegal().getAccessibilityStatement();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,analyticsPrompt,boolean analyticsPrompt(),"[193, 197]","{'A233': [(193, 195), (197, 197)], 'A234': [(196, 196)]}","{'A233': 0.8, 'A234': 0.2}",A233,,"    @Bean(name = ""analyticsPrompt"")
    @Scope(""request"")
    public boolean analyticsPrompt() {
        return applicationProperties.getSystem().getEnableAnalytics() == null;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,analyticsEnabled,boolean analyticsEnabled(),"[199, 204]","{'A233': [(199, 202), (204, 204)], 'A234': [(203, 203)]}","{'A233': 0.8333333333333334, 'A234': 0.16666666666666666}",A233,,"    @Bean(name = ""analyticsEnabled"")
    @Scope(""request"")
    public boolean analyticsEnabled() {
        if (applicationProperties.getPremium().isEnabled()) return true;
        return applicationProperties.getSystem().isAnalyticsEnabled();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,stirlingPDFLabel,String stirlingPDFLabel(),"[206, 209]","{'A233': [(206, 209)]}",{'A233': 1.0},A233,,"    @Bean(name = ""StirlingPDFLabel"")
    public String stirlingPDFLabel() {
        return ""Stirling-PDF"" + "" v"" + appVersion();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,uuid,String uuid(),"[211, 214]","{'A233': [(211, 214)]}",{'A233': 1.0},A233,,"    @Bean(name = ""UUID"")
    public String uuid() {
        return applicationProperties.getAutomaticallyGenerated().getUUID();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,security,ApplicationProperties.Security security(),"[216, 219]","{'A236': [(216, 219)]}",{'A236': 1.0},A236,,"    @Bean
    public ApplicationProperties.Security security() {
        return applicationProperties.getSecurity();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,oAuth2,ApplicationProperties.Security.OAUTH2 oAuth2(),"[221, 224]","{'A236': [(221, 224)]}",{'A236': 1.0},A236,,"    @Bean
    public ApplicationProperties.Security.OAUTH2 oAuth2() {
        return applicationProperties.getSecurity().getOauth2();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,premium,ApplicationProperties.Premium premium(),"[226, 229]","{'A236': [(226, 229)]}",{'A236': 1.0},A236,,"    @Bean
    public ApplicationProperties.Premium premium() {
        return applicationProperties.getPremium();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,system,ApplicationProperties.System system(),"[231, 234]","{'A236': [(231, 234)]}",{'A236': 1.0},A236,,"    @Bean
    public ApplicationProperties.System system() {
        return applicationProperties.getSystem();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,datasource,ApplicationProperties.Datasource datasource(),"[236, 239]","{'A236': [(236, 239)]}",{'A236': 1.0},A236,,"    @Bean
    public ApplicationProperties.Datasource datasource() {
        return applicationProperties.getSystem().getDatasource();
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,runningProOrHigher,boolean runningProOrHigher(),"[241, 245]","{'A233': [(241, 243), (245, 245)], 'A234': [(244, 244)]}","{'A233': 0.8, 'A234': 0.2}",A233,,"    @Bean(name = ""runningProOrHigher"")
    @Profile(""default"")
    public boolean runningProOrHigher() {
        return false;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,runningEnterprise,boolean runningEnterprise(),"[247, 251]","{'A233': [(247, 249), (251, 251)], 'A234': [(250, 250)]}","{'A233': 0.8, 'A234': 0.2}",A233,,"    @Bean(name = ""runningEE"")
    @Profile(""default"")
    public boolean runningEnterprise() {
        return false;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,googleDriveEnabled,boolean googleDriveEnabled(),"[253, 257]","{'A233': [(253, 257)]}",{'A233': 1.0},A233,,"    @Bean(name = ""GoogleDriveEnabled"")
    @Profile(""default"")
    public boolean googleDriveEnabled() {
        return false;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,licenseType,String licenseType(),"[259, 263]","{'A233': [(259, 263)]}",{'A233': 1.0},A233,,"    @Bean(name = ""license"")
    @Profile(""default"")
    public String licenseType() {
        return ""NORMAL"";
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,disablePixel,boolean disablePixel(),"[265, 268]","{'A233': [(265, 266), (268, 268)], 'A234': [(267, 267)]}","{'A233': 0.75, 'A234': 0.25}",A233,,"    @Bean(name = ""disablePixel"")
    public boolean disablePixel() {
        return Boolean.parseBoolean(env.getProperty(""DISABLE_PIXEL"", ""false""));
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/AppConfig.java,AppConfig,determineMachineType,String determineMachineType(),"[270, 296]","{'A233': [(270, 296)]}",{'A233': 1.0},A233,,"    @Bean(name = ""machineType"")
    public String determineMachineType() {
        try {
            boolean isDocker = runningInDocker();
            boolean isKubernetes = System.getenv(""KUBERNETES_SERVICE_HOST"") != null;
            boolean isBrowserOpen = ""true"".equalsIgnoreCase(env.getProperty(""BROWSER_OPEN""));

            if (isKubernetes) {
                return ""Kubernetes"";
            } else if (isDocker) {
                return ""Docker"";
            } else if (isBrowserOpen) {
                String os = System.getProperty(""os.name"").toLowerCase(Locale.ROOT);
                if (os.contains(""win"")) {
                    return ""Client-windows"";
                } else if (os.contains(""mac"")) {
                    return ""Client-mac"";
                } else {
                    return ""Client-unix"";
                }
            } else {
                return ""Server-jar"";
            }
        } catch (Exception e) {
            return ""Unknown"";
        }
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/PostHogConfig.java,PostHogConfig,postHogClient,PostHog postHogClient(),"[25, 33]","{'A233': [(25, 33)]}",{'A233': 1.0},A233,,"    @Bean
    public PostHog postHogClient() {
        postHogClient =
                new PostHog.Builder(posthogApiKey)
                        .host(posthogHost)
                        .logger(new PostHogLoggerImpl())
                        .build();
        return postHogClient;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/PostHogConfig.java,PostHogConfig,shutdownPostHog,void shutdownPostHog(),"[35, 40]","{'A233': [(35, 40)]}",{'A233': 1.0},A233,,"    @PreDestroy
    public void shutdownPostHog() {
        if (postHogClient != null) {
            postHogClient.shutdown();
        }
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/FileFallbackTemplateResolver.java,FileFallbackTemplateResolver,computeTemplateResource,"ITemplateResource computeTemplateResource(IEngineConfiguration,String,String,String,String,Map<String, Object>)","[30, 58]","{'A233': [(30, 58)]}",{'A233': 1.0},A233,,"    @Override
    protected ITemplateResource computeTemplateResource(
            IEngineConfiguration configuration,
            String ownerTemplate,
            String template,
            String resourceName,
            String characterEncoding,
            Map<String, Object> templateResolutionAttributes) {
        Resource resource =
                resourceLoader.getResource(
                        ""file:"" + InstallationPathConfig.getTemplatesPath() + resourceName);
        try {
            if (resource.exists() && resource.isReadable()) {
                return new FileTemplateResource(resource.getFile().getPath(), characterEncoding);
            }
        } catch (IOException e) {
            // Log the exception to help with debugging issues loading external templates
            log.warn(""Unable to read template '{}' from file system"", resourceName, e);
        }

        InputStream inputStream =
                Thread.currentThread()
                        .getContextClassLoader()
                        .getResourceAsStream(""templates/"" + resourceName);
        if (inputStream != null) {
            return new InputStreamTemplateResource(inputStream, ""UTF-8"");
        }
        return null;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/RuntimePathConfig.java,RuntimePathConfig,resolvePath,"String resolvePath(String,String)","[72, 74]","{'A233': [(74, 74)], 'A234': [(72, 73)]}","{'A233': 0.3333333333333333, 'A234': 0.6666666666666666}",A234,,"    private String resolvePath(String defaultPath, String customPath) {
        return StringUtils.isNotBlank(customPath) ? customPath : defaultPath;
    }
"
stirling.software.common.configuration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/configuration/RuntimePathConfig.java,RuntimePathConfig,isRunningInDocker,boolean isRunningInDocker(),"[76, 78]","{'A233': [(76, 76), (78, 78)], 'A234': [(77, 77)]}","{'A233': 0.6666666666666666, 'A234': 0.3333333333333333}",A233,,"    private boolean isRunningInDocker() {
        return Files.exists(Path.of(""/.dockerenv""));
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PdfMetadataService.java,PdfMetadataService,extractMetadataFromPdf,PdfMetadata extractMetadataFromPdf(PDDocument),"[32, 43]","{'A233': [(32, 43)]}",{'A233': 1.0},A233,,"    public PdfMetadata extractMetadataFromPdf(PDDocument pdf) {
        return PdfMetadata.builder()
                .author(pdf.getDocumentInformation().getAuthor())
                .producer(pdf.getDocumentInformation().getProducer())
                .title(pdf.getDocumentInformation().getTitle())
                .creator(pdf.getDocumentInformation().getCreator())
                .subject(pdf.getDocumentInformation().getSubject())
                .keywords(pdf.getDocumentInformation().getKeywords())
                .creationDate(pdf.getDocumentInformation().getCreationDate())
                .modificationDate(pdf.getDocumentInformation().getModificationDate())
                .build();
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PdfMetadataService.java,PdfMetadataService,setDefaultMetadata,void setDefaultMetadata(PDDocument),"[45, 48]","{'A233': [(45, 48)]}",{'A233': 1.0},A233,,"    public void setDefaultMetadata(PDDocument pdf) {
        PdfMetadata metadata = extractMetadataFromPdf(pdf);
        setMetadataToPdf(pdf, metadata);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PdfMetadataService.java,PdfMetadataService,setMetadataToPdf,"void setMetadataToPdf(PDDocument,PdfMetadata)","[50, 52]","{'A233': [(50, 52)]}",{'A233': 1.0},A233,,"    public void setMetadataToPdf(PDDocument pdf, PdfMetadata pdfMetadata) {
        setMetadataToPdf(pdf, pdfMetadata, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PdfMetadataService.java,PdfMetadataService,setMetadataToPdf,"void setMetadataToPdf(PDDocument,PdfMetadata,boolean)","[54, 59]","{'A233': [(54, 59)]}",{'A233': 1.0},A233,,"    public void setMetadataToPdf(PDDocument pdf, PdfMetadata pdfMetadata, boolean newlyCreated) {
        if (newlyCreated || pdfMetadata.getCreationDate() == null) {
            setNewDocumentMetadata(pdf, pdfMetadata);
        }
        setCommonMetadata(pdf, pdfMetadata);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PdfMetadataService.java,PdfMetadataService,setNewDocumentMetadata,"void setNewDocumentMetadata(PDDocument,PdfMetadata)","[61, 83]","{'A233': [(61, 83)]}",{'A233': 1.0},A233,,"    private void setNewDocumentMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {

        String creator = stirlingPDFLabel;

        if (applicationProperties
                        .getPremium()
                        .getProFeatures()
                        .getCustomMetadata()
                        .isAutoUpdateMetadata()
                && runningProOrHigher) {

            creator =
                    applicationProperties
                            .getPremium()
                            .getProFeatures()
                            .getCustomMetadata()
                            .getCreator();
            pdf.getDocumentInformation().setProducer(stirlingPDFLabel);
        }

        pdf.getDocumentInformation().setCreator(creator);
        pdf.getDocumentInformation().setCreationDate(Calendar.getInstance());
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PdfMetadataService.java,PdfMetadataService,setCommonMetadata,"void setCommonMetadata(PDDocument,PdfMetadata)","[85, 112]","{'A233': [(85, 112)]}",{'A233': 1.0},A233,,"    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {
        String title = pdfMetadata.getTitle();
        pdf.getDocumentInformation().setTitle(title);
        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);
        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());
        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());
        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());

        String author = pdfMetadata.getAuthor();
        if (applicationProperties
                        .getPremium()
                        .getProFeatures()
                        .getCustomMetadata()
                        .isAutoUpdateMetadata()
                && runningProOrHigher) {
            author =
                    applicationProperties
                            .getPremium()
                            .getProFeatures()
                            .getCustomMetadata()
                            .getAuthor();

            if (userService != null) {
                author = author.replace(""username"", userService.getCurrentUsername());
            }
        }
        pdf.getDocumentInformation().setAuthor(author);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,PDDocument load(File),"[76, 78]","{'A233': [(76, 78)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(File file) throws IOException {
        return load(file, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(File,boolean)","[84, 97]","{'A233': [(84, 97)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(File file, boolean readOnly) throws IOException {
        if (file == null) {
            throw ExceptionUtils.createNullArgumentException(""File"");
        }

        long fileSize = file.length();
        log.debug(""Loading PDF from file, size: {}MB"", fileSize / (1024 * 1024));

        PDDocument doc = loadAdaptively(file, fileSize);
        if (!readOnly) {
            postProcessDocument(doc);
        }
        return doc;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,PDDocument load(Path),"[103, 105]","{'A233': [(103, 105)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(Path path) throws IOException {
        return load(path, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(Path,boolean)","[111, 124]","{'A233': [(111, 124)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(Path path, boolean readOnly) throws IOException {
        if (path == null) {
            throw ExceptionUtils.createNullArgumentException(""File"");
        }

        long fileSize = Files.size(path);
        log.debug(""Loading PDF from file, size: {}MB"", fileSize / (1024 * 1024));

        PDDocument doc = loadAdaptively(path.toFile(), fileSize);
        if (!readOnly) {
            postProcessDocument(doc);
        }
        return doc;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,PDDocument load(byte[]),"[127, 129]","{'A233': [(127, 129)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(byte[] input) throws IOException {
        return load(input, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(byte[],boolean)","[132, 145]","{'A233': [(132, 145)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(byte[] input, boolean readOnly) throws IOException {
        if (input == null) {
            throw ExceptionUtils.createNullArgumentException(""Input bytes"");
        }

        long dataSize = input.length;
        log.debug(""Loading PDF from byte array, size: {}MB"", dataSize / (1024 * 1024));

        PDDocument doc = loadAdaptively(input, dataSize);
        if (!readOnly) {
            postProcessDocument(doc);
        }
        return doc;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,PDDocument load(InputStream),"[148, 150]","{'A233': [(148, 150)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(InputStream input) throws IOException {
        return load(input, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(InputStream,boolean)","[153, 167]","{'A233': [(153, 167)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(InputStream input, boolean readOnly) throws IOException {
        if (input == null) {
            throw ExceptionUtils.createNullArgumentException(""InputStream"");
        }

        // Since we don't know the size upfront, buffer to a temp file
        Path tempFile = createTempFile(""pdf-stream-"");

        Files.copy(input, tempFile, StandardCopyOption.REPLACE_EXISTING);
        PDDocument doc = loadAdaptively(tempFile.toFile(), Files.size(tempFile));
        if (!readOnly) {
            postProcessDocument(doc);
        }
        return doc;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(InputStream,String)","[170, 172]","{'A233': [(170, 172)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(InputStream input, String password) throws IOException {
        return load(input, password, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(InputStream,String,boolean)","[175, 191]","{'A233': [(175, 191)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(InputStream input, String password, boolean readOnly)
            throws IOException {
        if (input == null) {
            throw ExceptionUtils.createNullArgumentException(""InputStream"");
        }

        // Since we don't know the size upfront, buffer to a temp file
        Path tempFile = createTempFile(""pdf-stream-"");

        Files.copy(input, tempFile, StandardCopyOption.REPLACE_EXISTING);
        PDDocument doc =
                loadAdaptivelyWithPassword(tempFile.toFile(), Files.size(tempFile), password);
        if (!readOnly) {
            postProcessDocument(doc);
        }
        return doc;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,PDDocument load(String),"[194, 196]","{'A233': [(194, 196)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(String path) throws IOException {
        return load(path, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(String,boolean)","[199, 201]","{'A233': [(199, 201)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(String path, boolean readOnly) throws IOException {
        return load(new File(path), readOnly);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,PDDocument load(PDFFile),"[204, 206]","{'A233': [(204, 206)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(PDFFile pdfFile) throws IOException {
        return load(pdfFile, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(PDFFile,boolean)","[209, 211]","{'A233': [(209, 211)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(PDFFile pdfFile, boolean readOnly) throws IOException {
        return load(pdfFile.getFileInput(), readOnly);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,PDDocument load(MultipartFile),"[214, 216]","{'A233': [(214, 216)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(MultipartFile pdfFile) throws IOException {
        return load(pdfFile, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(MultipartFile,boolean)","[219, 221]","{'A233': [(219, 221)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(MultipartFile pdfFile, boolean readOnly) throws IOException {
        return load(pdfFile.getInputStream(), readOnly);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(MultipartFile,String)","[224, 226]","{'A233': [(224, 226)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(MultipartFile fileInput, String password) throws IOException {
        return load(fileInput, password, false);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,load,"PDDocument load(MultipartFile,String,boolean)","[229, 232]","{'A233': [(229, 232)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument load(MultipartFile fileInput, String password, boolean readOnly)
            throws IOException {
        return load(fileInput.getInputStream(), password, readOnly);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,getStreamCacheFunction,StreamCacheCreateFunction getStreamCacheFunction(long),"[238, 276]","{'A233': [(238, 276)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public StreamCacheCreateFunction getStreamCacheFunction(long contentSize) {
        long maxMemory = Runtime.getRuntime().maxMemory();
        long freeMemory = Runtime.getRuntime().freeMemory();
        long totalMemory = Runtime.getRuntime().totalMemory();
        long usedMemory = totalMemory - freeMemory;

        // Calculate percentage of free memory
        double freeMemoryPercent = (double) (maxMemory - usedMemory) / maxMemory * 100;
        long actualFreeMemory = maxMemory - usedMemory;

        // Log memory status
        log.debug(
                ""Memory status - Free: {}MB ({}%), Used: {}MB, Max: {}MB"",
                actualFreeMemory / (1024 * 1024),
                String.format(""%.2f"", freeMemoryPercent),
                usedMemory / (1024 * 1024),
                maxMemory / (1024 * 1024));

        // If free memory is critically low, always use file-based caching
        if (freeMemoryPercent < MIN_FREE_MEMORY_PERCENTAGE
                || actualFreeMemory < MIN_FREE_MEMORY_BYTES) {
            log.debug(
                    ""Low memory detected ({}%), forcing file-based cache"",
                    String.format(""%.2f"", freeMemoryPercent));
            return createScratchFileCacheFunction(MemoryUsageSetting.setupTempFileOnly());
        } else if (contentSize < SMALL_FILE_THRESHOLD) {
            log.debug(""Using memory-only cache for small document ({}KB)"", contentSize / 1024);
            return IOUtils.createMemoryOnlyStreamCache();
        } else if (contentSize < LARGE_FILE_THRESHOLD) {
            // For medium files (10-50MB), use a mixed approach
            log.debug(
                    ""Using mixed memory/file cache for medium document ({}MB)"",
                    contentSize / (1024 * 1024));
            return createScratchFileCacheFunction(MemoryUsageSetting.setupMixed(LARGE_FILE_USAGE));
        } else {
            log.debug(""Using file-based cache for large document"");
            return createScratchFileCacheFunction(MemoryUsageSetting.setupTempFileOnly());
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,loadAdaptively,"PDDocument loadAdaptively(Object,long)","[279, 300]","{'A233': [(279, 281), (284, 300)], 'A234': [(282, 283)]}","{'A233': 0.9090909090909091, 'A234': 0.09090909090909091}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private PDDocument loadAdaptively(Object source, long contentSize) throws IOException {
        // Get the appropriate caching strategy
        StreamCacheCreateFunction cacheFunction = getStreamCacheFunction(contentSize);

        // If small handle as bytes and remove original file
        if (contentSize <= SMALL_FILE_THRESHOLD && source instanceof File file) {
            source = Files.readAllBytes(file.toPath());
            file.delete();
        }
        PDDocument document;
        if (source instanceof File file) {
            document = loadFromFile(file, contentSize, cacheFunction);
        } else if (source instanceof byte[] bytes) {
            document = loadFromBytes(bytes, contentSize, cacheFunction);
        } else {
            throw new IllegalArgumentException(""Unsupported source type: "" + source.getClass());
        }

        configureResourceCacheIfNeeded(document, contentSize);

        return document;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,configureResourceCacheIfNeeded,"void configureResourceCacheIfNeeded(PDDocument,long)","[306, 320]","{'A233': [(306, 320)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private void configureResourceCacheIfNeeded(PDDocument document, long contentSize) {
        if (contentSize > LARGE_FILE_THRESHOLD) {
            document.setResourceCache(null);
        } else {
            // Check current memory status for smaller files
            long maxMemory = Runtime.getRuntime().maxMemory();
            long usedMemory =
                    Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
            double freeMemoryPercent = (double) (maxMemory - usedMemory) / maxMemory * 100;

            if (freeMemoryPercent < MIN_FREE_MEMORY_PERCENTAGE) {
                document.setResourceCache(null);
            }
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,loadAdaptivelyWithPassword,"PDDocument loadAdaptivelyWithPassword(Object,long,String)","[323, 344]","{'A233': [(323, 326), (328, 344)], 'A234': [(327, 327)]}","{'A233': 0.9545454545454546, 'A234': 0.045454545454545456}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private PDDocument loadAdaptivelyWithPassword(Object source, long contentSize, String password)
            throws IOException {
        // Get the appropriate caching strategy
        StreamCacheCreateFunction cacheFunction = getStreamCacheFunction(contentSize);
        // If small handle as bytes and remove original file
        if (contentSize <= SMALL_FILE_THRESHOLD && source instanceof File file) {
            source = Files.readAllBytes(file.toPath());
            file.delete();
        }
        PDDocument document;
        if (source instanceof File file) {
            document = loadFromFileWithPassword(file, contentSize, cacheFunction, password);
        } else if (source instanceof byte[] bytes) {
            document = loadFromBytesWithPassword(bytes, contentSize, cacheFunction, password);
        } else {
            throw new IllegalArgumentException(""Unsupported source type: "" + source.getClass());
        }

        configureResourceCacheIfNeeded(document, contentSize);

        return document;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,loadFromFileWithPassword,"PDDocument loadFromFileWithPassword(File,long,StreamCacheCreateFunction,String)","[347, 351]","{'A233': [(347, 351)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private PDDocument loadFromFileWithPassword(
            File file, long size, StreamCacheCreateFunction cache, String password)
            throws IOException {
        return Loader.loadPDF(new DeletingRandomAccessFile(file), password, null, null, cache);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,loadFromBytesWithPassword,"PDDocument loadFromBytesWithPassword(byte[],long,StreamCacheCreateFunction,String)","[354, 365]","{'A233': [(354, 365)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private PDDocument loadFromBytesWithPassword(
            byte[] bytes, long size, StreamCacheCreateFunction cache, String password)
            throws IOException {
        if (size >= SMALL_FILE_THRESHOLD) {
            log.debug(""Writing large byte array to temp file for password-protected PDF"");
            Path tempFile = createTempFile(""pdf-bytes-"");

            Files.write(tempFile, bytes);
            return Loader.loadPDF(tempFile.toFile(), password, null, null, cache);
        }
        return Loader.loadPDF(bytes, password, null, null, cache);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createScratchFileCacheFunction,StreamCacheCreateFunction createScratchFileCacheFunction(MemoryUsageSetting),"[367, 375]","{'A233': [(367, 375)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private StreamCacheCreateFunction createScratchFileCacheFunction(MemoryUsageSetting settings) {
        return () -> {
            try {
                return new ScratchFile(settings);
            } catch (IOException e) {
                throw new RuntimeException(""ScratchFile initialization failed"", e);
            }
        };
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,postProcessDocument,void postProcessDocument(PDDocument),"[377, 380]","{'A233': [(377, 380)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private void postProcessDocument(PDDocument doc) throws IOException {
        pdfMetadataService.setDefaultMetadata(doc);
        removePassword(doc);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,loadFromFile,"PDDocument loadFromFile(File,long,StreamCacheCreateFunction)","[382, 390]","{'A233': [(382, 390)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private PDDocument loadFromFile(File file, long size, StreamCacheCreateFunction cache)
            throws IOException {
        try {
            return Loader.loadPDF(new DeletingRandomAccessFile(file), """", null, null, cache);
        } catch (IOException e) {
            ExceptionUtils.logException(""PDF loading from file"", e);
            throw ExceptionUtils.handlePdfException(e);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,loadFromBytes,"PDDocument loadFromBytes(byte[],long,StreamCacheCreateFunction)","[392, 408]","{'A233': [(392, 408)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private PDDocument loadFromBytes(byte[] bytes, long size, StreamCacheCreateFunction cache)
            throws IOException {
        if (size >= SMALL_FILE_THRESHOLD) {
            log.debug(""Writing large byte array to temp file"");
            Path tempFile = createTempFile(""pdf-bytes-"");

            Files.write(tempFile, bytes);
            return loadFromFile(tempFile.toFile(), size, cache);
        }

        try {
            return Loader.loadPDF(bytes, """", null, null, cache);
        } catch (IOException e) {
            ExceptionUtils.logException(""PDF loading from bytes"", e);
            throw ExceptionUtils.handlePdfException(e);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createNewDocument,PDDocument createNewDocument(MemoryUsageSetting),"[410, 414]","{'A233': [(410, 414)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument createNewDocument(MemoryUsageSetting settings) throws IOException {
        PDDocument doc = new PDDocument(createScratchFileCacheFunction(settings));
        pdfMetadataService.setDefaultMetadata(doc);
        return doc;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createNewDocument,PDDocument createNewDocument(),"[416, 418]","{'A233': [(416, 418)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument createNewDocument() throws IOException {
        return createNewDocument(MemoryUsageSetting.setupTempFileOnly());
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,saveToBytes,byte[] saveToBytes(PDDocument),"[420, 432]","{'A233': [(420, 432)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public byte[] saveToBytes(PDDocument document) throws IOException {
        if (document.getNumberOfPages() < 10) { // Simple heuristic
            try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
                document.save(baos);
                return baos.toByteArray();
            }
        } else {
            Path tempFile = createTempFile(""pdf-save-"");

            document.save(tempFile.toFile());
            return Files.readAllBytes(tempFile);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,removePassword,void removePassword(PDDocument),"[435, 444]","{'A233': [(435, 444)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private void removePassword(PDDocument document) throws IOException {
        if (document.isEncrypted()) {
            try {
                document.setAllSecurityToBeRemoved(true);
            } catch (Exception e) {
                ExceptionUtils.logException(""PDF decryption"", e);
                throw new IOException(""PDF decryption failed"", e);
            }
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createTempFile,Path createTempFile(String),"[447, 478]","{'A233': [(447, 478)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private Path createTempFile(String prefix) throws IOException {
        // Check if TempFileManager is available in the application context
        try {
            TempFileManager tempFileManager =
                    ApplicationContextProvider.getBean(TempFileManager.class);
            if (tempFileManager != null) {
                // Use TempFileManager to create and register the temp file
                File file = tempFileManager.createTempFile("".tmp"");
                log.debug(""Created and registered temp file via TempFileManager: {}"", file);
                return file.toPath();
            }
        } catch (Exception e) {
            log.debug(""TempFileManager not available, falling back to standard temp file creation"");
        }

        // Fallback to standard temp file creation
        Path file = Files.createTempFile(prefix + tempCounter.incrementAndGet() + ""-"", "".tmp"");
        log.debug(""Created temp file: {}"", file);

        // Try to register the file with a static registry if possible
        try {
            TempFileRegistry registry = ApplicationContextProvider.getBean(TempFileRegistry.class);
            if (registry != null) {
                registry.register(file);
                log.debug(""Registered fallback temp file with registry: {}"", file);
            }
        } catch (Exception e) {
            log.debug(""Could not register fallback temp file with registry: {}"", file);
        }

        return file;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createTempDirectory,Path createTempDirectory(String),"[481, 483]","{'A233': [(481, 483)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    private Path createTempDirectory(String prefix) throws IOException {
        return Files.createTempDirectory(prefix + tempCounter.incrementAndGet() + ""-"");
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createNewBytesBasedOnOldDocument,byte[] createNewBytesBasedOnOldDocument(byte[]),"[486, 490]","{'A233': [(486, 490)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public byte[] createNewBytesBasedOnOldDocument(byte[] oldDocument) throws IOException {
        try (PDDocument document = load(oldDocument)) {
            return saveToBytes(document);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createNewBytesBasedOnOldDocument,byte[] createNewBytesBasedOnOldDocument(File),"[493, 497]","{'A233': [(493, 497)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public byte[] createNewBytesBasedOnOldDocument(File oldDocument) throws IOException {
        try (PDDocument document = load(oldDocument)) {
            return saveToBytes(document);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createNewBytesBasedOnOldDocument,byte[] createNewBytesBasedOnOldDocument(PDDocument),"[500, 504]","{'A233': [(500, 504)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public byte[] createNewBytesBasedOnOldDocument(PDDocument oldDocument) throws IOException {
        pdfMetadataService.setMetadataToPdf(
                oldDocument, pdfMetadataService.extractMetadataFromPdf(oldDocument), true);
        return saveToBytes(oldDocument);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createNewDocumentBasedOnOldDocument,PDDocument createNewDocumentBasedOnOldDocument(byte[]),"[507, 511]","{'A233': [(507, 511)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument createNewDocumentBasedOnOldDocument(byte[] oldDocument) throws IOException {
        try (PDDocument document = load(oldDocument)) {
            return createNewDocumentBasedOnOldDocument(document);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createNewDocumentBasedOnOldDocument,PDDocument createNewDocumentBasedOnOldDocument(File),"[514, 518]","{'A233': [(514, 518)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument createNewDocumentBasedOnOldDocument(File oldDocument) throws IOException {
        try (PDDocument document = load(oldDocument)) {
            return createNewDocumentBasedOnOldDocument(document);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,createNewDocumentBasedOnOldDocument,PDDocument createNewDocumentBasedOnOldDocument(PDDocument),"[521, 527]","{'A233': [(521, 527)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public PDDocument createNewDocumentBasedOnOldDocument(PDDocument oldDocument)
            throws IOException {
        PDDocument document = createNewDocument();
        pdfMetadataService.setMetadataToPdf(
                document, pdfMetadataService.extractMetadataFromPdf(oldDocument), true);
        return document;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,loadToBytes,byte[] loadToBytes(File),"[530, 534]","{'A233': [(530, 534)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public byte[] loadToBytes(File file) throws IOException {
        try (PDDocument document = load(file)) {
            return saveToBytes(document);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/CustomPDFDocumentFactory.java,CustomPDFDocumentFactory,loadToBytes,byte[] loadToBytes(byte[]),"[537, 541]","{'A233': [(537, 541)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/CustomPDFDocumentFactoryTest.java,"    public byte[] loadToBytes(byte[] bytes) throws IOException {
        try (PDDocument document = load(bytes)) {
            return saveToBytes(document);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileStorage.java,FileStorage,storeFile,String storeFile(MultipartFile),"[36, 48]","{'A233': [(36, 48)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/FileStorageTest.java,"    public String storeFile(MultipartFile file) throws IOException {
        String fileId = generateFileId();
        Path filePath = getFilePath(fileId);

        // Ensure the directory exists
        Files.createDirectories(filePath.getParent());

        // Transfer the file to the storage location
        file.transferTo(filePath.toFile());

        log.debug(""Stored file with ID: {}"", fileId);
        return fileId;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileStorage.java,FileStorage,storeBytes,"String storeBytes(byte[],String)","[58, 70]","{'A233': [(58, 70)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/FileStorageTest.java,"    public String storeBytes(byte[] bytes, String originalName) throws IOException {
        String fileId = generateFileId();
        Path filePath = getFilePath(fileId);

        // Ensure the directory exists
        Files.createDirectories(filePath.getParent());

        // Write the bytes to the file
        Files.write(filePath, bytes);

        log.debug(""Stored byte array with ID: {}"", fileId);
        return fileId;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileStorage.java,FileStorage,retrieveFile,MultipartFile retrieveFile(String),"[79, 88]","{'A233': [(79, 88)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/FileStorageTest.java,"    public MultipartFile retrieveFile(String fileId) throws IOException {
        Path filePath = getFilePath(fileId);

        if (!Files.exists(filePath)) {
            throw new IOException(""File not found with ID: "" + fileId);
        }

        byte[] fileData = Files.readAllBytes(filePath);
        return fileOrUploadService.toMockMultipartFile(fileId, fileData);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileStorage.java,FileStorage,retrieveBytes,byte[] retrieveBytes(String),"[97, 105]","{'A233': [(97, 105)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/FileStorageTest.java,"    public byte[] retrieveBytes(String fileId) throws IOException {
        Path filePath = getFilePath(fileId);

        if (!Files.exists(filePath)) {
            throw new IOException(""File not found with ID: "" + fileId);
        }

        return Files.readAllBytes(filePath);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileStorage.java,FileStorage,deleteFile,boolean deleteFile(String),"[113, 121]","{'A233': [(113, 121)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/FileStorageTest.java,"    public boolean deleteFile(String fileId) {
        try {
            Path filePath = getFilePath(fileId);
            return Files.deleteIfExists(filePath);
        } catch (IOException e) {
            log.error(""Error deleting file with ID: {}"", fileId, e);
            return false;
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileStorage.java,FileStorage,fileExists,boolean fileExists(String),"[129, 132]","{'A233': [(129, 132)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/FileStorageTest.java,"    public boolean fileExists(String fileId) {
        Path filePath = getFilePath(fileId);
        return Files.exists(filePath);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileStorage.java,FileStorage,getFileSize,long getFileSize(String),"[141, 149]","{'A233': [(141, 149)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/FileStorageTest.java,"    public long getFileSize(String fileId) throws IOException {
        Path filePath = getFilePath(fileId);

        if (!Files.exists(filePath)) {
            throw new IOException(""File not found with ID: "" + fileId);
        }

        return Files.size(filePath);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileStorage.java,FileStorage,getFilePath,Path getFilePath(String),"[159, 174]","{'A233': [(159, 174)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/FileStorageTest.java,"    private Path getFilePath(String fileId) {
        // Validate fileId to prevent path traversal
        if (fileId.contains("".."") || fileId.contains(""/"") || fileId.contains(""\\"")) {
            throw new IllegalArgumentException(""Invalid file ID"");
        }

        Path basePath = Path.of(tempDirPath).normalize().toAbsolutePath();
        Path resolvedPath = basePath.resolve(fileId).normalize();

        // Ensure resolved path is within the base directory
        if (!resolvedPath.startsWith(basePath)) {
            throw new IllegalArgumentException(""File ID resolves to an invalid path"");
        }

        return resolvedPath;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileStorage.java,FileStorage,generateFileId,String generateFileId(),"[181, 183]","{'A233': [(181, 183)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/FileStorageTest.java,"    private String generateFileId() {
        return UUID.randomUUID().toString();
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,initializeSchedulers,void initializeSchedulers(),"[82, 98]","{'A233': [(82, 98)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    private void initializeSchedulers() {
        log.debug(
                ""Starting job queue with base capacity {}, min capacity {}"",
                baseQueueCapacity,
                minQueueCapacity);

        // Periodically process the job queue
        scheduler.scheduleWithFixedDelay(
                this::processQueue, 0, queueCheckIntervalMs, TimeUnit.MILLISECONDS);

        // Periodically update queue capacity based on resource usage
        scheduler.scheduleWithFixedDelay(
                this::updateQueueCapacity,
                10000, // Initial delay
                30000, // 30 second interval
                TimeUnit.MILLISECONDS);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,shutdownSchedulers,void shutdownSchedulers(),"[101, 135]","{'A233': [(101, 135)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    private void shutdownSchedulers() {
        log.info(""Shutting down job queue"");
        shuttingDown = true;

        // Complete any futures that are still waiting
        jobMap.forEach(
                (id, job) -> {
                    if (!job.future.isDone()) {
                        job.future.completeExceptionally(
                                new RuntimeException(""Server shutting down, job cancelled""));
                    }
                });

        // Shutdown schedulers and wait for termination
        try {
            scheduler.shutdown();
            if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                scheduler.shutdownNow();
            }

            jobExecutor.shutdown();
            if (!jobExecutor.awaitTermination(5, TimeUnit.SECONDS)) {
                jobExecutor.shutdownNow();
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            scheduler.shutdownNow();
            jobExecutor.shutdownNow();
        }

        log.info(
                ""Job queue shutdown complete. Stats: total={}, rejected={}"",
                totalQueuedJobs,
                rejectedJobs);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,start,void start(),"[139, 146]","{'A233': [(139, 146)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    @Override
    public void start() {
        log.info(""Starting JobQueue lifecycle"");
        if (!running) {
            initializeSchedulers();
            running = true;
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,stop,void stop(),"[148, 153]","{'A233': [(148, 153)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    @Override
    public void stop() {
        log.info(""Stopping JobQueue lifecycle"");
        shutdownSchedulers();
        running = false;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,isRunning,boolean isRunning(),"[155, 158]","{'A233': [(155, 158)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    @Override
    public boolean isRunning() {
        return running;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,getPhase,int getPhase(),"[160, 164]","{'A233': [(160, 164)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    @Override
    public int getPhase() {
        // Start earlier than most components, but shutdown later
        return 10;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,isAutoStartup,boolean isAutoStartup(),"[166, 169]","{'A233': [(166, 169)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    @Override
    public boolean isAutoStartup() {
        return true;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,queueJob,"CompletableFuture<ResponseEntity<?>> queueJob(String,int,Supplier<Object>,long)","[180, 226]","{'A233': [(180, 226)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    public CompletableFuture<ResponseEntity<?>> queueJob(
            String jobId, int resourceWeight, Supplier<Object> work, long timeoutMs) {

        // Create a CompletableFuture to track this job's completion
        CompletableFuture<ResponseEntity<?>> future = new CompletableFuture<>();

        // Create the queued job
        QueuedJob job =
                new QueuedJob(jobId, resourceWeight, work, timeoutMs, Instant.now(), future, false);

        // Store in our map for lookup
        jobMap.put(jobId, job);

        // Update stats
        totalQueuedJobs++;

        // Synchronize access to the queue
        synchronized (queueLock) {
            currentQueueSize = jobQueue.size();

            // Try to add to the queue
            try {
                boolean added = jobQueue.offer(job, 5, TimeUnit.SECONDS);
                if (!added) {
                    log.warn(""Queue full, rejecting job {}"", jobId);
                    rejectedJobs++;
                    future.completeExceptionally(
                            new RuntimeException(""Job queue full, please try again later""));
                    jobMap.remove(jobId);
                    return future;
                }

                log.debug(
                        ""Job {} queued for execution (weight: {}, queue size: {})"",
                        jobId,
                        resourceWeight,
                        jobQueue.size());

                return future;
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                future.completeExceptionally(new RuntimeException(""Job queue interrupted""));
                jobMap.remove(jobId);
                return future;
            }
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,getQueueCapacity,int getQueueCapacity(),"[233, 238]","{'A233': [(233, 238)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    public int getQueueCapacity() {
        synchronized (queueLock) {
            return ((LinkedBlockingQueue<QueuedJob>) jobQueue).remainingCapacity()
                    + jobQueue.size();
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,updateQueueCapacity,void updateQueueCapacity(),"[241, 271]","{'A233': [(241, 271)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    private void updateQueueCapacity() {
        try {
            // Calculate new capacity once and cache the result
            int newCapacity =
                    resourceMonitor.calculateDynamicQueueCapacity(
                            baseQueueCapacity, minQueueCapacity);

            int currentCapacity = getQueueCapacity();
            if (newCapacity != currentCapacity) {
                log.debug(
                        ""Updating job queue capacity from {} to {}"", currentCapacity, newCapacity);

                synchronized (queueLock) {
                    // Double-check that capacity still needs to be updated
                    // Use the cached currentCapacity to avoid calling getQueueCapacity() again
                    if (newCapacity != currentCapacity) {
                        // Create new queue with updated capacity
                        BlockingQueue<QueuedJob> newQueue = new LinkedBlockingQueue<>(newCapacity);

                        // Transfer jobs from old queue to new queue
                        jobQueue.drainTo(newQueue);
                        jobQueue = newQueue;

                        currentQueueSize = jobQueue.size();
                    }
                }
            }
        } catch (Exception e) {
            log.error(""Error updating queue capacity: {}"", e.getMessage(), e);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,processQueue,void processQueue(),"[274, 357]","{'A233': [(274, 357)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    private void processQueue() {
        // Jobs to execute after releasing the lock
        java.util.List<QueuedJob> jobsToExecute = new java.util.ArrayList<>();

        // First synchronized block: poll jobs from the queue and prepare them for execution
        synchronized (queueLock) {
            if (shuttingDown || jobQueue.isEmpty()) {
                return;
            }

            try {
                // Get current resource status
                ResourceMonitor.ResourceStatus status = resourceMonitor.getCurrentStatus().get();

                // Check if we should execute any jobs
                boolean canExecuteJobs = (status != ResourceMonitor.ResourceStatus.CRITICAL);

                if (!canExecuteJobs) {
                    // Under critical load, don't execute any jobs
                    log.debug(""System under critical load, delaying job execution"");
                    return;
                }

                // Get jobs from the queue, up to a limit based on resource availability
                int jobsToProcess =
                        Math.max(
                                1,
                                switch (status) {
                                    case OK -> 3;
                                    case WARNING -> 1;
                                    case CRITICAL -> 0;
                                });

                for (int i = 0; i < jobsToProcess && !jobQueue.isEmpty(); i++) {
                    QueuedJob job = jobQueue.poll();
                    if (job == null) break;

                    // Check if it's been waiting too long
                    long waitTimeMs = Instant.now().toEpochMilli() - job.queuedAt.toEpochMilli();
                    if (waitTimeMs > maxWaitTimeMs) {
                        log.warn(
                                ""Job {} exceeded maximum wait time ({} ms), executing anyway"",
                                job.jobId,
                                waitTimeMs);

                        // Add a specific status to the job context that can be tracked
                        // This will be visible in the job status API
                        try {
                            TaskManager taskManager =
                                    SpringContextHolder.getBean(TaskManager.class);
                            if (taskManager != null) {
                                taskManager.addNote(
                                        job.jobId,
                                        ""QUEUED_TIMEOUT: Job waited in queue for ""
                                                + (waitTimeMs / 1000)
                                                + "" seconds, exceeding the maximum wait time of ""
                                                + (maxWaitTimeMs / 1000)
                                                + "" seconds."");
                            }
                        } catch (Exception e) {
                            log.error(
                                    ""Failed to add timeout note to job {}: {}"",
                                    job.jobId,
                                    e.getMessage());
                        }
                    }

                    // Remove from our map
                    jobMap.remove(job.jobId);
                    currentQueueSize = jobQueue.size();

                    // Add to the list of jobs to execute outside the synchronized block
                    jobsToExecute.add(job);
                }
            } catch (Exception e) {
                log.error(""Error processing job queue: {}"", e.getMessage(), e);
            }
        }

        // Now execute the jobs outside the synchronized block to avoid holding the lock
        for (QueuedJob job : jobsToExecute) {
            executeJob(job);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,executeJob,void executeJob(QueuedJob),"[364, 391]","{'A233': [(364, 391)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    private void executeJob(QueuedJob job) {
        if (job.cancelled) {
            log.debug(""Job {} was cancelled, not executing"", job.jobId);
            return;
        }

        jobExecutor.execute(
                () -> {
                    log.debug(""Executing queued job {} (queued at {})"", job.jobId, job.queuedAt);

                    try {
                        // Execute with timeout
                        Object result = executeWithTimeout(job.work, job.timeoutMs);

                        // Process the result
                        if (result instanceof ResponseEntity) {
                            job.future.complete((ResponseEntity<?>) result);
                        } else {
                            job.future.complete(ResponseEntity.ok(result));
                        }

                    } catch (Exception e) {
                        log.error(
                                ""Error executing queued job {}: {}"", job.jobId, e.getMessage(), e);
                        job.future.completeExceptionally(e);
                    }
                });
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,executeWithTimeout,"T executeWithTimeout(Supplier<T>,long)","[401, 421]","{'A233': [(401, 421)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    private <T> T executeWithTimeout(Supplier<T> supplier, long timeoutMs) throws Exception {
        CompletableFuture<T> future = CompletableFuture.supplyAsync(supplier);

        try {
            if (timeoutMs <= 0) {
                // No timeout
                return future.join();
            } else {
                // With timeout
                return future.get(timeoutMs, TimeUnit.MILLISECONDS);
            }
        } catch (TimeoutException e) {
            future.cancel(true);
            throw new TimeoutException(""Job timed out after "" + timeoutMs + ""ms"");
        } catch (ExecutionException e) {
            throw (Exception) e.getCause();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new InterruptedException(""Job was interrupted"");
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,isJobQueued,boolean isJobQueued(String),"[429, 431]","{'A233': [(429, 431)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    public boolean isJobQueued(String jobId) {
        return jobMap.containsKey(jobId);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,getJobPosition,int getJobPosition(String),"[439, 456]","{'A233': [(439, 456)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    public int getJobPosition(String jobId) {
        if (!jobMap.containsKey(jobId)) {
            return -1;
        }

        // Count positions
        int position = 0;
        for (QueuedJob job : jobQueue) {
            if (job.jobId.equals(jobId)) {
                return position;
            }
            position++;
        }

        // If we didn't find it in the queue but it's in the map,
        // it might be executing already
        return -1;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,cancelJob,boolean cancelJob(String),"[464, 480]","{'A233': [(464, 480)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    public boolean cancelJob(String jobId) {
        QueuedJob job = jobMap.remove(jobId);
        if (job != null) {
            job.cancelled = true;
            job.future.completeExceptionally(new RuntimeException(""Job cancelled by user""));

            // Try to remove from queue if it's still there
            jobQueue.remove(job);
            currentQueueSize = jobQueue.size();

            log.debug(""Job {} cancelled"", jobId);

            return true;
        }

        return false;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobQueue.java,JobQueue,getQueueStats,"Map<String, Object> getQueueStats()","[487, 494]","{'A233': [(487, 494)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobQueueTest.java,"    public Map<String, Object> getQueueStats() {
        return Map.of(
                ""queuedJobs"", jobQueue.size(),
                ""queueCapacity"", getQueueCapacity(),
                ""totalQueuedJobs"", totalQueuedJobs,
                ""rejectedJobs"", rejectedJobs,
                ""resourceStatus"", resourceMonitor.getCurrentStatus().get().name());
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PostHogService.java,PostHogService,captureSystemInfo,void captureSystemInfo(),"[58, 67]","{'A233': [(58, 58), (60, 67)], 'A234': [(59, 59)]}","{'A233': 0.9, 'A234': 0.1}",A233,,"    private void captureSystemInfo() {
        if (!applicationProperties.getSystem().isAnalyticsEnabled()) {
            return;
        }
        try {
            postHog.capture(uniqueId, ""system_info_captured"", captureServerMetrics());
        } catch (Exception e) {
            // Handle exceptions
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PostHogService.java,PostHogService,captureEvent,"void captureEvent(String,Map<String, Object>)","[69, 76]","{'A233': [(69, 69), (71, 72), (75, 76)], 'A234': [(70, 70)], 'A241': [(73, 74)]}","{'A233': 0.625, 'A234': 0.125, 'A241': 0.25}",A233,,"    public void captureEvent(String eventName, Map<String, Object> properties) {
        if (!applicationProperties.getSystem().isAnalyticsEnabled()) {
            return;
        }

        properties.put(""app_version"", appVersion);
        postHog.capture(uniqueId, eventName, properties);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PostHogService.java,PostHogService,captureServerMetrics,"Map<String, Object> captureServerMetrics()","[78, 175]","{'A233': [(78, 164), (168, 175)], 'A242': [(165, 167)]}","{'A233': 0.9693877551020408, 'A242': 0.030612244897959183}",A233,,"    public Map<String, Object> captureServerMetrics() {
        Map<String, Object> metrics = new HashMap<>();

        try {
            // Application version
            metrics.put(""app_version"", appVersion);
            String deploymentType = ""JAR""; // default
            if (""true"".equalsIgnoreCase(env.getProperty(""BROWSER_OPEN""))) {
                deploymentType = ""EXE"";
            } else if (isRunningInDocker()) {
                deploymentType = ""DOCKER"";
            }
            metrics.put(""deployment_type"", deploymentType);
            metrics.put(""mounted_config_dir"", configDirMounted);

            // System info
            metrics.put(""os_name"", System.getProperty(""os.name""));
            metrics.put(""os_version"", System.getProperty(""os.version""));
            metrics.put(""java_version"", System.getProperty(""java.version""));
            metrics.put(""user_name"", System.getProperty(""user.name""));
            metrics.put(""user_home"", System.getProperty(""user.home""));
            metrics.put(""user_dir"", System.getProperty(""user.dir""));

            // CPU and Memory
            metrics.put(""cpu_cores"", Runtime.getRuntime().availableProcessors());
            metrics.put(""total_memory"", Runtime.getRuntime().totalMemory());
            metrics.put(""free_memory"", Runtime.getRuntime().freeMemory());

            // Network and Server Identity
            InetAddress localHost = InetAddress.getLocalHost();
            metrics.put(""ip_address"", localHost.getHostAddress());
            metrics.put(""hostname"", localHost.getHostName());
            metrics.put(""mac_address"", getMacAddress());

            // JVM info
            metrics.put(""jvm_vendor"", System.getProperty(""java.vendor""));
            metrics.put(""jvm_version"", System.getProperty(""java.vm.version""));

            // Locale and Timezone
            metrics.put(""system_language"", System.getProperty(""user.language""));
            metrics.put(""system_country"", System.getProperty(""user.country""));
            metrics.put(""timezone"", TimeZone.getDefault().getID());
            metrics.put(""locale"", Locale.getDefault().toString());

            // Disk info
            File root = new File(""."");
            metrics.put(""total_disk_space"", root.getTotalSpace());
            metrics.put(""free_disk_space"", root.getFreeSpace());

            // Process info
            metrics.put(""process_id"", ProcessHandle.current().pid());

            // JVM metrics
            RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();
            metrics.put(""jvm_uptime_ms"", runtimeMXBean.getUptime());
            metrics.put(""jvm_start_time"", runtimeMXBean.getStartTime());

            // Memory metrics
            MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();
            metrics.put(""heap_memory_usage"", memoryMXBean.getHeapMemoryUsage().getUsed());
            metrics.put(""non_heap_memory_usage"", memoryMXBean.getNonHeapMemoryUsage().getUsed());

            // CPU metrics
            OperatingSystemMXBean osMXBean = ManagementFactory.getOperatingSystemMXBean();
            metrics.put(""system_load_average"", osMXBean.getSystemLoadAverage());

            // Thread metrics
            ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
            metrics.put(""thread_count"", threadMXBean.getThreadCount());
            metrics.put(""daemon_thread_count"", threadMXBean.getDaemonThreadCount());
            metrics.put(""peak_thread_count"", threadMXBean.getPeakThreadCount());

            // Garbage collection metrics
            for (GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans()) {
                metrics.put(""gc_"" + gcBean.getName() + ""_count"", gcBean.getCollectionCount());
                metrics.put(""gc_"" + gcBean.getName() + ""_time"", gcBean.getCollectionTime());
            }

            // Network interfaces
            metrics.put(""network_interfaces"", getNetworkInterfacesInfo());

            // Docker detection and stats
            boolean isDocker = isRunningInDocker();
            if (isDocker) {
                metrics.put(""docker_metrics"", getDockerMetrics());
            }
            metrics.put(""application_properties"", captureApplicationProperties());

            if (userService != null) {
                metrics.put(""total_users_created"", userService.getTotalUsersCount());
            }

        } catch (Exception e) {
            metrics.put(""error"", e.getMessage());
        }

        return metrics;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PostHogService.java,PostHogService,isRunningInDocker,boolean isRunningInDocker(),"[177, 179]","{'A233': [(177, 179)]}",{'A233': 1.0},A233,,"    private boolean isRunningInDocker() {
        return Files.exists(Paths.get(""/.dockerenv""));
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PostHogService.java,PostHogService,getDockerMetrics,"Map<String, Object> getDockerMetrics()","[181, 215]","{'A236': [(211, 211)], 'A233': [(181, 210), (212, 215)]}","{'A236': 0.02857142857142857, 'A233': 0.9714285714285714}",A233,,"    private Map<String, Object> getDockerMetrics() {
        Map<String, Object> dockerMetrics = new HashMap<>();

        // Network-related Docker info
        dockerMetrics.put(""docker_network_mode"", System.getenv(""DOCKER_NETWORK_MODE""));

        // Container name (if set)
        String containerName = System.getenv(""CONTAINER_NAME"");
        if (containerName != null && !containerName.isEmpty()) {
            dockerMetrics.put(""container_name"", containerName);
        }

        // Docker compose information
        String composeProject = System.getenv(""COMPOSE_PROJECT_NAME"");
        String composeService = System.getenv(""COMPOSE_SERVICE_NAME"");
        if (composeProject != null && composeService != null) {
            dockerMetrics.put(""compose_project"", composeProject);
            dockerMetrics.put(""compose_service"", composeService);
        }

        // Kubernetes-specific info (if running in K8s)
        String k8sPodName = System.getenv(""KUBERNETES_POD_NAME"");
        if (k8sPodName != null) {
            dockerMetrics.put(""k8s_pod_name"", k8sPodName);
            dockerMetrics.put(""k8s_namespace"", System.getenv(""KUBERNETES_NAMESPACE""));
            dockerMetrics.put(""k8s_node_name"", System.getenv(""KUBERNETES_NODE_NAME""));
        }

        // New environment variables
        dockerMetrics.put(""version_tag"", System.getenv(""VERSION_TAG""));
        dockerMetrics.put(""additional_features_off"", System.getenv(""ADDITIONAL_FEATURES_OFF""));
        dockerMetrics.put(""fat_docker"", System.getenv(""FAT_DOCKER""));

        return dockerMetrics;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PostHogService.java,PostHogService,addIfNotEmpty,"void addIfNotEmpty(Map<String, Object>,String,Object)","[217, 227]","{'A233': [(217, 218), (220, 227)], 'A234': [(219, 219)]}","{'A233': 0.9090909090909091, 'A234': 0.09090909090909091}",A233,,"    private void addIfNotEmpty(Map<String, Object> map, String key, Object value) {
        if (value != null) {
            if (value instanceof String strValue) {
                if (!StringUtils.isBlank(strValue)) {
                    map.put(key, strValue.trim());
                }
            } else {
                map.put(key, value);
            }
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PostHogService.java,PostHogService,captureApplicationProperties,"Map<String, Object> captureApplicationProperties()","[229, 388]","{'A233': [(229, 326), (328, 388)], 'A234': [(327, 327)]}","{'A233': 0.99375, 'A234': 0.00625}",A233,,"    public Map<String, Object> captureApplicationProperties() {
        Map<String, Object> properties = new HashMap<>();

        // Capture Legal properties
        addIfNotEmpty(
                properties,
                ""legal_termsAndConditions"",
                applicationProperties.getLegal().getTermsAndConditions());
        addIfNotEmpty(
                properties,
                ""legal_privacyPolicy"",
                applicationProperties.getLegal().getPrivacyPolicy());
        addIfNotEmpty(
                properties,
                ""legal_accessibilityStatement"",
                applicationProperties.getLegal().getAccessibilityStatement());
        addIfNotEmpty(
                properties,
                ""legal_cookiePolicy"",
                applicationProperties.getLegal().getCookiePolicy());
        addIfNotEmpty(
                properties, ""legal_impressum"", applicationProperties.getLegal().getImpressum());

        // Capture Security properties
        addIfNotEmpty(
                properties,
                ""security_enableLogin"",
                applicationProperties.getSecurity().getEnableLogin());
        addIfNotEmpty(
                properties,
                ""security_csrfDisabled"",
                applicationProperties.getSecurity().getCsrfDisabled());
        addIfNotEmpty(
                properties,
                ""security_loginAttemptCount"",
                applicationProperties.getSecurity().getLoginAttemptCount());
        addIfNotEmpty(
                properties,
                ""security_loginResetTimeMinutes"",
                applicationProperties.getSecurity().getLoginResetTimeMinutes());
        addIfNotEmpty(
                properties,
                ""security_loginMethod"",
                applicationProperties.getSecurity().getLoginMethod());

        // Capture OAuth2 properties (excluding sensitive information)
        addIfNotEmpty(
                properties,
                ""security_oauth2_enabled"",
                applicationProperties.getSecurity().getOauth2().getEnabled());
        if (applicationProperties.getSecurity().getOauth2().getEnabled()) {
            addIfNotEmpty(
                    properties,
                    ""security_oauth2_autoCreateUser"",
                    applicationProperties.getSecurity().getOauth2().getAutoCreateUser());
            addIfNotEmpty(
                    properties,
                    ""security_oauth2_blockRegistration"",
                    applicationProperties.getSecurity().getOauth2().getBlockRegistration());
            addIfNotEmpty(
                    properties,
                    ""security_oauth2_useAsUsername"",
                    applicationProperties.getSecurity().getOauth2().getUseAsUsername());
            addIfNotEmpty(
                    properties,
                    ""security_oauth2_provider"",
                    applicationProperties.getSecurity().getOauth2().getProvider());
        }
        // Capture System properties
        addIfNotEmpty(
                properties,
                ""system_defaultLocale"",
                applicationProperties.getSystem().getDefaultLocale());
        addIfNotEmpty(
                properties,
                ""system_googlevisibility"",
                applicationProperties.getSystem().getGooglevisibility());
        addIfNotEmpty(
                properties, ""system_showUpdate"", applicationProperties.getSystem().isShowUpdate());
        addIfNotEmpty(
                properties,
                ""system_showUpdateOnlyAdmin"",
                applicationProperties.getSystem().getShowUpdateOnlyAdmin());
        addIfNotEmpty(
                properties,
                ""system_customHTMLFiles"",
                applicationProperties.getSystem().isCustomHTMLFiles());
        addIfNotEmpty(
                properties,
                ""system_tessdataDir"",
                applicationProperties.getSystem().getTessdataDir());
        addIfNotEmpty(
                properties,
                ""system_enableAlphaFunctionality"",
                applicationProperties.getSystem().getEnableAlphaFunctionality());
        addIfNotEmpty(
                properties,
                ""system_enableAnalytics"",
                applicationProperties.getSystem().isAnalyticsEnabled());

        // Capture UI properties
        addIfNotEmpty(properties, ""ui_appName"", applicationProperties.getUi().getAppName());
        addIfNotEmpty(
                properties,
                ""ui_homeDescription"",
                applicationProperties.getUi().getHomeDescription());
        addIfNotEmpty(
                properties, ""ui_appNameNavbar"", applicationProperties.getUi().getAppNameNavbar());

        // Capture Metrics properties
        addIfNotEmpty(
                properties, ""metrics_enabled"", applicationProperties.getMetrics().getEnabled());

        // Capture EnterpriseEdition properties
        addIfNotEmpty(
                properties,
                ""enterpriseEdition_enabled"",
                applicationProperties.getPremium().isEnabled());
        if (applicationProperties.getPremium().isEnabled()) {
            addIfNotEmpty(
                    properties,
                    ""enterpriseEdition_customMetadata_autoUpdateMetadata"",
                    applicationProperties
                            .getPremium()
                            .getProFeatures()
                            .getCustomMetadata()
                            .isAutoUpdateMetadata());
            addIfNotEmpty(
                    properties,
                    ""enterpriseEdition_customMetadata_author"",
                    applicationProperties
                            .getPremium()
                            .getProFeatures()
                            .getCustomMetadata()
                            .getAuthor());
            addIfNotEmpty(
                    properties,
                    ""enterpriseEdition_customMetadata_creator"",
                    applicationProperties
                            .getPremium()
                            .getProFeatures()
                            .getCustomMetadata()
                            .getCreator());
            addIfNotEmpty(
                    properties,
                    ""enterpriseEdition_customMetadata_producer"",
                    applicationProperties
                            .getPremium()
                            .getProFeatures()
                            .getCustomMetadata()
                            .getProducer());
        }
        // Capture AutoPipeline properties
        addIfNotEmpty(
                properties,
                ""autoPipeline_outputFolder"",
                applicationProperties.getAutoPipeline().getOutputFolder());

        return properties;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PostHogService.java,PostHogService,getMacAddress,String getMacAddress(),"[390, 409]","{'A233': [(390, 409)]}",{'A233': 1.0},A233,,"    private String getMacAddress() {
        try {
            Enumeration<NetworkInterface> networkInterfaces =
                    NetworkInterface.getNetworkInterfaces();
            while (networkInterfaces.hasMoreElements()) {
                NetworkInterface ni = networkInterfaces.nextElement();
                byte[] hardwareAddress = ni.getHardwareAddress();
                if (hardwareAddress != null) {
                    String[] hexadecimal = new String[hardwareAddress.length];
                    for (int i = 0; i < hardwareAddress.length; i++) {
                        hexadecimal[i] = String.format(""%02X"", hardwareAddress[i]);
                    }
                    return String.join(""-"", hexadecimal);
                }
            }
        } catch (Exception e) {
            // Handle exception
        }
        return ""Unknown"";
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/PostHogService.java,PostHogService,getNetworkInterfacesInfo,"Map<String, String> getNetworkInterfacesInfo()","[411, 423]","{'A233': [(411, 423)]}",{'A233': 1.0},A233,,"    private Map<String, String> getNetworkInterfacesInfo() {
        Map<String, String> interfacesInfo = new HashMap<>();
        try {
            Enumeration<NetworkInterface> nets = NetworkInterface.getNetworkInterfaces();
            while (nets.hasMoreElements()) {
                NetworkInterface netint = nets.nextElement();
                interfacesInfo.put(netint.getName(), netint.getDisplayName());
            }
        } catch (Exception e) {
            interfacesInfo.put(""error"", e.getMessage());
        }
        return interfacesInfo;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/ResourceMonitor.java,ResourceMonitor.ResourceMetrics,getAge,Duration getAge(),"[103, 105]","{'A233': [(103, 105)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/ResourceMonitorTest.java,"        public Duration getAge() {
            return Duration.between(timestamp, Instant.now());
        }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/ResourceMonitor.java,ResourceMonitor.ResourceMetrics,isStale,boolean isStale(long),"[113, 115]","{'A233': [(113, 115)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/ResourceMonitorTest.java,"        public boolean isStale(long thresholdMs) {
            return getAge().toMillis() > thresholdMs;
        }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/ResourceMonitor.java,ResourceMonitor,initialize,void initialize(),"[118, 123]","{'A233': [(118, 123)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/ResourceMonitorTest.java,"    @PostConstruct
    public void initialize() {
        log.debug(""Starting resource monitoring with interval of {}ms"", monitorIntervalMs);
        scheduler.scheduleAtFixedRate(
                this::updateResourceMetrics, 0, monitorIntervalMs, TimeUnit.MILLISECONDS);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/ResourceMonitor.java,ResourceMonitor,shutdown,void shutdown(),"[125, 129]","{'A233': [(125, 129)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/ResourceMonitorTest.java,"    @PreDestroy
    public void shutdown() {
        log.info(""Shutting down resource monitoring"");
        scheduler.shutdownNow();
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/ResourceMonitor.java,ResourceMonitor,updateResourceMetrics,void updateResourceMetrics(),"[132, 183]","{'A233': [(132, 183)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/ResourceMonitorTest.java,"    private void updateResourceMetrics() {
        try {
            // Get CPU usage
            double cpuUsage = osMXBean.getSystemLoadAverage() / osMXBean.getAvailableProcessors();
            if (cpuUsage < 0) cpuUsage = getAlternativeCpuLoad(); // Fallback if not available

            // Get memory usage
            long heapUsed = memoryMXBean.getHeapMemoryUsage().getUsed();
            long nonHeapUsed = memoryMXBean.getNonHeapMemoryUsage().getUsed();
            long totalUsed = heapUsed + nonHeapUsed;

            long maxMemory = Runtime.getRuntime().maxMemory();
            long totalMemory = Runtime.getRuntime().totalMemory();
            long freeMemory = Runtime.getRuntime().freeMemory();

            double memoryUsage = (double) totalUsed / maxMemory;

            // Create new metrics
            ResourceMetrics metrics =
                    new ResourceMetrics(
                            cpuUsage,
                            memoryUsage,
                            freeMemory,
                            totalMemory,
                            maxMemory,
                            Instant.now());
            latestMetrics.set(metrics);

            // Determine system status
            ResourceStatus newStatus;
            if (cpuUsage > cpuCriticalThreshold || memoryUsage > memoryCriticalThreshold) {
                newStatus = ResourceStatus.CRITICAL;
            } else if (cpuUsage > cpuHighThreshold || memoryUsage > memoryHighThreshold) {
                newStatus = ResourceStatus.WARNING;
            } else {
                newStatus = ResourceStatus.OK;
            }

            // Update status if it changed
            ResourceStatus oldStatus = currentStatus.getAndSet(newStatus);
            if (oldStatus != newStatus) {
                log.info(""System resource status changed from {} to {}"", oldStatus, newStatus);
                log.info(
                        ""Current metrics - CPU: {}%, Memory: {}%, Free Memory: {} MB"",
                        String.format(""%.1f"", cpuUsage * 100),
                        String.format(""%.1f"", memoryUsage * 100),
                        freeMemory / (1024 * 1024));
            }
        } catch (Exception e) {
            log.error(""Error updating resource metrics: {}"", e.getMessage(), e);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/ResourceMonitor.java,ResourceMonitor,getAlternativeCpuLoad,double getAlternativeCpuLoad(),"[191, 217]","{'A233': [(191, 217)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/ResourceMonitorTest.java,"    private double getAlternativeCpuLoad() {
        try {
            // Try to get CPU time if available through reflection
            // This is a fallback since we can't directly cast to platform-specific classes
            try {
                java.lang.reflect.Method m =
                        osMXBean.getClass().getDeclaredMethod(""getProcessCpuLoad"");
                m.setAccessible(true);
                return (double) m.invoke(osMXBean);
            } catch (Exception e) {
                // Try the older method
                try {
                    java.lang.reflect.Method m =
                            osMXBean.getClass().getDeclaredMethod(""getSystemCpuLoad"");
                    m.setAccessible(true);
                    return (double) m.invoke(osMXBean);
                } catch (Exception e2) {
                    log.trace(
                            ""Could not get CPU load through reflection, assuming moderate load (0.5)"");
                    return 0.5;
                }
            }
        } catch (Exception e) {
            log.trace(""Could not get CPU load, assuming moderate load (0.5)"");
            return 0.5; // Default to moderate load
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/ResourceMonitor.java,ResourceMonitor,calculateDynamicQueueCapacity,"int calculateDynamicQueueCapacity(int,int)","[226, 254]","{'A233': [(226, 254)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/ResourceMonitorTest.java,"    public int calculateDynamicQueueCapacity(int baseCapacity, int minCapacity) {
        ResourceMetrics metrics = latestMetrics.get();
        ResourceStatus status = currentStatus.get();

        // Simple linear reduction based on memory and CPU load
        double capacityFactor =
                switch (status) {
                    case OK -> 1.0;
                    case WARNING -> 0.6;
                    case CRITICAL -> 0.3;
                };

        // Apply additional reduction based on specific memory pressure
        if (metrics.memoryUsage > 0.8) {
            capacityFactor *= 0.5; // Further reduce capacity under memory pressure
        }

        // Calculate capacity with minimum safeguard
        int capacity = (int) Math.max(minCapacity, Math.ceil(baseCapacity * capacityFactor));

        log.debug(
                ""Dynamic queue capacity: {} (base: {}, factor: {:.2f}, status: {})"",
                capacity,
                baseCapacity,
                capacityFactor,
                status);

        return capacity;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/ResourceMonitor.java,ResourceMonitor,shouldQueueJob,boolean shouldQueueJob(int),"[263, 278]","{'A233': [(263, 278)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/ResourceMonitorTest.java,"    public boolean shouldQueueJob(int resourceWeight) {
        ResourceStatus status = currentStatus.get();

        // Always run lightweight jobs (weight < 20) unless critical
        if (resourceWeight < 20 && status != ResourceStatus.CRITICAL) {
            return false;
        }

        // Medium weight jobs run immediately if resources are OK
        if (resourceWeight < 60 && status == ResourceStatus.OK) {
            return false;
        }

        // Heavy jobs (weight >= 60) and any job during WARNING/CRITICAL should be queued
        return true;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,init,void init(),"[82, 91]","{'A233': [(82, 91)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    @PostConstruct
    public void init() {
        // Create necessary directories
        ensureDirectoriesExist();

        // Perform startup cleanup if enabled
        if (applicationProperties.getSystem().getTempFileManagement().isStartupCleanup()) {
            runStartupCleanup();
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,ensureDirectoriesExist,void ensureDirectoriesExist(),"[94, 121]","{'A233': [(94, 121)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    private void ensureDirectoriesExist() {
        try {
            ApplicationProperties.TempFileManagement tempFiles =
                    applicationProperties.getSystem().getTempFileManagement();

            // Create the main temp directory
            String customTempDirectory = tempFiles.getBaseTmpDir();
            if (customTempDirectory != null && !customTempDirectory.isEmpty()) {
                Path tempDir = Path.of(customTempDirectory);
                if (!Files.exists(tempDir)) {
                    Files.createDirectories(tempDir);
                    log.info(""Created temp directory: {}"", tempDir);
                }
            }

            // Create LibreOffice temp directory
            String libreOfficeTempDir = tempFiles.getLibreofficeDir();
            if (libreOfficeTempDir != null && !libreOfficeTempDir.isEmpty()) {
                Path loTempDir = Path.of(libreOfficeTempDir);
                if (!Files.exists(loTempDir)) {
                    Files.createDirectories(loTempDir);
                    log.info(""Created LibreOffice temp directory: {}"", loTempDir);
                }
            }
        } catch (IOException e) {
            log.error(""Error creating temp directories"", e);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,scheduledCleanup,void scheduledCleanup(),"[124, 166]","{'A233': [(124, 166)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    @Scheduled(
            fixedDelayString =
                    ""#{applicationProperties.system.tempFileManagement.cleanupIntervalMinutes}"",
            timeUnit = TimeUnit.MINUTES)
    public void scheduledCleanup() {
        log.info(""Running scheduled temporary file cleanup"");
        long maxAgeMillis = tempFileManager.getMaxAgeMillis();

        // Clean up registered temp files (managed by TempFileRegistry)
        int registeredDeletedCount = tempFileManager.cleanupOldTempFiles(maxAgeMillis);
        log.info(""Cleaned up {} registered temporary files"", registeredDeletedCount);

        // Clean up registered temp directories
        int directoriesDeletedCount = 0;
        for (Path directory : registry.getTempDirectories()) {
            try {
                if (Files.exists(directory)) {
                    GeneralUtils.deleteDirectory(directory);
                    directoriesDeletedCount++;
                    log.debug(""Cleaned up temporary directory: {}"", directory);
                }
            } catch (IOException e) {
                log.warn(""Failed to clean up temporary directory: {}"", directory, e);
            }
        }

        // Clean up PDFBox cache file
        cleanupPDFBoxCache();

        // Clean up unregistered temp files based on our cleanup strategy
        boolean containerMode = isContainerMode();
        int unregisteredDeletedCount = cleanupUnregisteredFiles(containerMode, true, maxAgeMillis);

        if (registeredDeletedCount > 0
                || unregisteredDeletedCount > 0
                || directoriesDeletedCount > 0) {
            log.info(
                    ""Scheduled cleanup complete. Deleted {} registered files, {} unregistered files, {} directories"",
                    registeredDeletedCount,
                    unregisteredDeletedCount,
                    directoriesDeletedCount);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,runStartupCleanup,void runStartupCleanup(),"[172, 187]","{'A233': [(172, 187)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    private void runStartupCleanup() {
        boolean containerMode = isContainerMode();

        log.info(
                ""Running in {} mode, using {} cleanup strategy"",
                machineType,
                containerMode ? ""aggressive"" : ""conservative"");

        // For startup cleanup, we use a longer timeout for non-container environments
        long maxAgeMillis = containerMode ? 0 : 24 * 60 * 60 * 1000; // 0 or 24 hours

        int totalDeletedCount = cleanupUnregisteredFiles(containerMode, false, maxAgeMillis);
        log.info(
                ""Startup cleanup complete. Deleted {} temporary files/directories"",
                totalDeletedCount);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,cleanupUnregisteredFiles,"int cleanupUnregisteredFiles(boolean,boolean,long)","[197, 269]","{'A233': [(197, 269)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    private int cleanupUnregisteredFiles(
            boolean containerMode, boolean isScheduled, long maxAgeMillis) {
        AtomicInteger totalDeletedCount = new AtomicInteger(0);

        try {
            ApplicationProperties.TempFileManagement tempFiles =
                    applicationProperties.getSystem().getTempFileManagement();
            Path[] dirsToScan;
            if (tempFiles.isCleanupSystemTemp()
                    && tempFiles.getSystemTempDir() != null
                    && !tempFiles.getSystemTempDir().isEmpty()) {
                Path systemTempPath = getSystemTempPath();
                dirsToScan =
                        new Path[] {
                            systemTempPath,
                            Path.of(tempFiles.getBaseTmpDir()),
                            Path.of(tempFiles.getLibreofficeDir())
                        };
            } else {
                dirsToScan =
                        new Path[] {
                            Path.of(tempFiles.getBaseTmpDir()),
                            Path.of(tempFiles.getLibreofficeDir())
                        };
            }

            // Process each directory
            Arrays.stream(dirsToScan)
                    .filter(Files::exists)
                    .forEach(
                            tempDir -> {
                                try {
                                    String phase = isScheduled ? ""scheduled"" : ""startup"";
                                    log.debug(
                                            ""Scanning directory for {} cleanup: {}"",
                                            phase,
                                            tempDir);

                                    AtomicInteger dirDeletedCount = new AtomicInteger(0);
                                    cleanupDirectoryStreaming(
                                            tempDir,
                                            containerMode,
                                            0,
                                            maxAgeMillis,
                                            isScheduled,
                                            path -> {
                                                dirDeletedCount.incrementAndGet();
                                                if (log.isDebugEnabled()) {
                                                    log.debug(
                                                            ""Deleted temp file during {} cleanup: {}"",
                                                            phase,
                                                            path);
                                                }
                                            });

                                    int count = dirDeletedCount.get();
                                    totalDeletedCount.addAndGet(count);
                                    if (count > 0) {
                                        log.info(
                                                ""Cleaned up {} files/directories in {}"",
                                                count,
                                                tempDir);
                                    }
                                } catch (IOException e) {
                                    log.error(""Error during cleanup of directory: {}"", tempDir, e);
                                }
                            });
        } catch (Exception e) {
            log.error(""Error during cleanup of unregistered files"", e);
        }

        return totalDeletedCount.get();
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,getSystemTempPath,Path getSystemTempPath(),"[272, 280]","{'A233': [(272, 280)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    private Path getSystemTempPath() {
        String systemTempDir =
                applicationProperties.getSystem().getTempFileManagement().getSystemTempDir();
        if (systemTempDir != null && !systemTempDir.isEmpty()) {
            return Path.of(systemTempDir);
        } else {
            return Path.of(System.getProperty(""java.io.tmpdir""));
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,isContainerMode,boolean isContainerMode(),"[283, 285]","{'A233': [(283, 285)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    private boolean isContainerMode() {
        return ""Docker"".equals(machineType) || ""Kubernetes"".equals(machineType);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,cleanupDirectoryStreaming,"void cleanupDirectoryStreaming(Path,boolean,int,long,boolean,Consumer<Path>)","[298, 366]","{'A233': [(298, 366)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    private void cleanupDirectoryStreaming(
            Path directory,
            boolean containerMode,
            int depth,
            long maxAgeMillis,
            boolean isScheduled,
            Consumer<Path> onDeleteCallback)
            throws IOException {

        if (depth > MAX_RECURSION_DEPTH) {
            log.debug(""Maximum directory recursion depth reached for: {}"", directory);
            return;
        }

        java.util.List<Path> subdirectories = new java.util.ArrayList<>();

        try (Stream<Path> pathStream = Files.list(directory)) {
            pathStream.forEach(
                    path -> {
                        try {
                            String fileName = path.getFileName().toString();

                            if (SHOULD_SKIP.test(fileName)) {
                                return;
                            }

                            if (Files.isDirectory(path)) {
                                subdirectories.add(path);
                                return;
                            }

                            if (registry.contains(path.toFile())) {
                                return;
                            }

                            if (shouldDeleteFile(path, fileName, containerMode, maxAgeMillis)) {
                                try {
                                    Files.deleteIfExists(path);
                                    onDeleteCallback.accept(path);
                                } catch (IOException e) {
                                    if (e.getMessage() != null
                                            && e.getMessage()
                                                    .contains(""being used by another process"")) {
                                        log.debug(""File locked, skipping delete: {}"", path);
                                    } else {
                                        log.warn(""Failed to delete temp file: {}"", path, e);
                                    }
                                }
                            }
                        } catch (Exception e) {
                            log.warn(""Error processing path: {}"", path, e);
                        }
                    });
        }

        for (Path subdirectory : subdirectories) {
            try {
                cleanupDirectoryStreaming(
                        subdirectory,
                        containerMode,
                        depth + 1,
                        maxAgeMillis,
                        isScheduled,
                        onDeleteCallback);
            } catch (IOException e) {
                log.warn(""Error processing subdirectory: {}"", subdirectory, e);
            }
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,shouldDeleteFile,"boolean shouldDeleteFile(Path,String,boolean,long)","[369, 406]","{'A233': [(369, 406)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    private boolean shouldDeleteFile(
            Path path, String fileName, boolean containerMode, long maxAgeMillis) {
        // First check if it matches our known temp file patterns
        boolean isOurTempFile = IS_OUR_TEMP_FILE.test(fileName);
        boolean isSystemTempFile = IS_SYSTEM_TEMP_FILE.test(fileName);

        // Normal operation - check against temp file patterns
        boolean shouldDelete = isOurTempFile || (containerMode && isSystemTempFile);

        // Get file info for age checks
        long lastModified = 0;
        long currentTime = System.currentTimeMillis();
        boolean isEmptyFile = false;

        try {
            lastModified = Files.getLastModifiedTime(path).toMillis();
            // Special case for zero-byte files - these are often corrupted temp files
            if (Files.size(path) == 0) {
                isEmptyFile = true;
                // For empty files, use a shorter timeout (5 minutes)
                // Delete empty files older than 5 minutes
                if ((currentTime - lastModified) > 5 * 60 * 1000) {
                    shouldDelete = true;
                }
            }
        } catch (IOException e) {
            log.debug(""Could not check file info, skipping: {}"", path);
        }

        // Check file age against maxAgeMillis only if it's not an empty file that we've already
        // decided to delete
        if (!isEmptyFile && shouldDelete && maxAgeMillis > 0) {
            // In normal mode, check age against maxAgeMillis
            shouldDelete = (currentTime - lastModified) > maxAgeMillis;
        }

        return shouldDelete;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,cleanupLibreOfficeTempFiles,void cleanupLibreOfficeTempFiles(),"[409, 430]","{'A233': [(409, 430)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    public void cleanupLibreOfficeTempFiles() {
        // Cleanup known LibreOffice temp directories
        try {
            Set<Path> directories = registry.getTempDirectories();
            for (Path dir : directories) {
                if (dir.getFileName().toString().contains(""libreoffice"") && Files.exists(dir)) {
                    // For directories containing ""libreoffice"", delete all contents
                    // but keep the directory itself for future use
                    cleanupDirectoryStreaming(
                            dir,
                            isContainerMode(),
                            0,
                            0, // age doesn't matter for LibreOffice cleanup
                            false,
                            path -> log.debug(""Cleaned up LibreOffice temp file: {}"", path));
                    log.debug(""Cleaned up LibreOffice temp directory contents: {}"", dir);
                }
            }
        } catch (IOException e) {
            log.warn(""Failed to clean up LibreOffice temp files"", e);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TempFileCleanupService.java,TempFileCleanupService,cleanupPDFBoxCache,void cleanupPDFBoxCache(),"[436, 448]","{'A233': [(436, 448)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TempFileCleanupServiceTest.java,"    private void cleanupPDFBoxCache() {
        try {
            Path userHome = Path.of(System.getProperty(""user.home""));
            Path pdfboxCache = userHome.resolve("".pdfbox.cache"");

            if (Files.exists(pdfboxCache)) {
                Files.deleteIfExists(pdfboxCache);
                log.debug(""Cleaned up PDFBox cache file: {}"", pdfboxCache);
            }
        } catch (IOException e) {
            log.warn(""Failed to clean up PDFBox cache file"", e);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobExecutorService.java,JobExecutorService,runJobGeneric,"ResponseEntity<?> runJobGeneric(boolean,Supplier<Object>)","[67, 69]","{'A233': [(67, 69)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobExecutorServiceTest.java,"    public ResponseEntity<?> runJobGeneric(boolean async, Supplier<Object> work) {
        return runJobGeneric(async, work, -1);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobExecutorService.java,JobExecutorService,runJobGeneric,"ResponseEntity<?> runJobGeneric(boolean,Supplier<Object>,long)","[79, 82]","{'A233': [(79, 82)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobExecutorServiceTest.java,"    public ResponseEntity<?> runJobGeneric(
            boolean async, Supplier<Object> work, long customTimeoutMs) {
        return runJobGeneric(async, work, customTimeoutMs, false, 50);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobExecutorService.java,JobExecutorService,runJobGeneric,"ResponseEntity<?> runJobGeneric(boolean,Supplier<Object>,long,boolean,int)","[94, 217]","{'A233': [(94, 217)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobExecutorServiceTest.java,"    public ResponseEntity<?> runJobGeneric(
            boolean async,
            Supplier<Object> work,
            long customTimeoutMs,
            boolean queueable,
            int resourceWeight) {
        String jobId = UUID.randomUUID().toString();

        // Store the job ID in the request for potential use by other components
        if (request != null) {
            request.setAttribute(""jobId"", jobId);

            // Also track this job ID in the user's session for authorization purposes
            // This ensures users can only cancel their own jobs
            if (request.getSession() != null) {
                @SuppressWarnings(""unchecked"")
                java.util.Set<String> userJobIds =
                        (java.util.Set<String>) request.getSession().getAttribute(""userJobIds"");

                if (userJobIds == null) {
                    userJobIds = new java.util.concurrent.ConcurrentSkipListSet<>();
                    request.getSession().setAttribute(""userJobIds"", userJobIds);
                }

                userJobIds.add(jobId);
                log.debug(""Added job ID {} to user session"", jobId);
            }
        }

        // Determine which timeout to use
        long timeoutToUse = customTimeoutMs > 0 ? customTimeoutMs : effectiveTimeoutMs;

        log.debug(
                ""Running job with ID: {}, async: {}, timeout: {}ms, queueable: {}, weight: {}"",
                jobId,
                async,
                timeoutToUse,
                queueable,
                resourceWeight);

        // Check if we need to queue this job based on resource availability
        boolean shouldQueue =
                queueable
                        && async
                        && // Only async jobs can be queued
                        resourceMonitor.shouldQueueJob(resourceWeight);

        if (shouldQueue) {
            // Queue the job instead of executing immediately
            log.debug(
                    ""Queueing job {} due to resource constraints (weight: {})"",
                    jobId,
                    resourceWeight);

            taskManager.createTask(jobId);

            // Create a specialized wrapper that updates the TaskManager
            Supplier<Object> wrappedWork =
                    () -> {
                        try {
                            Object result = work.get();
                            processJobResult(jobId, result);
                            return result;
                        } catch (Exception e) {
                            log.error(
                                    ""Error executing queued job {}: {}"", jobId, e.getMessage(), e);
                            taskManager.setError(jobId, e.getMessage());
                            throw e;
                        }
                    };

            // Queue the job and get the future
            CompletableFuture<ResponseEntity<?>> future =
                    jobQueue.queueJob(jobId, resourceWeight, wrappedWork, timeoutToUse);

            // Return immediately with job ID
            return ResponseEntity.ok().body(new JobResponse<>(true, jobId, null));
        } else if (async) {
            taskManager.createTask(jobId);
            executor.execute(
                    () -> {
                        try {
                            log.debug(
                                    ""Running async job {} with timeout {} ms"", jobId, timeoutToUse);

                            // Execute with timeout
                            Object result = executeWithTimeout(() -> work.get(), timeoutToUse);
                            processJobResult(jobId, result);
                        } catch (TimeoutException te) {
                            log.error(""Job {} timed out after {} ms"", jobId, timeoutToUse);
                            taskManager.setError(jobId, ""Job timed out"");
                        } catch (Exception e) {
                            log.error(""Error executing job {}: {}"", jobId, e.getMessage(), e);
                            taskManager.setError(jobId, e.getMessage());
                        }
                    });

            return ResponseEntity.ok().body(new JobResponse<>(true, jobId, null));
        } else {
            try {
                log.debug(""Running sync job with timeout {} ms"", timeoutToUse);

                // Execute with timeout
                Object result = executeWithTimeout(() -> work.get(), timeoutToUse);

                // If the result is already a ResponseEntity, return it directly
                if (result instanceof ResponseEntity) {
                    return (ResponseEntity<?>) result;
                }

                // Process different result types
                return handleResultForSyncJob(result);
            } catch (TimeoutException te) {
                log.error(""Synchronous job timed out after {} ms"", timeoutToUse);
                return ResponseEntity.internalServerError()
                        .body(Map.of(""error"", ""Job timed out after "" + timeoutToUse + "" ms""));
            } catch (Exception e) {
                log.error(""Error executing synchronous job: {}"", e.getMessage(), e);
                // Construct a JSON error response
                return ResponseEntity.internalServerError()
                        .body(Map.of(""error"", ""Job failed: "" + e.getMessage()));
            }
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobExecutorService.java,JobExecutorService,processJobResult,"void processJobResult(String,Object)","[225, 381]","{'A233': [(225, 381)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobExecutorServiceTest.java,"    private void processJobResult(String jobId, Object result) {
        try {
            if (result instanceof byte[]) {
                // Store byte array directly to disk to avoid double memory consumption
                String fileId = fileStorage.storeBytes((byte[]) result, ""result.pdf"");
                taskManager.setFileResult(jobId, fileId, ""result.pdf"", ""application/pdf"");
                log.debug(""Stored byte[] result with fileId: {}"", fileId);

                // Let the byte array get collected naturally in the next GC cycle
                // We don't need to force System.gc() which can be harmful
            } else if (result instanceof ResponseEntity) {
                ResponseEntity<?> response = (ResponseEntity<?>) result;
                Object body = response.getBody();

                if (body instanceof byte[]) {
                    // Extract filename from content-disposition header if available
                    String filename = ""result.pdf"";
                    String contentType = ""application/pdf"";

                    if (response.getHeaders().getContentDisposition() != null) {
                        String disposition =
                                response.getHeaders().getContentDisposition().toString();
                        if (disposition.contains(""filename="")) {
                            filename =
                                    disposition.substring(
                                            disposition.indexOf(""filename="") + 9,
                                            disposition.lastIndexOf(""\""""));
                        }
                    }

                    if (response.getHeaders().getContentType() != null) {
                        contentType = response.getHeaders().getContentType().toString();
                    }

                    // Store byte array directly to disk
                    String fileId = fileStorage.storeBytes((byte[]) body, filename);
                    taskManager.setFileResult(jobId, fileId, filename, contentType);
                    log.debug(""Stored ResponseEntity<byte[]> result with fileId: {}"", fileId);

                    // Let the GC handle the memory naturally
                } else {
                    // Check if the response body contains a fileId
                    if (body != null && body.toString().contains(""fileId"")) {
                        try {
                            // Try to extract fileId using reflection
                            java.lang.reflect.Method getFileId =
                                    body.getClass().getMethod(""getFileId"");
                            String fileId = (String) getFileId.invoke(body);

                            if (fileId != null && !fileId.isEmpty()) {
                                // Try to get filename and content type
                                String filename = ""result.pdf"";
                                String contentType = ""application/pdf"";

                                try {
                                    java.lang.reflect.Method getOriginalFileName =
                                            body.getClass().getMethod(""getOriginalFilename"");
                                    String origName = (String) getOriginalFileName.invoke(body);
                                    if (origName != null && !origName.isEmpty()) {
                                        filename = origName;
                                    }
                                } catch (Exception e) {
                                    log.debug(
                                            ""Could not get original filename: {}"", e.getMessage());
                                }

                                try {
                                    java.lang.reflect.Method getContentType =
                                            body.getClass().getMethod(""getContentType"");
                                    String ct = (String) getContentType.invoke(body);
                                    if (ct != null && !ct.isEmpty()) {
                                        contentType = ct;
                                    }
                                } catch (Exception e) {
                                    log.debug(""Could not get content type: {}"", e.getMessage());
                                }

                                taskManager.setFileResult(jobId, fileId, filename, contentType);
                                log.debug(""Extracted fileId from response body: {}"", fileId);

                                taskManager.setComplete(jobId);
                                return;
                            }
                        } catch (Exception e) {
                            log.debug(
                                    ""Failed to extract fileId from response body: {}"",
                                    e.getMessage());
                        }
                    }

                    // Store generic result
                    taskManager.setResult(jobId, body);
                }
            } else if (result instanceof MultipartFile) {
                MultipartFile file = (MultipartFile) result;
                String fileId = fileStorage.storeFile(file);
                taskManager.setFileResult(
                        jobId, fileId, file.getOriginalFilename(), file.getContentType());
                log.debug(""Stored MultipartFile result with fileId: {}"", fileId);
            } else {
                // Check if result has a fileId field
                if (result != null) {
                    try {
                        // Try to extract fileId using reflection
                        java.lang.reflect.Method getFileId =
                                result.getClass().getMethod(""getFileId"");
                        String fileId = (String) getFileId.invoke(result);

                        if (fileId != null && !fileId.isEmpty()) {
                            // Try to get filename and content type
                            String filename = ""result.pdf"";
                            String contentType = ""application/pdf"";

                            try {
                                java.lang.reflect.Method getOriginalFileName =
                                        result.getClass().getMethod(""getOriginalFilename"");
                                String origName = (String) getOriginalFileName.invoke(result);
                                if (origName != null && !origName.isEmpty()) {
                                    filename = origName;
                                }
                            } catch (Exception e) {
                                log.debug(""Could not get original filename: {}"", e.getMessage());
                            }

                            try {
                                java.lang.reflect.Method getContentType =
                                        result.getClass().getMethod(""getContentType"");
                                String ct = (String) getContentType.invoke(result);
                                if (ct != null && !ct.isEmpty()) {
                                    contentType = ct;
                                }
                            } catch (Exception e) {
                                log.debug(""Could not get content type: {}"", e.getMessage());
                            }

                            taskManager.setFileResult(jobId, fileId, filename, contentType);
                            log.debug(""Extracted fileId from result object: {}"", fileId);

                            taskManager.setComplete(jobId);
                            return;
                        }
                    } catch (Exception e) {
                        log.debug(
                                ""Failed to extract fileId from result object: {}"", e.getMessage());
                    }
                }

                // Default case: store the result as is
                taskManager.setResult(jobId, result);
            }

            taskManager.setComplete(jobId);
        } catch (Exception e) {
            log.error(""Error processing job result: {}"", e.getMessage(), e);
            taskManager.setError(jobId, ""Error processing result: "" + e.getMessage());
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobExecutorService.java,JobExecutorService,handleResultForSyncJob,ResponseEntity<?> handleResultForSyncJob(Object),"[390, 414]","{'A233': [(390, 414)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobExecutorServiceTest.java,"    private ResponseEntity<?> handleResultForSyncJob(Object result) throws IOException {
        if (result instanceof byte[]) {
            // Return byte array as PDF
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_PDF)
                    .header(
                            HttpHeaders.CONTENT_DISPOSITION,
                            ""form-data; name=\""attachment\""; filename=\""result.pdf\"""")
                    .body(result);
        } else if (result instanceof MultipartFile) {
            // Return MultipartFile content
            MultipartFile file = (MultipartFile) result;
            return ResponseEntity.ok()
                    .contentType(MediaType.parseMediaType(file.getContentType()))
                    .header(
                            HttpHeaders.CONTENT_DISPOSITION,
                            ""form-data; name=\""attachment\""; filename=\""""
                                    + file.getOriginalFilename()
                                    + ""\"""")
                    .body(file.getBytes());
        } else {
            // Default case: return as JSON
            return ResponseEntity.ok(result);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobExecutorService.java,JobExecutorService,parseSessionTimeout,long parseSessionTimeout(String),"[422, 444]","{'A233': [(422, 444)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobExecutorServiceTest.java,"    private long parseSessionTimeout(String timeout) {
        if (timeout == null || timeout.isEmpty()) {
            return 30 * 60 * 1000; // Default: 30 minutes
        }

        try {
            String value = timeout.replaceAll(""[^\\d.]"", """");
            String unit = timeout.replaceAll(""[\\d.]"", """");

            double numericValue = Double.parseDouble(value);

            return switch (unit.toLowerCase()) {
                case ""s"" -> (long) (numericValue * 1000);
                case ""m"" -> (long) (numericValue * 60 * 1000);
                case ""h"" -> (long) (numericValue * 60 * 60 * 1000);
                case ""d"" -> (long) (numericValue * 24 * 60 * 60 * 1000);
                default -> (long) (numericValue * 60 * 1000); // Default to minutes
            };
        } catch (Exception e) {
            log.warn(""Could not parse session timeout '{}', using default"", timeout);
            return 30 * 60 * 1000; // Default: 30 minutes
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/JobExecutorService.java,JobExecutorService,executeWithTimeout,"T executeWithTimeout(Supplier<T>,long)","[455, 475]","{'A233': [(455, 475)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/JobExecutorServiceTest.java,"    private <T> T executeWithTimeout(Supplier<T> supplier, long timeoutMs)
            throws TimeoutException, Exception {
        // Use the same executor as other async jobs for consistency
        // This ensures all operations run on the same thread pool
        java.util.concurrent.CompletableFuture<T> future =
                java.util.concurrent.CompletableFuture.supplyAsync(supplier, executor);

        try {
            return future.get(timeoutMs, TimeUnit.MILLISECONDS);
        } catch (java.util.concurrent.TimeoutException e) {
            future.cancel(true);
            throw new TimeoutException(""Execution timed out after "" + timeoutMs + "" ms"");
        } catch (java.util.concurrent.ExecutionException e) {
            throw (Exception) e.getCause();
        } catch (java.util.concurrent.CancellationException e) {
            throw new Exception(""Execution was cancelled"", e);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new Exception(""Execution was interrupted"", e);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,createTask,void createTask(String),"[67, 70]","{'A233': [(67, 70)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public void createTask(String jobId) {
        jobResults.put(jobId, JobResult.createNew(jobId));
        log.debug(""Created task with job ID: {}"", jobId);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,setResult,"void setResult(String,Object)","[78, 82]","{'A233': [(78, 82)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public void setResult(String jobId, Object result) {
        JobResult jobResult = getOrCreateJobResult(jobId);
        jobResult.completeWithResult(result);
        log.debug(""Set result for job ID: {}"", jobId);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,setFileResult,"void setFileResult(String,String,String,String)","[92, 127]","{'A233': [(92, 127)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public void setFileResult(
            String jobId, String fileId, String originalFileName, String contentType) {
        JobResult jobResult = getOrCreateJobResult(jobId);

        // Check if this is a ZIP file that should be extracted
        if (isZipFile(contentType, originalFileName)) {
            try {
                List<ResultFile> extractedFiles =
                        extractZipToIndividualFiles(fileId, originalFileName);
                if (!extractedFiles.isEmpty()) {
                    jobResult.completeWithFiles(extractedFiles);
                    log.debug(
                            ""Set multiple file results for job ID: {} with {} files extracted from ZIP"",
                            jobId,
                            extractedFiles.size());
                    return;
                }
            } catch (Exception e) {
                log.warn(
                        ""Failed to extract ZIP file for job {}: {}. Falling back to single file result."",
                        jobId,
                        e.getMessage());
            }
        }

        // Handle as single file using new ResultFile approach
        try {
            long fileSize = fileStorage.getFileSize(fileId);
            jobResult.completeWithSingleFile(fileId, originalFileName, contentType, fileSize);
            log.debug(""Set single file result for job ID: {} with file ID: {}"", jobId, fileId);
        } catch (Exception e) {
            log.warn(
                    ""Failed to get file size for job {}: {}. Using size 0."", jobId, e.getMessage());
            jobResult.completeWithSingleFile(fileId, originalFileName, contentType, 0);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,setMultipleFileResults,"void setMultipleFileResults(String,List<ResultFile>)","[135, 142]","{'A233': [(135, 142)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public void setMultipleFileResults(String jobId, List<ResultFile> resultFiles) {
        JobResult jobResult = getOrCreateJobResult(jobId);
        jobResult.completeWithFiles(resultFiles);
        log.debug(
                ""Set multiple file results for job ID: {} with {} files"",
                jobId,
                resultFiles.size());
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,setError,"void setError(String,String)","[150, 154]","{'A233': [(150, 154)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public void setError(String jobId, String error) {
        JobResult jobResult = getOrCreateJobResult(jobId);
        jobResult.failWithError(error);
        log.debug(""Set error for job ID: {}: {}"", jobId, error);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,setComplete,void setComplete(String),"[161, 170]","{'A233': [(161, 170)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public void setComplete(String jobId) {
        JobResult jobResult = getOrCreateJobResult(jobId);
        if (jobResult.getResult() == null
                && !jobResult.hasFiles()
                && jobResult.getError() == null) {
            // If no result or error has been set, mark it as complete with an empty result
            jobResult.completeWithResult(""Task completed successfully"");
        }
        log.debug(""Marked job ID: {} as complete"", jobId);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,isComplete,boolean isComplete(String),"[178, 181]","{'A233': [(178, 181)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public boolean isComplete(String jobId) {
        JobResult result = jobResults.get(jobId);
        return result != null && result.isComplete();
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,getJobResult,JobResult getJobResult(String),"[189, 191]","{'A233': [(189, 191)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public JobResult getJobResult(String jobId) {
        return jobResults.get(jobId);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,addNote,"boolean addNote(String,String)","[201, 210]","{'A233': [(201, 210)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public boolean addNote(String jobId, String note) {
        JobResult jobResult = jobResults.get(jobId);
        if (jobResult != null) {
            jobResult.addNote(note);
            log.debug(""Added note to job ID: {}: {}"", jobId, note);
            return true;
        }
        log.warn(""Attempted to add note to non-existent job ID: {}"", jobId);
        return false;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,getJobStats,JobStats getJobStats(),"[217, 283]","{'A233': [(217, 283)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public JobStats getJobStats() {
        int totalJobs = jobResults.size();
        int activeJobs = 0;
        int completedJobs = 0;
        int failedJobs = 0;
        int successfulJobs = 0;
        int fileResultJobs = 0;

        LocalDateTime oldestActiveJobTime = null;
        LocalDateTime newestActiveJobTime = null;
        long totalProcessingTimeMs = 0;

        for (JobResult result : jobResults.values()) {
            if (result.isComplete()) {
                completedJobs++;

                // Calculate processing time for completed jobs
                if (result.getCreatedAt() != null && result.getCompletedAt() != null) {
                    long processingTimeMs =
                            java.time.Duration.between(
                                            result.getCreatedAt(), result.getCompletedAt())
                                    .toMillis();
                    totalProcessingTimeMs += processingTimeMs;
                }

                if (result.getError() != null) {
                    failedJobs++;
                } else {
                    successfulJobs++;
                    if (result.hasFiles()) {
                        fileResultJobs++;
                    }
                }
            } else {
                activeJobs++;

                // Track oldest and newest active jobs
                if (result.getCreatedAt() != null) {
                    if (oldestActiveJobTime == null
                            || result.getCreatedAt().isBefore(oldestActiveJobTime)) {
                        oldestActiveJobTime = result.getCreatedAt();
                    }

                    if (newestActiveJobTime == null
                            || result.getCreatedAt().isAfter(newestActiveJobTime)) {
                        newestActiveJobTime = result.getCreatedAt();
                    }
                }
            }
        }

        // Calculate average processing time
        long averageProcessingTimeMs =
                completedJobs > 0 ? totalProcessingTimeMs / completedJobs : 0;

        return JobStats.builder()
                .totalJobs(totalJobs)
                .activeJobs(activeJobs)
                .completedJobs(completedJobs)
                .failedJobs(failedJobs)
                .successfulJobs(successfulJobs)
                .fileResultJobs(fileResultJobs)
                .oldestActiveJobTime(oldestActiveJobTime)
                .newestActiveJobTime(newestActiveJobTime)
                .averageProcessingTimeMs(averageProcessingTimeMs)
                .build();
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,getOrCreateJobResult,JobResult getOrCreateJobResult(String),"[291, 293]","{'A233': [(291, 293)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    private JobResult getOrCreateJobResult(String jobId) {
        return jobResults.computeIfAbsent(jobId, JobResult::createNew);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,cleanupOldJobs,void cleanupOldJobs(),"[296, 325]","{'A233': [(296, 325)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public void cleanupOldJobs() {
        LocalDateTime expiryThreshold =
                LocalDateTime.now().minus(jobResultExpiryMinutes, ChronoUnit.MINUTES);
        int removedCount = 0;

        try {
            for (Map.Entry<String, JobResult> entry : jobResults.entrySet()) {
                JobResult result = entry.getValue();

                // Remove completed jobs that are older than the expiry threshold
                if (result.isComplete()
                        && result.getCompletedAt() != null
                        && result.getCompletedAt().isBefore(expiryThreshold)) {

                    // Clean up file results
                    cleanupJobFiles(result, entry.getKey());

                    // Remove the job result
                    jobResults.remove(entry.getKey());
                    removedCount++;
                }
            }

            if (removedCount > 0) {
                log.info(""Cleaned up {} expired job results"", removedCount);
            }
        } catch (Exception e) {
            log.error(""Error during job cleanup: {}"", e.getMessage(), e);
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,shutdown,void shutdown(),"[328, 340]","{'A233': [(328, 340)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    @PreDestroy
    public void shutdown() {
        try {
            log.info(""Shutting down job result cleanup executor"");
            cleanupExecutor.shutdown();
            if (!cleanupExecutor.awaitTermination(5, TimeUnit.SECONDS)) {
                cleanupExecutor.shutdownNow();
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            cleanupExecutor.shutdownNow();
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,isZipFile,"boolean isZipFile(String,String)","[343, 355]","{'A233': [(343, 355)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    private boolean isZipFile(String contentType, String fileName) {
        if (contentType != null
                && (contentType.equals(""application/zip"")
                        || contentType.equals(""application/x-zip-compressed""))) {
            return true;
        }

        if (fileName != null && fileName.toLowerCase().endsWith("".zip"")) {
            return true;
        }

        return false;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,extractZipToIndividualFiles,"List<ResultFile> extractZipToIndividualFiles(String,String)","[358, 409]","{'A233': [(358, 409)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    private List<ResultFile> extractZipToIndividualFiles(
            String zipFileId, String originalZipFileName) throws IOException {
        List<ResultFile> extractedFiles = new ArrayList<>();

        MultipartFile zipFile = fileStorage.retrieveFile(zipFileId);

        try (ZipInputStream zipIn =
                ZipSecurity.createHardenedInputStream(
                        new ByteArrayInputStream(zipFile.getBytes()))) {
            ZipEntry entry;
            while ((entry = zipIn.getNextEntry()) != null) {
                if (!entry.isDirectory()) {
                    // Use buffered reading for memory safety
                    ByteArrayOutputStream out = new ByteArrayOutputStream();
                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = zipIn.read(buffer)) != -1) {
                        out.write(buffer, 0, bytesRead);
                    }
                    byte[] fileContent = out.toByteArray();

                    String contentType = determineContentType(entry.getName());
                    String individualFileId = fileStorage.storeBytes(fileContent, entry.getName());

                    ResultFile resultFile =
                            ResultFile.builder()
                                    .fileId(individualFileId)
                                    .fileName(entry.getName())
                                    .contentType(contentType)
                                    .fileSize(fileContent.length)
                                    .build();

                    extractedFiles.add(resultFile);
                    log.debug(
                            ""Extracted file: {} (size: {} bytes)"",
                            entry.getName(),
                            fileContent.length);
                }
                zipIn.closeEntry();
            }
        }

        // Clean up the original ZIP file after extraction
        try {
            fileStorage.deleteFile(zipFileId);
            log.debug(""Cleaned up original ZIP file: {}"", zipFileId);
        } catch (Exception e) {
            log.warn(""Failed to clean up original ZIP file {}: {}"", zipFileId, e.getMessage());
        }

        return extractedFiles;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,determineContentType,String determineContentType(String),"[412, 433]","{'A233': [(412, 433)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    private String determineContentType(String fileName) {
        if (fileName == null) {
            return MediaType.APPLICATION_OCTET_STREAM_VALUE;
        }

        String lowerName = fileName.toLowerCase();
        if (lowerName.endsWith("".pdf"")) {
            return MediaType.APPLICATION_PDF_VALUE;
        } else if (lowerName.endsWith("".txt"")) {
            return MediaType.TEXT_PLAIN_VALUE;
        } else if (lowerName.endsWith("".json"")) {
            return MediaType.APPLICATION_JSON_VALUE;
        } else if (lowerName.endsWith("".xml"")) {
            return MediaType.APPLICATION_XML_VALUE;
        } else if (lowerName.endsWith("".jpg"") || lowerName.endsWith("".jpeg"")) {
            return MediaType.IMAGE_JPEG_VALUE;
        } else if (lowerName.endsWith("".png"")) {
            return MediaType.IMAGE_PNG_VALUE;
        } else {
            return MediaType.APPLICATION_OCTET_STREAM_VALUE;
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,cleanupJobFiles,"void cleanupJobFiles(JobResult,String)","[436, 451]","{'A233': [(436, 451)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    private void cleanupJobFiles(JobResult result, String jobId) {
        // Clean up all result files
        if (result.hasFiles()) {
            for (ResultFile resultFile : result.getAllResultFiles()) {
                try {
                    fileStorage.deleteFile(resultFile.getFileId());
                } catch (Exception e) {
                    log.warn(
                            ""Failed to delete file {} for job {}: {}"",
                            resultFile.getFileId(),
                            jobId,
                            e.getMessage());
                }
            }
        }
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/TaskManager.java,TaskManager,findResultFileByFileId,ResultFile findResultFileByFileId(String),"[454, 465]","{'A233': [(454, 465)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/service/TaskManagerTest.java,"    public ResultFile findResultFileByFileId(String fileId) {
        for (JobResult jobResult : jobResults.values()) {
            if (jobResult.hasFiles()) {
                for (ResultFile resultFile : jobResult.getAllResultFiles()) {
                    if (fileId.equals(resultFile.getFileId())) {
                        return resultFile;
                    }
                }
            }
        }
        return null;
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService,resolveFilePath,Path resolveFilePath(String),"[20, 22]","{'A233': [(20, 22)]}",{'A233': 1.0},A233,,"    public Path resolveFilePath(String fileId) {
        return Path.of(tempDirPath).resolve(fileId);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService,toMockMultipartFile,"MultipartFile toMockMultipartFile(String,byte[])","[24, 26]","{'A233': [(24, 26)]}",{'A233': 1.0},A233,,"    public MultipartFile toMockMultipartFile(String name, byte[] data) throws IOException {
        return new CustomMultipartFile(name, data);
    }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService.CustomMultipartFile,getName,String getName(),"[38, 41]","{'A233': [(38, 41)]}",{'A233': 1.0},A233,,"        @Override
        public String getName() {
            return name;
        }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService.CustomMultipartFile,getOriginalFilename,String getOriginalFilename(),"[43, 46]","{'A233': [(43, 46)]}",{'A233': 1.0},A233,,"        @Override
        public String getOriginalFilename() {
            return name;
        }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService.CustomMultipartFile,getContentType,String getContentType(),"[48, 51]","{'A233': [(48, 51)]}",{'A233': 1.0},A233,,"        @Override
        public String getContentType() {
            return ""application/pdf"";
        }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService.CustomMultipartFile,isEmpty,boolean isEmpty(),"[53, 56]","{'A233': [(53, 56)]}",{'A233': 1.0},A233,,"        @Override
        public boolean isEmpty() {
            return content == null || content.length == 0;
        }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService.CustomMultipartFile,getSize,long getSize(),"[58, 61]","{'A233': [(58, 61)]}",{'A233': 1.0},A233,,"        @Override
        public long getSize() {
            return content.length;
        }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService.CustomMultipartFile,getBytes,byte[] getBytes(),"[63, 66]","{'A233': [(63, 66)]}",{'A233': 1.0},A233,,"        @Override
        public byte[] getBytes() throws IOException {
            return content;
        }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService.CustomMultipartFile,getInputStream,java.io.InputStream getInputStream(),"[68, 71]","{'A233': [(68, 71)]}",{'A233': 1.0},A233,,"        @Override
        public java.io.InputStream getInputStream() throws IOException {
            return new ByteArrayInputStream(content);
        }
"
stirling.software.common.service,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/service/FileOrUploadService.java,FileOrUploadService.CustomMultipartFile,transferTo,void transferTo(java.io.File),"[73, 76]","{'A233': [(73, 76)]}",{'A233': 1.0},A233,,"        @Override
        public void transferTo(java.io.File dest) throws IOException, IllegalStateException {
            Files.write(dest.toPath(), content);
        }
"
stirling.software.common.model.enumeration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/enumeration/Role.java,Role,getRoleNameByRoleId,String getRoleNameByRoleId(String),"[41, 46]","{'A236': [(41, 46)]}",{'A236': 1.0},A236,,"    public static String getRoleNameByRoleId(String roleId) {
        // Using the fromString method to get the Role enum based on the roleId
        Role role = fromString(roleId);
        // Return the roleName of the found Role enum
        return role.getRoleName();
    }
"
stirling.software.common.model.enumeration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/enumeration/Role.java,Role,getAllRoleDetails,"Map<String, String> getAllRoleDetails()","[49, 56]","{'A236': [(49, 56)]}",{'A236': 1.0},A236,,"    public static Map<String, String> getAllRoleDetails() {
        // Using LinkedHashMap to preserve order
        Map<String, String> roleDetails = new LinkedHashMap<>();
        for (Role role : Role.values()) {
            roleDetails.put(role.getRoleId(), role.getRoleName());
        }
        return roleDetails;
    }
"
stirling.software.common.model.enumeration,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/enumeration/Role.java,Role,fromString,Role fromString(String),"[58, 65]","{'A236': [(58, 65)]}",{'A236': 1.0},A236,,"    public static Role fromString(String roleId) {
        for (Role role : Role.values()) {
            if (role.getRoleId().equalsIgnoreCase(roleId)) {
                return role;
            }
        }
        throw new IllegalArgumentException(""No Role defined for id: "" + roleId);
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/InputStreamTemplateResource.java,InputStreamTemplateResource,reader,Reader reader(),"[19, 22]","{'A233': [(19, 22)]}",{'A233': 1.0},A233,,"    @Override
    public Reader reader() throws IOException {
        return new InputStreamReader(inputStream, characterEncoding);
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/InputStreamTemplateResource.java,InputStreamTemplateResource,relative,ITemplateResource relative(String),"[24, 28]","{'A233': [(24, 28)]}",{'A233': 1.0},A233,,"    @Override
    public ITemplateResource relative(String relativeLocation) {
        // Implement logic for relative resources, if needed
        throw new UnsupportedOperationException(""Relative resources not supported"");
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/InputStreamTemplateResource.java,InputStreamTemplateResource,getDescription,String getDescription(),"[30, 33]","{'A233': [(30, 33)]}",{'A233': 1.0},A233,,"    @Override
    public String getDescription() {
        return ""InputStream resource [Stream]"";
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/InputStreamTemplateResource.java,InputStreamTemplateResource,getBaseName,String getBaseName(),"[35, 38]","{'A233': [(35, 38)]}",{'A233': 1.0},A233,,"    @Override
    public String getBaseName() {
        return ""streamResource"";
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/InputStreamTemplateResource.java,InputStreamTemplateResource,exists,boolean exists(),"[40, 43]","{'A233': [(40, 43)]}",{'A233': 1.0},A233,,"    @Override
    public boolean exists() {
        return inputStream != null;
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,createNew,JobResult createNew(String),"[56, 62]","{'A233': [(56, 62)]}",{'A233': 1.0},A233,,"    public static JobResult createNew(String jobId) {
        return JobResult.builder()
                .jobId(jobId)
                .complete(false)
                .createdAt(LocalDateTime.now())
                .build();
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,completeWithResult,void completeWithResult(Object),"[69, 73]","{'A233': [(69, 73)]}",{'A233': 1.0},A233,,"    public void completeWithResult(Object result) {
        this.complete = true;
        this.result = result;
        this.completedAt = LocalDateTime.now();
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,failWithError,void failWithError(String),"[80, 84]","{'A233': [(80, 84)]}",{'A233': 1.0},A233,,"    public void failWithError(String error) {
        this.complete = true;
        this.error = error;
        this.completedAt = LocalDateTime.now();
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,completeWithFiles,void completeWithFiles(List<ResultFile>),"[91, 95]","{'A233': [(91, 95)]}",{'A233': 1.0},A233,,"    public void completeWithFiles(List<ResultFile> resultFiles) {
        this.complete = true;
        this.resultFiles = new ArrayList<>(resultFiles);
        this.completedAt = LocalDateTime.now();
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,completeWithSingleFile,"void completeWithSingleFile(String,String,String,long)","[105, 115]","{'A233': [(105, 115)]}",{'A233': 1.0},A233,,"    public void completeWithSingleFile(
            String fileId, String fileName, String contentType, long fileSize) {
        ResultFile resultFile =
                ResultFile.builder()
                        .fileId(fileId)
                        .fileName(fileName)
                        .contentType(contentType)
                        .fileSize(fileSize)
                        .build();
        completeWithFiles(List.of(resultFile));
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,hasFiles,boolean hasFiles(),"[122, 124]","{'A233': [(122, 124)]}",{'A233': 1.0},A233,,"    public boolean hasFiles() {
        return resultFiles != null && !resultFiles.isEmpty();
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,hasMultipleFiles,boolean hasMultipleFiles(),"[131, 133]","{'A233': [(131, 133)]}",{'A233': 1.0},A233,,"    public boolean hasMultipleFiles() {
        return resultFiles != null && resultFiles.size() > 1;
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,getAllResultFiles,List<ResultFile> getAllResultFiles(),"[140, 145]","{'A233': [(140, 145)]}",{'A233': 1.0},A233,,"    public List<ResultFile> getAllResultFiles() {
        if (resultFiles != null && !resultFiles.isEmpty()) {
            return Collections.unmodifiableList(resultFiles);
        }
        return Collections.emptyList();
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,addNote,void addNote(String),"[152, 154]","{'A233': [(152, 154)]}",{'A233': 1.0},A233,,"    public void addNote(String note) {
        this.notes.add(note);
    }
"
stirling.software.common.model.job,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/job/JobResult.java,JobResult,getNotes,List<String> getNotes(),"[161, 163]","{'A233': [(161, 163)]}",{'A233': 1.0},A233,,"    public List<String> getNotes() {
        return Collections.unmodifiableList(notes);
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/KeycloakProvider.java,KeycloakProvider,getName,String getName(),"[35, 38]","{'A236': [(36, 37)], 'A234': [(35, 35), (38, 38)]}","{'A236': 0.5, 'A234': 0.5}",A236,,"    @Override
    public String getName() {
        return NAME;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/KeycloakProvider.java,KeycloakProvider,getClientName,String getClientName(),"[40, 43]","{'A236': [(41, 42)], 'A234': [(40, 40), (43, 43)]}","{'A236': 0.5, 'A234': 0.5}",A236,,"    @Override
    public String getClientName() {
        return CLIENT_NAME;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/KeycloakProvider.java,KeycloakProvider,getScopes,Collection<String> getScopes(),"[45, 56]","{'A236': [(47, 48), (55, 55)], 'A234': [(45, 46), (49, 54), (56, 56)]}","{'A236': 0.25, 'A234': 0.75}",A234,,"    @Override
    public Collection<String> getScopes() {
        Collection<String> scopes = super.getScopes();

        if (scopes == null || scopes.isEmpty()) {
            scopes = new ArrayList<>();
            scopes.add(""profile"");
            scopes.add(""email"");
        }

        return scopes;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/KeycloakProvider.java,KeycloakProvider,toString,String toString(),"[58, 71]","{'A236': [(61, 61), (63, 63), (65, 65), (67, 67), (69, 69)], 'A234': [(58, 60), (62, 62), (64, 64), (66, 66), (68, 68), (70, 71)]}","{'A236': 0.35714285714285715, 'A234': 0.6428571428571429}",A234,,"    @Override
    public String toString() {
        return ""Keycloak [issuer=""
                + getIssuer()
                + "", clientId=""
                + getClientId()
                + "", clientSecret=""
                + (getClientSecret() != null && !getClientSecret().isBlank() ? ""*****"" : ""NULL"")
                + "", scopes=""
                + getScopes()
                + "", useAsUsername=""
                + getUseAsUsername()
                + ""]"";
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/Provider.java,Provider,setScopes,void setScopes(String),"[56, 60]","{'A236': [(56, 57), (59, 60)], 'A233': [(58, 58)]}","{'A236': 0.8, 'A233': 0.2}",A236,,"    public void setScopes(String scopes) {
        if (scopes != null && !scopes.isBlank()) {
            this.scopes = Arrays.stream(scopes.split("","")).map(String::trim).toList();
        }
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/Provider.java,Provider,validateUsernameAttribute,UsernameAttribute validateUsernameAttribute(UsernameAttribute),"[62, 77]","{'A236': [(62, 77)]}",{'A236': 1.0},A236,,"    private UsernameAttribute validateUsernameAttribute(UsernameAttribute usernameAttribute) {
        switch (name) {
            case ""google"" -> {
                return validateGoogleUsernameAttribute(usernameAttribute);
            }
            case ""github"" -> {
                return validateGitHubUsernameAttribute(usernameAttribute);
            }
            case ""keycloak"" -> {
                return validateKeycloakUsernameAttribute(usernameAttribute);
            }
            default -> {
                return usernameAttribute;
            }
        }
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/Provider.java,Provider,validateKeycloakUsernameAttribute,UsernameAttribute validateKeycloakUsernameAttribute(UsernameAttribute),"[79, 89]","{'A236': [(79, 89)]}",{'A236': 1.0},A236,,"    private UsernameAttribute validateKeycloakUsernameAttribute(
            UsernameAttribute usernameAttribute) {
        switch (usernameAttribute) {
            case EMAIL, NAME, GIVEN_NAME, FAMILY_NAME, PREFERRED_USERNAME -> {
                return usernameAttribute;
            }
            default ->
                    throw new UnsupportedClaimException(
                            String.format(EXCEPTION_MESSAGE, usernameAttribute, clientName));
        }
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/Provider.java,Provider,validateGoogleUsernameAttribute,UsernameAttribute validateGoogleUsernameAttribute(UsernameAttribute),"[91, 100]","{'A236': [(91, 100)]}",{'A236': 1.0},A236,,"    private UsernameAttribute validateGoogleUsernameAttribute(UsernameAttribute usernameAttribute) {
        switch (usernameAttribute) {
            case EMAIL, NAME, GIVEN_NAME, FAMILY_NAME -> {
                return usernameAttribute;
            }
            default ->
                    throw new UnsupportedClaimException(
                            String.format(EXCEPTION_MESSAGE, usernameAttribute, clientName));
        }
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/Provider.java,Provider,validateGitHubUsernameAttribute,UsernameAttribute validateGitHubUsernameAttribute(UsernameAttribute),"[102, 111]","{'A236': [(102, 111)]}",{'A236': 1.0},A236,,"    private UsernameAttribute validateGitHubUsernameAttribute(UsernameAttribute usernameAttribute) {
        switch (usernameAttribute) {
            case LOGIN, EMAIL, NAME -> {
                return usernameAttribute;
            }
            default ->
                    throw new UnsupportedClaimException(
                            String.format(EXCEPTION_MESSAGE, usernameAttribute, clientName));
        }
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/Provider.java,Provider,toString,String toString(),"[113, 128]","{'A236': [(113, 128)]}",{'A236': 1.0},A236,,"    @Override
    public String toString() {
        return ""Provider [name=""
                + getName()
                + "", clientName=""
                + getClientName()
                + "", clientId=""
                + getClientId()
                + "", clientSecret=""
                + (getClientSecret() != null && !getClientSecret().isEmpty() ? ""*****"" : ""NULL"")
                + "", scopes=""
                + getScopes()
                + "", useAsUsername=""
                + getUseAsUsername()
                + ""]"";
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GitHubProvider.java,GitHubProvider,getAuthorizationUri,String getAuthorizationUri(),"[37, 40]","{'A236': [(37, 40)]}",{'A236': 1.0},A236,,"    @Override
    public String getAuthorizationUri() {
        return AUTHORIZATION_URI;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GitHubProvider.java,GitHubProvider,getTokenUri,String getTokenUri(),"[42, 45]","{'A236': [(42, 45)]}",{'A236': 1.0},A236,,"    @Override
    public String getTokenUri() {
        return TOKEN_URI;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GitHubProvider.java,GitHubProvider,getUserInfoUri,String getUserInfoUri(),"[47, 50]","{'A236': [(47, 50)]}",{'A236': 1.0},A236,,"    @Override
    public String getUserInfoUri() {
        return USER_INFO_URI;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GitHubProvider.java,GitHubProvider,getName,String getName(),"[52, 55]","{'A236': [(52, 55)]}",{'A236': 1.0},A236,,"    @Override
    public String getName() {
        return NAME;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GitHubProvider.java,GitHubProvider,getClientName,String getClientName(),"[57, 60]","{'A236': [(57, 60)]}",{'A236': 1.0},A236,,"    @Override
    public String getClientName() {
        return CLIENT_NAME;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GitHubProvider.java,GitHubProvider,getScopes,Collection<String> getScopes(),"[62, 72]","{'A236': [(62, 72)]}",{'A236': 1.0},A236,,"    @Override
    public Collection<String> getScopes() {
        Collection<String> scopes = super.getScopes();

        if (scopes == null || scopes.isEmpty()) {
            scopes = new ArrayList<>();
            scopes.add(""read:user"");
        }

        return scopes;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GitHubProvider.java,GitHubProvider,toString,String toString(),"[74, 85]","{'A236': [(74, 85)]}",{'A236': 1.0},A236,,"    @Override
    public String toString() {
        return ""GitHub [clientId=""
                + getClientId()
                + "", clientSecret=""
                + (getClientSecret() != null && !getClientSecret().isEmpty() ? ""*****"" : ""NULL"")
                + "", scopes=""
                + getScopes()
                + "", useAsUsername=""
                + getUseAsUsername()
                + ""]"";
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GoogleProvider.java,GoogleProvider,getAuthorizationUri,String getAuthorizationUri(),"[38, 40]","{'A236': [(38, 39)], 'A234': [(40, 40)]}","{'A236': 0.6666666666666666, 'A234': 0.3333333333333333}",A236,,"    public String getAuthorizationUri() {
        return AUTHORIZATION_URI;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GoogleProvider.java,GoogleProvider,getTokenUri,String getTokenUri(),"[42, 44]","{'A236': [(42, 43)], 'A234': [(44, 44)]}","{'A236': 0.6666666666666666, 'A234': 0.3333333333333333}",A236,,"    public String getTokenUri() {
        return TOKEN_URI;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GoogleProvider.java,GoogleProvider,getUserinfoUri,String getUserinfoUri(),"[46, 48]","{'A236': [(46, 47)], 'A234': [(48, 48)]}","{'A236': 0.6666666666666666, 'A234': 0.3333333333333333}",A236,,"    public String getUserinfoUri() {
        return USER_INFO_URI;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GoogleProvider.java,GoogleProvider,getName,String getName(),"[50, 53]","{'A236': [(51, 52)], 'A234': [(50, 50), (53, 53)]}","{'A236': 0.5, 'A234': 0.5}",A236,,"    @Override
    public String getName() {
        return NAME;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GoogleProvider.java,GoogleProvider,getClientName,String getClientName(),"[55, 58]","{'A236': [(56, 57)], 'A234': [(55, 55), (58, 58)]}","{'A236': 0.5, 'A234': 0.5}",A236,,"    @Override
    public String getClientName() {
        return CLIENT_NAME;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GoogleProvider.java,GoogleProvider,getScopes,Collection<String> getScopes(),"[60, 71]","{'A236': [(62, 63), (70, 70)], 'A234': [(60, 61), (64, 69), (71, 71)]}","{'A236': 0.25, 'A234': 0.75}",A234,,"    @Override
    public Collection<String> getScopes() {
        Collection<String> scopes = super.getScopes();

        if (scopes == null || scopes.isEmpty()) {
            scopes = new ArrayList<>();
            scopes.add(""https://www.googleapis.com/auth/userinfo.email"");
            scopes.add(""https://www.googleapis.com/auth/userinfo.profile"");
        }

        return scopes;
    }
"
stirling.software.common.model.oauth2,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/oauth2/GoogleProvider.java,GoogleProvider,toString,String toString(),"[73, 84]","{'A236': [(76, 76), (78, 78), (80, 80), (82, 82)], 'A234': [(73, 75), (77, 77), (79, 79), (81, 81), (83, 84)]}","{'A236': 0.3333333333333333, 'A234': 0.6666666666666666}",A234,,"    @Override
    public String toString() {
        return ""Google [clientId=""
                + getClientId()
                + "", clientSecret=""
                + (getClientSecret() != null && !getClientSecret().isEmpty() ? ""*****"" : ""NULL"")
                + "", scopes=""
                + getScopes()
                + "", useAsUsername=""
                + getUseAsUsername()
                + ""]"";
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties,dynamicYamlPropertySource,PropertySource<?> dynamicYamlPropertySource(ConfigurableEnvironment),"[65, 89]","{'A233': [(65, 66), (68, 82), (84, 89)], 'A234': [(67, 67), (83, 83)]}","{'A233': 0.92, 'A234': 0.08}",A233,,"    @Bean
    public PropertySource<?> dynamicYamlPropertySource(ConfigurableEnvironment environment)
            throws IOException {
        String configPath = InstallationPathConfig.getSettingsPath();
        log.debug(""Attempting to load settings from: "" + configPath);

        File file = new File(configPath);
        if (!file.exists()) {
            log.error(""Warning: Settings file does not exist at: "" + configPath);
        }

        Resource resource = new FileSystemResource(configPath);
        if (!resource.exists()) {
            throw new FileNotFoundException(""Settings file not found at: "" + configPath);
        }

        EncodedResource encodedResource = new EncodedResource(resource);
        PropertySource<?> propertySource =
                new YamlPropertySourceFactory().createPropertySource(null, encodedResource);
        environment.getPropertySources().addFirst(propertySource);

        log.debug(""Loaded properties: "" + propertySource.getSource());

        return propertySource;
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security,isAltLogin,Boolean isAltLogin(),"[117, 119]","{'A234': [(117, 119)]}",{'A234': 1.0},A234,,"        public Boolean isAltLogin() {
            return saml2.getEnabled() || oauth2.getEnabled();
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.LoginMethods,toString,String toString(),"[133, 136]","{'A234': [(133, 136)]}",{'A234': 1.0},A234,,"            @Override
            public String toString() {
                return method;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security,isUserPass,boolean isUserPass(),"[139, 142]","{'A236': [(139, 142)]}",{'A236': 1.0},A236,,"        public boolean isUserPass() {
            return (loginMethod.equalsIgnoreCase(LoginMethods.NORMAL.toString())
                    || loginMethod.equalsIgnoreCase(LoginMethods.ALL.toString()));
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security,isOauth2Active,boolean isOauth2Active(),"[144, 148]","{'A236': [(144, 148)]}",{'A236': 1.0},A236,,"        public boolean isOauth2Active() {
            return (oauth2 != null
                    && oauth2.getEnabled()
                    && !loginMethod.equalsIgnoreCase(LoginMethods.NORMAL.toString()));
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security,isSaml2Active,boolean isSaml2Active(),"[150, 154]","{'A236': [(150, 154)]}",{'A236': 1.0},A236,,"        public boolean isSaml2Active() {
            return (saml2 != null
                    && saml2.getEnabled()
                    && !loginMethod.equalsIgnoreCase(LoginMethods.NORMAL.toString()));
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.SAML2,getIdpMetadataUri,InputStream getIdpMetadataUri(),"[179, 193]","{'A234': [(179, 193)]}",{'A234': 1.0},A234,,"            public InputStream getIdpMetadataUri() throws IOException {
                if (idpMetadataUri.startsWith(""classpath:"")) {
                    return new ClassPathResource(idpMetadataUri.substring(""classpath"".length()))
                            .getInputStream();
                }
                try {
                    URI uri = new URI(idpMetadataUri);
                    URL url = uri.toURL();
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod(""GET"");
                    return connection.getInputStream();
                } catch (URISyntaxException e) {
                    throw new IOException(""Invalid URI format: "" + idpMetadataUri, e);
                }
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.SAML2,getSpCert,Resource getSpCert(),"[195, 202]","{'A233': [(196, 196)], 'A234': [(195, 195), (197, 202)]}","{'A233': 0.125, 'A234': 0.875}",A234,,"            public Resource getSpCert() {
                if (spCert == null) return null;
                if (spCert.startsWith(""classpath:"")) {
                    return new ClassPathResource(spCert.substring(""classpath:"".length()));
                } else {
                    return new FileSystemResource(spCert);
                }
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.SAML2,getIdpCert,Resource getIdpCert(),"[204, 211]","{'A236': [(204, 204)], 'A233': [(205, 205)], 'A234': [(206, 211)]}","{'A236': 0.125, 'A233': 0.125, 'A234': 0.75}",A234,,"            public Resource getIdpCert() {
                if (idpCert == null) return null;
                if (idpCert.startsWith(""classpath:"")) {
                    return new ClassPathResource(idpCert.substring(""classpath:"".length()));
                } else {
                    return new FileSystemResource(idpCert);
                }
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.SAML2,getPrivateKey,Resource getPrivateKey(),"[213, 219]","{'A233': [(218, 219)], 'A234': [(213, 217)]}","{'A233': 0.2857142857142857, 'A234': 0.7142857142857143}",A234,,"            public Resource getPrivateKey() {
                if (privateKey.startsWith(""classpath:"")) {
                    return new ClassPathResource(privateKey.substring(""classpath:"".length()));
                } else {
                    return new FileSystemResource(privateKey);
                }
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.OAUTH2,setScopes,void setScopes(String),"[235, 239]","{'A236': [(237, 237)], 'A238': [(235, 236), (238, 239)]}","{'A236': 0.2, 'A238': 0.8}",A238,,"            public void setScopes(String scopes) {
                List<String> scopesList =
                        Arrays.stream(scopes.split("","")).map(String::trim).toList();
                this.scopes.addAll(scopesList);
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.OAUTH2,isValid,"boolean isValid(String,String)","[241, 243]","{'A233': [(242, 242)], 'A238': [(241, 241), (243, 243)]}","{'A233': 0.3333333333333333, 'A238': 0.6666666666666666}",A238,,"            protected boolean isValid(String value, String name) {
                return value != null && !value.trim().isEmpty();
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.OAUTH2,isValid,"boolean isValid(Collection<String>,String)","[245, 247]","{'A233': [(246, 246)], 'A238': [(245, 245), (247, 247)]}","{'A233': 0.3333333333333333, 'A238': 0.6666666666666666}",A238,,"            protected boolean isValid(Collection<String> value, String name) {
                return value != null && !value.isEmpty();
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.OAUTH2,isSettingsValid,boolean isSettingsValid(),"[249, 255]","{'A236': [(250, 254)], 'A238': [(249, 249), (255, 255)]}","{'A236': 0.7142857142857143, 'A238': 0.2857142857142857}",A236,,"            public boolean isSettingsValid() {
                return !ValidationUtils.isStringEmpty(this.getIssuer())
                        && !ValidationUtils.isStringEmpty(this.getClientId())
                        && !ValidationUtils.isStringEmpty(this.getClientSecret())
                        && !ValidationUtils.isCollectionEmpty(this.getScopes())
                        && !ValidationUtils.isStringEmpty(this.getUseAsUsername());
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Security.OAUTH2.Client,get,Provider get(String),"[263, 275]","{'A236': [(264, 274)], 'A234': [(263, 263)], 'A238': [(275, 275)]}","{'A236': 0.8461538461538461, 'A234': 0.07692307692307693, 'A238': 0.07692307692307693}",A236,,"                public Provider get(String registrationId) throws UnsupportedProviderException {
                    return switch (registrationId.toLowerCase()) {
                        case ""google"" -> getGoogle();
                        case ""github"" -> getGithub();
                        case ""keycloak"" -> getKeycloak();
                        default ->
                                throw new UnsupportedProviderException(
                                        ""Logout from the provider ""
                                                + registrationId
                                                + "" is not supported. ""
                                                + ""Report it at https://github.com/Stirling-Tools/Stirling-PDF/issues"");
                    };
                }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.System,isAnalyticsEnabled,boolean isAnalyticsEnabled(),"[297, 299]","{'A234': [(297, 299)]}",{'A234': 1.0},A234,,"        public boolean isAnalyticsEnabled() {
            return this.getEnableAnalytics() != null && this.getEnableAnalytics();
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.TempFileManagement,getBaseTmpDir,String getBaseTmpDir(),"[332, 336]","{'A233': [(332, 336)]}",{'A233': 1.0},A233,,"        public String getBaseTmpDir() {
            return baseTmpDir != null && !baseTmpDir.isEmpty()
                    ? baseTmpDir
                    : java.lang.System.getProperty(""java.io.tmpdir"") + ""/stirling-pdf"";
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.TempFileManagement,getLibreofficeDir,String getLibreofficeDir(),"[338, 342]","{'A233': [(338, 342)]}",{'A233': 1.0},A233,,"        public String getLibreofficeDir() {
            return libreofficeDir != null && !libreofficeDir.isEmpty()
                    ? libreofficeDir
                    : getBaseTmpDir() + ""/libreoffice"";
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Driver,toString,String toString(),"[369, 377]","{'A236': [(369, 377)]}",{'A236': 1.0},A236,,"        @Override
        public String toString() {
            return """"""
                Driver {
                  driverName='%s'
                }
                """"""
                    .formatted(driverName);
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Ui,getAppName,String getAppName(),"[387, 389]","{'A233': [(387, 389)]}",{'A233': 1.0},A233,,"        public String getAppName() {
            return appName != null && appName.trim().length() > 0 ? appName : null;
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Ui,getHomeDescription,String getHomeDescription(),"[391, 395]","{'A233': [(391, 395)]}",{'A233': 1.0},A233,,"        public String getHomeDescription() {
            return homeDescription != null && homeDescription.trim().length() > 0
                    ? homeDescription
                    : null;
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Ui,getAppNameNavbar,String getAppNameNavbar(),"[397, 401]","{'A233': [(397, 401)]}",{'A233': 1.0},A233,,"        public String getAppNameNavbar() {
            return appNameNavbar != null && appNameNavbar.trim().length() > 0
                    ? appNameNavbar
                    : null;
        }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.EnterpriseEdition.CustomMetadata,getCreator,String getCreator(),"[439, 441]","{'A233': [(439, 441)]}",{'A233': 1.0},A233,,"            public String getCreator() {
                return creator == null || creator.trim().isEmpty() ? ""Stirling-PDF"" : creator;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.EnterpriseEdition.CustomMetadata,getProducer,String getProducer(),"[443, 445]","{'A233': [(443, 445)]}",{'A233': 1.0},A233,,"            public String getProducer() {
                return producer == null || producer.trim().isEmpty() ? ""Stirling-PDF"" : producer;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Premium.ProFeatures.CustomMetadata,getCreator,String getCreator(),"[481, 483]","{'A233': [(481, 483)]}",{'A233': 1.0},A233,,"                public String getCreator() {
                    return creator == null || creator.trim().isEmpty() ? ""Stirling-PDF"" : creator;
                }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Premium.ProFeatures.CustomMetadata,getProducer,String getProducer(),"[485, 489]","{'A233': [(485, 489)]}",{'A233': 1.0},A233,,"                public String getProducer() {
                    return producer == null || producer.trim().isEmpty()
                            ? ""Stirling-PDF""
                            : producer;
                }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Premium.ProFeatures.GoogleDrive,getClientId,String getClientId(),"[499, 501]","{'A241': [(499, 501)]}",{'A241': 1.0},A241,,"                public String getClientId() {
                    return clientId == null || clientId.trim().isEmpty() ? """" : clientId;
                }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Premium.ProFeatures.GoogleDrive,getApiKey,String getApiKey(),"[503, 505]","{'A241': [(503, 505)]}",{'A241': 1.0},A241,,"                public String getApiKey() {
                    return apiKey == null || apiKey.trim().isEmpty() ? """" : apiKey;
                }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.Premium.ProFeatures.GoogleDrive,getAppId,String getAppId(),"[507, 509]","{'A241': [(507, 509)]}",{'A241': 1.0},A241,,"                public String getAppId() {
                    return appId == null || appId.trim().isEmpty() ? """" : appId;
                }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getQpdfSessionLimit,int getQpdfSessionLimit(),"[551, 553]","{'A233': [(551, 553)]}",{'A233': 1.0},A233,,"            public int getQpdfSessionLimit() {
                return qpdfSessionLimit > 0 ? qpdfSessionLimit : 2;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getTesseractSessionLimit,int getTesseractSessionLimit(),"[555, 557]","{'A233': [(555, 557)]}",{'A233': 1.0},A233,,"            public int getTesseractSessionLimit() {
                return tesseractSessionLimit > 0 ? tesseractSessionLimit : 1;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getLibreOfficeSessionLimit,int getLibreOfficeSessionLimit(),"[559, 561]","{'A253': [(559, 561)]}",{'A253': 1.0},A253,,"            public int getLibreOfficeSessionLimit() {
                return libreOfficeSessionLimit > 0 ? libreOfficeSessionLimit : 1;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getPdfToHtmlSessionLimit,int getPdfToHtmlSessionLimit(),"[563, 565]","{'A253': [(563, 565)]}",{'A253': 1.0},A253,,"            public int getPdfToHtmlSessionLimit() {
                return pdfToHtmlSessionLimit > 0 ? pdfToHtmlSessionLimit : 1;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getPythonOpenCvSessionLimit,int getPythonOpenCvSessionLimit(),"[567, 569]","{'A253': [(567, 569)]}",{'A253': 1.0},A253,,"            public int getPythonOpenCvSessionLimit() {
                return pythonOpenCvSessionLimit > 0 ? pythonOpenCvSessionLimit : 8;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getWeasyPrintSessionLimit,int getWeasyPrintSessionLimit(),"[571, 573]","{'A253': [(571, 573)]}",{'A253': 1.0},A253,,"            public int getWeasyPrintSessionLimit() {
                return weasyPrintSessionLimit > 0 ? weasyPrintSessionLimit : 16;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getInstallAppSessionLimit,int getInstallAppSessionLimit(),"[575, 577]","{'A253': [(575, 577)]}",{'A253': 1.0},A253,,"            public int getInstallAppSessionLimit() {
                return installAppSessionLimit > 0 ? installAppSessionLimit : 1;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getCalibreSessionLimit,int getCalibreSessionLimit(),"[579, 581]","{'A253': [(579, 581)]}",{'A253': 1.0},A253,,"            public int getCalibreSessionLimit() {
                return calibreSessionLimit > 0 ? calibreSessionLimit : 1;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getGhostscriptSessionLimit,int getGhostscriptSessionLimit(),"[583, 585]","{'A233': [(583, 585)]}",{'A233': 1.0},A233,,"            public int getGhostscriptSessionLimit() {
                return ghostscriptSessionLimit > 0 ? ghostscriptSessionLimit : 8;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.SessionLimit,getOcrMyPdfSessionLimit,int getOcrMyPdfSessionLimit(),"[587, 589]","{'A233': [(587, 589)]}",{'A233': 1.0},A233,,"            public int getOcrMyPdfSessionLimit() {
                return ocrMyPdfSessionLimit > 0 ? ocrMyPdfSessionLimit : 2;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getTesseractTimeoutMinutes,long getTesseractTimeoutMinutes(),"[605, 607]","{'A233': [(605, 607)]}",{'A233': 1.0},A233,,"            public long getTesseractTimeoutMinutes() {
                return tesseractTimeoutMinutes > 0 ? tesseractTimeoutMinutes : 30;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getQpdfTimeoutMinutes,long getQpdfTimeoutMinutes(),"[609, 611]","{'A233': [(609, 611)]}",{'A233': 1.0},A233,,"            public long getQpdfTimeoutMinutes() {
                return qpdfTimeoutMinutes > 0 ? qpdfTimeoutMinutes : 30;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getLibreOfficeTimeoutMinutes,long getLibreOfficeTimeoutMinutes(),"[613, 615]","{'A253': [(613, 615)]}",{'A253': 1.0},A253,,"            public long getLibreOfficeTimeoutMinutes() {
                return libreOfficeTimeoutMinutes > 0 ? libreOfficeTimeoutMinutes : 30;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getPdfToHtmlTimeoutMinutes,long getPdfToHtmlTimeoutMinutes(),"[617, 619]","{'A253': [(617, 619)]}",{'A253': 1.0},A253,,"            public long getPdfToHtmlTimeoutMinutes() {
                return pdfToHtmlTimeoutMinutes > 0 ? pdfToHtmlTimeoutMinutes : 20;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getPythonOpenCvTimeoutMinutes,long getPythonOpenCvTimeoutMinutes(),"[621, 623]","{'A253': [(621, 623)]}",{'A253': 1.0},A253,,"            public long getPythonOpenCvTimeoutMinutes() {
                return pythonOpenCvTimeoutMinutes > 0 ? pythonOpenCvTimeoutMinutes : 30;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getWeasyPrintTimeoutMinutes,long getWeasyPrintTimeoutMinutes(),"[625, 627]","{'A253': [(625, 627)]}",{'A253': 1.0},A253,,"            public long getWeasyPrintTimeoutMinutes() {
                return weasyPrintTimeoutMinutes > 0 ? weasyPrintTimeoutMinutes : 30;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getInstallAppTimeoutMinutes,long getInstallAppTimeoutMinutes(),"[629, 631]","{'A253': [(629, 631)]}",{'A253': 1.0},A253,,"            public long getInstallAppTimeoutMinutes() {
                return installAppTimeoutMinutes > 0 ? installAppTimeoutMinutes : 60;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getCalibreTimeoutMinutes,long getCalibreTimeoutMinutes(),"[633, 635]","{'A253': [(633, 635)]}",{'A253': 1.0},A253,,"            public long getCalibreTimeoutMinutes() {
                return calibreTimeoutMinutes > 0 ? calibreTimeoutMinutes : 30;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getGhostscriptTimeoutMinutes,long getGhostscriptTimeoutMinutes(),"[637, 639]","{'A233': [(637, 639)]}",{'A233': 1.0},A233,,"            public long getGhostscriptTimeoutMinutes() {
                return ghostscriptTimeoutMinutes > 0 ? ghostscriptTimeoutMinutes : 30;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/ApplicationProperties.java,ApplicationProperties.ProcessExecutor.TimeoutMinutes,getOcrMyPdfTimeoutMinutes,long getOcrMyPdfTimeoutMinutes(),"[641, 643]","{'A233': [(641, 643)]}",{'A233': 1.0},A233,,"            public long getOcrMyPdfTimeoutMinutes() {
                return ocrMyPdfTimeoutMinutes > 0 ? ocrMyPdfTimeoutMinutes : 30;
            }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/FileInfo.java,FileInfo,getFilePathAsPath,Path getFilePathAsPath(),"[24, 26]","{'A234': [(24, 26)]}",{'A234': 1.0},A234,,"    public Path getFilePathAsPath() {
        return Paths.get(filePath);
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/FileInfo.java,FileInfo,getFormattedFileSize,String getFormattedFileSize(),"[29, 39]","{'A234': [(29, 30), (32, 32), (34, 34), (36, 39)], 'A254': [(31, 31), (33, 33), (35, 35)]}","{'A234': 0.7272727272727273, 'A254': 0.2727272727272727}",A234,,"    public String getFormattedFileSize() {
        if (fileSize >= 1024 * 1024 * 1024) {
            return String.format(Locale.US, ""%.2f GB"", fileSize / (1024.0 * 1024 * 1024));
        } else if (fileSize >= 1024 * 1024) {
            return String.format(Locale.US, ""%.2f MB"", fileSize / (1024.0 * 1024));
        } else if (fileSize >= 1024) {
            return String.format(Locale.US, ""%.2f KB"", fileSize / 1024.0);
        } else {
            return String.format(""%d Bytes"", fileSize);
        }
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/FileInfo.java,FileInfo,getFormattedModificationDate,String getFormattedModificationDate(),"[42, 44]","{'A234': [(42, 44)]}",{'A234': 1.0},A234,,"    public String getFormattedModificationDate() {
        return modificationDate.format(DATE_FORMATTER);
    }
"
stirling.software.common.model,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/model/FileInfo.java,FileInfo,getFormattedCreationDate,String getFormattedCreationDate(),"[47, 49]","{'A234': [(47, 49)]}",{'A234': 1.0},A234,,"    public String getFormattedCreationDate() {
        return creationDate.format(DATE_FORMATTER);
    }
"
stirling.software.common.config,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/config/TempFileConfiguration.java,TempFileConfiguration,tempFileRegistry,TempFileRegistry tempFileRegistry(),"[33, 36]","{'A233': [(33, 36)]}",{'A233': 1.0},A233,,"    @Bean
    public TempFileRegistry tempFileRegistry() {
        return new TempFileRegistry();
    }
"
stirling.software.common.config,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/config/TempFileConfiguration.java,TempFileConfiguration,initTempFileConfig,void initTempFileConfig(),"[38, 58]","{'A233': [(38, 58)]}",{'A233': 1.0},A233,,"    @PostConstruct
    public void initTempFileConfig() {
        try {
            ApplicationProperties.TempFileManagement tempFiles =
                    applicationProperties.getSystem().getTempFileManagement();
            String customTempDirectory = tempFiles.getBaseTmpDir();

            // Create the temp directory if it doesn't exist
            Path tempDir = Path.of(customTempDirectory);
            if (!Files.exists(tempDir)) {
                Files.createDirectories(tempDir);
                log.info(""Created temporary directory: {}"", tempDir);
            }

            log.debug(""Temporary file configuration initialized"");
            log.debug(""Using temp directory: {}"", customTempDirectory);
            log.debug(""Temp file prefix: {}"", tempFiles.getPrefix());
        } catch (Exception e) {
            log.error(""Failed to initialize temporary file configuration"", e);
        }
    }
"
stirling.software.common.config,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/config/TempFileShutdownHook.java,TempFileShutdownHook,destroy,void destroy(),"[35, 39]","{'A233': [(35, 39)]}",{'A233': 1.0},A233,,"    @Override
    public void destroy() {
        log.info(""Application shutting down, cleaning up temporary files"");
        cleanupTempFiles();
    }
"
stirling.software.common.config,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/config/TempFileShutdownHook.java,TempFileShutdownHook,cleanupTempFiles,void cleanupTempFiles(),"[42, 81]","{'A233': [(42, 81)]}",{'A233': 1.0},A233,,"    private void cleanupTempFiles() {
        try {
            // Clean up all registered files
            Set<Path> files = registry.getAllRegisteredFiles();
            int deletedCount = 0;

            for (Path file : files) {
                try {
                    if (Files.exists(file)) {
                        Files.deleteIfExists(file);
                        deletedCount++;
                    }
                } catch (IOException e) {
                    log.warn(""Failed to delete temp file during shutdown: {}"", file, e);
                }
            }

            // Clean up all registered directories
            Set<Path> directories = registry.getTempDirectories();
            for (Path dir : directories) {
                try {
                    if (Files.exists(dir)) {
                        GeneralUtils.deleteDirectory(dir);
                        deletedCount++;
                    }
                } catch (IOException e) {
                    log.warn(""Failed to delete temp directory during shutdown: {}"", dir, e);
                }
            }

            log.info(
                    ""Shutdown cleanup complete. Deleted {} temporary files/directories"",
                    deletedCount);

            // Clear the registry
            registry.clear();
        } catch (Exception e) {
            log.error(""Error during shutdown cleanup"", e);
        }
    }
"
stirling.software.common.aop,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java,AutoJobAspect,wrapWithJobExecution,"Object wrapWithJobExecution(ProceedingJoinPoint,AutoJobPostMapping)","[40, 103]","{'A233': [(40, 45), (51, 103)], 'A250': [(46, 50)]}","{'A233': 0.921875, 'A250': 0.078125}",A233,,"    @Around(""@annotation(autoJobPostMapping)"")
    public Object wrapWithJobExecution(
            ProceedingJoinPoint joinPoint, AutoJobPostMapping autoJobPostMapping) {
        // This aspect will run before any audit aspects due to @Order(0)
        // Extract parameters from the request and annotation
        boolean async = Boolean.parseBoolean(request.getParameter(""async""));
        log.debug(
                ""AutoJobAspect: Processing {} {} with async={}"",
                request.getMethod(),
                request.getRequestURI(),
                async);
        long timeout = autoJobPostMapping.timeout();
        int retryCount = autoJobPostMapping.retryCount();
        boolean trackProgress = autoJobPostMapping.trackProgress();

        log.debug(
                ""AutoJobPostMapping execution with async={}, timeout={}, retryCount={}, trackProgress={}"",
                async,
                timeout > 0 ? timeout : ""default"",
                retryCount,
                trackProgress);

        // Process arguments in-place to avoid type mismatch issues
        Object[] args = processArgsInPlace(joinPoint.getArgs(), async);

        // Extract queueable and resourceWeight parameters and validate
        boolean queueable = autoJobPostMapping.queueable();
        int resourceWeight = Math.max(1, Math.min(100, autoJobPostMapping.resourceWeight()));

        // Integrate with the JobExecutorService
        if (retryCount <= 1) {
            // No retries needed, simple execution
            return jobExecutorService.runJobGeneric(
                    async,
                    () -> {
                        try {
                            // Note: Progress tracking is handled in TaskManager/JobExecutorService
                            // The trackProgress flag controls whether detailed progress is stored
                            // for REST API queries, not WebSocket notifications
                            return joinPoint.proceed(args);
                        } catch (Throwable ex) {
                            log.error(
                                    ""AutoJobAspect caught exception during job execution: {}"",
                                    ex.getMessage(),
                                    ex);
                            throw new RuntimeException(ex);
                        }
                    },
                    timeout,
                    queueable,
                    resourceWeight);
        } else {
            // Use retry logic
            return executeWithRetries(
                    joinPoint,
                    args,
                    async,
                    timeout,
                    retryCount,
                    trackProgress,
                    queueable,
                    resourceWeight);
        }
    }
"
stirling.software.common.aop,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java,AutoJobAspect,executeWithRetries,"Object executeWithRetries(ProceedingJoinPoint,Object[],boolean,long,int,boolean,boolean,int)","[105, 224]","{'A233': [(105, 224)]}",{'A233': 1.0},A233,,"    private Object executeWithRetries(
            ProceedingJoinPoint joinPoint,
            Object[] args,
            boolean async,
            long timeout,
            int maxRetries,
            boolean trackProgress,
            boolean queueable,
            int resourceWeight) {

        // Keep jobId reference for progress tracking in TaskManager
        AtomicReference<String> jobIdRef = new AtomicReference<>();

        return jobExecutorService.runJobGeneric(
                async,
                () -> {
                    // Use iterative approach instead of recursion to avoid stack overflow
                    Throwable lastException = null;

                    // Attempt counter starts at 1 for first try
                    for (int currentAttempt = 1; currentAttempt <= maxRetries; currentAttempt++) {
                        try {
                            if (trackProgress && async) {
                                // Get jobId for progress tracking in TaskManager
                                // This enables REST API progress queries, not WebSocket
                                if (jobIdRef.get() == null) {
                                    jobIdRef.set(getJobIdFromContext());
                                }
                                String jobId = jobIdRef.get();
                                if (jobId != null) {
                                    log.debug(
                                            ""Tracking progress for job {} (attempt {}/{})"",
                                            jobId,
                                            currentAttempt,
                                            maxRetries);
                                    // Progress is tracked in TaskManager for REST API access
                                    // No WebSocket notifications sent here
                                }
                            }

                            // Attempt to execute the operation
                            return joinPoint.proceed(args);

                        } catch (Throwable ex) {
                            lastException = ex;
                            log.error(
                                    ""AutoJobAspect caught exception during job execution (attempt {}/{}): {}"",
                                    currentAttempt,
                                    maxRetries,
                                    ex.getMessage(),
                                    ex);

                            // Check if we should retry
                            if (currentAttempt < maxRetries) {
                                log.info(
                                        ""Retrying operation, attempt {}/{}"",
                                        currentAttempt + 1,
                                        maxRetries);

                                if (trackProgress && async) {
                                    String jobId = jobIdRef.get();
                                    if (jobId != null) {
                                        log.debug(
                                                ""Recording retry attempt for job {} in TaskManager"",
                                                jobId);
                                        // Retry info is tracked in TaskManager for REST API access
                                    }
                                }

                                // Use non-blocking delay for all retry attempts to avoid blocking
                                // threads
                                // For sync jobs this avoids starving the tomcat thread pool under
                                // load
                                long delayMs = RETRY_BASE_DELAY.toMillis() * currentAttempt;

                                // Execute the retry after a delay through the JobExecutorService
                                // rather than blocking the current thread with sleep
                                CompletableFuture<Object> delayedRetry = new CompletableFuture<>();

                                // Use a delayed executor for non-blocking delay
                                CompletableFuture.delayedExecutor(delayMs, TimeUnit.MILLISECONDS)
                                        .execute(
                                                () -> {
                                                    // Continue the retry loop in the next iteration
                                                    // We can't return from here directly since
                                                    // we're in a Runnable
                                                    delayedRetry.complete(null);
                                                });

                                // Wait for the delay to complete before continuing
                                try {
                                    delayedRetry.join();
                                } catch (Exception e) {
                                    Thread.currentThread().interrupt();
                                    break;
                                }
                            } else {
                                // No more retries, we'll throw the exception after the loop
                                break;
                            }
                        }
                    }

                    // If we get here, all retries failed
                    if (lastException != null) {
                        throw new RuntimeException(
                                ""Job failed after ""
                                        + maxRetries
                                        + "" attempts: ""
                                        + lastException.getMessage(),
                                lastException);
                    }

                    // This should never happen if lastException is properly tracked
                    throw new RuntimeException(""Job failed but no exception was recorded"");
                },
                timeout,
                queueable,
                resourceWeight);
    }
"
stirling.software.common.aop,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java,AutoJobAspect,processArgsInPlace,"Object[] processArgsInPlace(Object[],boolean)","[234, 279]","{'A233': [(234, 279)]}",{'A233': 1.0},A233,,"    private Object[] processArgsInPlace(Object[] originalArgs, boolean async) {
        if (originalArgs == null || originalArgs.length == 0) {
            return originalArgs;
        }

        // Process all arguments in-place
        for (int i = 0; i < originalArgs.length; i++) {
            Object arg = originalArgs[i];

            if (arg instanceof PDFFile pdfFile) {
                // Case 1: fileId is provided but no fileInput
                if (pdfFile.getFileInput() == null && pdfFile.getFileId() != null) {
                    try {
                        log.debug(""Using fileId {} to get file content"", pdfFile.getFileId());
                        MultipartFile file = fileStorage.retrieveFile(pdfFile.getFileId());
                        pdfFile.setFileInput(file);
                    } catch (Exception e) {
                        throw new RuntimeException(
                                ""Failed to resolve file by ID: "" + pdfFile.getFileId(), e);
                    }
                }
                // Case 2: For async requests, we need to make a copy of the MultipartFile
                else if (async && pdfFile.getFileInput() != null) {
                    try {
                        log.debug(""Making persistent copy of uploaded file for async processing"");
                        MultipartFile originalFile = pdfFile.getFileInput();
                        String fileId = fileStorage.storeFile(originalFile);

                        // Store the fileId for later reference
                        pdfFile.setFileId(fileId);

                        // Replace the original MultipartFile with our persistent copy
                        MultipartFile persistentFile = fileStorage.retrieveFile(fileId);
                        pdfFile.setFileInput(persistentFile);

                        log.debug(""Created persistent file copy with fileId: {}"", fileId);
                    } catch (IOException e) {
                        throw new RuntimeException(
                                ""Failed to create persistent copy of uploaded file"", e);
                    }
                }
            }
        }

        return originalArgs;
    }
"
stirling.software.common.aop,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java,AutoJobAspect,getJobIdFromContext,String getJobIdFromContext(),"[281, 288]","{'A233': [(281, 288)]}",{'A233': 1.0},A233,,"    private String getJobIdFromContext() {
        try {
            return (String) request.getAttribute(""jobId"");
        } catch (Exception e) {
            log.debug(""Could not retrieve job ID from context: {}"", e.getMessage());
            return null;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,createTempFile,File createTempFile(String),"[39, 55]","{'A233': [(39, 55)]}",{'A233': 1.0},A233,,"    public File createTempFile(String suffix) throws IOException {
        ApplicationProperties.TempFileManagement tempFiles =
                applicationProperties.getSystem().getTempFileManagement();
        Path tempFilePath;
        String customTempDirectory = tempFiles.getBaseTmpDir();
        if (customTempDirectory != null && !customTempDirectory.isEmpty()) {
            Path tempDir = Path.of(customTempDirectory);
            if (!Files.exists(tempDir)) {
                Files.createDirectories(tempDir);
            }
            tempFilePath = Files.createTempFile(tempDir, tempFiles.getPrefix(), suffix);
        } else {
            tempFilePath = Files.createTempFile(tempFiles.getPrefix(), suffix);
        }
        File tempFile = tempFilePath.toFile();
        return registry.register(tempFile);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,createTempDirectory,Path createTempDirectory(),"[64, 79]","{'A233': [(64, 79)]}",{'A233': 1.0},A233,,"    public Path createTempDirectory() throws IOException {
        ApplicationProperties.TempFileManagement tempFiles =
                applicationProperties.getSystem().getTempFileManagement();
        Path tempDirPath;
        String customTempDirectory = tempFiles.getBaseTmpDir();
        if (customTempDirectory != null && !customTempDirectory.isEmpty()) {
            Path tempDir = Path.of(customTempDirectory);
            if (!Files.exists(tempDir)) {
                Files.createDirectories(tempDir);
            }
            tempDirPath = Files.createTempDirectory(tempDir, tempFiles.getPrefix());
        } else {
            tempDirPath = Files.createTempDirectory(tempFiles.getPrefix());
        }
        return registry.registerDirectory(tempDirPath);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,convertMultipartFileToFile,File convertMultipartFileToFile(MultipartFile),"[89, 92]","{'A233': [(89, 92)]}",{'A233': 1.0},A233,,"    public File convertMultipartFileToFile(MultipartFile multipartFile) throws IOException {
        File tempFile = GeneralUtils.convertMultipartFileToFile(multipartFile);
        return registry.register(tempFile);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,deleteTempFile,boolean deleteTempFile(File),"[100, 112]","{'A233': [(100, 112)]}",{'A233': 1.0},A233,,"    public boolean deleteTempFile(File file) {
        if (file != null && file.exists()) {
            boolean deleted = file.delete();
            if (deleted) {
                registry.unregister(file);
                log.debug(""Deleted temp file: {}"", file.getAbsolutePath());
            } else {
                log.warn(""Failed to delete temp file: {}"", file.getAbsolutePath());
            }
            return deleted;
        }
        return false;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,deleteTempFile,boolean deleteTempFile(Path),"[120, 137]","{'A233': [(120, 137)]}",{'A233': 1.0},A233,,"    public boolean deleteTempFile(Path path) {
        if (path != null) {
            try {
                boolean deleted = Files.deleteIfExists(path);
                if (deleted) {
                    registry.unregister(path);
                    log.debug(""Deleted temp file: {}"", path.toString());
                } else {
                    log.debug(""Temp file already deleted or does not exist: {}"", path.toString());
                }
                return deleted;
            } catch (IOException e) {
                log.warn(""Failed to delete temp file: {}"", path.toString(), e);
                return false;
            }
        }
        return false;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,deleteTempDirectory,void deleteTempDirectory(Path),"[144, 153]","{'A233': [(144, 153)]}",{'A233': 1.0},A233,,"    public void deleteTempDirectory(Path directory) {
        if (directory != null && Files.isDirectory(directory)) {
            try {
                GeneralUtils.deleteDirectory(directory);
                log.debug(""Deleted temp directory: {}"", directory.toString());
            } catch (IOException e) {
                log.warn(""Failed to delete temp directory: {}"", directory.toString(), e);
            }
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,register,File register(File),"[161, 166]","{'A233': [(161, 166)]}",{'A233': 1.0},A233,,"    public File register(File file) {
        if (file != null && file.exists()) {
            return registry.register(file);
        }
        return file;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,cleanupOldTempFiles,int cleanupOldTempFiles(long),"[174, 189]","{'A233': [(174, 189)]}",{'A233': 1.0},A233,,"    public int cleanupOldTempFiles(long maxAgeMillis) {
        int deletedCount = 0;

        // Get files older than max age
        Set<Path> oldFiles = registry.getFilesOlderThan(maxAgeMillis);

        // Delete each old file
        for (Path file : oldFiles) {
            if (deleteTempFile(file)) {
                deletedCount++;
            }
        }

        log.info(""Cleaned up {} old temporary files"", deletedCount);
        return deletedCount;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,getMaxAgeMillis,long getMaxAgeMillis(),"[196, 200]","{'A233': [(196, 200)]}",{'A233': 1.0},A233,,"    public long getMaxAgeMillis() {
        long maxAgeHours =
                applicationProperties.getSystem().getTempFileManagement().getMaxAgeHours();
        return Duration.ofHours(maxAgeHours).toMillis();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,generateTempFileName,"String generateTempFileName(String,String)","[209, 214]","{'A233': [(209, 214)]}",{'A233': 1.0},A233,,"    public String generateTempFileName(String type, String extension) {
        String tempFilePrefix =
                applicationProperties.getSystem().getTempFileManagement().getPrefix();
        String uuid = UUID.randomUUID().toString().substring(0, 8);
        return tempFilePrefix + type + ""-"" + uuid + ""."" + extension;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileManager.java,TempFileManager,registerLibreOfficeTempDir,Path registerLibreOfficeTempDir(),"[223, 248]","{'A233': [(223, 248)]}",{'A233': 1.0},A233,,"    public Path registerLibreOfficeTempDir() throws IOException {
        ApplicationProperties.TempFileManagement tempFiles =
                applicationProperties.getSystem().getTempFileManagement();
        Path loTempDir;
        String libreOfficeTempDir = tempFiles.getLibreofficeDir();
        String customTempDirectory = tempFiles.getBaseTmpDir();

        // First check if explicitly configured
        if (libreOfficeTempDir != null && !libreOfficeTempDir.isEmpty()) {
            loTempDir = Path.of(libreOfficeTempDir);
        }
        // Next check if we have a custom temp directory
        else if (customTempDirectory != null && !customTempDirectory.isEmpty()) {
            loTempDir = Path.of(customTempDirectory, ""libreoffice"");
        }
        // Fall back to system temp dir with our application prefix
        else {
            loTempDir = Path.of(System.getProperty(""java.io.tmpdir""), ""stirling-pdf-libreoffice"");
        }

        if (!Files.exists(loTempDir)) {
            Files.createDirectories(loTempDir);
        }

        return registry.registerDirectory(loTempDir);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFile.java,TempFile,getFile,File getFile(),"[24, 26]","{'A233': [(24, 26)]}",{'A233': 1.0},A233,,"    public File getFile() {
        return file;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFile.java,TempFile,getPath,Path getPath(),"[28, 30]","{'A233': [(28, 30)]}",{'A233': 1.0},A233,,"    public Path getPath() {
        return file.toPath();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFile.java,TempFile,getAbsolutePath,String getAbsolutePath(),"[32, 34]","{'A233': [(32, 34)]}",{'A233': 1.0},A233,,"    public String getAbsolutePath() {
        return file.getAbsolutePath();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFile.java,TempFile,exists,boolean exists(),"[36, 38]","{'A233': [(36, 38)]}",{'A233': 1.0},A233,,"    public boolean exists() {
        return file.exists();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFile.java,TempFile,close,void close(),"[40, 43]","{'A233': [(40, 43)]}",{'A233': 1.0},A233,,"    @Override
    public void close() {
        manager.deleteTempFile(file);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFile.java,TempFile,toString,String toString(),"[45, 48]","{'A233': [(45, 48)]}",{'A233': 1.0},A233,,"    @Override
    public String toString() {
        return ""TempFile{"" + file.getAbsolutePath() + ""}"";
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileUtil.java,TempFileUtil.TempFileCollection,addTempFile,File addTempFile(String),"[32, 36]","{'A233': [(32, 36)]}",{'A233': 1.0},A233,,"        public File addTempFile(String suffix) throws IOException {
            File file = manager.createTempFile(suffix);
            tempFiles.add(file);
            return file;
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileUtil.java,TempFileUtil.TempFileCollection,getFiles,List<File> getFiles(),"[38, 40]","{'A233': [(38, 40)]}",{'A233': 1.0},A233,,"        public List<File> getFiles() {
            return new ArrayList<>(tempFiles);
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileUtil.java,TempFileUtil.TempFileCollection,close,void close(),"[42, 47]","{'A233': [(42, 47)]}",{'A233': 1.0},A233,,"        @Override
        public void close() {
            for (File file : tempFiles) {
                manager.deleteTempFile(file);
            }
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileUtil.java,TempFileUtil,withTempFile,"R withTempFile(TempFileManager,String,Function<File, R>)","[60, 69]","{'A233': [(60, 69)]}",{'A233': 1.0},A233,,"    public static <R> R withTempFile(
            TempFileManager tempFileManager, String suffix, Function<File, R> function)
            throws IOException {
        File tempFile = tempFileManager.createTempFile(suffix);
        try {
            return function.apply(tempFile);
        } finally {
            tempFileManager.deleteTempFile(tempFile);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileUtil.java,TempFileUtil,withMultipleTempFiles,"R withMultipleTempFiles(TempFileManager,int,String,Function<List<File>, R>)","[82, 99]","{'A233': [(82, 99)]}",{'A233': 1.0},A233,,"    public static <R> R withMultipleTempFiles(
            TempFileManager tempFileManager,
            int count,
            String suffix,
            Function<List<File>, R> function)
            throws IOException {
        List<File> tempFiles = new ArrayList<>(count);
        try {
            for (int i = 0; i < count; i++) {
                tempFiles.add(tempFileManager.createTempFile(suffix));
            }
            return function.apply(tempFiles);
        } finally {
            for (File file : tempFiles) {
                tempFileManager.deleteTempFile(file);
            }
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileUtil.java,TempFileUtil,safeDeleteFiles,void safeDeleteFiles(List<Path>),"[106, 119]","{'A233': [(106, 119)]}",{'A233': 1.0},A233,,"    public static void safeDeleteFiles(List<Path> files) {
        if (files == null) return;

        for (Path file : files) {
            if (file == null) continue;

            try {
                Files.deleteIfExists(file);
                log.debug(""Deleted temp file: {}"", file);
            } catch (IOException e) {
                log.warn(""Failed to delete temp file: {}"", file, e);
            }
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileUtil.java,TempFileUtil,registerExistingTempFile,"File registerExistingTempFile(TempFileManager,File)","[129, 134]","{'A233': [(129, 134)]}",{'A233': 1.0},A233,,"    public static File registerExistingTempFile(TempFileManager tempFileManager, File file) {
        if (tempFileManager != null && file != null && file.exists()) {
            return tempFileManager.register(file);
        }
        return file;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createPdfCorruptedException,IOException createPdfCorruptedException(Exception),"[21, 23]","{'A233': [(21, 23)]}",{'A233': 1.0},A233,,"    public static IOException createPdfCorruptedException(Exception cause) {
        return createPdfCorruptedException(null, cause);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createPdfCorruptedException,"IOException createPdfCorruptedException(String,Exception)","[32, 44]","{'A233': [(32, 44)]}",{'A233': 1.0},A233,,"    public static IOException createPdfCorruptedException(String context, Exception cause) {
        String message;
        if (context != null && !context.isEmpty()) {
            message =
                    String.format(
                            ""Error %s: PDF file appears to be corrupted or damaged. Please try using the 'Repair PDF' feature first to fix the file before proceeding with this operation."",
                            context);
        } else {
            message =
                    ""PDF file appears to be corrupted or damaged. Please try using the 'Repair PDF' feature first to fix the file before proceeding with this operation."";
        }
        return new IOException(message, cause);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createMultiplePdfCorruptedException,IOException createMultiplePdfCorruptedException(Exception),"[52, 56]","{'A233': [(52, 56)]}",{'A233': 1.0},A233,,"    public static IOException createMultiplePdfCorruptedException(Exception cause) {
        String message =
                ""One or more PDF files appear to be corrupted or damaged. Please try using the 'Repair PDF' feature on each file first before attempting to merge them."";
        return new IOException(message, cause);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createPdfEncryptionException,IOException createPdfEncryptionException(Exception),"[64, 68]","{'A233': [(64, 68)]}",{'A233': 1.0},A233,,"    public static IOException createPdfEncryptionException(Exception cause) {
        String message =
                ""The PDF appears to have corrupted encryption data. This can happen when the PDF was created with incompatible encryption methods. Please try using the 'Repair PDF' feature first, or contact the document creator for a new copy."";
        return new IOException(message, cause);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createPdfPasswordException,IOException createPdfPasswordException(Exception),"[76, 80]","{'A233': [(76, 80)]}",{'A233': 1.0},A233,,"    public static IOException createPdfPasswordException(Exception cause) {
        String message =
                ""The PDF Document is passworded and either the password was not provided or was incorrect"";
        return new IOException(message, cause);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createFileProcessingException,"IOException createFileProcessingException(String,Exception)","[89, 95]","{'A233': [(89, 95)]}",{'A233': 1.0},A233,,"    public static IOException createFileProcessingException(String operation, Exception cause) {
        String message =
                String.format(
                        ""An error occurred while processing the file during %s operation: %s"",
                        operation, cause.getMessage());
        return new IOException(message, cause);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createIOException,"IOException createIOException(String,String,Exception)","[106, 110]","{'A233': [(106, 110)]}",{'A233': 1.0},A233,,"    public static IOException createIOException(
            String messageKey, String defaultMessage, Exception cause, Object... args) {
        String message = MessageFormat.format(defaultMessage, args);
        return new IOException(message, cause);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createRuntimeException,"RuntimeException createRuntimeException(String,String,Exception)","[121, 125]","{'A233': [(121, 125)]}",{'A233': 1.0},A233,,"    public static RuntimeException createRuntimeException(
            String messageKey, String defaultMessage, Exception cause, Object... args) {
        String message = MessageFormat.format(defaultMessage, args);
        return new RuntimeException(message, cause);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createIllegalArgumentException,"IllegalArgumentException createIllegalArgumentException(String,String)","[135, 139]","{'A233': [(135, 139)]}",{'A233': 1.0},A233,,"    public static IllegalArgumentException createIllegalArgumentException(
            String messageKey, String defaultMessage, Object... args) {
        String message = MessageFormat.format(defaultMessage, args);
        return new IllegalArgumentException(message);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createHtmlFileRequiredException,IllegalArgumentException createHtmlFileRequiredException(),"[142, 145]","{'A233': [(142, 145)]}",{'A233': 1.0},A233,,"    public static IllegalArgumentException createHtmlFileRequiredException() {
        return createIllegalArgumentException(
                ""error.fileFormatRequired"", ""File must be in {0} format"", ""HTML or ZIP"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createPdfFileRequiredException,IllegalArgumentException createPdfFileRequiredException(),"[147, 150]","{'A233': [(147, 150)]}",{'A233': 1.0},A233,,"    public static IllegalArgumentException createPdfFileRequiredException() {
        return createIllegalArgumentException(
                ""error.fileFormatRequired"", ""File must be in {0} format"", ""PDF"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createInvalidPageSizeException,IllegalArgumentException createInvalidPageSizeException(String),"[152, 155]","{'A233': [(152, 155)]}",{'A233': 1.0},A233,,"    public static IllegalArgumentException createInvalidPageSizeException(String size) {
        return createIllegalArgumentException(
                ""error.invalidFormat"", ""Invalid {0} format: {1}"", ""page size"", size);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createOcrLanguageRequiredException,IOException createOcrLanguageRequiredException(),"[158, 161]","{'A233': [(158, 161)]}",{'A233': 1.0},A233,,"    public static IOException createOcrLanguageRequiredException() {
        return createIOException(
                ""error.optionsNotSpecified"", ""{0} options are not specified"", null, ""OCR language"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createOcrInvalidLanguagesException,IOException createOcrInvalidLanguagesException(),"[163, 170]","{'A233': [(163, 170)]}",{'A233': 1.0},A233,,"    public static IOException createOcrInvalidLanguagesException() {
        return createIOException(
                ""error.invalidFormat"",
                ""Invalid {0} format: {1}"",
                null,
                ""OCR languages"",
                ""none of the selected languages are valid"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createOcrToolsUnavailableException,IOException createOcrToolsUnavailableException(),"[172, 175]","{'A233': [(172, 175)]}",{'A233': 1.0},A233,,"    public static IOException createOcrToolsUnavailableException() {
        return createIOException(
                ""error.toolNotInstalled"", ""{0} is not installed"", null, ""OCR tools"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createPythonRequiredForWebpException,IOException createPythonRequiredForWebpException(),"[178, 181]","{'A233': [(178, 181)]}",{'A233': 1.0},A233,,"    public static IOException createPythonRequiredForWebpException() {
        return createIOException(
                ""error.toolRequired"", ""{0} is required for {1}"", null, ""Python"", ""WebP conversion"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createFileNotFoundException,IOException createFileNotFoundException(String),"[184, 186]","{'A233': [(184, 186)]}",{'A233': 1.0},A233,,"    public static IOException createFileNotFoundException(String fileId) {
        return createIOException(""error.fileNotFound"", ""File not found with ID: {0}"", null, fileId);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createPdfaConversionFailedException,RuntimeException createPdfaConversionFailedException(),"[188, 191]","{'A233': [(188, 191)]}",{'A233': 1.0},A233,,"    public static RuntimeException createPdfaConversionFailedException() {
        return createRuntimeException(
                ""error.conversionFailed"", ""{0} conversion failed"", null, ""PDF/A"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createInvalidComparatorException,IllegalArgumentException createInvalidComparatorException(),"[193, 199]","{'A233': [(193, 199)]}",{'A233': 1.0},A233,,"    public static IllegalArgumentException createInvalidComparatorException() {
        return createIllegalArgumentException(
                ""error.invalidFormat"",
                ""Invalid {0} format: {1}"",
                ""comparator"",
                ""only 'greater', 'equal', and 'less' are supported"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createMd5AlgorithmException,RuntimeException createMd5AlgorithmException(Exception),"[202, 205]","{'A233': [(202, 205)]}",{'A233': 1.0},A233,,"    public static RuntimeException createMd5AlgorithmException(Exception cause) {
        return createRuntimeException(
                ""error.algorithmNotAvailable"", ""{0} algorithm not available"", cause, ""MD5"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createCompressionOptionsException,IllegalArgumentException createCompressionOptionsException(),"[207, 212]","{'A233': [(207, 212)]}",{'A233': 1.0},A233,,"    public static IllegalArgumentException createCompressionOptionsException() {
        return createIllegalArgumentException(
                ""error.optionsNotSpecified"",
                ""{0} options are not specified"",
                ""compression (expected output size and optimize level)"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createGhostscriptCompressionException,IOException createGhostscriptCompressionException(),"[214, 217]","{'A233': [(214, 217)]}",{'A233': 1.0},A233,,"    public static IOException createGhostscriptCompressionException() {
        return createIOException(
                ""error.commandFailed"", ""{0} command failed"", null, ""Ghostscript compression"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createGhostscriptCompressionException,IOException createGhostscriptCompressionException(Exception),"[219, 222]","{'A233': [(219, 222)]}",{'A233': 1.0},A233,,"    public static IOException createGhostscriptCompressionException(Exception cause) {
        return createIOException(
                ""error.commandFailed"", ""{0} command failed"", cause, ""Ghostscript compression"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createQpdfCompressionException,IOException createQpdfCompressionException(Exception),"[224, 226]","{'A233': [(224, 226)]}",{'A233': 1.0},A233,,"    public static IOException createQpdfCompressionException(Exception cause) {
        return createIOException(""error.commandFailed"", ""{0} command failed"", cause, ""QPDF"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,handlePdfException,IOException handlePdfException(IOException),"[235, 237]","{'A233': [(235, 237)]}",{'A233': 1.0},A233,,"    public static IOException handlePdfException(IOException e) {
        return handlePdfException(e, null);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,handlePdfException,"IOException handlePdfException(IOException,String)","[247, 261]","{'A233': [(247, 261)]}",{'A233': 1.0},A233,,"    public static IOException handlePdfException(IOException e, String context) {
        if (PdfErrorUtils.isCorruptedPdfError(e)) {
            return createPdfCorruptedException(context, e);
        }

        if (isEncryptionError(e)) {
            return createPdfEncryptionException(e);
        }

        if (isPasswordError(e)) {
            return createPdfPasswordException(e);
        }

        return e; // Return original exception if no specific handling needed
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,isEncryptionError,boolean isEncryptionError(IOException),"[269, 277]","{'A233': [(269, 277)]}",{'A233': 1.0},A233,,"    public static boolean isEncryptionError(IOException e) {
        String message = e.getMessage();
        if (message == null) return false;

        return message.contains(""BadPaddingException"")
                || message.contains(""Given final block not properly padded"")
                || message.contains(""AES initialization vector not fully read"")
                || message.contains(""Failed to decrypt"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,isPasswordError,boolean isPasswordError(IOException),"[285, 292]","{'A233': [(285, 292)]}",{'A233': 1.0},A233,,"    public static boolean isPasswordError(IOException e) {
        String message = e.getMessage();
        if (message == null) return false;

        return message.contains(""password is incorrect"")
                || message.contains(""Password is not provided"")
                || message.contains(""PDF contains an encryption dictionary"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,logException,"void logException(String,Exception)","[300, 309]","{'A233': [(300, 309)]}",{'A233': 1.0},A233,,"    public static void logException(String operation, Exception e) {
        if (PdfErrorUtils.isCorruptedPdfError(e)) {
            log.warn(""PDF corruption detected during {}: {}"", operation, e.getMessage());
        } else if (e instanceof IOException
                && (isEncryptionError((IOException) e) || isPasswordError((IOException) e))) {
            log.info(""PDF security issue during {}: {}"", operation, e.getMessage());
        } else {
            log.error(""Unexpected error during {}"", operation, e);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createInvalidArgumentException,IllegalArgumentException createInvalidArgumentException(String),"[312, 315]","{'A233': [(312, 315)]}",{'A233': 1.0},A233,,"    public static IllegalArgumentException createInvalidArgumentException(String argumentName) {
        return createIllegalArgumentException(
                ""error.invalidArgument"", ""Invalid argument: {0}"", argumentName);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createInvalidArgumentException,"IllegalArgumentException createInvalidArgumentException(String,String)","[317, 321]","{'A233': [(317, 321)]}",{'A233': 1.0},A233,,"    public static IllegalArgumentException createInvalidArgumentException(
            String argumentName, String value) {
        return createIllegalArgumentException(
                ""error.invalidFormat"", ""Invalid {0} format: {1}"", argumentName, value);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExceptionUtils.java,ExceptionUtils,createNullArgumentException,IllegalArgumentException createNullArgumentException(String),"[323, 326]","{'A233': [(323, 326)]}",{'A233': 1.0},A233,,"    public static IllegalArgumentException createNullArgumentException(String argumentName) {
        return createIllegalArgumentException(
                ""error.argumentRequired"", ""{0} must not be null"", argumentName);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,convertMultipartFileToFile,File convertMultipartFileToFile(MultipartFile),"[40, 73]","{'A233': [(40, 73)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static File convertMultipartFileToFile(MultipartFile multipartFile) throws IOException {
        String customTempDir = System.getenv(""STIRLING_TEMPFILES_DIRECTORY"");
        if (customTempDir == null || customTempDir.isEmpty()) {
            customTempDir = System.getProperty(""stirling.tempfiles.directory"");
        }

        File tempFile;

        if (customTempDir != null && !customTempDir.isEmpty()) {
            Path tempDir = Path.of(customTempDir);
            if (!Files.exists(tempDir)) {
                Files.createDirectories(tempDir);
            }
            tempFile = Files.createTempFile(tempDir, ""stirling-pdf-"", null).toFile();
        } else {
            Path tempDir = Path.of(System.getProperty(""java.io.tmpdir""), ""stirling-pdf"");
            if (!Files.exists(tempDir)) {
                Files.createDirectories(tempDir);
            }
            tempFile = Files.createTempFile(tempDir, ""stirling-pdf-"", null).toFile();
        }

        try (InputStream inputStream = multipartFile.getInputStream();
                FileOutputStream outputStream = new FileOutputStream(tempFile)) {

            byte[] buffer = new byte[8192];
            int bytesRead;

            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead);
            }
        }
        return tempFile;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,deleteDirectory,void deleteDirectory(Path),"[75, 93]","{'A233': [(75, 93)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static void deleteDirectory(Path path) throws IOException {
        Files.walkFileTree(
                path,
                new SimpleFileVisitor<Path>() {
                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                            throws IOException {
                        Files.deleteIfExists(file);
                        return FileVisitResult.CONTINUE;
                    }

                    @Override
                    public FileVisitResult postVisitDirectory(Path dir, IOException exc)
                            throws IOException {
                        Files.deleteIfExists(dir);
                        return FileVisitResult.CONTINUE;
                    }
                });
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,visitFile,"FileVisitResult visitFile(Path,BasicFileAttributes)","[79, 84]","{'A233': [(79, 84)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                            throws IOException {
                        Files.deleteIfExists(file);
                        return FileVisitResult.CONTINUE;
                    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,postVisitDirectory,"FileVisitResult postVisitDirectory(Path,IOException)","[86, 91]","{'A233': [(86, 91)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"                    @Override
                    public FileVisitResult postVisitDirectory(Path dir, IOException exc)
                            throws IOException {
                        Files.deleteIfExists(dir);
                        return FileVisitResult.CONTINUE;
                    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,convertToFileName,String convertToFileName(String),"[95, 101]","{'A233': [(95, 101)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static String convertToFileName(String name) {
        String safeName = name.replaceAll(""[^a-zA-Z0-9]"", ""_"");
        if (safeName.length() > 50) {
            safeName = safeName.substring(0, 50);
        }
        return safeName;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,getResourcesFromLocationPattern,"Resource[] getResourcesFromLocationPattern(String,ResourceLoader)","[104, 114]","{'A234': [(104, 114)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static Resource[] getResourcesFromLocationPattern(
            String locationPattern, ResourceLoader resourceLoader) throws Exception {
        // Normalize the path for file resources
        if (locationPattern.startsWith(""file:"")) {
            String rawPath = locationPattern.substring(5).replace(""\\*"", """").replace(""/*"", """");
            Path normalizePath = Paths.get(rawPath).normalize();
            locationPattern = ""file:"" + normalizePath.toString().replace(""\\"", ""/"") + ""/*"";
        }
        return ResourcePatternUtils.getResourcePatternResolver(resourceLoader)
                .getResources(locationPattern);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,isValidURL,boolean isValidURL(String),"[116, 124]","{'A233': [(116, 124)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static boolean isValidURL(String urlStr) {
        try {
            Urls.create(
                    urlStr, Urls.HTTP_PROTOCOLS, HostValidator.DENY_COMMON_INFRASTRUCTURE_TARGETS);
            return true;
        } catch (MalformedURLException e) {
            return false;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,isURLReachable,boolean isURLReachable(String),"[126, 153]","{'A233': [(129, 129), (133, 133)], 'A238': [(128, 128), (130, 132), (134, 143), (146, 147), (150, 153)], 'A255': [(126, 127), (144, 145), (148, 149)]}","{'A233': 0.07142857142857142, 'A238': 0.7142857142857143, 'A255': 0.21428571428571427}",A238,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static boolean isURLReachable(String urlStr) {
        try {
            // Parse the URL
            URL url = URI.create(urlStr).toURL();

            // Allow only http and https protocols
            String protocol = url.getProtocol();
            if (!""http"".equals(protocol) && !""https"".equals(protocol)) {
                return false; // Disallow other protocols
            }

            // Check if the host is a local address
            String host = url.getHost();
            if (isLocalAddress(host)) {
                return false; // Exclude local addresses
            }

            // Check if the URL is reachable
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod(""HEAD"");
            // connection.setConnectTimeout(5000); // Set connection timeout
            // connection.setReadTimeout(5000);    // Set read timeout
            int responseCode = connection.getResponseCode();
            return (200 <= responseCode && responseCode <= 399);
        } catch (Exception e) {
            return false; // Return false in case of any exception
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,isLocalAddress,boolean isLocalAddress(String),"[155, 173]","{'A233': [(173, 173)], 'A238': [(155, 171)], 'A255': [(172, 172)]}","{'A233': 0.05263157894736842, 'A238': 0.8947368421052632, 'A255': 0.05263157894736842}",A238,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    private static boolean isLocalAddress(String host) {
        try {
            // Resolve DNS to IP address
            InetAddress address = InetAddress.getByName(host);

            // Check for local addresses
            return address.isAnyLocalAddress()
                    || // Matches 0.0.0.0 or similar
                    address.isLoopbackAddress()
                    || // Matches 127.0.0.1 or ::1
                    address.isSiteLocalAddress()
                    || // Matches private IPv4 ranges: 192.168.x.x, 10.x.x.x, 172.16.x.x to
                    // 172.31.x.x
                    address.getHostAddress()
                            .startsWith(""fe80:""); // Matches link-local IPv6 addresses
        } catch (Exception e) {
            return false; // Return false for invalid or unresolved addresses
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,multipartToFile,File multipartToFile(MultipartFile),"[175, 186]","{'A233': [(175, 186)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static File multipartToFile(MultipartFile multipart) throws IOException {
        Path tempFile = Files.createTempFile(""overlay-"", "".pdf"");
        try (InputStream in = multipart.getInputStream();
                FileOutputStream out = new FileOutputStream(tempFile.toFile())) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = in.read(buffer)) != -1) {
                out.write(buffer, 0, bytesRead);
            }
        }
        return tempFile.toFile();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,convertSizeToBytes,Long convertSizeToBytes(String),"[188, 221]","{'A233': [(188, 193), (195, 221)], 'A234': [(194, 194)]}","{'A233': 0.9705882352941176, 'A234': 0.029411764705882353}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static Long convertSizeToBytes(String sizeStr) {
        if (sizeStr == null) {
            return null;
        }

        sizeStr = sizeStr.trim().toUpperCase();
        sizeStr = sizeStr.replace("","", ""."").replace("" "", """");
        try {
            if (sizeStr.endsWith(""KB"")) {
                return (long)
                        (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2)) * 1024);
            } else if (sizeStr.endsWith(""MB"")) {
                return (long)
                        (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))
                                * 1024
                                * 1024);
            } else if (sizeStr.endsWith(""GB"")) {
                return (long)
                        (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))
                                * 1024
                                * 1024
                                * 1024);
            } else if (sizeStr.endsWith(""B"")) {
                return Long.parseLong(sizeStr.substring(0, sizeStr.length() - 1));
            } else {
                // Assume MB if no unit is specified
                return (long) (Double.parseDouble(sizeStr) * 1024 * 1024);
            }
        } catch (NumberFormatException e) {
            // The numeric part of the input string cannot be parsed, handle this case
        }

        return null;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,formatBytes,String formatBytes(long),"[223, 233]","{'A233': [(223, 226), (228, 228), (230, 230), (232, 233)], 'A234': [(227, 227), (229, 229), (231, 231)]}","{'A233': 0.7272727272727273, 'A234': 0.2727272727272727}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static String formatBytes(long bytes) {
        if (bytes < 1024) {
            return bytes + "" B"";
        } else if (bytes < 1024 * 1024) {
            return String.format(Locale.US, ""%.2f KB"", bytes / 1024.0);
        } else if (bytes < 1024 * 1024 * 1024) {
            return String.format(Locale.US, ""%.2f MB"", bytes / (1024.0 * 1024.0));
        } else {
            return String.format(Locale.US, ""%.2f GB"", bytes / (1024.0 * 1024.0 * 1024.0));
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,parsePageList,"List<Integer> parsePageList(String,int,boolean)","[235, 244]","{'A233': [(235, 244)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static List<Integer> parsePageList(String pages, int totalPages, boolean oneBased) {
        if (pages == null) {
            return List.of(1); // Default to first page if input is null
        }
        try {
            return parsePageList(pages.split("",""), totalPages, oneBased);
        } catch (NumberFormatException e) {
            return List.of(1); // Default to first page if input is invalid
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,parsePageList,"List<Integer> parsePageList(String[],int)","[246, 248]","{'A233': [(246, 248)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static List<Integer> parsePageList(String[] pages, int totalPages) {
        return parsePageList(pages, totalPages, false);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,parsePageList,"List<Integer> parsePageList(String[],int,boolean)","[250, 270]","{'A233': [(250, 270)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static List<Integer> parsePageList(String[] pages, int totalPages, boolean oneBased) {
        List<Integer> result = new ArrayList<>();
        int offset = oneBased ? 1 : 0;
        for (String page : pages) {
            if (""all"".equalsIgnoreCase(page)) {

                for (int i = 0; i < totalPages; i++) {
                    result.add(i + offset);
                }
            } else if (page.contains("","")) {
                // Split the string into parts, could be single pages or ranges
                String[] parts = page.split("","");
                for (String part : parts) {
                    result.addAll(handlePart(part, totalPages, offset));
                }
            } else {
                result.addAll(handlePart(page, totalPages, offset));
            }
        }
        return result;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,evaluateNFunc,"List<Integer> evaluateNFunc(String,int)","[272, 295]","{'A233': [(272, 280), (285, 288), (291, 295)], 'A255': [(282, 283)], 'A256': [(281, 281), (284, 284), (289, 290)]}","{'A233': 0.75, 'A255': 0.08333333333333333, 'A256': 0.16666666666666666}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static List<Integer> evaluateNFunc(String expression, int maxValue) {
        List<Integer> results = new ArrayList<>();
        DoubleEvaluator evaluator = new DoubleEvaluator();

        // Validate the expression
        if (!expression.matches(""[0-9n+\\-*/() ]+"")) {
            throw new IllegalArgumentException(""Invalid expression"");
        }

        for (int n = 1; n <= maxValue; n++) {
            // Replace 'n' with the current value of n, correctly handling numbers before
            // 'n'
            String sanitizedExpression = sanitizeNFunction(expression, n);
            Double result = evaluator.evaluate(sanitizedExpression);

            // Check if the result is null or not within bounds
            if (result == null) break;

            if (result.intValue() > 0 && result.intValue() <= maxValue)
                results.add(result.intValue());
        }

        return results;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,sanitizeNFunction,"String sanitizeNFunction(String,int)","[297, 311]","{'A233': [(299, 302), (304, 307)], 'A256': [(297, 298), (303, 303), (308, 311)]}","{'A233': 0.5333333333333333, 'A256': 0.4666666666666667}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    private static String sanitizeNFunction(String expression, int nValue) {
        String sanitizedExpression = expression.replace("" "", """");
        String multiplyByOpeningRoundBracketPattern =
                ""([0-9n)])\\(""; // example: n(n-1), 9(n-1), (n-1)(n-2)
        sanitizedExpression =
                sanitizedExpression.replaceAll(multiplyByOpeningRoundBracketPattern, ""$1*("");

        String multiplyByClosingRoundBracketPattern =
                ""\\)([0-9n)])""; // example: (n-1)n, (n-1)9, (n-1)(n-2)
        sanitizedExpression =
                sanitizedExpression.replaceAll(multiplyByClosingRoundBracketPattern, "")*$1"");

        sanitizedExpression = insertMultiplicationBeforeN(sanitizedExpression, nValue);
        return sanitizedExpression;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,insertMultiplicationBeforeN,"String insertMultiplicationBeforeN(String,int)","[313, 319]","{'A233': [(313, 315), (317, 317), (319, 319)], 'A256': [(316, 316)], 'A243': [(318, 318)]}","{'A233': 0.7142857142857143, 'A256': 0.14285714285714285, 'A243': 0.14285714285714285}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    private static String insertMultiplicationBeforeN(String expression, int nValue) {
        // Insert multiplication between a number and 'n' (e.g., ""4n"" becomes ""4*n"")
        String withMultiplication = expression.replaceAll(""(\\d)n"", ""$1*n"");
        withMultiplication = formatConsecutiveNsForNFunction(withMultiplication);
        // Now replace 'n' with its current value
        return withMultiplication.replace(""n"", String.valueOf(nValue));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,formatConsecutiveNsForNFunction,String formatConsecutiveNsForNFunction(String),"[321, 327]","{'A256': [(321, 327)]}",{'A256': 1.0},A256,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    private static String formatConsecutiveNsForNFunction(String expression) {
        String text = expression;
        while (text.matches("".*n{2,}.*"")) {
            text = text.replaceAll(""(?<!n)n{2}"", ""n*n"");
        }
        return text;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,handlePart,"List<Integer> handlePart(String,int,int)","[329, 369]","{'A233': [(329, 344), (349, 369)], 'A257': [(345, 348)]}","{'A233': 0.9024390243902439, 'A257': 0.0975609756097561}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    private static List<Integer> handlePart(String part, int totalPages, int offset) {
        List<Integer> partResult = new ArrayList<>();

        // First check for n-syntax because it should not be processed as a range
        if (part.contains(""n"")) {
            partResult = evaluateNFunc(part, totalPages);
            // Adjust the results according to the offset
            for (int i = 0; i < partResult.size(); i++) {
                int adjustedValue = partResult.get(i) - 1 + offset;
                partResult.set(i, adjustedValue);
            }
        } else if (part.contains(""-"")) {
            // Process ranges only if it's not n-syntax
            String[] rangeParts = part.split(""-"");
            try {
                int start = Integer.parseInt(rangeParts[0]);
                int end =
                        (rangeParts.length > 1 && !rangeParts[1].isEmpty())
                                ? Integer.parseInt(rangeParts[1])
                                : totalPages;
                for (int i = start; i <= end; i++) {
                    if (i >= 1 && i <= totalPages) {
                        partResult.add(i - 1 + offset);
                    }
                }
            } catch (NumberFormatException e) {
                // Range is invalid, ignore this part
            }
        } else {
            // This is a single page number
            try {
                int pageNum = Integer.parseInt(part.trim());
                if (pageNum >= 1 && pageNum <= totalPages) {
                    partResult.add(pageNum - 1 + offset);
                }
            } catch (NumberFormatException ignored) {
                // Ignore invalid numbers
            }
        }
        return partResult;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,createDir,boolean createDir(String),"[371, 382]","{'A233': [(371, 376), (378, 382)], 'A238': [(377, 377)]}","{'A233': 0.9166666666666666, 'A238': 0.08333333333333333}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static boolean createDir(String path) {
        Path folder = Paths.get(path);
        if (!Files.exists(folder)) {
            try {
                Files.createDirectories(folder);
            } catch (IOException e) {
                log.error(""exception"", e);
                return false;
            }
        }
        return true;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,isValidUUID,boolean isValidUUID(String),"[384, 394]","{'A233': [(384, 394)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static boolean isValidUUID(String uuid) {
        if (uuid == null) {
            return false;
        }
        try {
            UUID.fromString(uuid);
            return true;
        } catch (IllegalArgumentException e) {
            return false;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,saveKeyToSettings,"void saveKeyToSettings(String,Object)","[400, 406]","{'A233': [(402, 402), (406, 406)], 'A234': [(400, 401), (403, 405)]}","{'A233': 0.2857142857142857, 'A234': 0.7142857142857143}",A234,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static void saveKeyToSettings(String key, Object newValue) throws IOException {
        String[] keyArray = key.split(""\\."");
        Path settingsPath = Paths.get(InstallationPathConfig.getSettingsPath());
        YamlHelper settingsYaml = new YamlHelper(settingsPath);
        settingsYaml.updateValue(Arrays.asList(keyArray), newValue);
        settingsYaml.saveOverride(settingsPath);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,generateMachineFingerprint,String generateMachineFingerprint(),"[408, 447]","{'A233': [(408, 447)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static String generateMachineFingerprint() {
        try {
            // Get the MAC address
            StringBuilder sb = new StringBuilder();
            InetAddress ip = InetAddress.getLocalHost();
            NetworkInterface network = NetworkInterface.getByInetAddress(ip);

            if (network == null) {
                Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();
                while (networks.hasMoreElements()) {
                    NetworkInterface net = networks.nextElement();
                    byte[] mac = net.getHardwareAddress();
                    if (mac != null) {
                        for (int i = 0; i < mac.length; i++) {
                            sb.append(String.format(""%02X"", mac[i]));
                        }
                        break; // Use the first network interface with a MAC address
                    }
                }
            } else {
                byte[] mac = network.getHardwareAddress();
                if (mac != null) {
                    for (int i = 0; i < mac.length; i++) {
                        sb.append(String.format(""%02X"", mac[i]));
                    }
                }
            }

            // Hash the MAC address for privacy and consistency
            MessageDigest md = MessageDigest.getInstance(""SHA-256"");
            byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));
            StringBuilder fingerprint = new StringBuilder();
            for (byte b : hash) {
                fingerprint.append(String.format(""%02x"", b));
            }
            return fingerprint.toString();
        } catch (Exception e) {
            return ""GenericID"";
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,extractScript,Path extractScript(String),"[452, 481]","{'A234': [(452, 481)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static Path extractScript(String scriptName) throws IOException {
        // Validate input
        if (scriptName == null || scriptName.trim().isEmpty()) {
            throw new IllegalArgumentException(""scriptName must not be null or empty"");
        }
        if (scriptName.contains("".."") || scriptName.contains(""/"")) {
            throw new IllegalArgumentException(
                    ""scriptName must not contain path traversal characters"");
        }

        if (!DEFAULT_VALID_SCRIPTS.contains(scriptName)) {
            throw new IllegalArgumentException(
                    ""scriptName must be either 'png_to_webp.py' or 'split_photos.py'"");
        }

        Path scriptsDir = Paths.get(InstallationPathConfig.getScriptsPath(), ""python"");
        Files.createDirectories(scriptsDir);

        Path scriptFile = scriptsDir.resolve(scriptName);
        if (!Files.exists(scriptFile)) {
            ClassPathResource resource = new ClassPathResource(""static/python/"" + scriptName);
            try (InputStream in = resource.getInputStream()) {
                Files.copy(in, scriptFile, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                log.error(""Failed to extract Python script"", e);
                throw e;
            }
        }
        return scriptFile;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java,GeneralUtils,isVersionHigher,"boolean isVersionHigher(String,String)","[483, 510]","{'A233': [(483, 510)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/GeneralUtilsTest.java,"    public static boolean isVersionHigher(String currentVersion, String compareVersion) {
        if (currentVersion == null || compareVersion == null) {
            return false;
        }

        // Split versions into components
        String[] current = currentVersion.split(""\\."");
        String[] compare = compareVersion.split(""\\."");

        // Get the length of the shorter version array
        int length = Math.min(current.length, compare.length);

        // Compare each component
        for (int i = 0; i < length; i++) {
            int currentPart = Integer.parseInt(current[i]);
            int comparePart = Integer.parseInt(compare[i]);

            if (currentPart > comparePart) {
                return true;
            }
            if (currentPart < comparePart) {
                return false;
            }
        }

        // If all components so far are equal, the longer version is considered higher
        return current.length > compare.length;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,textToPageSize,PDRectangle textToPageSize(String),"[43, 74]","{'A233': [(43, 74)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static PDRectangle textToPageSize(String size) {
        switch (size.toUpperCase()) {
            case ""A0"" -> {
                return PDRectangle.A0;
            }
            case ""A1"" -> {
                return PDRectangle.A1;
            }
            case ""A2"" -> {
                return PDRectangle.A2;
            }
            case ""A3"" -> {
                return PDRectangle.A3;
            }
            case ""A4"" -> {
                return PDRectangle.A4;
            }
            case ""A5"" -> {
                return PDRectangle.A5;
            }
            case ""A6"" -> {
                return PDRectangle.A6;
            }
            case ""LETTER"" -> {
                return PDRectangle.LETTER;
            }
            case ""LEGAL"" -> {
                return PDRectangle.LEGAL;
            }
            default -> throw ExceptionUtils.createInvalidPageSizeException(size);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,getAllImages,List<RenderedImage> getAllImages(PDResources),"[76, 91]","{'A246': [(76, 91)]}",{'A246': 1.0},A246,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static List<RenderedImage> getAllImages(PDResources resources) throws IOException {
        List<RenderedImage> images = new ArrayList<>();

        for (COSName name : resources.getXObjectNames()) {
            PDXObject object = resources.getXObject(name);

            if (object instanceof PDImageXObject) {
                images.add(((PDImageXObject) object).getImage());

            } else if (object instanceof PDFormXObject) {
                images.addAll(getAllImages(((PDFormXObject) object).getResources()));
            }
        }

        return images;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,hasImages,"boolean hasImages(PDDocument,String)","[93, 106]","{'A233': [(93, 106)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static boolean hasImages(PDDocument document, String pagesToCheck) throws IOException {
        String[] pageOrderArr = pagesToCheck.split("","");
        List<Integer> pageList =
                GeneralUtils.parsePageList(pageOrderArr, document.getNumberOfPages());

        for (int pageNumber : pageList) {
            PDPage page = document.getPage(pageNumber);
            if (hasImagesOnPage(page)) {
                return true;
            }
        }

        return false;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,hasText,"boolean hasText(PDDocument,String,String)","[108, 122]","{'A233': [(108, 122)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static boolean hasText(PDDocument document, String pageNumbersToCheck, String phrase)
            throws IOException {
        String[] pageOrderArr = pageNumbersToCheck.split("","");
        List<Integer> pageList =
                GeneralUtils.parsePageList(pageOrderArr, document.getNumberOfPages());

        for (int pageNumber : pageList) {
            PDPage page = document.getPage(pageNumber);
            if (hasTextOnPage(page, phrase)) {
                return true;
            }
        }

        return false;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,hasImagesOnPage,boolean hasImagesOnPage(PDPage),"[124, 126]","{'A233': [(124, 124), (126, 126)], 'A246': [(125, 125)]}","{'A233': 0.6666666666666666, 'A246': 0.3333333333333333}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static boolean hasImagesOnPage(PDPage page) throws IOException {
        return getAllImages(page.getResources()).size() > 0;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,hasTextOnPage,"boolean hasTextOnPage(PDPage,String)","[128, 135]","{'A233': [(128, 135)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static boolean hasTextOnPage(PDPage page, String phrase) throws IOException {
        PDFTextStripper textStripper = new PDFTextStripper();
        PDDocument tempDoc = new PDDocument();
        tempDoc.addPage(page);
        String pageText = textStripper.getText(tempDoc);
        tempDoc.close();
        return pageText.contains(phrase);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,convertFromPdf,"byte[] convertFromPdf(CustomPDFDocumentFactory,byte[],String,ImageType,boolean,int,String)","[137, 337]","{'A233': [(137, 137), (139, 165), (168, 203), (226, 239), (253, 253), (255, 256), (263, 263), (267, 281), (288, 294), (296, 327), (329, 333), (335, 337)], 'A258': [(204, 225), (240, 252), (254, 254), (257, 262), (264, 266), (282, 287)], 'A234': [(138, 138)], 'A238': [(295, 295), (328, 328), (334, 334)], 'A243': [(166, 167)]}","{'A233': 0.7164179104477612, 'A258': 0.2537313432835821, 'A234': 0.004975124378109453, 'A238': 0.014925373134328358, 'A243': 0.009950248756218905}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static byte[] convertFromPdf(
            CustomPDFDocumentFactory pdfDocumentFactory,
            byte[] inputStream,
            String imageType,
            ImageType colorType,
            boolean singleImage,
            int DPI,
            String filename)
            throws IOException, Exception {

        // Validate and limit DPI to prevent excessive memory usage
        final int MAX_SAFE_DPI = 500; // Maximum safe DPI to prevent memory issues
        if (DPI > MAX_SAFE_DPI) {
            throw ExceptionUtils.createIllegalArgumentException(
                    ""error.dpiExceedsLimit"",
                    ""DPI value {0} exceeds maximum safe limit of {1}. High DPI values can cause memory issues and crashes. Please use a lower DPI value."",
                    DPI,
                    MAX_SAFE_DPI);
        }

        try (PDDocument document = pdfDocumentFactory.load(inputStream)) {
            PDFRenderer pdfRenderer = new PDFRenderer(document);
            pdfRenderer.setSubsamplingAllowed(true);
            int pageCount = document.getNumberOfPages();

            // Create a ByteArrayOutputStream to save the image(s) to
            ByteArrayOutputStream baos = new ByteArrayOutputStream();

            if (singleImage) {
                if (""tiff"".equals(imageType.toLowerCase())
                        || ""tif"".equals(imageType.toLowerCase())) {
                    // Write the images to the output stream as a TIFF with multiple frames
                    ImageWriter writer = ImageIO.getImageWritersByFormatName(""tiff"").next();
                    ImageWriteParam param = writer.getDefaultWriteParam();
                    param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
                    param.setCompressionType(""ZLib"");
                    param.setCompressionQuality(1.0f);

                    try (ImageOutputStream ios = ImageIO.createImageOutputStream(baos)) {
                        writer.setOutput(ios);
                        writer.prepareWriteSequence(null);

                        for (int i = 0; i < pageCount; ++i) {
                            BufferedImage image;
                            try {
                                image = pdfRenderer.renderImageWithDPI(i, DPI, colorType);
                            } catch (IllegalArgumentException e) {
                                if (e.getMessage() != null
                                        && e.getMessage()
                                                .contains(""Maximum size of image exceeded"")) {
                                    throw ExceptionUtils.createIllegalArgumentException(
                                            ""error.pageTooBigForDpi"",
                                            ""PDF page {0} is too large to render at {1} DPI. Please try a lower DPI value (recommended: 150 or less)."",
                                            i + 1,
                                            DPI);
                                }
                                throw e;
                            }
                            writer.writeToSequence(new IIOImage(image, null, null), param);
                        }

                        writer.endWriteSequence();
                    }

                    writer.dispose();
                } else {
                    // Combine all images into a single big image

                    // Calculate the combined image dimensions
                    int maxWidth = 0;
                    int totalHeight = 0;

                    BufferedImage pdfSizeImage = null;
                    int pdfSizeImageIndex = -1;

                    // Using a map to store the rendered dimensions of each page size
                    // to avoid rendering the same page sizes multiple times
                    HashMap<PdfRenderSettingsKey, PdfImageDimensionValue> pageSizes =
                            new HashMap<>();
                    for (int i = 0; i < pageCount; ++i) {
                        PDPage page = document.getPage(i);
                        PDRectangle mediaBox = page.getMediaBox();
                        int rotation = page.getRotation();
                        PdfRenderSettingsKey settings =
                                new PdfRenderSettingsKey(
                                        mediaBox.getWidth(), mediaBox.getHeight(), rotation);
                        PdfImageDimensionValue dimension = pageSizes.get(settings);
                        if (dimension == null) {
                            // Render the image to get the dimensions
                            try {
                                pdfSizeImage = pdfRenderer.renderImageWithDPI(i, DPI, colorType);
                            } catch (IllegalArgumentException e) {
                                if (e.getMessage() != null
                                        && e.getMessage()
                                                .contains(""Maximum size of image exceeded"")) {
                                    throw ExceptionUtils.createIllegalArgumentException(
                                            ""error.pageTooBigExceedsArray"",
                                            ""PDF page {0} is too large to render at {1} DPI. The resulting image would exceed Java's maximum array size. Please try a lower DPI value (recommended: 150 or less)."",
                                            i + 1,
                                            DPI);
                                }
                                throw e;
                            }
                            pdfSizeImageIndex = i;
                            dimension =
                                    new PdfImageDimensionValue(
                                            pdfSizeImage.getWidth(), pdfSizeImage.getHeight());
                            pageSizes.put(settings, dimension);
                            if (pdfSizeImage.getWidth() > maxWidth) {
                                maxWidth = pdfSizeImage.getWidth();
                            }
                        }
                        totalHeight += dimension.height();
                    }

                    // Create a new BufferedImage to store the combined images
                    BufferedImage combined =
                            prepareImageForPdfToImage(maxWidth, totalHeight, imageType);
                    Graphics g = combined.getGraphics();

                    int currentHeight = 0;
                    BufferedImage pageImage;

                    // Check if the first image is the last rendered image
                    boolean firstImageAlreadyRendered = pdfSizeImageIndex == 0;

                    for (int i = 0; i < pageCount; ++i) {
                        if (firstImageAlreadyRendered && i == 0) {
                            pageImage = pdfSizeImage;
                        } else {
                            try {
                                pageImage = pdfRenderer.renderImageWithDPI(i, DPI, colorType);
                            } catch (IllegalArgumentException e) {
                                if (e.getMessage() != null
                                        && e.getMessage()
                                                .contains(""Maximum size of image exceeded"")) {
                                    throw ExceptionUtils.createIllegalArgumentException(
                                            ""error.pageTooBigForDpi"",
                                            ""PDF page {0} is too large to render at {1} DPI. Please try a lower DPI value (recommended: 150 or less)."",
                                            i + 1,
                                            DPI);
                                }
                                throw e;
                            }
                        }

                        // Calculate the x-coordinate to center the image
                        int x = (maxWidth - pageImage.getWidth()) / 2;

                        g.drawImage(pageImage, x, currentHeight, null);
                        currentHeight += pageImage.getHeight();
                    }

                    // Write the image to the output stream
                    ImageIO.write(combined, imageType, baos);
                }

                // Log that the image was successfully written to the byte array
                log.info(""Image successfully written to byte array"");
            } else {
                // Zip the images and return as byte array
                try (ZipOutputStream zos = new ZipOutputStream(baos)) {
                    for (int i = 0; i < pageCount; ++i) {
                        BufferedImage image;
                        try {
                            image = pdfRenderer.renderImageWithDPI(i, DPI, colorType);
                        } catch (IllegalArgumentException e) {
                            if (e.getMessage() != null
                                    && e.getMessage().contains(""Maximum size of image exceeded"")) {
                                throw ExceptionUtils.createIllegalArgumentException(
                                        ""error.pageTooBigForDpi"",
                                        ""PDF page {0} is too large to render at {1} DPI. Please try a lower DPI value (recommended: 150 or less)."",
                                        i + 1,
                                        DPI);
                            }
                            throw e;
                        }
                        try (ByteArrayOutputStream baosImage = new ByteArrayOutputStream()) {
                            ImageIO.write(image, imageType, baosImage);

                            // Add the image to the zip file
                            zos.putNextEntry(
                                    new ZipEntry(
                                            String.format(
                                                    filename + ""_%d.%s"",
                                                    i + 1,
                                                    imageType.toLowerCase())));
                            zos.write(baosImage.toByteArray());
                        }
                    }
                    // Log that the images were successfully written to the byte array
                    log.info(""Images successfully written to byte array as a zip"");
                }
            }
            return baos.toByteArray();
        } catch (IOException e) {
            // Log an error message if there is an issue converting the PDF to an image
            log.error(""Error converting PDF to image"", e);
            throw e;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,convertPdfToPdfImage,PDDocument convertPdfToPdfImage(PDDocument),"[346, 378]","{'A233': [(351, 363)], 'A259': [(346, 350), (370, 373), (375, 378)], 'A256': [(364, 369), (374, 374)]}","{'A233': 0.3939393939393939, 'A259': 0.3939393939393939, 'A256': 0.21212121212121213}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static PDDocument convertPdfToPdfImage(PDDocument document) throws IOException {
        PDDocument imageDocument = new PDDocument();
        PDFRenderer pdfRenderer = new PDFRenderer(document);
        pdfRenderer.setSubsamplingAllowed(true);
        for (int page = 0; page < document.getNumberOfPages(); ++page) {
            BufferedImage bim;
            try {
                bim = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);
            } catch (IllegalArgumentException e) {
                if (e.getMessage() != null
                        && e.getMessage().contains(""Maximum size of image exceeded"")) {
                    throw ExceptionUtils.createIllegalArgumentException(
                            ""error.pageTooBigFor300Dpi"",
                            ""PDF page {0} is too large to render at 300 DPI. The resulting image would exceed Java's maximum array size. Please use a lower DPI value for PDF-to-image conversion."",
                            page + 1);
                }
                throw e;
            }
            PDPage originalPage = document.getPage(page);

            float width = originalPage.getMediaBox().getWidth();
            float height = originalPage.getMediaBox().getHeight();

            PDPage newPage = new PDPage(new PDRectangle(width, height));
            imageDocument.addPage(newPage);
            PDImageXObject pdImage = LosslessFactory.createFromImage(imageDocument, bim);
            PDPageContentStream contentStream =
                    new PDPageContentStream(imageDocument, newPage, AppendMode.APPEND, true, true);
            contentStream.drawImage(pdImage, 0, 0, width, height);
            contentStream.close();
        }
        return imageDocument;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,prepareImageForPdfToImage,"BufferedImage prepareImageForPdfToImage(int,int,String)","[380, 395]","{'A258': [(380, 395)]}",{'A258': 1.0},A258,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    private static BufferedImage prepareImageForPdfToImage(
            int maxWidth, int height, String imageType) {
        BufferedImage combined;
        if (""png"".equalsIgnoreCase(imageType)) {
            combined = new BufferedImage(maxWidth, height, BufferedImage.TYPE_INT_ARGB);
        } else {
            combined = new BufferedImage(maxWidth, height, BufferedImage.TYPE_INT_RGB);
        }
        if (!""png"".equalsIgnoreCase(imageType)) {
            Graphics g = combined.getGraphics();
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, combined.getWidth(), combined.getHeight());
            g.dispose();
        }
        return combined;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,imageToPdf,"byte[] imageToPdf(MultipartFile[],String,boolean,String,CustomPDFDocumentFactory)","[397, 439]","{'A233': [(397, 401), (403, 406), (408, 422), (424, 427), (429, 439)], 'A234': [(402, 402)], 'A243': [(407, 407), (428, 428)], 'A242': [(423, 423)]}","{'A233': 0.9069767441860465, 'A234': 0.023255813953488372, 'A243': 0.046511627906976744, 'A242': 0.023255813953488372}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static byte[] imageToPdf(
            MultipartFile[] files,
            String fitOption,
            boolean autoRotate,
            String colorType,
            CustomPDFDocumentFactory pdfDocumentFactory)
            throws IOException {
        try (PDDocument doc = pdfDocumentFactory.createNewDocument()) {
            for (MultipartFile file : files) {
                String contentType = file.getContentType();
                String originalFilename = Filenames.toSimpleFileName(file.getOriginalFilename());
                if (originalFilename != null
                        && (originalFilename.toLowerCase().endsWith("".tiff"")
                                || originalFilename.toLowerCase().endsWith("".tif""))) {
                    ImageReader reader = ImageIO.getImageReadersByFormatName(""tiff"").next();
                    reader.setInput(ImageIO.createImageInputStream(file.getInputStream()));
                    int numPages = reader.getNumImages(true);
                    for (int i = 0; i < numPages; i++) {
                        BufferedImage pageImage = reader.read(i);
                        BufferedImage convertedImage =
                                ImageProcessingUtils.convertColorType(pageImage, colorType);
                        PDImageXObject pdImage =
                                LosslessFactory.createFromImage(doc, convertedImage);
                        addImageToDocument(doc, pdImage, fitOption, autoRotate);
                    }
                } else {
                    BufferedImage image = ImageProcessingUtils.loadImageWithExifOrientation(file);
                    BufferedImage convertedImage =
                            ImageProcessingUtils.convertColorType(image, colorType);
                    // Use JPEGFactory if it's JPEG since JPEG is lossy
                    PDImageXObject pdImage =
                            (contentType != null && ""image/jpeg"".equals(contentType))
                                    ? JPEGFactory.createFromImage(doc, convertedImage)
                                    : LosslessFactory.createFromImage(doc, convertedImage);
                    addImageToDocument(doc, pdImage, fitOption, autoRotate);
                }
            }
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            doc.save(byteArrayOutputStream);
            log.debug(""PDF successfully saved to byte array"");
            return byteArrayOutputStream.toByteArray();
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,addImageToDocument,"void addImageToDocument(PDDocument,PDImageXObject,String,boolean)","[441, 489]","{'A233': [(441, 485), (487, 489)], 'A238': [(486, 486)]}","{'A233': 0.9795918367346939, 'A238': 0.02040816326530612}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static void addImageToDocument(
            PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate)
            throws IOException {
        boolean imageIsLandscape = image.getWidth() > image.getHeight();
        PDRectangle pageSize = PDRectangle.A4;

        if (autoRotate && imageIsLandscape) {
            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());
        }

        if (""fitDocumentToImage"".equals(fitOption)) {
            pageSize = new PDRectangle(image.getWidth(), image.getHeight());
        }

        PDPage page = new PDPage(pageSize);
        doc.addPage(page);

        float pageWidth = page.getMediaBox().getWidth();
        float pageHeight = page.getMediaBox().getHeight();

        try (PDPageContentStream contentStream =
                new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {
            if (""fillPage"".equals(fitOption) || ""fitDocumentToImage"".equals(fitOption)) {
                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);
            } else if (""maintainAspectRatio"".equals(fitOption)) {
                float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();
                float pageAspectRatio = pageWidth / pageHeight;

                float scaleFactor = 1.0f;
                if (imageAspectRatio > pageAspectRatio) {
                    scaleFactor = pageWidth / image.getWidth();
                } else {
                    scaleFactor = pageHeight / image.getHeight();
                }

                float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;
                float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;
                contentStream.drawImage(
                        image,
                        xPos,
                        yPos,
                        image.getWidth() * scaleFactor,
                        image.getHeight() * scaleFactor);
            }
        } catch (IOException e) {
            log.error(""Error adding image to PDF"", e);
            throw e;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,overlayImage,"byte[] overlayImage(CustomPDFDocumentFactory,byte[],byte[],float,float,boolean)","[491, 528]","{'A233': [(491, 491), (493, 512), (514, 518), (520, 525), (527, 528)], 'A234': [(492, 492)], 'A238': [(513, 513), (519, 519), (526, 526)]}","{'A233': 0.8947368421052632, 'A234': 0.02631578947368421, 'A238': 0.07894736842105263}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public static byte[] overlayImage(
            CustomPDFDocumentFactory pdfDocumentFactory,
            byte[] pdfBytes,
            byte[] imageBytes,
            float x,
            float y,
            boolean everyPage)
            throws IOException {

        PDDocument document = pdfDocumentFactory.load(pdfBytes);

        // Get the first page of the PDF
        int pages = document.getNumberOfPages();
        for (int i = 0; i < pages; i++) {
            PDPage page = document.getPage(i);
            try (PDPageContentStream contentStream =
                    new PDPageContentStream(
                            document, page, PDPageContentStream.AppendMode.APPEND, true, true)) {
                // Create an image object from the image bytes
                PDImageXObject image = PDImageXObject.createFromByteArray(document, imageBytes, """");
                // Draw the image onto the page at the specified x and y coordinates
                contentStream.drawImage(image, x, y);
                log.info(""Image successfully overlayed onto PDF"");
                if (!everyPage && i == 0) {
                    break;
                }
            } catch (IOException e) {
                // Log an error message if there is an issue overlaying the image onto the PDF
                log.error(""Error overlaying image onto PDF"", e);
                throw e;
            }
        }
        // Create a ByteArrayOutputStream to save the PDF to
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        document.save(baos);
        log.info(""PDF successfully saved to byte array"");
        return baos.toByteArray();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,containsTextInFile,"boolean containsTextInFile(PDDocument,String,String)","[530, 567]","{'A233': [(530, 567)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public boolean containsTextInFile(PDDocument pdfDocument, String text, String pagesToCheck)
            throws IOException {
        PDFTextStripper textStripper = new PDFTextStripper();
        String pdfText = """";

        if (pagesToCheck == null || ""all"".equals(pagesToCheck)) {
            pdfText = textStripper.getText(pdfDocument);
        } else {
            // remove whitespaces
            pagesToCheck = pagesToCheck.replaceAll(""\\s+"", """");

            String[] splitPoints = pagesToCheck.split("","");
            for (String splitPoint : splitPoints) {
                if (splitPoint.contains(""-"")) {
                    // Handle page ranges
                    String[] range = splitPoint.split(""-"");
                    int startPage = Integer.parseInt(range[0]);
                    int endPage = Integer.parseInt(range[1]);

                    for (int i = startPage; i <= endPage; i++) {
                        textStripper.setStartPage(i);
                        textStripper.setEndPage(i);
                        pdfText += textStripper.getText(pdfDocument);
                    }
                } else {
                    // Handle individual page
                    int page = Integer.parseInt(splitPoint);
                    textStripper.setStartPage(page);
                    textStripper.setEndPage(page);
                    pdfText += textStripper.getText(pdfDocument);
                }
            }
        }

        pdfDocument.close();

        return pdfText.contains(text);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,pageCount,"boolean pageCount(PDDocument,int,String)","[569, 584]","{'A233': [(569, 584)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public boolean pageCount(PDDocument pdfDocument, int pageCount, String comparator)
            throws IOException {
        int actualPageCount = pdfDocument.getNumberOfPages();
        pdfDocument.close();

        switch (comparator.toLowerCase()) {
            case ""greater"":
                return actualPageCount > pageCount;
            case ""equal"":
                return actualPageCount == pageCount;
            case ""less"":
                return actualPageCount < pageCount;
            default:
                throw ExceptionUtils.createInvalidArgumentException(""comparator"", comparator);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfUtils.java,PdfUtils,pageSize,"boolean pageSize(PDDocument,String)","[586, 603]","{'A233': [(586, 603)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PdfUtilsTest.java,"    public boolean pageSize(PDDocument pdfDocument, String expectedPageSize) throws IOException {
        PDPage firstPage = pdfDocument.getPage(0);
        PDRectangle mediaBox = firstPage.getMediaBox();

        float actualPageWidth = mediaBox.getWidth();
        float actualPageHeight = mediaBox.getHeight();

        pdfDocument.close();

        // Assumes the expectedPageSize is in the format ""widthxheight"", e.g. ""595x842""
        // for A4
        String[] dimensions = expectedPageSize.split(""x"");
        float expectedPageWidth = Float.parseFloat(dimensions[0]);
        float expectedPageHeight = Float.parseFloat(dimensions[1]);

        // Checks if the actual page size matches the expected page size
        return actualPageWidth == expectedPageWidth && actualPageHeight == expectedPageHeight;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UrlUtils.java,UrlUtils,getOrigin,String getOrigin(HttpServletRequest),"[10, 17]","{'A238': [(10, 17)]}",{'A238': 1.0},A238,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UrlUtilsTest.java,"    public static String getOrigin(HttpServletRequest request) {
        String scheme = request.getScheme(); // http or https
        String serverName = request.getServerName(); // localhost
        int serverPort = request.getServerPort(); // 8080
        String contextPath = request.getContextPath(); // /myapp

        return scheme + ""://"" + serverName + "":"" + serverPort + contextPath;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UrlUtils.java,UrlUtils,isPortAvailable,boolean isPortAvailable(int),"[19, 25]","{'A233': [(19, 25)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UrlUtilsTest.java,"    public static boolean isPortAvailable(int port) {
        try (ServerSocket socket = new ServerSocket(port)) {
            return true;
        } catch (IOException e) {
            return false;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UrlUtils.java,UrlUtils,findAvailablePort,String findAvailablePort(int),"[27, 33]","{'A233': [(27, 33)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UrlUtilsTest.java,"    public static String findAvailablePort(int startPort) {
        int port = startPort;
        while (!isPortAvailable(port)) {
            port++;
        }
        return String.valueOf(port);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/WebResponseUtils.java,WebResponseUtils,baosToWebResponse,"ResponseEntity<byte[]> baosToWebResponse(ByteArrayOutputStream,String)","[19, 22]","{'A236': [(19, 19)], 'A233': [(20, 22)]}","{'A236': 0.25, 'A233': 0.75}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/WebResponseUtilsTest.java,"    public static ResponseEntity<byte[]> baosToWebResponse(
            ByteArrayOutputStream baos, String docName) throws IOException {
        return WebResponseUtils.bytesToWebResponse(baos.toByteArray(), docName);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/WebResponseUtils.java,WebResponseUtils,baosToWebResponse,"ResponseEntity<byte[]> baosToWebResponse(ByteArrayOutputStream,String,MediaType)","[24, 27]","{'A236': [(24, 24)], 'A233': [(25, 27)]}","{'A236': 0.25, 'A233': 0.75}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/WebResponseUtilsTest.java,"    public static ResponseEntity<byte[]> baosToWebResponse(
            ByteArrayOutputStream baos, String docName, MediaType mediaType) throws IOException {
        return WebResponseUtils.bytesToWebResponse(baos.toByteArray(), docName, mediaType);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/WebResponseUtils.java,WebResponseUtils,multiPartFileToWebResponse,ResponseEntity<byte[]> multiPartFileToWebResponse(MultipartFile),"[29, 37]","{'A233': [(29, 30), (32, 37)], 'A243': [(31, 31)]}","{'A233': 0.8888888888888888, 'A243': 0.1111111111111111}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/WebResponseUtilsTest.java,"    public static ResponseEntity<byte[]> multiPartFileToWebResponse(MultipartFile file)
            throws IOException {
        String fileName = Filenames.toSimpleFileName(file.getOriginalFilename());
        MediaType mediaType = MediaType.parseMediaType(file.getContentType());

        byte[] bytes = file.getBytes();

        return bytesToWebResponse(bytes, fileName, mediaType);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/WebResponseUtils.java,WebResponseUtils,bytesToWebResponse,"ResponseEntity<byte[]> bytesToWebResponse(byte[],String,MediaType)","[39, 50]","{'A236': [(47, 47)], 'A233': [(39, 46), (48, 50)]}","{'A236': 0.08333333333333333, 'A233': 0.9166666666666666}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/WebResponseUtilsTest.java,"    public static ResponseEntity<byte[]> bytesToWebResponse(
            byte[] bytes, String docName, MediaType mediaType) throws IOException {

        // Return the PDF as a response
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(mediaType);
        headers.setContentLength(bytes.length);
        String encodedDocName =
                URLEncoder.encode(docName, StandardCharsets.UTF_8).replaceAll(""\\+"", ""%20"");
        headers.setContentDispositionFormData(""attachment"", encodedDocName);
        return new ResponseEntity<>(bytes, headers, HttpStatus.OK);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/WebResponseUtils.java,WebResponseUtils,bytesToWebResponse,"ResponseEntity<byte[]> bytesToWebResponse(byte[],String)","[52, 55]","{'A233': [(52, 55)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/WebResponseUtilsTest.java,"    public static ResponseEntity<byte[]> bytesToWebResponse(byte[] bytes, String docName)
            throws IOException {
        return bytesToWebResponse(bytes, docName, MediaType.APPLICATION_PDF);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/WebResponseUtils.java,WebResponseUtils,pdfDocToWebResponse,"ResponseEntity<byte[]> pdfDocToWebResponse(PDDocument,String)","[57, 66]","{'A236': [(65, 65)], 'A233': [(57, 64), (66, 66)]}","{'A236': 0.1, 'A233': 0.9}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/WebResponseUtilsTest.java,"    public static ResponseEntity<byte[]> pdfDocToWebResponse(PDDocument document, String docName)
            throws IOException {

        // Open Byte Array and save document to it
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        document.save(baos);
        document.close();

        return baosToWebResponse(baos, docName);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ExecutorFactory.java,ExecutorFactory,newVirtualOrCachedThreadExecutor,ExecutorService newVirtualOrCachedThreadExecutor(),"[15, 30]","{'A233': [(15, 30)]}",{'A233': 1.0},A233,,"    public static ExecutorService newVirtualOrCachedThreadExecutor() {
        try {
            ExecutorService executor =
                    (ExecutorService)
                            Executors.class
                                    .getMethod(""newVirtualThreadPerTaskExecutor"")
                                    .invoke(null);
            return executor;
        } catch (NoSuchMethodException e) {
            log.debug(""Virtual threads not available; falling back to cached thread pool."");
        } catch (Exception e) {
            log.debug(""Error initializing virtual thread executor: {}"", e.getMessage(), e);
        }

        return Executors.newCachedThreadPool();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,register,File register(File),"[37, 43]","{'A233': [(37, 43)]}",{'A233': 1.0},A233,,"    public File register(File file) {
        if (file != null) {
            registeredFiles.put(file.toPath(), Instant.now());
            log.debug(""Registered temp file: {}"", file.getAbsolutePath());
        }
        return file;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,register,Path register(Path),"[51, 57]","{'A233': [(51, 57)]}",{'A233': 1.0},A233,,"    public Path register(Path path) {
        if (path != null) {
            registeredFiles.put(path, Instant.now());
            log.debug(""Registered temp path: {}"", path.toString());
        }
        return path;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,registerDirectory,Path registerDirectory(Path),"[65, 71]","{'A233': [(65, 71)]}",{'A233': 1.0},A233,,"    public Path registerDirectory(Path directory) {
        if (directory != null && Files.isDirectory(directory)) {
            tempDirectories.add(directory);
            log.debug(""Registered temp directory: {}"", directory.toString());
        }
        return directory;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,registerThirdParty,File registerThirdParty(File),"[79, 85]","{'A233': [(79, 85)]}",{'A233': 1.0},A233,,"    public File registerThirdParty(File file) {
        if (file != null) {
            thirdPartyTempFiles.add(file.toPath());
            log.debug(""Registered third-party temp file: {}"", file.getAbsolutePath());
        }
        return file;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,unregister,void unregister(File),"[92, 98]","{'A233': [(92, 98)]}",{'A233': 1.0},A233,,"    public void unregister(File file) {
        if (file != null) {
            registeredFiles.remove(file.toPath());
            thirdPartyTempFiles.remove(file.toPath());
            log.debug(""Unregistered temp file: {}"", file.getAbsolutePath());
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,unregister,void unregister(Path),"[105, 111]","{'A233': [(105, 111)]}",{'A233': 1.0},A233,,"    public void unregister(Path path) {
        if (path != null) {
            registeredFiles.remove(path);
            thirdPartyTempFiles.remove(path);
            log.debug(""Unregistered temp path: {}"", path.toString());
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,getAllRegisteredFiles,Set<Path> getAllRegisteredFiles(),"[118, 120]","{'A233': [(118, 120)]}",{'A233': 1.0},A233,,"    public Set<Path> getAllRegisteredFiles() {
        return registeredFiles.keySet();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,getFilesOlderThan,Set<Path> getFilesOlderThan(long),"[128, 134]","{'A233': [(128, 134)]}",{'A233': 1.0},A233,,"    public Set<Path> getFilesOlderThan(long maxAgeMillis) {
        Instant cutoffTime = Instant.now().minusMillis(maxAgeMillis);
        return registeredFiles.entrySet().stream()
                .filter(entry -> entry.getValue().isBefore(cutoffTime))
                .map(Map.Entry::getKey)
                .collect(Collectors.toSet());
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,getThirdPartyTempFiles,Set<Path> getThirdPartyTempFiles(),"[141, 143]","{'A233': [(141, 143)]}",{'A233': 1.0},A233,,"    public Set<Path> getThirdPartyTempFiles() {
        return thirdPartyTempFiles;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,getTempDirectories,Set<Path> getTempDirectories(),"[150, 152]","{'A233': [(150, 152)]}",{'A233': 1.0},A233,,"    public Set<Path> getTempDirectories() {
        return tempDirectories;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,contains,boolean contains(File),"[160, 166]","{'A233': [(160, 166)]}",{'A233': 1.0},A233,,"    public boolean contains(File file) {
        if (file == null) {
            return false;
        }
        Path path = file.toPath();
        return registeredFiles.containsKey(path) || thirdPartyTempFiles.contains(path);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempFileRegistry.java,TempFileRegistry,clear,void clear(),"[169, 173]","{'A233': [(169, 173)]}",{'A233': 1.0},A233,,"    public void clear() {
        registeredFiles.clear();
        thirdPartyTempFiles.clear();
        tempDirectories.clear();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,isJakartaMailAvailable,boolean isJakartaMailAvailable(),"[98, 118]","{'A248': [(98, 118)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static boolean isJakartaMailAvailable() {
        if (jakartaMailAvailable == null) {
            try {
                // Check for core Jakarta Mail classes
                Class.forName(""jakarta.mail.internet.MimeMessage"");
                Class.forName(""jakarta.mail.Session"");
                Class.forName(""jakarta.mail.internet.MimeUtility"");
                Class.forName(""jakarta.mail.internet.MimePart"");
                Class.forName(""jakarta.mail.internet.MimeMultipart"");
                Class.forName(""jakarta.mail.Multipart"");
                Class.forName(""jakarta.mail.Part"");

                jakartaMailAvailable = true;
                log.debug(""Jakarta Mail libraries are available"");
            } catch (ClassNotFoundException e) {
                jakartaMailAvailable = false;
                log.debug(""Jakarta Mail libraries are not available, using basic parsing"");
            }
        }
        return jakartaMailAvailable;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,convertEmlToHtml,"String convertEmlToHtml(byte[],EmlToPdfRequest)","[120, 129]","{'A248': [(122, 129)], 'A234': [(120, 121)]}","{'A248': 0.8, 'A234': 0.2}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    public static String convertEmlToHtml(byte[] emlBytes, EmlToPdfRequest request)
            throws IOException {
        validateEmlInput(emlBytes);

        if (isJakartaMailAvailable()) {
            return convertEmlToHtmlAdvanced(emlBytes, request);
        } else {
            return convertEmlToHtmlBasic(emlBytes, request);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,convertEmlToPdf,"byte[] convertEmlToPdf(String,EmlToPdfRequest,byte[],String,boolean,stirling.software.common.service.CustomPDFDocumentFactory,TempFileManager)","[131, 176]","{'A248': [(131, 136), (139, 155), (159, 161), (165, 176)], 'A234': [(156, 156), (162, 164)], 'A233': [(137, 138), (157, 158)]}","{'A248': 0.8260869565217391, 'A234': 0.08695652173913043, 'A233': 0.08695652173913043}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    public static byte[] convertEmlToPdf(
            String weasyprintPath,
            EmlToPdfRequest request,
            byte[] emlBytes,
            String fileName,
            boolean disableSanitize,
            stirling.software.common.service.CustomPDFDocumentFactory pdfDocumentFactory,
            TempFileManager tempFileManager)
            throws IOException, InterruptedException {

        validateEmlInput(emlBytes);

        try {
            // Generate HTML representation
            EmailContent emailContent = null;
            String htmlContent;

            if (isJakartaMailAvailable()) {
                emailContent = extractEmailContentAdvanced(emlBytes, request);
                htmlContent = generateEnhancedEmailHtml(emailContent, request);
            } else {
                htmlContent = convertEmlToHtmlBasic(emlBytes, request);
            }

            // Convert HTML to PDF
            byte[] pdfBytes =
                    convertHtmlToPdf(
                            weasyprintPath, request, htmlContent, disableSanitize, tempFileManager);

            // Attach files if available and requested
            if (shouldAttachFiles(emailContent, request)) {
                pdfBytes =
                        attachFilesToPdf(
                                pdfBytes, emailContent.getAttachments(), pdfDocumentFactory);
            }

            return pdfBytes;

        } catch (IOException | InterruptedException e) {
            log.error(""Failed to convert EML to PDF for file: {}"", fileName, e);
            throw e;
        } catch (Exception e) {
            log.error(""Unexpected error during EML to PDF conversion for file: {}"", fileName, e);
            throw new IOException(""Conversion failed: "" + e.getMessage(), e);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,validateEmlInput,void validateEmlInput(byte[]),"[178, 186]","{'A248': [(178, 186)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static void validateEmlInput(byte[] emlBytes) {
        if (emlBytes == null || emlBytes.length == 0) {
            throw new IllegalArgumentException(""EML file is empty or null"");
        }

        if (isInvalidEmlFormat(emlBytes)) {
            throw new IllegalArgumentException(""Invalid EML file format"");
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,shouldAttachFiles,"boolean shouldAttachFiles(EmailContent,EmlToPdfRequest)","[188, 193]","{'A248': [(188, 189), (193, 193)], 'A234': [(190, 192)]}","{'A248': 0.5, 'A234': 0.5}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static boolean shouldAttachFiles(EmailContent emailContent, EmlToPdfRequest request) {
        return emailContent != null
                && request != null
                && request.isIncludeAttachments()
                && !emailContent.getAttachments().isEmpty();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,convertHtmlToPdf,"byte[] convertHtmlToPdf(String,EmlToPdfRequest,String,boolean,TempFileManager)","[195, 224]","{'A248': [(201, 202), (204, 210), (213, 220), (223, 224)], 'A236': [(203, 203)], 'A234': [(195, 198)], 'A233': [(199, 200), (211, 212), (221, 222)]}","{'A248': 0.6333333333333333, 'A236': 0.03333333333333333, 'A234': 0.13333333333333333, 'A233': 0.2}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static byte[] convertHtmlToPdf(
            String weasyprintPath,
            EmlToPdfRequest request,
            String htmlContent,
            boolean disableSanitize,
            TempFileManager tempFileManager)
            throws IOException, InterruptedException {

        HTMLToPdfRequest htmlRequest = createHtmlRequest(request);

        try {
            return FileToPdf.convertHtmlToPdf(
                    weasyprintPath,
                    htmlRequest,
                    htmlContent.getBytes(StandardCharsets.UTF_8),
                    ""email.html"",
                    disableSanitize,
                    tempFileManager);
        } catch (IOException | InterruptedException e) {
            log.warn(""Initial HTML to PDF conversion failed, trying with simplified HTML"");
            String simplifiedHtml = simplifyHtmlContent(htmlContent);
            return FileToPdf.convertHtmlToPdf(
                    weasyprintPath,
                    htmlRequest,
                    simplifiedHtml.getBytes(StandardCharsets.UTF_8),
                    ""email.html"",
                    disableSanitize,
                    tempFileManager);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,simplifyHtmlContent,String simplifyHtmlContent(String),"[226, 230]","{'A248': [(226, 230)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String simplifyHtmlContent(String htmlContent) {
        String simplified = htmlContent.replaceAll(""(?i)<script[^>]*>.*?</script>"", """");
        simplified = simplified.replaceAll(""(?i)<style[^>]*>.*?</style>"", """");
        return simplified;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,generateUniqueAttachmentId,String generateUniqueAttachmentId(String),"[232, 234]","{'A248': [(232, 234)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String generateUniqueAttachmentId(String filename) {
        return ""attachment_"" + filename.hashCode() + ""_"" + System.nanoTime();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,convertEmlToHtmlBasic,"String convertEmlToHtmlBasic(byte[],EmlToPdfRequest)","[236, 334]","{'A248': [(237, 334)], 'A234': [(236, 236)]}","{'A248': 0.98989898989899, 'A234': 0.010101010101010102}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {
        if (emlBytes == null || emlBytes.length == 0) {
            throw new IllegalArgumentException(""EML file is empty or null"");
        }

        String emlContent = new String(emlBytes, StandardCharsets.UTF_8);

        // Basic email parsing
        String subject = extractBasicHeader(emlContent, ""Subject:"");
        String from = extractBasicHeader(emlContent, ""From:"");
        String to = extractBasicHeader(emlContent, ""To:"");
        String cc = extractBasicHeader(emlContent, ""Cc:"");
        String bcc = extractBasicHeader(emlContent, ""Bcc:"");
        String date = extractBasicHeader(emlContent, ""Date:"");

        // Try to extract HTML content
        String htmlBody = extractHtmlBody(emlContent);
        if (htmlBody == null) {
            String textBody = extractTextBody(emlContent);
            htmlBody =
                    convertTextToHtml(
                            textBody != null ? textBody : ""Email content could not be parsed"");
        }

        // Generate HTML with custom styling based on request
        StringBuilder html = new StringBuilder();
        html.append(""<!DOCTYPE html>\n"");
        html.append(""<html><head><meta charset=\""UTF-8\"">\n"");
        html.append(""<title>"").append(escapeHtml(subject)).append(""</title>\n"");
        html.append(""<style>\n"");
        appendEnhancedStyles(html);
        html.append(""</style>\n"");
        html.append(""</head><body>\n"");

        html.append(""<div class=\""email-container\"">\n"");
        html.append(""<div class=\""email-header\"">\n"");
        html.append(""<h1>"").append(escapeHtml(subject)).append(""</h1>\n"");
        html.append(""<div class=\""email-meta\"">\n"");
        html.append(""<div><strong>From:</strong> "").append(escapeHtml(from)).append(""</div>\n"");
        html.append(""<div><strong>To:</strong> "").append(escapeHtml(to)).append(""</div>\n"");

        // Include CC and BCC if present and requested
        if (request != null && request.isIncludeAllRecipients()) {
            if (!cc.trim().isEmpty()) {
                html.append(""<div><strong>CC:</strong> "").append(escapeHtml(cc)).append(""</div>\n"");
            }
            if (!bcc.trim().isEmpty()) {
                html.append(""<div><strong>BCC:</strong> "")
                        .append(escapeHtml(bcc))
                        .append(""</div>\n"");
            }
        }

        if (!date.trim().isEmpty()) {
            html.append(""<div><strong>Date:</strong> "").append(escapeHtml(date)).append(""</div>\n"");
        }
        html.append(""</div></div>\n"");

        html.append(""<div class=\""email-body\"">\n"");
        html.append(processEmailHtmlBody(htmlBody));
        html.append(""</div>\n"");

        // Add attachment information - always check for and display attachments
        String attachmentInfo = extractAttachmentInfo(emlContent);
        if (!attachmentInfo.isEmpty()) {
            html.append(""<div class=\""attachment-section\"">\n"");
            html.append(""<h3>Attachments</h3>\n"");
            html.append(attachmentInfo);

            // Add a status message about attachment inclusion
            if (request != null && request.isIncludeAttachments()) {
                html.append(""<div class=\""attachment-inclusion-note\"">\n"");
                html.append(
                        ""<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\n"");
                html.append(""</div>\n"");
            } else {
                html.append(""<div class=\""attachment-info-note\"">\n"");
                html.append(
                        ""<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\n"");
                html.append(""</div>\n"");
            }

            html.append(""</div>\n"");
        }

        // Show advanced features status if requested
        assert request != null;
        if (request.getFileInput().isEmpty()) {
            html.append(""<div class=\""advanced-features-notice\"">\n"");
            html.append(
                    ""<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\n"");
            html.append(""</div>\n"");
        }

        html.append(""</div>\n"");
        html.append(""</body></html>"");

        return html.toString();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,extractEmailContentAdvanced,"EmailContent extractEmailContentAdvanced(byte[],EmlToPdfRequest)","[336, 362]","{'A248': [(336, 362)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static EmailContent extractEmailContentAdvanced(
            byte[] emlBytes, EmlToPdfRequest request) {
        try {
            // Use Jakarta Mail for processing
            Class<?> sessionClass = Class.forName(""jakarta.mail.Session"");
            Class<?> mimeMessageClass = Class.forName(""jakarta.mail.internet.MimeMessage"");

            Method getDefaultInstance =
                    sessionClass.getMethod(""getDefaultInstance"", Properties.class);
            Object session = getDefaultInstance.invoke(null, new Properties());

            // Cast the session object to the proper type for the constructor
            Class<?>[] constructorArgs = new Class<?>[] {sessionClass, InputStream.class};
            Constructor<?> mimeMessageConstructor =
                    mimeMessageClass.getConstructor(constructorArgs);
            Object message =
                    mimeMessageConstructor.newInstance(session, new ByteArrayInputStream(emlBytes));

            return extractEmailContentAdvanced(message, request);

        } catch (ReflectiveOperationException e) {
            // Create basic EmailContent from basic processing
            EmailContent content = new EmailContent();
            content.setHtmlBody(convertEmlToHtmlBasic(emlBytes, request));
            return content;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,convertEmlToHtmlAdvanced,"String convertEmlToHtmlAdvanced(byte[],EmlToPdfRequest)","[364, 367]","{'A248': [(365, 367)], 'A234': [(364, 364)]}","{'A248': 0.75, 'A234': 0.25}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String convertEmlToHtmlAdvanced(byte[] emlBytes, EmlToPdfRequest request) {
        EmailContent content = extractEmailContentAdvanced(emlBytes, request);
        return generateEnhancedEmailHtml(content, request);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,extractAttachmentInfo,String extractAttachmentInfo(String),"[369, 470]","{'A248': [(369, 470)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String extractAttachmentInfo(String emlContent) {
        StringBuilder attachmentInfo = new StringBuilder();
        try {
            String[] lines = emlContent.split(""\r?\n"");
            boolean inHeaders = true;
            String currentContentType = """";
            String currentDisposition = """";
            String currentFilename = """";
            String currentEncoding = """";
            boolean inMultipart = false;
            String boundary = """";

            // First pass: find boundary for multipart messages
            for (String line : lines) {
                String lowerLine = line.toLowerCase().trim();
                if (lowerLine.startsWith(""content-type:"") && lowerLine.contains(""multipart"")) {
                    if (lowerLine.contains(""boundary="")) {
                        int boundaryStart = lowerLine.indexOf(""boundary="") + 9;
                        String boundaryPart = line.substring(boundaryStart).trim();
                        if (boundaryPart.startsWith(""\"""")) {
                            boundary = boundaryPart.substring(1, boundaryPart.indexOf(""\"""", 1));
                        } else {
                            int spaceIndex = boundaryPart.indexOf("" "");
                            boundary =
                                    spaceIndex > 0
                                            ? boundaryPart.substring(0, spaceIndex)
                                            : boundaryPart;
                        }
                        inMultipart = true;
                        break;
                    }
                }
                if (line.trim().isEmpty()) break;
            }

            // Second pass: extract attachment information
            for (String line : lines) {
                String lowerLine = line.toLowerCase().trim();

                // Check for boundary markers in multipart messages
                if (inMultipart && line.trim().startsWith(""--"" + boundary)) {
                    // Reset for new part
                    currentContentType = """";
                    currentDisposition = """";
                    currentFilename = """";
                    currentEncoding = """";
                    inHeaders = true;
                    continue;
                }

                if (inHeaders && line.trim().isEmpty()) {
                    inHeaders = false;

                    // Process accumulated attachment info
                    if (isAttachment(currentDisposition, currentFilename, currentContentType)) {
                        addAttachmentToInfo(
                                attachmentInfo,
                                currentFilename,
                                currentContentType,
                                currentEncoding);

                        // Reset for next attachment
                        currentContentType = """";
                        currentDisposition = """";
                        currentFilename = """";
                        currentEncoding = """";
                    }
                    continue;
                }

                if (!inHeaders) continue; // Skip body content

                // Parse headers
                if (lowerLine.startsWith(""content-type:"")) {
                    currentContentType = line.substring(13).trim();
                } else if (lowerLine.startsWith(""content-disposition:"")) {
                    currentDisposition = line.substring(20).trim();
                    // Extract filename if present
                    currentFilename = extractFilenameFromDisposition(currentDisposition);
                } else if (lowerLine.startsWith(""content-transfer-encoding:"")) {
                    currentEncoding = line.substring(26).trim();
                } else if (line.startsWith("" "") || line.startsWith(""\t"")) {
                    // Continuation of previous header
                    if (currentDisposition.contains(""filename="")) {
                        currentDisposition += "" "" + line.trim();
                        currentFilename = extractFilenameFromDisposition(currentDisposition);
                    } else if (!currentContentType.isEmpty()) {
                        currentContentType += "" "" + line.trim();
                    }
                }
            }

            if (isAttachment(currentDisposition, currentFilename, currentContentType)) {
                addAttachmentToInfo(
                        attachmentInfo, currentFilename, currentContentType, currentEncoding);
            }

        } catch (RuntimeException e) {
            log.warn(""Error extracting attachment info: {}"", e.getMessage());
        }
        return attachmentInfo.toString();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,isAttachment,"boolean isAttachment(String,String,String)","[472, 476]","{'A248': [(472, 476)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static boolean isAttachment(String disposition, String filename, String contentType) {
        return (disposition.toLowerCase().contains(""attachment"") && !filename.isEmpty())
                || (!filename.isEmpty() && !contentType.toLowerCase().startsWith(""text/""))
                || (contentType.toLowerCase().contains(""application/"") && !filename.isEmpty());
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,extractFilenameFromDisposition,String extractFilenameFromDisposition(String),"[478, 489]","{'A248': [(478, 489)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String extractFilenameFromDisposition(String disposition) {
        if (disposition.contains(""filename="")) {
            int filenameStart = disposition.toLowerCase().indexOf(""filename="") + 9;
            int filenameEnd = disposition.indexOf("";"", filenameStart);
            if (filenameEnd == -1) filenameEnd = disposition.length();
            String filename = disposition.substring(filenameStart, filenameEnd).trim();
            filename = filename.replaceAll(""^\""|\""$"", """");
            // Apply MIME decoding to handle encoded filenames
            return safeMimeDecode(filename);
        }
        return """";
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,addAttachmentToInfo,"void addAttachmentToInfo(StringBuilder,String,String,String)","[491, 516]","{'A248': [(491, 495), (497, 497), (502, 516)], 'A234': [(496, 496), (498, 501)]}","{'A248': 0.8076923076923077, 'A234': 0.19230769230769232}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static void addAttachmentToInfo(
            StringBuilder attachmentInfo, String filename, String contentType, String encoding) {
        // Create attachment info with paperclip emoji before filename
        attachmentInfo
                .append(""<div class=\""attachment-item\"">"")
                .append(""<span class=\""attachment-icon\"">"")
                .append(MimeConstants.ATTACHMENT_MARKER)
                .append(""</span> "")
                .append(""<span class=\""attachment-name\"">"")
                .append(escapeHtml(filename))
                .append(""</span>"");

        // Add content type and encoding info
        if (!contentType.isEmpty() || !encoding.isEmpty()) {
            attachmentInfo.append("" <span class=\""attachment-details\"">("");
            if (!contentType.isEmpty()) {
                attachmentInfo.append(escapeHtml(contentType));
            }
            if (!encoding.isEmpty()) {
                if (!contentType.isEmpty()) attachmentInfo.append("", "");
                attachmentInfo.append(""encoding: "").append(escapeHtml(encoding));
            }
            attachmentInfo.append("")</span>"");
        }
        attachmentInfo.append(""</div>\n"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,isInvalidEmlFormat,boolean isInvalidEmlFormat(byte[]),"[518, 551]","{'A248': [(518, 523), (526, 528), (538, 551)], 'A234': [(524, 525), (529, 537)]}","{'A248': 0.6764705882352942, 'A234': 0.3235294117647059}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static boolean isInvalidEmlFormat(byte[] emlBytes) {
        try {
            int checkLength = Math.min(emlBytes.length, StyleConstants.EML_CHECK_LENGTH);
            String content = new String(emlBytes, 0, checkLength, StandardCharsets.UTF_8);
            String lowerContent = content.toLowerCase();

            boolean hasFrom =
                    lowerContent.contains(""from:"") || lowerContent.contains(""return-path:"");
            boolean hasSubject = lowerContent.contains(""subject:"");
            boolean hasMessageId = lowerContent.contains(""message-id:"");
            boolean hasDate = lowerContent.contains(""date:"");
            boolean hasTo =
                    lowerContent.contains(""to:"")
                            || lowerContent.contains(""cc:"")
                            || lowerContent.contains(""bcc:"");
            boolean hasMimeStructure =
                    lowerContent.contains(""multipart/"")
                            || lowerContent.contains(""text/plain"")
                            || lowerContent.contains(""text/html"")
                            || lowerContent.contains(""boundary="");

            int headerCount = 0;
            if (hasFrom) headerCount++;
            if (hasSubject) headerCount++;
            if (hasMessageId) headerCount++;
            if (hasDate) headerCount++;
            if (hasTo) headerCount++;

            return headerCount < StyleConstants.MIN_HEADER_COUNT_FOR_VALID_EML && !hasMimeStructure;

        } catch (RuntimeException e) {
            return false;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,extractBasicHeader,"String extractBasicHeader(String,String)","[553, 578]","{'A248': [(553, 578)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String extractBasicHeader(String emlContent, String headerName) {
        try {
            String[] lines = emlContent.split(""\r?\n"");
            for (int i = 0; i < lines.length; i++) {
                String line = lines[i];
                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {
                    StringBuilder value =
                            new StringBuilder(line.substring(headerName.length()).trim());
                    // Handle multi-line headers
                    for (int j = i + 1; j < lines.length; j++) {
                        if (lines[j].startsWith("" "") || lines[j].startsWith(""\t"")) {
                            value.append("" "").append(lines[j].trim());
                        } else {
                            break;
                        }
                    }
                    // Apply MIME header decoding
                    return safeMimeDecode(value.toString());
                }
                if (line.trim().isEmpty()) break;
            }
        } catch (RuntimeException e) {
            log.warn(""Error extracting header '{}': {}"", headerName, e.getMessage());
        }
        return """";
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,extractHtmlBody,String extractHtmlBody(String),"[580, 591]","{'A248': [(580, 591)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String extractHtmlBody(String emlContent) {
        try {
            String lowerContent = emlContent.toLowerCase();
            int htmlStart = lowerContent.indexOf(""content-type: text/html"");
            if (htmlStart == -1) return null;

            return getString(emlContent, htmlStart);

        } catch (Exception e) {
            return null;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,getString,"String getString(String,int)","[593, 603]","{'A248': [(593, 603)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    @Nullable
    private static String getString(String emlContent, int htmlStart) {
        int bodyStart = emlContent.indexOf(""\r\n\r\n"", htmlStart);
        if (bodyStart == -1) bodyStart = emlContent.indexOf(""\n\n"", htmlStart);
        if (bodyStart == -1) return null;

        bodyStart += (emlContent.charAt(bodyStart + 1) == '\r') ? 4 : 2;
        int bodyEnd = findPartEnd(emlContent, bodyStart);

        return emlContent.substring(bodyStart, bodyEnd).trim();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,extractTextBody,String extractTextBody(String),"[605, 625]","{'A248': [(605, 625)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String extractTextBody(String emlContent) {
        try {
            String lowerContent = emlContent.toLowerCase();
            int textStart = lowerContent.indexOf(""content-type: text/plain"");
            if (textStart == -1) {
                int bodyStart = emlContent.indexOf(""\r\n\r\n"");
                if (bodyStart == -1) bodyStart = emlContent.indexOf(""\n\n"");
                if (bodyStart != -1) {
                    bodyStart += (emlContent.charAt(bodyStart + 1) == '\r') ? 4 : 2;
                    int bodyEnd = findPartEnd(emlContent, bodyStart);
                    return emlContent.substring(bodyStart, bodyEnd).trim();
                }
                return null;
            }

            return getString(emlContent, textStart);

        } catch (RuntimeException e) {
            return null;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,findPartEnd,"int findPartEnd(String,int)","[627, 637]","{'A248': [(627, 637)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static int findPartEnd(String content, int start) {
        String[] lines = content.substring(start).split(""\r?\n"");
        StringBuilder result = new StringBuilder();

        for (String line : lines) {
            if (line.startsWith(""--"") && line.length() > 10) break;
            result.append(line).append(""\n"");
        }

        return start + result.length();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,convertTextToHtml,String convertTextToHtml(String),"[639, 657]","{'A248': [(639, 657)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String convertTextToHtml(String textBody) {
        if (textBody == null) return """";

        String html = escapeHtml(textBody);
        html = html.replace(""\r\n"", ""\n"").replace(""\r"", ""\n"");
        html = html.replace(""\n"", ""<br>\n"");

        html =
                html.replaceAll(
                        ""(https?://[\\w\\-._~:/?#\\[\\]@!$&'()*+,;=%]+)"",
                        ""<a href=\""$1\"" style=\""color: #1a73e8; text-decoration: underline;\"">$1</a>"");

        html =
                html.replaceAll(
                        ""([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63})"",
                        ""<a href=\""mailto:$1\"" style=\""color: #1a73e8; text-decoration: underline;\"">$1</a>"");

        return html;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,processEmailHtmlBody,String processEmailHtmlBody(String),"[659, 661]","{'A248': [(659, 661)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String processEmailHtmlBody(String htmlBody) {
        return processEmailHtmlBody(htmlBody, null);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,processEmailHtmlBody,"String processEmailHtmlBody(String,EmailContent)","[663, 678]","{'A248': [(663, 678)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String processEmailHtmlBody(String htmlBody, EmailContent emailContent) {
        if (htmlBody == null) return """";

        String processed = htmlBody;

        // Remove problematic CSS
        processed = processed.replaceAll(""(?i)\\s*position\\s*:\\s*fixed[^;]*;?"", """");
        processed = processed.replaceAll(""(?i)\\s*position\\s*:\\s*absolute[^;]*;?"", """");

        // Process inline images (cid: references) if we have email content with attachments
        if (emailContent != null && !emailContent.getAttachments().isEmpty()) {
            processed = processInlineImages(processed, emailContent);
        }

        return processed;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,processInlineImages,"String processInlineImages(String,EmailContent)","[680, 746]","{'A248': [(680, 746)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String processInlineImages(String htmlContent, EmailContent emailContent) {
        if (htmlContent == null || emailContent == null) return htmlContent;

        // Create a map of Content-ID to attachment data
        Map<String, EmailAttachment> contentIdMap = new HashMap<>();
        for (EmailAttachment attachment : emailContent.getAttachments()) {
            if (attachment.isEmbedded()
                    && attachment.getContentId() != null
                    && attachment.getData() != null) {
                contentIdMap.put(attachment.getContentId(), attachment);
            }
        }

        if (contentIdMap.isEmpty()) return htmlContent;

        // Pattern to match cid: references in img src attributes
        Pattern cidPattern =
                Pattern.compile(
                        ""(?i)<img[^>]*\\ssrc\\s*=\\s*['\""]cid:([^'\""]+)['\""][^>]*>"",
                        Pattern.CASE_INSENSITIVE);
        Matcher matcher = cidPattern.matcher(htmlContent);

        StringBuffer result = new StringBuffer();
        while (matcher.find()) {
            String contentId = matcher.group(1);
            EmailAttachment attachment = contentIdMap.get(contentId);

            if (attachment != null && attachment.getData() != null) {
                // Convert to data URI
                String mimeType = attachment.getContentType();
                if (mimeType == null || mimeType.isEmpty()) {
                    // Try to determine MIME type from filename
                    String filename = attachment.getFilename();
                    if (filename != null) {
                        if (filename.toLowerCase().endsWith("".png"")) {
                            mimeType = ""image/png"";
                        } else if (filename.toLowerCase().endsWith("".jpg"")
                                || filename.toLowerCase().endsWith("".jpeg"")) {
                            mimeType = ""image/jpeg"";
                        } else if (filename.toLowerCase().endsWith("".gif"")) {
                            mimeType = ""image/gif"";
                        } else if (filename.toLowerCase().endsWith("".bmp"")) {
                            mimeType = ""image/bmp"";
                        } else {
                            mimeType = ""image/png""; // fallback
                        }
                    } else {
                        mimeType = ""image/png""; // fallback
                    }
                }

                String base64Data = Base64.getEncoder().encodeToString(attachment.getData());
                String dataUri = ""data:"" + mimeType + "";base64,"" + base64Data;

                // Replace the cid: reference with the data URI
                String replacement =
                        matcher.group(0).replaceFirst(""cid:"" + Pattern.quote(contentId), dataUri);
                matcher.appendReplacement(result, Matcher.quoteReplacement(replacement));
            } else {
                // Keep original if attachment not found
                matcher.appendReplacement(result, Matcher.quoteReplacement(matcher.group(0)));
            }
        }
        matcher.appendTail(result);

        return result.toString();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,appendEnhancedStyles,void appendEnhancedStyles(StringBuilder),"[748, 855]","{'A248': [(748, 791), (798, 855)], 'A234': [(792, 797)]}","{'A248': 0.9444444444444444, 'A234': 0.05555555555555555}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static void appendEnhancedStyles(StringBuilder html) {
        int fontSize = StyleConstants.DEFAULT_FONT_SIZE;
        String textColor = StyleConstants.DEFAULT_TEXT_COLOR;
        String backgroundColor = StyleConstants.DEFAULT_BACKGROUND_COLOR;
        String borderColor = StyleConstants.DEFAULT_BORDER_COLOR;

        html.append(""body {\n"");
        html.append(""  font-family: "").append(StyleConstants.DEFAULT_FONT_FAMILY).append("";\n"");
        html.append(""  font-size: "").append(fontSize).append(""px;\n"");
        html.append(""  line-height: "").append(StyleConstants.DEFAULT_LINE_HEIGHT).append("";\n"");
        html.append(""  color: "").append(textColor).append("";\n"");
        html.append(""  margin: 0;\n"");
        html.append(""  padding: 16px;\n"");
        html.append(""  background-color: "").append(backgroundColor).append("";\n"");
        html.append(""}\n\n"");

        html.append("".email-container {\n"");
        html.append(""  width: 100%;\n"");
        html.append(""  max-width: 100%;\n"");
        html.append(""  margin: 0 auto;\n"");
        html.append(""}\n\n"");

        html.append("".email-header {\n"");
        html.append(""  padding-bottom: 10px;\n"");
        html.append(""  border-bottom: 1px solid "").append(borderColor).append("";\n"");
        html.append(""  margin-bottom: 10px;\n"");
        html.append(""}\n\n"");
        html.append("".email-header h1 {\n"");
        html.append(""  margin: 0 0 10px 0;\n"");
        html.append(""  font-size: "").append(fontSize + 4).append(""px;\n"");
        html.append(""  font-weight: bold;\n"");
        html.append(""}\n\n"");
        html.append("".email-meta div {\n"");
        html.append(""  margin-bottom: 2px;\n"");
        html.append(""  font-size: "").append(fontSize - 1).append(""px;\n"");
        html.append(""}\n\n"");

        html.append("".email-body {\n"");
        html.append(""  word-wrap: break-word;\n"");
        html.append(""}\n\n"");

        html.append("".attachment-section {\n"");
        html.append(""  margin-top: 15px;\n"");
        html.append(""  padding: 10px;\n"");
        html.append(""  background-color: "")
                .append(StyleConstants.ATTACHMENT_BACKGROUND_COLOR)
                .append("";\n"");
        html.append(""  border: 1px solid "")
                .append(StyleConstants.ATTACHMENT_BORDER_COLOR)
                .append("";\n"");
        html.append(""  border-radius: 3px;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-section h3 {\n"");
        html.append(""  margin: 0 0 8px 0;\n"");
        html.append(""  font-size: "").append(fontSize + 1).append(""px;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-item {\n"");
        html.append(""  padding: 5px 0;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-icon {\n"");
        html.append(""  margin-right: 5px;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-details, .attachment-type {\n"");
        html.append(""  font-size: "").append(fontSize - 2).append(""px;\n"");
        html.append(""  color: #555555;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-inclusion-note, .attachment-info-note {\n"");
        html.append(""  margin-top: 8px;\n"");
        html.append(""  padding: 6px;\n"");
        html.append(""  font-size: "").append(fontSize - 2).append(""px;\n"");
        html.append(""  border-radius: 3px;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-inclusion-note {\n"");
        html.append(""  background-color: #e6ffed;\n"");
        html.append(""  border: 1px solid #d4f7dc;\n"");
        html.append(""  color: #006420;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-info-note {\n"");
        html.append(""  background-color: #fff9e6;\n"");
        html.append(""  border: 1px solid #fff0c2;\n"");
        html.append(""  color: #664d00;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-link-container {\n"");
        html.append(""  display: flex;\n"");
        html.append(""  align-items: center;\n"");
        html.append(""  padding: 8px;\n"");
        html.append(""  background-color: #f8f9fa;\n"");
        html.append(""  border: 1px solid #dee2e6;\n"");
        html.append(""  border-radius: 4px;\n"");
        html.append(""  margin: 4px 0;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-link-container:hover {\n"");
        html.append(""  background-color: #e9ecef;\n"");
        html.append(""}\n\n"");
        html.append("".attachment-note {\n"");
        html.append(""  font-size: "").append(fontSize - 3).append(""px;\n"");
        html.append(""  color: #6c757d;\n"");
        html.append(""  font-style: italic;\n"");
        html.append(""  margin-left: 8px;\n"");
        html.append(""}\n\n"");

        // Basic image styling: ensure images are responsive but not overly constrained.
        html.append(""img {\n"");
        html.append(""  max-width: 100%;\n""); // Make images responsive to container width
        html.append(""  height: auto;\n""); // Maintain aspect ratio
        html.append(""  display: block;\n""); // Avoid extra space below images
        html.append(""}\n\n"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,escapeHtml,String escapeHtml(String),"[857, 864]","{'A248': [(857, 864)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String escapeHtml(String text) {
        if (text == null) return """";
        return text.replace(""&"", ""&amp;"")
                .replace(""<"", ""&lt;"")
                .replace("">"", ""&gt;"")
                .replace(""\"""", ""&quot;"")
                .replace(""'"", ""&#39;"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,createHtmlRequest,stirling.software.common.model.api.converters.HTMLToPdfRequest createHtmlRequest(EmlToPdfRequest),"[866, 879]","{'A248': [(866, 879)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static stirling.software.common.model.api.converters.HTMLToPdfRequest createHtmlRequest(
            EmlToPdfRequest request) {
        stirling.software.common.model.api.converters.HTMLToPdfRequest htmlRequest =
                new stirling.software.common.model.api.converters.HTMLToPdfRequest();

        if (request != null) {
            htmlRequest.setFileInput(request.getFileInput());
        }

        // Set default zoom level
        htmlRequest.setZoom(Float.parseFloat(StyleConstants.DEFAULT_ZOOM));

        return htmlRequest;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,extractEmailContentAdvanced,"EmailContent extractEmailContentAdvanced(Object,EmlToPdfRequest)","[881, 942]","{'A248': [(881, 888), (890, 892), (894, 899), (901, 902), (906, 906), (908, 910), (912, 914), (916, 942)], 'A236': [(889, 889), (893, 893), (900, 900), (907, 907), (911, 911), (915, 915)], 'A234': [(903, 905)]}","{'A248': 0.8548387096774194, 'A236': 0.0967741935483871, 'A234': 0.04838709677419355}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static EmailContent extractEmailContentAdvanced(
            Object message, EmlToPdfRequest request) {
        EmailContent content = new EmailContent();

        try {
            Class<?> messageClass = message.getClass();

            // Extract headers via reflection
            Method getSubject = messageClass.getMethod(""getSubject"");
            String subject = (String) getSubject.invoke(message);
            content.setSubject(subject != null ? safeMimeDecode(subject) : ""No Subject"");

            Method getFrom = messageClass.getMethod(""getFrom"");
            Object[] fromAddresses = (Object[]) getFrom.invoke(message);
            content.setFrom(
                    fromAddresses != null && fromAddresses.length > 0
                            ? safeMimeDecode(fromAddresses[0].toString())
                            : """");

            Method getAllRecipients = messageClass.getMethod(""getAllRecipients"");
            Object[] recipients = (Object[]) getAllRecipients.invoke(message);
            content.setTo(
                    recipients != null && recipients.length > 0
                            ? safeMimeDecode(recipients[0].toString())
                            : """");

            Method getSentDate = messageClass.getMethod(""getSentDate"");
            content.setDate((Date) getSentDate.invoke(message));

            // Extract content
            Method getContent = messageClass.getMethod(""getContent"");
            Object messageContent = getContent.invoke(message);

            if (messageContent instanceof String stringContent) {
                Method getContentType = messageClass.getMethod(""getContentType"");
                String contentType = (String) getContentType.invoke(message);
                if (contentType != null && contentType.toLowerCase().contains(""text/html"")) {
                    content.setHtmlBody(stringContent);
                } else {
                    content.setTextBody(stringContent);
                }
            } else {
                // Handle multipart content
                try {
                    Class<?> multipartClass = Class.forName(""jakarta.mail.Multipart"");
                    if (multipartClass.isInstance(messageContent)) {
                        processMultipartAdvanced(messageContent, content, request);
                    }
                } catch (Exception e) {
                    log.warn(""Error processing content: {}"", e.getMessage());
                }
            }

        } catch (Exception e) {
            content.setSubject(""Email Conversion"");
            content.setFrom(""Unknown"");
            content.setTo(""Unknown"");
            content.setTextBody(""Email content could not be parsed with advanced processing"");
        }

        return content;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,processMultipartAdvanced,"void processMultipartAdvanced(Object,EmailContent,EmlToPdfRequest)","[944, 967]","{'A248': [(944, 953), (955, 956), (958, 967)], 'A236': [(954, 954), (957, 957)]}","{'A248': 0.9166666666666666, 'A236': 0.08333333333333333}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static void processMultipartAdvanced(
            Object multipart, EmailContent content, EmlToPdfRequest request) {
        try {
            // Enhanced multipart type checking
            if (!isValidJakartaMailMultipart(multipart)) {
                log.warn(""Invalid Jakarta Mail multipart type: {}"", multipart.getClass().getName());
                return;
            }

            Class<?> multipartClass = multipart.getClass();
            Method getCount = multipartClass.getMethod(""getCount"");
            int count = (Integer) getCount.invoke(multipart);

            Method getBodyPart = multipartClass.getMethod(""getBodyPart"", int.class);

            for (int i = 0; i < count; i++) {
                Object part = getBodyPart.invoke(multipart, i);
                processPartAdvanced(part, content, request);
            }

        } catch (Exception e) {
            content.setTextBody(""Email content could not be parsed with advanced processing"");
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,processPartAdvanced,"void processPartAdvanced(Object,EmailContent,EmlToPdfRequest)","[969, 1085]","{'A248': [(969, 977), (984, 1029), (1033, 1036), (1038, 1085)], 'A236': [(978, 983)], 'A234': [(1030, 1032), (1037, 1037)]}","{'A248': 0.9145299145299145, 'A236': 0.05128205128205128, 'A234': 0.03418803418803419}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static void processPartAdvanced(
            Object part, EmailContent content, EmlToPdfRequest request) {
        try {
            if (!isValidJakartaMailPart(part)) {
                log.warn(""Invalid Jakarta Mail part type: {}"", part.getClass().getName());
                return;
            }

            Class<?> partClass = part.getClass();
            Method isMimeType = partClass.getMethod(""isMimeType"", String.class);
            Method getContent = partClass.getMethod(""getContent"");
            Method getDisposition = partClass.getMethod(""getDisposition"");
            Method getFileName = partClass.getMethod(""getFileName"");
            Method getContentType = partClass.getMethod(""getContentType"");
            Method getHeader = partClass.getMethod(""getHeader"", String.class);

            Object disposition = getDisposition.invoke(part);
            String filename = (String) getFileName.invoke(part);
            String contentType = (String) getContentType.invoke(part);

            if ((Boolean) isMimeType.invoke(part, ""text/plain"") && disposition == null) {
                content.setTextBody((String) getContent.invoke(part));
            } else if ((Boolean) isMimeType.invoke(part, ""text/html"") && disposition == null) {
                content.setHtmlBody((String) getContent.invoke(part));
            } else if (""attachment"".equalsIgnoreCase((String) disposition)
                    || (filename != null && !filename.trim().isEmpty())) {

                content.setAttachmentCount(content.getAttachmentCount() + 1);

                // Always extract basic attachment metadata for display
                if (filename != null && !filename.trim().isEmpty()) {
                    // Create attachment with metadata only
                    EmailAttachment attachment = new EmailAttachment();
                    // Apply MIME decoding to filename to handle encoded attachment names
                    attachment.setFilename(safeMimeDecode(filename));
                    attachment.setContentType(contentType);

                    // Check if it's an embedded image
                    String[] contentIdHeaders = (String[]) getHeader.invoke(part, ""Content-ID"");
                    if (contentIdHeaders != null && contentIdHeaders.length > 0) {
                        attachment.setEmbedded(true);
                        // Store the Content-ID, removing angle brackets if present
                        String contentId = contentIdHeaders[0];
                        if (contentId.startsWith(""<"") && contentId.endsWith("">"")) {
                            contentId = contentId.substring(1, contentId.length() - 1);
                        }
                        attachment.setContentId(contentId);
                    }

                    // Extract attachment data if attachments should be included OR if it's an
                    // embedded image (needed for inline display)
                    if ((request != null && request.isIncludeAttachments())
                            || attachment.isEmbedded()) {
                        try {
                            Object attachmentContent = getContent.invoke(part);
                            byte[] attachmentData = null;

                            if (attachmentContent instanceof java.io.InputStream inputStream) {
                                try {
                                    attachmentData = inputStream.readAllBytes();
                                } catch (IOException e) {
                                    log.warn(
                                            ""Failed to read InputStream attachment: {}"",
                                            e.getMessage());
                                }
                            } else if (attachmentContent instanceof byte[] byteArray) {
                                attachmentData = byteArray;
                            } else if (attachmentContent instanceof String stringContent) {
                                attachmentData = stringContent.getBytes(StandardCharsets.UTF_8);
                            }

                            if (attachmentData != null) {
                                // Check size limit (use default 10MB if request is null)
                                long maxSizeMB =
                                        request != null ? request.getMaxAttachmentSizeMB() : 10L;
                                long maxSizeBytes = maxSizeMB * 1024 * 1024;

                                if (attachmentData.length <= maxSizeBytes) {
                                    attachment.setData(attachmentData);
                                    attachment.setSizeBytes(attachmentData.length);
                                } else {
                                    // For embedded images, always include data regardless of size
                                    // to ensure inline display works
                                    if (attachment.isEmbedded()) {
                                        attachment.setData(attachmentData);
                                        attachment.setSizeBytes(attachmentData.length);
                                    } else {
                                        // Still show attachment info even if too large
                                        attachment.setSizeBytes(attachmentData.length);
                                    }
                                }
                            }
                        } catch (Exception e) {
                            log.warn(""Error extracting attachment data: {}"", e.getMessage());
                        }
                    }

                    // Add attachment to the list for display (with or without data)
                    content.getAttachments().add(attachment);
                }
            } else if ((Boolean) isMimeType.invoke(part, ""multipart/*"")) {
                // Handle nested multipart content
                try {
                    Object multipartContent = getContent.invoke(part);
                    Class<?> multipartClass = Class.forName(""jakarta.mail.Multipart"");
                    if (multipartClass.isInstance(multipartContent)) {
                        processMultipartAdvanced(multipartContent, content, request);
                    }
                } catch (Exception e) {
                    log.warn(""Error processing multipart content: {}"", e.getMessage());
                }
            }

        } catch (Exception e) {
            log.warn(""Error processing multipart part: {}"", e.getMessage());
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,generateEnhancedEmailHtml,"String generateEnhancedEmailHtml(EmailContent,EmlToPdfRequest)","[1087, 1185]","{'A248': [(1087, 1104), (1108, 1146), (1151, 1151), (1153, 1158), (1161, 1168), (1170, 1185)], 'A234': [(1105, 1107), (1147, 1150), (1152, 1152), (1159, 1160), (1169, 1169)]}","{'A248': 0.8888888888888888, 'A234': 0.1111111111111111}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String generateEnhancedEmailHtml(EmailContent content, EmlToPdfRequest request) {
        StringBuilder html = new StringBuilder();

        html.append(""<!DOCTYPE html>\n"");
        html.append(""<html><head><meta charset=\""UTF-8\"">\n"");
        html.append(""<title>"").append(escapeHtml(content.getSubject())).append(""</title>\n"");
        html.append(""<style>\n"");
        appendEnhancedStyles(html);
        html.append(""</style>\n"");
        html.append(""</head><body>\n"");

        html.append(""<div class=\""email-container\"">\n"");
        html.append(""<div class=\""email-header\"">\n"");
        html.append(""<h1>"").append(escapeHtml(content.getSubject())).append(""</h1>\n"");
        html.append(""<div class=\""email-meta\"">\n"");
        html.append(""<div><strong>From:</strong> "")
                .append(escapeHtml(content.getFrom()))
                .append(""</div>\n"");
        html.append(""<div><strong>To:</strong> "")
                .append(escapeHtml(content.getTo()))
                .append(""</div>\n"");

        if (content.getDate() != null) {
            html.append(""<div><strong>Date:</strong> "")
                    .append(formatEmailDate(content.getDate()))
                    .append(""</div>\n"");
        }
        html.append(""</div></div>\n"");

        html.append(""<div class=\""email-body\"">\n"");
        if (content.getHtmlBody() != null && !content.getHtmlBody().trim().isEmpty()) {
            html.append(processEmailHtmlBody(content.getHtmlBody(), content));
        } else if (content.getTextBody() != null && !content.getTextBody().trim().isEmpty()) {
            html.append(""<div class=\""text-body\"">"");
            html.append(convertTextToHtml(content.getTextBody()));
            html.append(""</div>"");
        } else {
            html.append(""<div class=\""no-content\"">"");
            html.append(""<p><em>No content available</em></p>"");
            html.append(""</div>"");
        }
        html.append(""</div>\n"");

        if (content.getAttachmentCount() > 0 || !content.getAttachments().isEmpty()) {
            html.append(""<div class=\""attachment-section\"">\n"");
            int displayedAttachmentCount =
                    content.getAttachmentCount() > 0
                            ? content.getAttachmentCount()
                            : content.getAttachments().size();
            html.append(""<h3>Attachments ("").append(displayedAttachmentCount).append("")</h3>\n"");

            if (!content.getAttachments().isEmpty()) {
                for (EmailAttachment attachment : content.getAttachments()) {
                    // Create attachment info with paperclip emoji before filename
                    String uniqueId = generateUniqueAttachmentId(attachment.getFilename());
                    attachment.setEmbeddedFilename(
                            attachment.getEmbeddedFilename() != null
                                    ? attachment.getEmbeddedFilename()
                                    : attachment.getFilename());

                    html.append(""<div class=\""attachment-item\"" id=\"""")
                            .append(uniqueId)
                            .append(""\"">"")
                            .append(""<span class=\""attachment-icon\"">"")
                            .append(MimeConstants.ATTACHMENT_MARKER)
                            .append(""</span> "")
                            .append(""<span class=\""attachment-name\"">"")
                            .append(escapeHtml(safeMimeDecode(attachment.getFilename())))
                            .append(""</span>"");

                    String sizeStr = formatFileSize(attachment.getSizeBytes());
                    html.append("" <span class=\""attachment-details\"">("").append(sizeStr);
                    if (attachment.getContentType() != null
                            && !attachment.getContentType().isEmpty()) {
                        html.append("", "").append(escapeHtml(attachment.getContentType()));
                    }
                    html.append("")</span></div>\n"");
                }
            }

            if (request.isIncludeAttachments()) {
                html.append(""<div class=\""attachment-info-note\"">\n"");
                html.append(""<p><em>Attachments are embedded in the file.</em></p>\n"");
                html.append(""</div>\n"");
            } else {
                html.append(""<div class=\""attachment-info-note\"">\n"");
                html.append(
                        ""<p><em>Attachment information displayed - files not included in PDF.</em></p>\n"");
                html.append(""</div>\n"");
            }

            html.append(""</div>\n"");
        }

        html.append(""</div>\n"");
        html.append(""</body></html>"");

        return html.toString();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,attachFilesToPdf,"byte[] attachFilesToPdf(byte[],List<EmailAttachment>,CustomPDFDocumentFactory)","[1187, 1287]","{'A248': [(1191, 1243), (1246, 1253), (1255, 1275), (1277, 1287)], 'A236': [(1190, 1190), (1254, 1254), (1276, 1276)], 'A234': [(1187, 1189), (1244, 1245)]}","{'A248': 0.9207920792079208, 'A236': 0.0297029702970297, 'A234': 0.04950495049504951}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static byte[] attachFilesToPdf(
            byte[] pdfBytes,
            List<EmailAttachment> attachments,
            CustomPDFDocumentFactory pdfDocumentFactory)
            throws IOException {
        try (PDDocument document = pdfDocumentFactory.load(pdfBytes);
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

            if (attachments == null || attachments.isEmpty()) {
                document.save(outputStream);
                return outputStream.toByteArray();
            }

            List<String> embeddedFiles = new ArrayList<>();

            // Set up the embedded files name tree once
            if (document.getDocumentCatalog().getNames() == null) {
                document.getDocumentCatalog()
                        .setNames(new PDDocumentNameDictionary(document.getDocumentCatalog()));
            }

            PDDocumentNameDictionary names = document.getDocumentCatalog().getNames();
            if (names.getEmbeddedFiles() == null) {
                names.setEmbeddedFiles(new PDEmbeddedFilesNameTreeNode());
            }

            PDEmbeddedFilesNameTreeNode efTree = names.getEmbeddedFiles();
            Map<String, PDComplexFileSpecification> efMap = efTree.getNames();
            if (efMap == null) {
                efMap = new HashMap<>();
            }

            // Embed each attachment directly into the PDF
            for (EmailAttachment attachment : attachments) {
                if (attachment.getData() == null || attachment.getData().length == 0) {
                    continue;
                }

                try {
                    // Generate unique filename
                    String filename = attachment.getFilename();
                    if (filename == null || filename.trim().isEmpty()) {
                        filename = ""attachment_"" + System.currentTimeMillis();
                        if (attachment.getContentType() != null
                                && attachment.getContentType().contains(""/"")) {
                            String[] parts = attachment.getContentType().split(""/"");
                            if (parts.length > 1) {
                                filename += ""."" + parts[1];
                            }
                        }
                    }

                    // Ensure unique filename
                    String uniqueFilename = getUniqueFilename(filename, embeddedFiles, efMap);

                    // Create embedded file
                    PDEmbeddedFile embeddedFile =
                            new PDEmbeddedFile(
                                    document, new ByteArrayInputStream(attachment.getData()));
                    embeddedFile.setSize(attachment.getData().length);
                    embeddedFile.setCreationDate(new GregorianCalendar());

                    // Create file specification
                    PDComplexFileSpecification fileSpec = new PDComplexFileSpecification();
                    fileSpec.setFile(uniqueFilename);
                    fileSpec.setEmbeddedFile(embeddedFile);
                    if (attachment.getContentType() != null) {
                        embeddedFile.setSubtype(attachment.getContentType());
                        fileSpec.setFileDescription(""Email attachment: "" + uniqueFilename);
                    }

                    // Add to the map (but don't set it yet)
                    efMap.put(uniqueFilename, fileSpec);
                    embeddedFiles.add(uniqueFilename);

                    // Store the filename for annotation creation
                    attachment.setEmbeddedFilename(uniqueFilename);

                } catch (Exception e) {
                    // Log error but continue with other attachments
                    log.warn(""Failed to embed attachment: {}"", attachment.getFilename(), e);
                }
            }

            // Set the complete map once at the end
            if (!efMap.isEmpty()) {
                efTree.setNames(efMap);

                // Set catalog viewer preferences to automatically show attachments pane
                setCatalogViewerPreferences(document, PageMode.USE_ATTACHMENTS);
            }

            // Add attachment annotations to the first page for each embedded file
            if (!embeddedFiles.isEmpty()) {
                addAttachmentAnnotationsToDocument(document, attachments);
            }

            document.save(outputStream);
            return outputStream.toByteArray();
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,getUniqueFilename,"String getUniqueFilename(String,List<String>,Map<String, PDComplexFileSpecification>)","[1289, 1307]","{'A248': [(1293, 1294), (1296, 1307)], 'A234': [(1289, 1292), (1295, 1295)]}","{'A248': 0.7368421052631579, 'A234': 0.2631578947368421}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String getUniqueFilename(
            String filename,
            List<String> embeddedFiles,
            Map<String, PDComplexFileSpecification> efMap) {
        String uniqueFilename = filename;
        int counter = 1;
        while (embeddedFiles.contains(uniqueFilename) || efMap.containsKey(uniqueFilename)) {
            String extension = """";
            String baseName = filename;
            int lastDot = filename.lastIndexOf('.');
            if (lastDot > 0) {
                extension = filename.substring(lastDot);
                baseName = filename.substring(0, lastDot);
            }
            uniqueFilename = baseName + ""_"" + counter + extension;
            counter++;
        }
        return uniqueFilename;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,addAttachmentAnnotationsToDocument,"void addAttachmentAnnotationsToDocument(PDDocument,List<EmailAttachment>)","[1309, 1341]","{'A248': [(1309, 1341)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static void addAttachmentAnnotationsToDocument(
            PDDocument document, List<EmailAttachment> attachments) throws IOException {
        if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {
            return;
        }

        // 1. Find the screen position of all attachment markers
        AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();
        finder.setSortByPosition(true); // Process pages in order
        finder.getText(document);
        List<MarkerPosition> markerPositions = finder.getPositions();

        // 2. Warn if the number of markers and attachments don't match
        if (markerPositions.size() != attachments.size()) {
            log.warn(
                    ""Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect."",
                    markerPositions.size(),
                    attachments.size());
        }

        // 3. Create an invisible annotation over each found marker
        int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());
        for (int i = 0; i < annotationsToAdd; i++) {
            MarkerPosition position = markerPositions.get(i);
            EmailAttachment attachment = attachments.get(i);

            if (attachment.getEmbeddedFilename() != null) {
                PDPage page = document.getPage(position.getPageIndex());
                addAttachmentAnnotationToPage(
                        document, page, attachment, position.getX(), position.getY());
            }
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,addAttachmentAnnotationToPage,"void addAttachmentAnnotationToPage(PDDocument,PDPage,EmailAttachment,float,float)","[1343, 1392]","{'A248': [(1343, 1343), (1346, 1366), (1369, 1370), (1373, 1387), (1392, 1392)], 'A234': [(1344, 1345), (1367, 1368), (1371, 1372), (1388, 1391)]}","{'A248': 0.8, 'A234': 0.2}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static void addAttachmentAnnotationToPage(
            PDDocument document, PDPage page, EmailAttachment attachment, float x, float y)
            throws IOException {

        PDAnnotationFileAttachment fileAnnotation = new PDAnnotationFileAttachment();

        PDRectangle rect = getPdRectangle(page, x, y);
        fileAnnotation.setRectangle(rect);

        // Remove visual appearance while keeping clickable functionality
        try {
            PDAppearanceDictionary appearance = new PDAppearanceDictionary();
            PDAppearanceStream normalAppearance = new PDAppearanceStream(document);
            normalAppearance.setBBox(new PDRectangle(0, 0, 0, 0)); // Zero-size bounding box

            appearance.setNormalAppearance(normalAppearance);
            fileAnnotation.setAppearance(appearance);
        } catch (Exception e) {
            // If appearance manipulation fails, just set it to null
            fileAnnotation.setAppearance(null);
        }

        // Set invisibility flags but keep it functional
        fileAnnotation.setInvisible(true);
        fileAnnotation.setHidden(false); // Must be false to remain clickable
        fileAnnotation.setNoView(false); // Must be false to remain clickable
        fileAnnotation.setPrinted(false);

        PDEmbeddedFilesNameTreeNode efTree =
                document.getDocumentCatalog().getNames().getEmbeddedFiles();
        if (efTree != null) {
            Map<String, PDComplexFileSpecification> efMap = efTree.getNames();
            if (efMap != null) {
                PDComplexFileSpecification fileSpec = efMap.get(attachment.getEmbeddedFilename());
                if (fileSpec != null) {
                    fileAnnotation.setFile(fileSpec);
                }
            }
        }

        fileAnnotation.setContents(""Click to open: "" + attachment.getFilename());
        fileAnnotation.setAnnotationName(""EmbeddedFile_"" + attachment.getEmbeddedFilename());

        page.getAnnotations().add(fileAnnotation);

        log.info(
                ""Added attachment annotation for '{}' on page {}"",
                attachment.getFilename(),
                document.getPages().indexOf(page) + 1);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,getPdRectangle,"PDRectangle getPdRectangle(PDPage,float,float)","[1394, 1409]","{'A248': [(1394, 1397), (1402, 1404), (1409, 1409)], 'A234': [(1398, 1401), (1405, 1408)]}","{'A248': 0.5, 'A234': 0.5}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static @NotNull PDRectangle getPdRectangle(PDPage page, float x, float y) {
        PDRectangle mediaBox = page.getMediaBox();
        float pdfY = mediaBox.getHeight() - y;

        float iconWidth =
                StyleConstants.ATTACHMENT_ICON_WIDTH; // Keep original size for clickability
        float iconHeight =
                StyleConstants.ATTACHMENT_ICON_HEIGHT; // Keep original size for clickability

        // Keep the full-size rectangle so it remains clickable
        return new PDRectangle(
                x + StyleConstants.ANNOTATION_X_OFFSET,
                pdfY - iconHeight + StyleConstants.ANNOTATION_Y_OFFSET,
                iconWidth,
                iconHeight);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,formatEmailDate,String formatEmailDate(Date),"[1411, 1416]","{'A248': [(1411, 1416)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String formatEmailDate(Date date) {
        if (date == null) return """";
        java.text.SimpleDateFormat formatter =
                new java.text.SimpleDateFormat(""EEE, MMM d, yyyy 'at' h:mm a"", Locale.ENGLISH);
        return formatter.format(date);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,formatFileSize,String formatFileSize(long),"[1418, 1428]","{'A248': [(1418, 1428)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String formatFileSize(long bytes) {
        if (bytes < FileSizeConstants.BYTES_IN_KB) {
            return bytes + "" B"";
        } else if (bytes < FileSizeConstants.BYTES_IN_MB) {
            return String.format(""%.1f KB"", bytes / (double) FileSizeConstants.BYTES_IN_KB);
        } else if (bytes < FileSizeConstants.BYTES_IN_GB) {
            return String.format(""%.1f MB"", bytes / (double) FileSizeConstants.BYTES_IN_MB);
        } else {
            return String.format(""%.1f GB"", bytes / (double) FileSizeConstants.BYTES_IN_GB);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,decodeMimeHeader,String decodeMimeHeader(String),"[1432, 1481]","{'A248': [(1432, 1481)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String decodeMimeHeader(String encodedText) {
        if (encodedText == null || encodedText.trim().isEmpty()) {
            return encodedText;
        }

        try {
            StringBuilder result = new StringBuilder();
            Matcher matcher = MimeConstants.MIME_ENCODED_PATTERN.matcher(encodedText);
            int lastEnd = 0;

            while (matcher.find()) {
                // Add any text before the encoded part
                result.append(encodedText, lastEnd, matcher.start());

                String charset = matcher.group(1);
                String encoding = matcher.group(2).toUpperCase();
                String encodedValue = matcher.group(3);

                try {
                    String decodedValue;
                    if (""B"".equals(encoding)) {
                        // Base64 decoding
                        byte[] decodedBytes = Base64.getDecoder().decode(encodedValue);
                        decodedValue = new String(decodedBytes, Charset.forName(charset));
                    } else if (""Q"".equals(encoding)) {
                        // Quoted-printable decoding
                        decodedValue = decodeQuotedPrintable(encodedValue, charset);
                    } else {
                        // Unknown encoding, keep original
                        decodedValue = matcher.group(0);
                    }
                    result.append(decodedValue);
                } catch (Exception e) {
                    log.warn(""Failed to decode MIME header part: {}"", matcher.group(0), e);
                    // If decoding fails, keep the original encoded text
                    result.append(matcher.group(0));
                }

                lastEnd = matcher.end();
            }

            // Add any remaining text after the last encoded part
            result.append(encodedText.substring(lastEnd));

            return result.toString();
        } catch (Exception e) {
            log.warn(""Error decoding MIME header: {}"", encodedText, e);
            return encodedText; // Return original if decoding fails
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,decodeQuotedPrintable,"String decodeQuotedPrintable(String,String)","[1483, 1512]","{'A248': [(1483, 1503), (1505, 1512)], 'A234': [(1504, 1504)]}","{'A248': 0.9666666666666667, 'A234': 0.03333333333333333}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String decodeQuotedPrintable(String encodedText, String charset) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < encodedText.length(); i++) {
            char c = encodedText.charAt(i);
            switch (c) {
                case '=' -> {
                    if (i + 2 < encodedText.length()) {
                        String hex = encodedText.substring(i + 1, i + 3);
                        try {
                            int value = Integer.parseInt(hex, 16);
                            result.append((char) value);
                            i += 2; // Skip the hex digits
                        } catch (NumberFormatException e) {
                            // If hex parsing fails, keep the original character
                            result.append(c);
                        }
                    } else {
                        result.append(c);
                    }
                }
                case '_' -> // In RFC 2047, underscore represents space
                        result.append(' ');
                default -> result.append(c);
            }
        }

        // Convert bytes to proper charset
        byte[] bytes = result.toString().getBytes(StandardCharsets.ISO_8859_1);
        return new String(bytes, Charset.forName(charset));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,safeMimeDecode,String safeMimeDecode(String),"[1514, 1533]","{'A248': [(1514, 1533)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static String safeMimeDecode(String headerValue) {
        if (headerValue == null) {
            return """";
        }

        try {
            if (isJakartaMailAvailable()) {
                // Use Jakarta Mail's MimeUtility for proper MIME decoding
                Class<?> mimeUtilityClass = Class.forName(""jakarta.mail.internet.MimeUtility"");
                Method decodeText = mimeUtilityClass.getMethod(""decodeText"", String.class);
                return (String) decodeText.invoke(null, headerValue.trim());
            } else {
                // Fallback to basic MIME decoding
                return decodeMimeHeader(headerValue.trim());
            }
        } catch (Exception e) {
            log.warn(""Failed to decode MIME header, using original: {}"", headerValue, e);
            return headerValue;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,isValidJakartaMailPart,boolean isValidJakartaMailPart(Object),"[1535, 1557]","{'A248': [(1535, 1557)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static boolean isValidJakartaMailPart(Object part) {
        if (part == null) return false;

        try {
            // Check if the object implements jakarta.mail.Part interface
            Class<?> partInterface = Class.forName(""jakarta.mail.Part"");
            if (!partInterface.isInstance(part)) {
                return false;
            }

            // Additional check for MimePart
            try {
                Class<?> mimePartInterface = Class.forName(""jakarta.mail.internet.MimePart"");
                return mimePartInterface.isInstance(part);
            } catch (ClassNotFoundException e) {
                // MimePart not available, but Part is sufficient
                return true;
            }
        } catch (ClassNotFoundException e) {
            log.debug(""Jakarta Mail Part interface not available for validation"");
            return false;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf,isValidJakartaMailMultipart,boolean isValidJakartaMailMultipart(Object),"[1559, 1585]","{'A248': [(1559, 1585)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"    private static boolean isValidJakartaMailMultipart(Object multipart) {
        if (multipart == null) return false;

        try {
            // Check if the object implements jakarta.mail.Multipart interface
            Class<?> multipartInterface = Class.forName(""jakarta.mail.Multipart"");
            if (!multipartInterface.isInstance(multipart)) {
                return false;
            }

            // Additional check for MimeMultipart
            try {
                Class<?> mimeMultipartClass = Class.forName(""jakarta.mail.internet.MimeMultipart"");
                if (mimeMultipartClass.isInstance(multipart)) {
                    log.debug(""Found MimeMultipart instance for enhanced processing"");
                    return true;
                }
            } catch (ClassNotFoundException e) {
                log.debug(""MimeMultipart not available, using base Multipart interface"");
            }

            return true;
        } catch (ClassNotFoundException e) {
            log.debug(""Jakarta Mail Multipart interface not available for validation"");
            return false;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf.EmailContent,setHtmlBody,void setHtmlBody(String),"[1598, 1600]","{'A248': [(1598, 1600)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"        public void setHtmlBody(String htmlBody) {
            this.htmlBody = htmlBody != null ? htmlBody.replaceAll(""\r"", """") : null;
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf.EmailContent,setTextBody,void setTextBody(String),"[1602, 1604]","{'A248': [(1602, 1604)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"        public void setTextBody(String textBody) {
            this.textBody = textBody != null ? textBody.replaceAll(""\r"", """") : null;
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf.EmailAttachment,setData,void setData(byte[]),"[1622, 1627]","{'A248': [(1622, 1627)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"        public void setData(byte[] data) {
            this.data = data;
            if (data != null) {
                this.sizeBytes = data.length;
            }
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf.AttachmentMarkerPositionFinder,startPage,void startPage(org.apache.pdfbox.pdmodel.PDPage),"[1661, 1664]","{'A248': [(1661, 1664)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"        @Override
        protected void startPage(org.apache.pdfbox.pdmodel.PDPage page) throws IOException {
            super.startPage(page);
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf.AttachmentMarkerPositionFinder,endPage,void endPage(org.apache.pdfbox.pdmodel.PDPage),"[1666, 1670]","{'A248': [(1666, 1670)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"        @Override
        protected void endPage(org.apache.pdfbox.pdmodel.PDPage page) throws IOException {
            currentPageIndex++;
            super.endPage(page);
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf.AttachmentMarkerPositionFinder,writeString,"void writeString(String,List<org.apache.pdfbox.text.TextPosition>)","[1672, 1713]","{'A248': [(1672, 1672), (1676, 1684), (1693, 1703), (1707, 1713)], 'A234': [(1673, 1675), (1685, 1692), (1704, 1706)]}","{'A248': 0.6666666666666666, 'A234': 0.3333333333333333}",A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"        @Override
        protected void writeString(
                String string, List<org.apache.pdfbox.text.TextPosition> textPositions)
                throws IOException {
            // Check if we are entering or exiting the attachment section
            String lowerString = string.toLowerCase();

            // Look for attachment section start marker
            if (lowerString.contains(""attachments ("")) {
                isInAttachmentSection = true;
                attachmentSectionFound = true;
            }

            // Look for attachment section end markers (common patterns that indicate end of
            // attachments)
            if (isInAttachmentSection
                    && (lowerString.contains(""</body>"")
                            || lowerString.contains(""</html>"")
                            || (attachmentSectionFound
                                    && lowerString.trim().isEmpty()
                                    && string.length() > 50))) {
                isInAttachmentSection = false;
            }

            // Only look for markers if we are in the attachment section
            if (isInAttachmentSection) {
                String attachmentMarker = MimeConstants.ATTACHMENT_MARKER;
                for (int i = 0; (i = string.indexOf(attachmentMarker, i)) != -1; i++) {
                    if (i < textPositions.size()) {
                        org.apache.pdfbox.text.TextPosition textPosition = textPositions.get(i);
                        MarkerPosition position =
                                new MarkerPosition(
                                        currentPageIndex,
                                        textPosition.getXDirAdj(),
                                        textPosition.getYDirAdj(),
                                        attachmentMarker);
                        positions.add(position);
                    }
                }
            }
            super.writeString(string, textPositions);
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/EmlToPdf.java,EmlToPdf.AttachmentMarkerPositionFinder,setSortByPosition,void setSortByPosition(boolean),"[1715, 1718]","{'A248': [(1715, 1718)]}",{'A248': 1.0},A248,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java,"        @Override
        public void setSortByPosition(boolean sortByPosition) {
            this.sortByPosition = sortByPosition;
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/RequestUriUtils.java,RequestUriUtils,isStaticResource,boolean isStaticResource(String),"[5, 7]","{'A233': [(5, 7)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/RequestUriUtilsTest.java,"    public static boolean isStaticResource(String requestURI) {
        return isStaticResource("""", requestURI);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/RequestUriUtils.java,RequestUriUtils,isStaticResource,"boolean isStaticResource(String,String)","[9, 25]","{'A233': [(13, 13), (17, 18), (20, 22)], 'A234': [(9, 12), (14, 16), (19, 19), (23, 25)]}","{'A233': 0.35294117647058826, 'A234': 0.6470588235294118}",A234,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/RequestUriUtilsTest.java,"    public static boolean isStaticResource(String contextPath, String requestURI) {
        return requestURI.startsWith(contextPath + ""/css/"")
                || requestURI.startsWith(contextPath + ""/fonts/"")
                || requestURI.startsWith(contextPath + ""/js/"")
                || requestURI.endsWith(contextPath + ""robots.txt"")
                || requestURI.startsWith(contextPath + ""/images/"")
                || requestURI.startsWith(contextPath + ""/public/"")
                || requestURI.startsWith(contextPath + ""/pdfjs/"")
                || requestURI.startsWith(contextPath + ""/login"")
                || requestURI.startsWith(contextPath + ""/error"")
                || requestURI.endsWith("".svg"")
                || requestURI.endsWith("".png"")
                || requestURI.endsWith("".ico"")
                || requestURI.endsWith("".txt"")
                || requestURI.endsWith("".webmanifest"")
                || requestURI.startsWith(contextPath + ""/api/v1/info/status"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/RequestUriUtils.java,RequestUriUtils,isTrackableResource,boolean isTrackableResource(String),"[27, 29]","{'A233': [(27, 29)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/RequestUriUtilsTest.java,"    public static boolean isTrackableResource(String requestURI) {
        return isTrackableResource("""", requestURI);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/RequestUriUtils.java,RequestUriUtils,isTrackableResource,"boolean isTrackableResource(String,String)","[31, 49]","{'A233': [(31, 49)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/RequestUriUtilsTest.java,"    public static boolean isTrackableResource(String contextPath, String requestURI) {
        return !(requestURI.startsWith(""/js"")
                || requestURI.startsWith(""/v1/api-docs"")
                || requestURI.endsWith(""robots.txt"")
                || requestURI.startsWith(""/images"")
                || requestURI.endsWith("".png"")
                || requestURI.endsWith("".ico"")
                || requestURI.endsWith("".css"")
                || requestURI.endsWith("".txt"")
                || requestURI.endsWith("".map"")
                || requestURI.endsWith("".svg"")
                || requestURI.endsWith(""popularity.txt"")
                || requestURI.endsWith("".js"")
                || requestURI.contains(""swagger"")
                || requestURI.startsWith(""/api/v1/info"")
                || requestURI.startsWith(""/site.webmanifest"")
                || requestURI.startsWith(""/fonts"")
                || requestURI.startsWith(""/pdfjs""));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfErrorUtils.java,PdfErrorUtils,isCorruptedPdfError,boolean isCorruptedPdfError(IOException),"[14, 16]","{'A233': [(14, 16)]}",{'A233': 1.0},A233,,"    public static boolean isCorruptedPdfError(IOException e) {
        return isCorruptedPdfError(e.getMessage());
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfErrorUtils.java,PdfErrorUtils,isCorruptedPdfError,boolean isCorruptedPdfError(Exception),"[24, 26]","{'A233': [(24, 26)]}",{'A233': 1.0},A233,,"    public static boolean isCorruptedPdfError(Exception e) {
        return isCorruptedPdfError(e.getMessage());
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PdfErrorUtils.java,PdfErrorUtils,isCorruptedPdfError,boolean isCorruptedPdfError(String),"[34, 54]","{'A233': [(34, 54)]}",{'A233': 1.0},A233,,"    private static boolean isCorruptedPdfError(String message) {
        if (message == null) return false;

        // Check for common corruption indicators
        return message.contains(""Missing root object specification"")
                || message.contains(""Header doesn't contain versioninfo"")
                || message.contains(""Expected trailer"")
                || message.contains(""Invalid PDF"")
                || message.contains(""Corrupted"")
                || message.contains(""damaged"")
                || message.contains(""Unknown dir object"")
                || message.contains(""Can't dereference COSObject"")
                || message.contains(""parseCOSString string should start with"")
                || message.contains(""ICCBased colorspace array must have a stream"")
                || message.contains(""1-based index not found"")
                || message.contains(""Invalid dictionary, found:"")
                || message.contains(""AES initialization vector not fully read"")
                || message.contains(""BadPaddingException"")
                || message.contains(""Given final block not properly padded"")
                || message.contains(""End-of-File, expected line"");
    }
"
stirling.software.common.util.propertyeditor,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/propertyeditor/StringToArrayListPropertyEditor.java,StringToArrayListPropertyEditor,setAsText,void setAsText(String),"[20, 36]","{'A256': [(20, 27), (29, 36)], 'A234': [(28, 28)]}","{'A256': 0.9411764705882353, 'A234': 0.058823529411764705}",A256,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/propertyeditor/StringToArrayListPropertyEditorTest.java,"    @Override
    public void setAsText(String text) throws IllegalArgumentException {
        if (text == null || text.trim().isEmpty()) {
            setValue(new ArrayList<>());
            return;
        }
        try {
            objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
            TypeReference<ArrayList<RedactionArea>> typeRef = new TypeReference<>() {};
            List<RedactionArea> list = objectMapper.readValue(text, typeRef);
            setValue(list);
        } catch (Exception e) {
            log.error(""Exception while converting {}"", e);
            throw new IllegalArgumentException(
                    ""Failed to convert java.lang.String to java.util.List"");
        }
    }
"
stirling.software.common.util.propertyeditor,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/propertyeditor/StringToMapPropertyEditor.java,StringToMapPropertyEditor,setAsText,void setAsText(String),"[14, 24]","{'A256': [(14, 16), (18, 24)], 'A234': [(17, 17)]}","{'A256': 0.9090909090909091, 'A234': 0.09090909090909091}",A256,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/propertyeditor/StringToMapPropertyEditorTest.java,"    @Override
    public void setAsText(String text) throws IllegalArgumentException {
        try {
            TypeReference<HashMap<String, String>> typeRef = new TypeReference<>() {};
            Map<String, String> map = objectMapper.readValue(text, typeRef);
            setValue(map);
        } catch (Exception e) {
            throw new IllegalArgumentException(
                    ""Failed to convert java.lang.String to java.util.Map"");
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ValidationUtils.java,ValidationUtils,isStringEmpty,boolean isStringEmpty(String),"[7, 9]","{'A236': [(7, 9)]}",{'A236': 1.0},A236,,"    public static boolean isStringEmpty(String input) {
        return input == null || input.isBlank();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ValidationUtils.java,ValidationUtils,isCollectionEmpty,boolean isCollectionEmpty(Collection<String>),"[11, 13]","{'A236': [(11, 13)]}",{'A236': 1.0},A236,,"    public static boolean isCollectionEmpty(Collection<String> input) {
        return input == null || input.isEmpty();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/CheckProgramInstall.java,CheckProgramInstall,getAvailablePythonCommand,String getAvailablePythonCommand(),"[21, 31]","{'A234': [(21, 31)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/CheckProgramInstallTest.java,"    public static String getAvailablePythonCommand() {
        if (!pythonAvailableChecked) {
            availablePythonCommand =
                    PYTHON_COMMANDS.stream()
                            .filter(CheckProgramInstall::checkPythonVersion)
                            .findFirst()
                            .orElse(null);
            pythonAvailableChecked = true;
        }
        return availablePythonCommand;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/CheckProgramInstall.java,CheckProgramInstall,checkPythonVersion,boolean checkPythonVersion(String),"[39, 49]","{'A234': [(39, 49)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/CheckProgramInstallTest.java,"    private static boolean checkPythonVersion(String pythonCommand) {
        try {
            ProcessExecutorResult result =
                    ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV)
                            .runCommandWithOutputHandling(
                                    Arrays.asList(pythonCommand, ""--version""));
            return true; // Command succeeded, Python is available
        } catch (IOException | InterruptedException e) {
            return false; // Command failed, Python is not available
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/CheckProgramInstall.java,CheckProgramInstall,isPythonAvailable,boolean isPythonAvailable(),"[56, 58]","{'A234': [(56, 58)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/CheckProgramInstallTest.java,"    public static boolean isPythonAvailable() {
        return getAvailablePythonCommand() != null;
    }
"
stirling.software.common.util.misc,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/misc/InvertFullColorStrategy.java,InvertFullColorStrategy,replace,InputStreamResource replace(),"[30, 96]","{'A249': [(30, 32), (80, 80), (96, 96)], 'A257': [(33, 79), (81, 95)]}","{'A249': 0.07462686567164178, 'A257': 0.9253731343283582}",A257,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/misc/InvertFullColorStrategyTest.java,"    @Override
    public InputStreamResource replace() throws IOException {

        File file = null;
        try {
            // Create a temporary file, with the original filename from the multipart file
            file = Files.createTempFile(""temp"", getFileInput().getOriginalFilename()).toFile();

            // Transfer the content of the multipart file to the file
            getFileInput().transferTo(file);

            // Load the uploaded PDF
            PDDocument document = Loader.loadPDF(file);

            // Render each page and invert colors
            PDFRenderer pdfRenderer = new PDFRenderer(document);
            for (int page = 0; page < document.getNumberOfPages(); page++) {
                BufferedImage image =
                        pdfRenderer.renderImageWithDPI(page, 300); // Render page at 300 DPI

                // Invert the colors
                invertImageColors(image);

                // Create a new PDPage from the inverted image
                PDPage pdPage = document.getPage(page);
                File tempImageFile = null;
                try {
                    tempImageFile = convertToBufferedImageTpFile(image);
                    PDImageXObject pdImage =
                            PDImageXObject.createFromFileByContent(tempImageFile, document);

                    PDPageContentStream contentStream =
                            new PDPageContentStream(
                                    document,
                                    pdPage,
                                    PDPageContentStream.AppendMode.OVERWRITE,
                                    true);
                    contentStream.drawImage(
                            pdImage,
                            0,
                            0,
                            pdPage.getMediaBox().getWidth(),
                            pdPage.getMediaBox().getHeight());
                    contentStream.close();
                } finally {
                    if (tempImageFile != null && tempImageFile.exists()) {
                        Files.delete(tempImageFile.toPath());
                    }
                }
            }

            // Save the modified PDF to a ByteArrayOutputStream
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            document.save(byteArrayOutputStream);
            document.close();

            // Prepare the modified PDF for download
            ByteArrayInputStream inputStream =
                    new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
            InputStreamResource resource = new InputStreamResource(inputStream);
            return resource;
        } finally {
            if (file != null && file.exists()) {
                Files.delete(file.toPath());
            }
        }
    }
"
stirling.software.common.util.misc,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/misc/InvertFullColorStrategy.java,InvertFullColorStrategy,invertImageColors,void invertImageColors(BufferedImage),"[99, 114]","{'A249': [(99, 114)]}",{'A249': 1.0},A249,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/misc/InvertFullColorStrategyTest.java,"    private void invertImageColors(BufferedImage image) {
        int width = image.getWidth();
        int height = image.getHeight();
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                int rgba = image.getRGB(x, y);
                Color color = new Color(rgba, true);
                Color invertedColor =
                        new Color(
                                255 - color.getRed(),
                                255 - color.getGreen(),
                                255 - color.getBlue());
                image.setRGB(x, y, invertedColor.getRGB());
            }
        }
    }
"
stirling.software.common.util.misc,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/misc/InvertFullColorStrategy.java,InvertFullColorStrategy,convertToBufferedImageTpFile,File convertToBufferedImageTpFile(BufferedImage),"[117, 121]","{'A249': [(117, 117), (119, 121)], 'A257': [(118, 118)]}","{'A249': 0.8, 'A257': 0.2}",A249,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/misc/InvertFullColorStrategyTest.java,"    private File convertToBufferedImageTpFile(BufferedImage image) throws IOException {
        File file = File.createTempFile(""image"", "".png"");
        ImageIO.write(image, ""png"", file);
        return file;
    }
"
stirling.software.common.util.misc,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/misc/CustomColorReplaceStrategy.java,CustomColorReplaceStrategy,replace,InputStreamResource replace(),"[49, 157]","{'A249': [(49, 62), (64, 98), (100, 105), (107, 108), (110, 110), (117, 157)], 'A243': [(63, 63)], 'A233': [(99, 99), (106, 106), (109, 109), (111, 116)]}","{'A249': 0.908256880733945, 'A243': 0.009174311926605505, 'A233': 0.08256880733944955}",A249,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/misc/CustomColorReplaceStrategyTest.java,"    @Override
    public InputStreamResource replace() throws IOException {

        // If ReplaceAndInvert is HighContrastColor option, then get the colors of text and
        // background from static
        if (replaceAndInvert == ReplaceAndInvert.HIGH_CONTRAST_COLOR) {
            String[] colors =
                    HighContrastColorReplaceDecider.getColors(
                            replaceAndInvert, highContrastColorCombination);
            this.textColor = colors[0];
            this.backgroundColor = colors[1];
        }

        // Create a temporary file, with the original filename from the multipart file
        File file = Files.createTempFile(""temp"", getFileInput().getOriginalFilename()).toFile();

        // Transfer the content of the multipart file to the file
        getFileInput().transferTo(file);

        try (PDDocument document = Loader.loadPDF(file)) {

            PDPageTree pages = document.getPages();

            for (PDPage page : pages) {

                PdfTextStripperCustom pdfTextStripperCustom = new PdfTextStripperCustom();
                // Get text positions
                List<List<TextPosition>> charactersByArticle =
                        pdfTextStripperCustom.processPageCustom(page);

                // Begin a new content stream
                PDPageContentStream contentStream =
                        new PDPageContentStream(
                                document, page, PDPageContentStream.AppendMode.APPEND, true, true);

                // Set the new text color
                contentStream.setNonStrokingColor(Color.decode(this.textColor));

                // Draw the text with the new color
                for (List<TextPosition> textPositions : charactersByArticle) {
                    for (TextPosition text : textPositions) {
                        // Move to the text position
                        contentStream.beginText();
                        contentStream.newLineAtOffset(
                                text.getX(), page.getMediaBox().getHeight() - text.getY());
                        PDFont font = null;
                        String unicodeText = text.getUnicode();
                        try {
                            font = PDFontFactory.createFont(text.getFont().getCOSObject());
                        } catch (IOException io) {
                            log.info(""Primary font not found, using fallback font."");
                            font = new PDType1Font(Standard14Fonts.FontName.HELVETICA);
                        }
                        // if a character is not supported by font, then look for supported font
                        try {
                            byte[] bytes = font.encode(unicodeText);
                        } catch (IOException io) {
                            log.info(""text could not be encoded "");
                            font = checkSupportedFontForCharacter(unicodeText);
                        } catch (IllegalArgumentException ie) {
                            log.info(""text not supported by font "");
                            font = checkSupportedFontForCharacter(unicodeText);
                        } catch (UnsupportedOperationException ue) {
                            log.info(
                                    ""font does not support encoding operation: {} for text: '{}'"",
                                    font.getClass().getSimpleName(),
                                    unicodeText);
                            font = checkSupportedFontForCharacter(unicodeText);
                        } finally {
                            // if any other font is not supported, then replace default character *
                            if (font == null) {
                                font = new PDType1Font(Standard14Fonts.FontName.HELVETICA);
                                unicodeText = ""*"";
                            }
                        }
                        contentStream.setFont(font, text.getFontSize());
                        contentStream.showText(unicodeText);
                        contentStream.endText();
                    }
                }
                // Close the content stream
                contentStream.close();
                // Use a content stream to overlay the background color
                try (PDPageContentStream contentStreamBg =
                        new PDPageContentStream(
                                document,
                                page,
                                PDPageContentStream.AppendMode.PREPEND,
                                true,
                                true)) {
                    // Set background color (e.g., light yellow)
                    contentStreamBg.setNonStrokingColor(Color.decode(this.backgroundColor));
                    contentStreamBg.addRect(
                            0, 0, page.getMediaBox().getWidth(), page.getMediaBox().getHeight());
                    contentStreamBg.fill();
                }
            }
            // Save the modified PDF to a ByteArrayOutputStream
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            document.save(byteArrayOutputStream);
            document.close();

            // Prepare the modified PDF for download
            ByteArrayInputStream inputStream =
                    new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
            InputStreamResource resource = new InputStreamResource(inputStream);
            return resource;
        }
    }
"
stirling.software.common.util.misc,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/misc/CustomColorReplaceStrategy.java,CustomColorReplaceStrategy,checkSupportedFontForCharacter,PDFont checkSupportedFontForCharacter(String),"[159, 175]","{'A249': [(159, 168), (170, 170), (172, 175)], 'A233': [(169, 169), (171, 171)]}","{'A249': 0.8823529411764706, 'A233': 0.11764705882352941}",A249,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/misc/CustomColorReplaceStrategyTest.java,"    private PDFont checkSupportedFontForCharacter(String unicodeText) {

        Set<String> fonts = Standard14Fonts.getNames();
        for (String font : fonts) {
            Standard14Fonts.FontName fontName = Standard14Fonts.getMappedFontName(font);
            PDFont currentFont = new PDType1Font(fontName);
            try {
                byte[] bytes = currentFont.encode(unicodeText);
                return currentFont;
            } catch (IOException io) {
                log.info(""text could not be encoded "");
            } catch (IllegalArgumentException ie) {
                log.info(""text not supported by font "");
            }
        }
        return null;
    }
"
stirling.software.common.util.misc,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/misc/PdfTextStripperCustom.java,PdfTextStripperCustom,processPageCustom,List<List<TextPosition>> processPageCustom(PDPage),"[21, 35]","{'A249': [(21, 35)]}",{'A249': 1.0},A249,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/misc/PdfTextStripperCustomTest.java,"    public List<List<TextPosition>> processPageCustom(PDPage page) throws IOException {

        addRegion(
                ""wholePage"",
                new Rectangle2D.Float(
                        page.getMediaBox().getLowerLeftX(),
                        page.getMediaBox().getLowerLeftY(),
                        page.getMediaBox().getWidth(),
                        page.getMediaBox().getHeight()));
        extractRegions(page);

        List<List<TextPosition>> textPositions = getCharactersByArticle();

        return textPositions;
    }
"
stirling.software.common.util.misc,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/misc/HighContrastColorReplaceDecider.java,HighContrastColorReplaceDecider,getColors,"String[] getColors(ReplaceAndInvert,HighContrastColorCombination)","[10, 29]","{'A249': [(10, 29)]}",{'A249': 1.0},A249,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/misc/HighContrastColorReplaceDeciderTest.java,"    public static String[] getColors(
            ReplaceAndInvert replaceAndInvert,
            HighContrastColorCombination highContrastColorCombination) {

        if (highContrastColorCombination == HighContrastColorCombination.BLACK_TEXT_ON_WHITE) {
            return new String[] {""0"", ""16777215""};
        } else if (highContrastColorCombination
                == HighContrastColorCombination.GREEN_TEXT_ON_BLACK) {
            return new String[] {""65280"", ""0""};
        } else if (highContrastColorCombination
                == HighContrastColorCombination.WHITE_TEXT_ON_BLACK) {
            return new String[] {""16777215"", ""0""};
        } else if (highContrastColorCombination
                == HighContrastColorCombination.YELLOW_TEXT_ON_BLACK) {

            return new String[] {""16776960"", ""0""};
        }

        return null;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PropertyConfigs.java,PropertyConfigs,getBooleanValue,"boolean getBooleanValue(List<String>,boolean)","[7, 15]","{'A233': [(7, 15)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PropertyConfigsTest.java,"    public static boolean getBooleanValue(List<String> keys, boolean defaultValue) {
        for (String key : keys) {
            String value = System.getProperty(key);
            if (value == null) value = System.getenv(key);

            if (value != null) return Boolean.valueOf(value);
        }
        return defaultValue;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PropertyConfigs.java,PropertyConfigs,getStringValue,"String getStringValue(List<String>,String)","[17, 25]","{'A233': [(17, 25)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PropertyConfigsTest.java,"    public static String getStringValue(List<String> keys, String defaultValue) {
        for (String key : keys) {
            String value = System.getProperty(key);
            if (value == null) value = System.getenv(key);

            if (value != null) return value;
        }
        return defaultValue;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PropertyConfigs.java,PropertyConfigs,getBooleanValue,"boolean getBooleanValue(String,boolean)","[27, 31]","{'A233': [(27, 31)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PropertyConfigsTest.java,"    public static boolean getBooleanValue(String key, boolean defaultValue) {
        String value = System.getProperty(key);
        if (value == null) value = System.getenv(key);
        return (value != null) ? Boolean.valueOf(value) : defaultValue;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PropertyConfigs.java,PropertyConfigs,getStringValue,"String getStringValue(String,String)","[33, 37]","{'A233': [(33, 37)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PropertyConfigsTest.java,"    public static String getStringValue(String key, String defaultValue) {
        String value = System.getProperty(key);
        if (value == null) value = System.getenv(key);
        return (value != null) ? value : defaultValue;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UIScaling.java,UIScaling,getWidthScaleFactor,double getWidthScaleFactor(),"[9, 12]","{'A233': [(9, 12)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UIScalingTest.java,"    public static double getWidthScaleFactor() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        return screenSize.getWidth() / BASE_RESOLUTION_WIDTH;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UIScaling.java,UIScaling,getHeightScaleFactor,double getHeightScaleFactor(),"[14, 17]","{'A233': [(14, 17)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UIScalingTest.java,"    public static double getHeightScaleFactor() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        return screenSize.getHeight() / BASE_RESOLUTION_HEIGHT;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UIScaling.java,UIScaling,scaleWidth,int scaleWidth(int),"[19, 21]","{'A233': [(19, 21)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UIScalingTest.java,"    public static int scaleWidth(int value) {
        return (int) Math.round(value * getWidthScaleFactor());
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UIScaling.java,UIScaling,scaleHeight,int scaleHeight(int),"[23, 25]","{'A233': [(23, 25)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UIScalingTest.java,"    public static int scaleHeight(int value) {
        return (int) Math.round(value * getHeightScaleFactor());
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UIScaling.java,UIScaling,scale,Dimension scale(Dimension),"[27, 29]","{'A233': [(27, 29)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UIScalingTest.java,"    public static Dimension scale(Dimension dim) {
        return new Dimension(scaleWidth(dim.width), scaleHeight(dim.height));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UIScaling.java,UIScaling,scale,Insets scale(Insets),"[31, 37]","{'A233': [(31, 37)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UIScalingTest.java,"    public static Insets scale(Insets insets) {
        return new Insets(
                scaleHeight(insets.top),
                scaleWidth(insets.left),
                scaleHeight(insets.bottom),
                scaleWidth(insets.right));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UIScaling.java,UIScaling,scaleFont,Font scaleFont(Font),"[39, 43]","{'A233': [(39, 43)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UIScalingTest.java,"    public static Font scaleFont(Font font) {
        // For fonts, we'll use the smaller scale factor to ensure readability
        double scaleFactor = Math.min(getWidthScaleFactor(), getHeightScaleFactor());
        return font.deriveFont((float) (font.getSize() * scaleFactor));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/UIScaling.java,UIScaling,scaleIcon,"Image scaleIcon(Image,int,int)","[46, 64]","{'A233': [(46, 64)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/UIScalingTest.java,"    public static Image scaleIcon(Image icon, int targetWidth, int targetHeight) {
        if (icon == null) return null;

        double widthScale = getWidthScaleFactor();
        double heightScale = getHeightScaleFactor();

        int scaledWidth = (int) Math.round(targetWidth * widthScale);
        int scaledHeight = (int) Math.round(targetHeight * heightScale);

        // Maintain aspect ratio for icons
        double aspectRatio = (double) icon.getWidth(null) / icon.getHeight(null);
        if (scaledWidth / scaledHeight > aspectRatio) {
            scaledWidth = (int) (scaledHeight * aspectRatio);
        } else {
            scaledHeight = (int) (scaledWidth / aspectRatio);
        }

        return icon.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ProcessExecutor.java,ProcessExecutor,getInstance,ProcessExecutor getInstance(Processes),"[37, 39]","{'A233': [(37, 39)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ProcessExecutorTest.java,"    public static ProcessExecutor getInstance(Processes processType) {
        return getInstance(processType, true);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ProcessExecutor.java,ProcessExecutor,getInstance,"ProcessExecutor getInstance(Processes,boolean)","[41, 154]","{'A233': [(41, 46), (72, 81), (87, 100), (126, 135), (141, 154)], 'A253': [(47, 71), (82, 86), (101, 125), (136, 140)]}","{'A233': 0.47368421052631576, 'A253': 0.5263157894736842}",A253,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ProcessExecutorTest.java,"    public static ProcessExecutor getInstance(Processes processType, boolean liveUpdates) {
        return instances.computeIfAbsent(
                processType,
                key -> {
                    int semaphoreLimit =
                            switch (key) {
                                case LIBRE_OFFICE ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getLibreOfficeSessionLimit();
                                case PDFTOHTML ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getPdfToHtmlSessionLimit();
                                case PYTHON_OPENCV ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getPythonOpenCvSessionLimit();
                                case WEASYPRINT ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getWeasyPrintSessionLimit();
                                case INSTALL_APP ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getInstallAppSessionLimit();
                                case TESSERACT ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getTesseractSessionLimit();
                                case QPDF ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getQpdfSessionLimit();
                                case CALIBRE ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getCalibreSessionLimit();
                                case GHOSTSCRIPT ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getGhostscriptSessionLimit();
                                case OCR_MY_PDF ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getSessionLimit()
                                                .getOcrMyPdfSessionLimit();
                            };

                    long timeoutMinutes =
                            switch (key) {
                                case LIBRE_OFFICE ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getLibreOfficeTimeoutMinutes();
                                case PDFTOHTML ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getPdfToHtmlTimeoutMinutes();
                                case PYTHON_OPENCV ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getPythonOpenCvTimeoutMinutes();
                                case WEASYPRINT ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getWeasyPrintTimeoutMinutes();
                                case INSTALL_APP ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getInstallAppTimeoutMinutes();
                                case TESSERACT ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getTesseractTimeoutMinutes();
                                case QPDF ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getQpdfTimeoutMinutes();
                                case CALIBRE ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getCalibreTimeoutMinutes();
                                case GHOSTSCRIPT ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getGhostscriptTimeoutMinutes();
                                case OCR_MY_PDF ->
                                        applicationProperties
                                                .getProcessExecutor()
                                                .getTimeoutMinutes()
                                                .getOcrMyPdfTimeoutMinutes();
                            };
                    return new ProcessExecutor(semaphoreLimit, liveUpdates, timeoutMinutes);
                });
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ProcessExecutor.java,ProcessExecutor,runCommandWithOutputHandling,ProcessExecutorResult runCommandWithOutputHandling(List<String>),"[156, 159]","{'A233': [(156, 159)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ProcessExecutorTest.java,"    public ProcessExecutorResult runCommandWithOutputHandling(List<String> command)
            throws IOException, InterruptedException {
        return runCommandWithOutputHandling(command, null);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ProcessExecutor.java,ProcessExecutor,runCommandWithOutputHandling,"ProcessExecutorResult runCommandWithOutputHandling(List<String>,File)","[161, 291]","{'A233': [(161, 167), (169, 189), (194, 194), (196, 197), (199, 199), (201, 212), (217, 217), (219, 220), (222, 222), (224, 245), (250, 252), (254, 256), (258, 260), (262, 263), (273, 276), (286, 291)], 'A234': [(249, 249), (257, 257)], 'A238': [(168, 168), (195, 195), (198, 198), (200, 200), (218, 218), (221, 221), (223, 223), (253, 253), (261, 261)], 'A246': [(190, 193), (213, 216)], 'A257': [(246, 248), (264, 272), (277, 285)]}","{'A233': 0.6946564885496184, 'A234': 0.015267175572519083, 'A238': 0.06870229007633588, 'A246': 0.061068702290076333, 'A257': 0.16030534351145037}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ProcessExecutorTest.java,"    public ProcessExecutorResult runCommandWithOutputHandling(
            List<String> command, File workingDirectory) throws IOException, InterruptedException {
        String messages = """";
        int exitCode = 1;
        semaphore.acquire();
        try {

            log.info(""Running command: "" + String.join("" "", command));
            ProcessBuilder processBuilder = new ProcessBuilder(command);

            // Use the working directory if it's set
            if (workingDirectory != null) {
                processBuilder.directory(workingDirectory);
            }
            Process process = processBuilder.start();

            // Read the error stream and standard output stream concurrently
            List<String> errorLines = new ArrayList<>();
            List<String> outputLines = new ArrayList<>();

            Thread errorReaderThread =
                    new Thread(
                            () -> {
                                try (BufferedReader errorReader =
                                        new BufferedReader(
                                                new InputStreamReader(
                                                        process.getErrorStream(),
                                                        StandardCharsets.UTF_8))) {
                                    String line;
                                    while ((line =
                                                    BoundedLineReader.readLine(
                                                            errorReader, 5_000_000))
                                            != null) {
                                        errorLines.add(line);
                                        if (liveUpdates) log.info(line);
                                    }
                                } catch (InterruptedIOException e) {
                                    log.warn(""Error reader thread was interrupted due to timeout."");
                                } catch (IOException e) {
                                    log.error(""exception"", e);
                                }
                            });

            Thread outputReaderThread =
                    new Thread(
                            () -> {
                                try (BufferedReader outputReader =
                                        new BufferedReader(
                                                new InputStreamReader(
                                                        process.getInputStream(),
                                                        StandardCharsets.UTF_8))) {
                                    String line;
                                    while ((line =
                                                    BoundedLineReader.readLine(
                                                            outputReader, 5_000_000))
                                            != null) {
                                        outputLines.add(line);
                                        if (liveUpdates) log.info(line);
                                    }
                                } catch (InterruptedIOException e) {
                                    log.warn(""Error reader thread was interrupted due to timeout."");
                                } catch (IOException e) {
                                    log.error(""exception"", e);
                                }
                            });

            errorReaderThread.start();
            outputReaderThread.start();

            // Wait for the conversion process to complete
            boolean finished = process.waitFor(timeoutDuration, TimeUnit.MINUTES);

            if (!finished) {
                // Terminate the process
                process.destroy();
                // Interrupt the reader threads
                errorReaderThread.interrupt();
                outputReaderThread.interrupt();
                throw new IOException(""Process timeout exceeded."");
            }
            exitCode = process.exitValue();
            // Wait for the reader threads to finish
            errorReaderThread.join();
            outputReaderThread.join();

            boolean isQpdf =
                    command != null && !command.isEmpty() && command.get(0).contains(""qpdf"");

            if (!outputLines.isEmpty()) {
                String outputMessage = String.join(""\n"", outputLines);
                messages += outputMessage;
                if (!liveUpdates) {
                    log.info(""Command output:\n"" + outputMessage);
                }
            }

            if (!errorLines.isEmpty()) {
                String errorMessage = String.join(""\n"", errorLines);
                messages += errorMessage;
                if (!liveUpdates) {
                    log.warn(""Command error output:\n"" + errorMessage);
                }
                if (exitCode != 0) {
                    if (isQpdf && exitCode == 3) {
                        log.warn(""qpdf succeeded with warnings: {}"", messages);
                    } else {
                        throw new IOException(
                                ""Command process failed with exit code ""
                                        + exitCode
                                        + "". Error message: ""
                                        + errorMessage);
                    }
                }
            }

            if (exitCode != 0) {
                if (isQpdf && exitCode == 3) {
                    log.warn(""qpdf succeeded with warnings: {}"", messages);
                } else {
                    throw new IOException(
                            ""Command process failed with exit code ""
                                    + exitCode
                                    + ""\nLogs: ""
                                    + messages);
                }
            }
        } finally {
            semaphore.release();
        }
        return new ProcessExecutorResult(exitCode, messages);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ProcessExecutor.java,ProcessExecutor.ProcessExecutorResult,getRc,int getRc(),"[315, 317]","{'A233': [(315, 317)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ProcessExecutorTest.java,"        public int getRc() {
            return rc;
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ProcessExecutor.java,ProcessExecutor.ProcessExecutorResult,setRc,void setRc(int),"[319, 321]","{'A233': [(319, 321)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ProcessExecutorTest.java,"        public void setRc(int rc) {
            this.rc = rc;
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ProcessExecutor.java,ProcessExecutor.ProcessExecutorResult,getMessages,String getMessages(),"[323, 325]","{'A233': [(323, 325)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ProcessExecutorTest.java,"        public String getMessages() {
            return messages;
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ProcessExecutor.java,ProcessExecutor.ProcessExecutorResult,setMessages,void setMessages(String),"[327, 329]","{'A233': [(327, 329)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ProcessExecutorTest.java,"        public void setMessages(String messages) {
            this.messages = messages;
        }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ProviderUtils.java,ProviderUtils,validateProvider,boolean validateProvider(Provider),"[10, 28]","{'A236': [(10, 28)]}",{'A236': 1.0},A236,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ProviderUtilsTest.java,"    public static boolean validateProvider(Provider provider) {
        if (provider == null) {
            return false;
        }

        if (isStringEmpty(provider.getClientId())) {
            return false;
        }

        if (isStringEmpty(provider.getClientSecret())) {
            return false;
        }

        if (isCollectionEmpty(provider.getScopes())) {
            return false;
        }

        return true;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ApplicationContextProvider.java,ApplicationContextProvider,setApplicationContext,void setApplicationContext(ApplicationContext),"[17, 20]","{'A233': [(17, 20)]}",{'A233': 1.0},A233,,"    @Override
    public void setApplicationContext(ApplicationContext context) throws BeansException {
        applicationContext = context;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ApplicationContextProvider.java,ApplicationContextProvider,getBean,T getBean(Class<T>),"[29, 38]","{'A233': [(29, 38)]}",{'A233': 1.0},A233,,"    public static <T> T getBean(Class<T> beanClass) {
        if (applicationContext == null) {
            return null;
        }
        try {
            return applicationContext.getBean(beanClass);
        } catch (BeansException e) {
            return null;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ApplicationContextProvider.java,ApplicationContextProvider,getBean,"T getBean(String,Class<T>)","[48, 57]","{'A233': [(48, 57)]}",{'A233': 1.0},A233,,"    public static <T> T getBean(String name, Class<T> beanClass) {
        if (applicationContext == null) {
            return null;
        }
        try {
            return applicationContext.getBean(name, beanClass);
        } catch (BeansException e) {
            return null;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ApplicationContextProvider.java,ApplicationContextProvider,containsBean,boolean containsBean(Class<?>),"[65, 75]","{'A233': [(65, 75)]}",{'A233': 1.0},A233,,"    public static boolean containsBean(Class<?> beanClass) {
        if (applicationContext == null) {
            return false;
        }
        try {
            applicationContext.getBean(beanClass);
            return true;
        } catch (BeansException e) {
            return false;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ErrorUtils.java,ErrorUtils,exceptionToModel,"Model exceptionToModel(Model,Exception)","[11, 19]","{'A233': [(11, 19)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ErrorUtilsTest.java,"    public static Model exceptionToModel(Model model, Exception ex) {
        StringWriter sw = new StringWriter();
        ex.printStackTrace(new PrintWriter(sw));
        String stackTrace = sw.toString();

        model.addAttribute(""errorMessage"", ex.getMessage());
        model.addAttribute(""stackTrace"", stackTrace);
        return model;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ErrorUtils.java,ErrorUtils,exceptionToModelView,"ModelAndView exceptionToModelView(Model,Exception)","[21, 30]","{'A233': [(21, 30)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ErrorUtilsTest.java,"    public static ModelAndView exceptionToModelView(Model model, Exception ex) {
        StringWriter sw = new StringWriter();
        ex.printStackTrace(new PrintWriter(sw));
        String stackTrace = sw.toString();

        ModelAndView modelAndView = new ModelAndView();
        modelAndView.addObject(""errorMessage"", ex.getMessage());
        modelAndView.addObject(""stackTrace"", stackTrace);
        return modelAndView;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileMonitor.java,FileMonitor,shouldNotProcess,boolean shouldNotProcess(Path),"[54, 56]","{'A247': [(54, 56)]}",{'A247': 1.0},A247,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileMonitorTest.java,"    private boolean shouldNotProcess(Path path) {
        return !pathFilter.test(path);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileMonitor.java,FileMonitor,recursivelyRegisterEntry,void recursivelyRegisterEntry(Path),"[58, 76]","{'A247': [(58, 60), (62, 76)], 'A238': [(61, 61)]}","{'A247': 0.9473684210526315, 'A238': 0.05263157894736842}",A247,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileMonitorTest.java,"    private void recursivelyRegisterEntry(Path dir) throws IOException {
        WatchKey key = dir.register(watchService, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
        path2KeyMapping.put(dir, key);
        log.info(""Registered directory: {}"", dir);

        try (Stream<Path> directoryVisitor = Files.walk(dir, 1)) {
            final Iterator<Path> iterator = directoryVisitor.iterator();
            while (iterator.hasNext()) {
                Path path = iterator.next();
                if (path.equals(dir) || shouldNotProcess(path)) continue;

                if (Files.isDirectory(path)) {
                    recursivelyRegisterEntry(path);
                } else if (Files.isRegularFile(path)) {
                    handleFileCreation(path);
                }
            }
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileMonitor.java,FileMonitor,trackFiles,void trackFiles(),"[78, 139]","{'A247': [(78, 87), (89, 93), (95, 128), (130, 139)], 'A238': [(88, 88), (94, 94), (129, 129)]}","{'A247': 0.9516129032258065, 'A238': 0.04838709677419355}",A247,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileMonitorTest.java,"    @Scheduled(fixedRate = 5000)
    public void trackFiles() {
        /*
         All files observed changes in the last iteration will be considered as staging files.
         If those files are not modified in current iteration, they will be considered as ready for processing.
        */
        stagingFiles = new HashSet<>(newlyDiscoveredFiles);
        readyForProcessingFiles.clear();

        if (path2KeyMapping.isEmpty()) {
            log.warn(""not monitoring any directory, even the root directory itself: {}"", rootDir);
            if (Files.exists(
                    rootDir)) { // if the root directory exists, re-register the root directory
                try {
                    recursivelyRegisterEntry(rootDir);
                } catch (IOException e) {
                    log.error(""unable to register monitoring"", e);
                }
            }
        }

        WatchKey key;
        while ((key = watchService.poll()) != null) {
            final Path watchingDir = (Path) key.watchable();
            key.pollEvents()
                    .forEach(
                            (evt) -> {
                                final Path path = (Path) evt.context();
                                final WatchEvent.Kind<?> kind = evt.kind();
                                if (shouldNotProcess(path)) return;

                                try {
                                    if (Files.isDirectory(path)) {
                                        if (kind == ENTRY_CREATE) {
                                            handleDirectoryCreation(path);
                                        }
                                        /*
                                         we don't need to handle directory deletion or modification
                                         - directory deletion will be handled by key.reset()
                                         - directory modification indicates a new file creation or deletion, which is handled by below
                                        */
                                    }
                                    Path relativePathFromRoot = watchingDir.resolve(path);
                                    if (kind == ENTRY_CREATE) {
                                        handleFileCreation(relativePathFromRoot);
                                    } else if (kind == ENTRY_DELETE) {
                                        handleFileRemoval(relativePathFromRoot);
                                    } else if (kind == ENTRY_MODIFY) {
                                        handleFileModification(relativePathFromRoot);
                                    }
                                } catch (Exception e) {
                                    log.error(""Error while processing file: {}"", path, e);
                                }
                            });

            boolean isKeyValid = key.reset();
            if (!isKeyValid) { // key is invalid when the directory itself is no longer exists
                path2KeyMapping.remove((Path) key.watchable());
            }
        }
        readyForProcessingFiles.addAll(stagingFiles);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileMonitor.java,FileMonitor,handleDirectoryCreation,void handleDirectoryCreation(Path),"[141, 144]","{'A247': [(141, 144)]}",{'A247': 1.0},A247,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileMonitorTest.java,"    private void handleDirectoryCreation(Path dir) throws IOException {
        WatchKey key = dir.register(watchService, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
        path2KeyMapping.put(dir, key);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileMonitor.java,FileMonitor,handleFileRemoval,void handleFileRemoval(Path),"[146, 149]","{'A247': [(146, 149)]}",{'A247': 1.0},A247,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileMonitorTest.java,"    private void handleFileRemoval(Path path) {
        newlyDiscoveredFiles.remove(path);
        stagingFiles.remove(path);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileMonitor.java,FileMonitor,handleFileCreation,void handleFileCreation(Path),"[151, 154]","{'A247': [(151, 154)]}",{'A247': 1.0},A247,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileMonitorTest.java,"    private void handleFileCreation(Path path) {
        newlyDiscoveredFiles.add(path);
        stagingFiles.remove(path);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileMonitor.java,FileMonitor,handleFileModification,void handleFileModification(Path),"[156, 159]","{'A247': [(156, 159)]}",{'A247': 1.0},A247,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileMonitorTest.java,"    private void handleFileModification(Path path) {
        // the logic is the same
        handleFileCreation(path);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileMonitor.java,FileMonitor,isFileReadyForProcessing,boolean isFileReadyForProcessing(Path),"[169, 202]","{'A247': [(169, 169), (202, 202)], 'A233': [(170, 201)]}","{'A247': 0.058823529411764705, 'A233': 0.9411764705882353}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileMonitorTest.java,"    public boolean isFileReadyForProcessing(Path path) {
        // 1. Check FileMonitor's ready list
        boolean isReady = readyForProcessingFiles.contains(path.toAbsolutePath());

        // 2. Check last modified timestamp
        if (!isReady) {
            try {
                long lastModified = Files.getLastModifiedTime(path).toMillis();
                long currentTime = System.currentTimeMillis();
                isReady = (currentTime - lastModified) > 5000;
            } catch (IOException e) {
                log.info(""Timestamp check failed for {}"", path, e);
            }
        }

        // 3. Direct file lock check
        if (isReady) {
            try (RandomAccessFile raf = new RandomAccessFile(path.toFile(), ""rw"");
                    FileChannel channel = raf.getChannel()) {
                // Try acquiring an exclusive lock
                FileLock lock = channel.tryLock();
                if (lock == null) {
                    isReady = false;
                } else {
                    lock.release();
                }
            } catch (IOException e) {
                log.info(""File lock detected on {}"", path);
                isReady = false;
            }
        }

        return isReady;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileToPdf.java,FileToPdf,convertHtmlToPdf,"byte[] convertHtmlToPdf(String,HTMLToPdfRequest,byte[],String,boolean,TempFileManager)","[24, 79]","{'A233': [(24, 79)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java,"    public static byte[] convertHtmlToPdf(
            String weasyprintPath,
            HTMLToPdfRequest request,
            byte[] fileBytes,
            String fileName,
            boolean disableSanitize,
            TempFileManager tempFileManager)
            throws IOException, InterruptedException {

        try (TempFile tempOutputFile = new TempFile(tempFileManager, "".pdf"")) {
            try (TempFile tempInputFile =
                    new TempFile(
                            tempFileManager,
                            fileName.toLowerCase().endsWith("".html"") ? "".html"" : "".zip"")) {

                if (fileName.toLowerCase().endsWith("".html"")) {
                    String sanitizedHtml =
                            sanitizeHtmlContent(
                                    new String(fileBytes, StandardCharsets.UTF_8), disableSanitize);
                    Files.write(
                            tempInputFile.getPath(),
                            sanitizedHtml.getBytes(StandardCharsets.UTF_8));
                } else if (fileName.toLowerCase().endsWith("".zip"")) {
                    Files.write(tempInputFile.getPath(), fileBytes);
                    sanitizeHtmlFilesInZip(
                            tempInputFile.getPath(), disableSanitize, tempFileManager);
                } else {
                    throw ExceptionUtils.createHtmlFileRequiredException();
                }

                List<String> command = new ArrayList<>();
                command.add(weasyprintPath);
                command.add(""-e"");
                command.add(""utf-8"");
                command.add(""-v"");
                command.add(""--pdf-forms"");
                command.add(tempInputFile.getAbsolutePath());
                command.add(tempOutputFile.getAbsolutePath());

                ProcessExecutorResult returnCode =
                        ProcessExecutor.getInstance(ProcessExecutor.Processes.WEASYPRINT)
                                .runCommandWithOutputHandling(command);

                byte[] pdfBytes = Files.readAllBytes(tempOutputFile.getPath());
                try {
                    return pdfBytes;
                } catch (Exception e) {
                    pdfBytes = Files.readAllBytes(tempOutputFile.getPath());
                    if (pdfBytes.length < 1) {
                        throw e;
                    }
                    return pdfBytes;
                }
            } // tempInputFile auto-closed
        } // tempOutputFile auto-closed
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileToPdf.java,FileToPdf,sanitizeHtmlContent,"String sanitizeHtmlContent(String,boolean)","[81, 83]","{'A233': [(83, 83)], 'A251': [(81, 82)]}","{'A233': 0.3333333333333333, 'A251': 0.6666666666666666}",A251,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java,"    private static String sanitizeHtmlContent(String htmlContent, boolean disableSanitize) {
        return (!disableSanitize) ? CustomHtmlSanitizer.sanitize(htmlContent) : htmlContent;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileToPdf.java,FileToPdf,sanitizeHtmlFilesInZip,"void sanitizeHtmlFilesInZip(Path,boolean,TempFileManager)","[85, 117]","{'A233': [(85, 117)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java,"    private static void sanitizeHtmlFilesInZip(
            Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager)
            throws IOException {
        try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {
            try (ZipInputStream zipIn =
                    ZipSecurity.createHardenedInputStream(
                            new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {
                ZipEntry entry = zipIn.getNextEntry();
                while (entry != null) {
                    Path filePath =
                            tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));
                    if (!entry.isDirectory()) {
                        Files.createDirectories(filePath.getParent());
                        if (entry.getName().toLowerCase().endsWith("".html"")
                                || entry.getName().toLowerCase().endsWith("".htm"")) {
                            String content =
                                    new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);
                            String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);
                            Files.write(
                                    filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));
                        } else {
                            Files.copy(zipIn, filePath);
                        }
                    }
                    zipIn.closeEntry();
                    entry = zipIn.getNextEntry();
                }
            }

            // Repack the sanitized files
            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);
        } // tempUnzippedDir auto-cleaned
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileToPdf.java,FileToPdf,zipDirectory,"void zipDirectory(Path,Path)","[119, 137]","{'A233': [(119, 137)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java,"    private static void zipDirectory(Path sourceDir, Path zipFilePath) throws IOException {
        try (ZipOutputStream zos =
                new ZipOutputStream(new FileOutputStream(zipFilePath.toFile()))) {
            Files.walk(sourceDir)
                    .filter(path -> !Files.isDirectory(path))
                    .forEach(
                            path -> {
                                ZipEntry zipEntry =
                                        new ZipEntry(sourceDir.relativize(path).toString());
                                try {
                                    zos.putNextEntry(zipEntry);
                                    Files.copy(path, zos);
                                    zos.closeEntry();
                                } catch (IOException e) {
                                    throw new UncheckedIOException(e);
                                }
                            });
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileToPdf.java,FileToPdf,deleteDirectory,void deleteDirectory(Path),"[139, 157]","{'A233': [(139, 157)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java,"    private static void deleteDirectory(Path dir) throws IOException {
        Files.walkFileTree(
                dir,
                new SimpleFileVisitor<Path>() {
                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                            throws IOException {
                        Files.delete(file);
                        return FileVisitResult.CONTINUE;
                    }

                    @Override
                    public FileVisitResult postVisitDirectory(Path dir, IOException exc)
                            throws IOException {
                        Files.delete(dir);
                        return FileVisitResult.CONTINUE;
                    }
                });
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileToPdf.java,FileToPdf,visitFile,"FileVisitResult visitFile(Path,BasicFileAttributes)","[143, 148]","{'A233': [(143, 148)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java,"                    @Override
                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                            throws IOException {
                        Files.delete(file);
                        return FileVisitResult.CONTINUE;
                    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileToPdf.java,FileToPdf,postVisitDirectory,"FileVisitResult postVisitDirectory(Path,IOException)","[150, 155]","{'A233': [(150, 155)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java,"                    @Override
                    public FileVisitResult postVisitDirectory(Path dir, IOException exc)
                            throws IOException {
                        Files.delete(dir);
                        return FileVisitResult.CONTINUE;
                    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileToPdf.java,FileToPdf,unzipAndGetMainHtml,Path unzipAndGetMainHtml(byte[]),"[159, 195]","{'A233': [(159, 164), (166, 177), (179, 187), (189, 195)], 'A234': [(178, 178)], 'A243': [(165, 165), (188, 188)]}","{'A233': 0.918918918918919, 'A234': 0.02702702702702703, 'A243': 0.05405405405405406}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java,"    private static Path unzipAndGetMainHtml(byte[] fileBytes) throws IOException {
        Path tempDirectory = Files.createTempDirectory(""unzipped_"");
        try (ZipInputStream zipIn =
                ZipSecurity.createHardenedInputStream(new ByteArrayInputStream(fileBytes))) {
            ZipEntry entry = zipIn.getNextEntry();
            while (entry != null) {
                Path filePath = tempDirectory.resolve(sanitizeZipFilename(entry.getName()));
                if (entry.isDirectory()) {
                    Files.createDirectories(filePath); // Explicitly create the directory structure
                } else {
                    Files.createDirectories(
                            filePath.getParent()); // Create parent directories if they don't exist
                    Files.copy(zipIn, filePath);
                }
                zipIn.closeEntry();
                entry = zipIn.getNextEntry();
            }
        }

        // Search for the main HTML file.
        try (Stream<Path> walk = Files.walk(tempDirectory)) {
            List<Path> htmlFiles = walk.filter(file -> file.toString().endsWith("".html"")).toList();

            if (htmlFiles.isEmpty()) {
                throw new IOException(""No HTML files found in the unzipped directory."");
            }

            // Prioritize 'index.html' if it exists, otherwise use the first .html file
            for (Path htmlFile : htmlFiles) {
                if (""index.html"".equals(htmlFile.getFileName().toString())) {
                    return htmlFile;
                }
            }

            return htmlFiles.get(0);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/FileToPdf.java,FileToPdf,sanitizeZipFilename,String sanitizeZipFilename(String),"[197, 212]","{'A234': [(199, 199), (201, 205), (209, 210)], 'A243': [(197, 198), (200, 200), (206, 208), (211, 212)]}","{'A234': 0.5, 'A243': 0.5}",A234,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java,"    static String sanitizeZipFilename(String entryName) {
        if (entryName == null || entryName.trim().isEmpty()) {
            return """";
        }
        // Remove any drive letters (e.g., ""C:\"") and leading forward/backslashes
        entryName = entryName.replaceAll(""^[a-zA-Z]:[\\\\/]+"", """");
        entryName = entryName.replaceAll(""^[\\\\/]+"", """");

        // Recursively remove path traversal sequences
        while (entryName.contains(""../"") || entryName.contains(""..\\"")) {
            entryName = entryName.replace(""../"", """").replace(""..\\"", """");
        }
        // Normalize all backslashes to forward slashes
        entryName = entryName.replaceAll(""\\\\"", ""/"");
        return entryName;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempDirectory.java,TempDirectory,getPath,Path getPath(),"[23, 25]","{'A233': [(23, 25)]}",{'A233': 1.0},A233,,"    public Path getPath() {
        return directory;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempDirectory.java,TempDirectory,getAbsolutePath,String getAbsolutePath(),"[27, 29]","{'A233': [(27, 29)]}",{'A233': 1.0},A233,,"    public String getAbsolutePath() {
        return directory.toAbsolutePath().toString();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempDirectory.java,TempDirectory,exists,boolean exists(),"[31, 33]","{'A233': [(31, 33)]}",{'A233': 1.0},A233,,"    public boolean exists() {
        return java.nio.file.Files.exists(directory);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempDirectory.java,TempDirectory,close,void close(),"[35, 38]","{'A233': [(35, 38)]}",{'A233': 1.0},A233,,"    @Override
    public void close() {
        manager.deleteTempDirectory(directory);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/TempDirectory.java,TempDirectory,toString,String toString(),"[40, 43]","{'A233': [(40, 43)]}",{'A233': 1.0},A233,,"    @Override
    public String toString() {
        return ""TempDirectory{"" + directory.toAbsolutePath() + ""}"";
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ValidationUtil.java,ValidationUtil,isStringEmpty,boolean isStringEmpty(String),"[7, 9]","{'A236': [(7, 9)]}",{'A236': 1.0},A236,,"    public static boolean isStringEmpty(String input) {
        return input == null || input.isBlank();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ValidationUtil.java,ValidationUtil,isCollectionEmpty,boolean isCollectionEmpty(Collection<String>),"[11, 13]","{'A236': [(11, 13)]}",{'A236': 1.0},A236,,"    public static boolean isCollectionEmpty(Collection<String> input) {
        return input == null || input.isEmpty();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,updateValuesFromYaml,"boolean updateValuesFromYaml(YamlHelper,YamlHelper)","[77, 95]","{'A234': [(77, 95)]}",{'A234': 1.0},A234,,"    public boolean updateValuesFromYaml(YamlHelper sourceYaml, YamlHelper targetYaml) {
        boolean updated = false;
        Set<String> sourceKeys = sourceYaml.getAllKeys();
        Set<String> targetKeys = targetYaml.getAllKeys();

        for (String key : sourceKeys) {
            String[] keyArray = key.split(""\\."");

            Object newValue = sourceYaml.getValueByExactKeyPath(keyArray);
            Object currentValue = targetYaml.getValueByExactKeyPath(keyArray);
            if (newValue != null
                    && (!newValue.equals(currentValue) || !sourceKeys.equals(targetKeys))) {
                boolean updatedKey = targetYaml.updateValue(Arrays.asList(keyArray), newValue);
                if (updatedKey) updated = true;
            }
        }

        return updated;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,updateValue,"boolean updateValue(List<String>,Object)","[104, 106]","{'A234': [(104, 106)]}",{'A234': 1.0},A234,,"    public boolean updateValue(List<String> keys, Object newValue) {
        return updateValue(getRootNode(), keys, newValue);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,updateValue,"boolean updateValue(Node,List<String>,Object)","[108, 185]","{'A234': [(108, 185)]}",{'A234': 1.0},A234,,"    private boolean updateValue(Node node, List<String> keys, Object newValue) {
        if (!(node instanceof MappingNode mappingNode)) return false;

        List<NodeTuple> updatedTuples = new ArrayList<>();
        boolean updated = false;

        for (NodeTuple tuple : mappingNode.getValue()) {
            ScalarNode keyNode = (tuple.getKeyNode() instanceof ScalarNode sk) ? sk : null;
            if (keyNode == null || !keyNode.getValue().equals(keys.get(0))) {
                updatedTuples.add(tuple);
                continue;
            }

            Node valueNode = tuple.getValueNode();

            if (keys.size() == 1) {
                Tag tag = valueNode.getTag();
                Node newValueNode = null;

                if (isAnyInteger(newValue)) {
                    newValueNode =
                            new ScalarNode(Tag.INT, String.valueOf(newValue), ScalarStyle.PLAIN);
                } else if (isFloat(newValue)) {
                    Object floatValue = Float.valueOf(String.valueOf(newValue));
                    newValueNode =
                            new ScalarNode(
                                    Tag.FLOAT, String.valueOf(floatValue), ScalarStyle.PLAIN);
                } else if (""true"".equals(newValue) || ""false"".equals(newValue)) {
                    newValueNode =
                            new ScalarNode(Tag.BOOL, String.valueOf(newValue), ScalarStyle.PLAIN);
                } else if (newValue instanceof List<?> list) {
                    List<Node> sequenceNodes = new ArrayList<>();
                    for (Object item : list) {
                        Object obj = String.valueOf(item);
                        if (isAnyInteger(item)) {
                            tag = Tag.INT;
                        } else if (isFloat(item)) {
                            obj = Float.valueOf(String.valueOf(item));
                            tag = Tag.FLOAT;
                        } else if (""true"".equals(item) || ""false"".equals(item)) {
                            tag = Tag.BOOL;
                        } else if (item == null || ""null"".equals(item)) {
                            tag = Tag.NULL;
                        } else {
                            tag = Tag.STR;
                        }
                        sequenceNodes.add(
                                new ScalarNode(tag, String.valueOf(obj), ScalarStyle.PLAIN));
                    }
                    newValueNode = new SequenceNode(Tag.SEQ, sequenceNodes, FlowStyle.FLOW);
                } else if (tag == Tag.NULL) {
                    if (""true"".equals(newValue)
                            || ""false"".equals(newValue)
                            || newValue instanceof Boolean) {
                        tag = Tag.BOOL;
                    }
                    newValueNode = new ScalarNode(tag, String.valueOf(newValue), ScalarStyle.PLAIN);
                } else {
                    newValueNode = new ScalarNode(tag, String.valueOf(newValue), ScalarStyle.PLAIN);
                }
                copyComments(valueNode, newValueNode);

                updatedTuples.add(new NodeTuple(keyNode, newValueNode));
                updated = true;
            } else if (valueNode instanceof MappingNode) {
                updated = updateValue(valueNode, keys.subList(1, keys.size()), newValue);
                updatedTuples.add(tuple);
            }
        }

        if (updated) {
            mappingNode.getValue().clear();
            mappingNode.getValue().addAll(updatedTuples);
        }
        setNewNode(node);

        return updated;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,getValueByExactKeyPath,Object getValueByExactKeyPath(),"[193, 195]","{'A234': [(193, 195)]}",{'A234': 1.0},A234,,"    public Object getValueByExactKeyPath(String... keys) {
        return getValueByExactKeyPath(getRootNode(), new ArrayDeque<>(List.of(keys)));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,getValueByExactKeyPath,"Object getValueByExactKeyPath(Node,Deque<String>)","[197, 229]","{'A234': [(197, 229)]}",{'A234': 1.0},A234,,"    private Object getValueByExactKeyPath(Node node, Deque<String> keyQueue) {
        if (!(node instanceof MappingNode mappingNode)) return null;

        String currentKey = keyQueue.poll();
        if (currentKey == null) return null;

        for (NodeTuple tuple : mappingNode.getValue()) {
            if (tuple.getKeyNode() instanceof ScalarNode keyNode
                    && keyNode.getValue().equals(currentKey)) {
                if (keyQueue.isEmpty()) {
                    Node valueNode = tuple.getValueNode();

                    if (valueNode instanceof ScalarNode scalarValueNode) {
                        return scalarValueNode.getValue();
                    } else if (valueNode instanceof MappingNode subMapping) {
                        return getValueByExactKeyPath(subMapping, keyQueue);
                    } else if (valueNode instanceof SequenceNode sequenceNode) {
                        List<Object> valuesList = new ArrayList<>();
                        for (Node o : sequenceNode.getValue()) {
                            if (o instanceof ScalarNode scalarValue) {
                                valuesList.add(scalarValue.getValue());
                            }
                        }
                        return valuesList;
                    } else {
                        return null;
                    }
                }
                return getValueByExactKeyPath(tuple.getValueNode(), keyQueue);
            }
        }
        return null;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,getAllKeys,Set<String> getAllKeys(),"[239, 244]","{'A234': [(239, 244)]}",{'A234': 1.0},A234,,"    public Set<String> getAllKeys() {
        if (cachedKeys == null) {
            cachedKeys = getAllKeys(getRootNode());
        }
        return cachedKeys;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,getAllKeys,Set<String> getAllKeys(Node),"[253, 257]","{'A234': [(253, 257)]}",{'A234': 1.0},A234,,"    private Set<String> getAllKeys(Node node) {
        Set<String> allKeys = new LinkedHashSet<>();
        collectKeys(node, """", allKeys);
        return allKeys;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,collectKeys,"void collectKeys(Node,String,Set<String>)","[266, 279]","{'A234': [(266, 279)]}",{'A234': 1.0},A234,,"    private void collectKeys(Node node, String currentPath, Set<String> allKeys) {
        if (node instanceof MappingNode mappingNode) {
            for (NodeTuple tuple : mappingNode.getValue()) {
                if (tuple.getKeyNode() instanceof ScalarNode keyNode) {
                    String newPath =
                            currentPath.isEmpty()
                                    ? keyNode.getValue()
                                    : currentPath + ""."" + keyNode.getValue();
                    allKeys.add(newPath);
                    collectKeys(tuple.getValueNode(), newPath, allKeys);
                }
            }
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,getRootNode,Node getRootNode(),"[287, 297]","{'A234': [(287, 297)]}",{'A234': 1.0},A234,,"    private Node getRootNode() {
        if (this.updatedRootNode != null) {
            return this.updatedRootNode;
        }
        Composer composer = new Composer(loadSettings, getParserImpl());
        Optional<Node> rootNodeOpt = composer.getSingleNode();
        if (rootNodeOpt.isPresent()) {
            return rootNodeOpt.get();
        }
        return null;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,setNewNode,void setNewNode(Node),"[304, 306]","{'A234': [(304, 306)]}",{'A234': 1.0},A234,,"    public void setNewNode(Node newRootNode) {
        this.updatedRootNode = newRootNode;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,getUpdatedRootNode,Node getUpdatedRootNode(),"[313, 318]","{'A234': [(313, 318)]}",{'A234': 1.0},A234,,"    public Node getUpdatedRootNode() {
        if (this.updatedRootNode == null) {
            this.updatedRootNode = getRootNode();
        }
        return this.updatedRootNode;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,getParserImpl,ParserImpl getParserImpl(),"[325, 327]","{'A234': [(325, 327)]}",{'A234': 1.0},A234,,"    private ParserImpl getParserImpl() {
        return new ParserImpl(loadSettings, getStreamReader());
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,getStreamReader,StreamReader getStreamReader(),"[334, 336]","{'A234': [(334, 336)]}",{'A234': 1.0},A234,,"    private StreamReader getStreamReader() {
        return new StreamReader(loadSettings, yamlContent);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,save,MappingNode save(Path),"[338, 343]","{'A234': [(338, 343)]}",{'A234': 1.0},A234,,"    public MappingNode save(Path saveFilePath) throws IOException {
        if (!saveFilePath.equals(originalFilePath)) {
            Files.writeString(saveFilePath, convertNodeToYaml(getUpdatedRootNode()));
        }
        return (MappingNode) getUpdatedRootNode();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,saveOverride,void saveOverride(Path),"[345, 347]","{'A234': [(345, 347)]}",{'A234': 1.0},A234,,"    public void saveOverride(Path saveFilePath) throws IOException {
        Files.writeString(saveFilePath, convertNodeToYaml(getUpdatedRootNode()));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,convertNodeToYaml,String convertNodeToYaml(Node),"[355, 372]","{'A234': [(355, 372)]}",{'A234': 1.0},A234,,"    public String convertNodeToYaml(Node rootNode) {
        StringWriter writer = new StringWriter();
        StreamDataWriter streamDataWriter =
                new StreamDataWriter() {
                    @Override
                    public void write(String str) {
                        writer.write(str);
                    }

                    @Override
                    public void write(String str, int off, int len) {
                        writer.write(str, off, len);
                    }
                };

        new Dump(DUMP_SETTINGS).dumpNode(rootNode, streamDataWriter);
        return writer.toString();
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,write,void write(String),"[359, 362]","{'A234': [(359, 362)]}",{'A234': 1.0},A234,,"                    @Override
                    public void write(String str) {
                        writer.write(str);
                    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,write,"void write(String,int,int)","[364, 367]","{'A234': [(364, 367)]}",{'A234': 1.0},A234,,"                    @Override
                    public void write(String str, int off, int len) {
                        writer.write(str, off, len);
                    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,isParsable,"boolean isParsable(String,Function<String, ?>)","[374, 381]","{'A234': [(374, 381)]}",{'A234': 1.0},A234,,"    private static boolean isParsable(String value, Function<String, ?> parser) {
        try {
            parser.apply(value);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,isInteger,boolean isInteger(Object),"[389, 401]","{'A234': [(389, 401)]}",{'A234': 1.0},A234,,"    @SuppressWarnings(""UnnecessaryTemporaryOnConversionFromString"")
    public static boolean isInteger(Object object) {
        if (object instanceof Integer
                || object instanceof Short
                || object instanceof Byte
                || object instanceof Long) {
            return true;
        }
        if (object instanceof String str) {
            return isParsable(str, Integer::parseInt);
        }
        return false;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,isFloat,boolean isFloat(Object),"[409, 413]","{'A234': [(409, 413)]}",{'A234': 1.0},A234,,"    @SuppressWarnings(""UnnecessaryTemporaryOnConversionFromString"")
    public static boolean isFloat(Object object) {
        return (object instanceof Float || object instanceof Double)
                || (object instanceof String str && isParsable(str, Float::parseFloat));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,isShort,boolean isShort(Object),"[421, 425]","{'A234': [(421, 425)]}",{'A234': 1.0},A234,,"    @SuppressWarnings(""UnnecessaryTemporaryOnConversionFromString"")
    public static boolean isShort(Object object) {
        return (object instanceof Long)
                || (object instanceof String str && isParsable(str, Short::parseShort));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,isByte,boolean isByte(Object),"[433, 437]","{'A234': [(433, 437)]}",{'A234': 1.0},A234,,"    @SuppressWarnings(""UnnecessaryTemporaryOnConversionFromString"")
    public static boolean isByte(Object object) {
        return (object instanceof Long)
                || (object instanceof String str && isParsable(str, Byte::parseByte));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,isLong,boolean isLong(Object),"[445, 449]","{'A234': [(445, 449)]}",{'A234': 1.0},A234,,"    @SuppressWarnings(""UnnecessaryTemporaryOnConversionFromString"")
    public static boolean isLong(Object object) {
        return (object instanceof Long)
                || (object instanceof String str && isParsable(str, Long::parseLong));
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,isAnyInteger,boolean isAnyInteger(Object),"[457, 459]","{'A234': [(457, 459)]}",{'A234': 1.0},A234,,"    public static boolean isAnyInteger(Object object) {
        return isInteger(object) || isShort(object) || isByte(object) || isLong(object);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/YamlHelper.java,YamlHelper,copyComments,"void copyComments(Node,Node)","[467, 478]","{'A234': [(467, 478)]}",{'A234': 1.0},A234,,"    private void copyComments(Node oldNode, Node newValueNode) {
        if (oldNode == null || newValueNode == null) return;
        if (oldNode.getBlockComments() != null) {
            newValueNode.setBlockComments(oldNode.getBlockComments());
        }
        if (oldNode.getInLineComments() != null) {
            newValueNode.setInLineComments(oldNode.getInLineComments());
        }
        if (oldNode.getEndComments() != null) {
            newValueNode.setEndComments(oldNode.getEndComments());
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ImageProcessingUtils.java,ImageProcessingUtils,convertColorType,"BufferedImage convertColorType(BufferedImage,String)","[24, 48]","{'A233': [(24, 48)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ImageProcessingUtilsTest.java,"    static BufferedImage convertColorType(BufferedImage sourceImage, String colorType) {
        BufferedImage convertedImage;
        switch (colorType) {
            case ""greyscale"":
                convertedImage =
                        new BufferedImage(
                                sourceImage.getWidth(),
                                sourceImage.getHeight(),
                                BufferedImage.TYPE_BYTE_GRAY);
                convertedImage.getGraphics().drawImage(sourceImage, 0, 0, null);
                break;
            case ""blackwhite"":
                convertedImage =
                        new BufferedImage(
                                sourceImage.getWidth(),
                                sourceImage.getHeight(),
                                BufferedImage.TYPE_BYTE_BINARY);
                convertedImage.getGraphics().drawImage(sourceImage, 0, 0, null);
                break;
            default: // full color
                convertedImage = sourceImage;
                break;
        }
        return convertedImage;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ImageProcessingUtils.java,ImageProcessingUtils,getImageData,byte[] getImageData(BufferedImage),"[50, 74]","{'A233': [(50, 51), (56, 74)], 'A234': [(52, 55)]}","{'A233': 0.84, 'A234': 0.16}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ImageProcessingUtilsTest.java,"    public static byte[] getImageData(BufferedImage image) {
        DataBuffer dataBuffer = image.getRaster().getDataBuffer();
        if (dataBuffer instanceof DataBufferByte dataBufferByte) {
            return dataBufferByte.getData();
        } else if (dataBuffer instanceof DataBufferInt dataBufferInt) {
            int[] intData = dataBufferInt.getData();
            ByteBuffer byteBuffer = ByteBuffer.allocate(intData.length * 4);
            byteBuffer.asIntBuffer().put(intData);
            return byteBuffer.array();
        } else {
            int width = image.getWidth();
            int height = image.getHeight();
            byte[] data = new byte[width * height * 3];
            int index = 0;
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    int rgb = image.getRGB(x, y);
                    data[index++] = (byte) ((rgb >> 16) & 0xFF); // Red
                    data[index++] = (byte) ((rgb >> 8) & 0xFF); // Green
                    data[index++] = (byte) (rgb & 0xFF); // Blue
                }
            }
            return data;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ImageProcessingUtils.java,ImageProcessingUtils,extractImageOrientation,double extractImageOrientation(InputStream),"[76, 101]","{'A233': [(79, 80)], 'A242': [(76, 78), (81, 94), (96, 101)], 'A238': [(95, 95)]}","{'A233': 0.07692307692307693, 'A242': 0.8846153846153846, 'A238': 0.038461538461538464}",A242,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ImageProcessingUtilsTest.java,"    public static double extractImageOrientation(InputStream is) throws IOException {
        try {
            Metadata metadata = ImageMetadataReader.readMetadata(is);
            ExifSubIFDDirectory directory =
                    metadata.getFirstDirectoryOfType(ExifSubIFDDirectory.class);
            if (directory == null) {
                return 0;
            }
            int orientationTag = directory.getInt(ExifSubIFDDirectory.TAG_ORIENTATION);
            switch (orientationTag) {
                case 1:
                    return 0;
                case 6:
                    return 90;
                case 3:
                    return 180;
                case 8:
                    return 270;
                default:
                    log.warn(""Unknown orientation tag: {}"", orientationTag);
                    return 0;
            }
        } catch (ImageProcessingException | MetadataException e) {
            return 0;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ImageProcessingUtils.java,ImageProcessingUtils,applyOrientation,"BufferedImage applyOrientation(BufferedImage,double)","[103, 114]","{'A233': [(107, 111)], 'A242': [(103, 106), (112, 114)]}","{'A233': 0.4166666666666667, 'A242': 0.5833333333333334}",A242,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ImageProcessingUtilsTest.java,"    public static BufferedImage applyOrientation(BufferedImage image, double orientation) {
        if (orientation == 0) {
            return image;
        }
        AffineTransform transform =
                AffineTransform.getRotateInstance(
                        Math.toRadians(orientation),
                        image.getWidth() / 2.0,
                        image.getHeight() / 2.0);
        AffineTransformOp op = new AffineTransformOp(transform, AffineTransformOp.TYPE_BILINEAR);
        return op.filter(image, null);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/ImageProcessingUtils.java,ImageProcessingUtils,loadImageWithExifOrientation,BufferedImage loadImageWithExifOrientation(MultipartFile),"[116, 121]","{'A242': [(116, 121)]}",{'A242': 1.0},A242,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/ImageProcessingUtilsTest.java,"    public static BufferedImage loadImageWithExifOrientation(MultipartFile file)
            throws IOException {
        BufferedImage image = ImageIO.read(file.getInputStream());
        double orientation = extractImageOrientation(file.getInputStream());
        return applyOrientation(image, orientation);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/CustomHtmlSanitizer.java,CustomHtmlSanitizer,sanitize,String sanitize(String),"[17, 20]","{'A233': [(17, 20)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/CustomHtmlSanitizerTest.java,"    public static String sanitize(String html) {
        String htmlAfter = POLICY.sanitize(html);
        return htmlAfter;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/AttachmentUtils.java,AttachmentUtils,setCatalogViewerPreferences,"void setCatalogViewerPreferences(PDDocument,PageMode)","[22, 49]","{'A236': [(22, 49)]}",{'A236': 1.0},A236,,"    public static void setCatalogViewerPreferences(PDDocument document, PageMode pageMode) {
        try {
            PDDocumentCatalog catalog = document.getDocumentCatalog();
            if (catalog != null) {
                COSDictionary catalogDict = catalog.getCOSObject();

                catalog.setPageMode(pageMode);
                catalogDict.setName(COSName.PAGE_MODE, pageMode.stringValue());

                COSDictionary viewerPrefs =
                        (COSDictionary) catalogDict.getDictionaryObject(COSName.VIEWER_PREFERENCES);
                if (viewerPrefs == null) {
                    viewerPrefs = new COSDictionary();
                    catalogDict.setItem(COSName.VIEWER_PREFERENCES, viewerPrefs);
                }

                viewerPrefs.setName(
                        COSName.getPDFName(""NonFullScreenPageMode""), pageMode.stringValue());

                viewerPrefs.setBoolean(COSName.getPDFName(""DisplayDocTitle""), true);

                log.info(
                        ""Set PDF PageMode to UseAttachments to automatically show attachments pane"");
            }
        } catch (Exception e) {
            log.error(""Failed to set catalog viewer preferences for attachments"", e);
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/SpringContextHolder.java,SpringContextHolder,setApplicationContext,void setApplicationContext(ApplicationContext),"[20, 24]","{'A233': [(20, 24)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/SpringContextHolderTest.java,"    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        SpringContextHolder.applicationContext = applicationContext;
        log.debug(""Spring context holder initialized"");
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/SpringContextHolder.java,SpringContextHolder,getBean,T getBean(Class<T>),"[33, 47]","{'A233': [(33, 47)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/SpringContextHolderTest.java,"    public static <T> T getBean(Class<T> beanClass) {
        if (applicationContext == null) {
            log.warn(
                    ""Application context not initialized when attempting to get bean of type {}"",
                    beanClass.getName());
            return null;
        }

        try {
            return applicationContext.getBean(beanClass);
        } catch (BeansException e) {
            log.error(""Error getting bean of type {}: {}"", beanClass.getName(), e.getMessage());
            return null;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/SpringContextHolder.java,SpringContextHolder,getBean,T getBean(String),"[56, 72]","{'A233': [(56, 72)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/SpringContextHolderTest.java,"    public static <T> T getBean(String beanName) {
        if (applicationContext == null) {
            log.warn(
                    ""Application context not initialized when attempting to get bean '{}'"",
                    beanName);
            return null;
        }

        try {
            @SuppressWarnings(""unchecked"")
            T bean = (T) applicationContext.getBean(beanName);
            return bean;
        } catch (BeansException e) {
            log.error(""Error getting bean '{}': {}"", beanName, e.getMessage());
            return null;
        }
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/SpringContextHolder.java,SpringContextHolder,isInitialized,boolean isInitialized(),"[79, 81]","{'A233': [(79, 81)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/SpringContextHolderTest.java,"    public static boolean isInitialized() {
        return applicationContext != null;
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PDFToFile.java,PDFToFile,processPdfToMarkdown,ResponseEntity<byte[]> processPdfToMarkdown(MultipartFile),"[37, 152]","{'A233': [(37, 152)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PDFToFileTest.java,"    public ResponseEntity<byte[]> processPdfToMarkdown(MultipartFile inputFile)
            throws IOException, InterruptedException {
        if (!""application/pdf"".equals(inputFile.getContentType())) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        MutableDataSet options =
                new MutableDataSet()
                        .set(
                                FlexmarkHtmlConverter.MAX_BLANK_LINES,
                                2) // Control max consecutive blank lines
                        .set(
                                FlexmarkHtmlConverter.MAX_TRAILING_BLANK_LINES,
                                1) // Control trailing blank lines
                        .set(
                                FlexmarkHtmlConverter.SETEXT_HEADINGS,
                                true) // Use Setext headings for h1 and h2
                        .set(
                                FlexmarkHtmlConverter.OUTPUT_UNKNOWN_TAGS,
                                false) // Don't output HTML for unknown tags
                        .set(
                                FlexmarkHtmlConverter.TYPOGRAPHIC_QUOTES,
                                true) // Convert quotation marks
                        .set(
                                FlexmarkHtmlConverter.BR_AS_PARA_BREAKS,
                                true) // Convert <br> to paragraph breaks
                        .set(FlexmarkHtmlConverter.CODE_INDENT, ""    ""); // Indent for code blocks

        FlexmarkHtmlConverter htmlToMarkdownConverter =
                FlexmarkHtmlConverter.builder(options).build();

        String originalPdfFileName = Filenames.toSimpleFileName(inputFile.getOriginalFilename());
        String pdfBaseName = originalPdfFileName;
        if (originalPdfFileName.contains(""."")) {
            pdfBaseName = originalPdfFileName.substring(0, originalPdfFileName.lastIndexOf('.'));
        }

        Path tempInputFile = null;
        Path tempOutputDir = null;
        byte[] fileBytes;
        String fileName = ""temp.file"";

        try {
            tempInputFile = Files.createTempFile(""input_"", "".pdf"");
            inputFile.transferTo(tempInputFile);
            tempOutputDir = Files.createTempDirectory(""output_"");

            List<String> command =
                    new ArrayList<>(
                            Arrays.asList(
                                    ""pdftohtml"",
                                    ""-s"",
                                    ""-noframes"",
                                    ""-c"",
                                    tempInputFile.toString(),
                                    pdfBaseName));

            ProcessExecutorResult returnCode =
                    ProcessExecutor.getInstance(ProcessExecutor.Processes.PDFTOHTML)
                            .runCommandWithOutputHandling(command, tempOutputDir.toFile());
            // Process HTML files to Markdown
            File[] outputFiles = Objects.requireNonNull(tempOutputDir.toFile().listFiles());
            List<File> markdownFiles = new ArrayList<>();

            // Convert HTML files to Markdown
            for (File outputFile : outputFiles) {
                if (outputFile.getName().endsWith("".html"")) {
                    String html = Files.readString(outputFile.toPath());
                    String markdown = htmlToMarkdownConverter.convert(html);

                    String mdFileName = outputFile.getName().replace("".html"", "".md"");
                    File mdFile = new File(tempOutputDir.toFile(), mdFileName);
                    Files.writeString(mdFile.toPath(), markdown);
                    markdownFiles.add(mdFile);
                }
            }

            // If there's only one markdown file, return it directly
            if (markdownFiles.size() == 1) {
                fileName = pdfBaseName + "".md"";
                fileBytes = Files.readAllBytes(markdownFiles.get(0).toPath());
            } else {
                // Multiple files - create a zip
                fileName = pdfBaseName + ""ToMarkdown.zip"";
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

                try (ZipOutputStream zipOutputStream = new ZipOutputStream(byteArrayOutputStream)) {
                    // Add markdown files
                    for (File mdFile : markdownFiles) {
                        ZipEntry mdEntry = new ZipEntry(mdFile.getName());
                        zipOutputStream.putNextEntry(mdEntry);
                        Files.copy(mdFile.toPath(), zipOutputStream);
                        zipOutputStream.closeEntry();
                    }

                    // Add images and other assets
                    for (File file : outputFiles) {
                        if (!file.getName().endsWith("".html"") && !file.getName().endsWith("".md"")) {
                            ZipEntry assetEntry = new ZipEntry(file.getName());
                            zipOutputStream.putNextEntry(assetEntry);
                            Files.copy(file.toPath(), zipOutputStream);
                            zipOutputStream.closeEntry();
                        }
                    }
                }

                fileBytes = byteArrayOutputStream.toByteArray();
            }

        } finally {
            if (tempInputFile != null) Files.deleteIfExists(tempInputFile);
            if (tempOutputDir != null) FileUtils.deleteDirectory(tempOutputDir.toFile());
        }
        return WebResponseUtils.bytesToWebResponse(
                fileBytes, fileName, MediaType.APPLICATION_OCTET_STREAM);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PDFToFile.java,PDFToFile,processPdfToHtml,ResponseEntity<byte[]> processPdfToHtml(MultipartFile),"[154, 220]","{'A233': [(162, 165), (175, 175), (191, 191), (196, 202), (204, 207), (214, 214)], 'A238': [(203, 203), (208, 208)], 'A242': [(154, 161), (166, 174), (176, 190), (192, 195), (209, 213), (215, 220)]}","{'A233': 0.26865671641791045, 'A238': 0.029850746268656716, 'A242': 0.7014925373134329}",A242,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PDFToFileTest.java,"    public ResponseEntity<byte[]> processPdfToHtml(MultipartFile inputFile)
            throws IOException, InterruptedException {
        if (!""application/pdf"".equals(inputFile.getContentType())) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        // Get the original PDF file name without the extension
        String originalPdfFileName = Filenames.toSimpleFileName(inputFile.getOriginalFilename());
        String pdfBaseName = originalPdfFileName;
        if (originalPdfFileName.contains(""."")) {
            pdfBaseName = originalPdfFileName.substring(0, originalPdfFileName.lastIndexOf('.'));
        }

        Path tempInputFile = null;
        Path tempOutputDir = null;
        byte[] fileBytes;
        String fileName = ""temp.file"";

        try {
            // Save the uploaded file to a temporary location
            tempInputFile = Files.createTempFile(""input_"", "".pdf"");
            inputFile.transferTo(tempInputFile);

            // Prepare the output directory
            tempOutputDir = Files.createTempDirectory(""output_"");

            // Run the pdftohtml command with complex output
            List<String> command =
                    new ArrayList<>(
                            Arrays.asList(
                                    ""pdftohtml"", ""-c"", tempInputFile.toString(), pdfBaseName));

            ProcessExecutorResult returnCode =
                    ProcessExecutor.getInstance(ProcessExecutor.Processes.PDFTOHTML)
                            .runCommandWithOutputHandling(command, tempOutputDir.toFile());

            // Get output files
            File[] outputFiles = Objects.requireNonNull(tempOutputDir.toFile().listFiles());

            // Return output files in a ZIP archive
            fileName = pdfBaseName + ""ToHtml.zip"";
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            try (ZipOutputStream zipOutputStream = new ZipOutputStream(byteArrayOutputStream)) {
                for (File outputFile : outputFiles) {
                    ZipEntry entry = new ZipEntry(outputFile.getName());
                    zipOutputStream.putNextEntry(entry);
                    try (FileInputStream fis = new FileInputStream(outputFile)) {
                        IOUtils.copy(fis, zipOutputStream);
                    } catch (IOException e) {
                        log.error(""Exception writing zip entry"", e);
                    }
                    zipOutputStream.closeEntry();
                }
            } catch (IOException e) {
                log.error(""Exception writing zip"", e);
            }
            fileBytes = byteArrayOutputStream.toByteArray();

        } finally {
            // Clean up the temporary files
            if (tempInputFile != null) Files.deleteIfExists(tempInputFile);
            if (tempOutputDir != null) FileUtils.deleteDirectory(tempOutputDir.toFile());
        }

        return WebResponseUtils.bytesToWebResponse(
                fileBytes, fileName, MediaType.APPLICATION_OCTET_STREAM);
    }
"
stirling.software.common.util,../projects/Stirling-PDF/app/common/src/main/java/stirling/software/common/util/PDFToFile.java,PDFToFile,processPdfToOfficeFormat,"ResponseEntity<byte[]> processPdfToOfficeFormat(MultipartFile,String,String)","[222, 319]","{'A233': [(222, 230), (232, 242), (244, 265), (268, 283), (285, 299), (301, 305), (307, 319)], 'A238': [(300, 300), (306, 306)], 'A242': [(243, 243)], 'A243': [(231, 231), (284, 284)], 'A260': [(266, 267)]}","{'A233': 0.9285714285714286, 'A238': 0.02040816326530612, 'A242': 0.01020408163265306, 'A243': 0.02040816326530612, 'A260': 0.02040816326530612}",A233,../projects/Stirling-PDF/app/common/src/test/java/stirling/software/common/util/PDFToFileTest.java,"    public ResponseEntity<byte[]> processPdfToOfficeFormat(
            MultipartFile inputFile, String outputFormat, String libreOfficeFilter)
            throws IOException, InterruptedException {

        if (!""application/pdf"".equals(inputFile.getContentType())) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        // Get the original PDF file name without the extension
        String originalPdfFileName = Filenames.toSimpleFileName(inputFile.getOriginalFilename());

        if (originalPdfFileName == null || """".equals(originalPdfFileName.trim())) {
            originalPdfFileName = ""output.pdf"";
        }
        // Assume file is pdf if no extension
        String pdfBaseName = originalPdfFileName;
        if (originalPdfFileName.contains(""."")) {
            pdfBaseName = originalPdfFileName.substring(0, originalPdfFileName.lastIndexOf('.'));
        }
        // Validate output format
        List<String> allowedFormats =
                Arrays.asList(""doc"", ""docx"", ""odt"", ""ppt"", ""pptx"", ""odp"", ""rtf"", ""xml"", ""txt:Text"");
        if (!allowedFormats.contains(outputFormat)) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        Path tempInputFile = null;
        Path tempOutputDir = null;
        byte[] fileBytes;
        String fileName = ""temp.file"";

        try {
            // Save the uploaded file to a temporary location
            tempInputFile = Files.createTempFile(""input_"", "".pdf"");
            inputFile.transferTo(tempInputFile);

            // Prepare the output directory
            tempOutputDir = Files.createTempDirectory(""output_"");

            // Run the LibreOffice command
            List<String> command =
                    new ArrayList<>(
                            Arrays.asList(
                                    ""soffice"",
                                    ""--headless"",
                                    ""--nologo"",
                                    ""--infilter="" + libreOfficeFilter,
                                    ""--convert-to"",
                                    outputFormat,
                                    ""--outdir"",
                                    tempOutputDir.toString(),
                                    tempInputFile.toString()));
            ProcessExecutorResult returnCode =
                    ProcessExecutor.getInstance(ProcessExecutor.Processes.LIBRE_OFFICE)
                            .runCommandWithOutputHandling(command);

            // Get output files
            List<File> outputFiles = Arrays.asList(tempOutputDir.toFile().listFiles());

            if (outputFiles.size() == 1) {
                // Return single output file
                File outputFile = outputFiles.get(0);
                if (""txt:Text"".equals(outputFormat)) {
                    outputFormat = ""txt"";
                }
                fileName = pdfBaseName + ""."" + outputFormat;
                fileBytes = FileUtils.readFileToByteArray(outputFile);
            } else {
                // Return output files in a ZIP archive
                fileName = pdfBaseName + ""To"" + outputFormat + "".zip"";
                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
                try (ZipOutputStream zipOutputStream = new ZipOutputStream(byteArrayOutputStream)) {
                    for (File outputFile : outputFiles) {
                        ZipEntry entry = new ZipEntry(outputFile.getName());
                        zipOutputStream.putNextEntry(entry);
                        try (FileInputStream fis = new FileInputStream(outputFile)) {
                            IOUtils.copy(fis, zipOutputStream);
                        } catch (IOException e) {
                            log.error(""Exception writing zip entry"", e);
                        }

                        zipOutputStream.closeEntry();
                    }
                } catch (IOException e) {
                    log.error(""Exception writing zip"", e);
                }

                fileBytes = byteArrayOutputStream.toByteArray();
            }

        } finally {
            // Clean up the temporary files
            Files.deleteIfExists(tempInputFile);
            if (tempOutputDir != null) FileUtils.deleteDirectory(tempOutputDir.toFile());
        }
        return WebResponseUtils.bytesToWebResponse(
                fileBytes, fileName, MediaType.APPLICATION_OCTET_STREAM);
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java,ValidationTimeStamp,getTimeStampToken,byte[] getTimeStampToken(InputStream),"[76, 79]","{'A246': [(76, 79)]}",{'A246': 1.0},A246,,"    public byte[] getTimeStampToken(InputStream content) throws IOException {
        TimeStampToken timeStampToken = tsaClient.getTimeStampToken(content);
        return timeStampToken.getEncoded();
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java,ValidationTimeStamp,addSignedTimeStamp,CMSSignedData addSignedTimeStamp(CMSSignedData),"[88, 101]","{'A246': [(88, 101)]}",{'A246': 1.0},A246,,"    public CMSSignedData addSignedTimeStamp(CMSSignedData signedData) throws IOException {
        SignerInformationStore signerStore = signedData.getSignerInfos();
        List<SignerInformation> newSigners = new ArrayList<>();

        for (SignerInformation signer : signerStore.getSigners()) {
            // This adds a timestamp to every signer (into his unsigned attributes) in the
            // signature.
            newSigners.add(signTimeStamp(signer));
        }

        // Because new SignerInformation is created, new SignerInfoStore has to be created
        // and also be replaced in signedData. Which creates a new signedData object.
        return CMSSignedData.replaceSigners(signedData, new SignerInformationStore(newSigners));
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/ValidationTimeStamp.java,ValidationTimeStamp,signTimeStamp,SignerInformation signTimeStamp(SignerInformation),"[110, 133]","{'A246': [(110, 133)]}",{'A246': 1.0},A246,,"    private SignerInformation signTimeStamp(SignerInformation signer) throws IOException {
        AttributeTable unsignedAttributes = signer.getUnsignedAttributes();

        ASN1EncodableVector vector = new ASN1EncodableVector();
        if (unsignedAttributes != null) {
            vector = unsignedAttributes.toASN1EncodableVector();
        }

        TimeStampToken timeStampToken =
                tsaClient.getTimeStampToken(new ByteArrayInputStream(signer.getSignature()));
        byte[] token = timeStampToken.getEncoded();
        ASN1ObjectIdentifier oid = PKCSObjectIdentifiers.id_aa_signatureTimeStampToken;
        ASN1Encodable signatureTimeStamp =
                new Attribute(oid, new DERSet(ASN1Primitive.fromByteArray(token)));

        vector.add(signatureTimeStamp);
        Attributes signedAttributes = new Attributes(vector);

        // There is no other way changing the unsigned attributes of the signer information.
        // result is never null, new SignerInformation always returned,
        // see source code of replaceUnsignedAttributes
        return SignerInformation.replaceUnsignedAttributes(
                signer, new AttributeTable(signedAttributes));
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java,TSAClient,getTimeStampToken,TimeStampToken getTimeStampToken(InputStream),"[80, 122]","{'A246': [(80, 122)]}",{'A246': 1.0},A246,,"    public TimeStampToken getTimeStampToken(InputStream content) throws IOException {
        digest.reset();
        DigestInputStream dis = new DigestInputStream(content, digest);
        while (dis.read() != -1) {
            // do nothing
        }
        byte[] hash = digest.digest();

        // 32-bit cryptographic nonce
        int nonce = RANDOM.nextInt();

        // generate TSA request
        TimeStampRequestGenerator tsaGenerator = new TimeStampRequestGenerator();
        tsaGenerator.setCertReq(true);
        ASN1ObjectIdentifier oid = ALGORITHM_OID_FINDER.find(digest.getAlgorithm()).getAlgorithm();
        TimeStampRequest request = tsaGenerator.generate(oid, hash, BigInteger.valueOf(nonce));

        // get TSA response
        byte[] tsaResponse = getTSAResponse(request.getEncoded());

        TimeStampResponse response;
        try {
            response = new TimeStampResponse(tsaResponse);
            response.validate(request);
        } catch (TSPException e) {
            throw new IOException(e);
        }

        TimeStampToken timeStampToken = response.getTimeStampToken();
        if (timeStampToken == null) {
            // https://www.ietf.org/rfc/rfc3161.html#section-2.4.2
            throw new IOException(
                    ""Response from ""
                            + url
                            + "" does not have a time stamp token, status: ""
                            + response.getStatus()
                            + "" (""
                            + response.getStatusString()
                            + "")"");
        }

        return timeStampToken;
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/TSAClient.java,TSAClient,getTSAResponse,byte[] getTSAResponse(byte[]),"[126, 173]","{'A246': [(126, 173)]}",{'A246': 1.0},A246,,"    private byte[] getTSAResponse(byte[] request) throws IOException {
        LOG.debug(""Opening connection to TSA server"");

        // todo: support proxy servers
        URLConnection connection = url.openConnection();
        connection.setDoOutput(true);
        connection.setDoInput(true);
        connection.setRequestProperty(""Content-Type"", ""application/timestamp-query"");

        LOG.debug(""Established connection to TSA server"");

        if (username != null && password != null && !username.isEmpty() && !password.isEmpty()) {
            String contentEncoding = connection.getContentEncoding();
            if (contentEncoding == null) {
                contentEncoding = StandardCharsets.UTF_8.name();
            }
            connection.setRequestProperty(
                    ""Authorization"",
                    ""Basic ""
                            + new String(
                                    Base64.getEncoder()
                                            .encode(
                                                    (username + "":"" + password)
                                                            .getBytes(contentEncoding))));
        }

        // read response
        try (OutputStream output = connection.getOutputStream()) {
            output.write(request);
        } catch (IOException ex) {
            LOG.error(""Exception when writing to {}"", this.url, ex);
            throw ex;
        }

        LOG.debug(""Waiting for response from TSA server"");

        byte[] response;
        try (InputStream input = connection.getInputStream()) {
            response = input.readAllBytes();
        } catch (IOException ex) {
            LOG.error(""Exception when reading from {}"", this.url, ex);
            throw ex;
        }

        LOG.debug(""Received response from TSA server"");

        return response;
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java,CreateSignatureBase,setPrivateKey,void setPrivateKey(PrivateKey),"[96, 98]","{'A246': [(96, 98)]}",{'A246': 1.0},A246,,"    public final void setPrivateKey(PrivateKey privateKey) {
        this.privateKey = privateKey;
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java,CreateSignatureBase,getCertificateChain,Certificate[] getCertificateChain(),"[100, 102]","{'A246': [(100, 102)]}",{'A246': 1.0},A246,,"    public Certificate[] getCertificateChain() {
        return certificateChain;
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java,CreateSignatureBase,setCertificateChain,void setCertificateChain(Certificate[]),"[104, 106]","{'A233': [(104, 106)]}",{'A233': 1.0},A233,,"    public final void setCertificateChain(final Certificate[] certificateChain) {
        this.certificateChain = certificateChain;
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java,CreateSignatureBase,setTsaUrl,void setTsaUrl(String),"[108, 110]","{'A246': [(108, 110)]}",{'A246': 1.0},A246,,"    public void setTsaUrl(String tsaUrl) {
        this.tsaUrl = tsaUrl;
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java,CreateSignatureBase,sign,byte[] sign(InputStream),"[127, 153]","{'A246': [(127, 153)]}",{'A246': 1.0},A246,,"    @Override
    public byte[] sign(InputStream content) throws IOException {
        // cannot be done private (interface)
        try {
            CMSSignedDataGenerator gen = new CMSSignedDataGenerator();
            X509Certificate cert = (X509Certificate) certificateChain[0];
            ContentSigner sha1Signer =
                    new JcaContentSignerBuilder(""SHA256WithRSA"").build(privateKey);
            gen.addSignerInfoGenerator(
                    new JcaSignerInfoGeneratorBuilder(
                                    new JcaDigestCalculatorProviderBuilder().build())
                            .build(sha1Signer, cert));
            gen.addCertificates(new JcaCertStore(Arrays.asList(certificateChain)));
            CMSProcessableInputStream msg = new CMSProcessableInputStream(content);
            CMSSignedData signedData = gen.generate(msg, false);
            if (tsaUrl != null && !tsaUrl.isEmpty()) {
                ValidationTimeStamp validation = new ValidationTimeStamp(tsaUrl);
                signedData = validation.addSignedTimeStamp(signedData);
            }
            return signedData.getEncoded();
        } catch (GeneralSecurityException
                | CMSException
                | OperatorCreationException
                | URISyntaxException e) {
            throw new IOException(e);
        }
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java,CreateSignatureBase,isExternalSigning,boolean isExternalSigning(),"[155, 157]","{'A233': [(155, 157)]}",{'A233': 1.0},A233,,"    public boolean isExternalSigning() {
        return externalSigning;
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java,CreateSignatureBase,setExternalSigning,void setExternalSigning(boolean),"[167, 169]","{'A246': [(167, 169)]}",{'A246': 1.0},A246,,"    public void setExternalSigning(boolean externalSigning) {
        this.externalSigning = externalSigning;
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CMSProcessableInputStream.java,CMSProcessableInputStream,getContent,Object getContent(),"[48, 51]","{'A246': [(48, 51)]}",{'A246': 1.0},A246,,"    @Override
    public Object getContent() {
        return in;
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CMSProcessableInputStream.java,CMSProcessableInputStream,write,void write(OutputStream),"[53, 58]","{'A246': [(53, 58)]}",{'A246': 1.0},A246,,"    @Override
    public void write(OutputStream out) throws IOException, CMSException {
        // read the content only one time
        in.transferTo(out);
        in.close();
    }
"
org.apache.pdfbox.examples.signature,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/signature/CMSProcessableInputStream.java,CMSProcessableInputStream,getContentType,ASN1ObjectIdentifier getContentType(),"[60, 63]","{'A246': [(60, 63)]}",{'A246': 1.0},A246,,"    @Override
    public ASN1ObjectIdentifier getContentType() {
        return contentType;
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/util/ConnectedInputStream.java,ConnectedInputStream,read,int read(),"[37, 40]","{'A246': [(37, 40)]}",{'A246': 1.0},A246,,"    @Override
    public int read() throws IOException {
        return is.read();
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/util/ConnectedInputStream.java,ConnectedInputStream,read,int read(byte[]),"[42, 45]","{'A246': [(42, 45)]}",{'A246': 1.0},A246,,"    @Override
    public int read(byte[] b) throws IOException {
        return is.read(b);
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/util/ConnectedInputStream.java,ConnectedInputStream,read,"int read(byte[],int,int)","[47, 50]","{'A246': [(47, 50)]}",{'A246': 1.0},A246,,"    @Override
    public int read(byte[] b, int off, int len) throws IOException {
        return is.read(b, off, len);
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/util/ConnectedInputStream.java,ConnectedInputStream,skip,long skip(long),"[52, 55]","{'A246': [(52, 55)]}",{'A246': 1.0},A246,,"    @Override
    public long skip(long n) throws IOException {
        return is.skip(n);
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/util/ConnectedInputStream.java,ConnectedInputStream,available,int available(),"[57, 60]","{'A246': [(57, 60)]}",{'A246': 1.0},A246,,"    @Override
    public int available() throws IOException {
        return is.available();
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/util/ConnectedInputStream.java,ConnectedInputStream,mark,void mark(int),"[62, 65]","{'A246': [(62, 65)]}",{'A246': 1.0},A246,,"    @Override
    public synchronized void mark(int readlimit) {
        is.mark(readlimit);
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/util/ConnectedInputStream.java,ConnectedInputStream,reset,void reset(),"[67, 70]","{'A246': [(67, 70)]}",{'A246': 1.0},A246,,"    @Override
    public synchronized void reset() throws IOException {
        is.reset();
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/util/ConnectedInputStream.java,ConnectedInputStream,markSupported,boolean markSupported(),"[72, 75]","{'A246': [(72, 75)]}",{'A246': 1.0},A246,,"    @Override
    public boolean markSupported() {
        return is.markSupported();
    }
"
org.apache.pdfbox.examples.util,../projects/Stirling-PDF/app/core/src/main/java/org/apache/pdfbox/examples/util/ConnectedInputStream.java,ConnectedInputStream,close,void close(),"[77, 81]","{'A246': [(77, 81)]}",{'A246': 1.0},A246,,"    @Override
    public void close() throws IOException {
        is.close();
        con.disconnect();
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/LoadingWindow.java,LoadingWindow,checkAndRefreshExplorer,void checkAndRefreshExplorer(),"[114, 269]","{'A233': [(114, 269)]}",{'A233': 1.0},A233,,"    private void checkAndRefreshExplorer() {
        if (!IS_WINDOWS) {
            return;
        }
        if (timeAt90Percent == -1) {
            timeAt90Percent = System.currentTimeMillis();
            stuckTimer =
                    new Timer(
                            1000,
                            e -> {
                                long currentTime = System.currentTimeMillis();
                                if (currentTime - timeAt90Percent > stuckThreshold) {
                                    try {
                                        log.debug(
                                                ""Attempting Windows explorer refresh due to 90% stuck state"");
                                        String currentDir = System.getProperty(""user.dir"");

                                        // Store current explorer PIDs before we start new one
                                        Set<String> existingPids = new HashSet<>();
                                        ProcessBuilder listExplorer =
                                                new ProcessBuilder(
                                                        ""cmd"",
                                                        ""/c"",
                                                        ""wmic"",
                                                        ""process"",
                                                        ""where"",
                                                        ""name='explorer.exe'"",
                                                        ""get"",
                                                        ""ProcessId"",
                                                        ""/format:csv"");
                                        Process process = listExplorer.start();
                                        BufferedReader reader =
                                                new BufferedReader(
                                                        new InputStreamReader(
                                                                process.getInputStream()));
                                        String line;
                                        while ((line =
                                                        BoundedLineReader.readLine(
                                                                reader, 5_000_000))
                                                != null) {
                                            if (line.matches("".*\\d+.*"")) { // Contains numbers
                                                String[] parts = line.trim().split("","");
                                                if (parts.length >= 2) {
                                                    existingPids.add(
                                                            parts[parts.length - 1].trim());
                                                }
                                            }
                                        }
                                        process.waitFor(2, TimeUnit.SECONDS);

                                        // Start new explorer
                                        ProcessBuilder pb =
                                                new ProcessBuilder(
                                                        ""cmd"",
                                                        ""/c"",
                                                        ""start"",
                                                        ""/min"",
                                                        ""/b"",
                                                        ""explorer.exe"",
                                                        currentDir);
                                        pb.redirectErrorStream(true);
                                        explorerProcess = pb.start();

                                        // Schedule cleanup
                                        Timer cleanupTimer =
                                                new Timer(
                                                        2000,
                                                        cleanup -> {
                                                            try {
                                                                // Find new explorer processes
                                                                ProcessBuilder findNewExplorer =
                                                                        new ProcessBuilder(
                                                                                ""cmd"",
                                                                                ""/c"",
                                                                                ""wmic"",
                                                                                ""process"",
                                                                                ""where"",
                                                                                ""name='explorer.exe'"",
                                                                                ""get"",
                                                                                ""ProcessId"",
                                                                                ""/format:csv"");
                                                                Process newProcess =
                                                                        findNewExplorer.start();
                                                                BufferedReader newReader =
                                                                        new BufferedReader(
                                                                                new InputStreamReader(
                                                                                        newProcess
                                                                                                .getInputStream()));
                                                                String newLine;
                                                                while ((newLine =
                                                                                BoundedLineReader
                                                                                        .readLine(
                                                                                                newReader,
                                                                                                5_000_000))
                                                                        != null) {
                                                                    if (newLine.matches(
                                                                            "".*\\d+.*"")) {
                                                                        String[] parts =
                                                                                newLine.trim()
                                                                                        .split("","");
                                                                        if (parts.length >= 2) {
                                                                            String pid =
                                                                                    parts[
                                                                                            parts.length
                                                                                                    - 1]
                                                                                            .trim();
                                                                            if (!existingPids
                                                                                    .contains(
                                                                                            pid)) {
                                                                                log.debug(
                                                                                        ""Found new explorer.exe with PID: ""
                                                                                                + pid);
                                                                                ProcessBuilder
                                                                                        killProcess =
                                                                                                new ProcessBuilder(
                                                                                                        ""taskkill"",
                                                                                                        ""/PID"",
                                                                                                        pid,
                                                                                                        ""/F"");
                                                                                killProcess
                                                                                        .redirectErrorStream(
                                                                                                true);
                                                                                Process killResult =
                                                                                        killProcess
                                                                                                .start();
                                                                                killResult.waitFor(
                                                                                        2,
                                                                                        TimeUnit
                                                                                                .SECONDS);
                                                                                log.debug(
                                                                                        ""Explorer process terminated: ""
                                                                                                + pid);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                newProcess.waitFor(
                                                                        2, TimeUnit.SECONDS);
                                                            } catch (Exception ex) {
                                                                log.error(
                                                                        ""Error cleaning up Windows explorer process"",
                                                                        ex);
                                                            }
                                                        });
                                        cleanupTimer.setRepeats(false);
                                        cleanupTimer.start();
                                        stuckTimer.stop();
                                    } catch (Exception ex) {
                                        log.error(""Error refreshing Windows explorer"", ex);
                                    }
                                }
                            });
            stuckTimer.setRepeats(true);
            stuckTimer.start();
        }
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/LoadingWindow.java,LoadingWindow,setProgress,void setProgress(int),"[271, 319]","{'A233': [(271, 319)]}",{'A233': 1.0},A233,,"    public void setProgress(final int progress) {
        SwingUtilities.invokeLater(
                () -> {
                    try {
                        int validProgress = Math.min(Math.max(progress, 0), 100);
                        log.info(
                                ""Setting progress to {}% at {}ms since start"",
                                validProgress, System.currentTimeMillis() - startTime);

                        // Log additional details when near 90%
                        if (validProgress >= 85 && validProgress <= 95) {
                            log.info(
                                    ""Near 90% progress - Current status: {}, Window visible: {}, ""
                                            + ""Progress bar responding: {}, Memory usage: {}MB"",
                                    statusLabel.getText(),
                                    isVisible(),
                                    progressBar.isEnabled(),
                                    Runtime.getRuntime().totalMemory() / (1024 * 1024));

                            // Add thread state logging
                            Thread currentThread = Thread.currentThread();
                            log.info(
                                    ""Current thread state - Name: {}, State: {}, Priority: {}"",
                                    currentThread.getName(),
                                    currentThread.getState(),
                                    currentThread.getPriority());

                            if (validProgress >= 90 && validProgress < 95) {
                                checkAndRefreshExplorer();
                            } else {
                                // Reset the timer if we move past 95%
                                if (validProgress >= 95) {
                                    if (stuckTimer != null) {
                                        stuckTimer.stop();
                                    }
                                    timeAt90Percent = -1;
                                }
                            }
                        }

                        progressBar.setValue(validProgress);
                        progressBar.setString(validProgress + ""%"");
                        mainPanel.revalidate();
                        mainPanel.repaint();
                    } catch (Exception e) {
                        log.error(""Error updating progress to "" + progress, e);
                    }
                });
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/LoadingWindow.java,LoadingWindow,setStatus,void setStatus(String),"[321, 344]","{'A233': [(321, 344)]}",{'A233': 1.0},A233,,"    public void setStatus(final String status) {
        log.info(
                ""Status update at {}ms - Setting status to: {}"",
                System.currentTimeMillis() - startTime,
                status);

        SwingUtilities.invokeLater(
                () -> {
                    try {
                        String validStatus = status != null ? status : """";
                        statusLabel.setText(validStatus);

                        // Log UI state when status changes
                        log.info(
                                ""UI State - Window visible: {}, Progress: {}%, Status: {}"",
                                isVisible(), progressBar.getValue(), validStatus);

                        mainPanel.revalidate();
                        mainPanel.repaint();
                    } catch (Exception e) {
                        log.error(""Error updating status to: "" + status, e);
                    }
                });
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/LoadingWindow.java,LoadingWindow,dispose,void dispose(),"[346, 350]","{'A233': [(346, 350)]}",{'A233': 1.0},A233,,"    @Override
    public void dispose() {
        log.info(""LoadingWindow disposing after {}ms"", System.currentTimeMillis() - startTime);
        super.dispose();
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,initWebUI,void initWebUI(String),"[73, 117]","{'A233': [(73, 95), (111, 117)], 'A261': [(96, 110)]}","{'A233': 0.6666666666666666, 'A261': 0.3333333333333333}",A233,,"    public void initWebUI(String url) {
        CompletableFuture.runAsync(
                () -> {
                    try {
                        CefAppBuilder builder = new CefAppBuilder();
                        configureCefSettings(builder);
                        builder.setProgressHandler(createProgressHandler());
                        builder.setInstallDir(
                                new File(InstallationPathConfig.getClientWebUIPath()));
                        // Build and initialize CEF
                        cefApp = builder.build();
                        client = cefApp.createClient();

                        // Set up download handler
                        setupDownloadHandler();

                        // Create browser and frame on EDT
                        SwingUtilities.invokeAndWait(
                                () -> {
                                    browser = client.createBrowser(url, false, false);
                                    setupMainFrame();
                                    setupLoadHandler();

                                    // Force initialize UI after 7 seconds if not already done
                                    Timer timeoutTimer =
                                            new Timer(
                                                    2500,
                                                    e -> {
                                                        log.warn(
                                                                ""Loading timeout reached. Forcing""
                                                                        + "" UI transition."");
                                                        if (!browserInitialized) {
                                                            // Force UI initialization
                                                            forceInitializeUI();
                                                        }
                                                    });
                                    timeoutTimer.setRepeats(false);
                                    timeoutTimer.start();
                                });
                    } catch (Exception e) {
                        log.error(""Error initializing JCEF browser: "", e);
                        cleanup();
                    }
                });
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,configureCefSettings,void configureCefSettings(CefAppBuilder),"[119, 145]","{'A233': [(119, 145)]}",{'A233': 1.0},A233,,"    private void configureCefSettings(CefAppBuilder builder) {
        CefSettings settings = builder.getCefSettings();
        String basePath = InstallationPathConfig.getClientWebUIPath();
        log.info(""basePath "" + basePath);
        settings.cache_path = new File(basePath + ""cache"").getAbsolutePath();
        settings.root_cache_path = new File(basePath + ""root_cache"").getAbsolutePath();
        //        settings.browser_subprocess_path = new File(basePath +
        // ""subprocess"").getAbsolutePath();
        //        settings.resources_dir_path = new File(basePath + ""resources"").getAbsolutePath();
        //        settings.locales_dir_path = new File(basePath + ""locales"").getAbsolutePath();
        settings.log_file = new File(basePath, ""debug.log"").getAbsolutePath();

        settings.persist_session_cookies = true;
        settings.windowless_rendering_enabled = false;
        settings.log_severity = CefSettings.LogSeverity.LOGSEVERITY_INFO;

        builder.setAppHandler(
                new MavenCefAppHandlerAdapter() {
                    @Override
                    public void stateHasChanged(org.cef.CefApp.CefAppState state) {
                        log.info(""CEF state changed: "" + state);
                        if (state == CefApp.CefAppState.TERMINATED) {
                            System.exit(0);
                        }
                    }
                });
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,stateHasChanged,void stateHasChanged(org.cef.CefApp.CefAppState),"[137, 143]","{'A233': [(137, 143)]}",{'A233': 1.0},A233,,"                    @Override
                    public void stateHasChanged(org.cef.CefApp.CefAppState state) {
                        log.info(""CEF state changed: "" + state);
                        if (state == CefApp.CefAppState.TERMINATED) {
                            System.exit(0);
                        }
                    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,setupDownloadHandler,void setupDownloadHandler(),"[147, 172]","{'A233': [(147, 172)]}",{'A233': 1.0},A233,,"    private void setupDownloadHandler() {
        client.addDownloadHandler(
                new CefDownloadHandlerAdapter() {
                    @Override
                    public boolean onBeforeDownload(
                            CefBrowser browser,
                            CefDownloadItem downloadItem,
                            String suggestedName,
                            CefBeforeDownloadCallback callback) {
                        callback.Continue("""", true);
                        return true;
                    }

                    @Override
                    public void onDownloadUpdated(
                            CefBrowser browser,
                            CefDownloadItem downloadItem,
                            CefDownloadItemCallback callback) {
                        if (downloadItem.isComplete()) {
                            log.info(""Download completed: "" + downloadItem.getFullPath());
                        } else if (downloadItem.isCanceled()) {
                            log.info(""Download canceled: "" + downloadItem.getFullPath());
                        }
                    }
                });
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,onBeforeDownload,"boolean onBeforeDownload(CefBrowser,CefDownloadItem,String,CefBeforeDownloadCallback)","[150, 158]","{'A233': [(150, 158)]}",{'A233': 1.0},A233,,"                    @Override
                    public boolean onBeforeDownload(
                            CefBrowser browser,
                            CefDownloadItem downloadItem,
                            String suggestedName,
                            CefBeforeDownloadCallback callback) {
                        callback.Continue("""", true);
                        return true;
                    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,onDownloadUpdated,"void onDownloadUpdated(CefBrowser,CefDownloadItem,CefDownloadItemCallback)","[160, 170]","{'A233': [(160, 170)]}",{'A233': 1.0},A233,,"                    @Override
                    public void onDownloadUpdated(
                            CefBrowser browser,
                            CefDownloadItem downloadItem,
                            CefDownloadItemCallback callback) {
                        if (downloadItem.isComplete()) {
                            log.info(""Download completed: "" + downloadItem.getFullPath());
                        } else if (downloadItem.isCanceled()) {
                            log.info(""Download canceled: "" + downloadItem.getFullPath());
                        }
                    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,createProgressHandler,ConsoleProgressHandler createProgressHandler(),"[174, 213]","{'A233': [(174, 213)]}",{'A233': 1.0},A233,,"    private ConsoleProgressHandler createProgressHandler() {
        return new ConsoleProgressHandler() {
            @Override
            public void handleProgress(EnumProgress state, float percent) {
                Objects.requireNonNull(state, ""state cannot be null"");
                SwingUtilities.invokeLater(
                        () -> {
                            if (loadingWindow != null) {
                                switch (state) {
                                    case LOCATING:
                                        loadingWindow.setStatus(""Locating Files..."");
                                        loadingWindow.setProgress(0);
                                        break;
                                    case DOWNLOADING:
                                        if (percent >= 0) {
                                            loadingWindow.setStatus(
                                                    String.format(
                                                            ""Downloading additional files: %.0f%%"",
                                                            percent));
                                            loadingWindow.setProgress((int) percent);
                                        }
                                        break;
                                    case EXTRACTING:
                                        loadingWindow.setStatus(""Extracting files..."");
                                        loadingWindow.setProgress(60);
                                        break;
                                    case INITIALIZING:
                                        loadingWindow.setStatus(""Initializing UI..."");
                                        loadingWindow.setProgress(80);
                                        break;
                                    case INITIALIZED:
                                        loadingWindow.setStatus(""Finalising startup..."");
                                        loadingWindow.setProgress(90);
                                        break;
                                }
                            }
                        });
            }
        };
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,handleProgress,"void handleProgress(EnumProgress,float)","[176, 211]","{'A233': [(176, 211)]}",{'A233': 1.0},A233,,"            @Override
            public void handleProgress(EnumProgress state, float percent) {
                Objects.requireNonNull(state, ""state cannot be null"");
                SwingUtilities.invokeLater(
                        () -> {
                            if (loadingWindow != null) {
                                switch (state) {
                                    case LOCATING:
                                        loadingWindow.setStatus(""Locating Files..."");
                                        loadingWindow.setProgress(0);
                                        break;
                                    case DOWNLOADING:
                                        if (percent >= 0) {
                                            loadingWindow.setStatus(
                                                    String.format(
                                                            ""Downloading additional files: %.0f%%"",
                                                            percent));
                                            loadingWindow.setProgress((int) percent);
                                        }
                                        break;
                                    case EXTRACTING:
                                        loadingWindow.setStatus(""Extracting files..."");
                                        loadingWindow.setProgress(60);
                                        break;
                                    case INITIALIZING:
                                        loadingWindow.setStatus(""Initializing UI..."");
                                        loadingWindow.setProgress(80);
                                        break;
                                    case INITIALIZED:
                                        loadingWindow.setStatus(""Finalising startup..."");
                                        loadingWindow.setProgress(90);
                                        break;
                                }
                            }
                        });
            }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,setupMainFrame,void setupMainFrame(),"[215, 239]","{'A233': [(215, 239)]}",{'A233': 1.0},A233,,"    private void setupMainFrame() {
        frame = new JFrame(""Stirling-PDF"");
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frame.setUndecorated(true);
        frame.setOpacity(0.0f);

        JPanel contentPane = new JPanel(new BorderLayout());
        contentPane.setDoubleBuffered(true);
        contentPane.add(browser.getUIComponent(), BorderLayout.CENTER);
        frame.setContentPane(contentPane);

        frame.addWindowListener(
                new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                        cleanup();
                        System.exit(0);
                    }
                });

        frame.setSize(UIScaling.scaleWidth(1280), UIScaling.scaleHeight(800));
        frame.setLocationRelativeTo(null);

        loadIcon();
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,windowClosing,void windowClosing(java.awt.event.WindowEvent),"[228, 232]","{'A233': [(228, 232)]}",{'A233': 1.0},A233,,"                    @Override
                    public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                        cleanup();
                        System.exit(0);
                    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,setupLoadHandler,void setupLoadHandler(),"[241, 334]","{'A233': [(241, 253), (256, 263), (266, 305), (308, 309), (312, 334)], 'A261': [(254, 255), (264, 265), (306, 307), (310, 311)]}","{'A233': 0.9148936170212766, 'A261': 0.0851063829787234}",A233,,"    private void setupLoadHandler() {
        final long initStartTime = System.currentTimeMillis();
        log.info(""Setting up load handler at: {}"", initStartTime);

        client.addLoadHandler(
                new CefLoadHandlerAdapter() {
                    @Override
                    public void onLoadingStateChange(
                            CefBrowser browser,
                            boolean isLoading,
                            boolean canGoBack,
                            boolean canGoForward) {
                        log.debug(
                                ""Loading state change - isLoading: {}, canGoBack: {}, canGoForward:""
                                        + "" {}, browserInitialized: {}, Time elapsed: {}ms"",
                                isLoading,
                                canGoBack,
                                canGoForward,
                                browserInitialized,
                                System.currentTimeMillis() - initStartTime);

                        if (!isLoading && !browserInitialized) {
                            log.info(
                                    ""Browser finished loading, preparing to initialize UI""
                                            + "" components"");
                            browserInitialized = true;
                            SwingUtilities.invokeLater(
                                    () -> {
                                        try {
                                            if (loadingWindow != null) {
                                                log.info(""Starting UI initialization sequence"");

                                                // Close loading window first
                                                loadingWindow.setVisible(false);
                                                loadingWindow.dispose();
                                                loadingWindow = null;
                                                log.info(""Loading window disposed"");

                                                // Then setup the main frame
                                                frame.setVisible(false);
                                                frame.dispose();
                                                frame.setOpacity(1.0f);
                                                frame.setUndecorated(false);
                                                frame.pack();
                                                frame.setSize(
                                                        UIScaling.scaleWidth(1280),
                                                        UIScaling.scaleHeight(800));
                                                frame.setLocationRelativeTo(null);
                                                log.debug(""Frame reconfigured"");

                                                // Show the main frame
                                                frame.setVisible(true);
                                                frame.requestFocus();
                                                frame.toFront();
                                                log.info(""Main frame displayed and focused"");

                                                // Focus the browser component
                                                Timer focusTimer =
                                                        new Timer(
                                                                100,
                                                                e -> {
                                                                    try {
                                                                        browser.getUIComponent()
                                                                                .requestFocus();
                                                                        log.info(
                                                                                ""Browser component""
                                                                                        + "" focused"");
                                                                    } catch (Exception ex) {
                                                                        log.error(
                                                                                ""Error focusing""
                                                                                        + "" browser"",
                                                                                ex);
                                                                    }
                                                                });
                                                focusTimer.setRepeats(false);
                                                focusTimer.start();
                                            }
                                        } catch (Exception e) {
                                            log.error(""Error during UI initialization"", e);
                                            // Attempt cleanup on error
                                            if (loadingWindow != null) {
                                                loadingWindow.dispose();
                                                loadingWindow = null;
                                            }
                                            if (frame != null) {
                                                frame.setVisible(true);
                                                frame.requestFocus();
                                            }
                                        }
                                    });
                        }
                    }
                });
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,onLoadingStateChange,"void onLoadingStateChange(CefBrowser,boolean,boolean,boolean)","[247, 332]","{'A233': [(247, 253), (256, 263), (266, 305), (308, 309), (312, 332)], 'A261': [(254, 255), (264, 265), (306, 307), (310, 311)]}","{'A233': 0.9069767441860465, 'A261': 0.09302325581395349}",A233,,"                    @Override
                    public void onLoadingStateChange(
                            CefBrowser browser,
                            boolean isLoading,
                            boolean canGoBack,
                            boolean canGoForward) {
                        log.debug(
                                ""Loading state change - isLoading: {}, canGoBack: {}, canGoForward:""
                                        + "" {}, browserInitialized: {}, Time elapsed: {}ms"",
                                isLoading,
                                canGoBack,
                                canGoForward,
                                browserInitialized,
                                System.currentTimeMillis() - initStartTime);

                        if (!isLoading && !browserInitialized) {
                            log.info(
                                    ""Browser finished loading, preparing to initialize UI""
                                            + "" components"");
                            browserInitialized = true;
                            SwingUtilities.invokeLater(
                                    () -> {
                                        try {
                                            if (loadingWindow != null) {
                                                log.info(""Starting UI initialization sequence"");

                                                // Close loading window first
                                                loadingWindow.setVisible(false);
                                                loadingWindow.dispose();
                                                loadingWindow = null;
                                                log.info(""Loading window disposed"");

                                                // Then setup the main frame
                                                frame.setVisible(false);
                                                frame.dispose();
                                                frame.setOpacity(1.0f);
                                                frame.setUndecorated(false);
                                                frame.pack();
                                                frame.setSize(
                                                        UIScaling.scaleWidth(1280),
                                                        UIScaling.scaleHeight(800));
                                                frame.setLocationRelativeTo(null);
                                                log.debug(""Frame reconfigured"");

                                                // Show the main frame
                                                frame.setVisible(true);
                                                frame.requestFocus();
                                                frame.toFront();
                                                log.info(""Main frame displayed and focused"");

                                                // Focus the browser component
                                                Timer focusTimer =
                                                        new Timer(
                                                                100,
                                                                e -> {
                                                                    try {
                                                                        browser.getUIComponent()
                                                                                .requestFocus();
                                                                        log.info(
                                                                                ""Browser component""
                                                                                        + "" focused"");
                                                                    } catch (Exception ex) {
                                                                        log.error(
                                                                                ""Error focusing""
                                                                                        + "" browser"",
                                                                                ex);
                                                                    }
                                                                });
                                                focusTimer.setRepeats(false);
                                                focusTimer.start();
                                            }
                                        } catch (Exception e) {
                                            log.error(""Error during UI initialization"", e);
                                            // Attempt cleanup on error
                                            if (loadingWindow != null) {
                                                loadingWindow.dispose();
                                                loadingWindow = null;
                                            }
                                            if (frame != null) {
                                                frame.setVisible(true);
                                                frame.requestFocus();
                                            }
                                        }
                                    });
                        }
                    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,setupTrayIcon,void setupTrayIcon(Image),"[336, 395]","{'A233': [(336, 395)]}",{'A233': 1.0},A233,,"    private void setupTrayIcon(Image icon) {
        if (!SystemTray.isSupported()) {
            log.warn(""System tray is not supported"");
            return;
        }

        try {
            systemTray = SystemTray.getSystemTray();

            // Create popup menu
            PopupMenu popup = new PopupMenu();

            // Create menu items
            MenuItem showItem = new MenuItem(""Show"");
            showItem.addActionListener(
                    e -> {
                        frame.setVisible(true);
                        frame.setState(Frame.NORMAL);
                    });

            MenuItem exitItem = new MenuItem(""Exit"");
            exitItem.addActionListener(
                    e -> {
                        cleanup();
                        System.exit(0);
                    });

            // Add menu items to popup menu
            popup.add(showItem);
            popup.addSeparator();
            popup.add(exitItem);

            // Create tray icon
            trayIcon = new TrayIcon(icon, ""Stirling-PDF"", popup);
            trayIcon.setImageAutoSize(true);

            // Add double-click behavior
            trayIcon.addActionListener(
                    e -> {
                        frame.setVisible(true);
                        frame.setState(Frame.NORMAL);
                    });

            // Add tray icon to system tray
            systemTray.add(trayIcon);

            // Modify frame behavior to minimize to tray
            frame.addWindowStateListener(
                    new WindowStateListener() {
                        public void windowStateChanged(WindowEvent e) {
                            if (e.getNewState() == Frame.ICONIFIED) {
                                frame.setVisible(false);
                            }
                        }
                    });

        } catch (AWTException e) {
            log.error(""Error setting up system tray icon"", e);
        }
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,windowStateChanged,void windowStateChanged(WindowEvent),"[385, 389]","{'A233': [(385, 389)]}",{'A233': 1.0},A233,,"                        public void windowStateChanged(WindowEvent e) {
                            if (e.getNewState() == Frame.ICONIFIED) {
                                frame.setVisible(false);
                            }
                        }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,loadIcon,void loadIcon(),"[397, 425]","{'A233': [(397, 425)]}",{'A233': 1.0},A233,,"    private void loadIcon() {
        try {
            Image icon = null;
            String[] iconPaths = {""/static/favicon.ico""};

            for (String path : iconPaths) {
                if (icon != null) break;
                try {
                    try (InputStream is = getClass().getResourceAsStream(path)) {
                        if (is != null) {
                            icon = ImageIO.read(is);
                            break;
                        }
                    }
                } catch (Exception e) {
                    log.debug(""Could not load icon from "" + path, e);
                }
            }

            if (icon != null) {
                frame.setIconImage(icon);
                setupTrayIcon(icon);
            } else {
                log.warn(""Could not load icon from any source"");
            }
        } catch (Exception e) {
            log.error(""Error loading icon"", e);
        }
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,cleanup,void cleanup(),"[427, 433]","{'A233': [(427, 433)]}",{'A233': 1.0},A233,,"    @PreDestroy
    public void cleanup() {
        if (browser != null) browser.close(true);
        if (client != null) client.dispose();
        if (cefApp != null) cefApp.dispose();
        if (loadingWindow != null) loadingWindow.dispose();
    }
"
stirling.software.SPDF.UI.impl,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java,DesktopBrowser,forceInitializeUI,void forceInitializeUI(),"[435, 496]","{'A261': [(435, 496)]}",{'A261': 1.0},A261,,"    public static void forceInitializeUI() {
        try {
            if (loadingWindow != null) {
                log.info(""Forcing start of UI initialization sequence"");

                // Close loading window first
                loadingWindow.setVisible(false);
                loadingWindow.dispose();
                loadingWindow = null;
                log.info(""Loading window disposed"");

                // Then setup the main frame
                frame.setVisible(false);
                frame.dispose();
                frame.setOpacity(1.0f);
                frame.setUndecorated(false);
                frame.pack();
                frame.setSize(UIScaling.scaleWidth(1280), UIScaling.scaleHeight(800));
                frame.setLocationRelativeTo(null);
                log.debug(""Frame reconfigured"");

                // Show the main frame
                frame.setVisible(true);
                frame.requestFocus();
                frame.toFront();
                log.info(""Main frame displayed and focused"");

                // Focus the browser component if available
                if (browser != null) {
                    Timer focusTimer =
                            new Timer(
                                    100,
                                    e -> {
                                        try {
                                            browser.getUIComponent().requestFocus();
                                            log.info(""Browser component focused"");
                                        } catch (Exception ex) {
                                            log.error(
                                                    ""Error focusing browser during force ui""
                                                            + "" initialization."",
                                                    ex);
                                        }
                                    });
                    focusTimer.setRepeats(false);
                    focusTimer.start();
                }
            }
        } catch (Exception e) {
            log.error(""Error during Forced UI initialization."", e);
            // Attempt cleanup on error
            if (loadingWindow != null) {
                loadingWindow.dispose();
                loadingWindow = null;
            }
            if (frame != null) {
                frame.setVisible(true);
                frame.setOpacity(1.0f);
                frame.setUndecorated(false);
                frame.requestFocus();
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController,extractBookmarks,"List<Map<String, Object>> extractBookmarks(MultipartFile)","[47, 70]","{'A233': [(47, 70)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"    @PostMapping(value = ""/extract-bookmarks"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Extract PDF Bookmarks"",
            description = ""Extracts bookmarks/table of contents from a PDF document as JSON."")
    @ResponseBody
    public List<Map<String, Object>> extractBookmarks(@RequestParam(""file"") MultipartFile file)
            throws Exception {
        PDDocument document = null;
        try {
            document = pdfDocumentFactory.load(file);
            PDDocumentOutline outline = document.getDocumentCatalog().getDocumentOutline();

            if (outline == null) {
                log.info(""No outline/bookmarks found in PDF"");
                return new ArrayList<>();
            }

            return extractBookmarkItems(document, outline);
        } finally {
            if (document != null) {
                document.close();
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController,extractBookmarkItems,"List<Map<String, Object>> extractBookmarkItems(PDDocument,PDDocumentOutline)","[72, 116]","{'A233': [(72, 116)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"    private List<Map<String, Object>> extractBookmarkItems(
            PDDocument document, PDDocumentOutline outline) throws Exception {
        List<Map<String, Object>> bookmarks = new ArrayList<>();
        PDOutlineItem current = outline.getFirstChild();

        while (current != null) {
            Map<String, Object> bookmark = new HashMap<>();

            // Get bookmark title
            String title = current.getTitle();
            bookmark.put(""title"", title);

            // Get page number (1-based for UI purposes)
            PDPage page = current.findDestinationPage(document);
            if (page != null) {
                int pageIndex = document.getPages().indexOf(page);
                bookmark.put(""pageNumber"", pageIndex + 1);
            } else {
                bookmark.put(""pageNumber"", 1);
            }

            // Process children if any
            PDOutlineItem child = current.getFirstChild();
            if (child != null) {
                List<Map<String, Object>> children = new ArrayList<>();
                PDOutlineNode parent = current;

                while (child != null) {
                    // Recursively process child items
                    Map<String, Object> childBookmark = processChild(document, child);
                    children.add(childBookmark);
                    child = child.getNextSibling();
                }

                bookmark.put(""children"", children);
            } else {
                bookmark.put(""children"", new ArrayList<>());
            }

            bookmarks.add(bookmark);
            current = current.getNextSibling();
        }

        return bookmarks;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController,processChild,"Map<String, Object> processChild(PDDocument,PDOutlineItem)","[118, 153]","{'A233': [(118, 153)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"    private Map<String, Object> processChild(PDDocument document, PDOutlineItem item)
            throws Exception {
        Map<String, Object> bookmark = new HashMap<>();

        // Get bookmark title
        String title = item.getTitle();
        bookmark.put(""title"", title);

        // Get page number (1-based for UI purposes)
        PDPage page = item.findDestinationPage(document);
        if (page != null) {
            int pageIndex = document.getPages().indexOf(page);
            bookmark.put(""pageNumber"", pageIndex + 1);
        } else {
            bookmark.put(""pageNumber"", 1);
        }

        // Process children if any
        PDOutlineItem child = item.getFirstChild();
        if (child != null) {
            List<Map<String, Object>> children = new ArrayList<>();

            while (child != null) {
                // Recursively process child items
                Map<String, Object> childBookmark = processChild(document, child);
                children.add(childBookmark);
                child = child.getNextSibling();
            }

            bookmark.put(""children"", children);
        } else {
            bookmark.put(""children"", new ArrayList<>());
        }

        return bookmark;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController,editTableOfContents,ResponseEntity<byte[]> editTableOfContents(EditTableOfContentsRequest),"[155, 192]","{'A233': [(155, 192)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"    @PostMapping(value = ""/edit-table-of-contents"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Edit Table of Contents"",
            description = ""Add or edit bookmarks/table of contents in a PDF document."")
    public ResponseEntity<byte[]> editTableOfContents(
            @ModelAttribute EditTableOfContentsRequest request) throws Exception {
        MultipartFile file = request.getFileInput();
        PDDocument document = null;

        try {
            document = pdfDocumentFactory.load(file);

            // Parse the bookmark data from JSON
            List<BookmarkItem> bookmarks =
                    objectMapper.readValue(
                            request.getBookmarkData(), new TypeReference<List<BookmarkItem>>() {});

            // Create a new document outline
            PDDocumentOutline outline = new PDDocumentOutline();
            document.getDocumentCatalog().setDocumentOutline(outline);

            // Add bookmarks to the outline
            addBookmarksToOutline(document, outline, bookmarks);

            // Save the document to a byte array
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            document.save(baos);

            String filename = file.getOriginalFilename().replaceFirst(""[.][^.]+$"", """");
            return WebResponseUtils.bytesToWebResponse(
                    baos.toByteArray(), filename + ""_with_toc.pdf"", MediaType.APPLICATION_PDF);

        } finally {
            if (document != null) {
                document.close();
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController,addBookmarksToOutline,"void addBookmarksToOutline(PDDocument,PDDocumentOutline,List<BookmarkItem>)","[194, 204]","{'A233': [(194, 204)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"    private void addBookmarksToOutline(
            PDDocument document, PDDocumentOutline outline, List<BookmarkItem> bookmarks) {
        for (BookmarkItem bookmark : bookmarks) {
            PDOutlineItem item = createOutlineItem(document, bookmark);
            outline.addLast(item);

            if (bookmark.getChildren() != null && !bookmark.getChildren().isEmpty()) {
                addChildBookmarks(document, item, bookmark.getChildren());
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController,addChildBookmarks,"void addChildBookmarks(PDDocument,PDOutlineItem,List<BookmarkItem>)","[206, 216]","{'A233': [(206, 216)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"    private void addChildBookmarks(
            PDDocument document, PDOutlineItem parent, List<BookmarkItem> children) {
        for (BookmarkItem child : children) {
            PDOutlineItem item = createOutlineItem(document, child);
            parent.addLast(item);

            if (child.getChildren() != null && !child.getChildren().isEmpty()) {
                addChildBookmarks(document, item, child.getChildren());
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController,createOutlineItem,"PDOutlineItem createOutlineItem(PDDocument,BookmarkItem)","[218, 234]","{'A233': [(218, 234)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"    private PDOutlineItem createOutlineItem(PDDocument document, BookmarkItem bookmark) {
        PDOutlineItem item = new PDOutlineItem();
        item.setTitle(bookmark.getTitle());

        // Get the target page - adjust for 0-indexed pages in PDFBox
        int pageIndex = bookmark.getPageNumber() - 1;
        if (pageIndex < 0) {
            pageIndex = 0;
        } else if (pageIndex >= document.getNumberOfPages()) {
            pageIndex = document.getNumberOfPages() - 1;
        }

        PDPage page = document.getPage(pageIndex);
        item.setDestination(page);

        return item;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController.BookmarkItem,getTitle,String getTitle(),"[242, 244]","{'A233': [(242, 244)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"        public String getTitle() {
            return title;
        }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController.BookmarkItem,setTitle,void setTitle(String),"[246, 248]","{'A233': [(246, 248)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"        public void setTitle(String title) {
            this.title = title;
        }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController.BookmarkItem,getPageNumber,int getPageNumber(),"[250, 252]","{'A233': [(250, 252)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"        public int getPageNumber() {
            return pageNumber;
        }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController.BookmarkItem,setPageNumber,void setPageNumber(int),"[254, 256]","{'A233': [(254, 256)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"        public void setPageNumber(int pageNumber) {
            this.pageNumber = pageNumber;
        }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController.BookmarkItem,getChildren,List<BookmarkItem> getChildren(),"[258, 260]","{'A233': [(258, 260)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"        public List<BookmarkItem> getChildren() {
            return children;
        }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/EditTableOfContentsController.java,EditTableOfContentsController.BookmarkItem,setChildren,void setChildren(List<BookmarkItem>),"[262, 264]","{'A233': [(262, 264)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/EditTableOfContentsControllerTest.java,"        public void setChildren(List<BookmarkItem> children) {
            this.children = children;
        }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java,ScalePagesController,scalePages,ResponseEntity<byte[]> scalePages(ScalePagesRequest),"[41, 103]","{'A233': [(41, 44), (47, 56), (59, 100), (103, 103)], 'A234': [(45, 46)], 'A263': [(57, 58)], 'A246': [(101, 102)]}","{'A233': 0.9047619047619048, 'A234': 0.031746031746031744, 'A263': 0.031746031746031744, 'A246': 0.031746031746031744}",A233,,"    @PostMapping(value = ""/scale-pages"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Change the size of a PDF page/document"",
            description =
                    ""This operation takes an input PDF file and the size to scale the pages to in""
                            + "" the output PDF file. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> scalePages(@ModelAttribute ScalePagesRequest request)
            throws IOException {
        MultipartFile file = request.getFileInput();
        String targetPDRectangle = request.getPageSize();
        float scaleFactor = request.getScaleFactor();

        PDDocument sourceDocument = pdfDocumentFactory.load(file);
        PDDocument outputDocument =
                pdfDocumentFactory.createNewDocumentBasedOnOldDocument(sourceDocument);

        PDRectangle targetSize = getTargetSize(targetPDRectangle, sourceDocument);

        int totalPages = sourceDocument.getNumberOfPages();
        for (int i = 0; i < totalPages; i++) {
            PDPage sourcePage = sourceDocument.getPage(i);
            PDRectangle sourceSize = sourcePage.getMediaBox();

            float scaleWidth = targetSize.getWidth() / sourceSize.getWidth();
            float scaleHeight = targetSize.getHeight() / sourceSize.getHeight();
            float scale = Math.min(scaleWidth, scaleHeight) * scaleFactor;

            PDPage newPage = new PDPage(targetSize);
            outputDocument.addPage(newPage);

            PDPageContentStream contentStream =
                    new PDPageContentStream(
                            outputDocument,
                            newPage,
                            PDPageContentStream.AppendMode.APPEND,
                            true,
                            true);

            float x = (targetSize.getWidth() - sourceSize.getWidth() * scale) / 2;
            float y = (targetSize.getHeight() - sourceSize.getHeight() * scale) / 2;

            contentStream.saveGraphicsState();
            contentStream.transform(Matrix.getTranslateInstance(x, y));
            contentStream.transform(Matrix.getScaleInstance(scale, scale));

            LayerUtility layerUtility = new LayerUtility(outputDocument);
            PDFormXObject form = layerUtility.importPageAsForm(sourceDocument, i);
            contentStream.drawForm(form);

            contentStream.restoreGraphicsState();
            contentStream.close();
        }

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        outputDocument.save(baos);
        outputDocument.close();
        sourceDocument.close();

        return WebResponseUtils.bytesToWebResponse(
                baos.toByteArray(),
                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst(""[.][^.]+$"", """")
                        + ""_scaled.pdf"");
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java,ScalePagesController,getTargetSize,"PDRectangle getTargetSize(String,PDDocument)","[105, 125]","{'A233': [(124, 124)], 'A263': [(105, 105), (107, 123), (125, 125)], 'A243': [(106, 106)]}","{'A233': 0.047619047619047616, 'A263': 0.9047619047619048, 'A243': 0.047619047619047616}",A263,,"    private PDRectangle getTargetSize(String targetPDRectangle, PDDocument sourceDocument) {
        if (""KEEP"".equals(targetPDRectangle)) {
            if (sourceDocument.getNumberOfPages() == 0) {
                return null;
            }

            // use the first page to determine the target page size
            PDPage sourcePage = sourceDocument.getPage(0);
            PDRectangle sourceSize = sourcePage.getMediaBox();

            return sourceSize;
        }

        Map<String, PDRectangle> sizeMap = getSizeMap();

        if (sizeMap.containsKey(targetPDRectangle)) {
            return sizeMap.get(targetPDRectangle);
        }

        throw ExceptionUtils.createInvalidPageSizeException(targetPDRectangle);
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java,ScalePagesController,getSizeMap,"Map<String, PDRectangle> getSizeMap()","[127, 143]","{'A263': [(127, 143)]}",{'A263': 1.0},A263,,"    private Map<String, PDRectangle> getSizeMap() {
        Map<String, PDRectangle> sizeMap = new HashMap<>();
        // Add A0 - A6
        sizeMap.put(""A0"", PDRectangle.A0);
        sizeMap.put(""A1"", PDRectangle.A1);
        sizeMap.put(""A2"", PDRectangle.A2);
        sizeMap.put(""A3"", PDRectangle.A3);
        sizeMap.put(""A4"", PDRectangle.A4);
        sizeMap.put(""A5"", PDRectangle.A5);
        sizeMap.put(""A6"", PDRectangle.A6);

        // Add other sizes
        sizeMap.put(""LETTER"", PDRectangle.LETTER);
        sizeMap.put(""LEGAL"", PDRectangle.LEGAL);

        return sizeMap;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java,SettingsController,updateApiKey,ResponseEntity<String> updateApiKey(Boolean),"[34, 46]","{'A233': [(34, 36), (38, 42), (45, 46)], 'A234': [(37, 37), (43, 44)]}","{'A233': 0.7692307692307693, 'A234': 0.23076923076923078}",A233,,"    @PostMapping(""/update-enable-analytics"")
    @Hidden
    public ResponseEntity<String> updateApiKey(@RequestBody Boolean enabled) throws IOException {
        if (applicationProperties.getSystem().getEnableAnalytics() != null) {
            return ResponseEntity.status(HttpStatus.ALREADY_REPORTED)
                    .body(
                            ""Setting has already been set, To adjust please edit ""
                                    + InstallationPathConfig.getSettingsPath());
        }
        GeneralUtils.saveKeyToSettings(""system.enableAnalytics"", enabled);
        applicationProperties.getSystem().setEnableAnalytics(enabled);
        return ResponseEntity.ok(""Updated"");
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java,SettingsController,getDisabledEndpoints,"ResponseEntity<Map<String, Boolean>> getDisabledEndpoints()","[48, 52]","{'A264': [(48, 52)]}",{'A264': 1.0},A264,,"    @GetMapping(""/get-endpoints-status"")
    @Hidden
    public ResponseEntity<Map<String, Boolean>> getDisabledEndpoints() {
        return ResponseEntity.ok(endpointConfiguration.getEndpointStatuses());
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySizeController.java,SplitPdfBySizeController,autoSplitPdf,ResponseEntity<byte[]> autoSplitPdf(SplitPdfBySizeOrCountRequest),"[42, 140]","{'A233': [(42, 45), (51, 140)], 'A234': [(46, 50)]}","{'A233': 0.9494949494949495, 'A234': 0.050505050505050504}",A233,,"    @PostMapping(value = ""/split-by-size-or-count"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Auto split PDF pages into separate documents based on size or count"",
            description =
                    ""split PDF into multiple paged documents based on size/count, ie if 20 pages""
                            + "" and split into 5, it does 5 documents each 4 pages\r\n""
                            + "" if 10MB and each page is 1MB and you enter 2MB then 5 docs each 2MB""
                            + "" (rounded so that it accepts 1.9MB but not 2.1MB) Input:PDF""
                            + "" Output:ZIP-PDF Type:SISO"")
    public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute SplitPdfBySizeOrCountRequest request)
            throws Exception {

        log.debug(""Starting PDF split process with request: {}"", request);
        MultipartFile file = request.getFileInput();

        Path zipFile = Files.createTempFile(""split_documents"", "".zip"");
        log.debug(""Created temporary zip file: {}"", zipFile);

        String filename =
                Filenames.toSimpleFileName(file.getOriginalFilename())
                        .replaceFirst(""[.][^.]+$"", """");
        log.debug(""Base filename for output: {}"", filename);

        byte[] data = null;
        try {
            log.debug(""Reading input file bytes"");
            byte[] pdfBytes = file.getBytes();
            log.debug(""Successfully read {} bytes from input file"", pdfBytes.length);

            log.debug(""Creating ZIP output stream"");
            try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(zipFile))) {
                log.debug(""Loading PDF document"");
                try (PDDocument sourceDocument = pdfDocumentFactory.load(pdfBytes)) {
                    log.debug(
                            ""Successfully loaded PDF with {} pages"",
                            sourceDocument.getNumberOfPages());

                    int type = request.getSplitType();
                    String value = request.getSplitValue();
                    log.debug(""Split type: {}, Split value: {}"", type, value);

                    if (type == 0) {
                        log.debug(""Processing split by size"");
                        long maxBytes = GeneralUtils.convertSizeToBytes(value);
                        log.debug(""Max bytes per document: {}"", maxBytes);
                        handleSplitBySize(sourceDocument, maxBytes, zipOut, filename);
                    } else if (type == 1) {
                        log.debug(""Processing split by page count"");
                        int pageCount = Integer.parseInt(value);
                        log.debug(""Pages per document: {}"", pageCount);
                        handleSplitByPageCount(sourceDocument, pageCount, zipOut, filename);
                    } else if (type == 2) {
                        log.debug(""Processing split by document count"");
                        int documentCount = Integer.parseInt(value);
                        log.debug(""Total number of documents: {}"", documentCount);
                        handleSplitByDocCount(sourceDocument, documentCount, zipOut, filename);
                    } else {
                        log.error(""Invalid split type: {}"", type);
                        throw ExceptionUtils.createIllegalArgumentException(
                                ""error.invalidArgument"",
                                ""Invalid argument: {0}"",
                                ""split type: "" + type);
                    }

                    log.debug(""PDF splitting completed successfully"");
                } catch (Exception e) {
                    ExceptionUtils.logException(""PDF document loading or processing"", e);
                    throw e;
                }
            } catch (IOException e) {
                log.error(""Error creating or writing to ZIP file"", e);
                throw e;
            }

        } catch (Exception e) {
            ExceptionUtils.logException(""PDF splitting process"", e);
            throw e; // Re-throw to ensure proper error response
        } finally {
            try {
                log.debug(""Reading ZIP file data"");
                data = Files.readAllBytes(zipFile);
                log.debug(""Successfully read {} bytes from ZIP file"", data.length);
            } catch (IOException e) {
                log.error(""Error reading ZIP file data"", e);
            }

            try {
                log.debug(""Deleting temporary ZIP file"");
                boolean deleted = Files.deleteIfExists(zipFile);
                log.debug(""Temporary ZIP file deleted: {}"", deleted);
            } catch (IOException e) {
                log.error(""Error deleting temporary ZIP file"", e);
            }
        }

        log.debug(""Returning response with {} bytes of data"", data != null ? data.length : 0);
        return WebResponseUtils.bytesToWebResponse(
                data, filename + "".zip"", MediaType.APPLICATION_OCTET_STREAM);
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySizeController.java,SplitPdfBySizeController,handleSplitBySize,"void handleSplitBySize(PDDocument,long,ZipOutputStream,String)","[142, 268]","{'A233': [(142, 268)]}",{'A233': 1.0},A233,,"    private void handleSplitBySize(
            PDDocument sourceDocument, long maxBytes, ZipOutputStream zipOut, String baseFilename)
            throws IOException {
        log.debug(""Starting handleSplitBySize with maxBytes={}"", maxBytes);

        PDDocument currentDoc =
                pdfDocumentFactory.createNewDocumentBasedOnOldDocument(sourceDocument);
        int fileIndex = 1;
        int totalPages = sourceDocument.getNumberOfPages();
        int pageAdded = 0;

        // Smart size check frequency - check more often with larger documents
        int baseCheckFrequency = 5;

        for (int pageIndex = 0; pageIndex < totalPages; pageIndex++) {
            PDPage page = sourceDocument.getPage(pageIndex);
            log.debug(""Processing page {} of {}"", pageIndex + 1, totalPages);

            // Add the page to current document
            PDPage newPage = new PDPage(page.getCOSObject());
            currentDoc.addPage(newPage);
            pageAdded++;

            // Dynamic size checking based on document size and page count
            boolean shouldCheckSize =
                    (pageAdded % baseCheckFrequency == 0)
                            || (pageIndex == totalPages - 1)
                            || (pageAdded >= 20); // Always check after 20 pages

            if (shouldCheckSize) {
                log.debug(""Performing size check after {} pages"", pageAdded);
                ByteArrayOutputStream checkSizeStream = new ByteArrayOutputStream();
                currentDoc.save(checkSizeStream);
                long actualSize = checkSizeStream.size();
                log.debug(""Current document size: {} bytes (max: {} bytes)"", actualSize, maxBytes);

                if (actualSize > maxBytes) {
                    // We exceeded the limit - remove the last page and save
                    if (currentDoc.getNumberOfPages() > 1) {
                        currentDoc.removePage(currentDoc.getNumberOfPages() - 1);
                        pageIndex--; // Process this page again in the next document
                        log.debug(""Size limit exceeded - removed last page"");
                    }

                    log.debug(
                            ""Saving document with {} pages as part {}"",
                            currentDoc.getNumberOfPages(),
                            fileIndex);
                    saveDocumentToZip(currentDoc, zipOut, baseFilename, fileIndex++);
                    currentDoc = new PDDocument();
                    pageAdded = 0;
                } else if (pageIndex < totalPages - 1) {
                    // We're under the limit, calculate if we might fit more pages
                    // Try to predict how many more similar pages might fit
                    if (actualSize < maxBytes * 0.75 && pageAdded > 0) {
                        // Rather than using a ratio, look ahead to test actual upcoming pages
                        int pagesToLookAhead = Math.min(5, totalPages - pageIndex - 1);

                        if (pagesToLookAhead > 0) {
                            log.debug(
                                    ""Testing {} upcoming pages for potential addition"",
                                    pagesToLookAhead);

                            // Create a temp document with current pages + look-ahead pages
                            PDDocument testDoc = new PDDocument();
                            // First copy existing pages
                            for (int i = 0; i < currentDoc.getNumberOfPages(); i++) {
                                testDoc.addPage(new PDPage(currentDoc.getPage(i).getCOSObject()));
                            }

                            // Try adding look-ahead pages one by one
                            int extraPagesAdded = 0;
                            for (int i = 0; i < pagesToLookAhead; i++) {
                                int testPageIndex = pageIndex + 1 + i;
                                PDPage testPage = sourceDocument.getPage(testPageIndex);
                                testDoc.addPage(new PDPage(testPage.getCOSObject()));

                                // Check if we're still under size
                                ByteArrayOutputStream testStream = new ByteArrayOutputStream();
                                testDoc.save(testStream);
                                long testSize = testStream.size();

                                if (testSize <= maxBytes) {
                                    extraPagesAdded++;
                                    log.debug(
                                            ""Test: Can add page {} (size would be {})"",
                                            testPageIndex + 1,
                                            testSize);
                                } else {
                                    log.debug(
                                            ""Test: Cannot add page {} (size would be {})"",
                                            testPageIndex + 1,
                                            testSize);
                                    break;
                                }
                            }

                            testDoc.close();

                            // Add the pages we verified would fit
                            if (extraPagesAdded > 0) {
                                log.debug(""Adding {} verified pages ahead"", extraPagesAdded);
                                for (int i = 0; i < extraPagesAdded; i++) {
                                    int extraPageIndex = pageIndex + 1 + i;
                                    PDPage extraPage = sourceDocument.getPage(extraPageIndex);
                                    currentDoc.addPage(new PDPage(extraPage.getCOSObject()));
                                }
                                pageIndex += extraPagesAdded;
                                pageAdded += extraPagesAdded;
                            }
                        }
                    }
                }
            }
        }

        // Save final document if it has any pages
        if (currentDoc.getNumberOfPages() > 0) {
            log.debug(
                    ""Saving final document with {} pages as part {}"",
                    currentDoc.getNumberOfPages(),
                    fileIndex);
            saveDocumentToZip(currentDoc, zipOut, baseFilename, fileIndex++);
        }

        log.debug(""Completed handleSplitBySize with {} document parts created"", fileIndex - 1);
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySizeController.java,SplitPdfBySizeController,handleSplitByPageCount,"void handleSplitByPageCount(PDDocument,int,ZipOutputStream,String)","[270, 369]","{'A233': [(270, 369)]}",{'A233': 1.0},A233,,"    private void handleSplitByPageCount(
            PDDocument sourceDocument, int pageCount, ZipOutputStream zipOut, String baseFilename)
            throws IOException {
        log.debug(""Starting handleSplitByPageCount with pageCount={}"", pageCount);
        int currentPageCount = 0;
        log.debug(""Creating initial output document"");
        PDDocument currentDoc = null;
        try {
            currentDoc = pdfDocumentFactory.createNewDocumentBasedOnOldDocument(sourceDocument);
            log.debug(""Successfully created initial output document"");
        } catch (Exception e) {
            ExceptionUtils.logException(""initial output document creation"", e);
            throw ExceptionUtils.createFileProcessingException(""split"", e);
        }

        int fileIndex = 1;
        int pageIndex = 0;
        int totalPages = sourceDocument.getNumberOfPages();
        log.debug(""Processing {} pages"", totalPages);

        try {
            for (PDPage page : sourceDocument.getPages()) {
                pageIndex++;
                log.debug(""Processing page {} of {}"", pageIndex, totalPages);

                try {
                    log.debug(""Adding page {} to current document"", pageIndex);
                    currentDoc.addPage(page);
                    log.debug(""Successfully added page {} to current document"", pageIndex);
                } catch (Exception e) {
                    log.error(""Error adding page {} to current document"", pageIndex, e);
                    throw ExceptionUtils.createFileProcessingException(""split"", e);
                }

                currentPageCount++;
                log.debug(""Current page count: {}/{}"", currentPageCount, pageCount);

                if (currentPageCount == pageCount) {
                    log.debug(
                            ""Reached target page count ({}), saving current document as part {}"",
                            pageCount,
                            fileIndex);
                    try {
                        saveDocumentToZip(currentDoc, zipOut, baseFilename, fileIndex++);
                        log.debug(""Successfully saved document part {}"", fileIndex - 1);
                    } catch (Exception e) {
                        log.error(""Error saving document part {}"", fileIndex - 1, e);
                        throw e;
                    }

                    try {
                        log.debug(""Creating new document for next part"");
                        currentDoc = new PDDocument();
                        log.debug(""Successfully created new document"");
                    } catch (Exception e) {
                        log.error(""Error creating new document for next part"", e);
                        throw ExceptionUtils.createFileProcessingException(""split"", e);
                    }

                    currentPageCount = 0;
                    log.debug(""Reset current page count to 0"");
                }
            }
        } catch (Exception e) {
            log.error(""Error iterating through pages"", e);
            throw ExceptionUtils.createFileProcessingException(""split"", e);
        }

        // Add the last document if it contains any pages
        try {
            if (currentDoc.getPages().getCount() != 0) {
                log.debug(
                        ""Saving final document with {} pages as part {}"",
                        currentDoc.getPages().getCount(),
                        fileIndex);
                try {
                    saveDocumentToZip(currentDoc, zipOut, baseFilename, fileIndex++);
                    log.debug(""Successfully saved final document part {}"", fileIndex - 1);
                } catch (Exception e) {
                    log.error(""Error saving final document part {}"", fileIndex - 1, e);
                    throw e;
                }
            } else {
                log.debug(""Final document has no pages, skipping"");
            }
        } catch (Exception e) {
            log.error(""Error checking or saving final document"", e);
            throw ExceptionUtils.createFileProcessingException(""split"", e);
        } finally {
            try {
                log.debug(""Closing final document"");
                currentDoc.close();
                log.debug(""Successfully closed final document"");
            } catch (Exception e) {
                log.error(""Error closing final document"", e);
            }
        }

        log.debug(""Completed handleSplitByPageCount with {} document parts created"", fileIndex - 1);
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySizeController.java,SplitPdfBySizeController,handleSplitByDocCount,"void handleSplitByDocCount(PDDocument,int,ZipOutputStream,String)","[371, 429]","{'A233': [(371, 429)]}",{'A233': 1.0},A233,,"    private void handleSplitByDocCount(
            PDDocument sourceDocument,
            int documentCount,
            ZipOutputStream zipOut,
            String baseFilename)
            throws IOException {
        log.debug(""Starting handleSplitByDocCount with documentCount={}"", documentCount);
        int totalPageCount = sourceDocument.getNumberOfPages();
        log.debug(""Total pages in source document: {}"", totalPageCount);

        int pagesPerDocument = totalPageCount / documentCount;
        int extraPages = totalPageCount % documentCount;
        log.debug(""Pages per document: {}, Extra pages: {}"", pagesPerDocument, extraPages);

        int currentPageIndex = 0;
        int fileIndex = 1;

        for (int i = 0; i < documentCount; i++) {
            log.debug(""Creating document {} of {}"", i + 1, documentCount);
            PDDocument currentDoc = null;
            try {
                currentDoc = pdfDocumentFactory.createNewDocumentBasedOnOldDocument(sourceDocument);
                log.debug(""Successfully created document {} of {}"", i + 1, documentCount);
            } catch (Exception e) {
                log.error(""Error creating document {} of {}"", i + 1, documentCount, e);
                throw ExceptionUtils.createFileProcessingException(""split"", e);
            }

            int pagesToAdd = pagesPerDocument + (i < extraPages ? 1 : 0);
            log.debug(""Adding {} pages to document {}"", pagesToAdd, i + 1);

            for (int j = 0; j < pagesToAdd; j++) {
                try {
                    log.debug(
                            ""Adding page {} (index {}) to document {}"",
                            j + 1,
                            currentPageIndex,
                            i + 1);
                    currentDoc.addPage(sourceDocument.getPage(currentPageIndex));
                    log.debug(""Successfully added page {} to document {}"", j + 1, i + 1);
                    currentPageIndex++;
                } catch (Exception e) {
                    log.error(""Error adding page {} to document {}"", j + 1, i + 1, e);
                    throw ExceptionUtils.createFileProcessingException(""split"", e);
                }
            }

            try {
                log.debug(""Saving document {} with {} pages"", i + 1, pagesToAdd);
                saveDocumentToZip(currentDoc, zipOut, baseFilename, fileIndex++);
                log.debug(""Successfully saved document {}"", i + 1);
            } catch (Exception e) {
                log.error(""Error saving document {}"", i + 1, e);
                throw e;
            }
        }

        log.debug(""Completed handleSplitByDocCount with {} documents created"", documentCount);
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySizeController.java,SplitPdfBySizeController,saveDocumentToZip,"void saveDocumentToZip(PDDocument,ZipOutputStream,String,int)","[431, 473]","{'A233': [(431, 473)]}",{'A233': 1.0},A233,,"    private void saveDocumentToZip(
            PDDocument document, ZipOutputStream zipOut, String baseFilename, int index)
            throws IOException {
        log.debug(""Starting saveDocumentToZip for document part {}"", index);
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();

        try {
            log.debug(""Saving document part {} to byte array"", index);
            document.save(outStream);
            log.debug(""Successfully saved document part {} ({} bytes)"", index, outStream.size());
        } catch (Exception e) {
            log.error(""Error saving document part {} to byte array"", index, e);
            throw ExceptionUtils.createFileProcessingException(""split"", e);
        }

        try {
            log.debug(""Closing document part {}"", index);
            document.close();
            log.debug(""Successfully closed document part {}"", index);
        } catch (Exception e) {
            log.error(""Error closing document part {}"", index, e);
            // Continue despite close error
        }

        try {
            // Create a new zip entry
            String entryName = baseFilename + ""_"" + index + "".pdf"";
            log.debug(""Creating ZIP entry: {}"", entryName);
            ZipEntry zipEntry = new ZipEntry(entryName);
            zipOut.putNextEntry(zipEntry);

            byte[] bytes = outStream.toByteArray();
            log.debug(""Writing {} bytes to ZIP entry"", bytes.length);
            zipOut.write(bytes);

            log.debug(""Closing ZIP entry"");
            zipOut.closeEntry();
            log.debug(""Successfully added document part {} to ZIP"", index);
        } catch (Exception e) {
            log.error(""Error adding document part {} to ZIP"", index, e);
            throw ExceptionUtils.createFileProcessingException(""split"", e);
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/ToSinglePageController.java,ToSinglePageController,pdfToSinglePage,ResponseEntity<byte[]> pdfToSinglePage(PDFFile),"[36, 96]","{'A233': [(36, 39), (44, 96)], 'A234': [(40, 43)]}","{'A233': 0.9344262295081968, 'A234': 0.06557377049180328}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/pdf-to-single-page"")
    @Operation(
            summary = ""Convert a multi-page PDF into a single long page PDF"",
            description =
                    ""This endpoint converts a multi-page PDF document into a single paged PDF""
                            + "" document. The width of the single page will be same as the input's""
                            + "" width, but the height will be the sum of all the pages' heights.""
                            + "" Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> pdfToSinglePage(@ModelAttribute PDFFile request)
            throws IOException {

        // Load the source document
        PDDocument sourceDocument = pdfDocumentFactory.load(request);

        // Calculate total height and max width
        float totalHeight = 0;
        float maxWidth = 0;
        for (PDPage page : sourceDocument.getPages()) {
            PDRectangle pageSize = page.getMediaBox();
            totalHeight += pageSize.getHeight();
            maxWidth = Math.max(maxWidth, pageSize.getWidth());
        }

        // Create new document and page with calculated dimensions
        PDDocument newDocument =
                pdfDocumentFactory.createNewDocumentBasedOnOldDocument(sourceDocument);
        PDPage newPage = new PDPage(new PDRectangle(maxWidth, totalHeight));
        newDocument.addPage(newPage);

        // Initialize the content stream of the new page
        PDPageContentStream contentStream = new PDPageContentStream(newDocument, newPage);
        contentStream.close();

        LayerUtility layerUtility = new LayerUtility(newDocument);
        float yOffset = totalHeight;

        // For each page, copy its content to the new page at the correct offset
        int pageIndex = 0;
        for (PDPage page : sourceDocument.getPages()) {
            PDFormXObject form = layerUtility.importPageAsForm(sourceDocument, pageIndex);
            AffineTransform af =
                    AffineTransform.getTranslateInstance(
                            0, yOffset - page.getMediaBox().getHeight());
            layerUtility.wrapInSaveRestore(newPage);
            String defaultLayerName = ""Layer"" + pageIndex;
            layerUtility.appendFormAsLayer(newPage, form, af, defaultLayerName);
            yOffset -= page.getMediaBox().getHeight();
            pageIndex++;
        }

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        newDocument.save(baos);
        newDocument.close();
        sourceDocument.close();

        byte[] result = baos.toByteArray();
        return WebResponseUtils.bytesToWebResponse(
                result,
                request.getFileInput().getOriginalFilename().replaceFirst(""[.][^.]+$"", """")
                        + ""_singlePage.pdf"");
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RotationController.java,RotationController,rotatePDF,ResponseEntity<byte[]> rotatePDF(RotatePDFRequest),"[34, 66]","{'A233': [(34, 37), (40, 43), (47, 48), (51, 62), (66, 66)], 'A234': [(38, 39), (44, 46), (49, 50)], 'A246': [(63, 65)]}","{'A233': 0.696969696969697, 'A234': 0.21212121212121213, 'A246': 0.09090909090909091}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RotationControllerTest.java,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/rotate-pdf"")
    @Operation(
            summary = ""Rotate a PDF file"",
            description =
                    ""This endpoint rotates a given PDF file by a specified angle. The angle must be""
                            + "" a multiple of 90. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> rotatePDF(@ModelAttribute RotatePDFRequest request)
            throws IOException {
        MultipartFile pdfFile = request.getFileInput();
        Integer angle = request.getAngle();

        // Validate the angle is a multiple of 90
        if (angle % 90 != 0) {
            throw ExceptionUtils.createIllegalArgumentException(
                    ""error.angleNotMultipleOf90"", ""Angle must be a multiple of 90"");
        }

        // Load the PDF document
        PDDocument document = pdfDocumentFactory.load(request);

        // Get the list of pages in the document
        PDPageTree pages = document.getPages();

        for (PDPage page : pages) {
            page.setRotation(page.getRotation() + angle);
        }

        return WebResponseUtils.pdfDocToWebResponse(
                document,
                Filenames.toSimpleFileName(pdfFile.getOriginalFilename())
                                .replaceFirst(""[.][^.]+$"", """")
                        + ""_rotated.pdf"");
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPDFController.java,SplitPDFController,splitPdf,ResponseEntity<byte[]> splitPdf(PDFWithPageNums),"[44, 163]","{'A233': [(44, 47), (52, 108), (110, 128), (130, 159), (161, 163)], 'A238': [(129, 129), (160, 160)], 'A234': [(48, 51)], 'A244': [(109, 109)]}","{'A233': 0.9416666666666667, 'A238': 0.016666666666666666, 'A234': 0.03333333333333333, 'A244': 0.008333333333333333}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/split-pages"")
    @Operation(
            summary = ""Split a PDF file into separate documents"",
            description =
                    ""This endpoint splits a given PDF file into separate documents based on the""
                            + "" specified page numbers or ranges. Users can specify pages using""
                            + "" individual numbers, ranges, or 'all' for every page. Input:PDF""
                            + "" Output:PDF Type:SIMO"")
    public ResponseEntity<byte[]> splitPdf(@ModelAttribute PDFWithPageNums request)
            throws IOException {

        PDDocument document = null;
        Path zipFile = null;
        List<ByteArrayOutputStream> splitDocumentsBoas = new ArrayList<>();

        try {

            MultipartFile file = request.getFileInput();
            String pages = request.getPageNumbers();
            // open the pdf document

            document = pdfDocumentFactory.load(file);
            // PdfMetadata metadata = PdfMetadataService.extractMetadataFromPdf(document);
            int totalPages = document.getNumberOfPages();
            List<Integer> pageNumbers = request.getPageNumbersList(document, false);
            if (!pageNumbers.contains(totalPages - 1)) {
                // Create a mutable ArrayList so we can add to it
                pageNumbers = new ArrayList<>(pageNumbers);
                pageNumbers.add(totalPages - 1);
            }

            log.debug(
                    ""Splitting PDF into pages: {}"",
                    pageNumbers.stream().map(String::valueOf).collect(Collectors.joining("","")));

            // split the document
            splitDocumentsBoas = new ArrayList<>();
            int previousPageNumber = 0;
            for (int splitPoint : pageNumbers) {
                try (PDDocument splitDocument =
                        pdfDocumentFactory.createNewDocumentBasedOnOldDocument(document)) {
                    for (int i = previousPageNumber; i <= splitPoint; i++) {
                        PDPage page = document.getPage(i);
                        splitDocument.addPage(page);
                        log.debug(""Adding page {} to split document"", i);
                    }
                    previousPageNumber = splitPoint + 1;

                    // Transfer metadata to split pdf
                    // PdfMetadataService.setMetadataToPdf(splitDocument, metadata);

                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    splitDocument.save(baos);

                    splitDocumentsBoas.add(baos);
                } catch (Exception e) {
                    ExceptionUtils.logException(""document splitting and saving"", e);
                    throw e;
                }
            }

            // closing the original document
            document.close();

            zipFile = Files.createTempFile(""split_documents"", "".zip"");

            String filename =
                    Filenames.toSimpleFileName(file.getOriginalFilename())
                            .replaceFirst(""[.][^.]+$"", """");
            try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(zipFile))) {
                // loop through the split documents and write them to the zip file
                for (int i = 0; i < splitDocumentsBoas.size(); i++) {
                    String fileName = filename + ""_"" + (i + 1) + "".pdf"";
                    ByteArrayOutputStream baos = splitDocumentsBoas.get(i);
                    byte[] pdf = baos.toByteArray();

                    // Add PDF file to the zip
                    ZipEntry pdfEntry = new ZipEntry(fileName);
                    zipOut.putNextEntry(pdfEntry);
                    zipOut.write(pdf);
                    zipOut.closeEntry();

                    log.debug(""Wrote split document {} to zip file"", fileName);
                }
            } catch (Exception e) {
                log.error(""Failed writing to zip"", e);
                throw e;
            }

            log.debug(""Successfully created zip file with split documents: {}"", zipFile.toString());
            byte[] data = Files.readAllBytes(zipFile);
            Files.deleteIfExists(zipFile);

            // return the Resource in the response
            return WebResponseUtils.bytesToWebResponse(
                    data, filename + "".zip"", MediaType.APPLICATION_OCTET_STREAM);

        } finally {
            try {
                // Close the main document
                if (document != null) {
                    document.close();
                }

                // Close all ByteArrayOutputStreams
                for (ByteArrayOutputStream baos : splitDocumentsBoas) {
                    if (baos != null) {
                        baos.close();
                    }
                }

                // Delete temporary zip file
                if (zipFile != null) {
                    Files.deleteIfExists(zipFile);
                }
            } catch (Exception e) {
                log.error(""Error while cleaning up resources"", e);
            }
        }
    }
"
stirling.software.SPDF.controller.api.filters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java,FilterController,containsText,ResponseEntity<byte[]> containsText(ContainsTextRequest),"[40, 55]","{'A233': [(40, 52), (54, 55)], 'A243': [(53, 53)]}","{'A233': 0.9375, 'A243': 0.0625}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/filter-contains-text"")
    @Operation(
            summary = ""Checks if a PDF contains set text, returns true if does"",
            description = ""Input:PDF Output:Boolean Type:SISO"")
    public ResponseEntity<byte[]> containsText(@ModelAttribute ContainsTextRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        String text = request.getText();
        String pageNumber = request.getPageNumbers();

        PDDocument pdfDocument = pdfDocumentFactory.load(inputFile);
        if (PdfUtils.hasText(pdfDocument, pageNumber, text))
            return WebResponseUtils.pdfDocToWebResponse(
                    pdfDocument, Filenames.toSimpleFileName(inputFile.getOriginalFilename()));
        return null;
    }
"
stirling.software.SPDF.controller.api.filters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java,FilterController,containsImage,ResponseEntity<byte[]> containsImage(PDFWithPageNums),"[58, 72]","{'A233': [(58, 69), (71, 72)], 'A243': [(70, 70)]}","{'A233': 0.9333333333333333, 'A243': 0.06666666666666667}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/filter-contains-image"")
    @Operation(
            summary = ""Checks if a PDF contains an image"",
            description = ""Input:PDF Output:Boolean Type:SISO"")
    public ResponseEntity<byte[]> containsImage(@ModelAttribute PDFWithPageNums request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        String pageNumber = request.getPageNumbers();

        PDDocument pdfDocument = pdfDocumentFactory.load(inputFile);
        if (PdfUtils.hasImages(pdfDocument, pageNumber))
            return WebResponseUtils.pdfDocToWebResponse(
                    pdfDocument, Filenames.toSimpleFileName(inputFile.getOriginalFilename()));
        return null;
    }
"
stirling.software.SPDF.controller.api.filters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java,FilterController,pageCount,ResponseEntity<byte[]> pageCount(PDFComparisonAndCount),"[74, 105]","{'A233': [(74, 80), (82, 90), (92, 93), (95, 96), (98, 105)], 'A234': [(81, 81), (91, 91), (94, 94), (97, 97)]}","{'A233': 0.875, 'A234': 0.125}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/filter-page-count"")
    @Operation(
            summary = ""Checks if a PDF is greater, less or equal to a setPageCount"",
            description = ""Input:PDF Output:Boolean Type:SISO"")
    public ResponseEntity<byte[]> pageCount(@ModelAttribute PDFComparisonAndCount request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        int pageCount = request.getPageCount();
        String comparator = request.getComparator();
        // Load the PDF
        PDDocument document = pdfDocumentFactory.load(inputFile);
        int actualPageCount = document.getNumberOfPages();

        boolean valid = false;
        // Perform the comparison
        switch (comparator) {
            case ""Greater"":
                valid = actualPageCount > pageCount;
                break;
            case ""Equal"":
                valid = actualPageCount == pageCount;
                break;
            case ""Less"":
                valid = actualPageCount < pageCount;
                break;
            default:
                throw ExceptionUtils.createInvalidArgumentException(""comparator"", comparator);
        }

        if (valid) return WebResponseUtils.multiPartFileToWebResponse(inputFile);
        return null;
    }
"
stirling.software.SPDF.controller.api.filters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java,FilterController,pageSize,ResponseEntity<byte[]> pageSize(PageSizeRequest),"[107, 148]","{'A233': [(107, 148)]}",{'A233': 1.0},A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/filter-page-size"")
    @Operation(
            summary = ""Checks if a PDF is of a certain size"",
            description = ""Input:PDF Output:Boolean Type:SISO"")
    public ResponseEntity<byte[]> pageSize(@ModelAttribute PageSizeRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        String standardPageSize = request.getStandardPageSize();
        String comparator = request.getComparator();

        // Load the PDF
        PDDocument document = pdfDocumentFactory.load(inputFile);

        PDPage firstPage = document.getPage(0);
        PDRectangle actualPageSize = firstPage.getMediaBox();

        // Calculate the area of the actual page size
        float actualArea = actualPageSize.getWidth() * actualPageSize.getHeight();

        // Get the standard size and calculate its area
        PDRectangle standardSize = PdfUtils.textToPageSize(standardPageSize);
        float standardArea = standardSize.getWidth() * standardSize.getHeight();

        boolean valid = false;
        // Perform the comparison
        switch (comparator) {
            case ""Greater"":
                valid = actualArea > standardArea;
                break;
            case ""Equal"":
                valid = actualArea == standardArea;
                break;
            case ""Less"":
                valid = actualArea < standardArea;
                break;
            default:
                throw ExceptionUtils.createInvalidArgumentException(""comparator"", comparator);
        }

        if (valid) return WebResponseUtils.multiPartFileToWebResponse(inputFile);
        return null;
    }
"
stirling.software.SPDF.controller.api.filters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java,FilterController,fileSize,ResponseEntity<byte[]> fileSize(FileSizeRequest),"[150, 181]","{'A233': [(150, 156), (158, 166), (168, 169), (171, 172), (174, 181)], 'A234': [(157, 157), (167, 167), (170, 170), (173, 173)]}","{'A233': 0.875, 'A234': 0.125}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/filter-file-size"")
    @Operation(
            summary = ""Checks if a PDF is a set file size"",
            description = ""Input:PDF Output:Boolean Type:SISO"")
    public ResponseEntity<byte[]> fileSize(@ModelAttribute FileSizeRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        long fileSize = request.getFileSize();
        String comparator = request.getComparator();

        // Get the file size
        long actualFileSize = inputFile.getSize();

        boolean valid = false;
        // Perform the comparison
        switch (comparator) {
            case ""Greater"":
                valid = actualFileSize > fileSize;
                break;
            case ""Equal"":
                valid = actualFileSize == fileSize;
                break;
            case ""Less"":
                valid = actualFileSize < fileSize;
                break;
            default:
                throw ExceptionUtils.createInvalidArgumentException(""comparator"", comparator);
        }

        if (valid) return WebResponseUtils.multiPartFileToWebResponse(inputFile);
        return null;
    }
"
stirling.software.SPDF.controller.api.filters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/filters/FilterController.java,FilterController,pageRotation,ResponseEntity<byte[]> pageRotation(PageRotationRequest),"[183, 217]","{'A233': [(183, 217)]}",{'A233': 1.0},A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/filter-page-rotation"")
    @Operation(
            summary = ""Checks if a PDF is of a certain rotation"",
            description = ""Input:PDF Output:Boolean Type:SISO"")
    public ResponseEntity<byte[]> pageRotation(@ModelAttribute PageRotationRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        int rotation = request.getRotation();
        String comparator = request.getComparator();

        // Load the PDF
        PDDocument document = pdfDocumentFactory.load(inputFile);

        // Get the rotation of the first page
        PDPage firstPage = document.getPage(0);
        int actualRotation = firstPage.getRotation();
        boolean valid = false;
        // Perform the comparison
        switch (comparator) {
            case ""Greater"":
                valid = actualRotation > rotation;
                break;
            case ""Equal"":
                valid = actualRotation == rotation;
                break;
            case ""Less"":
                valid = actualRotation < rotation;
                break;
            default:
                throw ExceptionUtils.createInvalidArgumentException(""comparator"", comparator);
        }

        if (valid) return WebResponseUtils.multiPartFileToWebResponse(inputFile);
        return null;
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertOfficeController.java,ConvertOfficeController,convertToPdf,File convertToPdf(MultipartFile),"[42, 80]","{'A233': [(42, 43), (45, 80)], 'A243': [(44, 44)]}","{'A233': 0.9743589743589743, 'A243': 0.02564102564102564}",A233,,"    public File convertToPdf(MultipartFile inputFile) throws IOException, InterruptedException {
        // Check for valid file extension
        String originalFilename = Filenames.toSimpleFileName(inputFile.getOriginalFilename());
        if (originalFilename == null
                || !isValidFileExtension(FilenameUtils.getExtension(originalFilename))) {
            throw new IllegalArgumentException(""Invalid file extension"");
        }

        // Save the uploaded file to a temporary location
        Path tempInputFile =
                Files.createTempFile(""input_"", ""."" + FilenameUtils.getExtension(originalFilename));
        inputFile.transferTo(tempInputFile);

        // Prepare the output file path
        Path tempOutputFile = Files.createTempFile(""output_"", "".pdf"");

        try {
            // Run the LibreOffice command
            List<String> command =
                    new ArrayList<>(
                            Arrays.asList(
                                    runtimePathConfig.getUnoConvertPath(),
                                    ""--port"",
                                    ""2003"",
                                    ""--convert-to"",
                                    ""pdf"",
                                    tempInputFile.toString(),
                                    tempOutputFile.toString()));
            ProcessExecutorResult returnCode =
                    ProcessExecutor.getInstance(ProcessExecutor.Processes.LIBRE_OFFICE)
                            .runCommandWithOutputHandling(command);

            // Read the converted PDF file
            return tempOutputFile.toFile();
        } finally {
            // Clean up the temporary files
            if (tempInputFile != null) Files.deleteIfExists(tempInputFile);
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertOfficeController.java,ConvertOfficeController,isValidFileExtension,boolean isValidFileExtension(String),"[82, 85]","{'A233': [(82, 85)]}",{'A233': 1.0},A233,,"    private boolean isValidFileExtension(String fileExtension) {
        String extensionPattern = ""^(?i)[a-z0-9]{2,4}$"";
        return fileExtension.matches(extensionPattern);
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertOfficeController.java,ConvertOfficeController,processFileToPDF,ResponseEntity<byte[]> processFileToPDF(GeneralFile),"[87, 111]","{'A233': [(87, 90), (94, 94), (96, 111)], 'A234': [(91, 93), (95, 95)]}","{'A233': 0.84, 'A234': 0.16}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/file/pdf"")
    @Operation(
            summary = ""Convert a file to a PDF using LibreOffice"",
            description =
                    ""This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY""
                            + "" Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile)
            throws Exception {
        MultipartFile inputFile = generalFile.getFileInput();
        // unused but can start server instance if startup time is to long
        // LibreOfficeListener.getInstance().start();
        File file = null;
        try {
            file = convertToPdf(inputFile);

            PDDocument doc = pdfDocumentFactory.load(file);
            return WebResponseUtils.pdfDocToWebResponse(
                    doc,
                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())
                                    .replaceFirst(""[.][^.]+$"", """")
                            + ""_convertedToPDF.pdf"");
        } finally {
            if (file != null) file.delete();
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToHtml.java,ConvertPDFToHtml,processPdfToHTML,ResponseEntity<byte[]> processPdfToHTML(PDFFile),"[21, 30]","{'A242': [(21, 25), (28, 30)], 'A234': [(26, 27)]}","{'A242': 0.8, 'A234': 0.2}",A242,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/pdf/html"")
    @Operation(
            summary = ""Convert PDF to HTML"",
            description =
                    ""This endpoint converts a PDF file to HTML format. Input:PDF Output:HTML Type:SISO"")
    public ResponseEntity<byte[]> processPdfToHTML(@ModelAttribute PDFFile file) throws Exception {
        MultipartFile inputFile = file.getFileInput();
        PDFToFile pdfToFile = new PDFToFile();
        return pdfToFile.processPdfToHtml(inputFile);
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java,ConvertMarkdownToPdf,markdownToPdf,ResponseEntity<byte[]> markdownToPdf(GeneralFile),"[48, 98]","{'A233': [(48, 51), (54, 55), (57, 62), (64, 69), (73, 73), (80, 83), (85, 98)], 'A265': [(70, 72), (74, 79)], 'A234': [(52, 53), (56, 56)], 'A251': [(84, 84)], 'A243': [(63, 63)]}","{'A233': 0.7254901960784313, 'A265': 0.17647058823529413, 'A234': 0.058823529411764705, 'A251': 0.0196078431372549, 'A243': 0.0196078431372549}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/markdown/pdf"")
    @Operation(
            summary = ""Convert a Markdown file to PDF"",
            description =
                    ""This endpoint takes a Markdown file input, converts it to HTML, and then to""
                            + "" PDF format. Input:MARKDOWN Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> markdownToPdf(@ModelAttribute GeneralFile generalFile)
            throws Exception {
        MultipartFile fileInput = generalFile.getFileInput();

        if (fileInput == null) {
            throw ExceptionUtils.createIllegalArgumentException(
                    ""error.fileFormatRequired"", ""File must be in {0} format"", ""Markdown"");
        }

        String originalFilename = Filenames.toSimpleFileName(fileInput.getOriginalFilename());
        if (originalFilename == null || !originalFilename.endsWith("".md"")) {
            throw ExceptionUtils.createIllegalArgumentException(
                    ""error.fileFormatRequired"", ""File must be in {0} format"", "".md"");
        }

        // Convert Markdown to HTML using CommonMark
        List<Extension> extensions = List.of(TablesExtension.create());
        Parser parser = Parser.builder().extensions(extensions).build();

        Node document = parser.parse(new String(fileInput.getBytes()));
        HtmlRenderer renderer =
                HtmlRenderer.builder()
                        .attributeProviderFactory(context -> new TableAttributeProvider())
                        .extensions(extensions)
                        .build();

        String htmlContent = renderer.render(document);

        boolean disableSanitize =
                Boolean.TRUE.equals(applicationProperties.getSystem().getDisableSanitize());

        byte[] pdfBytes =
                FileToPdf.convertHtmlToPdf(
                        runtimePathConfig.getWeasyPrintPath(),
                        null,
                        htmlContent.getBytes(),
                        ""converted.html"",
                        disableSanitize,
                        tempFileManager);
        pdfBytes = pdfDocumentFactory.createNewBytesBasedOnOldDocument(pdfBytes);
        String outputFilename =
                originalFilename.replaceFirst(""[.][^.]+$"", """")
                        + "".pdf""; // Remove file extension and append .pdf
        return WebResponseUtils.bytesToWebResponse(pdfBytes, outputFilename);
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java,TableAttributeProvider,setAttributes,"void setAttributes(Node,String,Map<String, String>)","[102, 107]","{'A265': [(102, 107)]}",{'A265': 1.0},A265,,"    @Override
    public void setAttributes(Node node, String tagName, Map<String, String> attributes) {
        if (node instanceof TableBlock) {
            attributes.put(""class"", ""table table-striped"");
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java,ConvertWebsiteToPDF,urlToPdf,ResponseEntity<byte[]> urlToPdf(UrlToPdfRequest),"[43, 103]","{'A233': [(43, 46), (49, 61), (65, 66), (69, 78), (80, 98), (100, 103)], 'A238': [(99, 99)], 'A234': [(47, 48)], 'A255': [(62, 64), (67, 68)], 'A235': [(79, 79)]}","{'A233': 0.8524590163934426, 'A238': 0.01639344262295082, 'A234': 0.03278688524590164, 'A255': 0.08196721311475409, 'A235': 0.01639344262295082}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPdfTest.java,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/url/pdf"")
    @Operation(
            summary = ""Convert a URL to a PDF"",
            description =
                    ""This endpoint fetches content from a URL and converts it to a PDF format.""
                            + "" Input:N/A Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> urlToPdf(@ModelAttribute UrlToPdfRequest request)
            throws IOException, InterruptedException {
        String URL = request.getUrlInput();

        if (!applicationProperties.getSystem().getEnableUrlToPDF()) {
            throw ExceptionUtils.createIllegalArgumentException(
                    ""error.endpointDisabled"", ""This endpoint has been disabled by the admin"");
        }
        // Validate the URL format
        if (!URL.matches(""^https?://.*"") || !GeneralUtils.isValidURL(URL)) {
            throw ExceptionUtils.createInvalidArgumentException(
                    ""URL"", ""provided format is invalid"");
        }

        // validate the URL is reachable
        if (!GeneralUtils.isURLReachable(URL)) {
            throw ExceptionUtils.createIllegalArgumentException(
                    ""error.urlNotReachable"", ""URL is not reachable, please provide a valid URL"");
        }

        Path tempOutputFile = null;
        PDDocument doc = null;
        try {
            // Prepare the output file path
            tempOutputFile = Files.createTempFile(""output_"", "".pdf"");

            // Prepare the WeasyPrint command
            List<String> command = new ArrayList<>();
            command.add(runtimePathConfig.getWeasyPrintPath());
            command.add(URL);
            command.add(""--pdf-forms"");
            command.add(tempOutputFile.toString());

            ProcessExecutorResult returnCode =
                    ProcessExecutor.getInstance(ProcessExecutor.Processes.WEASYPRINT)
                            .runCommandWithOutputHandling(command);

            // Load the PDF using pdfDocumentFactory
            doc = pdfDocumentFactory.load(tempOutputFile.toFile());

            // Convert URL to a safe filename
            String outputFilename = convertURLToFileName(URL);

            return WebResponseUtils.pdfDocToWebResponse(doc, outputFilename);
        } finally {

            if (tempOutputFile != null) {
                try {
                    Files.deleteIfExists(tempOutputFile);
                } catch (IOException e) {
                    log.error(""Error deleting temporary output file"", e);
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java,ConvertWebsiteToPDF,convertURLToFileName,String convertURLToFileName(String),"[105, 111]","{'A233': [(105, 111)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPdfTest.java,"    private String convertURLToFileName(String url) {
        String safeName = url.replaceAll(""[^a-zA-Z0-9]"", ""_"");
        if (safeName.length() > 50) {
            safeName = safeName.substring(0, 50); // restrict to 50 characters
        }
        return safeName + "".pdf"";
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ExtractCSVController.java,ExtractCSVController,pdfToCsv,ResponseEntity<?> pdfToCsv(PDFWithPageNums),"[49, 90]","{'A233': [(49, 52), (57, 58), (62, 87), (90, 90)], 'A266': [(88, 89)], 'A256': [(61, 61)], 'A234': [(53, 56), (59, 60)]}","{'A233': 0.7857142857142857, 'A266': 0.047619047619047616, 'A256': 0.023809523809523808, 'A234': 0.14285714285714285}",A233,,"    @PostMapping(value = ""/pdf/csv"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Extracts a CSV document from a PDF"",
            description =
                    ""This operation takes an input PDF file and returns CSV file of whole page.""
                            + "" Input:PDF Output:CSV Type:SISO"")
    public ResponseEntity<?> pdfToCsv(@ModelAttribute PDFWithPageNums request) throws Exception {
        String baseName = getBaseName(request.getFileInput().getOriginalFilename());
        List<CsvEntry> csvEntries = new ArrayList<>();

        try (PDDocument document = pdfDocumentFactory.load(request)) {
            List<Integer> pages = request.getPageNumbersList(document, true);
            SpreadsheetExtractionAlgorithm sea = new SpreadsheetExtractionAlgorithm();
            CSVFormat format =
                    CSVFormat.EXCEL.builder().setEscape('""').setQuoteMode(QuoteMode.ALL).build();

            for (int pageNum : pages) {
                try (ObjectExtractor extractor = new ObjectExtractor(document)) {
                    log.info(""{}"", pageNum);
                    Page page = extractor.extract(pageNum);
                    List<Table> tables = sea.extract(page);

                    for (int i = 0; i < tables.size(); i++) {
                        StringWriter sw = new StringWriter();
                        FlexibleCSVWriter csvWriter = new FlexibleCSVWriter(format);
                        csvWriter.write(sw, Collections.singletonList(tables.get(i)));

                        String entryName = generateEntryName(baseName, pageNum, i + 1);
                        csvEntries.add(new CsvEntry(entryName, sw.toString()));
                    }
                }
            }

            if (csvEntries.isEmpty()) {
                return ResponseEntity.noContent().build();
            } else if (csvEntries.size() == 1) {
                return createCsvResponse(csvEntries.get(0), baseName);
            } else {
                return createZipResponse(csvEntries, baseName);
            }
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ExtractCSVController.java,ExtractCSVController,createZipResponse,"ResponseEntity<byte[]> createZipResponse(List<CsvEntry>,String)","[92, 112]","{'A233': [(92, 103), (105, 112)], 'A266': [(104, 104)]}","{'A233': 0.9523809523809523, 'A266': 0.047619047619047616}",A233,,"    private ResponseEntity<byte[]> createZipResponse(List<CsvEntry> entries, String baseName)
            throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (ZipOutputStream zipOut = new ZipOutputStream(baos)) {
            for (CsvEntry entry : entries) {
                ZipEntry zipEntry = new ZipEntry(entry.filename());
                zipOut.putNextEntry(zipEntry);
                zipOut.write(entry.content().getBytes(StandardCharsets.UTF_8));
                zipOut.closeEntry();
            }
        }

        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(
                ContentDisposition.builder(""attachment"")
                        .filename(baseName + ""_extracted.zip"")
                        .build());
        headers.setContentType(MediaType.parseMediaType(""application/zip""));

        return ResponseEntity.ok().headers(headers).body(baos.toByteArray());
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ExtractCSVController.java,ExtractCSVController,createCsvResponse,"ResponseEntity<String> createCsvResponse(CsvEntry,String)","[114, 123]","{'A233': [(114, 119), (121, 123)], 'A266': [(120, 120)]}","{'A233': 0.9, 'A266': 0.1}",A233,,"    private ResponseEntity<String> createCsvResponse(CsvEntry entry, String baseName) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(
                ContentDisposition.builder(""attachment"")
                        .filename(baseName + ""_extracted.csv"")
                        .build());
        headers.setContentType(MediaType.parseMediaType(""text/csv""));

        return ResponseEntity.ok().headers(headers).body(entry.content());
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ExtractCSVController.java,ExtractCSVController,generateEntryName,"String generateEntryName(String,int,int)","[125, 127]","{'A233': [(125, 126)], 'A266': [(127, 127)]}","{'A233': 0.6666666666666666, 'A266': 0.3333333333333333}",A233,,"    private String generateEntryName(String baseName, int pageNum, int tableIndex) {
        return String.format(""%s_p%d_t%d.csv"", baseName, pageNum, tableIndex);
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ExtractCSVController.java,ExtractCSVController,getBaseName,String getBaseName(String),"[129, 131]","{'A233': [(129, 131)]}",{'A233': 1.0},A233,,"    private String getBaseName(String filename) {
        return filename.replaceFirst(""[.][^.]+$"", """");
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java,ConvertImgPDFController,convertToImage,ResponseEntity<byte[]> convertToImage(ConvertToImageRequest),"[54, 212]","{'A233': [(54, 57), (61, 61), (63, 66), (69, 72), (78, 78), (80, 80), (82, 86), (88, 90), (92, 96), (98, 102), (104, 105), (107, 117), (119, 119), (121, 123), (128, 144), (146, 156), (158, 160), (162, 184), (187, 189), (191, 193), (196, 200), (202, 208), (211, 212)], 'A234': [(58, 60), (67, 67), (87, 87), (103, 103), (118, 118), (120, 120), (124, 127), (145, 145), (161, 161), (185, 186), (190, 190), (194, 195), (201, 201), (210, 210)], 'A267': [(91, 91)], 'A268': [(68, 68), (73, 77), (79, 79), (81, 81), (97, 97)], 'A236': [(62, 62)], 'A238': [(106, 106), (157, 157), (209, 209)]}","{'A233': 0.779874213836478, 'A234': 0.1320754716981132, 'A267': 0.006289308176100629, 'A268': 0.05660377358490566, 'A236': 0.006289308176100629, 'A238': 0.018867924528301886}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/pdf/img"")
    @Operation(
            summary = ""Convert PDF to image(s)"",
            description =
                    ""This endpoint converts a PDF file to image(s) with the specified image format,""
                        + "" color type, and DPI. Users can choose to get a single image or multiple""
                        + "" images.  Input:PDF Output:Image Type:SI-Conditional"")
    public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageRequest request)
            throws Exception {
        MultipartFile file = request.getFileInput();
        String imageFormat = request.getImageFormat();
        String singleOrMultiple = request.getSingleOrMultiple();
        String colorType = request.getColorType();
        int dpi = request.getDpi();
        String pageNumbers = request.getPageNumbers();
        Path tempFile = null;
        Path tempOutputDir = null;
        Path tempPdfPath = null;
        byte[] result = null;
        String[] pageOrderArr =
                (pageNumbers != null && !pageNumbers.trim().isEmpty())
                        ? pageNumbers.split("","")
                        : new String[] {""all""};
        ;
        try {
            // Load the input PDF
            byte[] newPdfBytes = rearrangePdfPages(file, pageOrderArr);

            ImageType colorTypeResult = ImageType.RGB;
            if (""greyscale"".equals(colorType)) {
                colorTypeResult = ImageType.GRAY;
            } else if (""blackwhite"".equals(colorType)) {
                colorTypeResult = ImageType.BINARY;
            }
            // returns bytes for image
            boolean singleImage = ""single"".equals(singleOrMultiple);
            String filename =
                    Filenames.toSimpleFileName(new File(file.getOriginalFilename()).getName())
                            .replaceFirst(""[.][^.]+$"", """");

            result =
                    PdfUtils.convertFromPdf(
                            pdfDocumentFactory,
                            newPdfBytes,
                            ""webp"".equalsIgnoreCase(imageFormat)
                                    ? ""png""
                                    : imageFormat.toUpperCase(),
                            colorTypeResult,
                            singleImage,
                            dpi,
                            filename);
            if (result == null || result.length == 0) {
                log.error(""resultant bytes for {} is null, error converting "", filename);
            }
            if (""webp"".equalsIgnoreCase(imageFormat) && !CheckProgramInstall.isPythonAvailable()) {
                throw ExceptionUtils.createPythonRequiredForWebpException();
            } else if (""webp"".equalsIgnoreCase(imageFormat)
                    && CheckProgramInstall.isPythonAvailable()) {
                // Write the output stream to a temp file
                tempFile = Files.createTempFile(""temp_png"", "".png"");
                try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {
                    fos.write(result);
                    fos.flush();
                }

                String pythonVersion = CheckProgramInstall.getAvailablePythonCommand();
                Path pngToWebpScript = GeneralUtils.extractScript(""png_to_webp.py"");

                List<String> command = new ArrayList<>();
                command.add(pythonVersion);
                command.add(
                        pngToWebpScript
                                .toAbsolutePath()
                                .toString()); // Python script to handle the conversion

                // Create a temporary directory for the output WebP files
                tempOutputDir = Files.createTempDirectory(""webp_output"");
                if (singleImage) {
                    // Run the Python script to convert PNG to WebP
                    command.add(tempFile.toString());
                    command.add(tempOutputDir.toString());
                    command.add(""--single"");
                } else {
                    // Save the uploaded PDF to a temporary file
                    tempPdfPath = Files.createTempFile(""temp_pdf"", "".pdf"");
                    file.transferTo(tempPdfPath.toFile());
                    // Run the Python script to convert PDF to WebP
                    command.add(tempPdfPath.toString());
                    command.add(tempOutputDir.toString());
                }
                command.add(""--dpi"");
                command.add(String.valueOf(dpi));
                ProcessExecutorResult resultProcess =
                        ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV)
                                .runCommandWithOutputHandling(command);

                // Find all WebP files in the output directory
                List<Path> webpFiles =
                        Files.walk(tempOutputDir)
                                .filter(path -> path.toString().endsWith("".webp""))
                                .toList();

                if (webpFiles.isEmpty()) {
                    log.error(""No WebP files were created in: {}"", tempOutputDir.toString());
                    throw new IOException(
                            ""No WebP files were created. "" + resultProcess.getMessages());
                }

                byte[] bodyBytes = new byte[0];

                if (webpFiles.size() == 1) {
                    // Return the single WebP file directly
                    Path webpFilePath = webpFiles.get(0);
                    bodyBytes = Files.readAllBytes(webpFilePath);
                } else {
                    // Create a ZIP file containing all WebP images
                    ByteArrayOutputStream zipOutputStream = new ByteArrayOutputStream();
                    try (ZipOutputStream zos = new ZipOutputStream(zipOutputStream)) {
                        for (Path webpFile : webpFiles) {
                            zos.putNextEntry(new ZipEntry(webpFile.getFileName().toString()));
                            Files.copy(webpFile, zos);
                            zos.closeEntry();
                        }
                    }
                    bodyBytes = zipOutputStream.toByteArray();
                }
                // Clean up the temporary files
                Files.deleteIfExists(tempFile);
                if (tempOutputDir != null) FileUtils.deleteDirectory(tempOutputDir.toFile());
                result = bodyBytes;
            }

            if (singleImage) {
                String docName = filename + ""."" + imageFormat;
                MediaType mediaType = MediaType.parseMediaType(getMediaType(imageFormat));
                return WebResponseUtils.bytesToWebResponse(result, docName, mediaType);
            } else {
                String zipFilename = filename + ""_convertedToImages.zip"";
                return WebResponseUtils.bytesToWebResponse(
                        result, zipFilename, MediaType.APPLICATION_OCTET_STREAM);
            }

        } finally {
            try {
                // Clean up temporary files
                if (tempFile != null) {
                    Files.deleteIfExists(tempFile);
                }
                if (tempPdfPath != null) {
                    Files.deleteIfExists(tempPdfPath);
                }
                if (tempOutputDir != null) {
                    FileUtils.deleteDirectory(tempOutputDir.toFile());
                }
            } catch (Exception e) {
                log.error(""Error cleaning up temporary files"", e);
            }
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java,ConvertImgPDFController,convertToPdf,ResponseEntity<byte[]> convertToPdf(ConvertToPdfRequest),"[214, 241]","{'A233': [(214, 217), (221, 225), (234, 238), (241, 241)], 'A234': [(218, 220), (226, 226), (239, 240)], 'A269': [(227, 233)]}","{'A233': 0.5357142857142857, 'A234': 0.21428571428571427, 'A269': 0.25}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/img/pdf"")
    @Operation(
            summary = ""Convert images to a PDF file"",
            description =
                    ""This endpoint converts one or more images to a PDF file. Users can specify""
                            + "" whether to stretch the images to fit the PDF page, and whether to""
                            + "" automatically rotate the images. Input:Image Output:PDF Type:MISO"")
    public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest request)
            throws IOException {
        MultipartFile[] file = request.getFileInput();
        String fitOption = request.getFitOption();
        String colorType = request.getColorType();
        boolean autoRotate = Boolean.TRUE.equals(request.getAutoRotate());
        // Handle Null entries for formdata
        if (colorType == null || colorType.isBlank()) {
            colorType = ""color"";
        }
        if (fitOption == null || fitOption.isEmpty()) {
            fitOption = ""fillPage"";
        }
        // Convert the file to PDF and get the resulting bytes
        byte[] bytes =
                PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType, pdfDocumentFactory);
        return WebResponseUtils.bytesToWebResponse(
                bytes,
                new File(file[0].getOriginalFilename()).getName().replaceFirst(""[.][^.]+$"", """")
                        + ""_converted.pdf"");
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java,ConvertImgPDFController,getMediaType,String getMediaType(String),"[243, 246]","{'A233': [(243, 243), (246, 246)], 'A246': [(244, 244)], 'A243': [(245, 245)]}","{'A233': 0.5, 'A246': 0.25, 'A243': 0.25}",A233,,"    private String getMediaType(String imageFormat) {
        String mimeType = URLConnection.guessContentTypeFromName(""."" + imageFormat);
        return ""null"".equals(mimeType) ? ""application/octet-stream"" : mimeType;
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java,ConvertImgPDFController,rearrangePdfPages,"byte[] rearrangePdfPages(MultipartFile,String[])","[256, 289]","{'A233': [(256, 257), (259, 259)], 'A268': [(258, 258), (260, 289)]}","{'A233': 0.08823529411764706, 'A268': 0.9117647058823529}",A268,,"    private byte[] rearrangePdfPages(MultipartFile pdfFile, String[] pageOrderArr)
            throws IOException {
        // Load the input PDF
        PDDocument document = pdfDocumentFactory.load(pdfFile);
        int totalPages = document.getNumberOfPages();
        List<Integer> newPageOrder = GeneralUtils.parsePageList(pageOrderArr, totalPages, false);

        // Create a new list to hold the pages in the new order
        List<PDPage> newPages = new ArrayList<>();
        for (int pageIndex : newPageOrder) {
            newPages.add(document.getPage(pageIndex));
        }

        // Remove all the pages from the original document
        for (int i = document.getNumberOfPages() - 1; i >= 0; i--) {
            document.removePage(i);
        }

        // Add the pages in the new order
        for (PDPage page : newPages) {
            document.addPage(page);
        }

        // Convert PDDocument to byte array
        byte[] newPdfBytes;
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            document.save(baos);
            newPdfBytes = baos.toByteArray();
        } finally {
            document.close();
        }

        return newPdfBytes;
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,pdfToPdfA,ResponseEntity<byte[]> pdfToPdfA(PdfToPdfARequest),"[81, 156]","{'A233': [(81, 88), (90, 92), (94, 94), (96, 100), (102, 108), (113, 117), (139, 140), (142, 148)], 'A270': [(109, 111), (118, 138), (149, 156)], 'A242': [(101, 101), (112, 112), (141, 141)], 'A271': [(89, 89)], 'A238': [(93, 93), (95, 95)]}","{'A233': 0.5, 'A270': 0.42105263157894735, 'A242': 0.039473684210526314, 'A271': 0.013157894736842105, 'A238': 0.02631578947368421}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/pdf/pdfa"")
    @Operation(
            summary = ""Convert a PDF to a PDF/A"",
            description =
                    ""This endpoint converts a PDF file to a PDF/A file using LibreOffice. PDF/A is a format designed for long-term archiving of digital documents. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> pdfToPdfA(@ModelAttribute PdfToPdfARequest request)
            throws Exception {
        MultipartFile inputFile = request.getFileInput();
        String outputFormat = request.getOutputFormat();

        // Validate input file type
        if (!""application/pdf"".equals(inputFile.getContentType())) {
            log.error(""Invalid input file type: {}"", inputFile.getContentType());
            throw ExceptionUtils.createPdfFileRequiredException();
        }

        // Get the original filename without extension
        String originalFileName = Filenames.toSimpleFileName(inputFile.getOriginalFilename());
        if (originalFileName == null || originalFileName.trim().isEmpty()) {
            originalFileName = ""output.pdf"";
        }
        String baseFileName =
                originalFileName.contains(""."")
                        ? originalFileName.substring(0, originalFileName.lastIndexOf('.'))
                        : originalFileName;

        Path tempInputFile = null;
        byte[] fileBytes;
        Path loPdfPath = null; // Used for LibreOffice conversion output
        File preProcessedFile = null;
        int pdfaPart = 2;

        try {
            // Save uploaded file to temp location
            tempInputFile = Files.createTempFile(""input_"", "".pdf"");
            inputFile.transferTo(tempInputFile);

            // Branch conversion based on desired output PDF/A format
            if (""pdfa"".equals(outputFormat)) {
                preProcessedFile = tempInputFile.toFile();
            } else {
                pdfaPart = 1;
                preProcessedFile = preProcessHighlights(tempInputFile.toFile());
            }
            Set<String> missingFonts = new HashSet<>();
            boolean needImgs = false;
            try (PDDocument doc = Loader.loadPDF(preProcessedFile)) {
                missingFonts = findUnembeddedFontNames(doc);
                needImgs = (pdfaPart == 1) && hasTransparentImages(doc);
                if (!missingFonts.isEmpty() || needImgs) {
                    // Run LibreOffice conversion to get flattened images and embedded fonts
                    loPdfPath = runLibreOfficeConversion(preProcessedFile.toPath(), pdfaPart);
                }
            }
            fileBytes =
                    convertToPdfA(
                            preProcessedFile.toPath(), loPdfPath, pdfaPart, missingFonts, needImgs);

            String outputFilename = baseFileName + ""_PDFA.pdf"";

            return WebResponseUtils.bytesToWebResponse(
                    fileBytes, outputFilename, MediaType.APPLICATION_PDF);

        } finally {
            // Clean up temporary files
            if (tempInputFile != null) {
                Files.deleteIfExists(tempInputFile);
            }
            if (loPdfPath != null && loPdfPath.getParent() != null) {
                FileUtils.deleteDirectory(loPdfPath.getParent().toFile());
            }
            if (preProcessedFile != null) {
                Files.deleteIfExists(preProcessedFile.toPath());
            }
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,convertToPdfA,"byte[] convertToPdfA(Path,Path,int,Set<String>,boolean)","[167, 188]","{'A270': [(167, 188)]}",{'A270': 1.0},A270,,"    private byte[] convertToPdfA(
            Path basePdfPath,
            Path loPdfPath,
            int pdfaPart,
            Set<String> missingFonts,
            boolean importImages)
            throws Exception {
        try (PDDocument baseDoc = Loader.loadPDF(basePdfPath.toFile())) {

            if (loPdfPath != null) {
                try (PDDocument loDoc = Loader.loadPDF(loPdfPath.toFile())) {
                    if (!missingFonts.isEmpty()) {
                        embedMissingFonts(loDoc, baseDoc, missingFonts);
                    }
                    if (importImages) {
                        importFlattenedImages(loDoc, baseDoc);
                    }
                }
            }
            return processWithPDFBox(baseDoc, pdfaPart);
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,processWithPDFBox,"byte[] processWithPDFBox(PDDocument,int)","[190, 214]","{'A270': [(190, 214)]}",{'A270': 1.0},A270,,"    private byte[] processWithPDFBox(PDDocument document, int pdfaPart) throws Exception {

        removeElementsForPdfA(document, pdfaPart);

        mergeAndAddXmpMetadata(document, pdfaPart);

        addICCProfileIfNotPresent(document);

        // Mark the document as PDF/A
        PDDocumentCatalog catalog = document.getDocumentCatalog();
        catalog.setMetadata(
                document.getDocumentCatalog().getMetadata()); // Ensure metadata is linked
        catalog.setViewerPreferences(
                new PDViewerPreferences(catalog.getCOSObject())); // PDF/A best practice
        document.getDocument().setVersion(pdfaPart == 1 ? 1.4f : 1.7f);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        if (pdfaPart == 1) {
            document.save(baos, CompressParameters.NO_COMPRESSION);
        } else {
            document.save(baos);
        }

        return baos.toByteArray();
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,runLibreOfficeConversion,"Path runLibreOfficeConversion(Path,int)","[216, 254]","{'A233': [(245, 245), (251, 251)], 'A270': [(216, 244), (246, 250), (252, 254)]}","{'A233': 0.05128205128205128, 'A270': 0.9487179487179487}",A270,,"    private Path runLibreOfficeConversion(Path tempInputFile, int pdfaPart) throws Exception {
        // Create temp output directory
        Path tempOutputDir = Files.createTempDirectory(""output_"");

        // Determine PDF/A filter based on requested format
        String pdfFilter =
                pdfaPart == 2
                        ? ""pdf:writer_pdf_Export:{\""SelectPdfVersion\"":{\""type\"":\""long\"",\""value\"":\""2\""}}""
                        : ""pdf:writer_pdf_Export:{\""SelectPdfVersion\"":{\""type\"":\""long\"",\""value\"":\""1\""}}"";

        // Prepare LibreOffice command
        List<String> command =
                new ArrayList<>(
                        Arrays.asList(
                                ""soffice"",
                                ""--headless"",
                                ""--nologo"",
                                ""--convert-to"",
                                pdfFilter,
                                ""--outdir"",
                                tempOutputDir.toString(),
                                tempInputFile.toString()));

        ProcessExecutorResult returnCode =
                ProcessExecutor.getInstance(ProcessExecutor.Processes.LIBRE_OFFICE)
                        .runCommandWithOutputHandling(command);

        if (returnCode.getRc() != 0) {
            log.error(""PDF/A conversion failed with return code: {}"", returnCode.getRc());
            throw ExceptionUtils.createPdfaConversionFailedException();
        }

        // Get the output file
        File[] outputFiles = tempOutputDir.toFile().listFiles();
        if (outputFiles == null || outputFiles.length != 1) {
            throw ExceptionUtils.createPdfaConversionFailedException();
        }
        return outputFiles[0].toPath();
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,embedMissingFonts,"void embedMissingFonts(PDDocument,PDDocument,Set<String>)","[256, 305]","{'A270': [(256, 305)]}",{'A270': 1.0},A270,,"    private void embedMissingFonts(PDDocument loDoc, PDDocument baseDoc, Set<String> missingFonts)
            throws IOException {
        List<PDPage> loPages = new ArrayList<>();
        loDoc.getPages().forEach(loPages::add);
        List<PDPage> basePages = new ArrayList<>();
        baseDoc.getPages().forEach(basePages::add);

        for (int i = 0; i < loPages.size(); i++) {
            PDResources loRes = loPages.get(i).getResources();
            PDResources baseRes = basePages.get(i).getResources();

            for (COSName fontKey : loRes.getFontNames()) {
                PDFont loFont = loRes.getFont(fontKey);
                if (loFont == null) continue;

                String psName = loFont.getName();
                if (!missingFonts.contains(psName)) continue;

                PDFontDescriptor desc = loFont.getFontDescriptor();
                if (desc == null) continue;

                PDStream fontStream = null;
                if (desc.getFontFile() != null) {
                    fontStream = desc.getFontFile();
                } else if (desc.getFontFile2() != null) {
                    fontStream = desc.getFontFile2();
                } else if (desc.getFontFile3() != null) {
                    fontStream = desc.getFontFile3();
                }
                if (fontStream == null) continue;

                try (InputStream in = fontStream.createInputStream()) {
                    PDFont newFont = null;
                    try {
                        newFont = PDType0Font.load(baseDoc, in, false);
                    } catch (IOException e1) {
                        try {
                            newFont = PDTrueTypeFont.load(baseDoc, in, null);
                        } catch (IOException | IllegalArgumentException e2) {
                            log.error(""Could not embed font {}: {}"", psName, e2.getMessage());
                            continue;
                        }
                    }
                    if (newFont != null) {
                        baseRes.put(fontKey, newFont);
                    }
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,findUnembeddedFontNames,Set<String> findUnembeddedFontNames(PDDocument),"[307, 319]","{'A270': [(307, 319)]}",{'A270': 1.0},A270,,"    private Set<String> findUnembeddedFontNames(PDDocument doc) throws IOException {
        Set<String> missing = new HashSet<>();
        for (PDPage page : doc.getPages()) {
            PDResources res = page.getResources();
            for (COSName name : res.getFontNames()) {
                PDFont font = res.getFont(name);
                if (font != null && !font.isEmbedded()) {
                    missing.add(font.getName());
                }
            }
        }
        return missing;
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,importFlattenedImages,"void importFlattenedImages(PDDocument,PDDocument)","[321, 345]","{'A270': [(321, 345)]}",{'A270': 1.0},A270,,"    private void importFlattenedImages(PDDocument loDoc, PDDocument baseDoc) throws IOException {
        List<PDPage> loPages = new ArrayList<>();
        loDoc.getPages().forEach(loPages::add);
        List<PDPage> basePages = new ArrayList<>();
        baseDoc.getPages().forEach(basePages::add);

        for (int i = 0; i < loPages.size(); i++) {
            PDPage loPage = loPages.get(i);
            PDPage basePage = basePages.get(i);

            PDResources loRes = loPage.getResources();
            PDResources baseRes = basePage.getResources();
            Set<COSName> toReplace = detectTransparentXObjects(basePage);

            for (COSName name : toReplace) {
                PDXObject loXo = loRes.getXObject(name);
                if (!(loXo instanceof PDImageXObject img)) continue;

                PDImageXObject newImg = LosslessFactory.createFromImage(baseDoc, img.getImage());

                // replace the resource under the same name
                baseRes.put(name, newImg);
            }
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,detectTransparentXObjects,Set<COSName> detectTransparentXObjects(PDPage),"[347, 368]","{'A270': [(347, 368)]}",{'A270': 1.0},A270,,"    private Set<COSName> detectTransparentXObjects(PDPage page) {
        Set<COSName> transparentObjects = new HashSet<>();
        PDResources res = page.getResources();
        if (res == null) return transparentObjects;

        for (COSName name : res.getXObjectNames()) {
            try {
                PDXObject xo = res.getXObject(name);
                if (xo instanceof PDImageXObject img) {
                    COSDictionary d = img.getCOSObject();
                    if (d.containsKey(COSName.SMASK)
                            || isTransparencyGroup(d)
                            || d.getBoolean(COSName.INTERPOLATE, false)) {
                        transparentObjects.add(name);
                    }
                }
            } catch (IOException ioe) {
                log.error(""Error processing XObject {}: {}"", name.getName(), ioe.getMessage());
            }
        }
        return transparentObjects;
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,isTransparencyGroup,boolean isTransparencyGroup(COSDictionary),"[370, 374]","{'A270': [(370, 374)]}",{'A270': 1.0},A270,,"    private boolean isTransparencyGroup(COSDictionary dict) {
        COSBase g = dict.getDictionaryObject(COSName.GROUP);
        return g instanceof COSDictionary gd
                && COSName.TRANSPARENCY.equals(gd.getCOSName(COSName.S));
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,hasTransparentImages,boolean hasTransparentImages(PDDocument),"[376, 399]","{'A270': [(376, 399)]}",{'A270': 1.0},A270,,"    private boolean hasTransparentImages(PDDocument doc) {
        for (PDPage page : doc.getPages()) {
            PDResources res = page.getResources();
            if (res == null) continue;
            for (COSName name : res.getXObjectNames()) {
                try {
                    PDXObject xo = res.getXObject(name);
                    if (xo instanceof PDImageXObject img) {
                        COSDictionary dict = img.getCOSObject();
                        if (dict.containsKey(COSName.SMASK)) return true;
                        COSBase g = dict.getDictionaryObject(COSName.GROUP);
                        if (g instanceof COSDictionary gd
                                && COSName.TRANSPARENCY.equals(gd.getCOSName(COSName.S))) {
                            return true;
                        }
                        if (dict.getBoolean(COSName.INTERPOLATE, false)) return true;
                    }
                } catch (IOException ioe) {
                    log.error(""Error processing XObject {}: {}"", name.getName(), ioe.getMessage());
                }
            }
        }
        return false;
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,sanitizePdfA,"void sanitizePdfA(COSBase,PDResources,int)","[401, 446]","{'A270': [(401, 446)]}",{'A270': 1.0},A270,,"    private void sanitizePdfA(COSBase base, PDResources resources, int pdfaPart) {
        if (base instanceof COSDictionary dict) {
            if (pdfaPart == 1) {
                // Remove transparency-related elements
                COSBase group = dict.getDictionaryObject(COSName.GROUP);
                if (group instanceof COSDictionary gDict
                        && COSName.TRANSPARENCY.equals(gDict.getCOSName(COSName.S))) {
                    dict.removeItem(COSName.GROUP);
                }

                dict.removeItem(COSName.SMASK);
                // Transparency blending constants (/CA, /ca) — disallowed in PDF/A-1
                dict.removeItem(COSName.CA);
                dict.removeItem(COSName.getPDFName(""ca""));
            }

            // Interpolation (non-deterministic image scaling) — required to be false
            if (dict.containsKey(COSName.INTERPOLATE)
                    && dict.getBoolean(COSName.INTERPOLATE, true)) {
                dict.setBoolean(COSName.INTERPOLATE, false);
            }

            // Remove common forbidden features (for PDF/A 1 and 2)
            dict.removeItem(COSName.JAVA_SCRIPT);
            dict.removeItem(COSName.getPDFName(""JS""));
            dict.removeItem(COSName.getPDFName(""RichMedia""));
            dict.removeItem(COSName.getPDFName(""Movie""));
            dict.removeItem(COSName.getPDFName(""Sound""));
            dict.removeItem(COSName.getPDFName(""Launch""));
            dict.removeItem(COSName.URI);
            dict.removeItem(COSName.getPDFName(""GoToR""));
            dict.removeItem(COSName.EMBEDDED_FILES);
            dict.removeItem(COSName.FILESPEC);

            // Recurse through all entries in the dictionary
            for (Map.Entry<COSName, COSBase> entry : dict.entrySet()) {
                sanitizePdfA(entry.getValue(), resources, pdfaPart);
            }

        } else if (base instanceof COSArray arr) {
            // Recursively sanitize each item in the array
            for (COSBase item : arr) {
                sanitizePdfA(item, resources, pdfaPart);
            }
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,removeElementsForPdfA,"void removeElementsForPdfA(PDDocument,int)","[448, 479]","{'A270': [(448, 479)]}",{'A270': 1.0},A270,,"    private void removeElementsForPdfA(PDDocument doc, int pdfaPart) {

        if (pdfaPart == 1) {
            // Remove Optional Content (Layers) - not allowed in PDF/A-1
            doc.getDocumentCatalog().getCOSObject().removeItem(COSName.getPDFName(""OCProperties""));
        }

        for (PDPage page : doc.getPages()) {
            if (pdfaPart == 1) {
                page.setAnnotations(Collections.emptyList());
            }
            PDResources res = page.getResources();
            // Clean page-level dictionary
            sanitizePdfA(page.getCOSObject(), res, pdfaPart);

            // sanitize each Form XObject
            if (res != null) {
                for (COSName name : res.getXObjectNames()) {
                    try {
                        PDXObject xo = res.getXObject(name);
                        if (xo instanceof PDFormXObject form) {
                            sanitizePdfA(form.getCOSObject(), res, pdfaPart);
                        } else if (xo instanceof PDImageXObject img) {
                            sanitizePdfA(img.getCOSObject(), res, pdfaPart);
                        }
                    } catch (IOException ioe) {
                        log.error(""Cannot load XObject {}: {}"", name.getName(), ioe.getMessage());
                    }
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,mergeAndAddXmpMetadata,"void mergeAndAddXmpMetadata(PDDocument,int)","[482, 587]","{'A270': [(482, 587)]}",{'A270': 1.0},A270,,"    private void mergeAndAddXmpMetadata(PDDocument document, int pdfaPart) throws Exception {
        PDMetadata existingMetadata = document.getDocumentCatalog().getMetadata();
        XMPMetadata xmp;

        // Load existing XMP if available
        if (existingMetadata != null) {
            try (InputStream xmpStream = existingMetadata.createInputStream()) {
                DomXmpParser parser = new DomXmpParser();
                parser.setStrictParsing(false);
                xmp = parser.parse(xmpStream);
            } catch (Exception e) {
                xmp = XMPMetadata.createXMPMetadata();
            }
        } else {
            xmp = XMPMetadata.createXMPMetadata();
        }

        PDDocumentInformation docInfo = document.getDocumentInformation();
        if (docInfo == null) {
            docInfo = new PDDocumentInformation();
        }

        String originalCreator = Optional.ofNullable(docInfo.getCreator()).orElse(""Unknown"");
        String originalProducer = Optional.ofNullable(docInfo.getProducer()).orElse(""Unknown"");

        // Only keep the original creator so it can match xmp creator tool for compliance
        DublinCoreSchema dcSchema = xmp.getDublinCoreSchema();
        if (dcSchema != null) {
            List<String> existingCreators = dcSchema.getCreators();
            if (existingCreators != null) {
                for (String creator : new ArrayList<>(existingCreators)) {
                    dcSchema.removeCreator(creator);
                }
            }
        } else {
            dcSchema = xmp.createAndAddDublinCoreSchema();
        }
        dcSchema.addCreator(originalCreator);

        PDFAIdentificationSchema pdfaSchema =
                (PDFAIdentificationSchema) xmp.getSchema(PDFAIdentificationSchema.class);
        if (pdfaSchema == null) {
            pdfaSchema = xmp.createAndAddPDFAIdentificationSchema();
        }
        pdfaSchema.setPart(pdfaPart);
        pdfaSchema.setConformance(""B"");

        XMPBasicSchema xmpBasicSchema = xmp.getXMPBasicSchema();
        if (xmpBasicSchema == null) {
            xmpBasicSchema = xmp.createAndAddXMPBasicSchema();
        }

        AdobePDFSchema adobePdfSchema = xmp.getAdobePDFSchema();
        if (adobePdfSchema == null) {
            adobePdfSchema = xmp.createAndAddAdobePDFSchema();
        }

        docInfo.setCreator(originalCreator);
        xmpBasicSchema.setCreatorTool(originalCreator);

        docInfo.setProducer(originalProducer);
        adobePdfSchema.setProducer(originalProducer);

        String originalAuthor = docInfo.getAuthor();
        if (originalAuthor != null && !originalAuthor.isBlank()) {
            docInfo.setAuthor(null);
            // If the author is set, we keep it in the XMP metadata
            if (!originalCreator.equals(originalAuthor)) {
                dcSchema.addCreator(originalAuthor);
            }
        }

        String title = docInfo.getTitle();
        if (title != null && !title.isBlank()) {
            dcSchema.setTitle(title);
        }
        String subject = docInfo.getSubject();
        if (subject != null && !subject.isBlank()) {
            dcSchema.addSubject(subject);
        }
        String keywords = docInfo.getKeywords();
        if (keywords != null && !keywords.isBlank()) {
            adobePdfSchema.setKeywords(keywords);
        }

        // Set creation and modification dates
        Calendar now = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));
        Calendar originalCreationDate = docInfo.getCreationDate();
        if (originalCreationDate == null) {
            originalCreationDate = now;
        }
        docInfo.setCreationDate(originalCreationDate);
        xmpBasicSchema.setCreateDate(originalCreationDate);

        docInfo.setModificationDate(now);
        xmpBasicSchema.setModifyDate(now);
        xmpBasicSchema.setMetadataDate(now);

        // Serialize the created metadata so it can be attached to the existent metadata
        ByteArrayOutputStream xmpOut = new ByteArrayOutputStream();
        new XmpSerializer().serialize(xmp, xmpOut, true);

        PDMetadata newMetadata = new PDMetadata(document);
        newMetadata.importXMPMetadata(xmpOut.toByteArray());
        document.getDocumentCatalog().setMetadata(newMetadata);
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,addICCProfileIfNotPresent,void addICCProfileIfNotPresent(PDDocument),"[589, 602]","{'A270': [(589, 602)]}",{'A270': 1.0},A270,,"    private void addICCProfileIfNotPresent(PDDocument document) throws Exception {
        if (document.getDocumentCatalog().getOutputIntents().isEmpty()) {
            try (InputStream colorProfile = getClass().getResourceAsStream(""/icc/sRGB2014.icc"")) {
                PDOutputIntent outputIntent = new PDOutputIntent(document, colorProfile);
                outputIntent.setInfo(""sRGB IEC61966-2.1"");
                outputIntent.setOutputCondition(""sRGB IEC61966-2.1"");
                outputIntent.setOutputConditionIdentifier(""sRGB IEC61966-2.1"");
                outputIntent.setRegistryName(""http://www.color.org"");
                document.getDocumentCatalog().addOutputIntent(outputIntent);
            } catch (Exception e) {
                log.error(""Failed to load ICC profile: {}"", e.getMessage());
            }
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java,ConvertPDFToPDFA,preProcessHighlights,File preProcessHighlights(File),"[604, 699]","{'A233': [(693, 693), (698, 699)], 'A270': [(604, 692), (694, 697)]}","{'A233': 0.03125, 'A270': 0.96875}",A270,,"    private File preProcessHighlights(File inputPdf) throws Exception {

        try (PDDocument document = Loader.loadPDF(inputPdf)) {

            for (PDPage page : document.getPages()) {
                // Retrieve the annotations on the page.
                List<PDAnnotation> annotations = page.getAnnotations();
                for (PDAnnotation annot : annotations) {
                    // Process only highlight annotations.
                    if (""Highlight"".equals(annot.getSubtype())
                            && annot instanceof PDAnnotationTextMarkup highlight) {
                        // Create a new appearance stream with the same bounding box.
                        float[] colorComponents =
                                highlight.getColor() != null
                                        ? highlight.getColor().getComponents()
                                        : new float[] {1f, 1f, 0f};
                        Color highlightColor =
                                new Color(
                                        colorComponents[0], colorComponents[1], colorComponents[2]);

                        float[] quadPoints = highlight.getQuadPoints();
                        if (quadPoints != null) {
                            try (PDPageContentStream cs =
                                    new PDPageContentStream(
                                            document,
                                            page,
                                            PDPageContentStream.AppendMode.PREPEND,
                                            true,
                                            true)) {

                                cs.setStrokingColor(highlightColor);
                                cs.setLineWidth(0.05f);
                                float spacing = 2f;
                                // Draw diagonal lines across the highlight area to simulate
                                // transparency.
                                for (int i = 0; i < quadPoints.length; i += 8) {
                                    float minX =
                                            Math.min(
                                                    Math.min(quadPoints[i], quadPoints[i + 2]),
                                                    Math.min(quadPoints[i + 4], quadPoints[i + 6]));
                                    float maxX =
                                            Math.max(
                                                    Math.max(quadPoints[i], quadPoints[i + 2]),
                                                    Math.max(quadPoints[i + 4], quadPoints[i + 6]));
                                    float minY =
                                            Math.min(
                                                    Math.min(quadPoints[i + 1], quadPoints[i + 3]),
                                                    Math.min(quadPoints[i + 5], quadPoints[i + 7]));
                                    float maxY =
                                            Math.max(
                                                    Math.max(quadPoints[i + 1], quadPoints[i + 3]),
                                                    Math.max(quadPoints[i + 5], quadPoints[i + 7]));

                                    float width = maxX - minX;
                                    float height = maxY - minY;

                                    for (float y = minY; y <= maxY; y += spacing) {
                                        float len = Math.min(width, maxY - y);
                                        cs.moveTo(minX, y);
                                        cs.lineTo(minX + len, y + len);
                                    }
                                    for (float x = minX + spacing; x <= maxX; x += spacing) {
                                        float len = Math.min(maxX - x, height);
                                        cs.moveTo(x, minY);
                                        cs.lineTo(x + len, minY + len);
                                    }
                                }

                                cs.stroke();
                            }
                        }

                        page.getAnnotations().remove(highlight);
                        COSDictionary pageDict = page.getCOSObject();

                        if (pageDict.containsKey(COSName.GROUP)) {
                            COSDictionary groupDict =
                                    (COSDictionary) pageDict.getDictionaryObject(COSName.GROUP);

                            if (groupDict != null) {
                                if (COSName.TRANSPARENCY
                                        .getName()
                                        .equalsIgnoreCase(groupDict.getNameAsString(COSName.S))) {
                                    pageDict.removeItem(COSName.GROUP);
                                }
                            }
                        }
                    }
                }
            }
            // Save the modified document to a temporary file.
            File preProcessedFile = Files.createTempFile(""preprocessed_"", "".pdf"").toFile();
            document.save(preProcessedFile);
            return preProcessedFile;
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertEmlToPDF.java,ConvertEmlToPDF,convertEmlToPdf,ResponseEntity<byte[]> convertEmlToPdf(EmlToPdfRequest),"[41, 151]","{'A248': [(41, 45), (49, 100), (103, 106), (109, 127), (133, 136), (142, 151)], 'A233': [(46, 48), (101, 102), (107, 108), (128, 132), (137, 141)]}","{'A248': 0.8468468468468469, 'A233': 0.15315315315315314}",A248,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/eml/pdf"")
    @Operation(
            summary = ""Convert EML to PDF"",
            description =
                    ""This endpoint converts EML (email) files to PDF format with extensive""
                            + "" customization options. Features include font settings, image constraints, display modes, attachment handling,""
                            + "" and HTML debug output. Input: EML file, Output: PDF""
                            + "" or HTML file. Type: SISO"")
    public ResponseEntity<byte[]> convertEmlToPdf(@ModelAttribute EmlToPdfRequest request) {

        MultipartFile inputFile = request.getFileInput();
        String originalFilename = inputFile.getOriginalFilename();

        // Validate input
        if (inputFile.isEmpty()) {
            log.error(""No file provided for EML to PDF conversion."");
            return ResponseEntity.badRequest()
                    .body(""No file provided"".getBytes(StandardCharsets.UTF_8));
        }

        if (originalFilename == null || originalFilename.trim().isEmpty()) {
            log.error(""Filename is null or empty."");
            return ResponseEntity.badRequest()
                    .body(""Please provide a valid filename"".getBytes(StandardCharsets.UTF_8));
        }

        // Validate file type - support EML
        String lowerFilename = originalFilename.toLowerCase();
        if (!lowerFilename.endsWith("".eml"")) {
            log.error(""Invalid file type for EML to PDF: {}"", originalFilename);
            return ResponseEntity.badRequest()
                    .body(""Please upload a valid EML file"".getBytes(StandardCharsets.UTF_8));
        }

        String baseFilename = Filenames.toSimpleFileName(originalFilename); // Use Filenames utility

        try {
            byte[] fileBytes = inputFile.getBytes();

            if (request.isDownloadHtml()) {
                try {
                    String htmlContent = EmlToPdf.convertEmlToHtml(fileBytes, request);
                    log.info(""Successfully converted EML to HTML: {}"", originalFilename);
                    return WebResponseUtils.bytesToWebResponse(
                            htmlContent.getBytes(StandardCharsets.UTF_8),
                            baseFilename + "".html"",
                            MediaType.TEXT_HTML);
                } catch (IOException | IllegalArgumentException e) {
                    log.error(""HTML conversion failed for {}"", originalFilename, e);
                    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                            .body(
                                    (""HTML conversion failed: "" + e.getMessage())
                                            .getBytes(StandardCharsets.UTF_8));
                }
            }

            // Convert EML to PDF with enhanced options
            try {
                byte[] pdfBytes =
                        EmlToPdf.convertEmlToPdf(
                                runtimePathConfig
                                        .getWeasyPrintPath(), // Use configured WeasyPrint path
                                request,
                                fileBytes,
                                originalFilename,
                                false,
                                pdfDocumentFactory,
                                tempFileManager);

                if (pdfBytes == null || pdfBytes.length == 0) {
                    log.error(""PDF conversion failed - empty output for {}"", originalFilename);
                    return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                            .body(
                                    ""PDF conversion failed - empty output""
                                            .getBytes(StandardCharsets.UTF_8));
                }
                log.info(""Successfully converted EML to PDF: {}"", originalFilename);
                return WebResponseUtils.bytesToWebResponse(
                        pdfBytes, baseFilename + "".pdf"", MediaType.APPLICATION_PDF);

            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                log.error(""EML to PDF conversion was interrupted for {}"", originalFilename, e);
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(""Conversion was interrupted"".getBytes(StandardCharsets.UTF_8));
            } catch (IllegalArgumentException e) {
                String errorMessage = buildErrorMessage(e, originalFilename);
                log.error(
                        ""EML to PDF conversion failed for {}: {}"",
                        originalFilename,
                        errorMessage,
                        e);
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(errorMessage.getBytes(StandardCharsets.UTF_8));
            } catch (RuntimeException e) {
                String errorMessage = buildErrorMessage(e, originalFilename);
                log.error(
                        ""EML to PDF conversion failed for {}: {}"",
                        originalFilename,
                        errorMessage,
                        e);
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                        .body(errorMessage.getBytes(StandardCharsets.UTF_8));
            }

        } catch (IOException e) {
            log.error(""File processing error for EML to PDF: {}"", originalFilename, e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(""File processing error"".getBytes(StandardCharsets.UTF_8));
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertEmlToPDF.java,ConvertEmlToPDF,buildErrorMessage,"String buildErrorMessage(Exception,String)","[153, 170]","{'A248': [(153, 170)]}",{'A248': 1.0},A248,,"    private static @NotNull String buildErrorMessage(Exception e, String originalFilename) {
        String errorMessage;
        if (e.getMessage() != null && e.getMessage().contains(""Invalid EML"")) {
            errorMessage =
                    ""Invalid EML file format. Please ensure you've uploaded a valid email""
                            + "" file (""
                            + originalFilename
                            + "")."";
        } else if (e.getMessage() != null && e.getMessage().contains(""WeasyPrint"")) {
            errorMessage =
                    ""PDF generation failed for ""
                            + originalFilename
                            + "". This may be due to complex email formatting."";
        } else {
            errorMessage = ""Conversion failed for "" + originalFilename + "": "" + e.getMessage();
        }
        return errorMessage;
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToOffice.java,ConvertPDFToOffice,processPdfToPresentation,ResponseEntity<byte[]> processPdfToPresentation(PdfToPresentationRequest),"[37, 50]","{'A233': [(37, 40), (43, 50)], 'A234': [(41, 42)]}","{'A233': 0.8571428571428571, 'A234': 0.14285714285714285}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/pdf/presentation"")
    @Operation(
            summary = ""Convert PDF to Presentation format"",
            description =
                    ""This endpoint converts a given PDF file to a Presentation format. Input:PDF""
                            + "" Output:PPT Type:SISO"")
    public ResponseEntity<byte[]> processPdfToPresentation(
            @ModelAttribute PdfToPresentationRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        String outputFormat = request.getOutputFormat();
        PDFToFile pdfToFile = new PDFToFile();
        return pdfToFile.processPdfToOfficeFormat(inputFile, outputFormat, ""impress_pdf_import"");
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToOffice.java,ConvertPDFToOffice,processPdfToRTForTXT,ResponseEntity<byte[]> processPdfToRTForTXT(PdfToTextOrRTFRequest),"[52, 78]","{'A233': [(52, 55), (58, 78)], 'A234': [(56, 57)]}","{'A233': 0.9259259259259259, 'A234': 0.07407407407407407}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/pdf/text"")
    @Operation(
            summary = ""Convert PDF to Text or RTF format"",
            description =
                    ""This endpoint converts a given PDF file to Text or RTF format. Input:PDF""
                            + "" Output:TXT Type:SISO"")
    public ResponseEntity<byte[]> processPdfToRTForTXT(
            @ModelAttribute PdfToTextOrRTFRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        String outputFormat = request.getOutputFormat();
        if (""txt"".equals(request.getOutputFormat())) {
            try (PDDocument document = pdfDocumentFactory.load(inputFile)) {
                PDFTextStripper stripper = new PDFTextStripper();
                String text = stripper.getText(document);
                return WebResponseUtils.bytesToWebResponse(
                        text.getBytes(),
                        Filenames.toSimpleFileName(inputFile.getOriginalFilename())
                                        .replaceFirst(""[.][^.]+$"", """")
                                + "".txt"",
                        MediaType.TEXT_PLAIN);
            }
        } else {
            PDFToFile pdfToFile = new PDFToFile();
            return pdfToFile.processPdfToOfficeFormat(inputFile, outputFormat, ""writer_pdf_import"");
        }
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToOffice.java,ConvertPDFToOffice,processPdfToWord,ResponseEntity<byte[]> processPdfToWord(PdfToWordRequest),"[80, 92]","{'A233': [(80, 83), (86, 92)], 'A234': [(84, 85)]}","{'A233': 0.8461538461538461, 'A234': 0.15384615384615385}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/pdf/word"")
    @Operation(
            summary = ""Convert PDF to Word document"",
            description =
                    ""This endpoint converts a given PDF file to a Word document format. Input:PDF""
                            + "" Output:WORD Type:SISO"")
    public ResponseEntity<byte[]> processPdfToWord(@ModelAttribute PdfToWordRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        String outputFormat = request.getOutputFormat();
        PDFToFile pdfToFile = new PDFToFile();
        return pdfToFile.processPdfToOfficeFormat(inputFile, outputFormat, ""writer_pdf_import"");
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToOffice.java,ConvertPDFToOffice,processPdfToXML,ResponseEntity<byte[]> processPdfToXML(PDFFile),"[94, 105]","{'A233': [(94, 97), (102, 105)], 'A234': [(98, 101)]}","{'A233': 0.6666666666666666, 'A234': 0.3333333333333333}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/pdf/xml"")
    @Operation(
            summary = ""Convert PDF to XML"",
            description =
                    ""This endpoint converts a PDF file to an XML file. Input:PDF Output:XML""
                            + "" Type:SISO"")
    public ResponseEntity<byte[]> processPdfToXML(@ModelAttribute PDFFile file) throws Exception {
        MultipartFile inputFile = file.getFileInput();

        PDFToFile pdfToFile = new PDFToFile();
        return pdfToFile.processPdfToOfficeFormat(inputFile, ""xml"", ""writer_pdf_import"");
    }
"
stirling.software.SPDF.controller.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java,ConvertHtmlToPDF,HtmlToPdf,ResponseEntity<byte[]> HtmlToPdf(HTMLToPdfRequest),"[39, 79]","{'A233': [(39, 42), (45, 52), (54, 58), (60, 61), (63, 79)], 'A234': [(43, 44)], 'A251': [(59, 59), (62, 62)], 'A243': [(53, 53)]}","{'A233': 0.8780487804878049, 'A234': 0.04878048780487805, 'A251': 0.04878048780487805, 'A243': 0.024390243902439025}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/html/pdf"")
    @Operation(
            summary = ""Convert an HTML or ZIP (containing HTML and CSS) to PDF"",
            description =
                    ""This endpoint takes an HTML or ZIP file input and converts it to a PDF format.""
                            + "" Input:HTML Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> HtmlToPdf(@ModelAttribute HTMLToPdfRequest request)
            throws Exception {
        MultipartFile fileInput = request.getFileInput();

        if (fileInput == null) {
            throw ExceptionUtils.createHtmlFileRequiredException();
        }

        String originalFilename = Filenames.toSimpleFileName(fileInput.getOriginalFilename());
        if (originalFilename == null
                || (!originalFilename.endsWith("".html"") && !originalFilename.endsWith("".zip""))) {
            throw ExceptionUtils.createIllegalArgumentException(
                    ""error.fileFormatRequired"", ""File must be in {0} format"", "".html or .zip"");
        }

        boolean disableSanitize =
                Boolean.TRUE.equals(applicationProperties.getSystem().getDisableSanitize());

        byte[] pdfBytes =
                FileToPdf.convertHtmlToPdf(
                        runtimePathConfig.getWeasyPrintPath(),
                        request,
                        fileInput.getBytes(),
                        originalFilename,
                        disableSanitize,
                        tempFileManager);

        pdfBytes = pdfDocumentFactory.createNewBytesBasedOnOldDocument(pdfBytes);

        String outputFilename =
                originalFilename.replaceFirst(""[.][^.]+$"", """")
                        + "".pdf""; // Remove file extension and append .pdf

        return WebResponseUtils.bytesToWebResponse(pdfBytes, outputFilename);
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/CropController.java,CropController,cropPdf,ResponseEntity<byte[]> cropPdf(CropPdfForm),"[36, 97]","{'A233': [(36, 39), (44, 66), (69, 79), (85, 94), (96, 97)], 'A234': [(40, 43), (67, 68), (80, 84), (95, 95)]}","{'A233': 0.8064516129032258, 'A234': 0.1935483870967742}",A233,,"    @PostMapping(value = ""/crop"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Crops a PDF document"",
            description =
                    ""This operation takes an input PDF file and crops it according to the given""
                            + "" coordinates. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> cropPdf(@ModelAttribute CropPdfForm request) throws IOException {
        PDDocument sourceDocument = pdfDocumentFactory.load(request);

        PDDocument newDocument =
                pdfDocumentFactory.createNewDocumentBasedOnOldDocument(sourceDocument);

        int totalPages = sourceDocument.getNumberOfPages();

        LayerUtility layerUtility = new LayerUtility(newDocument);

        for (int i = 0; i < totalPages; i++) {
            PDPage sourcePage = sourceDocument.getPage(i);

            // Create a new page with the size of the source page
            PDPage newPage = new PDPage(sourcePage.getMediaBox());
            newDocument.addPage(newPage);
            PDPageContentStream contentStream =
                    new PDPageContentStream(newDocument, newPage, AppendMode.OVERWRITE, true, true);

            // Import the source page as a form XObject
            PDFormXObject formXObject = layerUtility.importPageAsForm(sourceDocument, i);

            contentStream.saveGraphicsState();

            // Define the crop area
            contentStream.addRect(
                    request.getX(), request.getY(), request.getWidth(), request.getHeight());
            contentStream.clip();

            // Draw the entire formXObject
            contentStream.drawForm(formXObject);

            contentStream.restoreGraphicsState();

            contentStream.close();

            // Now, set the new page's media box to the cropped size
            newPage.setMediaBox(
                    new PDRectangle(
                            request.getX(),
                            request.getY(),
                            request.getWidth(),
                            request.getHeight()));
        }

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        newDocument.save(baos);
        newDocument.close();
        sourceDocument.close();

        byte[] pdfContent = baos.toByteArray();
        return WebResponseUtils.bytesToWebResponse(
                pdfContent,
                request.getFileInput().getOriginalFilename().replaceFirst(""[.][^.]+$"", """")
                        + ""_cropped.pdf"");
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/PrintFileController.java,PrintFileController,printFile,ResponseEntity<String> printFile(PrintFileRequest),"[46, 111]","{'A233': [(46, 48), (53, 111)], 'A267': [(49, 52)]}","{'A233': 0.9393939393939394, 'A267': 0.06060606060606061}",A233,,"    public ResponseEntity<String> printFile(@ModelAttribute PrintFileRequest request)
            throws IOException {
        MultipartFile file = request.getFileInput();
        String originalFilename = file.getOriginalFilename();
        if (originalFilename != null && (originalFilename.contains("".."") || Paths.get(originalFilename).isAbsolute())) {
            throw new IOException(""Invalid file path detected: "" + originalFilename);
        }
        String printerName = request.getPrinterName();
        String contentType = file.getContentType();
        try {
            // Find matching printer
            PrintService[] services = PrintServiceLookup.lookupPrintServices(null, null);
            PrintService selectedService =
                    Arrays.stream(services)
                            .filter(
                                    service ->
                                            service.getName().toLowerCase().contains(printerName))
                            .findFirst()
                            .orElseThrow(
                                    () ->
                                            new IllegalArgumentException(
                                                    ""No matching printer found""));

            log.info(""Selected Printer: "" + selectedService.getName());

            if (""application/pdf"".equals(contentType)) {
                PDDocument document = Loader.loadPDF(file.getBytes());
                PrinterJob job = PrinterJob.getPrinterJob();
                job.setPrintService(selectedService);
                job.setPageable(new PDFPageable(document));
                job.print();
                document.close();
            } else if (contentType.startsWith(""image/"")) {
                BufferedImage image = ImageIO.read(file.getInputStream());
                PrinterJob job = PrinterJob.getPrinterJob();
                job.setPrintService(selectedService);
                job.setPrintable(
                        new Printable() {
                            public int print(
                                    Graphics graphics, PageFormat pageFormat, int pageIndex)
                                    throws PrinterException {
                                if (pageIndex != 0) {
                                    return NO_SUCH_PAGE;
                                }
                                Graphics2D g2d = (Graphics2D) graphics;
                                g2d.translate(
                                        pageFormat.getImageableX(), pageFormat.getImageableY());
                                g2d.drawImage(
                                        image,
                                        0,
                                        0,
                                        (int) pageFormat.getImageableWidth(),
                                        (int) pageFormat.getImageableHeight(),
                                        null);
                                return PAGE_EXISTS;
                            }
                        });
                job.print();
            }
            return new ResponseEntity<>(
                    ""File printed successfully to "" + selectedService.getName(), HttpStatus.OK);
        } catch (Exception e) {
            System.err.println(""Failed to print: "" + e.getMessage());
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/PrintFileController.java,PrintFileController,print,"int print(Graphics,PageFormat,int)","[84, 101]","{'A233': [(84, 101)]}",{'A233': 1.0},A233,,"                            public int print(
                                    Graphics graphics, PageFormat pageFormat, int pageIndex)
                                    throws PrinterException {
                                if (pageIndex != 0) {
                                    return NO_SUCH_PAGE;
                                }
                                Graphics2D g2d = (Graphics2D) graphics;
                                g2d.translate(
                                        pageFormat.getImageableX(), pageFormat.getImageableY());
                                g2d.drawImage(
                                        image,
                                        0,
                                        0,
                                        (int) pageFormat.getImageableWidth(),
                                        (int) pageFormat.getImageableHeight(),
                                        null);
                                return PAGE_EXISTS;
                            }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java,BlankPageController,isBlankImage,"boolean isBlankImage(BufferedImage,int,double,int)","[46, 70]","{'A233': [(46, 70)]}",{'A233': 1.0},A233,,"    public static boolean isBlankImage(
            BufferedImage image, int threshold, double whitePercent, int blurSize) {
        if (image == null) {
            log.info(""Error: Image is null"");
            return false;
        }

        // Convert to binary image based on the threshold
        int whitePixels = 0;
        int totalPixels = image.getWidth() * image.getHeight();

        for (int i = 0; i < image.getHeight(); i++) {
            for (int j = 0; j < image.getWidth(); j++) {
                int color = image.getRGB(j, i) & 0xFF;
                if (color >= 255 - threshold) {
                    whitePixels++;
                }
            }
        }

        double whitePixelPercentage = (whitePixels / (double) totalPixels) * 100;
        log.info(String.format(""Page has white pixel percent of %.2f%%"", whitePixelPercentage));

        return whitePixelPercentage >= whitePercent;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java,BlankPageController,removeBlankPages,ResponseEntity<byte[]> removeBlankPages(RemoveBlankPagesRequest),"[72, 154]","{'A233': [(72, 75), (79, 88), (91, 91), (93, 95), (97, 101), (103, 103), (105, 108), (110, 116), (119, 119), (122, 126), (131, 131), (150, 150), (152, 152)], 'A272': [(89, 90), (92, 92), (102, 102), (118, 118), (121, 121), (127, 130), (132, 145), (148, 149), (153, 154)], 'A236': [(147, 147)], 'A238': [(96, 96), (104, 104), (109, 109), (117, 117), (120, 120), (146, 146), (151, 151)], 'A234': [(76, 78)]}","{'A233': 0.5301204819277109, 'A272': 0.3373493975903614, 'A236': 0.012048192771084338, 'A238': 0.08433734939759036, 'A234': 0.03614457831325301}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/remove-blanks"")
    @Operation(
            summary = ""Remove blank pages from a PDF file"",
            description =
                    ""This endpoint removes blank pages from a given PDF file. Users can specify the""
                            + "" threshold and white percentage to tune the detection of blank pages.""
                            + "" Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> removeBlankPages(@ModelAttribute RemoveBlankPagesRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        int threshold = request.getThreshold();
        float whitePercent = request.getWhitePercent();

        try (PDDocument document = pdfDocumentFactory.load(inputFile)) {
            PDPageTree pages = document.getDocumentCatalog().getPages();
            PDFTextStripper textStripper = new PDFTextStripper();

            List<PDPage> nonBlankPages = new ArrayList<>();
            List<PDPage> blankPages = new ArrayList<>();
            int pageIndex = 0;

            PDFRenderer pdfRenderer = new PDFRenderer(document);
            pdfRenderer.setSubsamplingAllowed(true);
            for (PDPage page : pages) {
                log.info(""checking page {}"", pageIndex);
                textStripper.setStartPage(pageIndex + 1);
                textStripper.setEndPage(pageIndex + 1);
                String pageText = textStripper.getText(document);
                boolean hasText = !pageText.trim().isEmpty();

                boolean blank = true;
                if (hasText) {
                    log.info(""page {} has text, not blank"", pageIndex);
                    blank = false;
                } else {
                    boolean hasImages = PdfUtils.hasImagesOnPage(page);
                    if (hasImages) {
                        log.info(""page {} has image, running blank detection"", pageIndex);
                        // Render image and save as temp file
                        BufferedImage image = pdfRenderer.renderImageWithDPI(pageIndex, 30);
                        blank = isBlankImage(image, threshold, whitePercent, threshold);
                    }
                }

                if (blank) {
                    log.info(""Skipping, Image was  blank for page #{}"", pageIndex);
                    blankPages.add(page);
                } else {
                    log.info(""page {} has image which is not blank"", pageIndex);
                    nonBlankPages.add(page);
                }

                pageIndex++;
            }

            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ZipOutputStream zos = new ZipOutputStream(baos);

            String filename =
                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())
                            .replaceFirst(""[.][^.]+$"", """");

            if (!nonBlankPages.isEmpty()) {
                createZipEntry(zos, nonBlankPages, filename + ""_nonBlankPages.pdf"");
            } else {
                createZipEntry(zos, blankPages, filename + ""_allBlankPages.pdf"");
            }

            if (!nonBlankPages.isEmpty() && !blankPages.isEmpty()) {
                createZipEntry(zos, blankPages, filename + ""_blankPages.pdf"");
            }

            zos.close();

            log.info(""Returning ZIP file: {}"", filename + ""_processed.zip"");
            return WebResponseUtils.baosToWebResponse(
                    baos, filename + ""_processed.zip"", MediaType.APPLICATION_OCTET_STREAM);

        } catch (IOException e) {
            log.error(""exception"", e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java,BlankPageController,createZipEntry,"void createZipEntry(ZipOutputStream,List<PDPage>,String)","[156, 169]","{'A233': [(158, 158), (168, 169)], 'A272': [(156, 157), (159, 167)]}","{'A233': 0.21428571428571427, 'A272': 0.7857142857142857}",A272,,"    public void createZipEntry(ZipOutputStream zos, List<PDPage> pages, String entryName)
            throws IOException {
        try (PDDocument document = pdfDocumentFactory.createNewDocument()) {

            for (PDPage page : pages) {
                document.addPage(page);
            }

            ZipEntry zipEntry = new ZipEntry(entryName);
            zos.putNextEntry(zipEntry);
            document.save(zos);
            zos.closeEntry();
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java,ExtractImageScansController,extractImageScans,ResponseEntity<byte[]> extractImageScans(ExtractImageScansRequest),"[53, 223]","{'A233': [(53, 56), (61, 61), (63, 63), (67, 75), (77, 78), (83, 86), (88, 108), (110, 123), (126, 128), (130, 130), (132, 132), (134, 134), (136, 136), (138, 156), (158, 165), (167, 191), (193, 201), (203, 209), (211, 218), (220, 223)], 'A234': [(57, 60), (62, 62), (64, 66), (76, 76), (79, 82), (87, 87), (109, 109), (124, 125), (129, 129), (131, 131), (133, 133), (135, 135), (137, 137)], 'A238': [(202, 202), (210, 210), (219, 219)], 'A243': [(157, 157), (166, 166), (192, 192)]}","{'A233': 0.8362573099415205, 'A234': 0.1286549707602339, 'A238': 0.017543859649122806, 'A243': 0.017543859649122806}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/extract-image-scans"")
    @Operation(
            summary = ""Extract image scans from an input file"",
            description =
                    ""This endpoint extracts image scans from a given file based on certain""
                        + "" parameters. Users can specify angle threshold, tolerance, minimum area,""
                        + "" minimum contour area, and border size. Input:PDF Output:IMAGE/ZIP""
                        + "" Type:SIMO"")
    public ResponseEntity<byte[]> extractImageScans(
            @ModelAttribute ExtractImageScansRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();

        String fileName = inputFile.getOriginalFilename();
        String extension = fileName.substring(fileName.lastIndexOf(""."") + 1);

        List<String> images = new ArrayList<>();

        List<Path> tempImageFiles = new ArrayList<>();
        Path tempInputFile = null;
        Path tempZipFile = null;
        List<Path> tempDirs = new ArrayList<>();

        if (!CheckProgramInstall.isPythonAvailable()) {
            throw ExceptionUtils.createIOException(
                    ""error.toolNotInstalled"", ""{0} is not installed"", null, ""Python"");
        }

        String pythonVersion = CheckProgramInstall.getAvailablePythonCommand();
        Path splitPhotosScript = GeneralUtils.extractScript(""split_photos.py"");
        try {
            // Check if input file is a PDF
            if (""pdf"".equalsIgnoreCase(extension)) {
                // Load PDF document
                try (PDDocument document = pdfDocumentFactory.load(inputFile)) {
                    PDFRenderer pdfRenderer = new PDFRenderer(document);
                    pdfRenderer.setSubsamplingAllowed(true);
                    int pageCount = document.getNumberOfPages();
                    images = new ArrayList<>();

                    // Create images of all pages
                    for (int i = 0; i < pageCount; i++) {
                        // Create temp file to save the image
                        Path tempFile = Files.createTempFile(""image_"", "".png"");

                        // Render image and save as temp file
                        BufferedImage image = pdfRenderer.renderImageWithDPI(i, 300);
                        ImageIO.write(image, ""png"", tempFile.toFile());

                        // Add temp file path to images list
                        images.add(tempFile.toString());
                        tempImageFiles.add(tempFile);
                    }
                }
            } else {
                tempInputFile = Files.createTempFile(""input_"", ""."" + extension);
                inputFile.transferTo(tempInputFile);
                // Add input file path to images list
                images.add(tempInputFile.toString());
            }

            List<byte[]> processedImageBytes = new ArrayList<>();

            // Process each image
            for (int i = 0; i < images.size(); i++) {

                Path tempDir = Files.createTempDirectory(""openCV_output"");
                tempDirs.add(tempDir);
                List<String> command =
                        new ArrayList<>(
                                Arrays.asList(
                                        pythonVersion,
                                        splitPhotosScript.toAbsolutePath().toString(),
                                        images.get(i),
                                        tempDir.toString(),
                                        ""--angle_threshold"",
                                        String.valueOf(request.getAngleThreshold()),
                                        ""--tolerance"",
                                        String.valueOf(request.getTolerance()),
                                        ""--min_area"",
                                        String.valueOf(request.getMinArea()),
                                        ""--min_contour_area"",
                                        String.valueOf(request.getMinContourArea()),
                                        ""--border_size"",
                                        String.valueOf(request.getBorderSize())));

                // Run CLI command
                ProcessExecutorResult returnCode =
                        ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV)
                                .runCommandWithOutputHandling(command);

                // Read the output photos in temp directory
                List<Path> tempOutputFiles = Files.list(tempDir).sorted().toList();
                for (Path tempOutputFile : tempOutputFiles) {
                    byte[] imageBytes = Files.readAllBytes(tempOutputFile);
                    processedImageBytes.add(imageBytes);
                }
                // Clean up the temporary directory
                FileUtils.deleteDirectory(tempDir.toFile());
            }

            // Create zip file if multiple images
            if (processedImageBytes.size() > 1) {
                String outputZipFilename =
                        fileName.replaceFirst(REPLACEFIRST, """") + ""_processed.zip"";
                tempZipFile = Files.createTempFile(""output_"", "".zip"");

                try (ZipOutputStream zipOut =
                        new ZipOutputStream(new FileOutputStream(tempZipFile.toFile()))) {
                    // Add processed images to the zip
                    for (int i = 0; i < processedImageBytes.size(); i++) {
                        ZipEntry entry =
                                new ZipEntry(
                                        fileName.replaceFirst(REPLACEFIRST, """")
                                                + ""_""
                                                + (i + 1)
                                                + "".png"");
                        zipOut.putNextEntry(entry);
                        zipOut.write(processedImageBytes.get(i));
                        zipOut.closeEntry();
                    }
                }

                byte[] zipBytes = Files.readAllBytes(tempZipFile);

                // Clean up the temporary zip file
                Files.deleteIfExists(tempZipFile);

                return WebResponseUtils.bytesToWebResponse(
                        zipBytes, outputZipFilename, MediaType.APPLICATION_OCTET_STREAM);
            }
            if (processedImageBytes.size() == 0) {
                throw new IllegalArgumentException(""No images detected"");
            } else {

                // Return the processed image as a response
                byte[] imageBytes = processedImageBytes.get(0);
                return WebResponseUtils.bytesToWebResponse(
                        imageBytes,
                        fileName.replaceFirst(REPLACEFIRST, """") + "".png"",
                        MediaType.IMAGE_PNG);
            }
        } finally {
            // Cleanup logic for all temporary files and directories
            tempImageFiles.forEach(
                    path -> {
                        try {
                            Files.deleteIfExists(path);
                        } catch (IOException e) {
                            log.error(""Failed to delete temporary image file: "" + path, e);
                        }
                    });

            if (tempZipFile != null && Files.exists(tempZipFile)) {
                try {
                    Files.deleteIfExists(tempZipFile);
                } catch (IOException e) {
                    log.error(""Failed to delete temporary zip file: "" + tempZipFile, e);
                }
            }

            tempDirs.forEach(
                    dir -> {
                        try {
                            FileUtils.deleteDirectory(dir.toFile());
                        } catch (IOException e) {
                            log.error(""Failed to delete temporary directory: "" + dir, e);
                        }
                    });
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/UnlockPDFFormsController.java,UnlockPDFFormsController,unlockPDFForms,ResponseEntity<byte[]> unlockPDFForms(PDFFile),"[40, 121]","{'A273': [(40, 121)]}",{'A273': 1.0},A273,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/unlock-pdf-forms"")
    @Operation(
            summary = ""Remove read-only property from form fields"",
            description =
                    ""Removing read-only property from form fields making them fillable""
                            + ""Input:PDF, Output:PDF. Type:SISO"")
    public ResponseEntity<byte[]> unlockPDFForms(@ModelAttribute PDFFile file) {
        try (PDDocument document = pdfDocumentFactory.load(file)) {
            PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm();

            if (acroForm != null) {
                acroForm.setNeedAppearances(true);

                for (PDField field : acroForm.getFieldTree()) {
                    COSDictionary dict = field.getCOSObject();
                    if (dict.containsKey(COSName.getPDFName(""Lock""))) {
                        dict.removeItem(COSName.getPDFName(""Lock""));
                    }
                    int currentFlags = field.getFieldFlags();
                    if ((currentFlags & 1) == 1) {
                        int newFlags = currentFlags & ~1;
                        field.setFieldFlags(newFlags);
                    }
                }

                COSBase xfaBase = acroForm.getCOSObject().getDictionaryObject(COSName.XFA);
                if (xfaBase != null) {
                    try {
                        if (xfaBase instanceof COSStream xfaStream) {
                            InputStream is = xfaStream.createInputStream();
                            ByteArrayOutputStream baos = new ByteArrayOutputStream();
                            is.transferTo(baos);
                            String xml = baos.toString(StandardCharsets.UTF_8);

                            xml = xml.replaceAll(""access\\s*=\\s*\""readOnly\"""", ""access=\""open\"""");

                            PDStream newStream =
                                    new PDStream(
                                            document,
                                            new ByteArrayInputStream(
                                                    xml.getBytes(StandardCharsets.UTF_8)));
                            acroForm.getCOSObject().setItem(COSName.XFA, newStream.getCOSObject());
                        } else if (xfaBase instanceof COSArray xfaArray) {
                            for (int i = 0; i < xfaArray.size(); i += 2) {
                                COSBase namePart = xfaArray.getObject(i);
                                COSBase streamPart = xfaArray.getObject(i + 1);
                                if (namePart instanceof COSString
                                        && streamPart instanceof COSStream stream) {
                                    InputStream is = stream.createInputStream();
                                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                                    is.transferTo(baos);
                                    String xml = baos.toString(StandardCharsets.UTF_8);

                                    xml =
                                            xml.replaceAll(
                                                    ""access\\s*=\\s*\""readOnly\"""",
                                                    ""access=\""open\"""");

                                    PDStream newStream =
                                            new PDStream(
                                                    document,
                                                    new ByteArrayInputStream(
                                                            xml.getBytes(StandardCharsets.UTF_8)));
                                    xfaArray.set(i + 1, newStream.getCOSObject());
                                }
                            }
                        }
                    } catch (Exception e) {
                        log.error(""exception"", e);
                    }
                }
            }
            String mergedFileName =
                    file.getFileInput().getOriginalFilename().replaceFirst(""[.][^.]+$"", """")
                            + ""_unlocked_forms.pdf"";
            return WebResponseUtils.pdfDocToWebResponse(
                    document, Filenames.toSimpleFileName(mergedFileName));
        } catch (Exception e) {
            log.error(e.getMessage(), e);
        }
        return null;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ReplaceAndInvertColorController.java,ReplaceAndInvertColorController,replaceAndInvertColor,ResponseEntity<InputStreamResource> replaceAndInvertColor(ReplaceAndInvertColorRequest),"[30, 52]","{'A249': [(30, 33), (36, 36), (38, 40), (46, 52)], 'A234': [(34, 35), (37, 37), (41, 45)]}","{'A249': 0.6521739130434783, 'A234': 0.34782608695652173}",A249,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/replace-invert-pdf"")
    @Operation(
            summary = ""Replace-Invert Color PDF"",
            description =
                    ""This endpoint accepts a PDF file and option of invert all colors or replace""
                            + "" text and background colors. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<InputStreamResource> replaceAndInvertColor(
            @ModelAttribute ReplaceAndInvertColorRequest request) throws IOException {

        InputStreamResource resource =
                replaceAndInvertColorService.replaceAndInvertColor(
                        request.getFileInput(),
                        request.getReplaceAndInvertOption(),
                        request.getHighContrastColorCombination(),
                        request.getBackGroundColor(),
                        request.getTextColor());

        // Return the modified PDF as a downloadable file
        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, ""attachment; filename=inverted.pdf"")
                .contentType(MediaType.APPLICATION_PDF)
                .body(resource);
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/AutoSplitPdfController.java,AutoSplitPdfController,decodeQRCode,String decodeQRCode(BufferedImage),"[57, 103]","{'A233': [(57, 59), (62, 71), (75, 90), (93, 103)], 'A234': [(60, 61), (72, 74), (91, 92)]}","{'A233': 0.851063829787234, 'A234': 0.14893617021276595}",A233,,"    private static String decodeQRCode(BufferedImage bufferedImage) {
        LuminanceSource source;

        if (bufferedImage.getRaster().getDataBuffer() instanceof DataBufferByte dataBufferByte) {
            byte[] pixels = dataBufferByte.getData();
            source =
                    new PlanarYUVLuminanceSource(
                            pixels,
                            bufferedImage.getWidth(),
                            bufferedImage.getHeight(),
                            0,
                            0,
                            bufferedImage.getWidth(),
                            bufferedImage.getHeight(),
                            false);
        } else if (bufferedImage.getRaster().getDataBuffer()
                instanceof DataBufferInt dataBufferInt) {
            int[] pixels = dataBufferInt.getData();
            byte[] newPixels = new byte[pixels.length];
            for (int i = 0; i < pixels.length; i++) {
                newPixels[i] = (byte) (pixels[i] & 0xff);
            }
            source =
                    new PlanarYUVLuminanceSource(
                            newPixels,
                            bufferedImage.getWidth(),
                            bufferedImage.getHeight(),
                            0,
                            0,
                            bufferedImage.getWidth(),
                            bufferedImage.getHeight(),
                            false);
        } else {
            throw new IllegalArgumentException(
                    ""BufferedImage must have 8-bit gray scale, 24-bit RGB, 32-bit ARGB (packed""
                            + "" int), byte gray, or 3-byte/4-byte RGB image data"");
        }

        BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

        try {
            Result result = new MultiFormatReader().decode(bitmap);
            return result.getText();
        } catch (NotFoundException e) {
            return null; // there is no QR code in the image
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/AutoSplitPdfController.java,AutoSplitPdfController,autoSplitPdf,ResponseEntity<byte[]> autoSplitPdf(AutoSplitPdfRequest),"[105, 209]","{'A233': [(105, 108), (110, 115), (117, 188), (190, 196), (198, 204), (206, 209)], 'A238': [(189, 189), (197, 197), (205, 205)], 'A234': [(109, 109), (116, 116)]}","{'A233': 0.9523809523809523, 'A238': 0.02857142857142857, 'A234': 0.01904761904761905}",A233,,"    @PostMapping(value = ""/auto-split-pdf"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Auto split PDF pages into separate documents"",
            description =
                    ""This endpoint accepts a PDF file, scans each page for a specific QR code, and""
                            + "" splits the document at the QR code boundaries. The output is a zip file""
                            + "" containing each separate PDF document. Input:PDF Output:ZIP-PDF""
                            + "" Type:SISO"")
    public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute AutoSplitPdfRequest request)
            throws IOException {
        MultipartFile file = request.getFileInput();
        boolean duplexMode = Boolean.TRUE.equals(request.getDuplexMode());

        PDDocument document = null;
        List<PDDocument> splitDocuments = new ArrayList<>();
        Path zipFile = null;
        byte[] data = null;

        try {
            document = pdfDocumentFactory.load(file.getInputStream());
            PDFRenderer pdfRenderer = new PDFRenderer(document);
            pdfRenderer.setSubsamplingAllowed(true);

            for (int page = 0; page < document.getNumberOfPages(); ++page) {
                BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 150);
                String result = decodeQRCode(bim);

                boolean isValidQrCode = VALID_QR_CONTENTS.contains(result);
                log.debug(""detected qr code {}, code is vale={}"", result, isValidQrCode);
                if (isValidQrCode && page != 0) {
                    splitDocuments.add(new PDDocument());
                }

                if (!splitDocuments.isEmpty() && !isValidQrCode) {
                    splitDocuments.get(splitDocuments.size() - 1).addPage(document.getPage(page));
                } else if (page == 0) {
                    PDDocument firstDocument = new PDDocument();
                    firstDocument.addPage(document.getPage(page));
                    splitDocuments.add(firstDocument);
                }

                // If duplexMode is true and current page is a divider, then skip next page
                if (duplexMode && isValidQrCode) {
                    page++;
                }
            }

            // Remove split documents that have no pages
            splitDocuments.removeIf(pdDocument -> pdDocument.getNumberOfPages() == 0);

            zipFile = Files.createTempFile(""split_documents"", "".zip"");
            String filename =
                    Filenames.toSimpleFileName(file.getOriginalFilename())
                            .replaceFirst(""[.][^.]+$"", """");

            try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(zipFile))) {
                for (int i = 0; i < splitDocuments.size(); i++) {
                    String fileName = filename + ""_"" + (i + 1) + "".pdf"";
                    PDDocument splitDocument = splitDocuments.get(i);

                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    splitDocument.save(baos);
                    byte[] pdf = baos.toByteArray();

                    ZipEntry pdfEntry = new ZipEntry(fileName);
                    zipOut.putNextEntry(pdfEntry);
                    zipOut.write(pdf);
                    zipOut.closeEntry();
                }
            }

            data = Files.readAllBytes(zipFile);

            return WebResponseUtils.bytesToWebResponse(
                    data, filename + "".zip"", MediaType.APPLICATION_OCTET_STREAM);
        } catch (Exception e) {
            log.error(""Error in auto split"", e);
            throw e;
        } finally {
            // Clean up resources
            if (document != null) {
                try {
                    document.close();
                } catch (IOException e) {
                    log.error(""Error closing main PDDocument"", e);
                }
            }

            for (PDDocument splitDoc : splitDocuments) {
                try {
                    splitDoc.close();
                } catch (IOException e) {
                    log.error(""Error closing split PDDocument"", e);
                }
            }

            if (zipFile != null) {
                try {
                    Files.deleteIfExists(zipFile);
                } catch (IOException e) {
                    log.error(""Error deleting temporary zip file"", e);
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,isQpdfEnabled,boolean isQpdfEnabled(),"[72, 74]","{'A233': [(72, 74)]}",{'A233': 1.0},A233,,"    private boolean isQpdfEnabled() {
        return endpointConfiguration.isGroupEnabled(""qpdf"");
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,isGhostscriptEnabled,boolean isGhostscriptEnabled(),"[76, 78]","{'A233': [(76, 78)]}",{'A233': 1.0},A233,,"    private boolean isGhostscriptEnabled() {
        return endpointConfiguration.isGroupEnabled(""Ghostscript"");
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,compressImagesInPDF,"Path compressImagesInPDF(Path,double,float,boolean)","[108, 157]","{'A233': [(108, 150), (152, 153), (155, 157)], 'A234': [(151, 151), (154, 154)]}","{'A233': 0.96, 'A234': 0.04}",A233,,"    public Path compressImagesInPDF(
            Path pdfFile, double scaleFactor, float jpegQuality, boolean convertToGrayscale)
            throws Exception {
        Path newCompressedPDF = Files.createTempFile(""compressedPDF"", "".pdf"");
        long originalFileSize = Files.size(pdfFile);
        log.info(
                ""Starting image compression with scale factor: {}, JPEG quality: {}, grayscale: {} on file size: {}"",
                scaleFactor,
                jpegQuality,
                convertToGrayscale,
                GeneralUtils.formatBytes(originalFileSize));

        try (PDDocument doc = pdfDocumentFactory.load(pdfFile)) {
            // Find all unique images in the document
            Map<String, List<ImageReference>> uniqueImages = findImages(doc);

            // Get statistics
            CompressionStats stats = new CompressionStats();
            stats.uniqueImagesCount = uniqueImages.size();
            calculateImageStats(uniqueImages, stats);

            // Create compressed versions of unique images
            Map<String, PDImageXObject> compressedVersions =
                    createCompressedImages(
                            doc, uniqueImages, scaleFactor, jpegQuality, convertToGrayscale, stats);

            // Replace all instances with compressed versions
            replaceImages(doc, uniqueImages, compressedVersions, stats);

            // Log compression statistics
            logCompressionStats(stats, originalFileSize);

            // Free memory before saving
            compressedVersions.clear();
            uniqueImages.clear();

            log.info(""Saving compressed PDF to {}"", newCompressedPDF.toString());
            doc.save(newCompressedPDF.toString());

            // Log overall file size reduction
            long compressedFileSize = Files.size(newCompressedPDF);
            double overallReduction = 100.0 - ((compressedFileSize * 100.0) / originalFileSize);
            log.info(
                    ""Overall PDF compression: {} → {} (reduced by {}%)"",
                    GeneralUtils.formatBytes(originalFileSize),
                    GeneralUtils.formatBytes(compressedFileSize),
                    String.format(""%.1f"", overallReduction));
            return newCompressedPDF;
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,findImages,"Map<String, List<ImageReference>> findImages(PDDocument)","[160, 191]","{'A233': [(160, 191)]}",{'A233': 1.0},A233,,"    private Map<String, List<ImageReference>> findImages(PDDocument doc) throws IOException {
        Map<String, List<ImageReference>> uniqueImages = new HashMap<>();

        // Scan through all pages in the document
        for (int pageNum = 0; pageNum < doc.getNumberOfPages(); pageNum++) {
            PDPage page = doc.getPage(pageNum);
            PDResources res = page.getResources();
            if (res == null || res.getXObjectNames() == null) continue;

            // Process all XObjects on the page
            for (COSName name : res.getXObjectNames()) {
                PDXObject xobj = res.getXObject(name);

                // Direct image
                if (isImage(xobj)) {
                    addDirectImage(pageNum, name, (PDImageXObject) xobj, uniqueImages);
                    log.info(
                            ""Found direct image '{}' on page {} - {}x{}"",
                            name.getName(),
                            pageNum + 1,
                            ((PDImageXObject) xobj).getWidth(),
                            ((PDImageXObject) xobj).getHeight());
                }
                // Form XObject that may contain nested images
                else if (isForm(xobj)) {
                    checkFormForImages(pageNum, name, (PDFormXObject) xobj, uniqueImages);
                }
            }
        }

        return uniqueImages;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,isImage,boolean isImage(PDXObject),"[193, 195]","{'A233': [(193, 195)]}",{'A233': 1.0},A233,,"    private boolean isImage(PDXObject xobj) {
        return xobj instanceof PDImageXObject;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,isForm,boolean isForm(PDXObject),"[197, 199]","{'A233': [(197, 199)]}",{'A233': 1.0},A233,,"    private boolean isForm(PDXObject xobj) {
        return xobj instanceof PDFormXObject;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,addDirectImage,"ImageReference addDirectImage(int,COSName,PDImageXObject,Map<String, List<ImageReference>>)","[201, 215]","{'A233': [(201, 215)]}",{'A233': 1.0},A233,,"    private ImageReference addDirectImage(
            int pageNum,
            COSName name,
            PDImageXObject image,
            Map<String, List<ImageReference>> uniqueImages)
            throws IOException {
        ImageReference ref = new ImageReference();
        ref.pageNum = pageNum;
        ref.name = name;

        String imageHash = generateImageHash(image);
        uniqueImages.computeIfAbsent(imageHash, k -> new ArrayList<>()).add(ref);

        return ref;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,checkFormForImages,"void checkFormForImages(int,COSName,PDFormXObject,Map<String, List<ImageReference>>)","[218, 259]","{'A233': [(218, 259)]}",{'A233': 1.0},A233,,"    private void checkFormForImages(
            int pageNum,
            COSName formName,
            PDFormXObject formXObj,
            Map<String, List<ImageReference>> uniqueImages)
            throws IOException {
        PDResources formResources = formXObj.getResources();
        if (formResources == null || formResources.getXObjectNames() == null) {
            return;
        }

        log.info(
                ""Checking form XObject '{}' on page {} for nested images"",
                formName.getName(),
                pageNum + 1);

        // Process all XObjects within the form
        for (COSName nestedName : formResources.getXObjectNames()) {
            PDXObject nestedXobj = formResources.getXObject(nestedName);

            if (isImage(nestedXobj)) {
                PDImageXObject nestedImage = (PDImageXObject) nestedXobj;

                log.info(
                        ""Found nested image '{}' in form '{}' on page {} - {}x{}"",
                        nestedName.getName(),
                        formName.getName(),
                        pageNum + 1,
                        nestedImage.getWidth(),
                        nestedImage.getHeight());

                // Create specialized reference for the nested image
                NestedImageReference nestedRef = new NestedImageReference();
                nestedRef.pageNum = pageNum;
                nestedRef.formName = formName;
                nestedRef.imageName = nestedName;

                String imageHash = generateImageHash(nestedImage);
                uniqueImages.computeIfAbsent(imageHash, k -> new ArrayList<>()).add(nestedRef);
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,calculateImageStats,"void calculateImageStats(Map<String, List<ImageReference>>,CompressionStats)","[262, 272]","{'A233': [(262, 272)]}",{'A233': 1.0},A233,,"    private void calculateImageStats(
            Map<String, List<ImageReference>> uniqueImages, CompressionStats stats) {
        for (List<ImageReference> references : uniqueImages.values()) {
            for (ImageReference ref : references) {
                stats.totalImages++;
                if (ref instanceof NestedImageReference) {
                    stats.nestedImages++;
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,createCompressedImages,"Map<String, PDImageXObject> createCompressedImages(PDDocument,Map<String, List<ImageReference>>,double,float,boolean,CompressionStats)","[275, 334]","{'A233': [(275, 334)]}",{'A233': 1.0},A233,,"    private Map<String, PDImageXObject> createCompressedImages(
            PDDocument doc,
            Map<String, List<ImageReference>> uniqueImages,
            double scaleFactor,
            float jpegQuality,
            boolean convertToGrayscale,
            CompressionStats stats)
            throws IOException {

        Map<String, PDImageXObject> compressedVersions = new HashMap<>();

        // Process each unique image exactly once
        for (Entry<String, List<ImageReference>> entry : uniqueImages.entrySet()) {
            String imageHash = entry.getKey();
            List<ImageReference> references = entry.getValue();

            if (references.isEmpty()) continue;

            // Get the first instance of this image
            PDImageXObject originalImage = getOriginalImage(doc, references.get(0));

            // Track original size
            int originalSize = (int) originalImage.getCOSObject().getLength();
            stats.totalOriginalBytes += originalSize;

            // Process this unique image
            PDImageXObject compressedImage =
                    compressImage(
                            doc,
                            originalImage,
                            originalSize,
                            scaleFactor,
                            jpegQuality,
                            convertToGrayscale);

            if (compressedImage != null) {
                // Store the compressed version in our map
                compressedVersions.put(imageHash, compressedImage);
                stats.compressedImages++;

                // Update compression stats
                int compressedSize = (int) compressedImage.getCOSObject().getLength();
                stats.totalCompressedBytes += compressedSize * references.size();

                double reductionPercentage = 100.0 - ((compressedSize * 100.0) / originalSize);
                log.info(
                        ""Image hash {}: Compressed from {} to {} (reduced by {}%)"",
                        imageHash,
                        GeneralUtils.formatBytes(originalSize),
                        GeneralUtils.formatBytes(compressedSize),
                        String.format(""%.1f"", reductionPercentage));
            } else {
                log.info(""Image hash {}: Not suitable for compression, skipping"", imageHash);
                stats.totalCompressedBytes += originalSize * references.size();
                stats.skippedImages++;
            }
        }

        return compressedVersions;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,getOriginalImage,"PDImageXObject getOriginalImage(PDDocument,ImageReference)","[337, 356]","{'A233': [(337, 356)]}",{'A233': 1.0},A233,,"    private PDImageXObject getOriginalImage(PDDocument doc, ImageReference ref) throws IOException {
        if (ref instanceof NestedImageReference) {
            // Get the nested image from within a form XObject
            NestedImageReference nestedRef = (NestedImageReference) ref;
            PDPage page = doc.getPage(nestedRef.pageNum);
            PDResources pageResources = page.getResources();

            // Get the form XObject
            PDFormXObject formXObj = (PDFormXObject) pageResources.getXObject(nestedRef.formName);

            // Get the nested image from the form's resources
            PDResources formResources = formXObj.getResources();
            return (PDImageXObject) formResources.getXObject(nestedRef.imageName);
        } else {
            // Get direct image from page resources
            PDPage page = doc.getPage(ref.pageNum);
            PDResources resources = page.getResources();
            return (PDImageXObject) resources.getXObject(ref.name);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,compressImage,"PDImageXObject compressImage(PDDocument,PDImageXObject,int,double,float,boolean)","[359, 388]","{'A233': [(359, 388)]}",{'A233': 1.0},A233,,"    private PDImageXObject compressImage(
            PDDocument doc,
            PDImageXObject originalImage,
            int originalSize,
            double scaleFactor,
            float jpegQuality,
            boolean convertToGrayscale)
            throws IOException {

        // Process and compress the image
        BufferedImage processedImage =
                processAndCompressImage(
                        originalImage, scaleFactor, jpegQuality, convertToGrayscale);

        if (processedImage == null) {
            return null;
        }

        // Convert to bytes for storage
        byte[] compressedData = convertToBytes(processedImage, jpegQuality);

        // Check if compression is beneficial
        if (compressedData.length < originalSize || convertToGrayscale) {
            // Create a compressed version
            return PDImageXObject.createFromByteArray(
                    doc, compressedData, originalImage.getCOSObject().toString());
        }

        return null;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,replaceImages,"void replaceImages(PDDocument,Map<String, List<ImageReference>>,Map<String, PDImageXObject>,CompressionStats)","[391, 411]","{'A233': [(391, 411)]}",{'A233': 1.0},A233,,"    private void replaceImages(
            PDDocument doc,
            Map<String, List<ImageReference>> uniqueImages,
            Map<String, PDImageXObject> compressedVersions,
            CompressionStats stats)
            throws IOException {

        for (Entry<String, List<ImageReference>> entry : uniqueImages.entrySet()) {
            String imageHash = entry.getKey();
            List<ImageReference> references = entry.getValue();

            // Skip if no compressed version exists
            PDImageXObject compressedImage = compressedVersions.get(imageHash);
            if (compressedImage == null) continue;

            // Replace ALL instances with the compressed version
            for (ImageReference ref : references) {
                replaceImageReference(doc, ref, compressedImage);
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,replaceImageReference,"void replaceImageReference(PDDocument,ImageReference,PDImageXObject)","[414, 442]","{'A233': [(414, 442)]}",{'A233': 1.0},A233,,"    private void replaceImageReference(
            PDDocument doc, ImageReference ref, PDImageXObject compressedImage) throws IOException {
        if (ref instanceof NestedImageReference) {
            // Replace nested image within form XObject
            NestedImageReference nestedRef = (NestedImageReference) ref;
            PDPage page = doc.getPage(nestedRef.pageNum);
            PDResources pageResources = page.getResources();

            // Get the form XObject
            PDFormXObject formXObj = (PDFormXObject) pageResources.getXObject(nestedRef.formName);

            // Replace the nested image in the form's resources
            PDResources formResources = formXObj.getResources();
            formResources.put(nestedRef.imageName, compressedImage);

            log.info(
                    ""Replaced nested image '{}' in form '{}' on page {} with compressed version"",
                    nestedRef.imageName.getName(),
                    nestedRef.formName.getName(),
                    nestedRef.pageNum + 1);
        } else {
            // Replace direct image in page resources
            PDPage page = doc.getPage(ref.pageNum);
            PDResources resources = page.getResources();
            resources.put(ref.name, compressedImage);

            log.info(""Replaced direct image on page {} with compressed version"", ref.pageNum + 1);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,logCompressionStats,"void logCompressionStats(CompressionStats,long)","[445, 466]","{'A233': [(445, 466)]}",{'A233': 1.0},A233,,"    private void logCompressionStats(CompressionStats stats, long originalFileSize) {
        // Calculate image reduction percentage
        double overallImageReduction =
                stats.totalOriginalBytes > 0
                        ? 100.0 - ((stats.totalCompressedBytes * 100.0) / stats.totalOriginalBytes)
                        : 0;

        int duplicatedImages = stats.totalImages - stats.uniqueImagesCount;

        log.info(
                ""Image compression summary - Total unique: {}, Compressed: {}, Skipped: {}, Duplicates: {}, Nested: {}"",
                stats.uniqueImagesCount,
                stats.compressedImages,
                stats.skippedImages,
                duplicatedImages,
                stats.nestedImages);
        log.info(
                ""Total original image size: {}, compressed: {} (reduced by {}%)"",
                GeneralUtils.formatBytes(stats.totalOriginalBytes),
                GeneralUtils.formatBytes(stats.totalCompressedBytes),
                String.format(""%.1f"", overallImageReduction));
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,convertToGrayscale,BufferedImage convertToGrayscale(BufferedImage),"[468, 478]","{'A233': [(468, 478)]}",{'A233': 1.0},A233,,"    private BufferedImage convertToGrayscale(BufferedImage image) {
        BufferedImage grayImage =
                new BufferedImage(
                        image.getWidth(), image.getHeight(), BufferedImage.TYPE_BYTE_GRAY);

        Graphics2D g = grayImage.createGraphics();
        g.drawImage(image, 0, 0, null);
        g.dispose();

        return grayImage;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,processAndCompressImage,"BufferedImage processAndCompressImage(PDImageXObject,double,float,boolean)","[481, 560]","{'A233': [(481, 560)]}",{'A233': 1.0},A233,,"    private BufferedImage processAndCompressImage(
            PDImageXObject image, double scaleFactor, float jpegQuality, boolean convertToGrayscale)
            throws IOException {
        BufferedImage bufferedImage = image.getImage();
        int originalWidth = bufferedImage.getWidth();
        int originalHeight = bufferedImage.getHeight();

        // Minimum dimensions to preserve reasonable quality
        int MIN_WIDTH = 400;
        int MIN_HEIGHT = 400;

        log.info(""Original dimensions: {}x{}"", originalWidth, originalHeight);

        // Skip if already small enough
        if ((originalWidth <= MIN_WIDTH || originalHeight <= MIN_HEIGHT) && !convertToGrayscale) {
            log.info(""Skipping - below minimum dimensions threshold"");
            return null;
        }

        // Convert to grayscale first if requested (before resizing for better quality)
        if (convertToGrayscale) {
            bufferedImage = convertToGrayscale(bufferedImage);
            log.info(""Converted image to grayscale"");
        }

        // Adjust scale factor for very large or very small images
        double adjustedScaleFactor = scaleFactor;
        if (originalWidth > 3000 || originalHeight > 3000) {
            // More aggressive for very large images
            adjustedScaleFactor = Math.min(scaleFactor, 0.75);
            log.info(""Very large image, using more aggressive scale: {}"", adjustedScaleFactor);
        } else if (originalWidth < 1000 || originalHeight < 1000) {
            // More conservative for smaller images
            adjustedScaleFactor = Math.max(scaleFactor, 0.9);
            log.info(""Smaller image, using conservative scale: {}"", adjustedScaleFactor);
        }

        int newWidth = (int) (originalWidth * adjustedScaleFactor);
        int newHeight = (int) (originalHeight * adjustedScaleFactor);

        // Ensure minimum dimensions
        newWidth = Math.max(newWidth, MIN_WIDTH);
        newHeight = Math.max(newHeight, MIN_HEIGHT);

        // Skip if change is negligible
        if ((double) newWidth / originalWidth > 0.95
                && (double) newHeight / originalHeight > 0.95
                && !convertToGrayscale) {
            log.info(""Change too small, skipping compression"");
            return null;
        }

        log.info(
                ""Resizing to {}x{} ({}% of original)"",
                newWidth, newHeight, Math.round((newWidth * 100.0) / originalWidth));

        BufferedImage scaledImage;
        if (convertToGrayscale) {
            // If already grayscale, maintain the grayscale format
            scaledImage = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_BYTE_GRAY);
        } else {
            // Otherwise use original color model
            scaledImage =
                    new BufferedImage(
                            newWidth,
                            newHeight,
                            bufferedImage.getColorModel().hasAlpha()
                                    ? BufferedImage.TYPE_INT_ARGB
                                    : BufferedImage.TYPE_INT_RGB);
        }
        Graphics2D g2d = scaledImage.createGraphics();
        g2d.setRenderingHint(
                RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.drawImage(bufferedImage, 0, 0, newWidth, newHeight, null);
        g2d.dispose();

        return scaledImage;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,convertToBytes,"byte[] convertToBytes(BufferedImage,float)","[563, 591]","{'A233': [(563, 591)]}",{'A233': 1.0},A233,,"    private byte[] convertToBytes(BufferedImage scaledImage, float jpegQuality) throws IOException {
        String format = scaledImage.getColorModel().hasAlpha() ? ""png"" : ""jpeg"";
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        if (""jpeg"".equals(format)) {
            // Get the best available JPEG writer
            Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(""jpeg"");
            ImageWriter writer = writers.next();

            JPEGImageWriteParam param = (JPEGImageWriteParam) writer.getDefaultWriteParam();

            // Set compression parameters
            param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
            param.setCompressionQuality(jpegQuality);
            param.setOptimizeHuffmanTables(true); // Better compression
            param.setProgressiveMode(ImageWriteParam.MODE_DEFAULT); // Progressive scanning

            // Write compressed image
            try (ImageOutputStream ios = ImageIO.createImageOutputStream(outputStream)) {
                writer.setOutput(ios);
                writer.write(null, new IIOImage(scaledImage, null, null), param);
            }
            writer.dispose();
        } else {
            ImageIO.write(scaledImage, format, outputStream);
        }

        return outputStream.toByteArray();
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,generateImageHash,String generateImageHash(PDImageXObject),"[594, 612]","{'A233': [(594, 612)]}",{'A233': 1.0},A233,,"    private String generateImageHash(PDImageXObject image) {
        try {
            // Create a stream for the raw stream data
            try (InputStream stream = image.getCOSObject().createRawInputStream()) {
                // Read up to first 8KB of data for the hash
                byte[] buffer = new byte[8192];
                int bytesRead = stream.read(buffer);
                if (bytesRead > 0) {
                    byte[] dataToHash =
                            bytesRead == buffer.length ? buffer : Arrays.copyOf(buffer, bytesRead);
                    return bytesToHexString(generateMD5(dataToHash));
                }
                return ""empty-stream"";
            }
        } catch (Exception e) {
            ExceptionUtils.logException(""image hash generation"", e);
            return ""fallback-"" + System.identityHashCode(image);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,bytesToHexString,String bytesToHexString(byte[]),"[614, 620]","{'A233': [(614, 620)]}",{'A233': 1.0},A233,,"    private String bytesToHexString(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format(""%02x"", b));
        }
        return sb.toString();
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,generateMD5,byte[] generateMD5(byte[]),"[622, 629]","{'A233': [(622, 629)]}",{'A233': 1.0},A233,,"    private byte[] generateMD5(byte[] data) throws IOException {
        try {
            MessageDigest md = MessageDigest.getInstance(""MD5"");
            return md.digest(data); // Get the MD5 hash of the image bytes
        } catch (NoSuchAlgorithmException e) {
            throw ExceptionUtils.createMd5AlgorithmException(e);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,getScaleFactorForLevel,double getScaleFactorForLevel(int),"[632, 644]","{'A233': [(632, 644)]}",{'A233': 1.0},A233,,"    private double getScaleFactorForLevel(int optimizeLevel) {
        return switch (optimizeLevel) {
            case 3 -> 0.85;
            case 4 -> 0.75;
            case 5 -> 0.65;
            case 6 -> 0.55;
            case 7 -> 0.45;
            case 8 -> 0.35;
            case 9 -> 0.25;
            case 10 -> 0.15;
            default -> 1.0;
        };
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,getJpegQualityForLevel,float getJpegQualityForLevel(int),"[647, 659]","{'A233': [(647, 659)]}",{'A233': 1.0},A233,,"    private float getJpegQualityForLevel(int optimizeLevel) {
        return switch (optimizeLevel) {
            case 3 -> 0.85f;
            case 4 -> 0.80f;
            case 5 -> 0.75f;
            case 6 -> 0.70f;
            case 7 -> 0.60f;
            case 8 -> 0.50f;
            case 9 -> 0.35f;
            case 10 -> 0.2f;
            default -> 0.7f;
        };
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,optimizePdf,ResponseEntity<byte[]> optimizePdf(OptimizePdfRequest),"[661, 825]","{'A233': [(661, 664), (667, 772), (774, 825)], 'A234': [(665, 666)], 'A235': [(773, 773)]}","{'A233': 0.9818181818181818, 'A234': 0.012121212121212121, 'A235': 0.006060606060606061}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/compress-pdf"")
    @Operation(
            summary = ""Optimize PDF file"",
            description =
                    ""This endpoint accepts a PDF file and optimizes it based on the provided""
                            + "" parameters. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest request)
            throws Exception {
        MultipartFile inputFile = request.getFileInput();
        Integer optimizeLevel = request.getOptimizeLevel();
        String expectedOutputSizeString = request.getExpectedOutputSize();
        Boolean convertToGrayscale = request.getGrayscale();
        if (expectedOutputSizeString == null && optimizeLevel == null) {
            throw new Exception(""Both expected output size and optimize level are not specified"");
        }

        Long expectedOutputSize = 0L;
        boolean autoMode = false;
        if (expectedOutputSizeString != null && expectedOutputSizeString.length() > 1) {
            expectedOutputSize = GeneralUtils.convertSizeToBytes(expectedOutputSizeString);
            autoMode = true;
        }

        // Create initial input file
        Path originalFile = Files.createTempFile(""original_"", "".pdf"");
        inputFile.transferTo(originalFile.toFile());
        long inputFileSize = Files.size(originalFile);

        Path currentFile = Files.createTempFile(""working_"", "".pdf"");
        Files.copy(originalFile, currentFile, StandardCopyOption.REPLACE_EXISTING);

        // Keep track of all temporary files for cleanup
        List<Path> tempFiles = new ArrayList<>();
        tempFiles.add(originalFile);
        tempFiles.add(currentFile);
        try {
            if (autoMode) {
                double sizeReductionRatio = expectedOutputSize / (double) inputFileSize;
                optimizeLevel = determineOptimizeLevel(sizeReductionRatio);
            }

            boolean sizeMet = false;
            boolean imageCompressionApplied = false;
            boolean externalCompressionApplied = false;

            while (!sizeMet && optimizeLevel <= 9) {
                // Apply external compression first
                if (!externalCompressionApplied) {
                    boolean ghostscriptSuccess = false;

                    // Try Ghostscript first if available - for ANY compression level
                    if (isGhostscriptEnabled()) {
                        try {
                            applyGhostscriptCompression(
                                    request, optimizeLevel, currentFile, tempFiles);
                            log.info(""Ghostscript compression applied successfully"");
                            ghostscriptSuccess = true;
                        } catch (IOException e) {
                            log.warn(""Ghostscript compression failed, trying fallback methods"");
                        }
                    }

                    // Fallback to QPDF if Ghostscript failed or not available (levels 1-3 only)
                    if (!ghostscriptSuccess && isQpdfEnabled() && optimizeLevel <= 3) {
                        try {
                            applyQpdfCompression(request, optimizeLevel, currentFile, tempFiles);
                            log.info(""QPDF compression applied successfully"");
                        } catch (IOException e) {
                            log.warn(""QPDF compression also failed"");
                        }
                    }

                    if (!ghostscriptSuccess && !isQpdfEnabled()) {
                        log.info(
                                ""No external compression tools available, using image compression only"");
                    }

                    externalCompressionApplied = true;

                    // Skip image compression if Ghostscript succeeded
                    if (ghostscriptSuccess) {
                        imageCompressionApplied = true;
                    }
                }

                // Apply image compression for levels 4+ only if Ghostscript didn't run
                if ((optimizeLevel >= 4 || Boolean.TRUE.equals(convertToGrayscale))
                        && !imageCompressionApplied) {
                    // Use different scale factors based on level
                    double scaleFactor =
                            switch (optimizeLevel) {
                                case 4 -> 0.95; // 95% of original size
                                case 5 -> 0.9; // 90% of original size
                                case 6 -> 0.8; // 80% of original size
                                case 7 -> 0.7; // 70% of original size
                                case 8 -> 0.65; // 65% of original size
                                case 9 -> 0.5; // 50% of original size
                                default -> 1.0;
                            };

                    log.info(""Applying image compression with scale factor: {}"", scaleFactor);
                    Path compressedImageFile =
                            compressImagesInPDF(
                                    currentFile,
                                    scaleFactor,
                                    0.7f, // Default JPEG quality
                                    Boolean.TRUE.equals(convertToGrayscale));

                    tempFiles.add(compressedImageFile);
                    currentFile = compressedImageFile;
                    imageCompressionApplied = true;
                }

                // Check if target size reached or not in auto mode
                long outputFileSize = Files.size(currentFile);
                if (outputFileSize <= expectedOutputSize || !autoMode) {
                    sizeMet = true;
                } else {
                    int newOptimizeLevel =
                            incrementOptimizeLevel(
                                    optimizeLevel, outputFileSize, expectedOutputSize);

                    // Check if we can't increase the level further
                    if (newOptimizeLevel == optimizeLevel) {
                        if (autoMode) {
                            log.info(
                                    ""Maximum optimization level reached without meeting target size."");
                            sizeMet = true;
                        }
                    } else {
                        // Reset flags for next iteration with higher optimization level
                        imageCompressionApplied = false;
                        externalCompressionApplied = false;
                        optimizeLevel = newOptimizeLevel;
                    }
                }
            }

            // Use original if optimized file is somehow larger
            long finalFileSize = Files.size(currentFile);
            if (finalFileSize >= inputFileSize) {
                log.warn(
                        ""Optimized file is larger than the original. Using the original file instead."");
                currentFile = originalFile;
            }

            String outputFilename =
                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())
                                    .replaceFirst(""[.][^.]+$"", """")
                            + ""_Optimized.pdf"";

            return WebResponseUtils.pdfDocToWebResponse(
                    pdfDocumentFactory.load(currentFile.toFile()), outputFilename);

        } finally {
            // Clean up all temporary files
            for (Path tempFile : tempFiles) {
                try {
                    Files.deleteIfExists(tempFile);
                } catch (IOException e) {
                    log.warn(""Failed to delete temporary file: "" + tempFile, e);
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,applyGhostscriptCompression,"void applyGhostscriptCompression(OptimizePdfRequest,int,Path,List<Path>)","[828, 915]","{'A233': [(828, 915)]}",{'A233': 1.0},A233,,"    private void applyGhostscriptCompression(
            OptimizePdfRequest request, int optimizeLevel, Path currentFile, List<Path> tempFiles)
            throws IOException {

        long preGsSize = Files.size(currentFile);
        log.info(""Pre-Ghostscript file size: {}"", GeneralUtils.formatBytes(preGsSize));

        // Create output file for Ghostscript
        Path gsOutputFile = Files.createTempFile(""gs_output_"", "".pdf"");
        tempFiles.add(gsOutputFile);

        // Build Ghostscript command based on optimization level
        List<String> command = new ArrayList<>();
        command.add(""gs"");
        command.add(""-sDEVICE=pdfwrite"");
        command.add(""-dCompatibilityLevel=1.5"");
        command.add(""-dNOPAUSE"");
        command.add(""-dQUIET"");
        command.add(""-dBATCH"");

        // Map optimization levels to Ghostscript settings
        switch (optimizeLevel) {
            case 1:
                command.add(""-dPDFSETTINGS=/prepress"");
                break;
            case 2:
                command.add(""-dPDFSETTINGS=/printer"");
                break;
            case 3:
                command.add(""-dPDFSETTINGS=/ebook"");
                break;
            case 4:
            case 5:
                command.add(""-dPDFSETTINGS=/screen"");
                break;
            case 6:
            case 7:
                command.add(""-dPDFSETTINGS=/screen"");
                command.add(""-dColorImageResolution=150"");
                command.add(""-dGrayImageResolution=150"");
                command.add(""-dMonoImageResolution=300"");
                break;
            case 8:
            case 9:
                command.add(""-dPDFSETTINGS=/screen"");
                command.add(""-dColorImageResolution=100"");
                command.add(""-dGrayImageResolution=100"");
                command.add(""-dMonoImageResolution=200"");
                break;
            case 10:
                command.add(""-dPDFSETTINGS=/screen"");
                command.add(""-dColorImageResolution=72"");
                command.add(""-dGrayImageResolution=72"");
                command.add(""-dMonoImageResolution=150"");
                break;
            default:
                command.add(""-dPDFSETTINGS=/screen"");
                break;
        }

        command.add(""-sOutputFile="" + gsOutputFile.toString());
        command.add(currentFile.toString());

        ProcessExecutorResult returnCode = null;
        try {
            returnCode =
                    ProcessExecutor.getInstance(ProcessExecutor.Processes.GHOSTSCRIPT)
                            .runCommandWithOutputHandling(command);

            if (returnCode.getRc() == 0) {
                // Update current file to the Ghostscript output
                Files.copy(gsOutputFile, currentFile, StandardCopyOption.REPLACE_EXISTING);

                long postGsSize = Files.size(currentFile);
                double gsReduction = 100.0 - ((postGsSize * 100.0) / preGsSize);
                log.info(
                        ""Post-Ghostscript file size: {} (reduced by {}%)"",
                        GeneralUtils.formatBytes(postGsSize), String.format(""%.1f"", gsReduction));
            } else {
                log.warn(""Ghostscript compression failed with return code: {}"", returnCode.getRc());
                throw new IOException(""Ghostscript compression failed"");
            }

        } catch (Exception e) {
            log.warn(""Ghostscript compression failed, will fallback to other methods"", e);
            throw new IOException(""Ghostscript compression failed"", e);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,applyQpdfCompression,"void applyQpdfCompression(OptimizePdfRequest,int,Path,List<Path>)","[918, 977]","{'A233': [(918, 977)]}",{'A233': 1.0},A233,,"    private void applyQpdfCompression(
            OptimizePdfRequest request, int optimizeLevel, Path currentFile, List<Path> tempFiles)
            throws IOException {

        long preQpdfSize = Files.size(currentFile);
        log.info(""Pre-QPDF file size: {}"", GeneralUtils.formatBytes(preQpdfSize));

        // Map optimization levels to QPDF compression levels
        int qpdfCompressionLevel;
        if (optimizeLevel == 1) {
            qpdfCompressionLevel = 5;
        } else if (optimizeLevel == 2) {
            qpdfCompressionLevel = 9;
        } else {
            qpdfCompressionLevel = 9;
        }

        // Create output file for QPDF
        Path qpdfOutputFile = Files.createTempFile(""qpdf_output_"", "".pdf"");
        tempFiles.add(qpdfOutputFile);

        // Build QPDF command
        List<String> command = new ArrayList<>();
        command.add(""qpdf"");
        if (request.getNormalize()) {
            command.add(""--normalize-content=y"");
        }
        if (request.getLinearize()) {
            command.add(""--linearize"");
        }
        command.add(""--recompress-flate"");
        command.add(""--compression-level="" + qpdfCompressionLevel);
        command.add(""--compress-streams=y"");
        command.add(""--object-streams=generate"");
        command.add(currentFile.toString());
        command.add(qpdfOutputFile.toString());

        ProcessExecutorResult returnCode = null;
        try {
            returnCode =
                    ProcessExecutor.getInstance(ProcessExecutor.Processes.QPDF)
                            .runCommandWithOutputHandling(command);

            // Update current file to the QPDF output
            Files.copy(qpdfOutputFile, currentFile, StandardCopyOption.REPLACE_EXISTING);

            long postQpdfSize = Files.size(currentFile);
            double qpdfReduction = 100.0 - ((postQpdfSize * 100.0) / preQpdfSize);
            log.info(
                    ""Post-QPDF file size: {} (reduced by {}%)"",
                    GeneralUtils.formatBytes(postQpdfSize), String.format(""%.1f"", qpdfReduction));

        } catch (Exception e) {
            if (returnCode != null && returnCode.getRc() != 3) {
                throw new IOException(""QPDF command failed"", e);
            }
            // If QPDF fails, keep using the current file
            log.warn(""QPDF compression failed, continuing with current file"", e);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,determineOptimizeLevel,int determineOptimizeLevel(double),"[980, 990]","{'A233': [(980, 990)]}",{'A233': 1.0},A233,,"    private int determineOptimizeLevel(double sizeReductionRatio) {
        if (sizeReductionRatio > 0.9) return 1;
        if (sizeReductionRatio > 0.8) return 2;
        if (sizeReductionRatio > 0.7) return 3;
        if (sizeReductionRatio > 0.6) return 4;
        if (sizeReductionRatio > 0.3) return 5;
        if (sizeReductionRatio > 0.2) return 6;
        if (sizeReductionRatio > 0.15) return 7;
        if (sizeReductionRatio > 0.1) return 8;
        return 9;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java,CompressController,incrementOptimizeLevel,"int incrementOptimizeLevel(int,long,long)","[993, 1003]","{'A233': [(993, 994), (996, 1003)], 'A238': [(995, 995)]}","{'A233': 0.9090909090909091, 'A238': 0.09090909090909091}",A233,,"    private int incrementOptimizeLevel(int currentLevel, long currentSize, long targetSize) {
        double currentRatio = currentSize / (double) targetSize;
        log.info(""Current compression ratio: {}"", String.format(""%.2f"", currentRatio));

        if (currentRatio > 2.0) {
            return Math.min(9, currentLevel + 3);
        } else if (currentRatio > 1.5) {
            return Math.min(9, currentLevel + 2);
        }
        return Math.min(9, currentLevel + 1);
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/RepairController.java,RepairController,isGhostscriptEnabled,boolean isGhostscriptEnabled(),"[41, 43]","{'A233': [(41, 43)]}",{'A233': 1.0},A233,,"    private boolean isGhostscriptEnabled() {
        return endpointConfiguration.isGroupEnabled(""Ghostscript"");
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/RepairController.java,RepairController,isQpdfEnabled,boolean isQpdfEnabled(),"[45, 47]","{'A233': [(45, 47)]}",{'A233': 1.0},A233,,"    private boolean isQpdfEnabled() {
        return endpointConfiguration.isGroupEnabled(""qpdf"");
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/RepairController.java,RepairController,repairPdf,ResponseEntity<byte[]> repairPdf(PDFFile),"[49, 132]","{'A233': [(49, 53), (57, 57), (59, 132)], 'A234': [(54, 56), (58, 58)]}","{'A233': 0.9523809523809523, 'A234': 0.047619047619047616}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/repair"")
    @Operation(
            summary = ""Repair a PDF file"",
            description =
                    ""This endpoint repairs a given PDF file by running Ghostscript (primary), qpdf (fallback), or PDFBox (if no external tools available). The PDF is""
                            + "" first saved to a temporary location, repaired, read back, and then""
                            + "" returned as a response. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> repairPdf(@ModelAttribute PDFFile file)
            throws IOException, InterruptedException {
        MultipartFile inputFile = file.getFileInput();

        // Use TempFile with try-with-resources for automatic cleanup
        try (TempFile tempInputFile = new TempFile(tempFileManager, "".pdf"");
                TempFile tempOutputFile = new TempFile(tempFileManager, "".pdf"")) {

            // Save the uploaded file to the temporary location
            inputFile.transferTo(tempInputFile.getFile());

            boolean repairSuccess = false;

            // Try Ghostscript first if available
            if (isGhostscriptEnabled()) {
                try {
                    List<String> gsCommand = new ArrayList<>();
                    gsCommand.add(""gs"");
                    gsCommand.add(""-o"");
                    gsCommand.add(tempOutputFile.getPath().toString());
                    gsCommand.add(""-sDEVICE=pdfwrite"");
                    gsCommand.add(tempInputFile.getPath().toString());

                    ProcessExecutorResult gsResult =
                            ProcessExecutor.getInstance(ProcessExecutor.Processes.GHOSTSCRIPT)
                                    .runCommandWithOutputHandling(gsCommand);

                    if (gsResult.getRc() == 0) {
                        repairSuccess = true;
                    }
                } catch (Exception e) {
                    // Log and continue to QPDF fallback
                    log.warn(""Ghostscript repair failed, trying QPDF fallback: "", e);
                }
            }

            // Fallback to QPDF if Ghostscript failed or not available
            if (!repairSuccess && isQpdfEnabled()) {
                List<String> qpdfCommand = new ArrayList<>();
                qpdfCommand.add(""qpdf"");
                qpdfCommand.add(""--replace-input""); // Automatically fixes problems it can
                qpdfCommand.add(""--qdf""); // Linearizes and normalizes PDF structure
                qpdfCommand.add(""--object-streams=disable""); // Can help with some corruptions
                qpdfCommand.add(tempInputFile.getPath().toString());
                qpdfCommand.add(tempOutputFile.getPath().toString());

                ProcessExecutorResult qpdfResult =
                        ProcessExecutor.getInstance(ProcessExecutor.Processes.QPDF)
                                .runCommandWithOutputHandling(qpdfCommand);

                repairSuccess = true;
            }

            // Use PDFBox as last resort if no external tools are available
            if (!repairSuccess) {
                if (!isGhostscriptEnabled() && !isQpdfEnabled()) {
                    // Basic PDFBox repair - load and save to fix structural issues
                    try (var document = pdfDocumentFactory.load(tempInputFile.getFile())) {
                        document.save(tempOutputFile.getFile());
                        repairSuccess = true;
                    }
                } else {
                    throw new IOException(""PDF repair failed with available tools"");
                }
            }

            // Read the repaired PDF file
            byte[] pdfBytes = pdfDocumentFactory.loadToBytes(tempOutputFile.getFile());

            // Return the repaired PDF as a response
            String outputFilename =
                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())
                                    .replaceFirst(""[.][^.]+$"", """")
                            + ""_repaired.pdf"";
            return WebResponseUtils.bytesToWebResponse(pdfBytes, outputFilename);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java,MetadataController,checkUndefined,String checkUndefined(String),"[39, 47]","{'A233': [(39, 47)]}",{'A233': 1.0},A233,,"    private String checkUndefined(String entry) {
        // Check if the string is ""undefined""
        if (""undefined"".equals(entry)) {
            // Return null if it is
            return null;
        }
        // Return the original string if it's not ""undefined""
        return entry;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java,MetadataController,initBinder,void initBinder(WebDataBinder),"[49, 52]","{'A256': [(49, 52)]}",{'A256': 1.0},A256,,"    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(Map.class, ""allRequestParams"", new StringToMapPropertyEditor());
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java,MetadataController,metadata,ResponseEntity<byte[]> metadata(MetadataRequest),"[54, 184]","{'A233': [(54, 57), (61, 67), (69, 125), (135, 151), (153, 163), (165, 180), (184, 184)], 'A238': [(152, 152), (164, 164)], 'A234': [(58, 60), (68, 68)], 'A243': [(126, 134)], 'A246': [(181, 183)]}","{'A233': 0.8625954198473282, 'A238': 0.015267175572519083, 'A234': 0.030534351145038167, 'A243': 0.06870229007633588, 'A246': 0.022900763358778626}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/update-metadata"")
    @Operation(
            summary = ""Update metadata of a PDF file"",
            description =
                    ""This endpoint allows you to update the metadata of a given PDF file. You can""
                            + "" add, modify, or delete standard and custom metadata fields. Input:PDF""
                            + "" Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> metadata(@ModelAttribute MetadataRequest request)
            throws IOException {

        // Extract PDF file from the request object
        MultipartFile pdfFile = request.getFileInput();

        // Extract metadata information
        boolean deleteAll = Boolean.TRUE.equals(request.getDeleteAll());
        String author = request.getAuthor();
        String creationDate = request.getCreationDate();
        String creator = request.getCreator();
        String keywords = request.getKeywords();
        String modificationDate = request.getModificationDate();
        String producer = request.getProducer();
        String subject = request.getSubject();
        String title = request.getTitle();
        String trapped = request.getTrapped();

        // Extract additional custom parameters
        Map<String, String> allRequestParams = request.getAllRequestParams();
        if (allRequestParams == null) {
            allRequestParams = new java.util.HashMap<String, String>();
        }
        // Load the PDF file into a PDDocument
        PDDocument document = pdfDocumentFactory.load(pdfFile, true);

        // Get the document information from the PDF
        PDDocumentInformation info = document.getDocumentInformation();

        // Check if each metadata value is ""undefined"" and set it to null if it is
        author = checkUndefined(author);
        creationDate = checkUndefined(creationDate);
        creator = checkUndefined(creator);
        keywords = checkUndefined(keywords);
        modificationDate = checkUndefined(modificationDate);
        producer = checkUndefined(producer);
        subject = checkUndefined(subject);
        title = checkUndefined(title);
        trapped = checkUndefined(trapped);

        // If the ""deleteAll"" flag is set, remove all metadata from the document
        // information
        if (deleteAll) {
            for (String key : info.getMetadataKeys()) {
                info.setCustomMetadataValue(key, null);
            }
            // Remove metadata from the PDF history
            document.getDocumentCatalog().getCOSObject().removeItem(COSName.getPDFName(""Metadata""));
            document.getDocumentCatalog()
                    .getCOSObject()
                    .removeItem(COSName.getPDFName(""PieceInfo""));
            author = null;
            creationDate = null;
            creator = null;
            keywords = null;
            modificationDate = null;
            producer = null;
            subject = null;
            title = null;
            trapped = null;
        } else {
            // Iterate through the request parameters and set the metadata values
            for (Entry<String, String> entry : allRequestParams.entrySet()) {
                String key = entry.getKey();
                // Check if the key is a standard metadata key
                if (!""Author"".equalsIgnoreCase(key)
                        && !""CreationDate"".equalsIgnoreCase(key)
                        && !""Creator"".equalsIgnoreCase(key)
                        && !""Keywords"".equalsIgnoreCase(key)
                        && !""modificationDate"".equalsIgnoreCase(key)
                        && !""Producer"".equalsIgnoreCase(key)
                        && !""Subject"".equalsIgnoreCase(key)
                        && !""Title"".equalsIgnoreCase(key)
                        && !""Trapped"".equalsIgnoreCase(key)
                        && !key.contains(""customKey"")
                        && !key.contains(""customValue"")) {
                    info.setCustomMetadataValue(key, entry.getValue());
                } else if (key.contains(""customKey"")) {
                    int number = Integer.parseInt(key.replaceAll(""\\D"", """"));
                    String customKey = entry.getValue();
                    String customValue = allRequestParams.get(""customValue"" + number);
                    info.setCustomMetadataValue(customKey, customValue);
                }
            }
        }
        if (creationDate != null && creationDate.length() > 0) {
            Calendar creationDateCal = Calendar.getInstance();
            try {
                creationDateCal.setTime(
                        new SimpleDateFormat(""yyyy/MM/dd HH:mm:ss"").parse(creationDate));
            } catch (ParseException e) {
                log.error(""exception"", e);
            }
            info.setCreationDate(creationDateCal);
        } else {
            info.setCreationDate(null);
        }
        if (modificationDate != null && modificationDate.length() > 0) {
            Calendar modificationDateCal = Calendar.getInstance();
            try {
                modificationDateCal.setTime(
                        new SimpleDateFormat(""yyyy/MM/dd HH:mm:ss"").parse(modificationDate));
            } catch (ParseException e) {
                log.error(""exception"", e);
            }
            info.setModificationDate(modificationDateCal);
        } else {
            info.setModificationDate(null);
        }
        info.setCreator(creator);
        info.setKeywords(keywords);
        info.setAuthor(author);
        info.setProducer(producer);
        info.setSubject(subject);
        info.setTitle(title);
        info.setTrapped(trapped);

        document.setDocumentInformation(info);
        return WebResponseUtils.pdfDocToWebResponse(
                document,
                Filenames.toSimpleFileName(pdfFile.getOriginalFilename())
                                .replaceFirst(""[.][^.]+$"", """")
                        + ""_metadata.pdf"");
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java,AutoRenameController,extractHeader,ResponseEntity<byte[]> extractHeader(ExtractHeaderRequest),"[41, 144]","{'A233': [(41, 44), (47, 49), (51, 139), (143, 144)], 'A238': [(140, 140)], 'A234': [(45, 46), (50, 50)], 'A246': [(141, 142)]}","{'A233': 0.9423076923076923, 'A238': 0.009615384615384616, 'A234': 0.028846153846153848, 'A246': 0.019230769230769232}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/auto-rename"")
    @Operation(
            summary = ""Extract header from PDF file"",
            description =
                    ""This endpoint accepts a PDF file and attempts to extract its title or header""
                            + "" based on heuristics. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> extractHeader(@ModelAttribute ExtractHeaderRequest request)
            throws Exception {
        MultipartFile file = request.getFileInput();
        boolean useFirstTextAsFallback = Boolean.TRUE.equals(request.getUseFirstTextAsFallback());

        PDDocument document = pdfDocumentFactory.load(file);
        PDFTextStripper reader =
                new PDFTextStripper() {
                    List<LineInfo> lineInfos = new ArrayList<>();
                    StringBuilder lineBuilder = new StringBuilder();
                    float lastY = -1;
                    float maxFontSizeInLine = 0.0f;
                    int lineCount = 0;

                    @Override
                    protected void processTextPosition(TextPosition text) {
                        if (lastY != text.getY() && lineCount < LINE_LIMIT) {
                            processLine();
                            lineBuilder = new StringBuilder(text.getUnicode());
                            maxFontSizeInLine = text.getFontSizeInPt();
                            lastY = text.getY();
                            lineCount++;
                        } else if (lineCount < LINE_LIMIT) {
                            lineBuilder.append(text.getUnicode());
                            if (text.getFontSizeInPt() > maxFontSizeInLine) {
                                maxFontSizeInLine = text.getFontSizeInPt();
                            }
                        }
                    }

                    private void processLine() {
                        if (lineBuilder.length() > 0 && lineCount < LINE_LIMIT) {
                            lineInfos.add(new LineInfo(lineBuilder.toString(), maxFontSizeInLine));
                        }
                    }

                    @Override
                    public String getText(PDDocument doc) throws IOException {
                        this.lineInfos.clear();
                        this.lineBuilder = new StringBuilder();
                        this.lastY = -1;
                        this.maxFontSizeInLine = 0.0f;
                        this.lineCount = 0;
                        super.getText(doc);
                        processLine(); // Process the last line

                        // Merge lines with same font size
                        List<LineInfo> mergedLineInfos = new ArrayList<>();
                        for (int i = 0; i < lineInfos.size(); i++) {
                            String mergedText = lineInfos.get(i).text;
                            float fontSize = lineInfos.get(i).fontSize;
                            while (i + 1 < lineInfos.size()
                                    && lineInfos.get(i + 1).fontSize == fontSize) {
                                mergedText += "" "" + lineInfos.get(i + 1).text;
                                i++;
                            }
                            mergedLineInfos.add(new LineInfo(mergedText, fontSize));
                        }

                        // Sort lines by font size in descending order and get the first one
                        mergedLineInfos.sort(
                                Comparator.comparing((LineInfo li) -> li.fontSize).reversed());
                        String title =
                                mergedLineInfos.isEmpty() ? null : mergedLineInfos.get(0).text;

                        return title != null
                                ? title
                                : (useFirstTextAsFallback
                                        ? (mergedLineInfos.isEmpty()
                                                ? null
                                                : mergedLineInfos.get(mergedLineInfos.size() - 1)
                                                        .text)
                                        : null);
                    }

                    class LineInfo {
                        String text;
                        float fontSize;

                        LineInfo(String text, float fontSize) {
                            this.text = text;
                            this.fontSize = fontSize;
                        }
                    }
                };

        String header = reader.getText(document);

        // Sanitize the header string by removing characters not allowed in a filename.
        if (header != null && header.length() < 255) {
            header = header.replaceAll(""[/\\\\?%*:|\""<>]"", """").trim();
            return WebResponseUtils.pdfDocToWebResponse(document, header + "".pdf"");
        } else {
            log.info(""File has no good title to be found"");
            return WebResponseUtils.pdfDocToWebResponse(
                    document, Filenames.toSimpleFileName(file.getOriginalFilename()));
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java,AutoRenameController,processTextPosition,void processTextPosition(TextPosition),"[61, 75]","{'A233': [(61, 75)]}",{'A233': 1.0},A233,,"                    @Override
                    protected void processTextPosition(TextPosition text) {
                        if (lastY != text.getY() && lineCount < LINE_LIMIT) {
                            processLine();
                            lineBuilder = new StringBuilder(text.getUnicode());
                            maxFontSizeInLine = text.getFontSizeInPt();
                            lastY = text.getY();
                            lineCount++;
                        } else if (lineCount < LINE_LIMIT) {
                            lineBuilder.append(text.getUnicode());
                            if (text.getFontSizeInPt() > maxFontSizeInLine) {
                                maxFontSizeInLine = text.getFontSizeInPt();
                            }
                        }
                    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java,AutoRenameController,processLine,void processLine(),"[77, 81]","{'A233': [(77, 81)]}",{'A233': 1.0},A233,,"                    private void processLine() {
                        if (lineBuilder.length() > 0 && lineCount < LINE_LIMIT) {
                            lineInfos.add(new LineInfo(lineBuilder.toString(), maxFontSizeInLine));
                        }
                    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java,AutoRenameController,getText,String getText(PDDocument),"[83, 120]","{'A233': [(83, 120)]}",{'A233': 1.0},A233,,"                    @Override
                    public String getText(PDDocument doc) throws IOException {
                        this.lineInfos.clear();
                        this.lineBuilder = new StringBuilder();
                        this.lastY = -1;
                        this.maxFontSizeInLine = 0.0f;
                        this.lineCount = 0;
                        super.getText(doc);
                        processLine(); // Process the last line

                        // Merge lines with same font size
                        List<LineInfo> mergedLineInfos = new ArrayList<>();
                        for (int i = 0; i < lineInfos.size(); i++) {
                            String mergedText = lineInfos.get(i).text;
                            float fontSize = lineInfos.get(i).fontSize;
                            while (i + 1 < lineInfos.size()
                                    && lineInfos.get(i + 1).fontSize == fontSize) {
                                mergedText += "" "" + lineInfos.get(i + 1).text;
                                i++;
                            }
                            mergedLineInfos.add(new LineInfo(mergedText, fontSize));
                        }

                        // Sort lines by font size in descending order and get the first one
                        mergedLineInfos.sort(
                                Comparator.comparing((LineInfo li) -> li.fontSize).reversed());
                        String title =
                                mergedLineInfos.isEmpty() ? null : mergedLineInfos.get(0).text;

                        return title != null
                                ? title
                                : (useFirstTextAsFallback
                                        ? (mergedLineInfos.isEmpty()
                                                ? null
                                                : mergedLineInfos.get(mergedLineInfos.size() - 1)
                                                        .text)
                                        : null);
                    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/OverlayImageController.java,OverlayImageController,overlayImage,ResponseEntity<byte[]> overlayImage(OverlayImageRequest),"[34, 63]","{'A233': [(34, 37), (41, 45), (47, 55), (59, 59), (61, 63)], 'A238': [(60, 60)], 'A234': [(38, 40), (46, 46)], 'A246': [(56, 58)]}","{'A233': 0.7333333333333333, 'A238': 0.03333333333333333, 'A234': 0.13333333333333333, 'A246': 0.1}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/add-image"")
    @Operation(
            summary = ""Overlay image onto a PDF file"",
            description =
                    ""This endpoint overlays an image onto a PDF file at the specified coordinates.""
                            + "" The image can be overlaid on every page of the PDF if specified. ""
                            + "" Input:PDF/IMAGE Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> overlayImage(@ModelAttribute OverlayImageRequest request) {
        MultipartFile pdfFile = request.getFileInput();
        MultipartFile imageFile = request.getImageFile();
        float x = request.getX();
        float y = request.getY();
        boolean everyPage = Boolean.TRUE.equals(request.getEveryPage());
        try {
            byte[] pdfBytes = pdfFile.getBytes();
            byte[] imageBytes = imageFile.getBytes();
            byte[] result =
                    PdfUtils.overlayImage(
                            pdfDocumentFactory, pdfBytes, imageBytes, x, y, everyPage);

            return WebResponseUtils.bytesToWebResponse(
                    result,
                    Filenames.toSimpleFileName(pdfFile.getOriginalFilename())
                                    .replaceFirst(""[.][^.]+$"", """")
                            + ""_overlayed.pdf"");
        } catch (IOException e) {
            log.error(""Failed to add image to PDF"", e);
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ShowJavascript.java,ShowJavascript,extractHeader,ResponseEntity<byte[]> extractHeader(PDFFile),"[35, 83]","{'A233': [(35, 38), (41, 59), (62, 83)], 'A234': [(39, 40)], 'A246': [(60, 61)]}","{'A233': 0.9183673469387755, 'A234': 0.04081632653061224, 'A246': 0.04081632653061224}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/show-javascript"")
    @Operation(
            summary = ""Grabs all JS from a PDF and returns a single JS file with all code"",
            description = ""desc. Input:PDF Output:JS Type:SISO"")
    public ResponseEntity<byte[]> extractHeader(@ModelAttribute PDFFile file) throws Exception {
        MultipartFile inputFile = file.getFileInput();
        String script = """";

        try (PDDocument document = pdfDocumentFactory.load(inputFile)) {

            if (document.getDocumentCatalog() != null
                    && document.getDocumentCatalog().getNames() != null) {
                PDNameTreeNode<PDActionJavaScript> jsTree =
                        document.getDocumentCatalog().getNames().getJavaScript();

                if (jsTree != null) {
                    Map<String, PDActionJavaScript> jsEntries = jsTree.getNames();

                    for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {
                        String name = entry.getKey();
                        PDActionJavaScript jsAction = entry.getValue();
                        String jsCodeStr = jsAction.getAction();

                        script +=
                                ""// File: ""
                                        + Filenames.toSimpleFileName(
                                                inputFile.getOriginalFilename())
                                        + "", Script: ""
                                        + name
                                        + ""\n""
                                        + jsCodeStr
                                        + ""\n"";
                    }
                }
            }

            if (script.isEmpty()) {
                script =
                        ""PDF '""
                                + Filenames.toSimpleFileName(inputFile.getOriginalFilename())
                                + ""' does not contain Javascript"";
            }

            return WebResponseUtils.bytesToWebResponse(
                    script.getBytes(StandardCharsets.UTF_8),
                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()) + "".js"",
                    MediaType.TEXT_PLAIN);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java,ExtractImagesController,extractImages,ResponseEntity<byte[]> extractImages(PDFExtractImagesRequest),"[57, 172]","{'A233': [(57, 60), (64, 64), (66, 67), (69, 70), (74, 82), (86, 86), (94, 144), (158, 159)], 'A236': [(170, 170)], 'A234': [(61, 63), (68, 68)], 'A274': [(65, 65), (71, 73), (87, 93), (145, 157), (160, 169), (171, 172)], 'A246': [(83, 85)]}","{'A233': 0.6206896551724138, 'A236': 0.008620689655172414, 'A234': 0.034482758620689655, 'A274': 0.3103448275862069, 'A246': 0.02586206896551724}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/extract-images"")
    @Operation(
            summary = ""Extract images from a PDF file"",
            description =
                    ""This endpoint extracts images from a given PDF file and returns them in a zip""
                            + "" file. Users can specify the output image format. Input:PDF""
                            + "" Output:IMAGE/ZIP Type:SIMO"")
    public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFExtractImagesRequest request)
            throws IOException, InterruptedException, ExecutionException {
        MultipartFile file = request.getFileInput();
        String format = request.getFormat();
        boolean allowDuplicates = Boolean.TRUE.equals(request.getAllowDuplicates());
        PDDocument document = pdfDocumentFactory.load(file);

        // Determine if multithreading should be used based on PDF size or number of pages
        boolean useMultithreading = shouldUseMultithreading(file, document);

        // Create ByteArrayOutputStream to write zip file to byte array
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        // Create ZipOutputStream to create zip file
        ZipOutputStream zos = new ZipOutputStream(baos);

        // Set compression level
        zos.setLevel(Deflater.BEST_COMPRESSION);

        String filename =
                Filenames.toSimpleFileName(file.getOriginalFilename())
                        .replaceFirst(""[.][^.]+$"", """");
        Set<byte[]> processedImages = new HashSet<>();

        if (useMultithreading) {
            // Executor service to handle multithreading
            ExecutorService executor =
                    Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
            Set<Future<Void>> futures = new HashSet<>();

            // Safely iterate over each page, handling corrupt PDFs where page count might be wrong
            try {
                int pageCount = document.getPages().getCount();
                log.debug(""Document reports {} pages"", pageCount);

                int consecutiveFailures = 0;

                for (int pgNum = 0; pgNum < pageCount; pgNum++) {
                    try {
                        PDPage page = document.getPage(pgNum);
                        consecutiveFailures = 0; // Reset on success
                        final int currentPageNum = pgNum + 1; // Convert to 1-based page numbering
                        Future<Void> future =
                                executor.submit(
                                        () -> {
                                            try {
                                                // Call the image extraction method for each page
                                                extractImagesFromPage(
                                                        page,
                                                        format,
                                                        filename,
                                                        currentPageNum,
                                                        processedImages,
                                                        zos,
                                                        allowDuplicates);
                                            } catch (Exception e) {
                                                // Log the error and continue processing other pages
                                                ExceptionUtils.logException(
                                                        ""image extraction from page ""
                                                                + currentPageNum,
                                                        e);
                                            }

                                            return null; // Callable requires a return type
                                        });

                        // Add the Future object to the list to track completion
                        futures.add(future);
                    } catch (Exception e) {
                        consecutiveFailures++;
                        ExceptionUtils.logException(""page access for page "" + (pgNum + 1), e);

                        if (consecutiveFailures >= 3) {
                            log.warn(""Stopping page iteration after 3 consecutive failures"");
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                ExceptionUtils.logException(""page count determination"", e);
                throw e;
            }

            // Wait for all tasks to complete
            for (Future<Void> future : futures) {
                future.get();
            }

            // Close executor service
            executor.shutdown();
        } else {
            // Single-threaded extraction
            for (int pgNum = 0; pgNum < document.getPages().getCount(); pgNum++) {
                PDPage page = document.getPage(pgNum);
                extractImagesFromPage(
                        page, format, filename, pgNum + 1, processedImages, zos, allowDuplicates);
            }
        }

        // Close PDDocument and ZipOutputStream
        document.close();
        zos.close();

        // Create ByteArrayResource from byte array
        byte[] zipContents = baos.toByteArray();

        return WebResponseUtils.baosToWebResponse(
                baos, filename + ""_extracted-images.zip"", MediaType.APPLICATION_OCTET_STREAM);
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java,ExtractImagesController,shouldUseMultithreading,"boolean shouldUseMultithreading(MultipartFile,PDDocument)","[174, 179]","{'A274': [(174, 179)]}",{'A274': 1.0},A274,,"    private boolean shouldUseMultithreading(MultipartFile file, PDDocument document) {
        // Criteria: Use multithreading if file size > 10MB or number of pages > 20
        long fileSizeInMB = file.getSize() / (1024 * 1024);
        int numberOfPages = document.getPages().getCount();
        return fileSizeInMB > 10 || numberOfPages > 20;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java,ExtractImagesController,extractImagesFromPage,"void extractImagesFromPage(PDPage,String,String,int,Set<byte[]>,ZipOutputStream,boolean)","[181, 237]","{'A233': [(186, 188), (190, 193), (195, 196), (200, 200), (202, 236)], 'A238': [(194, 194)], 'A234': [(197, 199)], 'A274': [(181, 185), (189, 189), (201, 201), (237, 237)]}","{'A233': 0.7894736842105263, 'A238': 0.017543859649122806, 'A234': 0.05263157894736842, 'A274': 0.14035087719298245}",A233,,"    private void extractImagesFromPage(
            PDPage page,
            String format,
            String filename,
            int pageNum,
            Set<byte[]> processedImages,
            ZipOutputStream zos,
            boolean allowDuplicates)
            throws IOException {
        MessageDigest md;
        try {
            md = MessageDigest.getInstance(""MD5"");
        } catch (NoSuchAlgorithmException e) {
            log.error(""MD5 algorithm not available for extractImages hash."", e);
            return;
        }
        if (page.getResources() == null || page.getResources().getXObjectNames() == null) {
            return;
        }
        int count = 1;
        for (COSName name : page.getResources().getXObjectNames()) {
            try {
                if (page.getResources().isImageXObject(name)) {
                    PDImageXObject image = (PDImageXObject) page.getResources().getXObject(name);
                    if (!allowDuplicates) {
                        byte[] data = ImageProcessingUtils.getImageData(image.getImage());
                        byte[] imageHash = md.digest(data);
                        synchronized (processedImages) {
                            if (processedImages.stream()
                                    .anyMatch(hash -> Arrays.equals(hash, imageHash))) {
                                continue; // Skip already processed images
                            }
                            processedImages.add(imageHash);
                        }
                    }

                    RenderedImage renderedImage = image.getImage();

                    // Convert to standard RGB colorspace if needed
                    BufferedImage bufferedImage = convertToRGB(renderedImage, format);

                    // Write image to zip file
                    String imageName = filename + ""_page_"" + pageNum + ""_"" + count++ + ""."" + format;
                    synchronized (zos) {
                        zos.putNextEntry(new ZipEntry(imageName));
                        ByteArrayOutputStream imageBaos = new ByteArrayOutputStream();
                        ImageIO.write(bufferedImage, format, imageBaos);
                        zos.write(imageBaos.toByteArray());
                        zos.closeEntry();
                    }
                }
            } catch (IOException e) {
                ExceptionUtils.logException(""image extraction"", e);
                throw ExceptionUtils.handlePdfException(e, ""during image extraction"");
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java,ExtractImagesController,convertToRGB,"BufferedImage convertToRGB(RenderedImage,String)","[239, 258]","{'A233': [(253, 253), (258, 258)], 'A274': [(239, 252), (254, 257)]}","{'A233': 0.1, 'A274': 0.9}",A274,,"    private BufferedImage convertToRGB(RenderedImage renderedImage, String format) {
        int width = renderedImage.getWidth();
        int height = renderedImage.getHeight();
        BufferedImage rgbImage;

        if (""png"".equalsIgnoreCase(format)) {
            rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        } else if (""jpeg"".equalsIgnoreCase(format) || ""jpg"".equalsIgnoreCase(format)) {
            rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        } else if (""gif"".equalsIgnoreCase(format)) {
            rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_INDEXED);
        } else {
            rgbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        }

        Graphics2D g = rgbImage.createGraphics();
        g.drawImage((Image) renderedImage, 0, 0, null);
        g.dispose();
        return rgbImage;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/PageNumbersController.java,PageNumbersController,addPageNumbers,ResponseEntity<byte[]> addPageNumbers(AddPageNumbersRequest),"[40, 170]","{'A233': [(40, 43), (46, 47), (49, 51), (53, 54), (58, 69), (71, 98), (100, 166), (169, 170)], 'A234': [(44, 45), (52, 52), (55, 57), (70, 70), (99, 99)], 'A245': [(48, 48)], 'A246': [(167, 168)]}","{'A233': 0.916030534351145, 'A234': 0.061068702290076333, 'A245': 0.007633587786259542, 'A246': 0.015267175572519083}",A233,,"    @PostMapping(value = ""/add-page-numbers"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Add page numbers to a PDF document"",
            description =
                    ""This operation takes an input PDF file and adds page numbers to it. Input:PDF""
                            + "" Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> addPageNumbers(@ModelAttribute AddPageNumbersRequest request)
            throws IOException {

        MultipartFile file = request.getFileInput();
        String customMargin = request.getCustomMargin();
        int position = request.getPosition();
        int pageNumber = request.getStartingNumber();
        String pagesToNumber = request.getPagesToNumber();
        String customText = request.getCustomText();
        float fontSize = request.getFontSize();
        String fontType = request.getFontType();

        PDDocument document = pdfDocumentFactory.load(file);
        float marginFactor;
        switch (customMargin.toLowerCase()) {
            case ""small"":
                marginFactor = 0.02f;
                break;
            case ""large"":
                marginFactor = 0.05f;
                break;
            case ""x-large"":
                marginFactor = 0.075f;
                break;
            case ""medium"":
            default:
                marginFactor = 0.035f;
                break;
        }

        if (pagesToNumber == null || pagesToNumber.isEmpty()) {
            pagesToNumber = ""all"";
        }
        if (customText == null || customText.isEmpty()) {
            customText = ""{n}"";
        }
        List<Integer> pagesToNumberList =
                GeneralUtils.parsePageList(pagesToNumber.split("",""), document.getNumberOfPages());

        for (int i : pagesToNumberList) {
            PDPage page = document.getPage(i);
            PDRectangle pageSize = page.getMediaBox();

            String text =
                    customText
                            .replace(""{n}"", String.valueOf(pageNumber))
                            .replace(""{total}"", String.valueOf(document.getNumberOfPages()))
                            .replace(
                                    ""{filename}"",
                                    Filenames.toSimpleFileName(file.getOriginalFilename())
                                            .replaceFirst(""[.][^.]+$"", """"));

            PDType1Font currentFont =
                    switch (fontType.toLowerCase()) {
                        case ""courier"" -> new PDType1Font(Standard14Fonts.FontName.COURIER);
                        case ""times"" -> new PDType1Font(Standard14Fonts.FontName.TIMES_ROMAN);
                        default -> new PDType1Font(Standard14Fonts.FontName.HELVETICA);
                    };

            float x, y;

            if (position == 5) {
                // Calculate text width and font metrics
                float textWidth = currentFont.getStringWidth(text) / 1000 * fontSize;

                float ascent = currentFont.getFontDescriptor().getAscent() / 1000 * fontSize;
                float descent = currentFont.getFontDescriptor().getDescent() / 1000 * fontSize;

                float centerX = pageSize.getLowerLeftX() + (pageSize.getWidth() / 2);
                float centerY = pageSize.getLowerLeftY() + (pageSize.getHeight() / 2);

                x = centerX - (textWidth / 2);
                y = centerY - (ascent + descent) / 2;
            } else {
                int xGroup = (position - 1) % 3;
                int yGroup = 2 - (position - 1) / 3;

                x =
                        switch (xGroup) {
                            case 0 ->
                                    pageSize.getLowerLeftX()
                                            + marginFactor * pageSize.getWidth(); // left
                            case 1 ->
                                    pageSize.getLowerLeftX() + (pageSize.getWidth() / 2); // center
                            default ->
                                    pageSize.getUpperRightX()
                                            - marginFactor * pageSize.getWidth(); // right
                        };

                y =
                        switch (yGroup) {
                            case 0 ->
                                    pageSize.getLowerLeftY()
                                            + marginFactor * pageSize.getHeight(); // bottom
                            case 1 ->
                                    pageSize.getLowerLeftY() + (pageSize.getHeight() / 2); // middle
                            default ->
                                    pageSize.getUpperRightY()
                                            - marginFactor * pageSize.getHeight(); // top
                        };
            }

            PDPageContentStream contentStream =
                    new PDPageContentStream(
                            document, page, PDPageContentStream.AppendMode.APPEND, true, true);
            contentStream.beginText();
            contentStream.setFont(currentFont, fontSize);
            contentStream.newLineAtOffset(x, y);
            contentStream.showText(text);
            contentStream.endText();
            contentStream.close();

            pageNumber++;
        }

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        document.save(baos);
        document.close();

        return WebResponseUtils.bytesToWebResponse(
                baos.toByteArray(),
                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst(""[.][^.]+$"", """")
                        + ""_numbersAdded.pdf"",
                MediaType.APPLICATION_PDF);
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java,StampController,addStamp,ResponseEntity<byte[]> addStamp(AddStampRequest),"[56, 163]","{'A233': [(56, 59), (63, 65), (71, 73), (78, 87), (89, 163)], 'A267': [(66, 70), (74, 77)], 'A234': [(60, 62)], 'A246': [(88, 88)]}","{'A233': 0.8796296296296297, 'A267': 0.08333333333333333, 'A234': 0.027777777777777776, 'A246': 0.009259259259259259}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/add-stamp"")
    @Operation(
            summary = ""Add stamp to a PDF file"",
            description =
                    ""This endpoint adds a stamp to a given PDF file. Users can specify the stamp""
                            + "" type (text or image), rotation, opacity, width spacer, and height""
                            + "" spacer. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)
            throws IOException, Exception {
        MultipartFile pdfFile = request.getFileInput();
        String pdfFileName = pdfFile.getOriginalFilename();
        if (pdfFileName.contains("".."") || pdfFileName.startsWith(""/"")) {
            throw new IllegalArgumentException(""Invalid PDF file path"");
        }
        
        String stampType = request.getStampType();
        String stampText = request.getStampText();
        MultipartFile stampImage = request.getStampImage();
        String stampImageName = stampImage.getOriginalFilename();
        if (stampImageName.contains("".."") || stampImageName.startsWith(""/"")) {
            throw new IllegalArgumentException(""Invalid stamp image file path"");
        }
        String alphabet = request.getAlphabet();
        float fontSize = request.getFontSize();
        float rotation = request.getRotation();
        float opacity = request.getOpacity();
        int position = request.getPosition(); // Updated to use 1-9 positioning logic
        float overrideX = request.getOverrideX(); // New field for X override
        float overrideY = request.getOverrideY(); // New field for Y override

        String customColor = request.getCustomColor();
        float marginFactor;

        switch (request.getCustomMargin().toLowerCase()) {
            case ""small"":
                marginFactor = 0.02f;
                break;
            case ""medium"":
                marginFactor = 0.035f;
                break;
            case ""large"":
                marginFactor = 0.05f;
                break;
            case ""x-large"":
                marginFactor = 0.075f;
                break;
            default:
                marginFactor = 0.035f;
                break;
        }

        // Load the input PDF
        PDDocument document = pdfDocumentFactory.load(pdfFile);

        List<Integer> pageNumbers = request.getPageNumbersList(document, true);

        for (int pageIndex : pageNumbers) {
            int zeroBasedIndex = pageIndex - 1;
            if (zeroBasedIndex >= 0 && zeroBasedIndex < document.getNumberOfPages()) {
                PDPage page = document.getPage(zeroBasedIndex);
                PDRectangle pageSize = page.getMediaBox();
                float margin = marginFactor * (pageSize.getWidth() + pageSize.getHeight()) / 2;

                PDPageContentStream contentStream =
                        new PDPageContentStream(
                                document, page, PDPageContentStream.AppendMode.APPEND, true, true);

                PDExtendedGraphicsState graphicsState = new PDExtendedGraphicsState();
                graphicsState.setNonStrokingAlphaConstant(opacity);
                contentStream.setGraphicsStateParameters(graphicsState);

                if (""text"".equalsIgnoreCase(stampType)) {
                    addTextStamp(
                            contentStream,
                            stampText,
                            document,
                            page,
                            rotation,
                            position,
                            fontSize,
                            alphabet,
                            overrideX,
                            overrideY,
                            margin,
                            customColor);
                } else if (""image"".equalsIgnoreCase(stampType)) {
                    addImageStamp(
                            contentStream,
                            stampImage,
                            document,
                            page,
                            rotation,
                            position,
                            fontSize,
                            overrideX,
                            overrideY,
                            margin);
                }

                contentStream.close();
            }
        }
        return WebResponseUtils.pdfDocToWebResponse(
                document,
                Filenames.toSimpleFileName(pdfFile.getOriginalFilename())
                                .replaceFirst(""[.][^.]+$"", """")
                        + ""_stamped.pdf"");
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java,StampController,addTextStamp,"void addTextStamp(PDPageContentStream,String,PDDocument,PDPage,float,int,float,String,float,float,float,String)","[165, 263]","{'A233': [(165, 175), (177, 193), (197, 202), (204, 241), (245, 245), (253, 254), (262, 263)], 'A246': [(176, 176), (242, 244)], 'A248': [(194, 196)], 'A243': [(203, 203)], 'A268': [(246, 252), (255, 261)]}","{'A233': 0.7777777777777778, 'A246': 0.04040404040404041, 'A248': 0.030303030303030304, 'A243': 0.010101010101010102, 'A268': 0.1414141414141414}",A233,,"    private void addTextStamp(
            PDPageContentStream contentStream,
            String stampText,
            PDDocument document,
            PDPage page,
            float rotation,
            int position, // 1-9 positioning logic
            float fontSize,
            String alphabet,
            float overrideX, // X override
            float overrideY,
            float margin,
            String colorString) // Y override
            throws IOException {
        String resourceDir = """";
        PDFont font = new PDType1Font(Standard14Fonts.FontName.HELVETICA);
        switch (alphabet) {
            case ""arabic"":
                resourceDir = ""static/fonts/NotoSansArabic-Regular.ttf"";
                break;
            case ""japanese"":
                resourceDir = ""static/fonts/Meiryo.ttf"";
                break;
            case ""korean"":
                resourceDir = ""static/fonts/malgun.ttf"";
                break;
            case ""chinese"":
                resourceDir = ""static/fonts/SimSun.ttf"";
                break;
            case ""thai"":
                resourceDir = ""static/fonts/NotoSansThai-Regular.ttf"";
                break;
            case ""roman"":
            default:
                resourceDir = ""static/fonts/NotoSans-Regular.ttf"";
                break;
        }

        if (!"""".equals(resourceDir)) {
            ClassPathResource classPathResource = new ClassPathResource(resourceDir);
            String fileExtension = resourceDir.substring(resourceDir.lastIndexOf("".""));

            // Use TempFile with try-with-resources for automatic cleanup
            try (TempFile tempFileWrapper = new TempFile(tempFileManager, fileExtension)) {
                File tempFile = tempFileWrapper.getFile();
                try (InputStream is = classPathResource.getInputStream();
                        FileOutputStream os = new FileOutputStream(tempFile)) {
                    IOUtils.copy(is, os);
                    font = PDType0Font.load(document, tempFile);
                }
            }
        }

        contentStream.setFont(font, fontSize);

        Color redactColor;
        try {
            if (!colorString.startsWith(""#"")) {
                colorString = ""#"" + colorString;
            }
            redactColor = Color.decode(colorString);
        } catch (NumberFormatException e) {

            redactColor = Color.LIGHT_GRAY;
        }

        contentStream.setNonStrokingColor(redactColor);

        PDRectangle pageSize = page.getMediaBox();
        float x, y;

        if (overrideX >= 0 && overrideY >= 0) {
            // Use override values if provided
            x = overrideX;
            y = overrideY;
        } else {
            x = calculatePositionX(pageSize, position, fontSize, font, fontSize, stampText, margin);
            y =
                    calculatePositionY(
                            pageSize, position, calculateTextCapHeight(font, fontSize), margin);
        }
        // Split the stampText into multiple lines
        String[] lines = stampText.split(""\\\\n"");

        // Calculate dynamic line height based on font ascent and descent
        float ascent = font.getFontDescriptor().getAscent();
        float descent = font.getFontDescriptor().getDescent();
        float lineHeight = ((ascent - descent) / 1000) * fontSize;

        contentStream.beginText();
        for (int i = 0; i < lines.length; i++) {
            String line = lines[i];
            // Set the text matrix for each line with rotation
            contentStream.setTextMatrix(
                    Matrix.getRotateInstance(Math.toRadians(rotation), x, y - (i * lineHeight)));
            contentStream.showText(line);
        }
        contentStream.endText();
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java,StampController,addImageStamp,"void addImageStamp(PDPageContentStream,MultipartFile,PDDocument,PDPage,float,int,float,float,float,float)","[265, 310]","{'A233': [(265, 274), (276, 300), (303, 310)], 'A246': [(275, 275), (301, 302)]}","{'A233': 0.9347826086956522, 'A246': 0.06521739130434782}",A233,,"    private void addImageStamp(
            PDPageContentStream contentStream,
            MultipartFile stampImage,
            PDDocument document,
            PDPage page,
            float rotation,
            int position, // 1-9 positioning logic
            float fontSize,
            float overrideX,
            float overrideY,
            float margin)
            throws IOException {

        // Load the stamp image
        BufferedImage image = ImageIO.read(stampImage.getInputStream());

        // Compute width based on original aspect ratio
        float aspectRatio = (float) image.getWidth() / (float) image.getHeight();

        // Desired physical height (in PDF points)
        float desiredPhysicalHeight = fontSize;

        // Desired physical width based on the aspect ratio
        float desiredPhysicalWidth = desiredPhysicalHeight * aspectRatio;

        // Convert the BufferedImage to PDImageXObject
        PDImageXObject xobject = LosslessFactory.createFromImage(document, image);

        PDRectangle pageSize = page.getMediaBox();
        float x, y;

        if (overrideX >= 0 && overrideY >= 0) {
            // Use override values if provided
            x = overrideX;
            y = overrideY;
        } else {
            x = calculatePositionX(pageSize, position, desiredPhysicalWidth, null, 0, null, margin);
            y = calculatePositionY(pageSize, position, fontSize, margin);
        }

        contentStream.saveGraphicsState();
        contentStream.transform(Matrix.getTranslateInstance(x, y));
        contentStream.transform(Matrix.getRotateInstance(Math.toRadians(rotation), 0, 0));
        contentStream.drawImage(xobject, 0, 0, desiredPhysicalWidth, desiredPhysicalHeight);
        contentStream.restoreGraphicsState();
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java,StampController,calculatePositionX,"float calculatePositionX(PDRectangle,int,float,PDFont,float,String,float)","[312, 333]","{'A233': [(312, 318), (320, 324), (326, 328), (330, 333)], 'A246': [(319, 319), (325, 325), (329, 329)]}","{'A233': 0.8636363636363636, 'A246': 0.13636363636363635}",A233,,"    private float calculatePositionX(
            PDRectangle pageSize,
            int position,
            float contentWidth,
            PDFont font,
            float fontSize,
            String text,
            float margin)
            throws IOException {
        float actualWidth =
                (text != null) ? calculateTextWidth(text, font, fontSize) : contentWidth;
        switch (position % 3) {
            case 1: // Left
                return pageSize.getLowerLeftX() + margin;
            case 2: // Center
                return (pageSize.getWidth() - actualWidth) / 2;
            case 0: // Right
                return pageSize.getUpperRightX() - actualWidth - margin;
            default:
                return 0;
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java,StampController,calculatePositionY,"float calculatePositionY(PDRectangle,int,float,float)","[335, 347]","{'A233': [(335, 335), (337, 338), (340, 342), (344, 347)], 'A246': [(336, 336), (339, 339), (343, 343)]}","{'A233': 0.7692307692307693, 'A246': 0.23076923076923078}",A233,,"    private float calculatePositionY(
            PDRectangle pageSize, int position, float height, float margin) {
        switch ((position - 1) / 3) {
            case 0: // Top
                return pageSize.getUpperRightY() - height - margin;
            case 1: // Middle
                return (pageSize.getHeight() - height) / 2;
            case 2: // Bottom
                return pageSize.getLowerLeftY() + margin;
            default:
                return 0;
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java,StampController,calculateTextWidth,"float calculateTextWidth(String,PDFont,float)","[349, 351]","{'A246': [(349, 351)]}",{'A246': 1.0},A246,,"    private float calculateTextWidth(String text, PDFont font, float fontSize) throws IOException {
        return font.getStringWidth(text) / 1000 * fontSize;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java,StampController,calculateTextCapHeight,"float calculateTextCapHeight(PDFont,float)","[353, 355]","{'A246': [(353, 355)]}",{'A246': 1.0},A246,,"    private float calculateTextCapHeight(PDFont font, float fontSize) {
        return font.getFontDescriptor().getCapHeight() / 1000 * fontSize;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/DecompressPdfController.java,DecompressPdfController,decompressPdf,ResponseEntity<byte[]> decompressPdf(PDFFile),"[41, 63]","{'A233': [(41, 63)]}",{'A233': 1.0},A233,,"    @PostMapping(value = ""/decompress-pdf"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Decompress PDF streams"",
            description = ""Fully decompresses all PDF streams including text content"")
    public ResponseEntity<byte[]> decompressPdf(@ModelAttribute PDFFile request)
            throws IOException {

        MultipartFile file = request.getFileInput();

        try (PDDocument document = pdfDocumentFactory.load(file)) {
            // Process all objects in document
            processAllObjects(document);

            // Save with explicit no compression
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            document.save(baos, CompressParameters.NO_COMPRESSION);

            String outputFilename =
                    file.getOriginalFilename().replaceFirst(""\\.(?=[^.]+$)"", ""_decompressed."");
            return WebResponseUtils.bytesToWebResponse(
                    baos.toByteArray(), outputFilename, MediaType.APPLICATION_PDF);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/DecompressPdfController.java,DecompressPdfController,processAllObjects,void processAllObjects(PDDocument),"[65, 74]","{'A233': [(65, 74)]}",{'A233': 1.0},A233,,"    private void processAllObjects(PDDocument document) {
        Set<COSBase> processed = new HashSet<>();
        COSDocument cosDoc = document.getDocument();

        // Process all objects in the document
        for (COSObjectKey key : cosDoc.getXrefTable().keySet()) {
            COSObject obj = cosDoc.getObjectFromPool(key);
            processObject(obj, processed);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/DecompressPdfController.java,DecompressPdfController,processObject,"void processObject(COSBase,Set<COSBase>)","[76, 88]","{'A233': [(76, 88)]}",{'A233': 1.0},A233,,"    private void processObject(COSBase obj, Set<COSBase> processed) {
        // Skip null objects or already processed objects to avoid infinite recursion
        if (obj == null || processed.contains(obj)) return;
        processed.add(obj);

        if (obj instanceof COSObject cosObj) {
            processObject(cosObj.getObject(), processed);
        } else if (obj instanceof COSDictionary dict) {
            processDictionary(dict, processed);
        } else if (obj instanceof COSArray array) {
            processArray(array, processed);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/DecompressPdfController.java,DecompressPdfController,processDictionary,"void processDictionary(COSDictionary,Set<COSBase>)","[90, 100]","{'A233': [(90, 100)]}",{'A233': 1.0},A233,,"    private void processDictionary(COSDictionary dict, Set<COSBase> processed) {
        // Process all dictionary entries
        for (COSName key : dict.keySet()) {
            processObject(dict.getDictionaryObject(key), processed);
        }

        // If this is a stream, decompress it
        if (dict instanceof COSStream stream) {
            decompressStream(stream);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/DecompressPdfController.java,DecompressPdfController,processArray,"void processArray(COSArray,Set<COSBase>)","[102, 107]","{'A233': [(102, 107)]}",{'A233': 1.0},A233,,"    private void processArray(COSArray array, Set<COSBase> processed) {
        // Process all array elements
        for (int i = 0; i < array.size(); i++) {
            processObject(array.get(i), processed);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/DecompressPdfController.java,DecompressPdfController,decompressStream,void decompressStream(COSStream),"[109, 141]","{'A233': [(109, 141)]}",{'A233': 1.0},A233,,"    private void decompressStream(COSStream stream) {
        try {
            log.debug(""Processing stream: {}"", stream);

            // Only remove filter information if it exists
            if (stream.containsKey(COSName.FILTER)
                    || stream.containsKey(COSName.DECODE_PARMS)
                    || stream.containsKey(COSName.D)) {

                // Read the decompressed content first
                byte[] decompressedBytes;
                try (COSInputStream is = stream.createInputStream()) {
                    decompressedBytes = IOUtils.toByteArray(is);
                }

                // Now remove filter information
                stream.removeItem(COSName.FILTER);
                stream.removeItem(COSName.DECODE_PARMS);
                stream.removeItem(COSName.D);

                // Write the raw content back
                try (OutputStream out = stream.createRawOutputStream()) {
                    out.write(decompressedBytes);
                }

                // Set the Length to reflect the new stream size
                stream.setInt(COSName.LENGTH, decompressedBytes.length);
            }
        } catch (IOException e) {
            ExceptionUtils.logException(""stream decompression"", e);
            // Continue processing other streams even if this one fails
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java,ScannerEffectController,scannerEffect,ResponseEntity<byte[]> scannerEffect(ScannerEffectRequest),"[55, 324]","{'A248': [(56, 56), (58, 58), (61, 82), (84, 89), (130, 132), (134, 318), (320, 324)], 'A233': [(55, 55), (57, 57), (59, 60), (83, 83), (90, 129), (133, 133), (319, 319)]}","{'A248': 0.825925925925926, 'A233': 0.17407407407407408}",A248,,"    @PostMapping(value = ""/scanner-effect"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Apply scanner effect to PDF"",
            description =
                    ""Applies various effects to simulate a scanned document, including rotation, noise, and edge softening. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> scannerEffect(@Valid @ModelAttribute ScannerEffectRequest request)
            throws IOException {
        MultipartFile file = request.getFileInput();

        // Apply preset first if needed
        if (!request.isAdvancedEnabled()) {
            switch (request.getQuality()) {
                case high -> request.applyHighQualityPreset();
                case medium -> request.applyMediumQualityPreset();
                case low -> request.applyLowQualityPreset();
            }
        }

        // Extract values after preset application
        int baseRotation = request.getRotationValue() + request.getRotate();
        int rotateVariance = request.getRotateVariance();
        int borderPx = request.getBorder();
        float brightness = request.getBrightness();
        float contrast = request.getContrast();
        float blur = request.getBlur();
        float noise = request.getNoise();
        boolean yellowish = request.isYellowish();
        int resolution = request.getResolution();
        ScannerEffectRequest.Colorspace colorspace = request.getColorspace();

        try (PDDocument document = pdfDocumentFactory.load(file)) {
            PDDocument outputDocument = new PDDocument();
            PDFRenderer pdfRenderer = new PDFRenderer(document);

            for (int i = 0; i < document.getNumberOfPages(); i++) {
                // Get page dimensions to calculate safe resolution
                PDRectangle pageSize = document.getPage(i).getMediaBox();
                float pageWidthPts = pageSize.getWidth();
                float pageHeightPts = pageSize.getHeight();

                // Calculate what the image dimensions would be at the requested resolution
                int projectedWidth = (int) Math.ceil(pageWidthPts * resolution / 72.0);
                int projectedHeight = (int) Math.ceil(pageHeightPts * resolution / 72.0);
                long projectedPixels = (long) projectedWidth * projectedHeight;

                // Calculate safe resolution that stays within limits
                int safeResolution = resolution;
                if (projectedWidth > MAX_IMAGE_WIDTH
                        || projectedHeight > MAX_IMAGE_HEIGHT
                        || projectedPixels > MAX_IMAGE_PIXELS) {
                    double widthScale = (double) MAX_IMAGE_WIDTH / projectedWidth;
                    double heightScale = (double) MAX_IMAGE_HEIGHT / projectedHeight;
                    double pixelScale = Math.sqrt((double) MAX_IMAGE_PIXELS / projectedPixels);
                    double minScale = Math.min(Math.min(widthScale, heightScale), pixelScale);
                    safeResolution = (int) Math.max(72, resolution * minScale);

                    log.warn(
                            ""Page {} would be too large at {}dpi ({}x{} pixels). Reducing to {}dpi"",
                            i + 1,
                            resolution,
                            projectedWidth,
                            projectedHeight,
                            safeResolution);
                }

                // Render page to image with safe resolution
                BufferedImage image = pdfRenderer.renderImageWithDPI(i, safeResolution);

                log.debug(
                        ""Processing page {} with dimensions {}x{} ({} pixels) at {}dpi"",
                        i + 1,
                        image.getWidth(),
                        image.getHeight(),
                        (long) image.getWidth() * image.getHeight(),
                        safeResolution);

                // 1. Convert to grayscale or keep color
                BufferedImage processed;
                if (colorspace == ScannerEffectRequest.Colorspace.grayscale) {
                    processed =
                            new BufferedImage(
                                    image.getWidth(),
                                    image.getHeight(),
                                    BufferedImage.TYPE_INT_RGB);
                    Graphics2D gGray = processed.createGraphics();
                    gGray.setColor(Color.BLACK);
                    gGray.fillRect(0, 0, image.getWidth(), image.getHeight());
                    gGray.drawImage(image, 0, 0, null);
                    gGray.dispose();

                    // Convert to grayscale manually
                    for (int y = 0; y < processed.getHeight(); y++) {
                        for (int x = 0; x < processed.getWidth(); x++) {
                            int rgb = processed.getRGB(x, y);
                            int r = (rgb >> 16) & 0xFF;
                            int g = (rgb >> 8) & 0xFF;
                            int b = rgb & 0xFF;
                            int gray = (r + g + b) / 3;
                            int grayRGB = (gray << 16) | (gray << 8) | gray;
                            processed.setRGB(x, y, grayRGB);
                        }
                    }
                } else {
                    processed =
                            new BufferedImage(
                                    image.getWidth(),
                                    image.getHeight(),
                                    BufferedImage.TYPE_INT_RGB);
                    Graphics2D gCol = processed.createGraphics();
                    gCol.drawImage(image, 0, 0, null);
                    gCol.dispose();
                }

                // 2. Add border with randomized grey gradient
                int baseW = processed.getWidth() + 2 * borderPx;
                int baseH = processed.getHeight() + 2 * borderPx;
                boolean vertical = RANDOM.nextBoolean();
                float startGrey = 0.6f + 0.3f * RANDOM.nextFloat();
                float endGrey = 0.6f + 0.3f * RANDOM.nextFloat();
                Color startColor =
                        new Color(
                                Math.round(startGrey * 255),
                                Math.round(startGrey * 255),
                                Math.round(startGrey * 255));
                Color endColor =
                        new Color(
                                Math.round(endGrey * 255),
                                Math.round(endGrey * 255),
                                Math.round(endGrey * 255));
                BufferedImage composed = new BufferedImage(baseW, baseH, processed.getType());
                Graphics2D gBg = composed.createGraphics();
                for (int y = 0; y < baseH; y++) {
                    for (int x = 0; x < baseW; x++) {
                        float frac = vertical ? (float) y / (baseH - 1) : (float) x / (baseW - 1);
                        int r =
                                Math.round(
                                        startColor.getRed()
                                                + (endColor.getRed() - startColor.getRed()) * frac);
                        int g =
                                Math.round(
                                        startColor.getGreen()
                                                + (endColor.getGreen() - startColor.getGreen())
                                                        * frac);
                        int b =
                                Math.round(
                                        startColor.getBlue()
                                                + (endColor.getBlue() - startColor.getBlue())
                                                        * frac);
                        composed.setRGB(x, y, new Color(r, g, b).getRGB());
                    }
                }
                gBg.drawImage(processed, borderPx, borderPx, null);
                gBg.dispose();

                // 3. Rotate the entire composed image
                double pageRotation = baseRotation;
                if (baseRotation != 0 || rotateVariance != 0) {
                    pageRotation += (RANDOM.nextDouble() * 2 - 1) * rotateVariance;
                }

                BufferedImage rotated;
                int w = composed.getWidth();
                int h = composed.getHeight();
                int rotW = w;
                int rotH = h;

                // Skip rotation entirely if no rotation is needed
                if (pageRotation == 0) {
                    rotated = composed;
                } else {
                    double radians = Math.toRadians(pageRotation);
                    double sin = Math.abs(Math.sin(radians));
                    double cos = Math.abs(Math.cos(radians));
                    rotW = (int) Math.floor(w * cos + h * sin);
                    rotH = (int) Math.floor(h * cos + w * sin);
                    BufferedImage rotatedBg = new BufferedImage(rotW, rotH, composed.getType());
                    Graphics2D gBgRot = rotatedBg.createGraphics();
                    for (int y = 0; y < rotH; y++) {
                        for (int x = 0; x < rotW; x++) {
                            float frac = vertical ? (float) y / (rotH - 1) : (float) x / (rotW - 1);
                            int r =
                                    Math.round(
                                            startColor.getRed()
                                                    + (endColor.getRed() - startColor.getRed())
                                                            * frac);
                            int g =
                                    Math.round(
                                            startColor.getGreen()
                                                    + (endColor.getGreen() - startColor.getGreen())
                                                            * frac);
                            int b =
                                    Math.round(
                                            startColor.getBlue()
                                                    + (endColor.getBlue() - startColor.getBlue())
                                                            * frac);
                            rotatedBg.setRGB(x, y, new Color(r, g, b).getRGB());
                        }
                    }
                    gBgRot.dispose();
                    rotated = new BufferedImage(rotW, rotH, composed.getType());
                    Graphics2D g2d = rotated.createGraphics();
                    g2d.drawImage(rotatedBg, 0, 0, null);
                    AffineTransform at = new AffineTransform();
                    at.translate((rotW - w) / 2.0, (rotH - h) / 2.0);
                    at.rotate(radians, w / 2.0, h / 2.0);
                    g2d.setRenderingHint(
                            RenderingHints.KEY_INTERPOLATION,
                            RenderingHints.VALUE_INTERPOLATION_BICUBIC);
                    g2d.setRenderingHint(
                            RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
                    g2d.setRenderingHint(
                            RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                    g2d.drawImage(composed, at, null);
                    g2d.dispose();
                }

                // 4. Scale and center the rotated image to cover the original page size
                PDRectangle origPageSize = document.getPage(i).getMediaBox();
                float origW = origPageSize.getWidth();
                float origH = origPageSize.getHeight();
                float scale = Math.max(origW / rotW, origH / rotH);
                float drawW = rotW * scale;
                float drawH = rotH * scale;
                float offsetX = (origW - drawW) / 2f;
                float offsetY = (origH - drawH) / 2f;

                // 5. Apply adaptive blur and edge softening
                BufferedImage softened =
                        softenEdges(
                                rotated,
                                Math.max(10, Math.round(Math.min(rotW, rotH) * 0.02f)),
                                startColor,
                                endColor,
                                vertical);
                BufferedImage blurred = applyGaussianBlur(softened, blur);

                // 6. Adjust brightness and contrast
                BufferedImage adjusted = adjustBrightnessContrast(blurred, brightness, contrast);

                // 7. Add noise and yellowish effect to the content
                if (yellowish) {
                    applyYellowishEffect(adjusted);
                }
                addGaussianNoise(adjusted, noise);

                // 8. Write to PDF
                PDPage newPage = new PDPage(new PDRectangle(origW, origH));
                outputDocument.addPage(newPage);
                try (PDPageContentStream contentStream =
                        new PDPageContentStream(outputDocument, newPage)) {
                    PDImageXObject pdImage =
                            LosslessFactory.createFromImage(outputDocument, adjusted);
                    contentStream.drawImage(pdImage, offsetX, offsetY, drawW, drawH);
                }
            }

            // Save to byte array
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            outputDocument.save(outputStream);
            outputDocument.close();

            String outputFilename =
                    Filenames.toSimpleFileName(file.getOriginalFilename())
                                    .replaceFirst(""[.][^.]+$"", """")
                            + ""_scanner_effect.pdf"";

            return WebResponseUtils.bytesToWebResponse(
                    outputStream.toByteArray(), outputFilename, MediaType.APPLICATION_PDF);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java,ScannerEffectController,softenEdges,"BufferedImage softenEdges(BufferedImage,int,Color,Color,boolean)","[326, 361]","{'A248': [(326, 361)]}",{'A248': 1.0},A248,,"    private BufferedImage softenEdges(
            BufferedImage image,
            int featherRadius,
            Color startColor,
            Color endColor,
            boolean vertical) {
        int width = image.getWidth();
        int height = image.getHeight();
        BufferedImage output = new BufferedImage(width, height, image.getType());
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                int dx = Math.min(x, width - 1 - x);
                int dy = Math.min(y, height - 1 - y);
                int d = Math.min(dx, dy);
                float frac = vertical ? (float) y / (height - 1) : (float) x / (width - 1);
                int rBg =
                        Math.round(
                                startColor.getRed()
                                        + (endColor.getRed() - startColor.getRed()) * frac);
                int gBg =
                        Math.round(
                                startColor.getGreen()
                                        + (endColor.getGreen() - startColor.getGreen()) * frac);
                int bBg =
                        Math.round(
                                startColor.getBlue()
                                        + (endColor.getBlue() - startColor.getBlue()) * frac);
                int bgVal = new Color(rBg, gBg, bBg).getRGB();
                int fgVal = image.getRGB(x, y);
                float alpha = d < featherRadius ? (float) d / featherRadius : 1.0f;
                int blended = blendColors(fgVal, bgVal, alpha);
                output.setRGB(x, y, blended);
            }
        }
        return output;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java,ScannerEffectController,blendColors,"int blendColors(int,int,float)","[363, 368]","{'A248': [(363, 368)]}",{'A248': 1.0},A248,,"    private int blendColors(int fg, int bg, float alpha) {
        int r = Math.round(((fg >> 16) & 0xFF) * alpha + ((bg >> 16) & 0xFF) * (1 - alpha));
        int g = Math.round(((fg >> 8) & 0xFF) * alpha + ((bg >> 8) & 0xFF) * (1 - alpha));
        int b = Math.round((fg & 0xFF) * alpha + (bg & 0xFF) * (1 - alpha));
        return (r << 16) | (g << 8) | b;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java,ScannerEffectController,applyGaussianBlur,"BufferedImage applyGaussianBlur(BufferedImage,double)","[370, 416]","{'A248': [(370, 416)]}",{'A248': 1.0},A248,,"    private BufferedImage applyGaussianBlur(BufferedImage image, double sigma) {
        if (sigma <= 0) {
            return image;
        }

        // Scale sigma based on image size to maintain consistent blur effect
        double scaledSigma = sigma * Math.min(image.getWidth(), image.getHeight()) / 1000.0;

        int radius = Math.max(1, (int) Math.ceil(scaledSigma * 3));
        int size = 2 * radius + 1;
        float[] data = new float[size * size];
        double sum = 0.0;

        // Generate Gaussian kernel
        for (int i = -radius; i <= radius; i++) {
            for (int j = -radius; j <= radius; j++) {
                double xDistance = (double) i * i;
                double yDistance = (double) j * j;
                double g = Math.exp(-(xDistance + yDistance) / (2 * scaledSigma * scaledSigma));
                data[(i + radius) * size + j + radius] = (float) g;
                sum += g;
            }
        }

        // Normalize kernel
        for (int i = 0; i < data.length; i++) {
            data[i] /= (float) sum;
        }

        // Create and apply convolution
        java.awt.image.Kernel kernel = new java.awt.image.Kernel(size, size, data);
        java.awt.image.ConvolveOp op =
                new java.awt.image.ConvolveOp(kernel, java.awt.image.ConvolveOp.EDGE_NO_OP, null);

        // Apply blur with high-quality rendering hints
        BufferedImage result =
                new BufferedImage(image.getWidth(), image.getHeight(), image.getType());
        Graphics2D g2d = result.createGraphics();
        g2d.setRenderingHint(
                RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC);
        g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.drawImage(op.filter(image, null), 0, 0, null);
        g2d.dispose();

        return result;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java,ScannerEffectController,applyYellowishEffect,void applyYellowishEffect(BufferedImage),"[418, 435]","{'A248': [(418, 435)]}",{'A248': 1.0},A248,,"    private void applyYellowishEffect(BufferedImage image) {
        for (int x = 0; x < image.getWidth(); x++) {
            for (int y = 0; y < image.getHeight(); y++) {
                int rgb = image.getRGB(x, y);
                int r = (rgb >> 16) & 0xFF;
                int g = (rgb >> 8) & 0xFF;
                int b = rgb & 0xFF;

                // Stronger yellow tint while preserving brightness
                float brightness = (r + g + b) / 765.0f; // Normalize to 0-1
                r = Math.min(255, (int) (r + (255 - r) * 0.18f * brightness));
                g = Math.min(255, (int) (g + (255 - g) * 0.12f * brightness));
                b = Math.max(0, (int) (b * (1 - 0.25f * brightness)));

                image.setRGB(x, y, (r << 16) | (g << 8) | b);
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java,ScannerEffectController,addGaussianNoise,"void addGaussianNoise(BufferedImage,double)","[437, 463]","{'A248': [(437, 463)]}",{'A248': 1.0},A248,,"    private void addGaussianNoise(BufferedImage image, double strength) {
        if (strength <= 0) return;

        // Scale noise based on image size
        double scaledStrength = strength * Math.min(image.getWidth(), image.getHeight()) / 1000.0;

        for (int x = 0; x < image.getWidth(); x++) {
            for (int y = 0; y < image.getHeight(); y++) {
                int rgb = image.getRGB(x, y);
                int r = (rgb >> 16) & 0xFF;
                int g = (rgb >> 8) & 0xFF;
                int b = rgb & 0xFF;

                // Generate noise with better distribution
                double noiseR = RANDOM.nextGaussian() * scaledStrength;
                double noiseG = RANDOM.nextGaussian() * scaledStrength;
                double noiseB = RANDOM.nextGaussian() * scaledStrength;

                // Apply noise with better color preservation
                r = Math.min(255, Math.max(0, r + (int) noiseR));
                g = Math.min(255, Math.max(0, g + (int) noiseG));
                b = Math.min(255, Math.max(0, b + (int) noiseB));

                image.setRGB(x, y, (r << 16) | (g << 8) | b);
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java,ScannerEffectController,adjustBrightnessContrast,"BufferedImage adjustBrightnessContrast(BufferedImage,float,float)","[465, 482]","{'A248': [(465, 482)]}",{'A248': 1.0},A248,,"    private BufferedImage adjustBrightnessContrast(
            BufferedImage image, float brightness, float contrast) {
        BufferedImage output =
                new BufferedImage(image.getWidth(), image.getHeight(), image.getType());
        for (int y = 0; y < image.getHeight(); y++) {
            for (int x = 0; x < image.getWidth(); x++) {
                int rgb = image.getRGB(x, y);
                int r = (int) (((((rgb >> 16) & 0xFF) - 128) * contrast + 128) * brightness);
                int g = (int) (((((rgb >> 8) & 0xFF) - 128) * contrast + 128) * brightness);
                int b = (int) ((((rgb & 0xFF) - 128) * contrast + 128) * brightness);
                r = Math.min(255, Math.max(0, r));
                g = Math.min(255, Math.max(0, g));
                b = Math.min(255, Math.max(0, b));
                output.setRGB(x, y, (r << 16) | (g << 8) | b);
            }
        }
        return output;
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java,OCRController,isOcrMyPdfEnabled,boolean isOcrMyPdfEnabled(),"[57, 59]","{'A233': [(57, 59)]}",{'A233': 1.0},A233,,"    private boolean isOcrMyPdfEnabled() {
        return endpointConfiguration.isGroupEnabled(""OCRmyPDF"");
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java,OCRController,isTesseractEnabled,boolean isTesseractEnabled(),"[61, 63]","{'A233': [(61, 63)]}",{'A233': 1.0},A233,,"    private boolean isTesseractEnabled() {
        return endpointConfiguration.isGroupEnabled(""tesseract"");
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java,OCRController,getAvailableTesseractLanguages,List<String> getAvailableTesseractLanguages(),"[66, 77]","{'A233': [(66, 66), (68, 74), (76, 77)], 'A234': [(67, 67), (75, 75)]}","{'A233': 0.8333333333333334, 'A234': 0.16666666666666666}",A233,,"    public List<String> getAvailableTesseractLanguages() {
        String tessdataDir = applicationProperties.getSystem().getTessdataDir();
        File[] files = new File(tessdataDir).listFiles();
        if (files == null) {
            return Collections.emptyList();
        }
        return Arrays.stream(files)
                .filter(file -> file.getName().endsWith("".traineddata""))
                .map(file -> file.getName().replace("".traineddata"", """"))
                .filter(lang -> !""osd"".equalsIgnoreCase(lang))
                .toList();
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java,OCRController,processPdfWithOCR,ResponseEntity<byte[]> processPdfWithOCR(ProcessPdfWithOcrRequest),"[79, 216]","{'A233': [(79, 216)]}",{'A233': 1.0},A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/ocr-pdf"")
    @Operation(
            summary = ""Process a PDF file with OCR"",
            description =
                    ""This endpoint processes a PDF file using OCR (Optical Character Recognition). ""
                            + ""Users can specify languages, sidecar, deskew, clean, cleanFinal, ocrType, ocrRenderType, and removeImagesAfter options. ""
                            + ""Uses OCRmyPDF if available, falls back to Tesseract. Input:PDF Output:PDF Type:SI-Conditional"")
    public ResponseEntity<byte[]> processPdfWithOCR(
            @ModelAttribute ProcessPdfWithOcrRequest request)
            throws IOException, InterruptedException {
        MultipartFile inputFile = request.getFileInput();
        List<String> selectedLanguages = request.getLanguages();
        Boolean sidecar = request.isSidecar();
        Boolean deskew = request.isDeskew();
        Boolean clean = request.isClean();
        Boolean cleanFinal = request.isCleanFinal();
        String ocrType = request.getOcrType();
        String ocrRenderType = request.getOcrRenderType();
        Boolean removeImagesAfter = request.isRemoveImagesAfter();

        if (selectedLanguages == null || selectedLanguages.isEmpty()) {
            throw ExceptionUtils.createOcrLanguageRequiredException();
        }

        if (!""hocr"".equals(ocrRenderType) && !""sandwich"".equals(ocrRenderType)) {
            throw new IOException(""ocrRenderType wrong"");
        }

        // Get available Tesseract languages
        List<String> availableLanguages = getAvailableTesseractLanguages();

        // Validate selected languages
        selectedLanguages =
                selectedLanguages.stream().filter(availableLanguages::contains).toList();

        if (selectedLanguages.isEmpty()) {
            throw ExceptionUtils.createOcrInvalidLanguagesException();
        }

        // Use try-with-resources for proper temp file management
        try (TempFile tempInputFile = new TempFile(tempFileManager, "".pdf"");
                TempFile tempOutputFile = new TempFile(tempFileManager, "".pdf"")) {

            inputFile.transferTo(tempInputFile.getFile());

            TempFile sidecarTextFile = null;

            try {
                // Use OCRmyPDF if available (no fallback - error if it fails)
                if (isOcrMyPdfEnabled()) {
                    if (sidecar != null && sidecar) {
                        sidecarTextFile = new TempFile(tempFileManager, "".txt"");
                    }

                    processWithOcrMyPdf(
                            selectedLanguages,
                            sidecar,
                            deskew,
                            clean,
                            cleanFinal,
                            ocrType,
                            ocrRenderType,
                            removeImagesAfter,
                            tempInputFile.getPath(),
                            tempOutputFile.getPath(),
                            sidecarTextFile != null ? sidecarTextFile.getPath() : null);
                    log.info(""OCRmyPDF processing completed successfully"");
                }
                // Use Tesseract only if OCRmyPDF is not available
                else if (isTesseractEnabled()) {
                    processWithTesseract(
                            selectedLanguages,
                            ocrType,
                            tempInputFile.getPath(),
                            tempOutputFile.getPath());
                    log.info(""Tesseract processing completed successfully"");
                } else {
                    throw ExceptionUtils.createOcrToolsUnavailableException();
                }

                // Read the processed PDF file
                byte[] pdfBytes = Files.readAllBytes(tempOutputFile.getPath());

                // Return the OCR processed PDF as a response
                String outputFilename =
                        Filenames.toSimpleFileName(inputFile.getOriginalFilename())
                                        .replaceFirst(""[.][^.]+$"", """")
                                + ""_OCR.pdf"";

                if (sidecar != null && sidecar && sidecarTextFile != null) {
                    // Create a zip file containing both the PDF and the text file
                    String outputZipFilename =
                            Filenames.toSimpleFileName(inputFile.getOriginalFilename())
                                            .replaceFirst(""[.][^.]+$"", """")
                                    + ""_OCR.zip"";

                    try (TempFile tempZipFile = new TempFile(tempFileManager, "".zip"");
                            ZipOutputStream zipOut =
                                    new ZipOutputStream(
                                            Files.newOutputStream(tempZipFile.getPath()))) {

                        // Add PDF file to the zip
                        ZipEntry pdfEntry = new ZipEntry(outputFilename);
                        zipOut.putNextEntry(pdfEntry);
                        zipOut.write(pdfBytes);
                        zipOut.closeEntry();

                        // Add text file to the zip
                        ZipEntry txtEntry = new ZipEntry(outputFilename.replace("".pdf"", "".txt""));
                        zipOut.putNextEntry(txtEntry);
                        Files.copy(sidecarTextFile.getPath(), zipOut);
                        zipOut.closeEntry();

                        zipOut.finish();

                        byte[] zipBytes = Files.readAllBytes(tempZipFile.getPath());

                        // Return the zip file containing both the PDF and the text file
                        return WebResponseUtils.bytesToWebResponse(
                                zipBytes, outputZipFilename, MediaType.APPLICATION_OCTET_STREAM);
                    }
                } else {
                    // Return the OCR processed PDF as a response
                    return WebResponseUtils.bytesToWebResponse(pdfBytes, outputFilename);
                }

            } finally {
                // Clean up sidecar temp file if created
                if (sidecarTextFile != null) {
                    try {
                        sidecarTextFile.close();
                    } catch (Exception e) {
                        log.warn(""Failed to close sidecar temp file"", e);
                    }
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java,OCRController,processWithOcrMyPdf,"void processWithOcrMyPdf(List<String>,Boolean,Boolean,Boolean,Boolean,String,String,Boolean,Path,Path,Path)","[218, 316]","{'A233': [(218, 316)]}",{'A233': 1.0},A233,,"    private void processWithOcrMyPdf(
            List<String> selectedLanguages,
            Boolean sidecar,
            Boolean deskew,
            Boolean clean,
            Boolean cleanFinal,
            String ocrType,
            String ocrRenderType,
            Boolean removeImagesAfter,
            Path tempInputFile,
            Path tempOutputFile,
            Path sidecarTextPath)
            throws IOException, InterruptedException {

        // Build OCRmyPDF command
        String languageOption = String.join(""+"", selectedLanguages);

        List<String> command =
                new ArrayList<>(
                        Arrays.asList(
                                ""ocrmypdf"",
                                ""--verbose"",
                                ""2"",
                                ""--output-type"",
                                ""pdf"",
                                ""--pdf-renderer"",
                                ocrRenderType));

        if (sidecar != null && sidecar && sidecarTextPath != null) {
            command.add(""--sidecar"");
            command.add(sidecarTextPath.toString());
        }

        if (deskew != null && deskew) {
            command.add(""--deskew"");
        }
        if (clean != null && clean) {
            command.add(""--clean"");
        }
        if (cleanFinal != null && cleanFinal) {
            command.add(""--clean-final"");
        }
        if (ocrType != null && !"""".equals(ocrType)) {
            if (""skip-text"".equals(ocrType)) {
                command.add(""--skip-text"");
            } else if (""force-ocr"".equals(ocrType)) {
                command.add(""--force-ocr"");
            }
        }

        command.addAll(
                Arrays.asList(
                        ""--language"",
                        languageOption,
                        tempInputFile.toString(),
                        tempOutputFile.toString()));

        // Run CLI command
        ProcessExecutorResult result =
                ProcessExecutor.getInstance(ProcessExecutor.Processes.OCR_MY_PDF)
                        .runCommandWithOutputHandling(command);

        if (result.getRc() != 0
                && result.getMessages().contains(""multiprocessing/synchronize.py"")
                && result.getMessages().contains(""OSError: [Errno 38] Function not implemented"")) {
            command.add(""--jobs"");
            command.add(""1"");
            result =
                    ProcessExecutor.getInstance(ProcessExecutor.Processes.OCR_MY_PDF)
                            .runCommandWithOutputHandling(command);
        }

        if (result.getRc() != 0) {
            throw new IOException(""OCRmyPDF failed with return code: "" + result.getRc());
        }

        // Remove images from the OCR processed PDF if the flag is set to true
        if (removeImagesAfter != null && removeImagesAfter) {
            try (TempFile tempPdfWithoutImages = new TempFile(tempFileManager, ""_no_images.pdf"")) {
                List<String> gsCommand =
                        Arrays.asList(
                                ""gs"",
                                ""-sDEVICE=pdfwrite"",
                                ""-dFILTERIMAGE"",
                                ""-o"",
                                tempPdfWithoutImages.getPath().toString(),
                                tempOutputFile.toString());

                ProcessExecutor.getInstance(ProcessExecutor.Processes.GHOSTSCRIPT)
                        .runCommandWithOutputHandling(gsCommand);

                // Replace output file with version without images
                Files.copy(
                        tempPdfWithoutImages.getPath(),
                        tempOutputFile,
                        java.nio.file.StandardCopyOption.REPLACE_EXISTING);
            }
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java,OCRController,processWithTesseract,"void processWithTesseract(List<String>,String,Path,Path)","[318, 413]","{'A233': [(318, 413)]}",{'A233': 1.0},A233,,"    private void processWithTesseract(
            List<String> selectedLanguages, String ocrType, Path tempInputFile, Path tempOutputFile)
            throws IOException, InterruptedException {

        // Create temp directory for Tesseract processing
        try (TempDirectory tempDir = new TempDirectory(tempFileManager)) {
            File tempOutputDir = new File(tempDir.getPath().toFile(), ""output"");
            File tempImagesDir = new File(tempDir.getPath().toFile(), ""images"");
            File finalOutputFile = new File(tempDir.getPath().toFile(), ""final_output.pdf"");

            // Create directories
            tempOutputDir.mkdirs();
            tempImagesDir.mkdirs();

            PDFMergerUtility merger = new PDFMergerUtility();
            merger.setDestinationFileName(finalOutputFile.toString());

            try (PDDocument document = pdfDocumentFactory.load(tempInputFile.toFile())) {
                PDFRenderer pdfRenderer = new PDFRenderer(document);
                int pageCount = document.getNumberOfPages();

                for (int pageNum = 0; pageNum < pageCount; pageNum++) {
                    PDPage page = document.getPage(pageNum);
                    boolean hasText = false;

                    // Check for existing text
                    try (PDDocument tempDoc = new PDDocument()) {
                        tempDoc.addPage(page);
                        PDFTextStripper stripper = new PDFTextStripper();
                        hasText = !stripper.getText(tempDoc).trim().isEmpty();
                    }

                    boolean shouldOcr =
                            switch (ocrType) {
                                case ""skip-text"" -> !hasText;
                                case ""force-ocr"" -> true;
                                default -> true;
                            };

                    File pageOutputPath =
                            new File(tempOutputDir, String.format(""page_%d.pdf"", pageNum));

                    if (shouldOcr) {
                        // Convert page to image
                        BufferedImage image = pdfRenderer.renderImageWithDPI(pageNum, 300);
                        File imagePath =
                                new File(tempImagesDir, String.format(""page_%d.png"", pageNum));
                        ImageIO.write(image, ""png"", imagePath);

                        // Build OCR command
                        List<String> command = new ArrayList<>();
                        command.add(""tesseract"");
                        command.add(imagePath.toString());
                        command.add(
                                new File(tempOutputDir, String.format(""page_%d"", pageNum))
                                        .toString());
                        command.add(""-l"");
                        command.add(String.join(""+"", selectedLanguages));
                        command.add(""pdf""); // Always output PDF

                        ProcessExecutorResult result =
                                ProcessExecutor.getInstance(ProcessExecutor.Processes.TESSERACT)
                                        .runCommandWithOutputHandling(command);

                        if (result.getRc() != 0) {
                            throw ExceptionUtils.createRuntimeException(
                                    ""error.commandFailed"",
                                    ""{0} command failed with exit code: {1}"",
                                    null,
                                    ""Tesseract"",
                                    result.getRc());
                        }

                        // Add OCR'd PDF to merger
                        merger.addSource(pageOutputPath);
                    } else {
                        // Save original page without OCR
                        try (PDDocument pageDoc = new PDDocument()) {
                            pageDoc.addPage(page);
                            pageDoc.save(pageOutputPath);
                            merger.addSource(pageOutputPath);
                        }
                    }
                }
            }

            // Merge all pages into final PDF
            merger.mergeDocuments(null);

            // Copy final output to the expected location
            Files.copy(
                    finalOutputFile.toPath(),
                    tempOutputFile,
                    java.nio.file.StandardCopyOption.REPLACE_EXISTING);
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/FlattenController.java,FlattenController,flatten,ResponseEntity<byte[]> flatten(FlattenRequest),"[41, 88]","{'A233': [(41, 44), (47, 81), (83, 88)], 'A238': [(82, 82)], 'A234': [(45, 46)]}","{'A233': 0.9375, 'A238': 0.020833333333333332, 'A234': 0.041666666666666664}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/flatten"")
    @Operation(
            summary = ""Flatten PDF form fields or full page"",
            description =
                    ""Flattening just PDF form fields or converting each page to images to make text""
                            + "" unselectable. Input:PDF, Output:PDF. Type:SISO"")
    public ResponseEntity<byte[]> flatten(@ModelAttribute FlattenRequest request) throws Exception {
        MultipartFile file = request.getFileInput();

        PDDocument document = pdfDocumentFactory.load(file);
        Boolean flattenOnlyForms = request.getFlattenOnlyForms();

        if (Boolean.TRUE.equals(flattenOnlyForms)) {
            PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm();
            if (acroForm != null) {
                acroForm.flatten();
            }
            return WebResponseUtils.pdfDocToWebResponse(
                    document, Filenames.toSimpleFileName(file.getOriginalFilename()));
        } else {
            // flatten whole page aka convert each page to image and readd it (making text
            // unselectable)
            PDFRenderer pdfRenderer = new PDFRenderer(document);
            PDDocument newDocument =
                    pdfDocumentFactory.createNewDocumentBasedOnOldDocument(document);
            int numPages = document.getNumberOfPages();
            for (int i = 0; i < numPages; i++) {
                try {
                    BufferedImage image = pdfRenderer.renderImageWithDPI(i, 300, ImageType.RGB);
                    PDPage page = new PDPage();
                    page.setMediaBox(document.getPage(i).getMediaBox());
                    newDocument.addPage(page);
                    try (PDPageContentStream contentStream =
                            new PDPageContentStream(newDocument, page)) {
                        PDImageXObject pdImage = JPEGFactory.createFromImage(newDocument, image);
                        float pageWidth = page.getMediaBox().getWidth();
                        float pageHeight = page.getMediaBox().getHeight();

                        contentStream.drawImage(pdImage, 0, 0, pageWidth, pageHeight);
                    }
                } catch (IOException e) {
                    log.error(""exception"", e);
                }
            }
            return WebResponseUtils.pdfDocToWebResponse(
                    newDocument, Filenames.toSimpleFileName(file.getOriginalFilename()));
        }
    }
"
stirling.software.SPDF.controller.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/AttachmentController.java,AttachmentController,addAttachments,ResponseEntity<byte[]> addAttachments(AddAttachmentRequest),"[37, 56]","{'A236': [(37, 56)]}",{'A236': 1.0},A236,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/misc/AttachmentControllerTest.java,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/add-attachments"")
    @Operation(
            summary = ""Add attachments to PDF"",
            description =
                    ""This endpoint adds attachments to a PDF. Input:PDF, Output:PDF Type:MISO"")
    public ResponseEntity<byte[]> addAttachments(@ModelAttribute AddAttachmentRequest request)
            throws IOException {
        MultipartFile fileInput = request.getFileInput();
        List<MultipartFile> attachments = request.getAttachments();

        PDDocument document =
                pdfAttachmentService.addAttachment(
                        pdfDocumentFactory.load(fileInput, false), attachments);

        return WebResponseUtils.pdfDocToWebResponse(
                document,
                Filenames.toSimpleFileName(fileInput.getOriginalFilename())
                                .replaceFirst(""[.][^.]+$"", """")
                        + ""_with_attachments.pdf"");
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java,AdditionalLanguageJsController,generateAdditionalLanguageJs,void generateAdditionalLanguageJs(HttpServletResponse),"[28, 55]","{'A234': [(28, 34), (39, 41), (52, 52), (54, 55)], 'A233': [(35, 38), (42, 51), (53, 53)]}","{'A234': 0.4642857142857143, 'A233': 0.5357142857142857}",A233,,"    @Hidden
    @GetMapping(value = ""/additionalLanguageCode.js"", produces = ""application/javascript"")
    public void generateAdditionalLanguageJs(HttpServletResponse response) throws IOException {
        Set<String> supportedLanguages = languageService.getSupportedLanguages();
        response.setContentType(""application/javascript"");
        PrintWriter writer = response.getWriter();
        // Erstelle das JavaScript dynamisch
        writer.println(
                ""const supportedLanguages = ""
                        + toJsonArray(new ArrayList<>(supportedLanguages))
                        + "";"");
        // Generiere die `getDetailedLanguageCode`-Funktion
        writer.println(
                """"""
                        function getDetailedLanguageCode() {
                            const userLanguages = navigator.languages ? navigator.languages : [navigator.language];
                            for (let lang of userLanguages) {
                                let matchedLang = supportedLanguages.find(supportedLang => supportedLang.startsWith(lang.replace('-', '_')));
                                if (matchedLang) {
                                    return matchedLang;
                                }
                            }
                            // Fallback
                            return ""en_GB"";
                        }
                        """""");
        writer.flush();
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java,AdditionalLanguageJsController,toJsonArray,String toJsonArray(List<String>),"[58, 68]","{'A234': [(58, 68)]}",{'A234': 1.0},A234,,"    private String toJsonArray(List<String> list) {
        StringBuilder jsonArray = new StringBuilder(""["");
        for (int i = 0; i < list.size(); i++) {
            jsonArray.append(""\"""").append(list.get(i)).append(""\"""");
            if (i < list.size() - 1) {
                jsonArray.append("","");
            }
        }
        jsonArray.append(""]"");
        return jsonArray.toString();
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java,SplitPdfBySectionsController,splitPdf,ResponseEntity<byte[]> splitPdf(SplitPdfBySectionsRequest),"[46, 110]","{'A233': [(46, 49), (53, 62), (64, 64), (70, 70), (73, 73), (75, 100), (103, 110)], 'A234': [(50, 52), (63, 63)], 'A275': [(65, 69), (71, 72), (74, 74)], 'A257': [(101, 102)]}","{'A233': 0.7846153846153846, 'A234': 0.06153846153846154, 'A275': 0.12307692307692308, 'A257': 0.03076923076923077}",A233,,"    @PostMapping(value = ""/split-pdf-by-sections"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Split PDF pages into smaller sections"",
            description =
                    ""Split each page of a PDF into smaller sections based on the user's choice""
                            + "" (halves, thirds, quarters, etc.), both vertically and horizontally.""
                            + "" Input:PDF Output:ZIP-PDF Type:SISO"")
    public ResponseEntity<byte[]> splitPdf(@ModelAttribute SplitPdfBySectionsRequest request)
            throws Exception {
        List<ByteArrayOutputStream> splitDocumentsBoas = new ArrayList<>();

        MultipartFile file = request.getFileInput();
        PDDocument sourceDocument = pdfDocumentFactory.load(file);

        // Process the PDF based on split parameters
        int horiz = request.getHorizontalDivisions() + 1;
        int verti = request.getVerticalDivisions() + 1;
        boolean merge = Boolean.TRUE.equals(request.getMerge());
        List<PDDocument> splitDocuments = splitPdfPages(sourceDocument, verti, horiz);

        String filename =
                Filenames.toSimpleFileName(file.getOriginalFilename())
                        .replaceFirst(""[.][^.]+$"", """");
        if (merge) {
            MergeController mergeController = new MergeController(pdfDocumentFactory);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            mergeController.mergeDocuments(splitDocuments).save(baos);
            return WebResponseUtils.bytesToWebResponse(baos.toByteArray(), filename + ""_split.pdf"");
        }
        for (PDDocument doc : splitDocuments) {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            doc.save(baos);
            doc.close();
            splitDocumentsBoas.add(baos);
        }

        sourceDocument.close();

        Path zipFile = Files.createTempFile(""split_documents"", "".zip"");
        byte[] data;

        try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(zipFile))) {
            int pageNum = 1;
            for (int i = 0; i < splitDocumentsBoas.size(); i++) {
                ByteArrayOutputStream baos = splitDocumentsBoas.get(i);
                int sectionNum = (i % (horiz * verti)) + 1;
                String fileName = filename + ""_"" + pageNum + ""_"" + sectionNum + "".pdf"";
                byte[] pdf = baos.toByteArray();
                ZipEntry pdfEntry = new ZipEntry(fileName);
                zipOut.putNextEntry(pdfEntry);
                zipOut.write(pdf);
                zipOut.closeEntry();

                if (sectionNum == horiz * verti) pageNum++;
            }

            zipOut.finish();
            data = Files.readAllBytes(zipFile);
            return WebResponseUtils.bytesToWebResponse(
                    data, filename + ""_split.zip"", MediaType.APPLICATION_OCTET_STREAM);

        } finally {
            Files.deleteIfExists(zipFile);
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java,SplitPdfBySectionsController,splitPdfPages,"List<PDDocument> splitPdfPages(PDDocument,int,int)","[112, 161]","{'A233': [(112, 140), (143, 161)], 'A246': [(141, 142)]}","{'A233': 0.96, 'A246': 0.04}",A233,,"    public List<PDDocument> splitPdfPages(
            PDDocument document, int horizontalDivisions, int verticalDivisions)
            throws IOException {
        List<PDDocument> splitDocuments = new ArrayList<>();

        for (PDPage originalPage : document.getPages()) {
            PDRectangle originalMediaBox = originalPage.getMediaBox();
            float width = originalMediaBox.getWidth();
            float height = originalMediaBox.getHeight();
            float subPageWidth = width / horizontalDivisions;
            float subPageHeight = height / verticalDivisions;

            LayerUtility layerUtility = new LayerUtility(document);

            for (int i = 0; i < horizontalDivisions; i++) {
                for (int j = 0; j < verticalDivisions; j++) {
                    PDDocument subDoc = new PDDocument();
                    PDPage subPage = new PDPage(new PDRectangle(subPageWidth, subPageHeight));
                    subDoc.addPage(subPage);

                    PDFormXObject form =
                            layerUtility.importPageAsForm(
                                    document, document.getPages().indexOf(originalPage));

                    try (PDPageContentStream contentStream =
                            new PDPageContentStream(
                                    subDoc, subPage, AppendMode.APPEND, true, true)) {
                        // Set clipping area and position
                        float translateX = -subPageWidth * i;

                        // float translateY = height - subPageHeight * (verticalDivisions - j);
                        float translateY = -subPageHeight * (verticalDivisions - 1 - j);

                        contentStream.saveGraphicsState();
                        contentStream.addRect(0, 0, subPageWidth, subPageHeight);
                        contentStream.clip();
                        contentStream.transform(new Matrix(1, 0, 0, 1, translateX, translateY));

                        // Draw the form
                        contentStream.drawForm(form);
                        contentStream.restoreGraphicsState();
                    }

                    splitDocuments.add(subDoc);
                }
            }
        }

        return splitDocuments;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java,SplitPdfByChaptersController,extractOutlineItems,"List<Bookmark> extractOutlineItems(PDDocument,PDOutlineItem,List<Bookmark>,PDOutlineItem,int,int)","[52, 118]","{'A233': [(52, 118)]}",{'A233': 1.0},A233,,"    private static List<Bookmark> extractOutlineItems(
            PDDocument sourceDocument,
            PDOutlineItem current,
            List<Bookmark> bookmarks,
            PDOutlineItem nextParent,
            int level,
            int maxLevel)
            throws Exception {

        while (current != null) {

            String currentTitle = current.getTitle().replace(""/"", """");
            int firstPage =
                    sourceDocument.getPages().indexOf(current.findDestinationPage(sourceDocument));
            PDOutlineItem child = current.getFirstChild();
            PDOutlineItem nextSibling = current.getNextSibling();
            int endPage;
            if (child != null && level < maxLevel) {
                endPage =
                        sourceDocument
                                .getPages()
                                .indexOf(child.findDestinationPage(sourceDocument));
            } else if (nextSibling != null) {
                endPage =
                        sourceDocument
                                .getPages()
                                .indexOf(nextSibling.findDestinationPage(sourceDocument));
            } else if (nextParent != null) {

                endPage =
                        sourceDocument
                                .getPages()
                                .indexOf(nextParent.findDestinationPage(sourceDocument));
            } else {
                endPage = -2;
                /*
                happens when we have something like this:
                Outline Item 2
                    Outline Item 2.1
                        Outline Item 2.1.1
                    Outline Item 2.2
                        Outline 2.2.1
                        Outline 2.2.2 <--- this item neither has an immediate next parent nor an immediate next sibling
                Outline Item 3
                 */
            }
            if (!bookmarks.isEmpty()
                    && bookmarks.get(bookmarks.size() - 1).getEndPage() == -2
                    && firstPage
                            >= bookmarks
                                    .get(bookmarks.size() - 1)
                                    .getStartPage()) { // for handling the above-mentioned case
                Bookmark previousBookmark = bookmarks.get(bookmarks.size() - 1);
                previousBookmark.setEndPage(firstPage);
            }
            bookmarks.add(new Bookmark(currentTitle, firstPage, endPage));

            // Recursively process children
            if (child != null && level < maxLevel) {
                extractOutlineItems(
                        sourceDocument, child, bookmarks, nextSibling, level + 1, maxLevel);
            }

            current = nextSibling;
        }
        return bookmarks;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java,SplitPdfByChaptersController,splitPdf,ResponseEntity<byte[]> splitPdf(SplitPdfByChaptersRequest),"[120, 209]","{'A276': [(120, 126), (129, 130), (208, 209)], 'A233': [(127, 128), (132, 142), (144, 166), (168, 176), (178, 205), (207, 207)], 'A238': [(143, 143), (177, 177), (206, 206)], 'A234': [(131, 131), (167, 167)]}","{'A276': 0.12222222222222222, 'A233': 0.8222222222222222, 'A238': 0.03333333333333333, 'A234': 0.022222222222222223}",A233,,"    @PostMapping(value = ""/split-pdf-by-chapters"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Split PDFs by Chapters"",
            description = ""Splits a PDF into chapters and returns a ZIP file."")
    public ResponseEntity<byte[]> splitPdf(@ModelAttribute SplitPdfByChaptersRequest request)
            throws Exception {
        MultipartFile file = request.getFileInput();
        PDDocument sourceDocument = null;
        Path zipFile = null;

        try {
            boolean includeMetadata = Boolean.TRUE.equals(request.getIncludeMetadata());
            Integer bookmarkLevel =
                    request.getBookmarkLevel(); // levels start from 0 (top most bookmarks)
            if (bookmarkLevel < 0) {
                throw ExceptionUtils.createIllegalArgumentException(
                        ""error.invalidArgument"", ""Invalid argument: {0}"", ""bookmark level"");
            }
            sourceDocument = pdfDocumentFactory.load(file);

            PDDocumentOutline outline = sourceDocument.getDocumentCatalog().getDocumentOutline();

            if (outline == null) {
                log.warn(""No outline found for {}"", file.getOriginalFilename());
                throw ExceptionUtils.createIllegalArgumentException(
                        ""error.pdfBookmarksNotFound"", ""No PDF bookmarks/outline found in document"");
            }
            List<Bookmark> bookmarks = new ArrayList<>();
            try {
                bookmarks =
                        extractOutlineItems(
                                sourceDocument,
                                outline.getFirstChild(),
                                bookmarks,
                                outline.getFirstChild().getNextSibling(),
                                0,
                                bookmarkLevel);
                // to handle last page edge case
                bookmarks.get(bookmarks.size() - 1).setEndPage(sourceDocument.getNumberOfPages());
                Bookmark lastBookmark = bookmarks.get(bookmarks.size() - 1);

            } catch (Exception e) {
                ExceptionUtils.logException(""outline extraction"", e);
                return ResponseEntity.internalServerError()
                        .body(""Unable to extract outline items"".getBytes());
            }

            boolean allowDuplicates = Boolean.TRUE.equals(request.getAllowDuplicates());
            if (!allowDuplicates) {
                /*
                duplicates are generated when multiple bookmarks correspond to the same page,
                if the user doesn't want duplicates mergeBookmarksThatCorrespondToSamePage() method will merge the titles of all
                the bookmarks that correspond to the same page, and treat them as a single bookmark
                */
                bookmarks = mergeBookmarksThatCorrespondToSamePage(bookmarks);
            }
            for (Bookmark bookmark : bookmarks) {
                log.info(
                        ""{}::::{} to {}"",
                        bookmark.getTitle(),
                        bookmark.getStartPage(),
                        bookmark.getEndPage());
            }
            List<ByteArrayOutputStream> splitDocumentsBoas =
                    getSplitDocumentsBoas(sourceDocument, bookmarks, includeMetadata);

            zipFile = createZipFile(bookmarks, splitDocumentsBoas);

            byte[] data = Files.readAllBytes(zipFile);
            Files.deleteIfExists(zipFile);

            String filename =
                    Filenames.toSimpleFileName(file.getOriginalFilename())
                            .replaceFirst(""[.][^.]+$"", """");
            sourceDocument.close();
            return WebResponseUtils.bytesToWebResponse(
                    data, filename + "".zip"", MediaType.APPLICATION_OCTET_STREAM);
        } finally {
            try {
                if (sourceDocument != null) {
                    sourceDocument.close();
                }
                if (zipFile != null) {
                    Files.deleteIfExists(zipFile);
                }
            } catch (Exception e) {
                log.error(""Error while cleaning up resources"", e);
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java,SplitPdfByChaptersController,mergeBookmarksThatCorrespondToSamePage,List<Bookmark> mergeBookmarksThatCorrespondToSamePage(List<Bookmark>),"[211, 234]","{'A276': [(211, 234)]}",{'A276': 1.0},A276,,"    private List<Bookmark> mergeBookmarksThatCorrespondToSamePage(List<Bookmark> bookmarks) {
        String mergedTitle = """";
        List<Bookmark> chaptersToBeRemoved = new ArrayList<>();
        for (Bookmark bookmark : bookmarks) {
            if (bookmark.getStartPage() == bookmark.getEndPage()) {
                mergedTitle = mergedTitle.concat(bookmark.getTitle().concat("" ""));
                chaptersToBeRemoved.add(bookmark);
            } else {
                if (!mergedTitle.isEmpty()) {
                    if (mergedTitle.length() > 255) {
                        mergedTitle = mergedTitle.substring(0, 253) + ""..."";
                    }

                    bookmarks.set(
                            bookmarks.indexOf(bookmark),
                            new Bookmark(
                                    mergedTitle, bookmark.getStartPage(), bookmark.getEndPage()));
                }
                mergedTitle = """";
            }
        }
        bookmarks.removeAll(chaptersToBeRemoved);
        return bookmarks;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java,SplitPdfByChaptersController,createZipFile,"Path createZipFile(List<Bookmark>,List<ByteArrayOutputStream>)","[236, 267]","{'A276': [(236, 257), (259, 260), (262, 264), (266, 267)], 'A233': [(258, 258)], 'A238': [(261, 261), (265, 265)]}","{'A276': 0.90625, 'A233': 0.03125, 'A238': 0.0625}",A276,,"    private Path createZipFile(
            List<Bookmark> bookmarks, List<ByteArrayOutputStream> splitDocumentsBoas)
            throws Exception {
        Path zipFile = Files.createTempFile(""split_documents"", "".zip"");
        String fileNumberFormatter = ""%0"" + (Integer.toString(bookmarks.size()).length()) + ""d "";
        try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(zipFile))) {
            for (int i = 0; i < splitDocumentsBoas.size(); i++) {

                // split files will be named as ""[FILE_NUMBER] [BOOKMARK_TITLE].pdf""

                String fileName =
                        String.format(fileNumberFormatter, i)
                                + bookmarks.get(i).getTitle()
                                + "".pdf"";
                ByteArrayOutputStream baos = splitDocumentsBoas.get(i);
                byte[] pdf = baos.toByteArray();

                ZipEntry pdfEntry = new ZipEntry(fileName);
                zipOut.putNextEntry(pdfEntry);
                zipOut.write(pdf);
                zipOut.closeEntry();

                log.debug(""Wrote split document {} to zip file"", fileName);
            }
        } catch (Exception e) {
            log.error(""Failed writing to zip"", e);
            throw e;
        }

        log.info(""Successfully created zip file with split documents: {}"", zipFile);
        return zipFile;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java,SplitPdfByChaptersController,getSplitDocumentsBoas,"List<ByteArrayOutputStream> getSplitDocumentsBoas(PDDocument,List<Bookmark>,boolean)","[269, 302]","{'A276': [(269, 274), (276, 285), (287, 289), (291, 296), (298, 302)], 'A233': [(275, 275), (286, 286), (290, 290), (297, 297)]}","{'A276': 0.8823529411764706, 'A233': 0.11764705882352941}",A276,,"    public List<ByteArrayOutputStream> getSplitDocumentsBoas(
            PDDocument sourceDocument, List<Bookmark> bookmarks, boolean includeMetadata)
            throws Exception {
        List<ByteArrayOutputStream> splitDocumentsBoas = new ArrayList<>();
        PdfMetadata metadata = null;
        if (includeMetadata) {
            metadata = pdfMetadataService.extractMetadataFromPdf(sourceDocument);
        }
        for (Bookmark bookmark : bookmarks) {
            try (PDDocument splitDocument = new PDDocument()) {
                boolean isSinglePage = (bookmark.getStartPage() == bookmark.getEndPage());

                for (int i = bookmark.getStartPage();
                        i < bookmark.getEndPage() + (isSinglePage ? 1 : 0);
                        i++) {
                    PDPage page = sourceDocument.getPage(i);
                    splitDocument.addPage(page);
                    log.debug(""Adding page {} to split document"", i);
                }
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                if (includeMetadata) {
                    pdfMetadataService.setMetadataToPdf(splitDocument, metadata);
                }

                splitDocument.save(baos);

                splitDocumentsBoas.add(baos);
            } catch (Exception e) {
                ExceptionUtils.logException(""document splitting and saving"", e);
                throw e;
            }
        }
        return splitDocumentsBoas;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/MultiPageLayoutController.java,MultiPageLayoutController,mergeMultiplePagesIntoOne,ResponseEntity<byte[]> mergeMultiplePagesIntoOne(MergeMultiplePagesRequest),"[39, 145]","{'A233': [(39, 42), (45, 49), (51, 142), (145, 145)], 'A234': [(43, 44), (50, 50)], 'A246': [(143, 144)]}","{'A233': 0.9532710280373832, 'A234': 0.028037383177570093, 'A246': 0.018691588785046728}",A233,,"    @PostMapping(value = ""/multi-page-layout"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Merge multiple pages of a PDF document into a single page"",
            description =
                    ""This operation takes an input PDF file and the number of pages to merge into a""
                            + "" single sheet in the output PDF file. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> mergeMultiplePagesIntoOne(
            @ModelAttribute MergeMultiplePagesRequest request) throws IOException {

        int pagesPerSheet = request.getPagesPerSheet();
        MultipartFile file = request.getFileInput();
        boolean addBorder = Boolean.TRUE.equals(request.getAddBorder());

        if (pagesPerSheet != 2
                && pagesPerSheet != 3
                && pagesPerSheet != (int) Math.sqrt(pagesPerSheet) * Math.sqrt(pagesPerSheet)) {
            throw new IllegalArgumentException(""pagesPerSheet must be 2, 3 or a perfect square"");
        }

        int cols =
                pagesPerSheet == 2 || pagesPerSheet == 3
                        ? pagesPerSheet
                        : (int) Math.sqrt(pagesPerSheet);
        int rows = pagesPerSheet == 2 || pagesPerSheet == 3 ? 1 : (int) Math.sqrt(pagesPerSheet);

        PDDocument sourceDocument = pdfDocumentFactory.load(file);
        PDDocument newDocument =
                pdfDocumentFactory.createNewDocumentBasedOnOldDocument(sourceDocument);
        PDPage newPage = new PDPage(PDRectangle.A4);
        newDocument.addPage(newPage);

        int totalPages = sourceDocument.getNumberOfPages();
        float cellWidth = newPage.getMediaBox().getWidth() / cols;
        float cellHeight = newPage.getMediaBox().getHeight() / rows;

        PDPageContentStream contentStream =
                new PDPageContentStream(
                        newDocument, newPage, PDPageContentStream.AppendMode.APPEND, true, true);
        LayerUtility layerUtility = new LayerUtility(newDocument);

        float borderThickness = 1.5f; // Specify border thickness as required
        contentStream.setLineWidth(borderThickness);
        contentStream.setStrokingColor(Color.BLACK);

        for (int i = 0; i < totalPages; i++) {
            if (i != 0 && i % pagesPerSheet == 0) {
                // Close the current content stream and create a new page and content stream
                contentStream.close();
                newPage = new PDPage(PDRectangle.A4);
                newDocument.addPage(newPage);
                contentStream =
                        new PDPageContentStream(
                                newDocument,
                                newPage,
                                PDPageContentStream.AppendMode.APPEND,
                                true,
                                true);
            }

            PDPage sourcePage = sourceDocument.getPage(i);
            PDRectangle rect = sourcePage.getMediaBox();
            float scaleWidth = cellWidth / rect.getWidth();
            float scaleHeight = cellHeight / rect.getHeight();
            float scale = Math.min(scaleWidth, scaleHeight);

            int adjustedPageIndex =
                    i % pagesPerSheet; // This will reset the index for every new page
            int rowIndex = adjustedPageIndex / cols;
            int colIndex = adjustedPageIndex % cols;

            float x = colIndex * cellWidth + (cellWidth - rect.getWidth() * scale) / 2;
            float y =
                    newPage.getMediaBox().getHeight()
                            - ((rowIndex + 1) * cellHeight
                                    - (cellHeight - rect.getHeight() * scale) / 2);

            contentStream.saveGraphicsState();
            contentStream.transform(Matrix.getTranslateInstance(x, y));
            contentStream.transform(Matrix.getScaleInstance(scale, scale));

            PDFormXObject formXObject = layerUtility.importPageAsForm(sourceDocument, i);
            contentStream.drawForm(formXObject);

            contentStream.restoreGraphicsState();

            if (addBorder) {
                // Draw border around each page
                float borderX = colIndex * cellWidth;
                float borderY = newPage.getMediaBox().getHeight() - (rowIndex + 1) * cellHeight;
                contentStream.addRect(borderX, borderY, cellWidth, cellHeight);
                contentStream.stroke();
            }
        }

        contentStream.close(); // Close the final content stream
        sourceDocument.close();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        newDocument.save(baos);
        newDocument.close();

        byte[] result = baos.toByteArray();
        return WebResponseUtils.bytesToWebResponse(
                result,
                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst(""[.][^.]+$"", """")
                        + ""_layoutChanged.pdf"");
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,deletePages,ResponseEntity<byte[]> deletePages(PDFWithPageNums),"[41, 73]","{'A233': [(41, 44), (48, 60), (63, 69), (73, 73)], 'A234': [(45, 47), (61, 62)], 'A246': [(70, 72)]}","{'A233': 0.7575757575757576, 'A234': 0.15151515151515152, 'A246': 0.09090909090909091}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/remove-pages"")
    @Operation(
            summary = ""Remove pages from a PDF file"",
            description =
                    ""This endpoint removes specified pages from a given PDF file. Users can provide""
                            + "" a comma-separated list of page numbers or ranges to delete. Input:PDF""
                            + "" Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> deletePages(@ModelAttribute PDFWithPageNums request)
            throws IOException {

        MultipartFile pdfFile = request.getFileInput();
        String pagesToDelete = request.getPageNumbers();

        PDDocument document = pdfDocumentFactory.load(pdfFile);

        // Split the page order string into an array of page numbers or range of numbers
        String[] pageOrderArr = pagesToDelete.split("","");

        List<Integer> pagesToRemove =
                GeneralUtils.parsePageList(pageOrderArr, document.getNumberOfPages(), false);

        Collections.sort(pagesToRemove);

        for (int i = pagesToRemove.size() - 1; i >= 0; i--) {
            int pageIndex = pagesToRemove.get(i);
            document.removePage(pageIndex);
        }
        return WebResponseUtils.pdfDocToWebResponse(
                document,
                Filenames.toSimpleFileName(pdfFile.getOriginalFilename())
                                .replaceFirst(""[.][^.]+$"", """")
                        + ""_removed_pages.pdf"");
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,removeFirst,List<Integer> removeFirst(int),"[75, 82]","{'A233': [(75, 82)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> removeFirst(int totalPages) {
        if (totalPages <= 1) return new ArrayList<>();
        List<Integer> newPageOrder = new ArrayList<>();
        for (int i = 2; i <= totalPages; i++) {
            newPageOrder.add(i - 1);
        }
        return newPageOrder;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,removeLast,List<Integer> removeLast(int),"[84, 91]","{'A233': [(84, 91)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> removeLast(int totalPages) {
        if (totalPages <= 1) return new ArrayList<>();
        List<Integer> newPageOrder = new ArrayList<>();
        for (int i = 1; i < totalPages; i++) {
            newPageOrder.add(i - 1);
        }
        return newPageOrder;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,removeFirstAndLast,List<Integer> removeFirstAndLast(int),"[93, 100]","{'A233': [(93, 100)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> removeFirstAndLast(int totalPages) {
        if (totalPages <= 2) return new ArrayList<>();
        List<Integer> newPageOrder = new ArrayList<>();
        for (int i = 2; i < totalPages; i++) {
            newPageOrder.add(i - 1);
        }
        return newPageOrder;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,reverseOrder,List<Integer> reverseOrder(int),"[102, 108]","{'A233': [(102, 107)], 'A277': [(108, 108)]}","{'A233': 0.8571428571428571, 'A277': 0.14285714285714285}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> reverseOrder(int totalPages) {
        List<Integer> newPageOrder = new ArrayList<>();
        for (int i = totalPages; i >= 1; i--) {
            newPageOrder.add(i - 1);
        }
        return newPageOrder;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,duplexSort,List<Integer> duplexSort(int),"[110, 120]","{'A233': [(110, 120)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> duplexSort(int totalPages) {
        List<Integer> newPageOrder = new ArrayList<>();
        int half = (totalPages + 1) / 2; // This ensures proper behavior with odd numbers of pages
        for (int i = 1; i <= half; i++) {
            newPageOrder.add(i - 1);
            if (i <= totalPages - half) { // Avoid going out of bounds
                newPageOrder.add(totalPages - i);
            }
        }
        return newPageOrder;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,bookletSort,List<Integer> bookletSort(int),"[122, 129]","{'A233': [(122, 129)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> bookletSort(int totalPages) {
        List<Integer> newPageOrder = new ArrayList<>();
        for (int i = 0; i < totalPages / 2; i++) {
            newPageOrder.add(i);
            newPageOrder.add(totalPages - i - 1);
        }
        return newPageOrder;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,sideStitchBooklet,List<Integer> sideStitchBooklet(int),"[131, 141]","{'A233': [(131, 141)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> sideStitchBooklet(int totalPages) {
        List<Integer> newPageOrder = new ArrayList<>();
        for (int i = 0; i < (totalPages + 3) / 4; i++) {
            int begin = i * 4;
            newPageOrder.add(Math.min(begin + 3, totalPages - 1));
            newPageOrder.add(Math.min(begin, totalPages - 1));
            newPageOrder.add(Math.min(begin + 1, totalPages - 1));
            newPageOrder.add(Math.min(begin + 2, totalPages - 1));
        }
        return newPageOrder;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,oddEvenSplit,List<Integer> oddEvenSplit(int),"[143, 152]","{'A233': [(143, 152)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> oddEvenSplit(int totalPages) {
        List<Integer> newPageOrder = new ArrayList<>();
        for (int i = 1; i <= totalPages; i += 2) {
            newPageOrder.add(i - 1);
        }
        for (int i = 2; i <= totalPages; i += 2) {
            newPageOrder.add(i - 1);
        }
        return newPageOrder;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,oddEvenMerge,List<Integer> oddEvenMerge(int),"[162, 174]","{'A258': [(162, 174)]}",{'A258': 1.0},A258,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    List<Integer> oddEvenMerge(int totalPages) {
        List<Integer> newPageOrderZeroBased = new ArrayList<>();
        int numberOfOddPages = (totalPages + 1) / 2;

        for (int oneBasedIndex = 1; oneBasedIndex < (numberOfOddPages + 1); oneBasedIndex++) {
            newPageOrderZeroBased.add((oneBasedIndex - 1));
            if (numberOfOddPages + oneBasedIndex <= totalPages) {
                newPageOrderZeroBased.add((numberOfOddPages + oneBasedIndex - 1));
            }
        }

        return newPageOrderZeroBased;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,duplicate,"List<Integer> duplicate(int,String)","[176, 205]","{'A233': [(176, 205)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> duplicate(int totalPages, String pageOrder) {
        List<Integer> newPageOrder = new ArrayList<>();
        int duplicateCount;

        try {
            // Parse the duplicate count from pageOrder
            duplicateCount =
                    pageOrder != null && !pageOrder.isEmpty()
                            ? Integer.parseInt(pageOrder.trim())
                            : 2; // Default to 2 if not specified
        } catch (NumberFormatException e) {
            log.error(""Invalid duplicate count specified"", e);
            duplicateCount = 2; // Default to 2 if invalid input
        }

        // Validate duplicate count
        if (duplicateCount < 1) {
            duplicateCount = 2; // Default to 2 if invalid input
        }

        // For each page in the document
        for (int pageNum = 0; pageNum < totalPages; pageNum++) {
            // Add the current page index duplicateCount times
            for (int dupCount = 0; dupCount < duplicateCount; dupCount++) {
                newPageOrder.add(pageNum);
            }
        }

        return newPageOrder;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,processSortTypes,"List<Integer> processSortTypes(String,int,String)","[207, 238]","{'A233': [(207, 220), (223, 234), (236, 238)], 'A238': [(235, 235)], 'A258': [(221, 222)]}","{'A233': 0.90625, 'A238': 0.03125, 'A258': 0.0625}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    private List<Integer> processSortTypes(String sortTypes, int totalPages, String pageOrder) {
        try {
            SortTypes mode = SortTypes.valueOf(sortTypes.toUpperCase());
            switch (mode) {
                case REVERSE_ORDER:
                    return reverseOrder(totalPages);
                case DUPLEX_SORT:
                    return duplexSort(totalPages);
                case BOOKLET_SORT:
                    return bookletSort(totalPages);
                case SIDE_STITCH_BOOKLET_SORT:
                    return sideStitchBooklet(totalPages);
                case ODD_EVEN_SPLIT:
                    return oddEvenSplit(totalPages);
                case ODD_EVEN_MERGE:
                    return oddEvenMerge(totalPages);
                case REMOVE_FIRST:
                    return removeFirst(totalPages);
                case REMOVE_LAST:
                    return removeLast(totalPages);
                case REMOVE_FIRST_AND_LAST:
                    return removeFirstAndLast(totalPages);
                case DUPLICATE:
                    return duplicate(totalPages, pageOrder);
                default:
                    throw new IllegalArgumentException(""Unsupported custom mode"");
            }
        } catch (IllegalArgumentException e) {
            log.error(""Unsupported custom mode"", e);
            return null;
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java,RearrangePagesPDFController,rearrangePages,ResponseEntity<byte[]> rearrangePages(RearrangePagesRequest),"[240, 295]","{'A233': [(240, 243), (248, 267), (270, 287), (290, 295)], 'A234': [(244, 247)], 'A238': [(268, 269)], 'A246': [(288, 289)]}","{'A233': 0.8571428571428571, 'A234': 0.07142857142857142, 'A238': 0.03571428571428571, 'A246': 0.03571428571428571}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/rearrange-pages"")
    @Operation(
            summary = ""Rearrange pages in a PDF file"",
            description =
                    ""This endpoint rearranges pages in a given PDF file based on the specified page""
                            + "" order or custom mode. Users can provide a page order as a""
                            + "" comma-separated list of page numbers or page ranges, or a custom mode.""
                            + "" Input:PDF Output:PDF"")
    public ResponseEntity<byte[]> rearrangePages(@ModelAttribute RearrangePagesRequest request)
            throws IOException {
        MultipartFile pdfFile = request.getFileInput();
        String pageOrder = request.getPageNumbers();
        String sortType = request.getCustomMode();
        try {
            // Load the input PDF
            PDDocument document = pdfDocumentFactory.load(pdfFile);

            // Split the page order string into an array of page numbers or range of numbers
            String[] pageOrderArr = pageOrder != null ? pageOrder.split("","") : new String[0];
            int totalPages = document.getNumberOfPages();
            List<Integer> newPageOrder;
            if (sortType != null
                    && sortType.length() > 0
                    && !""custom"".equals(sortType.toLowerCase())) {
                newPageOrder = processSortTypes(sortType, totalPages, pageOrder);
            } else {
                newPageOrder = GeneralUtils.parsePageList(pageOrderArr, totalPages, false);
            }
            log.info(""newPageOrder = "" + newPageOrder);
            log.info(""totalPages = "" + totalPages);
            // Create a new list to hold the pages in the new order
            List<PDPage> newPages = new ArrayList<>();
            for (int i = 0; i < newPageOrder.size(); i++) {
                newPages.add(document.getPage(newPageOrder.get(i)));
            }

            // Remove all the pages from the original document
            for (int i = document.getNumberOfPages() - 1; i >= 0; i--) {
                document.removePage(i);
            }

            // Add the pages in the new order
            for (PDPage page : newPages) {
                document.addPage(page);
            }

            return WebResponseUtils.pdfDocToWebResponse(
                    document,
                    Filenames.toSimpleFileName(pdfFile.getOriginalFilename())
                                    .replaceFirst(""[.][^.]+$"", """")
                            + ""_rearranged.pdf"");
        } catch (IOException e) {
            ExceptionUtils.logException(""document rearrangement"", e);
            throw e;
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java,AnalysisController,getPageCount,"Map<String, Integer> getPageCount(PDFFile)","[32, 40]","{'A233': [(32, 40)]}",{'A233': 1.0},A233,,"    @PostMapping(value = ""/page-count"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Get PDF page count"",
            description = ""Returns total number of pages in PDF. Input:PDF Output:JSON Type:SISO"")
    public Map<String, Integer> getPageCount(@ModelAttribute PDFFile file) throws IOException {
        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput())) {
            return Map.of(""pageCount"", document.getNumberOfPages());
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java,AnalysisController,getBasicInfo,"Map<String, Object> getBasicInfo(PDFFile)","[42, 54]","{'A233': [(42, 54)]}",{'A233': 1.0},A233,,"    @PostMapping(value = ""/basic-info"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Get basic PDF information"",
            description = ""Returns page count, version, file size. Input:PDF Output:JSON Type:SISO"")
    public Map<String, Object> getBasicInfo(@ModelAttribute PDFFile file) throws IOException {
        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput())) {
            Map<String, Object> info = new HashMap<>();
            info.put(""pageCount"", document.getNumberOfPages());
            info.put(""pdfVersion"", document.getVersion());
            info.put(""fileSize"", file.getFileInput().getSize());
            return info;
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java,AnalysisController,getDocumentProperties,"Map<String, String> getDocumentProperties(PDFFile)","[56, 77]","{'A233': [(56, 61), (65, 77)], 'A234': [(62, 64)]}","{'A233': 0.8636363636363636, 'A234': 0.13636363636363635}",A233,,"    @PostMapping(value = ""/document-properties"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Get PDF document properties"",
            description = ""Returns title, author, subject, etc. Input:PDF Output:JSON Type:SISO"")
    public Map<String, String> getDocumentProperties(@ModelAttribute PDFFile file)
            throws IOException {
        // Load the document in read-only mode to prevent modifications and ensure the integrity of
        // the original file.
        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput(), true)) {
            PDDocumentInformation info = document.getDocumentInformation();
            Map<String, String> properties = new HashMap<>();
            properties.put(""title"", info.getTitle());
            properties.put(""author"", info.getAuthor());
            properties.put(""subject"", info.getSubject());
            properties.put(""keywords"", info.getKeywords());
            properties.put(""creator"", info.getCreator());
            properties.put(""producer"", info.getProducer());
            properties.put(""creationDate"", info.getCreationDate().toString());
            properties.put(""modificationDate"", info.getModificationDate().toString());
            return properties;
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java,AnalysisController,getPageDimensions,"List<Map<String, Float>> getPageDimensions(PDFFile)","[79, 97]","{'A233': [(79, 87), (89, 97)], 'A235': [(88, 88)]}","{'A233': 0.9473684210526315, 'A235': 0.05263157894736842}",A233,,"    @PostMapping(value = ""/page-dimensions"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Get page dimensions for all pages"",
            description = ""Returns width and height of each page. Input:PDF Output:JSON Type:SISO"")
    public List<Map<String, Float>> getPageDimensions(@ModelAttribute PDFFile file)
            throws IOException {
        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput())) {
            List<Map<String, Float>> dimensions = new ArrayList<>();
            PDPageTree pages = document.getPages();

            for (PDPage page : pages) {
                Map<String, Float> pageDim = new HashMap<>();
                pageDim.put(""width"", page.getBBox().getWidth());
                pageDim.put(""height"", page.getBBox().getHeight());
                dimensions.add(pageDim);
            }
            return dimensions;
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java,AnalysisController,getFormFields,"Map<String, Object> getFormFields(PDFFile)","[99, 120]","{'A233': [(99, 107), (109, 120)], 'A235': [(108, 108)]}","{'A233': 0.9545454545454546, 'A235': 0.045454545454545456}",A233,,"    @PostMapping(value = ""/form-fields"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Get form field information"",
            description =
                    ""Returns count and details of form fields. Input:PDF Output:JSON Type:SISO"")
    public Map<String, Object> getFormFields(@ModelAttribute PDFFile file) throws IOException {
        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput())) {
            Map<String, Object> formInfo = new HashMap<>();
            PDAcroForm form = document.getDocumentCatalog().getAcroForm();

            if (form != null) {
                formInfo.put(""fieldCount"", form.getFields().size());
                formInfo.put(""hasXFA"", form.hasXFA());
                formInfo.put(""isSignaturesExist"", form.isSignaturesExist());
            } else {
                formInfo.put(""fieldCount"", 0);
                formInfo.put(""hasXFA"", false);
                formInfo.put(""isSignaturesExist"", false);
            }
            return formInfo;
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java,AnalysisController,getAnnotationInfo,"Map<String, Object> getAnnotationInfo(PDFFile)","[122, 144]","{'A233': [(122, 144)]}",{'A233': 1.0},A233,,"    @PostMapping(value = ""/annotation-info"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Get annotation information"",
            description = ""Returns count and types of annotations. Input:PDF Output:JSON Type:SISO"")
    public Map<String, Object> getAnnotationInfo(@ModelAttribute PDFFile file) throws IOException {
        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput())) {
            Map<String, Object> annotInfo = new HashMap<>();
            int totalAnnotations = 0;
            Map<String, Integer> annotationTypes = new HashMap<>();

            for (PDPage page : document.getPages()) {
                for (PDAnnotation annot : page.getAnnotations()) {
                    totalAnnotations++;
                    String subType = annot.getSubtype();
                    annotationTypes.merge(subType, 1, Integer::sum);
                }
            }

            annotInfo.put(""totalCount"", totalAnnotations);
            annotInfo.put(""typeBreakdown"", annotationTypes);
            return annotInfo;
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java,AnalysisController,getFontInfo,"Map<String, Object> getFontInfo(PDFFile)","[146, 166]","{'A233': [(146, 166)]}",{'A233': 1.0},A233,,"    @PostMapping(value = ""/font-info"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Get font information"",
            description =
                    ""Returns list of fonts used in the document. Input:PDF Output:JSON Type:SISO"")
    public Map<String, Object> getFontInfo(@ModelAttribute PDFFile file) throws IOException {
        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput())) {
            Map<String, Object> fontInfo = new HashMap<>();
            Set<String> fontNames = new HashSet<>();

            for (PDPage page : document.getPages()) {
                for (COSName font : page.getResources().getFontNames()) {
                    fontNames.add(font.getName());
                }
            }

            fontInfo.put(""fontCount"", fontNames.size());
            fontInfo.put(""fonts"", fontNames);
            return fontInfo;
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java,AnalysisController,getSecurityInfo,"Map<String, Object> getSecurityInfo(PDFFile)","[168, 202]","{'A233': [(168, 176), (178, 180), (182, 183), (186, 186), (188, 188), (195, 198), (200, 202)], 'A234': [(184, 185)], 'A235': [(177, 177), (181, 181), (194, 194), (199, 199)], 'A248': [(187, 187), (189, 193)]}","{'A233': 0.6571428571428571, 'A234': 0.05714285714285714, 'A235': 0.11428571428571428, 'A248': 0.17142857142857143}",A233,,"    @PostMapping(value = ""/security-info"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Get security information"",
            description =
                    ""Returns encryption and permission details. Input:PDF Output:JSON Type:SISO"")
    public Map<String, Object> getSecurityInfo(@ModelAttribute PDFFile file) throws IOException {
        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput())) {
            Map<String, Object> securityInfo = new HashMap<>();
            PDEncryption encryption = document.getEncryption();

            if (encryption != null) {
                securityInfo.put(""isEncrypted"", true);
                securityInfo.put(""keyLength"", encryption.getLength());

                // Get permissions
                Map<String, Boolean> permissions = new HashMap<>();
                permissions.put(
                        ""preventPrinting"", !document.getCurrentAccessPermission().canPrint());
                permissions.put(
                        ""preventModify"", !document.getCurrentAccessPermission().canModify());
                permissions.put(
                        ""preventExtractContent"",
                        !document.getCurrentAccessPermission().canExtractContent());
                permissions.put(
                        ""preventModifyAnnotations"",
                        !document.getCurrentAccessPermission().canModifyAnnotations());

                securityInfo.put(""permissions"", permissions);
            } else {
                securityInfo.put(""isEncrypted"", false);
            }

            return securityInfo;
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/RemoveCertSignController.java,RemoveCertSignController,removeCertSignPDF,ResponseEntity<byte[]> removeCertSignPDF(PDFFile),"[35, 69]","{'A238': [(35, 38), (41, 45), (47, 57), (59, 64), (67, 69)], 'A233': [(46, 46), (58, 58), (65, 66)], 'A234': [(39, 40)]}","{'A238': 0.8285714285714286, 'A233': 0.11428571428571428, 'A234': 0.05714285714285714}",A238,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/remove-cert-sign"")
    @Operation(
            summary = ""Remove digital signature from PDF"",
            description =
                    ""This endpoint accepts a PDF file and returns the PDF file without the digital""
                            + "" signature. Input:PDF, Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> removeCertSignPDF(@ModelAttribute PDFFile request)
            throws Exception {
        MultipartFile pdf = request.getFileInput();

        // Load the PDF document
        PDDocument document = pdfDocumentFactory.load(pdf);

        // Get the document catalog
        PDDocumentCatalog catalog = document.getDocumentCatalog();

        // Get the AcroForm
        PDAcroForm acroForm = catalog.getAcroForm();
        if (acroForm != null) {
            // Remove signature fields safely
            List<PDField> fieldsToRemove =
                    acroForm.getFields().stream()
                            .filter(field -> field instanceof PDSignatureField)
                            .toList();

            if (!fieldsToRemove.isEmpty()) {
                acroForm.flatten(fieldsToRemove, false);
            }
        }
        // Return the modified PDF as a response
        return WebResponseUtils.pdfDocToWebResponse(
                document,
                Filenames.toSimpleFileName(pdf.getOriginalFilename()).replaceFirst(""[.][^.]+$"", """")
                        + ""_unsigned.pdf"");
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java,PasswordController,removePassword,ResponseEntity<byte[]> removePassword(PDFPasswordRequest),"[35, 59]","{'A233': [(35, 35), (41, 59)], 'A234': [(39, 40)], 'A238': [(36, 38)]}","{'A233': 0.8, 'A234': 0.08, 'A238': 0.12}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/remove-password"")
    @Operation(
            summary = ""Remove password from a PDF file"",
            description =
                    ""This endpoint removes the password from a protected PDF file. Users need to""
                            + "" provide the existing password. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest request)
            throws IOException {
        MultipartFile fileInput = request.getFileInput();
        String password = request.getPassword();
        PDDocument document = pdfDocumentFactory.load(fileInput, password);

        try {
            document.setAllSecurityToBeRemoved(true);
            return WebResponseUtils.pdfDocToWebResponse(
                    document,
                    Filenames.toSimpleFileName(fileInput.getOriginalFilename())
                                    .replaceFirst(""[.][^.]+$"", """")
                            + ""_password_removed.pdf"");
        } catch (IOException e) {
            document.close();
            ExceptionUtils.logException(""password removal"", e);
            throw ExceptionUtils.handlePdfException(e);
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java,PasswordController,addPassword,ResponseEntity<byte[]> addPassword(AddPasswordRequest),"[61, 114]","{'A233': [(61, 61), (68, 73), (84, 86), (95, 105), (108, 110), (114, 114)], 'A234': [(65, 67), (74, 83)], 'A238': [(62, 64), (107, 107), (112, 112)], 'A248': [(87, 94)], 'A246': [(106, 106), (111, 111), (113, 113)]}","{'A233': 0.46296296296296297, 'A234': 0.24074074074074073, 'A238': 0.09259259259259259, 'A248': 0.14814814814814814, 'A246': 0.05555555555555555}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/add-password"")
    @Operation(
            summary = ""Add password to a PDF file"",
            description =
                    ""This endpoint adds password protection to a PDF file. Users can specify a set""
                            + "" of permissions that should be applied to the file. Input:PDF""
                            + "" Output:PDF"")
    public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest request)
            throws IOException {
        MultipartFile fileInput = request.getFileInput();
        String ownerPassword = request.getOwnerPassword();
        String password = request.getPassword();
        int keyLength = request.getKeyLength();
        boolean preventAssembly = Boolean.TRUE.equals(request.getPreventAssembly());
        boolean preventExtractContent = Boolean.TRUE.equals(request.getPreventExtractContent());
        boolean preventExtractForAccessibility =
                Boolean.TRUE.equals(request.getPreventExtractForAccessibility());
        boolean preventFillInForm = Boolean.TRUE.equals(request.getPreventFillInForm());
        boolean preventModify = Boolean.TRUE.equals(request.getPreventModify());
        boolean preventModifyAnnotations =
                Boolean.TRUE.equals(request.getPreventModifyAnnotations());
        boolean preventPrinting = Boolean.TRUE.equals(request.getPreventPrinting());
        boolean preventPrintingFaithful = Boolean.TRUE.equals(request.getPreventPrintingFaithful());

        PDDocument document = pdfDocumentFactory.load(fileInput);
        AccessPermission ap = new AccessPermission();
        ap.setCanAssembleDocument(!preventAssembly);
        ap.setCanExtractContent(!preventExtractContent);
        ap.setCanExtractForAccessibility(!preventExtractForAccessibility);
        ap.setCanFillInForm(!preventFillInForm);
        ap.setCanModify(!preventModify);
        ap.setCanModifyAnnotations(!preventModifyAnnotations);
        ap.setCanPrint(!preventPrinting);
        ap.setCanPrintFaithful(!preventPrintingFaithful);
        StandardProtectionPolicy spp = new StandardProtectionPolicy(ownerPassword, password, ap);

        if (!"""".equals(ownerPassword) || !"""".equals(password)) {
            spp.setEncryptionKeyLength(keyLength);
        }
        spp.setPermissions(ap);
        document.protect(spp);

        if ("""".equals(ownerPassword) && """".equals(password))
            return WebResponseUtils.pdfDocToWebResponse(
                    document,
                    Filenames.toSimpleFileName(fileInput.getOriginalFilename())
                                    .replaceFirst(""[.][^.]+$"", """")
                            + ""_permissions.pdf"");
        return WebResponseUtils.pdfDocToWebResponse(
                document,
                Filenames.toSimpleFileName(fileInput.getOriginalFilename())
                                .replaceFirst(""[.][^.]+$"", """")
                        + ""_passworded.pdf"");
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java,RedactController,initBinder,void initBinder(WebDataBinder),"[53, 57]","{'A233': [(55, 56)], 'A256': [(53, 54), (57, 57)]}","{'A233': 0.4, 'A256': 0.6}",A256,,"    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(
                List.class, ""redactions"", new StringToArrayListPropertyEditor());
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java,RedactController,redactPDF,ResponseEntity<byte[]> redactPDF(ManualRedactPdfRequest),"[59, 93]","{'A233': [(60, 62), (66, 67)], 'A256': [(59, 59), (68, 77), (79, 93)], 'A234': [(63, 65), (78, 78)]}","{'A233': 0.14285714285714285, 'A256': 0.7428571428571429, 'A234': 0.11428571428571428}",A256,,"    @PostMapping(value = ""/redact"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Redacts areas and pages in a PDF document"",
            description =
                    ""This operation takes an input PDF file with a list of areas, page""
                            + "" number(s)/range(s)/function(s) to redact. Input:PDF, Output:PDF,""
                            + "" Type:SISO"")
    public ResponseEntity<byte[]> redactPDF(@ModelAttribute ManualRedactPdfRequest request)
            throws IOException {
        MultipartFile file = request.getFileInput();
        List<RedactionArea> redactionAreas = request.getRedactions();

        PDDocument document = pdfDocumentFactory.load(file);

        PDPageTree allPages = document.getDocumentCatalog().getPages();

        redactPages(request, document, allPages);
        redactAreas(redactionAreas, document, allPages);

        if (Boolean.TRUE.equals(request.getConvertPDFToImage())) {
            PDDocument convertedPdf = PdfUtils.convertPdfToPdfImage(document);
            document.close();
            document = convertedPdf;
        }

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        document.save(baos);
        document.close();

        byte[] pdfContent = baos.toByteArray();
        return WebResponseUtils.bytesToWebResponse(
                pdfContent,
                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst(""[.][^.]+$"", """")
                        + ""_redacted.pdf"");
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java,RedactController,redactAreas,"void redactAreas(List<RedactionArea>,PDDocument,PDPageTree)","[95, 149]","{'A233': [(95, 96), (98, 101), (103, 108), (110, 131), (133, 136), (138, 145)], 'A256': [(97, 97), (102, 102), (109, 109), (132, 132), (137, 137), (146, 149)]}","{'A233': 0.8363636363636363, 'A256': 0.16363636363636364}",A233,,"    private void redactAreas(
            List<RedactionArea> redactionAreas, PDDocument document, PDPageTree allPages)
            throws IOException {
        // Group redaction areas by page
        Map<Integer, List<RedactionArea>> redactionsByPage = new HashMap<>();

        // Process and validate each redaction area
        for (RedactionArea redactionArea : redactionAreas) {
            if (redactionArea.getPage() == null
                    || redactionArea.getPage() <= 0
                    || redactionArea.getHeight() == null
                    || redactionArea.getHeight() <= 0.0D
                    || redactionArea.getWidth() == null
                    || redactionArea.getWidth() <= 0.0D) continue;

            // Group by page number
            redactionsByPage
                    .computeIfAbsent(redactionArea.getPage(), k -> new ArrayList<>())
                    .add(redactionArea);
        }

        // Process each page only once
        for (Map.Entry<Integer, List<RedactionArea>> entry : redactionsByPage.entrySet()) {
            Integer pageNumber = entry.getKey();
            List<RedactionArea> areasForPage = entry.getValue();

            if (pageNumber > allPages.getCount()) {
                continue; // Skip if page number is out of bounds
            }

            PDPage page = allPages.get(pageNumber - 1);
            PDRectangle box = page.getBBox();

            // Create only one content stream per page
            PDPageContentStream contentStream =
                    new PDPageContentStream(
                            document, page, PDPageContentStream.AppendMode.APPEND, true, true);

            // Process all redactions for this page
            for (RedactionArea redactionArea : areasForPage) {
                Color redactColor = decodeOrDefault(redactionArea.getColor(), Color.BLACK);
                contentStream.setNonStrokingColor(redactColor);

                float x = redactionArea.getX().floatValue();
                float y = redactionArea.getY().floatValue();
                float width = redactionArea.getWidth().floatValue();
                float height = redactionArea.getHeight().floatValue();

                contentStream.addRect(x, box.getHeight() - y - height, width, height);
                contentStream.fill();
            }

            contentStream.close();
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java,RedactController,redactPages,"void redactPages(ManualRedactPdfRequest,PDDocument,PDPageTree)","[151, 170]","{'A233': [(151, 152), (159, 161)], 'A256': [(153, 158), (162, 170)]}","{'A233': 0.25, 'A256': 0.75}",A256,,"    private void redactPages(
            ManualRedactPdfRequest request, PDDocument document, PDPageTree allPages)
            throws IOException {
        Color redactColor = decodeOrDefault(request.getPageRedactionColor(), Color.BLACK);
        List<Integer> pageNumbers = getPageNumbers(request, allPages.getCount());
        for (Integer pageNumber : pageNumbers) {
            PDPage page = allPages.get(pageNumber);

            PDPageContentStream contentStream =
                    new PDPageContentStream(
                            document, page, PDPageContentStream.AppendMode.APPEND, true, true);
            contentStream.setNonStrokingColor(redactColor);

            PDRectangle box = page.getBBox();

            contentStream.addRect(0, 0, box.getWidth(), box.getHeight());
            contentStream.fill();
            contentStream.close();
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java,RedactController,decodeOrDefault,"Color decodeOrDefault(String,Color)","[172, 181]","{'A233': [(174, 177), (179, 179)], 'A256': [(172, 173), (178, 178), (180, 181)]}","{'A233': 0.5, 'A256': 0.5}",A233,,"    private Color decodeOrDefault(String hex, Color defaultColor) {
        try {
            if (hex != null && !hex.startsWith(""#"")) {
                hex = ""#"" + hex;
            }
            return Color.decode(hex);
        } catch (Exception e) {
            return defaultColor;
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java,RedactController,getPageNumbers,"List<Integer> getPageNumbers(ManualRedactPdfRequest,int)","[183, 191]","{'A233': [(185, 188)], 'A256': [(183, 184), (189, 191)]}","{'A233': 0.4444444444444444, 'A256': 0.5555555555555556}",A256,,"    private List<Integer> getPageNumbers(ManualRedactPdfRequest request, int pagesCount) {
        String pageNumbersInput = request.getPageNumbers();
        String[] parsedPageNumbers =
                pageNumbersInput != null ? pageNumbersInput.split("","") : new String[0];
        List<Integer> pageNumbers =
                GeneralUtils.parsePageList(parsedPageNumbers, pagesCount, false);
        Collections.sort(pageNumbers);
        return pageNumbers;
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java,RedactController,redactPdf,ResponseEntity<byte[]> redactPdf(RedactPdfRequest),"[193, 245]","{'A233': [(193, 196), (199, 202), (205, 206), (208, 218), (220, 230), (232, 232), (234, 242), (245, 245)], 'A238': [(219, 219)], 'A234': [(197, 198), (203, 204), (207, 207)], 'A259': [(231, 231), (233, 233)], 'A246': [(243, 244)]}","{'A233': 0.8113207547169812, 'A238': 0.018867924528301886, 'A234': 0.09433962264150944, 'A259': 0.03773584905660377, 'A246': 0.03773584905660377}",A233,,"    @PostMapping(value = ""/auto-redact"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Redacts listOfText in a PDF document"",
            description =
                    ""This operation takes an input PDF file and redacts the provided listOfText.""
                            + "" Input:PDF, Output:PDF, Type:SISO"")
    public ResponseEntity<byte[]> redactPdf(@ModelAttribute RedactPdfRequest request)
            throws Exception {
        MultipartFile file = request.getFileInput();
        String listOfTextString = request.getListOfText();
        boolean useRegex = Boolean.TRUE.equals(request.getUseRegex());
        boolean wholeWordSearchBool = Boolean.TRUE.equals(request.getWholeWordSearch());
        String colorString = request.getRedactColor();
        float customPadding = request.getCustomPadding();
        boolean convertPDFToImage = Boolean.TRUE.equals(request.getConvertPDFToImage());

        String[] listOfText = listOfTextString.split(""\n"");
        PDDocument document = pdfDocumentFactory.load(file);

        Color redactColor;
        try {
            if (!colorString.startsWith(""#"")) {
                colorString = ""#"" + colorString;
            }
            redactColor = Color.decode(colorString);
        } catch (NumberFormatException e) {
            log.warn(""Invalid color string provided. Using default color BLACK for redaction."");
            redactColor = Color.BLACK;
        }

        for (String text : listOfText) {
            text = text.trim();
            TextFinder textFinder = new TextFinder(text, useRegex, wholeWordSearchBool);
            List<PDFText> foundTexts = textFinder.getTextLocations(document);
            redactFoundText(document, foundTexts, customPadding, redactColor);
        }

        if (convertPDFToImage) {
            PDDocument convertedPdf = PdfUtils.convertPdfToPdfImage(document);
            document.close();
            document = convertedPdf;
        }

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        document.save(baos);
        document.close();

        byte[] pdfContent = baos.toByteArray();
        return WebResponseUtils.bytesToWebResponse(
                pdfContent,
                Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst(""[.][^.]+$"", """")
                        + ""_redacted.pdf"");
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java,RedactController,redactFoundText,"void redactFoundText(PDDocument,List<PDFText>,float,Color)","[247, 268]","{'A233': [(247, 268)]}",{'A233': 1.0},A233,,"    private void redactFoundText(
            PDDocument document, List<PDFText> blocks, float customPadding, Color redactColor)
            throws IOException {
        var allPages = document.getDocumentCatalog().getPages();

        for (PDFText block : blocks) {
            var page = allPages.get(block.getPageIndex());
            PDPageContentStream contentStream =
                    new PDPageContentStream(
                            document, page, PDPageContentStream.AppendMode.APPEND, true, true);
            contentStream.setNonStrokingColor(redactColor);
            float padding = (block.getY2() - block.getY1()) * 0.3f + customPadding;
            PDRectangle pageBox = page.getBBox();
            contentStream.addRect(
                    block.getX1(),
                    pageBox.getHeight() - block.getY1() - padding,
                    block.getX2() - block.getX1(),
                    block.getY2() - block.getY1() + 2 * padding);
            contentStream.fill();
            contentStream.close();
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java,SanitizeController,sanitizePDF,ResponseEntity<byte[]> sanitizePDF(SanitizePdfRequest),"[49, 95]","{'A233': [(49, 52), (54, 57), (64, 95)], 'A234': [(53, 53), (58, 63)]}","{'A233': 0.851063829787234, 'A234': 0.14893617021276595}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/sanitize-pdf"")
    @Operation(
            summary = ""Sanitize a PDF file"",
            description =
                    ""This endpoint processes a PDF file and removes specific elements based on the""
                            + "" provided options. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> sanitizePDF(@ModelAttribute SanitizePdfRequest request)
            throws IOException {
        MultipartFile inputFile = request.getFileInput();
        boolean removeJavaScript = Boolean.TRUE.equals(request.getRemoveJavaScript());
        boolean removeEmbeddedFiles = Boolean.TRUE.equals(request.getRemoveEmbeddedFiles());
        boolean removeXMPMetadata = Boolean.TRUE.equals(request.getRemoveXMPMetadata());
        boolean removeMetadata = Boolean.TRUE.equals(request.getRemoveMetadata());
        boolean removeLinks = Boolean.TRUE.equals(request.getRemoveLinks());
        boolean removeFonts = Boolean.TRUE.equals(request.getRemoveFonts());

        PDDocument document = pdfDocumentFactory.load(inputFile, true);
        if (removeJavaScript) {
            sanitizeJavaScript(document);
        }

        if (removeEmbeddedFiles) {
            sanitizeEmbeddedFiles(document);
        }

        if (removeXMPMetadata) {
            sanitizeXMPMetadata(document);
        }

        if (removeMetadata) {
            sanitizeDocumentInfoMetadata(document);
        }

        if (removeLinks) {
            sanitizeLinks(document);
        }

        if (removeFonts) {
            sanitizeFonts(document);
        }

        return WebResponseUtils.pdfDocToWebResponse(
                document,
                Filenames.toSimpleFileName(inputFile.getOriginalFilename())
                                .replaceFirst(""[.][^.]+$"", """")
                        + ""_sanitized.pdf"");
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java,SanitizeController,sanitizeJavaScript,void sanitizeJavaScript(PDDocument),"[97, 146]","{'A233': [(97, 117), (119, 146)], 'A234': [(118, 118)]}","{'A233': 0.98, 'A234': 0.02}",A233,,"    private void sanitizeJavaScript(PDDocument document) throws IOException {
        // Get the root dictionary (catalog) of the PDF
        PDDocumentCatalog catalog = document.getDocumentCatalog();

        // Get the Names dictionary
        COSDictionary namesDict =
                (COSDictionary) catalog.getCOSObject().getDictionaryObject(COSName.NAMES);

        if (namesDict != null) {
            // Get the JavaScript dictionary
            COSDictionary javaScriptDict =
                    (COSDictionary) namesDict.getDictionaryObject(COSName.getPDFName(""JavaScript""));

            if (javaScriptDict != null) {
                // Remove the JavaScript dictionary
                namesDict.removeItem(COSName.getPDFName(""JavaScript""));
            }
        }

        for (PDPage page : document.getPages()) {
            for (PDAnnotation annotation : page.getAnnotations()) {
                if (annotation instanceof PDAnnotationWidget widget) {
                    PDAction action = widget.getAction();
                    if (action instanceof PDActionJavaScript) {
                        widget.setAction(null);
                    }
                }
            }
            PDAcroForm acroForm = document.getDocumentCatalog().getAcroForm();
            if (acroForm != null) {
                for (PDField field : acroForm.getFields()) {
                    PDFormFieldAdditionalActions actions = field.getActions();
                    if (actions != null) {
                        if (actions.getC() instanceof PDActionJavaScript) {
                            actions.setC(null);
                        }
                        if (actions.getF() instanceof PDActionJavaScript) {
                            actions.setF(null);
                        }
                        if (actions.getK() instanceof PDActionJavaScript) {
                            actions.setK(null);
                        }
                        if (actions.getV() instanceof PDActionJavaScript) {
                            actions.setV(null);
                        }
                    }
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java,SanitizeController,sanitizeEmbeddedFiles,void sanitizeEmbeddedFiles(PDDocument),"[148, 157]","{'A233': [(148, 157)]}",{'A233': 1.0},A233,,"    private void sanitizeEmbeddedFiles(PDDocument document) {
        PDPageTree allPages = document.getPages();

        for (PDPage page : allPages) {
            PDResources res = page.getResources();
            if (res != null && res.getCOSObject() != null) {
                res.getCOSObject().removeItem(COSName.getPDFName(""EmbeddedFiles""));
            }
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java,SanitizeController,sanitizeXMPMetadata,void sanitizeXMPMetadata(PDDocument),"[159, 166]","{'A233': [(159, 166)]}",{'A233': 1.0},A233,,"    private void sanitizeXMPMetadata(PDDocument document) {
        if (document.getDocumentCatalog() != null) {
            PDMetadata metadata = document.getDocumentCatalog().getMetadata();
            if (metadata != null) {
                document.getDocumentCatalog().setMetadata(null);
            }
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java,SanitizeController,sanitizeDocumentInfoMetadata,void sanitizeDocumentInfoMetadata(PDDocument),"[168, 174]","{'A233': [(168, 174)]}",{'A233': 1.0},A233,,"    private void sanitizeDocumentInfoMetadata(PDDocument document) {
        PDDocumentInformation docInfo = document.getDocumentInformation();
        if (docInfo != null) {
            PDDocumentInformation newInfo = new PDDocumentInformation();
            document.setDocumentInformation(newInfo);
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java,SanitizeController,sanitizeLinks,void sanitizeLinks(PDDocument),"[176, 189]","{'A233': [(176, 178), (181, 183), (185, 189)], 'A234': [(179, 180), (184, 184)]}","{'A233': 0.7857142857142857, 'A234': 0.21428571428571427}",A233,,"    private void sanitizeLinks(PDDocument document) throws IOException {
        for (PDPage page : document.getPages()) {
            for (PDAnnotation annotation : page.getAnnotations()) {
                if (annotation != null && annotation instanceof PDAnnotationLink linkAnnotation) {
                    PDAction action = linkAnnotation.getAction();
                    if (action != null
                            && (action instanceof PDActionLaunch
                                    || action instanceof PDActionURI)) {
                        linkAnnotation.setAction(null);
                    }
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/SanitizeController.java,SanitizeController,sanitizeFonts,void sanitizeFonts(PDDocument),"[191, 199]","{'A233': [(191, 199)]}",{'A233': 1.0},A233,,"    private void sanitizeFonts(PDDocument document) {
        for (PDPage page : document.getPages()) {
            if (page != null
                    && page.getResources() != null
                    && page.getResources().getCOSObject() != null) {
                page.getResources().getCOSObject().removeItem(COSName.getPDFName(""Font""));
            }
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java,ValidateSignatureController,initBinder,void initBinder(WebDataBinder),"[55, 65]","{'A234': [(55, 65)]}",{'A234': 1.0},A234,,"    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(
                MultipartFile.class,
                new PropertyEditorSupport() {
                    @Override
                    public void setAsText(String text) throws IllegalArgumentException {
                        setValue(null);
                    }
                });
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java,ValidateSignatureController,setAsText,void setAsText(String),"[60, 63]","{'A234': [(60, 63)]}",{'A234': 1.0},A234,,"                    @Override
                    public void setAsText(String text) throws IllegalArgumentException {
                        setValue(null);
                    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java,ValidateSignatureController,validateSignature,ResponseEntity<List<SignatureValidationResult>> validateSignature(SignatureValidationRequest),"[67, 196]","{'A233': [(67, 69), (73, 76), (78, 80), (83, 196)], 'A234': [(70, 72), (77, 77), (81, 82)]}","{'A233': 0.9538461538461539, 'A234': 0.046153846153846156}",A233,,"    @Operation(
            summary = ""Validate PDF Digital Signature"",
            description =
                    ""Validates the digital signatures in a PDF file against default or custom""
                            + "" certificates. Input:PDF Output:JSON Type:SISO"")
    @PostMapping(value = ""/validate-signature"", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<List<SignatureValidationResult>> validateSignature(
            @ModelAttribute SignatureValidationRequest request) throws IOException {
        List<SignatureValidationResult> results = new ArrayList<>();
        MultipartFile file = request.getFileInput();
        MultipartFile certFile = request.getCertFile();

        // Load custom certificate if provided
        X509Certificate customCert = null;
        if (certFile != null && !certFile.isEmpty()) {
            try (ByteArrayInputStream certStream = new ByteArrayInputStream(certFile.getBytes())) {
                CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
                customCert = (X509Certificate) cf.generateCertificate(certStream);
            } catch (CertificateException e) {
                throw ExceptionUtils.createRuntimeException(
                        ""error.invalidFormat"",
                        ""Invalid {0} format: {1}"",
                        e,
                        ""certificate file"",
                        e.getMessage());
            }
        }

        try (PDDocument document = pdfDocumentFactory.load(file.getInputStream())) {
            List<PDSignature> signatures = document.getSignatureDictionaries();

            for (PDSignature sig : signatures) {
                SignatureValidationResult result = new SignatureValidationResult();

                try {
                    byte[] signedContent = sig.getSignedContent(file.getInputStream());
                    byte[] signatureBytes = sig.getContents(file.getInputStream());

                    CMSProcessable content = new CMSProcessableByteArray(signedContent);
                    CMSSignedData signedData = new CMSSignedData(content, signatureBytes);

                    Store<X509CertificateHolder> certStore = signedData.getCertificates();
                    SignerInformationStore signerStore = signedData.getSignerInfos();

                    for (SignerInformation signer : signerStore.getSigners()) {
                        X509CertificateHolder certHolder =
                                (X509CertificateHolder)
                                        certStore.getMatches(signer.getSID()).iterator().next();
                        X509Certificate cert =
                                new JcaX509CertificateConverter().getCertificate(certHolder);

                        boolean isValid =
                                signer.verify(new JcaSimpleSignerInfoVerifierBuilder().build(cert));
                        result.setValid(isValid);

                        // Additional validations
                        result.setChainValid(
                                customCert != null
                                        ? certValidationService
                                                .validateCertificateChainWithCustomCert(
                                                        cert, customCert)
                                        : certValidationService.validateCertificateChain(cert));

                        result.setTrustValid(
                                customCert != null
                                        ? certValidationService.validateTrustWithCustomCert(
                                                cert, customCert)
                                        : certValidationService.validateTrustStore(cert));

                        result.setNotRevoked(!certValidationService.isRevoked(cert));
                        result.setNotExpired(!cert.getNotAfter().before(new Date()));

                        // Set basic signature info
                        result.setSignerName(sig.getName());
                        result.setSignatureDate(sig.getSignDate().getTime().toString());
                        result.setReason(sig.getReason());
                        result.setLocation(sig.getLocation());

                        // Set new certificate details
                        result.setIssuerDN(cert.getIssuerX500Principal().getName());
                        result.setSubjectDN(cert.getSubjectX500Principal().getName());
                        result.setSerialNumber(cert.getSerialNumber().toString(16)); // Hex format
                        result.setValidFrom(cert.getNotBefore().toString());
                        result.setValidUntil(cert.getNotAfter().toString());
                        result.setSignatureAlgorithm(cert.getSigAlgName());

                        // Get key size (if possible)
                        try {
                            result.setKeySize(
                                    ((RSAPublicKey) cert.getPublicKey()).getModulus().bitLength());
                        } catch (Exception e) {
                            // If not RSA or error, set to 0
                            result.setKeySize(0);
                        }

                        result.setVersion(String.valueOf(cert.getVersion()));

                        // Set key usage
                        List<String> keyUsages = new ArrayList<>();
                        boolean[] keyUsageFlags = cert.getKeyUsage();
                        if (keyUsageFlags != null) {
                            String[] keyUsageLabels = {
                                ""Digital Signature"", ""Non-Repudiation"", ""Key Encipherment"",
                                ""Data Encipherment"", ""Key Agreement"", ""Certificate Signing"",
                                ""CRL Signing"", ""Encipher Only"", ""Decipher Only""
                            };
                            for (int i = 0; i < keyUsageFlags.length; i++) {
                                if (keyUsageFlags[i]) {
                                    keyUsages.add(keyUsageLabels[i]);
                                }
                            }
                        }
                        result.setKeyUsages(keyUsages);

                        // Check if self-signed
                        result.setSelfSigned(
                                cert.getSubjectX500Principal()
                                        .equals(cert.getIssuerX500Principal()));
                    }
                } catch (Exception e) {
                    result.setValid(false);
                    result.setErrorMessage(""Signature validation failed: "" + e.getMessage());
                }

                results.add(result);
            }
        }

        return ResponseEntity.ok(results);
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java,CertSignController,initBinder,void initBinder(WebDataBinder),"[91, 101]","{'A234': [(91, 101)]}",{'A234': 1.0},A234,,"    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(
                MultipartFile.class,
                new PropertyEditorSupport() {
                    @Override
                    public void setAsText(String text) throws IllegalArgumentException {
                        setValue(null);
                    }
                });
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java,CertSignController,setAsText,void setAsText(String),"[96, 99]","{'A234': [(96, 99)]}",{'A234': 1.0},A234,,"                    @Override
                    public void setAsText(String text) throws IllegalArgumentException {
                        setValue(null);
                    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java,CertSignController,sign,"void sign(CustomPDFDocumentFactory,MultipartFile,OutputStream,CreateSignature,Boolean,Integer,String,String,String,Boolean)","[105, 139]","{'A233': [(105, 105), (107, 123), (125, 128), (130, 130), (132, 133), (135, 137)], 'A234': [(106, 106), (124, 124)], 'A242': [(129, 129), (131, 131), (134, 134)], 'A246': [(138, 139)]}","{'A233': 0.8, 'A234': 0.05714285714285714, 'A242': 0.08571428571428572, 'A246': 0.05714285714285714}",A233,,"    private static void sign(
            CustomPDFDocumentFactory pdfDocumentFactory,
            MultipartFile input,
            OutputStream output,
            CreateSignature instance,
            Boolean showSignature,
            Integer pageNumber,
            String name,
            String location,
            String reason,
            Boolean showLogo) {
        try (PDDocument doc = pdfDocumentFactory.load(input)) {
            PDSignature signature = new PDSignature();
            signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);
            signature.setSubFilter(PDSignature.SUBFILTER_ADBE_PKCS7_DETACHED);
            signature.setName(name);
            signature.setLocation(location);
            signature.setReason(reason);
            signature.setSignDate(Calendar.getInstance());
            if (Boolean.TRUE.equals(showSignature)) {
                SignatureOptions signatureOptions = new SignatureOptions();
                signatureOptions.setVisualSignature(
                        instance.createVisibleSignature(doc, signature, pageNumber, showLogo));
                signatureOptions.setPage(pageNumber);

                doc.addSignature(signature, instance, signatureOptions);

            } else {
                doc.addSignature(signature, instance);
            }
            doc.saveIncremental(output);
        } catch (Exception e) {
            ExceptionUtils.logException(""PDF signing"", e);
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java,CertSignController,signPDFWithCert,ResponseEntity<byte[]> signPDFWithCert(SignPDFWithCertRequest),"[141, 220]","{'A233': [(147, 149), (151, 159), (161, 161), (163, 165), (169, 176), (186, 186), (197, 200), (202, 202), (205, 213)], 'A234': [(141, 146), (150, 150), (162, 162), (166, 168)], 'A242': [(214, 215)], 'A246': [(160, 160), (177, 185), (187, 196), (201, 201), (203, 204), (217, 220)], 'A236': [(216, 216)]}","{'A233': 0.4875, 'A234': 0.1375, 'A242': 0.025, 'A246': 0.3375, 'A236': 0.0125}",A233,,"    @PostMapping(
            consumes = {
                MediaType.MULTIPART_FORM_DATA_VALUE,
                MediaType.APPLICATION_FORM_URLENCODED_VALUE
            },
            value = ""/cert-sign"")
    @Operation(
            summary = ""Sign PDF with a Digital Certificate"",
            description =
                    ""This endpoint accepts a PDF file, a digital certificate and related""
                            + "" information to sign the PDF. It then returns the digitally signed PDF""
                            + "" file. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertRequest request)
            throws Exception {
        MultipartFile pdf = request.getFileInput();
        String certType = request.getCertType();
        MultipartFile privateKeyFile = request.getPrivateKeyFile();
        MultipartFile certFile = request.getCertFile();
        MultipartFile p12File = request.getP12File();
        MultipartFile jksfile = request.getJksFile();
        String password = request.getPassword();
        Boolean showSignature = request.getShowSignature();
        String reason = request.getReason();
        String location = request.getLocation();
        String name = request.getName();
        // Convert 1-indexed page number (user input) to 0-indexed page number (API requirement)
        Integer pageNumber = request.getPageNumber() != null ? (request.getPageNumber() - 1) : null;
        Boolean showLogo = request.getShowLogo();

        if (StringUtils.isBlank(certType)) {
            throw ExceptionUtils.createIllegalArgumentException(
                    ""error.optionsNotSpecified"",
                    ""{0} options are not specified"",
                    ""certificate type"");
        }

        KeyStore ks = null;

        switch (certType) {
            case ""PEM"":
                ks = KeyStore.getInstance(""JKS"");
                ks.load(null);
                PrivateKey privateKey = getPrivateKeyFromPEM(privateKeyFile.getBytes(), password);
                Certificate cert = (Certificate) getCertificateFromPEM(certFile.getBytes());
                ks.setKeyEntry(
                        ""alias"", privateKey, password.toCharArray(), new Certificate[] {cert});
                break;
            case ""PKCS12"":
                ks = KeyStore.getInstance(""PKCS12"");
                ks.load(p12File.getInputStream(), password.toCharArray());
                break;
            case ""JKS"":
                ks = KeyStore.getInstance(""JKS"");
                ks.load(jksfile.getInputStream(), password.toCharArray());
                break;
            default:
                throw ExceptionUtils.createIllegalArgumentException(
                        ""error.invalidArgument"",
                        ""Invalid argument: {0}"",
                        ""certificate type: "" + certType);
        }

        CreateSignature createSignature = new CreateSignature(ks, password.toCharArray());
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        sign(
                pdfDocumentFactory,
                pdf,
                baos,
                createSignature,
                showSignature,
                pageNumber,
                name,
                location,
                reason,
                showLogo);
        return WebResponseUtils.baosToWebResponse(
                baos,
                Filenames.toSimpleFileName(pdf.getOriginalFilename()).replaceFirst(""[.][^.]+$"", """")
                        + ""_signed.pdf"");
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java,CertSignController,getPrivateKeyFromPEM,"PrivateKey getPrivateKeyFromPEM(byte[],String)","[222, 242]","{'A233': [(224, 225), (230, 231), (234, 235)], 'A234': [(229, 229), (232, 233), (236, 236)], 'A246': [(222, 223), (226, 228), (237, 242)]}","{'A233': 0.2857142857142857, 'A234': 0.19047619047619047, 'A246': 0.5238095238095238}",A246,,"    private PrivateKey getPrivateKeyFromPEM(byte[] pemBytes, String password)
            throws IOException, OperatorCreationException, PKCSException {
        try (PEMParser pemParser =
                new PEMParser(new InputStreamReader(new ByteArrayInputStream(pemBytes)))) {
            Object pemObject = pemParser.readObject();
            JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(""BC"");
            PrivateKeyInfo pkInfo;
            if (pemObject instanceof PKCS8EncryptedPrivateKeyInfo pkcs8EncryptedPrivateKeyInfo) {
                InputDecryptorProvider decProv =
                        new JceOpenSSLPKCS8DecryptorProviderBuilder().build(password.toCharArray());
                pkInfo = pkcs8EncryptedPrivateKeyInfo.decryptPrivateKeyInfo(decProv);
            } else if (pemObject instanceof PEMEncryptedKeyPair pemEncryptedKeyPair) {
                PEMDecryptorProvider decProv =
                        new JcePEMDecryptorProviderBuilder().build(password.toCharArray());
                pkInfo = pemEncryptedKeyPair.decryptKeyPair(decProv).getPrivateKeyInfo();
            } else {
                pkInfo = ((PEMKeyPair) pemObject).getPrivateKeyInfo();
            }
            return converter.getPrivateKey(pkInfo);
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java,CertSignController,getCertificateFromPEM,Certificate getCertificateFromPEM(byte[]),"[244, 249]","{'A246': [(244, 249)]}",{'A246': 1.0},A246,,"    private Certificate getCertificateFromPEM(byte[] pemBytes)
            throws IOException, CertificateException {
        try (ByteArrayInputStream bis = new ByteArrayInputStream(pemBytes)) {
            return CertificateFactory.getInstance(""X.509"").generateCertificate(bis);
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java,CertSignController.CreateSignature,createVisibleSignature,"InputStream createVisibleSignature(PDDocument,PDSignature,Integer,Boolean)","[271, 356]","{'A233': [(271, 310), (312, 356)], 'A234': [(311, 311)]}","{'A233': 0.9883720930232558, 'A234': 0.011627906976744186}",A233,,"        public InputStream createVisibleSignature(
                PDDocument srcDoc, PDSignature signature, Integer pageNumber, Boolean showLogo)
                throws IOException {
            // modified from org.apache.pdfbox.examples.signature.CreateVisibleSignature2
            try (PDDocument doc = new PDDocument()) {
                PDPage page = new PDPage(srcDoc.getPage(pageNumber).getMediaBox());
                doc.addPage(page);
                PDAcroForm acroForm = new PDAcroForm(doc);
                doc.getDocumentCatalog().setAcroForm(acroForm);
                PDSignatureField signatureField = new PDSignatureField(acroForm);
                PDAnnotationWidget widget = signatureField.getWidgets().get(0);
                List<PDField> acroFormFields = acroForm.getFields();
                acroForm.setSignaturesExist(true);
                acroForm.setAppendOnly(true);
                acroForm.getCOSObject().setDirect(true);
                acroFormFields.add(signatureField);

                PDRectangle rect = new PDRectangle(0, 0, 200, 50);

                widget.setRectangle(rect);

                // from PDVisualSigBuilder.createHolderForm()
                PDStream stream = new PDStream(doc);
                PDFormXObject form = new PDFormXObject(stream);
                PDResources res = new PDResources();
                form.setResources(res);
                form.setFormType(1);
                PDRectangle bbox = new PDRectangle(rect.getWidth(), rect.getHeight());
                float height = bbox.getHeight();
                form.setBBox(bbox);
                PDFont font = new PDType1Font(FontName.TIMES_BOLD);

                // from PDVisualSigBuilder.createAppearanceDictionary()
                PDAppearanceDictionary appearance = new PDAppearanceDictionary();
                appearance.getCOSObject().setDirect(true);
                PDAppearanceStream appearanceStream = new PDAppearanceStream(form.getCOSObject());
                appearance.setNormalAppearance(appearanceStream);
                widget.setAppearance(appearance);

                try (PDPageContentStream cs = new PDPageContentStream(doc, appearanceStream)) {
                    if (Boolean.TRUE.equals(showLogo)) {
                        cs.saveGraphicsState();
                        PDExtendedGraphicsState extState = new PDExtendedGraphicsState();
                        extState.setBlendMode(BlendMode.MULTIPLY);
                        extState.setNonStrokingAlphaConstant(0.5f);
                        cs.setGraphicsStateParameters(extState);
                        cs.transform(Matrix.getScaleInstance(0.08f, 0.08f));
                        PDImageXObject img =
                                PDImageXObject.createFromFileByExtension(logoFile, doc);
                        cs.drawImage(img, 100, 0);
                        cs.restoreGraphicsState();
                    }

                    // show text
                    float fontSize = 10;
                    float leading = fontSize * 1.5f;
                    cs.beginText();
                    cs.setFont(font, fontSize);
                    cs.setNonStrokingColor(Color.black);
                    cs.newLineAtOffset(fontSize, height - leading);
                    cs.setLeading(leading);

                    X509Certificate cert = (X509Certificate) getCertificateChain()[0];

                    // https://stackoverflow.com/questions/2914521/
                    X500Name x500Name = new X500Name(cert.getSubjectX500Principal().getName());
                    RDN cn = x500Name.getRDNs(BCStyle.CN)[0];
                    String name = IETFUtils.valueToString(cn.getFirst().getValue());

                    String date = signature.getSignDate().getTime().toString();
                    String reason = signature.getReason();

                    cs.showText(""Signed by "" + name);
                    cs.newLine();
                    cs.showText(date);
                    cs.newLine();
                    cs.showText(reason);

                    cs.endText();
                }

                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                doc.save(baos);
                return new ByteArrayInputStream(baos.toByteArray());
            }
        }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,addOutlinesToArray,"void addOutlinesToArray(PDOutlineItem,ArrayNode)","[80, 93]","{'A233': [(80, 93)]}",{'A233': 1.0},A233,,"    private static void addOutlinesToArray(PDOutlineItem outline, ArrayNode arrayNode) {
        if (outline == null) return;

        ObjectNode outlineNode = objectMapper.createObjectNode();
        outlineNode.put(""Title"", outline.getTitle());
        // You can add other properties if needed
        arrayNode.add(outlineNode);

        PDOutlineItem child = outline.getFirstChild();
        while (child != null) {
            addOutlinesToArray(child, arrayNode);
            child = child.getNextSibling();
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,generatePDFSummaryData,ObjectNode generatePDFSummaryData(PDDocument),"[102, 146]","{'A233': [(102, 146)]}",{'A233': 1.0},A233,,"    private ObjectNode generatePDFSummaryData(PDDocument document) {
        ObjectNode summaryData = objectMapper.createObjectNode();

        // Check if encrypted
        if (document.isEncrypted()) {
            summaryData.put(""encrypted"", true);
        }

        // Check permissions
        AccessPermission ap = document.getCurrentAccessPermission();
        ArrayNode restrictedPermissions = objectMapper.createArrayNode();

        if (!ap.canAssembleDocument()) restrictedPermissions.add(""document assembly"");
        if (!ap.canExtractContent()) restrictedPermissions.add(""content extraction"");
        if (!ap.canExtractForAccessibility()) restrictedPermissions.add(""accessibility extraction"");
        if (!ap.canFillInForm()) restrictedPermissions.add(""form filling"");
        if (!ap.canModify()) restrictedPermissions.add(""modification"");
        if (!ap.canModifyAnnotations()) restrictedPermissions.add(""annotation modification"");
        if (!ap.canPrint()) restrictedPermissions.add(""printing"");

        if (restrictedPermissions.size() > 0) {
            summaryData.set(""restrictedPermissions"", restrictedPermissions);
            summaryData.put(""restrictedPermissionsCount"", restrictedPermissions.size());
        }

        // Check standard compliance
        if (checkForStandard(document, ""PDF/A"")) {
            summaryData.put(""standardCompliance"", ""PDF/A"");
            summaryData.put(""standardPurpose"", ""long-term archiving"");
        } else if (checkForStandard(document, ""PDF/X"")) {
            summaryData.put(""standardCompliance"", ""PDF/X"");
            summaryData.put(""standardPurpose"", ""graphic exchange"");
        } else if (checkForStandard(document, ""PDF/UA"")) {
            summaryData.put(""standardCompliance"", ""PDF/UA"");
            summaryData.put(""standardPurpose"", ""universal accessibility"");
        } else if (checkForStandard(document, ""PDF/E"")) {
            summaryData.put(""standardCompliance"", ""PDF/E"");
            summaryData.put(""standardPurpose"", ""engineering workflows"");
        } else if (checkForStandard(document, ""PDF/VT"")) {
            summaryData.put(""standardCompliance"", ""PDF/VT"");
            summaryData.put(""standardPurpose"", ""variable and transactional printing"");
        }

        return summaryData;
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,checkForStandard,"boolean checkForStandard(PDDocument,String)","[148, 189]","{'A233': [(148, 189)]}",{'A233': 1.0},A233,,"    public static boolean checkForStandard(PDDocument document, String standardKeyword) {
        // Check XMP Metadata
        try {
            PDMetadata pdMetadata = document.getDocumentCatalog().getMetadata();
            if (pdMetadata != null) {
                try (COSInputStream metaStream = pdMetadata.createInputStream()) {
                    // First try to read raw metadata as string to check for standard keywords
                    byte[] metadataBytes = metaStream.readAllBytes();
                    String rawMetadata = new String(metadataBytes, StandardCharsets.UTF_8);

                    if (rawMetadata.contains(standardKeyword)) {
                        return true;
                    }
                }

                // If raw check doesn't find it, try parsing with XMP parser
                try (COSInputStream metaStream = pdMetadata.createInputStream()) {
                    try {
                        DomXmpParser domXmpParser = new DomXmpParser();
                        XMPMetadata xmpMeta = domXmpParser.parse(metaStream);

                        ByteArrayOutputStream baos = new ByteArrayOutputStream();
                        new XmpSerializer().serialize(xmpMeta, baos, true);
                        String xmpString = new String(baos.toByteArray(), StandardCharsets.UTF_8);

                        if (xmpString.contains(standardKeyword)) {
                            return true;
                        }
                    } catch (XmpParsingException e) {
                        // XMP parsing failed, but we already checked raw metadata above
                        log.debug(
                                ""XMP parsing failed for standard check, but raw metadata was already checked: {}"",
                                e.getMessage());
                    }
                }
            }
        } catch (Exception e) {
            ExceptionUtils.logException(""PDF standard checking"", e);
        }

        return false;
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,getPdfInfo,ResponseEntity<byte[]> getPdfInfo(PDFFile),"[191, 701]","{'A233': [(191, 194), (197, 297), (299, 333), (335, 366), (368, 426), (428, 444), (448, 525), (527, 548), (551, 625), (627, 683), (685, 697), (699, 701)], 'A238': [(334, 334), (367, 367), (427, 427), (698, 698)], 'A234': [(298, 298), (526, 526), (549, 550), (626, 626)], 'A278': [(195, 196)], 'A256': [(445, 447), (684, 684)]}","{'A233': 0.9706457925636007, 'A238': 0.007827788649706457, 'A234': 0.009784735812133072, 'A278': 0.003913894324853229, 'A256': 0.007827788649706457}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/get-info-on-pdf"")
    @Operation(summary = ""Summary here"", description = ""desc. Input:PDF Output:JSON Type:SISO"")
    public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {
        MultipartFile inputFile = request.getFileInput();
        boolean readonly = true;
        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly); ) {
            ObjectMapper objectMapper = new ObjectMapper();
            ObjectNode jsonOutput = objectMapper.createObjectNode();

            // Metadata using PDFBox
            PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();
            ObjectNode metadata = objectMapper.createObjectNode();
            ObjectNode basicInfo = objectMapper.createObjectNode();
            ObjectNode docInfoNode = objectMapper.createObjectNode();
            ObjectNode compliancy = objectMapper.createObjectNode();
            ObjectNode encryption = objectMapper.createObjectNode();
            ObjectNode other = objectMapper.createObjectNode();

            metadata.put(""Title"", info.getTitle());
            metadata.put(""Author"", info.getAuthor());
            metadata.put(""Subject"", info.getSubject());
            metadata.put(""Keywords"", info.getKeywords());
            metadata.put(""Producer"", info.getProducer());
            metadata.put(""Creator"", info.getCreator());
            metadata.put(""CreationDate"", formatDate(info.getCreationDate()));
            metadata.put(""ModificationDate"", formatDate(info.getModificationDate()));
            jsonOutput.set(""Metadata"", metadata);

            // Total file size of the PDF
            long fileSizeInBytes = inputFile.getSize();
            basicInfo.put(""FileSizeInBytes"", fileSizeInBytes);

            // Number of words, paragraphs, and images in the entire document
            String fullText = new PDFTextStripper().getText(pdfBoxDoc);
            String[] words = fullText.split(""\\s+"");
            int wordCount = words.length;
            int paragraphCount = fullText.split(""\r\n|\r|\n"").length;
            basicInfo.put(""WordCount"", wordCount);
            basicInfo.put(""ParagraphCount"", paragraphCount);
            // Number of characters in the entire document (including spaces and special characters)
            int charCount = fullText.length();
            basicInfo.put(""CharacterCount"", charCount);

            // Initialize the flags and types
            boolean hasCompression = false;
            String compressionType = ""None"";

            basicInfo.put(""Compression"", hasCompression);
            if (hasCompression) basicInfo.put(""CompressionType"", compressionType);

            String language = pdfBoxDoc.getDocumentCatalog().getLanguage();
            basicInfo.put(""Language"", language);
            basicInfo.put(""Number of pages"", pdfBoxDoc.getNumberOfPages());

            PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();
            String pageMode = catalog.getPageMode().name();

            // Document Information using PDFBox
            docInfoNode.put(""PDF version"", pdfBoxDoc.getVersion());
            docInfoNode.put(""Trapped"", info.getTrapped());
            docInfoNode.put(""Page Mode"", getPageModeDescription(pageMode));
            ;

            PDAcroForm acroForm = pdfBoxDoc.getDocumentCatalog().getAcroForm();

            ObjectNode formFieldsNode = objectMapper.createObjectNode();
            if (acroForm != null) {
                for (PDField field : acroForm.getFieldTree()) {
                    formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());
                }
            }
            jsonOutput.set(""FormFields"", formFieldsNode);

            // Generate structured summary data about PDF characteristics
            ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);
            if (summaryData != null && summaryData.size() > 0) {
                jsonOutput.set(""SummaryData"", summaryData);
            }

            // embeed files TODO size
            if (catalog.getNames() != null) {
                PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();

                ArrayNode embeddedFilesArray = objectMapper.createArrayNode();
                if (efTree != null) {
                    Map<String, PDComplexFileSpecification> efMap = efTree.getNames();
                    if (efMap != null) {
                        for (Map.Entry<String, PDComplexFileSpecification> entry :
                                efMap.entrySet()) {
                            ObjectNode embeddedFileNode = objectMapper.createObjectNode();
                            embeddedFileNode.put(""Name"", entry.getKey());
                            PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();
                            if (embeddedFile != null) {
                                embeddedFileNode.put(
                                        ""FileSize"", embeddedFile.getLength()); // size in bytes
                            }
                            embeddedFilesArray.add(embeddedFileNode);
                        }
                    }
                }
                other.set(""EmbeddedFiles"", embeddedFilesArray);
            }

            // attachments TODO size
            ArrayNode attachmentsArray = objectMapper.createArrayNode();
            for (PDPage page : pdfBoxDoc.getPages()) {
                for (PDAnnotation annotation : page.getAnnotations()) {
                    if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {
                        ObjectNode attachmentNode = objectMapper.createObjectNode();
                        attachmentNode.put(""Name"", fileAttachmentAnnotation.getAttachmentName());
                        attachmentNode.put(""Description"", fileAttachmentAnnotation.getContents());

                        attachmentsArray.add(attachmentNode);
                    }
                }
            }
            other.set(""Attachments"", attachmentsArray);

            // Javascript
            PDDocumentNameDictionary namesDict = catalog.getNames();
            ArrayNode javascriptArray = objectMapper.createArrayNode();

            if (namesDict != null) {
                PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();
                if (javascriptDict != null) {
                    try {
                        Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();

                        for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {
                            ObjectNode jsNode = objectMapper.createObjectNode();
                            jsNode.put(""JS Name"", entry.getKey());

                            PDActionJavaScript jsAction = entry.getValue();
                            if (jsAction != null) {
                                String jsCodeStr = jsAction.getAction();
                                if (jsCodeStr != null) {
                                    jsNode.put(""JS Script Length"", jsCodeStr.length());
                                }
                            }

                            javascriptArray.add(jsNode);
                        }
                    } catch (IOException e) {
                        log.error(""exception"", e);
                    }
                }
            }
            other.set(""JavaScript"", javascriptArray);

            // TODO size
            PDOptionalContentProperties ocProperties =
                    pdfBoxDoc.getDocumentCatalog().getOCProperties();
            ArrayNode layersArray = objectMapper.createArrayNode();

            if (ocProperties != null) {
                for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {
                    ObjectNode layerNode = objectMapper.createObjectNode();
                    layerNode.put(""Name"", ocg.getName());
                    layersArray.add(layerNode);
                }
            }

            other.set(""Layers"", layersArray);

            // TODO Security

            PDStructureTreeRoot structureTreeRoot =
                    pdfBoxDoc.getDocumentCatalog().getStructureTreeRoot();
            ArrayNode structureTreeArray;
            try {
                if (structureTreeRoot != null) {
                    structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());
                    other.set(""StructureTree"", structureTreeArray);
                }
            } catch (Exception e) {
                // TODO Auto-generated catch block
                log.error(""exception"", e);
            }

            boolean isPdfACompliant = checkForStandard(pdfBoxDoc, ""PDF/A"");
            boolean isPdfXCompliant = checkForStandard(pdfBoxDoc, ""PDF/X"");
            boolean isPdfECompliant = checkForStandard(pdfBoxDoc, ""PDF/E"");
            boolean isPdfVTCompliant = checkForStandard(pdfBoxDoc, ""PDF/VT"");
            boolean isPdfUACompliant = checkForStandard(pdfBoxDoc, ""PDF/UA"");
            boolean isPdfBCompliant =
                    checkForStandard(
                            pdfBoxDoc,
                            ""PDF/B""); // If you want to check for PDF/Broadcast, though this isn't
            // an official ISO standard.
            boolean isPdfSECCompliant =
                    checkForStandard(
                            pdfBoxDoc,
                            ""PDF/SEC""); // This might not be effective since PDF/SEC was under
            // development in 2021.

            compliancy.put(""IsPDF/ACompliant"", isPdfACompliant);
            compliancy.put(""IsPDF/XCompliant"", isPdfXCompliant);
            compliancy.put(""IsPDF/ECompliant"", isPdfECompliant);
            compliancy.put(""IsPDF/VTCompliant"", isPdfVTCompliant);
            compliancy.put(""IsPDF/UACompliant"", isPdfUACompliant);
            compliancy.put(""IsPDF/BCompliant"", isPdfBCompliant);
            compliancy.put(""IsPDF/SECCompliant"", isPdfSECCompliant);

            PDOutlineNode root = pdfBoxDoc.getDocumentCatalog().getDocumentOutline();
            ArrayNode bookmarksArray = objectMapper.createArrayNode();

            if (root != null) {
                for (PDOutlineItem child : root.children()) {
                    addOutlinesToArray(child, bookmarksArray);
                }
            }

            other.set(""Bookmarks/Outline/TOC"", bookmarksArray);

            PDMetadata pdMetadata = pdfBoxDoc.getDocumentCatalog().getMetadata();

            String xmpString = null;

            if (pdMetadata != null) {
                try {
                    try (COSInputStream is = pdMetadata.createInputStream()) {
                        DomXmpParser domXmpParser = new DomXmpParser();
                        XMPMetadata xmpMeta = domXmpParser.parse(is);

                        ByteArrayOutputStream os = new ByteArrayOutputStream();
                        new XmpSerializer().serialize(xmpMeta, os, true);
                        xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);
                    }
                } catch (XmpParsingException e) {
                    // XMP parsing failed, try to read raw metadata instead
                    log.debug(""XMP parsing failed, reading raw metadata: {}"", e.getMessage());
                    try (COSInputStream is = pdMetadata.createInputStream()) {
                        byte[] metadataBytes = is.readAllBytes();
                        xmpString = new String(metadataBytes, StandardCharsets.UTF_8);
                    }
                } catch (IOException e) {
                    log.error(""exception"", e);
                }
            }

            other.put(""XMPMetadata"", xmpString);

            if (pdfBoxDoc.isEncrypted()) {
                encryption.put(""IsEncrypted"", true);

                // Retrieve encryption details using getEncryption()
                PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();
                encryption.put(""EncryptionAlgorithm"", pdfEncryption.getFilter());
                encryption.put(""KeyLength"", pdfEncryption.getLength());
                // Add other encryption-related properties as needed
            } else {
                encryption.put(""IsEncrypted"", false);
            }

            ObjectNode permissionsNode = objectMapper.createObjectNode();
            setNodePermissions(pdfBoxDoc, permissionsNode);

            ObjectNode pageInfoParent = objectMapper.createObjectNode();
            for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {
                ObjectNode pageInfo = objectMapper.createObjectNode();

                // Retrieve the page
                PDPage page = pdfBoxDoc.getPage(pageNum);

                // Page-level Information
                PDRectangle mediaBox = page.getMediaBox();

                float width = mediaBox.getWidth();
                float height = mediaBox.getHeight();

                ObjectNode sizeInfo = objectMapper.createObjectNode();

                getDimensionInfo(sizeInfo, width, height);

                sizeInfo.put(""Standard Page"", getPageSize(width, height));
                pageInfo.set(""Size"", sizeInfo);

                pageInfo.put(""Rotation"", page.getRotation());
                pageInfo.put(""Page Orientation"", getPageOrientation(width, height));

                // Boxes
                pageInfo.put(""MediaBox"", mediaBox.toString());

                // Assuming the following boxes are defined for your document; if not, you may get
                // null values.
                PDRectangle cropBox = page.getCropBox();
                pageInfo.put(""CropBox"", cropBox == null ? ""Undefined"" : cropBox.toString());

                PDRectangle bleedBox = page.getBleedBox();
                pageInfo.put(""BleedBox"", bleedBox == null ? ""Undefined"" : bleedBox.toString());

                PDRectangle trimBox = page.getTrimBox();
                pageInfo.put(""TrimBox"", trimBox == null ? ""Undefined"" : trimBox.toString());

                PDRectangle artBox = page.getArtBox();
                pageInfo.put(""ArtBox"", artBox == null ? ""Undefined"" : artBox.toString());

                // Content Extraction
                PDFTextStripper textStripper = new PDFTextStripper();
                textStripper.setStartPage(pageNum + 1);
                textStripper.setEndPage(pageNum + 1);
                String pageText = textStripper.getText(pdfBoxDoc);

                pageInfo.put(""Text Characters Count"", pageText.length()); //

                // Annotations

                List<PDAnnotation> annotations = page.getAnnotations();

                int subtypeCount = 0;
                int contentsCount = 0;

                for (PDAnnotation annotation : annotations) {
                    if (annotation.getSubtype() != null) {
                        subtypeCount++; // Increase subtype count
                    }
                    if (annotation.getContents() != null) {
                        contentsCount++; // Increase contents count
                    }
                }

                ObjectNode annotationsObject = objectMapper.createObjectNode();
                annotationsObject.put(""AnnotationsCount"", annotations.size());
                annotationsObject.put(""SubtypeCount"", subtypeCount);
                annotationsObject.put(""ContentsCount"", contentsCount);
                pageInfo.set(""Annotations"", annotationsObject);

                // Images (simplified)
                // This part is non-trivial as images can be embedded in multiple ways in a PDF.
                // Here is a basic structure to recognize image XObjects on a page.
                ArrayNode imagesArray = objectMapper.createArrayNode();
                PDResources resources = page.getResources();

                for (COSName name : resources.getXObjectNames()) {
                    PDXObject xObject = resources.getXObject(name);
                    if (xObject instanceof PDImageXObject image) {
                        ObjectNode imageNode = objectMapper.createObjectNode();
                        imageNode.put(""Width"", image.getWidth());
                        imageNode.put(""Height"", image.getHeight());
                        if (image.getMetadata() != null
                                && image.getMetadata().getFile() != null
                                && image.getMetadata().getFile().getFile() != null) {
                            imageNode.put(""Name"", image.getMetadata().getFile().getFile());
                        }
                        if (image.getColorSpace() != null) {
                            imageNode.put(""ColorSpace"", image.getColorSpace().getName());
                        }

                        imagesArray.add(imageNode);
                    }
                }
                pageInfo.set(""Images"", imagesArray);

                // Links
                ArrayNode linksArray = objectMapper.createArrayNode();
                Set<String> uniqueURIs = new HashSet<>(); // To store unique URIs

                for (PDAnnotation annotation : annotations) {
                    if (annotation instanceof PDAnnotationLink linkAnnotation) {
                        if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {
                            String uri = uriAction.getURI();
                            uniqueURIs.add(uri); // Add to set to ensure uniqueness
                        }
                    }
                }

                // Add unique URIs to linksArray
                for (String uri : uniqueURIs) {
                    ObjectNode linkNode = objectMapper.createObjectNode();
                    linkNode.put(""URI"", uri);
                    linksArray.add(linkNode);
                }
                pageInfo.set(""Links"", linksArray);

                // Fonts
                ArrayNode fontsArray = objectMapper.createArrayNode();
                Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();

                for (COSName fontName : resources.getFontNames()) {
                    PDFont font = resources.getFont(fontName);
                    ObjectNode fontNode = objectMapper.createObjectNode();

                    fontNode.put(""IsEmbedded"", font.isEmbedded());

                    // PDFBox provides Font's BaseFont (i.e., the font name) directly
                    fontNode.put(""Name"", font.getName());

                    fontNode.put(""Subtype"", font.getType());

                    PDFontDescriptor fontDescriptor = font.getFontDescriptor();

                    if (fontDescriptor != null) {
                        fontNode.put(""ItalicAngle"", fontDescriptor.getItalicAngle());
                        int flags = fontDescriptor.getFlags();
                        fontNode.put(""IsItalic"", (flags & 1) != 0);
                        fontNode.put(""IsBold"", (flags & 64) != 0);
                        fontNode.put(""IsFixedPitch"", (flags & 2) != 0);
                        fontNode.put(""IsSerif"", (flags & 4) != 0);
                        fontNode.put(""IsSymbolic"", (flags & 8) != 0);
                        fontNode.put(""IsScript"", (flags & 16) != 0);
                        fontNode.put(""IsNonsymbolic"", (flags & 32) != 0);

                        fontNode.put(""FontFamily"", fontDescriptor.getFontFamily());
                        // Font stretch and BBox are not directly available in PDFBox's API, so
                        // these are omitted for simplicity
                        fontNode.put(""FontWeight"", fontDescriptor.getFontWeight());
                    }

                    // Create a unique key for this font node based on its attributes
                    String uniqueKey = fontNode.toString();

                    // Increment count if this font exists, or initialize it if new
                    if (uniqueFontsMap.containsKey(uniqueKey)) {
                        ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);
                        int count = existingFontNode.get(""Count"").asInt() + 1;
                        existingFontNode.put(""Count"", count);
                    } else {
                        fontNode.put(""Count"", 1);
                        uniqueFontsMap.put(uniqueKey, fontNode);
                    }
                }

                // Add unique font entries to fontsArray
                for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {
                    fontsArray.add(uniqueFontNode);
                }

                pageInfo.set(""Fonts"", fontsArray);

                // Access resources dictionary
                ArrayNode colorSpacesArray = objectMapper.createArrayNode();

                Iterable<COSName> colorSpaceNames = resources.getColorSpaceNames();
                for (COSName name : colorSpaceNames) {
                    PDColorSpace colorSpace = resources.getColorSpace(name);
                    if (colorSpace instanceof PDICCBased iccBased) {
                        PDStream iccData = iccBased.getPDStream();
                        byte[] iccBytes = iccData.toByteArray();

                        // TODO: Further decode and analyze the ICC data if needed
                        ObjectNode iccProfileNode = objectMapper.createObjectNode();
                        iccProfileNode.put(""ICC Profile Length"", iccBytes.length);
                        colorSpacesArray.add(iccProfileNode);
                    }
                }
                pageInfo.set(""Color Spaces & ICC Profiles"", colorSpacesArray);

                // Other XObjects
                Map<String, Integer> xObjectCountMap =
                        new HashMap<>(); // To store the count for each type
                for (COSName name : resources.getXObjectNames()) {
                    PDXObject xObject = resources.getXObject(name);
                    String xObjectType;

                    if (xObject instanceof PDImageXObject) {
                        xObjectType = ""Image"";
                    } else if (xObject instanceof PDFormXObject) {
                        xObjectType = ""Form"";
                    } else {
                        xObjectType = ""Other"";
                    }

                    // Increment the count for this type in the map
                    xObjectCountMap.put(
                            xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);
                }

                // Add the count map to pageInfo (or wherever you want to store it)
                ObjectNode xObjectCountNode = objectMapper.createObjectNode();
                for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {
                    xObjectCountNode.put(entry.getKey(), entry.getValue());
                }
                pageInfo.set(""XObjectCounts"", xObjectCountNode);

                ArrayNode multimediaArray = objectMapper.createArrayNode();

                for (PDAnnotation annotation : annotations) {
                    if (""RichMedia"".equals(annotation.getSubtype())) {
                        ObjectNode multimediaNode = objectMapper.createObjectNode();
                        // Extract details from the annotation as needed
                        multimediaArray.add(multimediaNode);
                    }
                }

                pageInfo.set(""Multimedia"", multimediaArray);

                pageInfoParent.set(""Page "" + (pageNum + 1), pageInfo);
            }

            jsonOutput.set(""BasicInfo"", basicInfo);
            jsonOutput.set(""DocumentInfo"", docInfoNode);
            jsonOutput.set(""Compliancy"", compliancy);
            jsonOutput.set(""Encryption"", encryption);
            jsonOutput.set(""Permissions"", permissionsNode); // set the node under ""Permissions""
            jsonOutput.set(""Other"", other);
            jsonOutput.set(""PerPageInfo"", pageInfoParent);

            // Save JSON to file
            String jsonString =
                    objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);

            return WebResponseUtils.bytesToWebResponse(
                    jsonString.getBytes(StandardCharsets.UTF_8),
                    ""response.json"",
                    MediaType.APPLICATION_JSON);

        } catch (Exception e) {
            log.error(""exception"", e);
        }
        return null;
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,setNodePermissions,"void setNodePermissions(PDDocument,ObjectNode)","[703, 715]","{'A233': [(708, 710)], 'A256': [(703, 707), (711, 715)]}","{'A233': 0.23076923076923078, 'A256': 0.7692307692307693}",A256,,"    private void setNodePermissions(PDDocument pdfBoxDoc, ObjectNode permissionsNode) {
        AccessPermission ap = pdfBoxDoc.getCurrentAccessPermission();

        permissionsNode.put(""Document Assembly"", getPermissionState(ap.canAssembleDocument()));
        permissionsNode.put(""Extracting Content"", getPermissionState(ap.canExtractContent()));
        permissionsNode.put(
                ""Extracting for accessibility"",
                getPermissionState(ap.canExtractForAccessibility()));
        permissionsNode.put(""Form Filling"", getPermissionState(ap.canFillInForm()));
        permissionsNode.put(""Modifying"", getPermissionState(ap.canModify()));
        permissionsNode.put(""Modifying annotations"", getPermissionState(ap.canModifyAnnotations()));
        permissionsNode.put(""Printing"", getPermissionState(ap.canPrint()));
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,getPermissionState,String getPermissionState(boolean),"[717, 719]","{'A256': [(717, 719)]}",{'A256': 1.0},A256,,"    private String getPermissionState(boolean state) {
        return state ? ""Allowed"" : ""Not Allowed"";
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,getPageOrientation,"String getPageOrientation(double,double)","[721, 729]","{'A233': [(721, 729)]}",{'A233': 1.0},A233,,"    public String getPageOrientation(double width, double height) {
        if (width > height) {
            return ""Landscape"";
        } else if (height > width) {
            return ""Portrait"";
        } else {
            return ""Square"";
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,getPageSize,"String getPageSize(float,float)","[731, 751]","{'A233': [(731, 751)]}",{'A233': 1.0},A233,,"    public String getPageSize(float width, float height) {
        // Define standard page sizes
        Map<String, PDRectangle> standardSizes = new HashMap<>();
        standardSizes.put(""Letter"", PDRectangle.LETTER);
        standardSizes.put(""LEGAL"", PDRectangle.LEGAL);
        standardSizes.put(""A0"", PDRectangle.A0);
        standardSizes.put(""A1"", PDRectangle.A1);
        standardSizes.put(""A2"", PDRectangle.A2);
        standardSizes.put(""A3"", PDRectangle.A3);
        standardSizes.put(""A4"", PDRectangle.A4);
        standardSizes.put(""A5"", PDRectangle.A5);
        standardSizes.put(""A6"", PDRectangle.A6);

        for (Map.Entry<String, PDRectangle> entry : standardSizes.entrySet()) {
            PDRectangle size = entry.getValue();
            if (isCloseToSize(width, height, size.getWidth(), size.getHeight())) {
                return entry.getKey();
            }
        }
        return ""Custom"";
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,isCloseToSize,"boolean isCloseToSize(float,float,float,float)","[753, 758]","{'A233': [(753, 758)]}",{'A233': 1.0},A233,,"    private boolean isCloseToSize(
            float width, float height, float standardWidth, float standardHeight) {
        float tolerance = 1.0f; // You can adjust the tolerance as needed
        return Math.abs(width - standardWidth) <= tolerance
                && Math.abs(height - standardHeight) <= tolerance;
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,getDimensionInfo,"ObjectNode getDimensionInfo(ObjectNode,float,float)","[760, 776]","{'A233': [(760, 776)]}",{'A233': 1.0},A233,,"    public ObjectNode getDimensionInfo(ObjectNode dimensionInfo, float width, float height) {
        float ppi = 72; // Points Per Inch

        float widthInInches = width / ppi;
        float heightInInches = height / ppi;

        float widthInCm = widthInInches * 2.54f;
        float heightInCm = heightInInches * 2.54f;

        dimensionInfo.put(""Width (px)"", String.format(""%.2f"", width));
        dimensionInfo.put(""Height (px)"", String.format(""%.2f"", height));
        dimensionInfo.put(""Width (in)"", String.format(""%.2f"", widthInInches));
        dimensionInfo.put(""Height (in)"", String.format(""%.2f"", heightInInches));
        dimensionInfo.put(""Width (cm)"", String.format(""%.2f"", widthInCm));
        dimensionInfo.put(""Height (cm)"", String.format(""%.2f"", heightInCm));
        return dimensionInfo;
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,exploreStructureTree,ArrayNode exploreStructureTree(List<Object>),"[778, 800]","{'A233': [(778, 781), (783, 784), (786, 800)], 'A234': [(782, 782), (785, 785)]}","{'A233': 0.9130434782608695, 'A234': 0.08695652173913043}",A233,,"    public ArrayNode exploreStructureTree(List<Object> nodes) {
        ArrayNode elementsArray = objectMapper.createArrayNode();
        if (nodes != null) {
            for (Object obj : nodes) {
                if (obj instanceof PDStructureNode node) {
                    ObjectNode elementNode = objectMapper.createObjectNode();

                    if (node instanceof PDStructureElement structureElement) {
                        elementNode.put(""Type"", structureElement.getStructureType());
                        elementNode.put(""Content"", getContent(structureElement));

                        // Recursively explore child elements
                        ArrayNode childElements = exploreStructureTree(structureElement.getKids());
                        if (childElements.size() > 0) {
                            elementNode.set(""Children"", childElements);
                        }
                    }
                    elementsArray.add(elementNode);
                }
            }
        }
        return elementsArray;
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,getContent,String getContent(PDStructureElement),"[802, 816]","{'A233': [(802, 805), (807, 816)], 'A234': [(806, 806)]}","{'A233': 0.9333333333333333, 'A234': 0.06666666666666667}",A233,,"    public String getContent(PDStructureElement structureElement) {
        StringBuilder contentBuilder = new StringBuilder();

        for (Object item : structureElement.getKids()) {
            if (item instanceof COSString cosString) {
                contentBuilder.append(cosString.getString());
            } else if (item instanceof PDStructureElement) {
                // For simplicity, we're handling only COSString and PDStructureElement here
                // but a more comprehensive method would handle other types too
                contentBuilder.append(getContent((PDStructureElement) item));
            }
        }

        return contentBuilder.toString();
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,formatDate,String formatDate(Calendar),"[818, 825]","{'A233': [(818, 825)]}",{'A233': 1.0},A233,,"    private String formatDate(Calendar calendar) {
        if (calendar != null) {
            SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
            return sdf.format(calendar.getTime());
        } else {
            return null;
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java,GetInfoOnPDF,getPageModeDescription,String getPageModeDescription(String),"[827, 829]","{'A233': [(827, 829)]}",{'A233': 1.0},A233,,"    private String getPageModeDescription(String pageMode) {
        return pageMode != null ? pageMode.toString().replaceFirst(""/"", """") : ""Unknown"";
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java,WatermarkController,initBinder,void initBinder(WebDataBinder),"[55, 65]","{'A234': [(55, 65)]}",{'A234': 1.0},A234,,"    @InitBinder
    public void initBinder(WebDataBinder binder) {
        binder.registerCustomEditor(
                MultipartFile.class,
                new PropertyEditorSupport() {
                    @Override
                    public void setAsText(String text) throws IllegalArgumentException {
                        setValue(null);
                    }
                });
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java,WatermarkController,setAsText,void setAsText(String),"[60, 63]","{'A234': [(60, 63)]}",{'A234': 1.0},A234,,"                    @Override
                    public void setAsText(String text) throws IllegalArgumentException {
                        setValue(null);
                    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java,WatermarkController,addWatermark,ResponseEntity<byte[]> addWatermark(AddWatermarkRequest),"[67, 154]","{'A233': [(67, 70), (74, 76), (81, 83), (90, 95), (98, 114), (116, 124), (128, 142), (149, 150), (154, 154)], 'A234': [(71, 73), (97, 97)], 'A243': [(115, 115), (127, 127)], 'A267': [(77, 80), (84, 89)], 'A268': [(96, 96), (125, 126)], 'A259': [(143, 148)], 'A246': [(151, 153)]}","{'A233': 0.6818181818181818, 'A234': 0.045454545454545456, 'A243': 0.022727272727272728, 'A267': 0.11363636363636363, 'A268': 0.03409090909090909, 'A259': 0.06818181818181818, 'A246': 0.03409090909090909}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/add-watermark"")
    @Operation(
            summary = ""Add watermark to a PDF file"",
            description =
                    ""This endpoint adds a watermark to a given PDF file. Users can specify the""
                            + "" watermark type (text or image), rotation, opacity, width spacer, and""
                            + "" height spacer. Input:PDF Output:PDF Type:SISO"")
    public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest request)
            throws IOException, Exception {
        MultipartFile pdfFile = request.getFileInput();
        String pdfFileName = pdfFile.getOriginalFilename();
        if (pdfFileName != null && (pdfFileName.contains("".."") || pdfFileName.startsWith(""/""))) {
            throw new SecurityException(""Invalid file path in pdfFile"");
        }
        String watermarkType = request.getWatermarkType();
        String watermarkText = request.getWatermarkText();
        MultipartFile watermarkImage = request.getWatermarkImage();
        if (watermarkImage != null) {
            String watermarkImageFileName = watermarkImage.getOriginalFilename();
            if (watermarkImageFileName != null && (watermarkImageFileName.contains("".."") || watermarkImageFileName.startsWith(""/""))) {
                throw new SecurityException(""Invalid file path in watermarkImage"");
            }
        }
        String alphabet = request.getAlphabet();
        float fontSize = request.getFontSize();
        float rotation = request.getRotation();
        float opacity = request.getOpacity();
        int widthSpacer = request.getWidthSpacer();
        int heightSpacer = request.getHeightSpacer();
        String customColor = request.getCustomColor();
        boolean convertPdfToImage = Boolean.TRUE.equals(request.getConvertPDFToImage());

        // Load the input PDF
        PDDocument document = pdfDocumentFactory.load(pdfFile);

        // Create a page in the document
        for (PDPage page : document.getPages()) {

            // Get the page's content stream
            PDPageContentStream contentStream =
                    new PDPageContentStream(
                            document, page, PDPageContentStream.AppendMode.APPEND, true, true);

            // Set transparency
            PDExtendedGraphicsState graphicsState = new PDExtendedGraphicsState();
            graphicsState.setNonStrokingAlphaConstant(opacity);
            contentStream.setGraphicsStateParameters(graphicsState);

            if (""text"".equalsIgnoreCase(watermarkType)) {
                addTextWatermark(
                        contentStream,
                        watermarkText,
                        document,
                        page,
                        rotation,
                        widthSpacer,
                        heightSpacer,
                        fontSize,
                        alphabet,
                        customColor);
            } else if (""image"".equalsIgnoreCase(watermarkType)) {
                addImageWatermark(
                        contentStream,
                        watermarkImage,
                        document,
                        page,
                        rotation,
                        widthSpacer,
                        heightSpacer,
                        fontSize);
            }

            // Close the content stream
            contentStream.close();
        }

        if (convertPdfToImage) {
            PDDocument convertedPdf = PdfUtils.convertPdfToPdfImage(document);
            document.close();
            document = convertedPdf;
        }

        return WebResponseUtils.pdfDocToWebResponse(
                document,
                Filenames.toSimpleFileName(pdfFile.getOriginalFilename())
                                .replaceFirst(""[.][^.]+$"", """")
                        + ""_watermarked.pdf"");
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java,WatermarkController,addTextWatermark,"void addTextWatermark(PDPageContentStream,String,PDDocument,PDPage,float,int,int,float,String,String)","[156, 266]","{'A233': [(156, 164), (167, 182), (186, 191), (193, 194), (196, 205), (218, 218), (226, 226), (229, 230), (244, 244), (247, 248), (251, 254), (263, 266)], 'A234': [(232, 232), (243, 243)], 'A243': [(192, 192), (195, 195)], 'A268': [(165, 166), (206, 217)], 'A246': [(219, 225), (227, 228), (257, 262)], 'A248': [(183, 185)], 'A279': [(231, 231), (233, 242), (245, 246), (249, 250), (255, 256)]}","{'A233': 0.5225225225225225, 'A234': 0.018018018018018018, 'A243': 0.018018018018018018, 'A268': 0.12612612612612611, 'A246': 0.13513513513513514, 'A248': 0.02702702702702703, 'A279': 0.15315315315315314}",A233,,"    private void addTextWatermark(
            PDPageContentStream contentStream,
            String watermarkText,
            PDDocument document,
            PDPage page,
            float rotation,
            int widthSpacer,
            int heightSpacer,
            float fontSize,
            String alphabet,
            String colorString)
            throws IOException {
        String resourceDir = """";
        PDFont font = new PDType1Font(Standard14Fonts.FontName.HELVETICA);
        switch (alphabet) {
            case ""arabic"":
                resourceDir = ""static/fonts/NotoSansArabic-Regular.ttf"";
                break;
            case ""japanese"":
                resourceDir = ""static/fonts/Meiryo.ttf"";
                break;
            case ""korean"":
                resourceDir = ""static/fonts/malgun.ttf"";
                break;
            case ""chinese"":
                resourceDir = ""static/fonts/SimSun.ttf"";
                break;
            case ""thai"":
                resourceDir = ""static/fonts/NotoSansThai-Regular.ttf"";
                break;
            case ""roman"":
            default:
                resourceDir = ""static/fonts/NotoSans-Regular.ttf"";
                break;
        }

        if (!"""".equals(resourceDir)) {
            ClassPathResource classPathResource = new ClassPathResource(resourceDir);
            String fileExtension = resourceDir.substring(resourceDir.lastIndexOf("".""));
            File tempFile = Files.createTempFile(""NotoSansFont"", fileExtension).toFile();
            try (InputStream is = classPathResource.getInputStream();
                    FileOutputStream os = new FileOutputStream(tempFile)) {
                IOUtils.copy(is, os);
                font = PDType0Font.load(document, tempFile);
            } finally {
                if (tempFile != null) Files.deleteIfExists(tempFile.toPath());
            }
        }

        contentStream.setFont(font, fontSize);

        Color redactColor;
        try {
            if (!colorString.startsWith(""#"")) {
                colorString = ""#"" + colorString;
            }
            redactColor = Color.decode(colorString);
        } catch (NumberFormatException e) {

            redactColor = Color.LIGHT_GRAY;
        }
        contentStream.setNonStrokingColor(redactColor);

        String[] textLines = watermarkText.split(""\\\\n"");
        float maxLineWidth = 0;

        for (int i = 0; i < textLines.length; ++i) {
            maxLineWidth = Math.max(maxLineWidth, font.getStringWidth(textLines[i]));
        }

        // Set size and location of text watermark
        float watermarkWidth = widthSpacer + maxLineWidth * fontSize / 1000;
        float watermarkHeight = heightSpacer + fontSize * textLines.length;
        float pageWidth = page.getMediaBox().getWidth();
        float pageHeight = page.getMediaBox().getHeight();

        // Calculating the new width and height depending on the angle.
        float radians = (float) Math.toRadians(rotation);
        float newWatermarkWidth =
                (float)
                        (Math.abs(watermarkWidth * Math.cos(radians))
                                + Math.abs(watermarkHeight * Math.sin(radians)));
        float newWatermarkHeight =
                (float)
                        (Math.abs(watermarkWidth * Math.sin(radians))
                                + Math.abs(watermarkHeight * Math.cos(radians)));

        // Calculating the number of rows and columns.

        int watermarkRows = (int) (pageHeight / newWatermarkHeight + 1);
        int watermarkCols = (int) (pageWidth / newWatermarkWidth + 1);

        // Add the text watermark
        for (int i = 0; i <= watermarkRows; i++) {
            for (int j = 0; j <= watermarkCols; j++) {
                contentStream.beginText();
                contentStream.setTextMatrix(
                        Matrix.getRotateInstance(
                                (float) Math.toRadians(rotation),
                                j * newWatermarkWidth,
                                i * newWatermarkHeight));

                for (int k = 0; k < textLines.length; ++k) {
                    contentStream.showText(textLines[k]);
                    contentStream.newLineAtOffset(0, -fontSize);
                }

                contentStream.endText();
            }
        }
    }
"
stirling.software.SPDF.controller.api.security,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java,WatermarkController,addImageWatermark,"void addImageWatermark(PDPageContentStream,MultipartFile,PDDocument,PDPage,float,int,int,float)","[268, 324]","{'A233': [(268, 324)]}",{'A233': 1.0},A233,,"    private void addImageWatermark(
            PDPageContentStream contentStream,
            MultipartFile watermarkImage,
            PDDocument document,
            PDPage page,
            float rotation,
            int widthSpacer,
            int heightSpacer,
            float fontSize)
            throws IOException {

        // Load the watermark image
        BufferedImage image = ImageIO.read(watermarkImage.getInputStream());

        // Compute width based on original aspect ratio
        float aspectRatio = (float) image.getWidth() / (float) image.getHeight();

        // Desired physical height (in PDF points)
        float desiredPhysicalHeight = fontSize;

        // Desired physical width based on the aspect ratio
        float desiredPhysicalWidth = desiredPhysicalHeight * aspectRatio;

        // Convert the BufferedImage to PDImageXObject
        PDImageXObject xobject = LosslessFactory.createFromImage(document, image);

        // Calculate the number of rows and columns for watermarks
        float pageWidth = page.getMediaBox().getWidth();
        float pageHeight = page.getMediaBox().getHeight();
        int watermarkRows =
                (int) ((pageHeight + heightSpacer) / (desiredPhysicalHeight + heightSpacer));
        int watermarkCols =
                (int) ((pageWidth + widthSpacer) / (desiredPhysicalWidth + widthSpacer));

        for (int i = 0; i < watermarkRows; i++) {
            for (int j = 0; j < watermarkCols; j++) {
                float x = j * (desiredPhysicalWidth + widthSpacer);
                float y = i * (desiredPhysicalHeight + heightSpacer);

                // Save the graphics state
                contentStream.saveGraphicsState();

                // Create rotation matrix and rotate
                contentStream.transform(
                        Matrix.getTranslateInstance(
                                x + desiredPhysicalWidth / 2, y + desiredPhysicalHeight / 2));
                contentStream.transform(Matrix.getRotateInstance(Math.toRadians(rotation), 0, 0));
                contentStream.transform(
                        Matrix.getTranslateInstance(
                                -desiredPhysicalWidth / 2, -desiredPhysicalHeight / 2));

                // Draw the image and restore the graphics state
                contentStream.drawImage(xobject, 0, 0, desiredPhysicalWidth, desiredPhysicalHeight);
                contentStream.restoreGraphicsState();
            }
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineController.java,PipelineController,handleData,ResponseEntity<byte[]> handleData(HandleDataRequest),"[49, 127]","{'A233': [(50, 57), (59, 82), (84, 119), (122, 123), (125, 127)], 'A236': [(121, 121)], 'A238': [(58, 58), (83, 83), (120, 120), (124, 124)], 'A234': [(49, 49)]}","{'A233': 0.9240506329113924, 'A236': 0.012658227848101266, 'A238': 0.05063291139240506, 'A234': 0.012658227848101266}",A233,,"    @PostMapping(value = ""/handleData"", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<byte[]> handleData(@ModelAttribute HandleDataRequest request)
            throws JsonMappingException, JsonProcessingException {
        MultipartFile[] files = request.getFileInput();
        String jsonString = request.getJson();
        if (files == null) {
            return null;
        }
        PipelineConfig config = objectMapper.readValue(jsonString, PipelineConfig.class);
        log.info(""Received POST request to /handleData with {} files"", files.length);

        List<String> operationNames =
                config.getOperations().stream().map(PipelineOperation::getOperation).toList();

        Map<String, Object> properties = new HashMap<>();
        properties.put(""operations"", operationNames);
        properties.put(""fileCount"", files.length);

        postHogService.captureEvent(""pipeline_api_event"", properties);

        try {
            List<Resource> inputFiles = processor.generateInputFiles(files);
            if (inputFiles == null || inputFiles.size() == 0) {
                return null;
            }
            PipelineResult result = processor.runPipelineAgainstFiles(inputFiles, config);
            List<Resource> outputFiles = result.getOutputFiles();
            if (outputFiles != null && outputFiles.size() == 1) {
                // If there is only one file, return it directly
                Resource singleFile = outputFiles.get(0);
                InputStream is = singleFile.getInputStream();
                byte[] bytes = new byte[(int) singleFile.contentLength()];
                is.read(bytes);
                is.close();
                log.info(""Returning single file response..."");
                return WebResponseUtils.bytesToWebResponse(
                        bytes, singleFile.getFilename(), MediaType.APPLICATION_OCTET_STREAM);
            } else if (outputFiles == null) {
                return null;
            }
            // Create a ByteArrayOutputStream to hold the zip
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ZipOutputStream zipOut = new ZipOutputStream(baos);
            // A map to keep track of filenames and their counts
            Map<String, Integer> filenameCount = new HashMap<>();
            // Loop through each file and add it to the zip
            for (Resource file : outputFiles) {
                String originalFilename = file.getFilename();
                String filename = originalFilename;
                // Check if the filename already exists, and modify it if necessary
                if (filenameCount.containsKey(originalFilename)) {
                    int count = filenameCount.get(originalFilename);
                    String baseName = originalFilename.replaceAll(""\\.[^.]*$"", """");
                    String extension = originalFilename.replaceAll(""^.*\\."", """");
                    filename = baseName + ""("" + count + "")."" + extension;
                    filenameCount.put(originalFilename, count + 1);
                } else {
                    filenameCount.put(originalFilename, 1);
                }
                ZipEntry zipEntry = new ZipEntry(filename);
                zipOut.putNextEntry(zipEntry);
                // Read the file into a byte array
                InputStream is = file.getInputStream();
                byte[] bytes = new byte[(int) file.contentLength()];
                is.read(bytes);
                // Write the bytes of the file to the zip
                zipOut.write(bytes, 0, bytes.length);
                zipOut.closeEntry();
                is.close();
            }
            zipOut.close();
            log.info(""Returning zipped file response..."");
            return WebResponseUtils.baosToWebResponse(
                    baos, ""output.zip"", MediaType.APPLICATION_OCTET_STREAM);
        } catch (Exception e) {
            log.error(""Error handling data: "", e);
            return null;
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,removeTrailingNaming,String removeTrailingNaming(String),"[61, 78]","{'A233': [(61, 78)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    public static String removeTrailingNaming(String filename) {
        // Splitting filename into name and extension
        int dotIndex = filename.lastIndexOf(""."");
        if (dotIndex == -1) {
            // No extension found
            return filename;
        }
        String name = filename.substring(0, dotIndex);
        String extension = filename.substring(dotIndex);
        // Finding the last underscore
        int underscoreIndex = name.lastIndexOf(""_"");
        if (underscoreIndex == -1) {
            // No underscore found
            return filename;
        }
        // Removing the last part and reattaching the extension
        return name.substring(0, underscoreIndex) + extension;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,getApiKeyForUser,String getApiKeyForUser(),"[80, 83]","{'A233': [(80, 83)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    private String getApiKeyForUser() {
        if (userService == null) return """";
        return userService.getApiKeyForUser(Role.INTERNAL_API_USER.getRoleId());
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,getBaseUrl,String getBaseUrl(),"[85, 89]","{'A233': [(85, 86), (88, 89)], 'A236': [(87, 87)]}","{'A233': 0.8, 'A236': 0.2}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    private String getBaseUrl() {
        String contextPath = servletContext.getContextPath();
        String port = SPDFApplication.getStaticPort();
        return ""http://localhost:"" + port + contextPath + ""/"";
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,runPipelineAgainstFiles,"PipelineResult runPipelineAgainstFiles(List<Resource>,PipelineConfig)","[91, 258]","{'A233': [(91, 101), (103, 110), (114, 119), (122, 125), (128, 145), (147, 185), (189, 199), (202, 209), (211, 251), (253, 258)], 'A238': [(102, 102), (252, 252)], 'A267': [(111, 113)], 'A280': [(120, 121), (186, 188)], 'A234': [(126, 127), (146, 146), (200, 201), (210, 210)]}","{'A233': 0.9047619047619048, 'A238': 0.011904761904761904, 'A267': 0.017857142857142856, 'A280': 0.02976190476190476, 'A234': 0.03571428571428571}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfig config)
            throws Exception {
        PipelineResult result = new PipelineResult();

        ByteArrayOutputStream logStream = new ByteArrayOutputStream();
        PrintStream logPrintStream = new PrintStream(logStream);
        boolean hasErrors = false;
        boolean filtersApplied = false;
        for (PipelineOperation pipelineOperation : config.getOperations()) {
            String operation = pipelineOperation.getOperation();
            boolean isMultiInputOperation = apiDocService.isMultiInput(operation);
            log.info(
                    ""Running operation: {} isMultiInputOperation {}"",
                    operation,
                    isMultiInputOperation);
            Map<String, Object> parameters = pipelineOperation.getParameters();
            List<String> inputFileTypes = apiDocService.getExtensionTypes(false, operation);
            if (inputFileTypes == null) {
                inputFileTypes = new ArrayList<String>(Arrays.asList(""ALL""));
            }
            if (!operation.matches(""^[a-zA-Z0-9_-]+$"")) {
                throw new IllegalArgumentException(""Invalid operation value received."");
            }
            String url = getBaseUrl() + operation;
            List<Resource> newOutputFiles = new ArrayList<>();
            if (!isMultiInputOperation) {
                for (Resource file : outputFiles) {
                    boolean hasInputFileType = false;
                    for (String extension : inputFileTypes) {
                        if (""ALL"".equals(extension)
                                || file.getFilename().toLowerCase().endsWith(extension)) {
                            hasInputFileType = true;
                            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
                            body.add(""fileInput"", file);
                            for (Entry<String, Object> entry : parameters.entrySet()) {
                                if (entry.getValue() instanceof List<?> entryList) {
                                    for (Object item : entryList) {
                                        body.add(entry.getKey(), item);
                                    }
                                } else {
                                    body.add(entry.getKey(), entry.getValue());
                                }
                            }
                            ResponseEntity<byte[]> response = sendWebRequest(url, body);
                            // If the operation is filter and the response body is null or empty,
                            // skip
                            // this
                            // file
                            if (operation.startsWith(""filter-"")
                                    && (response.getBody() == null
                                            || response.getBody().length == 0)) {
                                filtersApplied = true;
                                log.info(""Skipping file due to filtering {}"", operation);
                                continue;
                            }
                            if (!HttpStatus.OK.equals(response.getStatusCode())) {
                                logPrintStream.println(""Error: "" + response.getBody());
                                hasErrors = true;
                                continue;
                            }
                            processOutputFiles(operation, response, newOutputFiles);
                        }
                    }
                    if (!hasInputFileType) {
                        String filename = file.getFilename();
                        String providedExtension = ""no extension"";
                        if (filename != null && filename.contains(""."")) {
                            providedExtension =
                                    filename.substring(filename.lastIndexOf(""."")).toLowerCase();
                        }

                        logPrintStream.println(
                                ""No files with extension ""
                                        + String.join("", "", inputFileTypes)
                                        + "" found for operation ""
                                        + operation
                                        + "". Provided file '""
                                        + filename
                                        + ""' has extension: ""
                                        + providedExtension);
                        hasErrors = true;
                    }
                }
            } else {
                // Filter and collect all files that match the inputFileExtension
                List<Resource> matchingFiles;
                if (inputFileTypes.contains(""ALL"")) {
                    matchingFiles = new ArrayList<>(outputFiles);
                } else {
                    final List<String> finalinputFileTypes = inputFileTypes;
                    matchingFiles =
                            outputFiles.stream()
                                    .filter(
                                            file ->
                                                    finalinputFileTypes.stream()
                                                            .anyMatch(
                                                                    file.getFilename().toLowerCase()
                                                                            ::endsWith))
                                    .toList();
                }
                // Check if there are matching files
                if (!matchingFiles.isEmpty()) {
                    // Create a new MultiValueMap for the request body
                    MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
                    // Add all matching files to the body
                    for (Resource file : matchingFiles) {
                        body.add(""fileInput"", file);
                    }
                    for (Entry<String, Object> entry : parameters.entrySet()) {
                        if (entry.getValue() instanceof List<?> entryList) {
                            for (Object item : entryList) {
                                body.add(entry.getKey(), item);
                            }
                        } else {
                            body.add(entry.getKey(), entry.getValue());
                        }
                    }
                    ResponseEntity<byte[]> response = sendWebRequest(url, body);
                    // Handle the response
                    if (HttpStatus.OK.equals(response.getStatusCode())) {
                        processOutputFiles(operation, response, newOutputFiles);
                    } else {
                        // Log error if the response status is not OK
                        logPrintStream.println(
                                ""Error in multi-input operation: "" + response.getBody());
                        hasErrors = true;
                    }
                } else {
                    // Get details about what files were actually provided
                    List<String> providedExtensions =
                            outputFiles.stream()
                                    .map(
                                            file -> {
                                                String filename = file.getFilename();
                                                if (filename != null && filename.contains(""."")) {
                                                    return filename.substring(
                                                                    filename.lastIndexOf("".""))
                                                            .toLowerCase();
                                                }
                                                return ""no extension"";
                                            })
                                    .distinct()
                                    .toList();

                    logPrintStream.println(
                            ""No files with extension ""
                                    + String.join("", "", inputFileTypes)
                                    + "" found for multi-input operation ""
                                    + operation
                                    + "". Provided files have extensions: ""
                                    + String.join("", "", providedExtensions)
                                    + "" (total files: ""
                                    + outputFiles.size()
                                    + "")"");
                    hasErrors = true;
                }
            }
            logPrintStream.close();
            outputFiles = newOutputFiles;
        }
        if (hasErrors) {
            log.error(""Errors occurred during processing. Log: {}"", logStream.toString());
        }
        result.setHasErrors(hasErrors);
        result.setFiltersApplied(filtersApplied);
        result.setOutputFiles(outputFiles);
        return result;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,sendWebRequest,"ResponseEntity<byte[]> sendWebRequest(String,MultiValueMap<String, Object>)","[260, 272]","{'A233': [(262, 272)], 'A236': [(260, 261)]}","{'A233': 0.8461538461538461, 'A236': 0.15384615384615385}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    /* package */ ResponseEntity<byte[]> sendWebRequest(
            String url, MultiValueMap<String, Object> body) {
        RestTemplate restTemplate = new RestTemplate();
        // Set up headers, including API key
        HttpHeaders headers = new HttpHeaders();
        String apiKey = getApiKeyForUser();
        headers.add(""X-API-KEY"", apiKey);
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);
        // Create HttpEntity with the body and headers
        HttpEntity<MultiValueMap<String, Object>> entity = new HttpEntity<>(body, headers);
        // Make the request to the REST endpoint
        return restTemplate.exchange(url, HttpMethod.POST, entity, byte[].class);
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,processOutputFiles,"List<Resource> processOutputFiles(String,ResponseEntity<byte[]>,List<Resource>)","[274, 304]","{'A233': [(274, 304)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    private List<Resource> processOutputFiles(
            String operation, ResponseEntity<byte[]> response, List<Resource> newOutputFiles)
            throws IOException {
        // Define filename
        String newFilename;
        if (operation.contains(""auto-rename"")) {
            // If the operation is ""auto-rename"", generate a new filename.
            // This is a simple example of generating a filename using current timestamp.
            // Modify as per your needs.
            newFilename = extractFilename(response);
        } else {
            // Otherwise, keep the original filename.
            newFilename = removeTrailingNaming(extractFilename(response));
        }
        // Check if the response body is a zip file
        if (isZip(response.getBody())) {
            // Unzip the file and add all the files to the new output files
            newOutputFiles.addAll(unzip(response.getBody()));
        } else {
            Resource outputResource =
                    new ByteArrayResource(response.getBody()) {

                        @Override
                        public String getFilename() {
                            return newFilename;
                        }
                    };
            newOutputFiles.add(outputResource);
        }
        return newOutputFiles;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,getFilename,String getFilename(),"[296, 299]","{'A233': [(296, 299)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"                        @Override
                        public String getFilename() {
                            return newFilename;
                        }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,extractFilename,String extractFilename(ResponseEntity<byte[]>),"[306, 323]","{'A233': [(306, 323)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    public String extractFilename(ResponseEntity<byte[]> response) {
        // Default filename if not found
        String filename = ""default-filename.ext"";
        HttpHeaders headers = response.getHeaders();
        String contentDisposition = headers.getFirst(HttpHeaders.CONTENT_DISPOSITION);
        if (contentDisposition != null && !contentDisposition.isEmpty()) {
            String[] parts = contentDisposition.split("";"");
            for (String part : parts) {
                if (part.trim().startsWith(""filename"")) {
                    // Extracts filename and removes quotes if present
                    filename = part.split(""="")[1].trim().replace(""\"""", """");
                    filename = URLDecoder.decode(filename, StandardCharsets.UTF_8);
                    break;
                }
            }
        }
        return filename;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,generateInputFiles,List<Resource> generateInputFiles(File[]),"[325, 355]","{'A233': [(325, 326), (328, 331), (336, 349), (351, 352), (354, 355)], 'A238': [(327, 327), (350, 350), (353, 353)], 'A267': [(332, 335)]}","{'A233': 0.7741935483870968, 'A238': 0.0967741935483871, 'A267': 0.12903225806451613}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    List<Resource> generateInputFiles(File[] files) throws Exception {
        if (files == null || files.length == 0) {
            log.info(""No files"");
            return null;
        }
        List<Resource> outputFiles = new ArrayList<>();
        for (File file : files) {
            Path normalizedPath = Paths.get(file.getName()).normalize();
            if (normalizedPath.startsWith("".."")) {
                throw new SecurityException(""Potential path traversal attempt in file name: "" + file.getName());
            }
            Path path = Paths.get(file.getAbsolutePath());
            // debug statement
            log.info(""Reading file: "" + path);
            if (Files.exists(path)) {
                Resource fileResource =
                        new ByteArrayResource(Files.readAllBytes(path)) {

                            @Override
                            public String getFilename() {
                                return file.getName();
                            }
                        };
                outputFiles.add(fileResource);
            } else {
                log.info(""File not found: "" + path);
            }
        }
        log.info(""Files successfully loaded. Starting processing..."");
        return outputFiles;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,getFilename,String getFilename(),"[343, 346]","{'A233': [(343, 346)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"                            @Override
                            public String getFilename() {
                                return file.getName();
                            }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,generateInputFiles,List<Resource> generateInputFiles(MultipartFile[]),"[357, 376]","{'A233': [(357, 358), (360, 368), (370, 373), (375, 376)], 'A238': [(359, 359), (374, 374)], 'A243': [(369, 369)]}","{'A233': 0.85, 'A238': 0.1, 'A243': 0.05}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    List<Resource> generateInputFiles(MultipartFile[] files) throws Exception {
        if (files == null || files.length == 0) {
            log.info(""No files"");
            return null;
        }
        List<Resource> outputFiles = new ArrayList<>();
        for (MultipartFile file : files) {
            Resource fileResource =
                    new ByteArrayResource(file.getBytes()) {

                        @Override
                        public String getFilename() {
                            return Filenames.toSimpleFileName(file.getOriginalFilename());
                        }
                    };
            outputFiles.add(fileResource);
        }
        log.info(""Files successfully loaded. Starting processing..."");
        return outputFiles;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,getFilename,String getFilename(),"[367, 370]","{'A233': [(367, 368), (370, 370)], 'A243': [(369, 369)]}","{'A233': 0.75, 'A243': 0.25}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"                        @Override
                        public String getFilename() {
                            return Filenames.toSimpleFileName(file.getOriginalFilename());
                        }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,isZip,boolean isZip(byte[]),"[378, 384]","{'A233': [(378, 384)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    private boolean isZip(byte[] data) {
        if (data == null || data.length < 4) {
            return false;
        }
        // Check the first four bytes of the data against the standard zip magic number
        return data[0] == 0x50 && data[1] == 0x4B && data[2] == 0x03 && data[3] == 0x04;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,unzip,List<Resource> unzip(byte[]),"[386, 419]","{'A233': [(386, 386), (388, 389), (391, 409), (411, 416), (418, 419)], 'A238': [(387, 387), (410, 410), (417, 417)], 'A243': [(390, 390)]}","{'A233': 0.8823529411764706, 'A238': 0.08823529411764706, 'A243': 0.029411764705882353}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"    private List<Resource> unzip(byte[] data) throws IOException {
        log.info(""Unzipping data of length: {}"", data.length);
        List<Resource> unzippedFiles = new ArrayList<>();
        try (ByteArrayInputStream bais = new ByteArrayInputStream(data);
                ZipInputStream zis = ZipSecurity.createHardenedInputStream(bais)) {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                byte[] buffer = new byte[1024];
                int count;
                while ((count = zis.read(buffer)) != -1) {
                    baos.write(buffer, 0, count);
                }
                final String filename = entry.getName();
                Resource fileResource =
                        new ByteArrayResource(baos.toByteArray()) {

                            @Override
                            public String getFilename() {
                                return filename;
                            }
                        };
                // If the unzipped file is a zip file, unzip it
                if (isZip(baos.toByteArray())) {
                    log.info(""File {} is a zip file. Unzipping..."", filename);
                    unzippedFiles.addAll(unzip(baos.toByteArray()));
                } else {
                    unzippedFiles.add(fileResource);
                }
            }
        }
        log.info(""Unzipping completed. {} files were unzipped."", unzippedFiles.size());
        return unzippedFiles;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java,PipelineProcessor,getFilename,String getFilename(),"[403, 406]","{'A233': [(403, 406)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java,"                            @Override
                            public String getFilename() {
                                return filename;
                            }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,scanFolders,void scanFolders(),"[71, 112]","{'A233': [(71, 76), (78, 78), (80, 109), (111, 112)], 'A238': [(77, 77), (79, 79), (110, 110)]}","{'A233': 0.9285714285714286, 'A238': 0.07142857142857142}",A233,,"    @Scheduled(fixedRate = 60000)
    public void scanFolders() {
        Path watchedFolderPath = Paths.get(watchedFoldersDir).toAbsolutePath();
        if (!Files.exists(watchedFolderPath)) {
            try {
                Files.createDirectories(watchedFolderPath);
                log.info(""Created directory: {}"", watchedFolderPath);
            } catch (IOException e) {
                log.error(""Error creating directory: {}"", watchedFolderPath, e);
                return;
            }
        }

        try {
            Files.walkFileTree(
                    watchedFolderPath,
                    new SimpleFileVisitor<>() {
                        @Override
                        public FileVisitResult preVisitDirectory(
                                Path dir, BasicFileAttributes attrs) {
                            try {
                                // Skip root directory and ""processing"" subdirectories
                                if (!dir.equals(watchedFolderPath) && !dir.endsWith(""processing"")) {
                                    handleDirectory(dir);
                                }
                            } catch (Exception e) {
                                log.error(""Error handling directory: {}"", dir, e);
                            }
                            return FileVisitResult.CONTINUE;
                        }

                        @Override
                        public FileVisitResult visitFileFailed(Path path, IOException exc) {
                            // Handle broken symlinks or inaccessible directories
                            log.error(""Error accessing path: {}"", path, exc);
                            return FileVisitResult.CONTINUE;
                        }
                    });
        } catch (IOException e) {
            log.error(""Error walking through directory: {}"", watchedFolderPath, e);
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,preVisitDirectory,"FileVisitResult preVisitDirectory(Path,BasicFileAttributes)","[88, 100]","{'A233': [(88, 100)]}",{'A233': 1.0},A233,,"                        @Override
                        public FileVisitResult preVisitDirectory(
                                Path dir, BasicFileAttributes attrs) {
                            try {
                                // Skip root directory and ""processing"" subdirectories
                                if (!dir.equals(watchedFolderPath) && !dir.endsWith(""processing"")) {
                                    handleDirectory(dir);
                                }
                            } catch (Exception e) {
                                log.error(""Error handling directory: {}"", dir, e);
                            }
                            return FileVisitResult.CONTINUE;
                        }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,visitFileFailed,"FileVisitResult visitFileFailed(Path,IOException)","[102, 107]","{'A233': [(102, 107)]}",{'A233': 1.0},A233,,"                        @Override
                        public FileVisitResult visitFileFailed(Path path, IOException exc) {
                            // Handle broken symlinks or inaccessible directories
                            log.error(""Error accessing path: {}"", path, exc);
                            return FileVisitResult.CONTINUE;
                        }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,handleDirectory,void handleDirectory(Path),"[114, 125]","{'A233': [(114, 114), (116, 118), (120, 125)], 'A238': [(115, 115), (119, 119)]}","{'A233': 0.8333333333333334, 'A238': 0.16666666666666666}",A233,,"    public void handleDirectory(Path dir) throws IOException {
        log.info(""Handling directory: {}"", dir);
        Path processingDir = createProcessingDirectory(dir);
        Optional<Path> jsonFileOptional = findJsonFile(dir);
        if (!jsonFileOptional.isPresent()) {
            log.warn(""No .JSON settings file found. No processing will happen for dir {}."", dir);
            return;
        }
        Path jsonFile = jsonFileOptional.get();
        PipelineConfig config = readAndParseJson(jsonFile);
        processPipelineOperations(dir, processingDir, jsonFile, config);
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,createProcessingDirectory,Path createProcessingDirectory(Path),"[127, 134]","{'A233': [(127, 130), (132, 134)], 'A238': [(131, 131)]}","{'A233': 0.875, 'A238': 0.125}",A233,,"    private Path createProcessingDirectory(Path dir) throws IOException {
        Path processingDir = dir.resolve(""processing"");
        if (!Files.exists(processingDir)) {
            Files.createDirectory(processingDir);
            log.info(""Created processing directory: {}"", processingDir);
        }
        return processingDir;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,findJsonFile,Optional<Path> findJsonFile(Path),"[136, 140]","{'A233': [(136, 140)]}",{'A233': 1.0},A233,,"    private Optional<Path> findJsonFile(Path dir) throws IOException {
        try (Stream<Path> paths = Files.list(dir)) {
            return paths.filter(file -> file.toString().endsWith("".json"")).findFirst();
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,readAndParseJson,PipelineConfig readAndParseJson(Path),"[142, 146]","{'A233': [(142, 143), (145, 146)], 'A238': [(144, 144)]}","{'A233': 0.8, 'A238': 0.2}",A233,,"    private PipelineConfig readAndParseJson(Path jsonFile) throws IOException {
        String jsonString = new String(Files.readAllBytes(jsonFile), StandardCharsets.UTF_8);
        log.debug(""Reading JSON file: {}"", jsonFile);
        return objectMapper.readValue(jsonString, PipelineConfig.class);
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,processPipelineOperations,"void processPipelineOperations(Path,Path,Path,PipelineConfig)","[148, 168]","{'A233': [(148, 153), (155, 168)], 'A238': [(154, 154)]}","{'A233': 0.9523809523809523, 'A238': 0.047619047619047616}",A233,,"    private void processPipelineOperations(
            Path dir, Path processingDir, Path jsonFile, PipelineConfig config) throws IOException {
        for (PipelineOperation operation : config.getOperations()) {
            validateOperation(operation);
            File[] files = collectFilesForProcessing(dir, jsonFile, operation);
            if (files == null || files.length == 0) {
                log.debug(""No files detected for {} "", dir);
                return;
            }

            List<String> operationNames =
                    config.getOperations().stream().map(PipelineOperation::getOperation).toList();
            Map<String, Object> properties = new HashMap<>();
            properties.put(""operations"", operationNames);
            properties.put(""fileCount"", files.length);
            postHogService.captureEvent(""pipeline_directory_event"", properties);

            List<File> filesToProcess = prepareFilesForProcessing(files, processingDir);
            runPipelineAgainstFiles(filesToProcess, config, dir, processingDir);
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,validateOperation,void validateOperation(PipelineOperation),"[170, 174]","{'A233': [(170, 174)]}",{'A233': 1.0},A233,,"    private void validateOperation(PipelineOperation operation) throws IOException {
        if (!apiDocService.isValidOperation(operation.getOperation(), operation.getParameters())) {
            throw new IOException(""Invalid operation: "" + operation.getOperation());
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,collectFilesForProcessing,"File[] collectFilesForProcessing(Path,Path,PipelineOperation)","[176, 242]","{'A233': [(176, 211), (214, 242)], 'A280': [(212, 213)]}","{'A233': 0.9701492537313433, 'A280': 0.029850746268656716}",A233,,"    private File[] collectFilesForProcessing(Path dir, Path jsonFile, PipelineOperation operation)
            throws IOException {

        List<String> inputExtensions =
                apiDocService.getExtensionTypes(false, operation.getOperation());
        log.info(
                ""Allowed extensions for operation {}: {}"",
                operation.getOperation(),
                inputExtensions);

        boolean allowAllFiles = inputExtensions.contains(""ALL"");

        try (Stream<Path> paths = Files.list(dir)) {
            File[] files =
                    paths.filter(
                                    path -> {
                                        if (Files.isDirectory(path)) {
                                            return false;
                                        }
                                        if (path.equals(jsonFile)) {
                                            return false;
                                        }

                                        // Get file extension
                                        String filename = path.getFileName().toString();
                                        String extension =
                                                filename.contains(""."")
                                                        ? filename.substring(
                                                                        filename.lastIndexOf(""."")
                                                                                + 1)
                                                                .toLowerCase()
                                                        : """";

                                        // Check against allowed extensions
                                        boolean isAllowed =
                                                allowAllFiles
                                                        || inputExtensions.contains(
                                                                extension.toLowerCase());
                                        if (!isAllowed) {
                                            log.info(
                                                    ""Skipping file with unsupported extension: {} ({})"",
                                                    filename,
                                                    extension);
                                        }
                                        return isAllowed;
                                    })
                            .map(Path::toAbsolutePath)
                            .filter(
                                    path -> {
                                        boolean isReady =
                                                fileMonitor.isFileReadyForProcessing(path);
                                        if (!isReady) {
                                            log.info(
                                                    ""File not ready for processing (locked/created last 5s): {}"",
                                                    path);
                                        }
                                        return isReady;
                                    })
                            .map(Path::toFile)
                            .toArray(File[]::new);
            log.info(
                    ""Collected {} files for processing for {}"",
                    files.length,
                    dir.toAbsolutePath().toString());
            return files;
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,prepareFilesForProcessing,"List<File> prepareFilesForProcessing(File[],Path)","[244, 279]","{'A233': [(244, 279)]}",{'A233': 1.0},A233,,"    private List<File> prepareFilesForProcessing(File[] files, Path processingDir)
            throws IOException {
        List<File> filesToProcess = new ArrayList<>();
        for (File file : files) {
            Path targetPath = resolveUniqueFilePath(processingDir, file.getName());

            // Retry with exponential backoff
            int maxRetries = 3;
            int retryDelayMs = 500;
            boolean moved = false;

            for (int attempt = 1; attempt <= maxRetries; attempt++) {
                try {
                    Files.move(file.toPath(), targetPath, StandardCopyOption.REPLACE_EXISTING);
                    moved = true;
                    break;
                } catch (FileSystemException e) {
                    if (attempt < maxRetries) {
                        log.info(""File move failed (attempt {}), retrying..."", attempt);
                        try {
                            Thread.sleep(retryDelayMs * (int) Math.pow(2, attempt - 1));
                        } catch (InterruptedException e1) {
                            log.error(""prepareFilesForProcessing failure"", e);
                        }
                    }
                }
            }

            if (moved) {
                filesToProcess.add(targetPath.toFile());
            } else {
                log.error(""Failed to move file after {} attempts: {}"", maxRetries, file.getName());
            }
        }
        return filesToProcess;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,resolveUniqueFilePath,"Path resolveUniqueFilePath(Path,String)","[281, 290]","{'A233': [(281, 290)]}",{'A233': 1.0},A233,,"    private Path resolveUniqueFilePath(Path directory, String originalFileName) {
        Path filePath = directory.resolve(originalFileName);
        int counter = 1;
        while (Files.exists(filePath)) {
            String newName = appendSuffixToFileName(originalFileName, ""("" + counter + "")"");
            filePath = directory.resolve(newName);
            counter++;
        }
        return filePath;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,appendSuffixToFileName,"String appendSuffixToFileName(String,String)","[292, 301]","{'A233': [(292, 301)]}",{'A233': 1.0},A233,,"    private String appendSuffixToFileName(String originalFileName, String suffix) {
        int dotIndex = originalFileName.lastIndexOf('.');
        if (dotIndex == -1) {
            return originalFileName + suffix;
        } else {
            return originalFileName.substring(0, dotIndex)
                    + suffix
                    + originalFileName.substring(dotIndex);
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,runPipelineAgainstFiles,"void runPipelineAgainstFiles(List<File>,PipelineConfig,Path,Path)","[303, 325]","{'A233': [(303, 325)]}",{'A233': 1.0},A233,,"    private void runPipelineAgainstFiles(
            List<File> filesToProcess, PipelineConfig config, Path dir, Path processingDir)
            throws IOException {
        try {
            List<Resource> inputFiles =
                    processor.generateInputFiles(filesToProcess.toArray(new File[0]));
            if (inputFiles == null || inputFiles.isEmpty()) {
                return;
            }
            PipelineResult result = processor.runPipelineAgainstFiles(inputFiles, config);

            if (result.isHasErrors()) {
                log.error(""Errors occurred during processing, retaining original files"");
                moveToErrorDirectory(filesToProcess, dir);
            } else {
                moveAndRenameFiles(result.getOutputFiles(), config, dir);
                deleteOriginalFiles(filesToProcess, processingDir);
            }
        } catch (Exception e) {
            log.error(""Error during processing"", e);
            moveFilesBack(filesToProcess, processingDir);
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,moveToErrorDirectory,"void moveToErrorDirectory(List<File>,Path)","[327, 338]","{'A233': [(327, 338)]}",{'A233': 1.0},A233,,"    private void moveToErrorDirectory(List<File> files, Path originalDir) throws IOException {
        Path errorDir = originalDir.resolve(""error"");
        if (!Files.exists(errorDir)) {
            Files.createDirectories(errorDir);
        }

        for (File file : files) {
            Path target = errorDir.resolve(file.getName());
            Files.move(file.toPath(), target);
            log.info(""Moved failed file to error directory for investigation: {}"", target);
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,moveAndRenameFiles,"void moveAndRenameFiles(List<Resource>,PipelineConfig,Path)","[340, 355]","{'A233': [(340, 346), (348, 352), (354, 355)], 'A238': [(347, 347), (353, 353)]}","{'A233': 0.875, 'A238': 0.125}",A233,,"    private void moveAndRenameFiles(List<Resource> resources, PipelineConfig config, Path dir)
            throws IOException {
        for (Resource resource : resources) {
            String outputFileName = createOutputFileName(resource, config);
            Path outputPath = determineOutputPath(config, dir);
            if (!Files.exists(outputPath)) {
                Files.createDirectories(outputPath);
                log.info(""Created directory: {}"", outputPath);
            }
            Path outputFile = outputPath.resolve(outputFileName);
            try (OutputStream os = new FileOutputStream(outputFile.toFile())) {
                os.write(((ByteArrayResource) resource).getByteArray());
            }
            log.info(""File moved and renamed to {}"", outputFile);
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,createOutputFileName,"String createOutputFileName(Resource,PipelineConfig)","[357, 376]","{'A233': [(357, 376)]}",{'A233': 1.0},A233,,"    private String createOutputFileName(Resource resource, PipelineConfig config) {
        String resourceName = resource.getFilename();
        String baseName = resourceName.substring(0, resourceName.lastIndexOf('.'));
        String extension = resourceName.substring(resourceName.lastIndexOf('.') + 1);
        String outputFileName =
                config.getOutputPattern()
                                .replace(""{filename}"", baseName)
                                .replace(""{pipelineName}"", config.getName())
                                .replace(
                                        ""{date}"",
                                        LocalDate.now()
                                                .format(DateTimeFormatter.ofPattern(""yyyyMMdd"")))
                                .replace(
                                        ""{time}"",
                                        LocalTime.now()
                                                .format(DateTimeFormatter.ofPattern(""HHmmss"")))
                        + "".""
                        + extension;
        return outputFileName;
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,determineOutputPath,"Path determineOutputPath(PipelineConfig,Path)","[378, 385]","{'A233': [(378, 385)]}",{'A233': 1.0},A233,,"    private Path determineOutputPath(PipelineConfig config, Path dir) {
        String outputDir =
                config.getOutputDir()
                        .replace(""{outputFolder}"", finishedFoldersDir)
                        .replace(""{folderName}"", dir.toString())
                        .replaceAll(""\\\\?watchedFolders"", """");
        return Paths.get(outputDir).isAbsolute() ? Paths.get(outputDir) : Paths.get(""."", outputDir);
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,deleteOriginalFiles,"void deleteOriginalFiles(List<File>,Path)","[387, 393]","{'A233': [(387, 390), (392, 393)], 'A238': [(391, 391)]}","{'A233': 0.8571428571428571, 'A238': 0.14285714285714285}",A233,,"    private void deleteOriginalFiles(List<File> filesToProcess, Path processingDir)
            throws IOException {
        for (File file : filesToProcess) {
            Files.deleteIfExists(processingDir.resolve(file.getName()));
            log.info(""Deleted original file: {}"", file.getName());
        }
    }
"
stirling.software.SPDF.controller.api.pipeline,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java,PipelineDirectoryProcessor,moveFilesBack,"void moveFilesBack(List<File>,Path)","[395, 407]","{'A233': [(395, 398), (400, 403), (405, 407)], 'A238': [(399, 399), (404, 404)]}","{'A233': 0.8461538461538461, 'A238': 0.15384615384615385}",A233,,"    private void moveFilesBack(List<File> filesToProcess, Path processingDir) {
        for (File file : filesToProcess) {
            try {
                Files.move(processingDir.resolve(file.getName()), file.toPath());
                log.info(
                        ""Moved file back to original location: {} , {}"",
                        file.toPath(),
                        file.getName());
            } catch (IOException e) {
                log.error(""Error moving file back to original location: {}"", file.getName(), e);
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java,PdfOverlayController,overlayPdfs,ResponseEntity<byte[]> overlayPdfs(OverlayPdfsRequest),"[42, 106]","{'A233': [(42, 45), (48, 86), (89, 106)], 'A234': [(46, 47)], 'A246': [(87, 88)]}","{'A233': 0.9384615384615385, 'A234': 0.03076923076923077, 'A246': 0.03076923076923077}",A233,,"    @PostMapping(value = ""/overlay-pdfs"", consumes = ""multipart/form-data"")
    @Operation(
            summary = ""Overlay PDF files in various modes"",
            description =
                    ""Overlay PDF files onto a base PDF with different modes: Sequential,""
                            + "" Interleaved, or Fixed Repeat. Input:PDF Output:PDF Type:MIMO"")
    public ResponseEntity<byte[]> overlayPdfs(@ModelAttribute OverlayPdfsRequest request)
            throws IOException {
        MultipartFile baseFile = request.getFileInput();
        int overlayPos = request.getOverlayPosition();

        MultipartFile[] overlayFiles = request.getOverlayFiles();
        File[] overlayPdfFiles = new File[overlayFiles.length];
        List<File> tempFiles = new ArrayList<>(); // List to keep track of temporary files

        try {
            for (int i = 0; i < overlayFiles.length; i++) {
                overlayPdfFiles[i] = GeneralUtils.multipartToFile(overlayFiles[i]);
            }

            String mode = request.getOverlayMode(); // ""SequentialOverlay"", ""InterleavedOverlay"",
            // ""FixedRepeatOverlay""
            int[] counts = request.getCounts(); // Used for FixedRepeatOverlay mode

            try (PDDocument basePdf = pdfDocumentFactory.load(baseFile);
                    Overlay overlay = new Overlay()) {
                Map<Integer, String> overlayGuide =
                        prepareOverlayGuide(
                                basePdf.getNumberOfPages(),
                                overlayPdfFiles,
                                mode,
                                counts,
                                tempFiles);

                overlay.setInputPDF(basePdf);
                if (overlayPos == 0) {
                    overlay.setOverlayPosition(Overlay.Position.FOREGROUND);
                } else {
                    overlay.setOverlayPosition(Overlay.Position.BACKGROUND);
                }

                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                overlay.overlay(overlayGuide).save(outputStream);
                byte[] data = outputStream.toByteArray();
                String outputFilename =
                        Filenames.toSimpleFileName(baseFile.getOriginalFilename())
                                        .replaceFirst(""[.][^.]+$"", """")
                                + ""_overlayed.pdf""; // Remove file extension and append .pdf

                return WebResponseUtils.bytesToWebResponse(
                        data, outputFilename, MediaType.APPLICATION_PDF);
            }
        } finally {
            for (File overlayPdfFile : overlayPdfFiles) {
                if (overlayPdfFile != null) {
                    Files.deleteIfExists(overlayPdfFile.toPath());
                }
            }
            for (File tempFile : tempFiles) { // Delete temporary files
                if (tempFile != null) {
                    Files.deleteIfExists(tempFile.toPath());
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java,PdfOverlayController,prepareOverlayGuide,"Map<Integer, String> prepareOverlayGuide(int,File[],String,int[],List<File>)","[108, 126]","{'A233': [(108, 126)]}",{'A233': 1.0},A233,,"    private Map<Integer, String> prepareOverlayGuide(
            int basePageCount, File[] overlayFiles, String mode, int[] counts, List<File> tempFiles)
            throws IOException {
        Map<Integer, String> overlayGuide = new HashMap<>();
        switch (mode) {
            case ""SequentialOverlay"":
                sequentialOverlay(overlayGuide, overlayFiles, basePageCount, tempFiles);
                break;
            case ""InterleavedOverlay"":
                interleavedOverlay(overlayGuide, overlayFiles, basePageCount);
                break;
            case ""FixedRepeatOverlay"":
                fixedRepeatOverlay(overlayGuide, overlayFiles, counts, basePageCount);
                break;
            default:
                throw new IllegalArgumentException(""Invalid overlay mode"");
        }
        return overlayGuide;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java,PdfOverlayController,sequentialOverlay,"void sequentialOverlay(Map<Integer, String>,File[],int,List<File>)","[128, 158]","{'A233': [(128, 147), (149, 158)], 'A243': [(148, 148)]}","{'A233': 0.967741935483871, 'A243': 0.03225806451612903}",A233,,"    private void sequentialOverlay(
            Map<Integer, String> overlayGuide,
            File[] overlayFiles,
            int basePageCount,
            List<File> tempFiles)
            throws IOException {
        int overlayFileIndex = 0;
        int pageCountInCurrentOverlay = 0;

        for (int basePageIndex = 1; basePageIndex <= basePageCount; basePageIndex++) {
            if (pageCountInCurrentOverlay == 0
                    || pageCountInCurrentOverlay
                            >= getNumberOfPages(overlayFiles[overlayFileIndex])) {
                pageCountInCurrentOverlay = 0;
                overlayFileIndex = (overlayFileIndex + 1) % overlayFiles.length;
            }

            try (PDDocument overlayPdf = Loader.loadPDF(overlayFiles[overlayFileIndex])) {
                PDDocument singlePageDocument = new PDDocument();
                singlePageDocument.addPage(overlayPdf.getPage(pageCountInCurrentOverlay));
                File tempFile = Files.createTempFile(""overlay-page-"", "".pdf"").toFile();
                singlePageDocument.save(tempFile);
                singlePageDocument.close();

                overlayGuide.put(basePageIndex, tempFile.getAbsolutePath());
                tempFiles.add(tempFile); // Keep track of the temporary file for cleanup
            }

            pageCountInCurrentOverlay++;
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java,PdfOverlayController,getNumberOfPages,int getNumberOfPages(File),"[160, 164]","{'A233': [(160, 164)]}",{'A233': 1.0},A233,,"    private int getNumberOfPages(File file) throws IOException {
        try (PDDocument doc = Loader.loadPDF(file)) {
            return doc.getNumberOfPages();
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java,PdfOverlayController,interleavedOverlay,"void interleavedOverlay(Map<Integer, String>,File[],int)","[166, 180]","{'A233': [(166, 180)]}",{'A233': 1.0},A233,,"    private void interleavedOverlay(
            Map<Integer, String> overlayGuide, File[] overlayFiles, int basePageCount)
            throws IOException {
        for (int basePageIndex = 1; basePageIndex <= basePageCount; basePageIndex++) {
            File overlayFile = overlayFiles[(basePageIndex - 1) % overlayFiles.length];

            // Load the overlay document to check its page count
            try (PDDocument overlayPdf = Loader.loadPDF(overlayFile)) {
                int overlayPageCount = overlayPdf.getNumberOfPages();
                if ((basePageIndex - 1) % overlayPageCount < overlayPageCount) {
                    overlayGuide.put(basePageIndex, overlayFile.getAbsolutePath());
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/PdfOverlayController.java,PdfOverlayController,fixedRepeatOverlay,"void fixedRepeatOverlay(Map<Integer, String>,File[],int[],int)","[182, 205]","{'A233': [(182, 205)]}",{'A233': 1.0},A233,,"    private void fixedRepeatOverlay(
            Map<Integer, String> overlayGuide, File[] overlayFiles, int[] counts, int basePageCount)
            throws IOException {
        if (overlayFiles.length != counts.length) {
            throw new IllegalArgumentException(
                    ""Counts array length must match the number of overlay files"");
        }
        int currentPage = 1;
        for (int i = 0; i < overlayFiles.length; i++) {
            File overlayFile = overlayFiles[i];
            int repeatCount = counts[i];

            // Load the overlay document to check its page count
            try (PDDocument overlayPdf = Loader.loadPDF(overlayFile)) {
                int overlayPageCount = overlayPdf.getNumberOfPages();
                for (int j = 0; j < repeatCount; j++) {
                    for (int page = 0; page < overlayPageCount; page++) {
                        if (currentPage > basePageCount) break;
                        overlayGuide.put(currentPage++, overlayFile.getAbsolutePath());
                    }
                }
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/MergeController.java,MergeController,mergeDocuments,PDDocument mergeDocuments(List<PDDocument>),"[53, 61]","{'A233': [(54, 54), (59, 59), (61, 61)], 'A281': [(55, 58), (60, 60)], 'A275': [(53, 53)]}","{'A233': 0.3333333333333333, 'A281': 0.5555555555555556, 'A275': 0.1111111111111111}",A281,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java,"    public PDDocument mergeDocuments(List<PDDocument> documents) throws IOException {
        PDDocument mergedDoc = pdfDocumentFactory.createNewDocument();
        for (PDDocument doc : documents) {
            for (PDPage page : doc.getPages()) {
                mergedDoc.addPage(page);
            }
        }
        return mergedDoc;
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/MergeController.java,MergeController,getSortComparator,Comparator<MultipartFile> getSortComparator(String),"[64, 115]","{'A233': [(71, 78), (81, 81), (87, 94), (97, 97), (102, 103), (113, 113), (115, 115)], 'A281': [(64, 70), (79, 80), (82, 86), (95, 96), (98, 101), (104, 112), (114, 114)]}","{'A233': 0.4230769230769231, 'A281': 0.5769230769230769}",A281,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java,"    private Comparator<MultipartFile> getSortComparator(String sortType) {
        switch (sortType) {
            case ""byFileName"":
                return Comparator.comparing(MultipartFile::getOriginalFilename);
            case ""byDateModified"":
                return (file1, file2) -> {
                    try {
                        BasicFileAttributes attr1 =
                                Files.readAttributes(
                                        Paths.get(file1.getOriginalFilename()),
                                        BasicFileAttributes.class);
                        BasicFileAttributes attr2 =
                                Files.readAttributes(
                                        Paths.get(file2.getOriginalFilename()),
                                        BasicFileAttributes.class);
                        return attr1.lastModifiedTime().compareTo(attr2.lastModifiedTime());
                    } catch (IOException e) {
                        return 0; // If there's an error, treat them as equal
                    }
                };
            case ""byDateCreated"":
                return (file1, file2) -> {
                    try {
                        BasicFileAttributes attr1 =
                                Files.readAttributes(
                                        Paths.get(file1.getOriginalFilename()),
                                        BasicFileAttributes.class);
                        BasicFileAttributes attr2 =
                                Files.readAttributes(
                                        Paths.get(file2.getOriginalFilename()),
                                        BasicFileAttributes.class);
                        return attr1.creationTime().compareTo(attr2.creationTime());
                    } catch (IOException e) {
                        return 0; // If there's an error, treat them as equal
                    }
                };
            case ""byPDFTitle"":
                return (file1, file2) -> {
                    try (PDDocument doc1 = pdfDocumentFactory.load(file1);
                            PDDocument doc2 = pdfDocumentFactory.load(file2)) {
                        String title1 = doc1.getDocumentInformation().getTitle();
                        String title2 = doc2.getDocumentInformation().getTitle();
                        return title1.compareTo(title2);
                    } catch (IOException e) {
                        return 0;
                    }
                };
            case ""orderProvided"":
            default:
                return (file1, file2) -> 0; // Default is the order provided
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/MergeController.java,MergeController,addTableOfContents,"void addTableOfContents(PDDocument,MultipartFile[])","[118, 155]","{'A233': [(118, 155)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java,"    private void addTableOfContents(PDDocument mergedDocument, MultipartFile[] files) {
        // Create the document outline
        PDDocumentOutline outline = new PDDocumentOutline();
        mergedDocument.getDocumentCatalog().setDocumentOutline(outline);

        int pageIndex = 0; // Current page index in the merged document

        // Iterate through the original files
        for (MultipartFile file : files) {
            // Get the filename without extension to use as bookmark title
            String filename = file.getOriginalFilename();
            String title = filename;
            if (title != null && title.contains(""."")) {
                title = title.substring(0, title.lastIndexOf('.'));
            }

            // Create an outline item for this file
            PDOutlineItem item = new PDOutlineItem();
            item.setTitle(title);

            // Set the destination to the first page of this file in the merged document
            if (pageIndex < mergedDocument.getNumberOfPages()) {
                PDPage page = mergedDocument.getPage(pageIndex);
                item.setDestination(page);
            }

            // Add the item to the outline
            outline.addLast(item);

            // Increment page index for the next file
            try (PDDocument doc = pdfDocumentFactory.load(file)) {
                pageIndex += doc.getNumberOfPages();
            } catch (IOException e) {
                ExceptionUtils.logException(""document loading for TOC generation"", e);
                pageIndex++; // Increment by at least one if we can't determine page count
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/MergeController.java,MergeController,mergePdfs,ResponseEntity<byte[]> mergePdfs(MergePdfsRequest),"[157, 262]","{'A233': [(158, 160), (165, 165), (167, 167), (171, 171), (179, 179), (181, 183), (189, 205), (207, 207), (217, 217), (227, 231), (240, 240), (243, 254), (256, 259), (261, 262)], 'A281': [(157, 157), (173, 173), (208, 208), (242, 242)], 'A234': [(161, 164), (166, 166), (168, 170), (172, 172), (174, 178), (180, 180), (184, 188), (206, 206), (209, 216), (218, 226), (232, 238), (241, 241), (255, 255), (260, 260)], 'A236': [(239, 239)]}","{'A233': 0.5, 'A281': 0.03773584905660377, 'A234': 0.4528301886792453, 'A236': 0.009433962264150943}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/merge-pdfs"")
    @Operation(
            summary = ""Merge multiple PDF files into one"",
            description =
                    ""This endpoint merges multiple PDF files into a single PDF file. The merged""
                            + "" file will contain all pages from the input files in the order they were""
                            + "" provided. Input:PDF Output:PDF Type:MISO"")
    public ResponseEntity<byte[]> mergePdfs(@ModelAttribute MergePdfsRequest request)
            throws IOException {
        List<File> filesToDelete = new ArrayList<>(); // List of temporary files to delete
        File mergedTempFile = null;
        PDDocument mergedDocument = null;

        boolean removeCertSign = Boolean.TRUE.equals(request.getRemoveCertSign());
        boolean generateToc = request.isGenerateToc();

        try {
            MultipartFile[] files = request.getFileInput();
            Arrays.sort(
                    files,
                    getSortComparator(
                            request.getSortType())); // Sort files based on the given sort type

            PDFMergerUtility mergerUtility = new PDFMergerUtility();
            long totalSize = 0;
            for (MultipartFile multipartFile : files) {
                totalSize += multipartFile.getSize();
                File tempFile =
                        GeneralUtils.convertMultipartFileToFile(
                                multipartFile); // Convert MultipartFile to File
                filesToDelete.add(tempFile); // Add temp file to the list for later deletion
                mergerUtility.addSource(tempFile); // Add source file to the merger utility
            }

            mergedTempFile = Files.createTempFile(""merged-"", "".pdf"").toFile();
            mergerUtility.setDestinationFileName(mergedTempFile.getAbsolutePath());

            try {
                mergerUtility.mergeDocuments(
                        pdfDocumentFactory.getStreamCacheFunction(
                                totalSize)); // Merge the documents
            } catch (IOException e) {
                ExceptionUtils.logException(""PDF merge"", e);
                if (PdfErrorUtils.isCorruptedPdfError(e)) {
                    throw ExceptionUtils.createMultiplePdfCorruptedException(e);
                }
                throw e;
            }

            // Load the merged PDF document
            mergedDocument = pdfDocumentFactory.load(mergedTempFile);

            // Remove signatures if removeCertSign is true
            if (removeCertSign) {
                PDDocumentCatalog catalog = mergedDocument.getDocumentCatalog();
                PDAcroForm acroForm = catalog.getAcroForm();
                if (acroForm != null) {
                    List<PDField> fieldsToRemove =
                            acroForm.getFields().stream()
                                    .filter(field -> field instanceof PDSignatureField)
                                    .toList();

                    if (!fieldsToRemove.isEmpty()) {
                        acroForm.flatten(
                                fieldsToRemove,
                                false); // Flatten the fields, effectively removing them
                    }
                }
            }

            // Add table of contents if generateToc is true
            if (generateToc && files.length > 0) {
                addTableOfContents(mergedDocument, files);
            }

            // Save the modified document to a new ByteArrayOutputStream
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            mergedDocument.save(baos);

            String mergedFileName =
                    files[0].getOriginalFilename().replaceFirst(""[.][^.]+$"", """")
                            + ""_merged_unsigned.pdf"";
            return WebResponseUtils.baosToWebResponse(
                    baos, mergedFileName); // Return the modified PDF

        } catch (Exception ex) {
            if (ex instanceof IOException && PdfErrorUtils.isCorruptedPdfError((IOException) ex)) {
                log.warn(""Corrupted PDF detected in merge pdf process: {}"", ex.getMessage());
            } else {
                log.error(""Error in merge pdf process"", ex);
            }
            throw ex;
        } finally {
            if (mergedDocument != null) {
                mergedDocument.close(); // Close the merged document
            }
            for (File file : filesToDelete) {
                if (file != null) {
                    Files.deleteIfExists(file.toPath()); // Delete temporary files
                }
            }
            if (mergedTempFile != null) {
                Files.deleteIfExists(mergedTempFile.toPath());
            }
        }
    }
"
stirling.software.SPDF.controller.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java,PdfImageRemovalController,removeImages,ResponseEntity<byte[]> removeImages(PDFFile),"[49, 76]","{'A282': [(49, 52), (55, 55), (58, 70), (73, 76)], 'A233': [(56, 57), (71, 72)], 'A234': [(53, 54)]}","{'A282': 0.7857142857142857, 'A233': 0.14285714285714285, 'A234': 0.07142857142857142}",A282,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/remove-image-pdf"")
    @Operation(
            summary = ""Remove images from file to reduce the file size."",
            description =
                    ""This endpoint remove images from file to reduce the file size.Input:PDF""
                            + "" Output:PDF Type:MISO"")
    public ResponseEntity<byte[]> removeImages(@ModelAttribute PDFFile file) throws IOException {
        // Load the PDF document
        PDDocument document = pdfDocumentFactory.load(file);

        // Remove images from the PDF document using the service
        PDDocument modifiedDocument = pdfImageRemovalService.removeImagesFromPdf(document);

        // Create a ByteArrayOutputStream to hold the modified PDF data
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        // Save the modified PDF document to the output stream
        modifiedDocument.save(outputStream);
        modifiedDocument.close();

        // Generate a new filename for the modified PDF
        String mergedFileName =
                file.getFileInput().getOriginalFilename().replaceFirst(""[.][^.]+$"", """")
                        + ""_removed_images.pdf"";

        // Convert the byte array to a web response and return it
        return WebResponseUtils.bytesToWebResponse(outputStream.toByteArray(), mergedFileName);
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,autoRedactForm,String autoRedactForm(Model),"[14, 19]","{'A233': [(14, 19)]}",{'A233': 1.0},A233,,"    @GetMapping(""/auto-redact"")
    @Hidden
    public String autoRedactForm(Model model) {
        model.addAttribute(""currentPage"", ""auto-redact"");
        return ""security/auto-redact"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,redactForm,String redactForm(Model),"[21, 25]","{'A256': [(21, 25)]}",{'A256': 1.0},A256,,"    @GetMapping(""/redact"")
    public String redactForm(Model model) {
        model.addAttribute(""currentPage"", ""redact"");
        return ""security/redact"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,addPasswordForm,String addPasswordForm(Model),"[27, 32]","{'A233': [(27, 32)]}",{'A233': 1.0},A233,,"    @GetMapping(""/add-password"")
    @Hidden
    public String addPasswordForm(Model model) {
        model.addAttribute(""currentPage"", ""add-password"");
        return ""security/add-password"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,permissionsForm,String permissionsForm(Model),"[34, 39]","{'A233': [(34, 39)]}",{'A233': 1.0},A233,,"    @GetMapping(""/change-permissions"")
    @Hidden
    public String permissionsForm(Model model) {
        model.addAttribute(""currentPage"", ""change-permissions"");
        return ""security/change-permissions"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,removePasswordForm,String removePasswordForm(Model),"[41, 46]","{'A233': [(41, 46)]}",{'A233': 1.0},A233,,"    @GetMapping(""/remove-password"")
    @Hidden
    public String removePasswordForm(Model model) {
        model.addAttribute(""currentPage"", ""remove-password"");
        return ""security/remove-password"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,addWatermarkForm,String addWatermarkForm(Model),"[48, 53]","{'A233': [(48, 53)]}",{'A233': 1.0},A233,,"    @GetMapping(""/add-watermark"")
    @Hidden
    public String addWatermarkForm(Model model) {
        model.addAttribute(""currentPage"", ""add-watermark"");
        return ""security/add-watermark"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,certSignForm,String certSignForm(Model),"[55, 60]","{'A233': [(55, 60)]}",{'A233': 1.0},A233,,"    @GetMapping(""/cert-sign"")
    @Hidden
    public String certSignForm(Model model) {
        model.addAttribute(""currentPage"", ""cert-sign"");
        return ""security/cert-sign"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,certSignVerifyForm,String certSignVerifyForm(Model),"[62, 67]","{'A233': [(62, 67)]}",{'A233': 1.0},A233,,"    @GetMapping(""/validate-signature"")
    @Hidden
    public String certSignVerifyForm(Model model) {
        model.addAttribute(""currentPage"", ""validate-signature"");
        return ""security/validate-signature"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,certUnSignForm,String certUnSignForm(Model),"[69, 74]","{'A238': [(69, 74)]}",{'A238': 1.0},A238,,"    @GetMapping(""/remove-cert-sign"")
    @Hidden
    public String certUnSignForm(Model model) {
        model.addAttribute(""currentPage"", ""remove-cert-sign"");
        return ""security/remove-cert-sign"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,sanitizeForm,String sanitizeForm(Model),"[76, 81]","{'A233': [(76, 81)]}",{'A233': 1.0},A233,,"    @GetMapping(""/sanitize-pdf"")
    @Hidden
    public String sanitizeForm(Model model) {
        model.addAttribute(""currentPage"", ""sanitize-pdf"");
        return ""security/sanitize-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SecurityWebController.java,SecurityWebController,getInfo,String getInfo(Model),"[83, 88]","{'A233': [(83, 88)]}",{'A233': 1.0},A233,,"    @GetMapping(""/get-info-on-pdf"")
    @Hidden
    public String getInfo(Model model) {
        model.addAttribute(""currentPage"", ""get-info-on-pdf"");
        return ""security/get-info-on-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java,UploadLimitService,getUploadLimit,long getUploadLimit(),"[19, 45]","{'A233': [(19, 19), (24, 26), (30, 30), (33, 45)], 'A273': [(21, 23), (27, 29), (31, 32)], 'A235': [(20, 20)]}","{'A233': 0.6666666666666666, 'A273': 0.2962962962962963, 'A235': 0.037037037037037035}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/web/UploadLimitServiceTest.java,"    public long getUploadLimit() {
        String maxUploadSize =
                applicationProperties.getSystem().getFileUploadLimit() != null
                        ? applicationProperties.getSystem().getFileUploadLimit()
                        : """";

        if (maxUploadSize.isEmpty()) {
            return 0;
        } else if (!Pattern.compile(""^[1-9][0-9]{0,2}[KMGkmg][Bb]$"")
                .matcher(maxUploadSize)
                .matches()) {
            log.error(
                    ""Invalid maxUploadSize format. Expected format: [1-9][0-9]{0,2}[KMGkmg][Bb], but got: {}"",
                    maxUploadSize);
            return 0;
        } else {
            String unit = maxUploadSize.replaceAll(""[1-9][0-9]{0,2}"", """").toUpperCase();
            String number = maxUploadSize.replaceAll(""[KMGkmg][Bb]"", """");
            long size = Long.parseLong(number);
            return switch (unit) {
                case ""KB"" -> size * 1024;
                case ""MB"" -> size * 1024 * 1024;
                case ""GB"" -> size * 1024 * 1024 * 1024;
                default -> 0;
            };
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java,UploadLimitService,getReadableUploadLimit,String getReadableUploadLimit(),"[48, 50]","{'A233': [(48, 50)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/web/UploadLimitServiceTest.java,"    public String getReadableUploadLimit() {
        return humanReadableByteCount(getUploadLimit());
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java,UploadLimitService,humanReadableByteCount,String humanReadableByteCount(long),"[52, 57]","{'A233': [(52, 55), (57, 57)], 'A234': [(56, 56)]}","{'A233': 0.8333333333333334, 'A234': 0.16666666666666666}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/controller/web/UploadLimitServiceTest.java,"    private String humanReadableByteCount(long bytes) {
        if (bytes < 1024) return bytes + "" B"";
        int exp = (int) (Math.log(bytes) / Math.log(1024));
        String pre = ""KMGTPE"".charAt(exp - 1) + ""B"";
        return String.format(Locale.US, ""%.1f %s"", bytes / Math.pow(1024, exp), pre);
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,init,void init(),"[41, 46]","{'A233': [(41, 46)]}",{'A233': 1.0},A233,,"    @PostConstruct
    public void init() {
        Boolean metricsEnabled = applicationProperties.getMetrics().getEnabled();
        if (metricsEnabled == null) metricsEnabled = true;
        this.metricsEnabled = metricsEnabled;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getStatus,ResponseEntity<?> getStatus(),"[48, 61]","{'A233': [(48, 61)]}",{'A233': 1.0},A233,,"    @GetMapping(""/status"")
    @Operation(
            summary = ""Application status and version"",
            description =
                    ""This endpoint returns the status of the application and its version number."")
    public ResponseEntity<?> getStatus() {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        Map<String, String> status = new HashMap<>();
        status.put(""status"", ""UP"");
        status.put(""version"", getClass().getPackage().getImplementationVersion());
        return ResponseEntity.ok(status);
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getPageLoads,ResponseEntity<?> getPageLoads(Optional<String>),"[63, 80]","{'A233': [(63, 80)]}",{'A233': 1.0},A233,,"    @GetMapping(""/load"")
    @Operation(
            summary = ""GET request count"",
            description =
                    ""This endpoint returns the total count of GET requests for a specific endpoint or all endpoints."")
    public ResponseEntity<?> getPageLoads(
            @RequestParam(required = false, name = ""endpoint"") @Parameter(description = ""endpoint"")
                    Optional<String> endpoint) {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        try {
            double count = getRequestCount(""GET"", endpoint);
            return ResponseEntity.ok(count);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getUniquePageLoads,ResponseEntity<?> getUniquePageLoads(Optional<String>),"[82, 99]","{'A233': [(82, 99)]}",{'A233': 1.0},A233,,"    @GetMapping(""/load/unique"")
    @Operation(
            summary = ""Unique users count for GET requests"",
            description =
                    ""This endpoint returns the count of unique users for GET requests for a specific endpoint or all endpoints."")
    public ResponseEntity<?> getUniquePageLoads(
            @RequestParam(required = false, name = ""endpoint"") @Parameter(description = ""endpoint"")
                    Optional<String> endpoint) {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        try {
            double count = getUniqueUserCount(""GET"", endpoint);
            return ResponseEntity.ok(count);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getAllEndpointLoads,ResponseEntity<?> getAllEndpointLoads(),"[101, 115]","{'A233': [(101, 115)]}",{'A233': 1.0},A233,,"    @GetMapping(""/load/all"")
    @Operation(
            summary = ""GET requests count for all endpoints"",
            description = ""This endpoint returns the count of GET requests for each endpoint."")
    public ResponseEntity<?> getAllEndpointLoads() {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        try {
            List<EndpointCount> results = getEndpointCounts(""GET"");
            return ResponseEntity.ok(results);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getAllUniqueEndpointLoads,ResponseEntity<?> getAllUniqueEndpointLoads(),"[117, 132]","{'A233': [(117, 132)]}",{'A233': 1.0},A233,,"    @GetMapping(""/load/all/unique"")
    @Operation(
            summary = ""Unique users count for GET requests for all endpoints"",
            description =
                    ""This endpoint returns the count of unique users for GET requests for each endpoint."")
    public ResponseEntity<?> getAllUniqueEndpointLoads() {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        try {
            List<EndpointCount> results = getUniqueUserCounts(""GET"");
            return ResponseEntity.ok(results);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getTotalRequests,ResponseEntity<?> getTotalRequests(Optional<String>),"[134, 151]","{'A233': [(134, 151)]}",{'A233': 1.0},A233,,"    @GetMapping(""/requests"")
    @Operation(
            summary = ""POST request count"",
            description =
                    ""This endpoint returns the total count of POST requests for a specific endpoint or all endpoints."")
    public ResponseEntity<?> getTotalRequests(
            @RequestParam(required = false, name = ""endpoint"") @Parameter(description = ""endpoint"")
                    Optional<String> endpoint) {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        try {
            double count = getRequestCount(""POST"", endpoint);
            return ResponseEntity.ok(count);
        } catch (Exception e) {
            return ResponseEntity.ok(-1);
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getUniqueTotalRequests,ResponseEntity<?> getUniqueTotalRequests(Optional<String>),"[153, 170]","{'A233': [(153, 170)]}",{'A233': 1.0},A233,,"    @GetMapping(""/requests/unique"")
    @Operation(
            summary = ""Unique users count for POST requests"",
            description =
                    ""This endpoint returns the count of unique users for POST requests for a specific endpoint or all endpoints."")
    public ResponseEntity<?> getUniqueTotalRequests(
            @RequestParam(required = false, name = ""endpoint"") @Parameter(description = ""endpoint"")
                    Optional<String> endpoint) {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        try {
            double count = getUniqueUserCount(""POST"", endpoint);
            return ResponseEntity.ok(count);
        } catch (Exception e) {
            return ResponseEntity.ok(-1);
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getAllPostRequests,ResponseEntity<?> getAllPostRequests(),"[172, 186]","{'A233': [(172, 186)]}",{'A233': 1.0},A233,,"    @GetMapping(""/requests/all"")
    @Operation(
            summary = ""POST requests count for all endpoints"",
            description = ""This endpoint returns the count of POST requests for each endpoint."")
    public ResponseEntity<?> getAllPostRequests() {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        try {
            List<EndpointCount> results = getEndpointCounts(""POST"");
            return ResponseEntity.ok(results);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getAllUniquePostRequests,ResponseEntity<?> getAllUniquePostRequests(),"[188, 203]","{'A233': [(188, 203)]}",{'A233': 1.0},A233,,"    @GetMapping(""/requests/all/unique"")
    @Operation(
            summary = ""Unique users count for POST requests for all endpoints"",
            description =
                    ""This endpoint returns the count of unique users for POST requests for each endpoint."")
    public ResponseEntity<?> getAllUniquePostRequests() {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        try {
            List<EndpointCount> results = getUniqueUserCounts(""POST"");
            return ResponseEntity.ok(results);
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getRequestCount,"double getRequestCount(String,Optional<String>)","[205, 240]","{'A233': [(205, 240)]}",{'A233': 1.0},A233,,"    private double getRequestCount(String method, Optional<String> endpoint) {
        return meterRegistry.find(""http.requests"").tag(""method"", method).counters().stream()
                .filter(
                        counter -> {
                            String uri = counter.getId().getTag(""uri"");

                            // Apply filtering logic - Skip if uri is null
                            if (uri == null) {
                                return false;
                            }

                            // For POST requests, only include if they start with /api/v1
                            if (""POST"".equals(method) && !uri.contains(""api/v1"")) {
                                return false;
                            }

                            if (uri.contains("".txt"")) {
                                return false;
                            }

                            // For GET requests, validate if we have a list of valid endpoints
                            final boolean validateGetEndpoints =
                                    endpointInspector.getValidGetEndpoints().size() != 0;
                            if (""GET"".equals(method)
                                    && validateGetEndpoints
                                    && !endpointInspector.isValidGetEndpoint(uri)) {
                                log.debug(""Skipping invalid GET endpoint: {}"", uri);
                                return false;
                            }

                            // Filter for specific endpoint if provided
                            return !endpoint.isPresent() || endpoint.get().equals(uri);
                        })
                .mapToDouble(Counter::count)
                .sum();
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getEndpointCounts,List<EndpointCount> getEndpointCounts(String),"[242, 283]","{'A233': [(242, 283)]}",{'A233': 1.0},A233,,"    private List<EndpointCount> getEndpointCounts(String method) {
        Map<String, Double> counts = new HashMap<>();
        meterRegistry
                .find(""http.requests"")
                .tag(""method"", method)
                .counters()
                .forEach(
                        counter -> {
                            String uri = counter.getId().getTag(""uri"");

                            // Skip if uri is null
                            if (uri == null) {
                                return;
                            }

                            // For POST requests, only include if they start with /api/v1
                            if (""POST"".equals(method) && !uri.contains(""api/v1"")) {
                                return;
                            }

                            if (uri.contains("".txt"")) {
                                return;
                            }

                            // For GET requests, validate if we have a list of valid endpoints
                            final boolean validateGetEndpoints =
                                    endpointInspector.getValidGetEndpoints().size() != 0;
                            if (""GET"".equals(method)
                                    && validateGetEndpoints
                                    && !endpointInspector.isValidGetEndpoint(uri)) {
                                log.debug(""Skipping invalid GET endpoint: {}"", uri);
                                return;
                            }

                            counts.merge(uri, counter.count(), Double::sum);
                        });

        return counts.entrySet().stream()
                .map(entry -> new EndpointCount(entry.getKey(), entry.getValue()))
                .sorted(Comparator.comparing(EndpointCount::getCount).reversed())
                .toList();
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getUniqueUserCount,"double getUniqueUserCount(String,Optional<String>)","[285, 325]","{'A233': [(285, 325)]}",{'A233': 1.0},A233,,"    private double getUniqueUserCount(String method, Optional<String> endpoint) {
        Set<String> uniqueUsers = new HashSet<>();
        meterRegistry.find(""http.requests"").tag(""method"", method).counters().stream()
                .filter(
                        counter -> {
                            String uri = counter.getId().getTag(""uri"");

                            // Skip if uri is null
                            if (uri == null) {
                                return false;
                            }

                            // For POST requests, only include if they start with /api/v1
                            if (""POST"".equals(method) && !uri.contains(""api/v1"")) {
                                return false;
                            }

                            if (uri.contains("".txt"")) {
                                return false;
                            }

                            // For GET requests, validate if we have a list of valid endpoints
                            final boolean validateGetEndpoints =
                                    endpointInspector.getValidGetEndpoints().size() != 0;
                            if (""GET"".equals(method)
                                    && validateGetEndpoints
                                    && !endpointInspector.isValidGetEndpoint(uri)) {
                                log.debug(""Skipping invalid GET endpoint: {}"", uri);
                                return false;
                            }
                            return !endpoint.isPresent() || endpoint.get().equals(uri);
                        })
                .forEach(
                        counter -> {
                            String session = counter.getId().getTag(""session"");
                            if (session != null) {
                                uniqueUsers.add(session);
                            }
                        });
        return uniqueUsers.size();
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getUniqueUserCounts,List<EndpointCount> getUniqueUserCounts(String),"[327, 345]","{'A233': [(327, 345)]}",{'A233': 1.0},A233,,"    private List<EndpointCount> getUniqueUserCounts(String method) {
        Map<String, Set<String>> uniqueUsers = new HashMap<>();
        meterRegistry
                .find(""http.requests"")
                .tag(""method"", method)
                .counters()
                .forEach(
                        counter -> {
                            String uri = counter.getId().getTag(""uri"");
                            String session = counter.getId().getTag(""session"");
                            if (uri != null && session != null) {
                                uniqueUsers.computeIfAbsent(uri, k -> new HashSet<>()).add(session);
                            }
                        });
        return uniqueUsers.entrySet().stream()
                .map(entry -> new EndpointCount(entry.getKey(), entry.getValue().size()))
                .sorted(Comparator.comparing(EndpointCount::getCount).reversed())
                .toList();
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,getUptime,ResponseEntity<?> getUptime(),"[347, 355]","{'A233': [(347, 355)]}",{'A233': 1.0},A233,,"    @GetMapping(""/uptime"")
    public ResponseEntity<?> getUptime() {
        if (!metricsEnabled) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(""This endpoint is disabled."");
        }
        LocalDateTime now = LocalDateTime.now();
        Duration uptime = Duration.between(StartupApplicationListener.startTime, now);
        return ResponseEntity.ok(formatDuration(uptime));
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController,formatDuration,String formatDuration(Duration),"[357, 363]","{'A233': [(357, 363)]}",{'A233': 1.0},A233,,"    private String formatDuration(Duration duration) {
        long days = duration.toDays();
        long hours = duration.toHoursPart();
        long minutes = duration.toMinutesPart();
        long seconds = duration.toSecondsPart();
        return String.format(""%dd %dh %dm %ds"", days, hours, minutes, seconds);
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController.EndpointCount,getEndpoint,String getEndpoint(),"[376, 378]","{'A233': [(376, 378)]}",{'A233': 1.0},A233,,"        public String getEndpoint() {
            return endpoint;
        }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController.EndpointCount,setEndpoint,void setEndpoint(String),"[380, 382]","{'A233': [(380, 382)]}",{'A233': 1.0},A233,,"        public void setEndpoint(String endpoint) {
            this.endpoint = endpoint;
        }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController.EndpointCount,getCount,double getCount(),"[384, 386]","{'A233': [(384, 386)]}",{'A233': 1.0},A233,,"        public double getCount() {
            return count;
        }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/MetricsController.java,MetricsController.EndpointCount,setCount,void setCount(double),"[388, 390]","{'A233': [(388, 390)]}",{'A233': 1.0},A233,,"        public void setCount(double count) {
            this.count = count;
        }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,compressPdfForm,String compressPdfForm(Model),"[28, 33]","{'A233': [(28, 33)]}",{'A233': 1.0},A233,,"    @GetMapping(""/compress-pdf"")
    @Hidden
    public String compressPdfForm(Model model) {
        model.addAttribute(""currentPage"", ""compress-pdf"");
        return ""misc/compress-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,replaceAndInvertColorPdfForm,String replaceAndInvertColorPdfForm(Model),"[35, 40]","{'A249': [(35, 40)]}",{'A249': 1.0},A249,,"    @GetMapping(""/replace-and-invert-color-pdf"")
    @Hidden
    public String replaceAndInvertColorPdfForm(Model model) {
        model.addAttribute(""currentPage"", ""replace-invert-color-pdf"");
        return ""misc/replace-color"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,extractImageScansForm,ModelAndView extractImageScansForm(),"[42, 50]","{'A233': [(42, 45), (48, 50)], 'A234': [(46, 47)]}","{'A233': 0.7777777777777778, 'A234': 0.2222222222222222}",A233,,"    @GetMapping(""/extract-image-scans"")
    @Hidden
    public ModelAndView extractImageScansForm() {
        ModelAndView modelAndView = new ModelAndView(""misc/extract-image-scans"");
        boolean isPython = CheckProgramInstall.isPythonAvailable();
        modelAndView.addObject(""isPython"", isPython);
        modelAndView.addObject(""currentPage"", ""extract-image-scans"");
        return modelAndView;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,extractJavascriptForm,String extractJavascriptForm(Model),"[52, 57]","{'A233': [(52, 57)]}",{'A233': 1.0},A233,,"    @GetMapping(""/show-javascript"")
    @Hidden
    public String extractJavascriptForm(Model model) {
        model.addAttribute(""currentPage"", ""show-javascript"");
        return ""misc/show-javascript"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,stampForm,String stampForm(Model),"[59, 64]","{'A233': [(59, 64)]}",{'A233': 1.0},A233,,"    @GetMapping(""/stamp"")
    @Hidden
    public String stampForm(Model model) {
        model.addAttribute(""currentPage"", ""stamp"");
        return ""misc/stamp"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,addPageNumbersForm,String addPageNumbersForm(Model),"[66, 71]","{'A233': [(66, 71)]}",{'A233': 1.0},A233,,"    @GetMapping(""/add-page-numbers"")
    @Hidden
    public String addPageNumbersForm(Model model) {
        model.addAttribute(""currentPage"", ""add-page-numbers"");
        return ""misc/add-page-numbers"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,scannerEffectForm,String scannerEffectForm(Model),"[73, 78]","{'A233': [(73, 78)]}",{'A233': 1.0},A233,,"    @GetMapping(""/scanner-effect"")
    @Hidden
    public String scannerEffectForm(Model model) {
        model.addAttribute(""currentPage"", ""scanner-effect"");
        return ""misc/scanner-effect"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,extractImagesForm,String extractImagesForm(Model),"[80, 85]","{'A233': [(80, 85)]}",{'A233': 1.0},A233,,"    @GetMapping(""/extract-images"")
    @Hidden
    public String extractImagesForm(Model model) {
        model.addAttribute(""currentPage"", ""extract-images"");
        return ""misc/extract-images"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,flattenForm,String flattenForm(Model),"[87, 92]","{'A233': [(87, 92)]}",{'A233': 1.0},A233,,"    @GetMapping(""/flatten"")
    @Hidden
    public String flattenForm(Model model) {
        model.addAttribute(""currentPage"", ""flatten"");
        return ""misc/flatten"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,addWatermarkForm,String addWatermarkForm(Model),"[94, 99]","{'A233': [(94, 99)]}",{'A233': 1.0},A233,,"    @GetMapping(""/change-metadata"")
    @Hidden
    public String addWatermarkForm(Model model) {
        model.addAttribute(""currentPage"", ""change-metadata"");
        return ""misc/change-metadata"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,unlockPDFForms,String unlockPDFForms(Model),"[101, 106]","{'A273': [(101, 106)]}",{'A273': 1.0},A273,,"    @GetMapping(""/unlock-pdf-forms"")
    @Hidden
    public String unlockPDFForms(Model model) {
        model.addAttribute(""currentPage"", ""unlock-pdf-forms"");
        return ""misc/unlock-pdf-forms"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,compareForm,String compareForm(Model),"[108, 113]","{'A233': [(108, 113)]}",{'A233': 1.0},A233,,"    @GetMapping(""/compare"")
    @Hidden
    public String compareForm(Model model) {
        model.addAttribute(""currentPage"", ""compare"");
        return ""misc/compare"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,printFileForm,String printFileForm(Model),"[115, 120]","{'A233': [(115, 120)]}",{'A233': 1.0},A233,,"    @GetMapping(""/print-file"")
    @Hidden
    public String printFileForm(Model model) {
        model.addAttribute(""currentPage"", ""print-file"");
        return ""misc/print-file"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,getAvailableTesseractLanguages,List<String> getAvailableTesseractLanguages(),"[122, 134]","{'A233': [(122, 122), (124, 130), (133, 134)], 'A236': [(132, 132)], 'A234': [(123, 123), (131, 131)]}","{'A233': 0.7692307692307693, 'A236': 0.07692307692307693, 'A234': 0.15384615384615385}",A233,,"    public List<String> getAvailableTesseractLanguages() {
        String tessdataDir = applicationProperties.getSystem().getTessdataDir();
        File[] files = new File(tessdataDir).listFiles();
        if (files == null) {
            return Collections.emptyList();
        }
        return Arrays.stream(files)
                .filter(file -> file.getName().endsWith("".traineddata""))
                .map(file -> file.getName().replace("".traineddata"", """"))
                .filter(lang -> !""osd"".equalsIgnoreCase(lang))
                .sorted()
                .toList();
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,ocrPdfPage,ModelAndView ocrPdfPage(),"[136, 144]","{'A233': [(136, 144)]}",{'A233': 1.0},A233,,"    @GetMapping(""/ocr-pdf"")
    @Hidden
    public ModelAndView ocrPdfPage() {
        ModelAndView modelAndView = new ModelAndView(""misc/ocr-pdf"");
        List<String> languages = getAvailableTesseractLanguages();
        modelAndView.addObject(""languages"", languages);
        modelAndView.addObject(""currentPage"", ""ocr-pdf"");
        return modelAndView;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,overlayImage,String overlayImage(Model),"[146, 151]","{'A233': [(146, 151)]}",{'A233': 1.0},A233,,"    @GetMapping(""/add-image"")
    @Hidden
    public String overlayImage(Model model) {
        model.addAttribute(""currentPage"", ""add-image"");
        return ""misc/add-image"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,contrast,String contrast(Model),"[153, 158]","{'A233': [(153, 158)]}",{'A233': 1.0},A233,,"    @GetMapping(""/adjust-contrast"")
    @Hidden
    public String contrast(Model model) {
        model.addAttribute(""currentPage"", ""adjust-contrast"");
        return ""misc/adjust-contrast"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,repairForm,String repairForm(Model),"[160, 165]","{'A233': [(160, 165)]}",{'A233': 1.0},A233,,"    @GetMapping(""/repair"")
    @Hidden
    public String repairForm(Model model) {
        model.addAttribute(""currentPage"", ""repair"");
        return ""misc/repair"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,removeBlanksForm,String removeBlanksForm(Model),"[167, 172]","{'A233': [(167, 172)]}",{'A233': 1.0},A233,,"    @GetMapping(""/remove-blanks"")
    @Hidden
    public String removeBlanksForm(Model model) {
        model.addAttribute(""currentPage"", ""remove-blanks"");
        return ""misc/remove-blanks"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,removeAnnotationsForm,String removeAnnotationsForm(Model),"[174, 179]","{'A246': [(174, 179)]}",{'A246': 1.0},A246,,"    @GetMapping(""/remove-annotations"")
    @Hidden
    public String removeAnnotationsForm(Model model) {
        model.addAttribute(""currentPage"", ""remove-annotations"");
        return ""misc/remove-annotations"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,autoCropForm,String autoCropForm(Model),"[181, 186]","{'A233': [(181, 186)]}",{'A233': 1.0},A233,,"    @GetMapping(""/auto-crop"")
    @Hidden
    public String autoCropForm(Model model) {
        model.addAttribute(""currentPage"", ""auto-crop"");
        return ""misc/auto-crop"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,autoRenameForm,String autoRenameForm(Model),"[188, 193]","{'A233': [(188, 193)]}",{'A233': 1.0},A233,,"    @GetMapping(""/auto-rename"")
    @Hidden
    public String autoRenameForm(Model model) {
        model.addAttribute(""currentPage"", ""auto-rename"");
        return ""misc/auto-rename"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java,OtherWebController,attachmentsForm,String attachmentsForm(Model),"[195, 200]","{'A236': [(195, 200)]}",{'A236': 1.0},A236,,"    @GetMapping(""/add-attachments"")
    @Hidden
    public String attachmentsForm(Model model) {
        model.addAttribute(""currentPage"", ""add-attachments"");
        return ""misc/add-attachments"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/SignatureController.java,SignatureController,getSignature,ResponseEntity<byte[]> getSignature(String),"[32, 48]","{'A233': [(32, 48)]}",{'A233': 1.0},A233,,"    @GetMapping(""/sign/{fileName}"")
    public ResponseEntity<byte[]> getSignature(@PathVariable(name = ""fileName"") String fileName)
            throws IOException {
        String username = ""NON_SECURITY_USER"";
        if (userService != null) {
            username = userService.getCurrentUsername();
        }
        // Verify access permission
        if (!signatureService.hasAccessToFile(username, fileName)) {
            return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
        }
        byte[] imageBytes = signatureService.getSignatureBytes(username, fileName);
        return ResponseEntity.ok()
                .contentType( // Adjust based on file type
                        MediaType.IMAGE_JPEG)
                .body(imageBytes);
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java,HomeWebController,gameForm,String gameForm(Model),"[35, 40]","{'A233': [(35, 40)]}",{'A233': 1.0},A233,,"    @GetMapping(""/about"")
    @Hidden
    public String gameForm(Model model) {
        model.addAttribute(""currentPage"", ""about"");
        return ""about"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java,HomeWebController,licensesForm,String licensesForm(Model),"[42, 57]","{'A233': [(42, 53), (55, 57)], 'A238': [(54, 54)]}","{'A233': 0.9375, 'A238': 0.0625}",A233,,"    @GetMapping(""/licenses"")
    @Hidden
    public String licensesForm(Model model) {
        model.addAttribute(""currentPage"", ""licenses"");
        Resource resource = new ClassPathResource(""static/3rdPartyLicenses.json"");
        try {
            InputStream is = resource.getInputStream();
            String json = new String(is.readAllBytes(), StandardCharsets.UTF_8);
            ObjectMapper mapper = new ObjectMapper();
            Map<String, List<Dependency>> data = mapper.readValue(json, new TypeReference<>() {});
            model.addAttribute(""dependencies"", data.get(""dependencies""));
        } catch (IOException e) {
            log.error(""exception"", e);
        }
        return ""licenses"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java,HomeWebController,getReleaseNotes,String getReleaseNotes(Model),"[59, 62]","{'A233': [(59, 62)]}",{'A233': 1.0},A233,,"    @GetMapping(""/releases"")
    public String getReleaseNotes(Model model) {
        return ""releases"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java,HomeWebController,home,String home(Model),"[64, 71]","{'A233': [(64, 66), (70, 71)], 'A280': [(67, 69)]}","{'A233': 0.625, 'A280': 0.375}",A233,,"    @GetMapping(""/"")
    public String home(Model model) {
        model.addAttribute(""currentPage"", ""home"");
        String showSurvey = System.getenv(""SHOW_SURVEY"");
        boolean showSurveyValue = showSurvey == null || ""true"".equalsIgnoreCase(showSurvey);
        model.addAttribute(""showSurveyFromDocker"", showSurveyValue);
        return ""home"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java,HomeWebController,root,String root(Model),"[73, 76]","{'A233': [(73, 76)]}",{'A233': 1.0},A233,,"    @GetMapping(""/home"")
    public String root(Model model) {
        return ""redirect:/"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java,HomeWebController,redirectHomeLegacy,String redirectHomeLegacy(),"[78, 81]","{'A283': [(78, 78), (81, 81)], 'A269': [(79, 80)]}","{'A283': 0.5, 'A269': 0.5}",A283,,"    @GetMapping(""/home-legacy"")
    public String redirectHomeLegacy() {
        return ""redirect:/"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java,HomeWebController,getRobotsTxt,String getRobotsTxt(),"[83, 93]","{'A233': [(83, 93)]}",{'A233': 1.0},A233,,"    @GetMapping(value = ""/robots.txt"", produces = MediaType.TEXT_PLAIN_VALUE)
    @ResponseBody
    @Hidden
    public String getRobotsTxt() {
        Boolean allowGoogle = applicationProperties.getSystem().getGooglevisibility();
        if (Boolean.TRUE.equals(allowGoogle)) {
            return ""User-agent: Googlebot\nAllow: /\n\nUser-agent: *\nAllow: /"";
        } else {
            return ""User-agent: Googlebot\nDisallow: /\n\nUser-agent: *\nDisallow: /"";
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,convertImgToPdfForm,String convertImgToPdfForm(Model),"[17, 22]","{'A233': [(17, 22)]}",{'A233': 1.0},A233,,"    @GetMapping(""/img-to-pdf"")
    @Hidden
    public String convertImgToPdfForm(Model model) {
        model.addAttribute(""currentPage"", ""img-to-pdf"");
        return ""convert/img-to-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,convertHTMLToPdfForm,String convertHTMLToPdfForm(Model),"[24, 29]","{'A233': [(24, 29)]}",{'A233': 1.0},A233,,"    @GetMapping(""/html-to-pdf"")
    @Hidden
    public String convertHTMLToPdfForm(Model model) {
        model.addAttribute(""currentPage"", ""html-to-pdf"");
        return ""convert/html-to-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,convertMarkdownToPdfForm,String convertMarkdownToPdfForm(Model),"[31, 36]","{'A233': [(31, 36)]}",{'A233': 1.0},A233,,"    @GetMapping(""/markdown-to-pdf"")
    @Hidden
    public String convertMarkdownToPdfForm(Model model) {
        model.addAttribute(""currentPage"", ""markdown-to-pdf"");
        return ""convert/markdown-to-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,convertPdfToMarkdownForm,String convertPdfToMarkdownForm(Model),"[38, 43]","{'A233': [(38, 43)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-to-markdown"")
    @Hidden
    public String convertPdfToMarkdownForm(Model model) {
        model.addAttribute(""currentPage"", ""pdf-to-markdown"");
        return ""convert/pdf-to-markdown"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,convertURLToPdfForm,String convertURLToPdfForm(Model),"[45, 50]","{'A233': [(45, 50)]}",{'A233': 1.0},A233,,"    @GetMapping(""/url-to-pdf"")
    @Hidden
    public String convertURLToPdfForm(Model model) {
        model.addAttribute(""currentPage"", ""url-to-pdf"");
        return ""convert/url-to-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,convertToPdfForm,String convertToPdfForm(Model),"[52, 57]","{'A233': [(52, 57)]}",{'A233': 1.0},A233,,"    @GetMapping(""/file-to-pdf"")
    @Hidden
    public String convertToPdfForm(Model model) {
        model.addAttribute(""currentPage"", ""file-to-pdf"");
        return ""convert/file-to-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,pdfToimgForm,String pdfToimgForm(Model),"[61, 68]","{'A234': [(61, 68)]}",{'A234': 1.0},A234,,"    @GetMapping(""/pdf-to-img"")
    @Hidden
    public String pdfToimgForm(Model model) {
        boolean isPython = CheckProgramInstall.isPythonAvailable();
        model.addAttribute(""isPython"", isPython);
        model.addAttribute(""currentPage"", ""pdf-to-img"");
        return ""convert/pdf-to-img"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,pdfToHTML,ModelAndView pdfToHTML(),"[70, 76]","{'A233': [(70, 76)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-to-html"")
    @Hidden
    public ModelAndView pdfToHTML() {
        ModelAndView modelAndView = new ModelAndView(""convert/pdf-to-html"");
        modelAndView.addObject(""currentPage"", ""pdf-to-html"");
        return modelAndView;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,pdfToPresentation,ModelAndView pdfToPresentation(),"[78, 84]","{'A233': [(78, 84)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-to-presentation"")
    @Hidden
    public ModelAndView pdfToPresentation() {
        ModelAndView modelAndView = new ModelAndView(""convert/pdf-to-presentation"");
        modelAndView.addObject(""currentPage"", ""pdf-to-presentation"");
        return modelAndView;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,pdfToText,ModelAndView pdfToText(),"[86, 92]","{'A233': [(86, 92)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-to-text"")
    @Hidden
    public ModelAndView pdfToText() {
        ModelAndView modelAndView = new ModelAndView(""convert/pdf-to-text"");
        modelAndView.addObject(""currentPage"", ""pdf-to-text"");
        return modelAndView;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,pdfToWord,ModelAndView pdfToWord(),"[94, 100]","{'A233': [(94, 100)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-to-word"")
    @Hidden
    public ModelAndView pdfToWord() {
        ModelAndView modelAndView = new ModelAndView(""convert/pdf-to-word"");
        modelAndView.addObject(""currentPage"", ""pdf-to-word"");
        return modelAndView;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,pdfToXML,ModelAndView pdfToXML(),"[102, 108]","{'A233': [(102, 108)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-to-xml"")
    @Hidden
    public ModelAndView pdfToXML() {
        ModelAndView modelAndView = new ModelAndView(""convert/pdf-to-xml"");
        modelAndView.addObject(""currentPage"", ""pdf-to-xml"");
        return modelAndView;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,pdfToCSV,ModelAndView pdfToCSV(),"[110, 116]","{'A233': [(110, 116)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-to-csv"")
    @Hidden
    public ModelAndView pdfToCSV() {
        ModelAndView modelAndView = new ModelAndView(""convert/pdf-to-csv"");
        modelAndView.addObject(""currentPage"", ""pdf-to-csv"");
        return modelAndView;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,pdfToPdfAForm,String pdfToPdfAForm(Model),"[118, 123]","{'A233': [(118, 123)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-to-pdfa"")
    @Hidden
    public String pdfToPdfAForm(Model model) {
        model.addAttribute(""currentPage"", ""pdf-to-pdfa"");
        return ""convert/pdf-to-pdfa"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java,ConverterWebController,convertEmlToPdfForm,String convertEmlToPdfForm(Model),"[125, 130]","{'A248': [(125, 130)]}",{'A248': 1.0},A248,,"    @GetMapping(""/eml-to-pdf"")
    @Hidden
    public String convertEmlToPdfForm(Model model) {
        model.addAttribute(""currentPage"", ""eml-to-pdf"");
        return ""convert/eml-to-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,pipelineForm,String pipelineForm(Model),"[56, 104]","{'A233': [(56, 62), (64, 91), (93, 104)], 'A236': [(63, 63)], 'A238': [(92, 92)]}","{'A233': 0.9591836734693877, 'A236': 0.02040816326530612, 'A238': 0.02040816326530612}",A233,,"    @GetMapping(""/pipeline"")
    @Hidden
    public String pipelineForm(Model model) {
        model.addAttribute(""currentPage"", ""pipeline"");
        List<String> pipelineConfigs = new ArrayList<>();
        List<Map<String, String>> pipelineConfigsWithNames = new ArrayList<>();
        if (new File(runtimePathConfig.getPipelineDefaultWebUiConfigs()).exists()) {
            try (Stream<Path> paths =
                    Files.walk(Paths.get(runtimePathConfig.getPipelineDefaultWebUiConfigs()))) {
                List<Path> jsonFiles =
                        paths.filter(Files::isRegularFile)
                                .filter(p -> p.toString().endsWith("".json""))
                                .toList();
                for (Path jsonFile : jsonFiles) {
                    String content = Files.readString(jsonFile, StandardCharsets.UTF_8);
                    pipelineConfigs.add(content);
                }
                for (String config : pipelineConfigs) {
                    Map<String, Object> jsonContent =
                            new ObjectMapper()
                                    .readValue(config, new TypeReference<Map<String, Object>>() {});
                    String name = (String) jsonContent.get(""name"");
                    if (name == null || name.length() < 1) {
                        String filename =
                                jsonFiles
                                        .get(pipelineConfigs.indexOf(config))
                                        .getFileName()
                                        .toString();
                        name = filename.substring(0, filename.lastIndexOf('.'));
                    }
                    Map<String, String> configWithName = new HashMap<>();
                    configWithName.put(""json"", config);
                    configWithName.put(""name"", name);
                    pipelineConfigsWithNames.add(configWithName);
                }
            } catch (IOException e) {
                log.error(""exception"", e);
            }
        }
        if (pipelineConfigsWithNames.size() == 0) {
            Map<String, String> configWithName = new HashMap<>();
            configWithName.put(""json"", """");
            configWithName.put(""name"", ""No preloaded configs found"");
            pipelineConfigsWithNames.add(configWithName);
        }
        model.addAttribute(""pipelineConfigsWithNames"", pipelineConfigsWithNames);
        model.addAttribute(""pipelineConfigs"", pipelineConfigs);
        return ""pipeline"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,mergePdfForm,String mergePdfForm(Model),"[106, 111]","{'A233': [(106, 111)]}",{'A233': 1.0},A233,,"    @GetMapping(""/merge-pdfs"")
    @Hidden
    public String mergePdfForm(Model model) {
        model.addAttribute(""currentPage"", ""merge-pdfs"");
        return ""merge-pdfs"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,splitPdfBySections,String splitPdfBySections(Model),"[113, 118]","{'A233': [(113, 118)]}",{'A233': 1.0},A233,,"    @GetMapping(""/split-pdf-by-sections"")
    @Hidden
    public String splitPdfBySections(Model model) {
        model.addAttribute(""currentPage"", ""split-pdf-by-sections"");
        return ""split-pdf-by-sections"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,splitPdfByChapters,String splitPdfByChapters(Model),"[120, 125]","{'A233': [(120, 125)]}",{'A233': 1.0},A233,,"    @GetMapping(""/split-pdf-by-chapters"")
    @Hidden
    public String splitPdfByChapters(Model model) {
        model.addAttribute(""currentPage"", ""split-pdf-by-chapters"");
        return ""split-pdf-by-chapters"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,ViewPdfForm2,String ViewPdfForm2(Model),"[127, 132]","{'A284': [(127, 132)]}",{'A284': 1.0},A284,,"    @GetMapping(""/view-pdf"")
    @Hidden
    public String ViewPdfForm2(Model model) {
        model.addAttribute(""currentPage"", ""view-pdf"");
        return ""view-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,editTableOfContents,String editTableOfContents(Model),"[134, 139]","{'A233': [(134, 139)]}",{'A233': 1.0},A233,,"    @GetMapping(""/edit-table-of-contents"")
    @Hidden
    public String editTableOfContents(Model model) {
        model.addAttribute(""currentPage"", ""edit-table-of-contents"");
        return ""edit-table-of-contents"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,multiToolForm,String multiToolForm(Model),"[141, 146]","{'A233': [(141, 146)]}",{'A233': 1.0},A233,,"    @GetMapping(""/multi-tool"")
    @Hidden
    public String multiToolForm(Model model) {
        model.addAttribute(""currentPage"", ""multi-tool"");
        return ""multi-tool"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,pageDeleter,String pageDeleter(Model),"[148, 153]","{'A233': [(148, 153)]}",{'A233': 1.0},A233,,"    @GetMapping(""/remove-pages"")
    @Hidden
    public String pageDeleter(Model model) {
        model.addAttribute(""currentPage"", ""remove-pages"");
        return ""remove-pages"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,pageOrganizer,String pageOrganizer(Model),"[155, 160]","{'A233': [(155, 160)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-organizer"")
    @Hidden
    public String pageOrganizer(Model model) {
        model.addAttribute(""currentPage"", ""pdf-organizer"");
        return ""pdf-organizer"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,extractPages,String extractPages(Model),"[162, 167]","{'A233': [(162, 167)]}",{'A233': 1.0},A233,,"    @GetMapping(""/extract-page"")
    @Hidden
    public String extractPages(Model model) {
        model.addAttribute(""currentPage"", ""extract-page"");
        return ""extract-page"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,pdfToSinglePage,String pdfToSinglePage(Model),"[169, 174]","{'A233': [(169, 174)]}",{'A233': 1.0},A233,,"    @GetMapping(""/pdf-to-single-page"")
    @Hidden
    public String pdfToSinglePage(Model model) {
        model.addAttribute(""currentPage"", ""pdf-to-single-page"");
        return ""pdf-to-single-page"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,rotatePdfForm,String rotatePdfForm(Model),"[176, 181]","{'A233': [(176, 181)]}",{'A233': 1.0},A233,,"    @GetMapping(""/rotate-pdf"")
    @Hidden
    public String rotatePdfForm(Model model) {
        model.addAttribute(""currentPage"", ""rotate-pdf"");
        return ""rotate-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,splitPdfForm,String splitPdfForm(Model),"[183, 188]","{'A233': [(183, 188)]}",{'A233': 1.0},A233,,"    @GetMapping(""/split-pdfs"")
    @Hidden
    public String splitPdfForm(Model model) {
        model.addAttribute(""currentPage"", ""split-pdfs"");
        return ""split-pdfs"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,signForm,String signForm(Model),"[190, 203]","{'A233': [(190, 203)]}",{'A233': 1.0},A233,,"    @GetMapping(""/sign"")
    @Hidden
    public String signForm(Model model) {
        String username = """";
        if (userService != null) {
            username = userService.getCurrentUsername();
        }
        // Get signatures from both personal and ALL_USERS folders
        List<SignatureFile> signatures = signatureService.getAvailableSignatures(username);
        model.addAttribute(""currentPage"", ""sign"");
        model.addAttribute(""fonts"", getFontNames());
        model.addAttribute(""signatures"", signatures);
        return ""sign"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,multiPageLayoutForm,String multiPageLayoutForm(Model),"[205, 210]","{'A233': [(205, 210)]}",{'A233': 1.0},A233,,"    @GetMapping(""/multi-page-layout"")
    @Hidden
    public String multiPageLayoutForm(Model model) {
        model.addAttribute(""currentPage"", ""multi-page-layout"");
        return ""multi-page-layout"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,scalePagesFrom,String scalePagesFrom(Model),"[212, 217]","{'A233': [(212, 217)]}",{'A233': 1.0},A233,,"    @GetMapping(""/scale-pages"")
    @Hidden
    public String scalePagesFrom(Model model) {
        model.addAttribute(""currentPage"", ""scale-pages"");
        return ""scale-pages"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,splitBySizeOrCount,String splitBySizeOrCount(Model),"[219, 224]","{'A233': [(219, 224)]}",{'A233': 1.0},A233,,"    @GetMapping(""/split-by-size-or-count"")
    @Hidden
    public String splitBySizeOrCount(Model model) {
        model.addAttribute(""currentPage"", ""split-by-size-or-count"");
        return ""split-by-size-or-count"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,overlayPdf,String overlayPdf(Model),"[226, 231]","{'A233': [(226, 231)]}",{'A233': 1.0},A233,,"    @GetMapping(""/overlay-pdf"")
    @Hidden
    public String overlayPdf(Model model) {
        model.addAttribute(""currentPage"", ""overlay-pdf"");
        return ""overlay-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,getFontNames,List<FontResource> getFontNames(),"[233, 246]","{'A233': [(233, 239), (245, 246)], 'A234': [(240, 244)]}","{'A233': 0.6428571428571429, 'A234': 0.35714285714285715}",A233,,"    private List<FontResource> getFontNames() {
        List<FontResource> fontNames = new ArrayList<>();
        // Extract font names from classpath
        fontNames.addAll(getFontNamesFromLocation(""classpath:static/fonts/*.woff2""));
        // Extract font names from external directory
        fontNames.addAll(
                getFontNamesFromLocation(
                        ""file:""
                                + InstallationPathConfig.getStaticPath()
                                + ""fonts""
                                + File.separator
                                + ""*""));
        return fontNames;
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,getFontNamesFromLocation,List<FontResource> getFontNamesFromLocation(String),"[248, 279]","{'A233': [(248, 250), (252, 279)], 'A234': [(251, 251)]}","{'A233': 0.96875, 'A234': 0.03125}",A233,,"    private List<FontResource> getFontNamesFromLocation(String locationPattern) {
        try {
            Resource[] resources =
                    GeneralUtils.getResourcesFromLocationPattern(locationPattern, resourceLoader);
            return Arrays.stream(resources)
                    .map(
                            resource -> {
                                try {
                                    String filename = resource.getFilename();
                                    if (filename != null) {
                                        int lastDotIndex = filename.lastIndexOf('.');
                                        if (lastDotIndex != -1) {
                                            String name = filename.substring(0, lastDotIndex);
                                            String extension = filename.substring(lastDotIndex + 1);
                                            return new FontResource(name, extension);
                                        }
                                    }
                                    return null;
                                } catch (Exception e) {
                                    throw ExceptionUtils.createRuntimeException(
                                            ""error.fontLoadingFailed"",
                                            ""Error processing font file"",
                                            e);
                                }
                            })
                    .filter(Objects::nonNull)
                    .toList();
        } catch (Exception e) {
            throw ExceptionUtils.createRuntimeException(
                    ""error.fontDirectoryReadFailed"", ""Failed to read font directory"", e);
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,getFormatFromExtension,String getFormatFromExtension(String),"[281, 297]","{'A233': [(281, 297)]}",{'A233': 1.0},A233,,"    public String getFormatFromExtension(String extension) {
        switch (extension) {
            case ""ttf"":
                return ""truetype"";
            case ""woff"":
                return ""woff"";
            case ""woff2"":
                return ""woff2"";
            case ""eot"":
                return ""embedded-opentype"";
            case ""svg"":
                return ""svg"";
            default:
                // or throw an exception if an unexpected extension is encountered
                return """";
        }
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,cropForm,String cropForm(Model),"[299, 304]","{'A233': [(299, 304)]}",{'A233': 1.0},A233,,"    @GetMapping(""/crop"")
    @Hidden
    public String cropForm(Model model) {
        model.addAttribute(""currentPage"", ""crop"");
        return ""crop"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,autoSPlitPDFForm,String autoSPlitPDFForm(Model),"[306, 311]","{'A233': [(306, 311)]}",{'A233': 1.0},A233,,"    @GetMapping(""/auto-split-pdf"")
    @Hidden
    public String autoSPlitPDFForm(Model model) {
        model.addAttribute(""currentPage"", ""auto-split-pdf"");
        return ""auto-split-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController,removeImagePdfForm,String removeImagePdfForm(Model),"[313, 318]","{'A233': [(313, 318)]}",{'A233': 1.0},A233,,"    @GetMapping(""/remove-image-pdf"")
    @Hidden
    public String removeImagePdfForm(Model model) {
        model.addAttribute(""currentPage"", ""remove-image-pdf"");
        return ""remove-image-pdf"";
    }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController.FontResource,getName,String getName(),"[334, 336]","{'A233': [(334, 336)]}",{'A233': 1.0},A233,,"        public String getName() {
            return name;
        }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController.FontResource,setName,void setName(String),"[338, 340]","{'A233': [(338, 340)]}",{'A233': 1.0},A233,,"        public void setName(String name) {
            this.name = name;
        }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController.FontResource,getExtension,String getExtension(),"[342, 344]","{'A233': [(342, 344)]}",{'A233': 1.0},A233,,"        public String getExtension() {
            return extension;
        }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController.FontResource,setExtension,void setExtension(String),"[346, 348]","{'A233': [(346, 348)]}",{'A233': 1.0},A233,,"        public void setExtension(String extension) {
            this.extension = extension;
        }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController.FontResource,getType,String getType(),"[350, 352]","{'A233': [(350, 352)]}",{'A233': 1.0},A233,,"        public String getType() {
            return type;
        }
"
stirling.software.SPDF.controller.web,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java,GeneralWebController.FontResource,setType,void setType(String),"[354, 356]","{'A233': [(354, 356)]}",{'A233': 1.0},A233,,"        public void setType(String type) {
            this.type = type;
        }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/ApiDocService.java,ApiDocService,getApiDocsUrl,String getApiDocsUrl(),"[48, 52]","{'A236': [(50, 50)], 'A233': [(48, 49), (51, 52)]}","{'A236': 0.2, 'A233': 0.8}",A233,,"    private String getApiDocsUrl() {
        String contextPath = servletContext.getContextPath();
        String port = SPDFApplication.getStaticPort();
        return ""http://localhost:"" + port + contextPath + ""/v1/api-docs"";
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/ApiDocService.java,ApiDocService,getExtensionTypes,"List<String> getExtensionTypes(boolean,String)","[54, 99]","{'A233': [(54, 73), (75, 99)], 'A246': [(74, 74)]}","{'A233': 0.9782608695652174, 'A246': 0.021739130434782608}",A233,,"    public List<String> getExtensionTypes(boolean output, String operationName) {
        if (outputToFileTypes.size() == 0) {
            outputToFileTypes.put(""PDF"", Arrays.asList(""pdf""));
            outputToFileTypes.put(
                    ""IMAGE"",
                    Arrays.asList(
                            ""png"", ""jpg"", ""jpeg"", ""gif"", ""webp"", ""bmp"", ""tif"", ""tiff"", ""svg"", ""psd"",
                            ""ai"", ""eps""));
            outputToFileTypes.put(
                    ""ZIP"",
                    Arrays.asList(""zip"", ""rar"", ""7z"", ""tar"", ""gz"", ""bz2"", ""xz"", ""lz"", ""lzma"", ""z""));
            outputToFileTypes.put(""WORD"", Arrays.asList(""doc"", ""docx"", ""odt"", ""rtf""));
            outputToFileTypes.put(""CSV"", Arrays.asList(""csv""));
            outputToFileTypes.put(""JS"", Arrays.asList(""js"", ""jsx""));
            outputToFileTypes.put(""HTML"", Arrays.asList(""html"", ""htm"", ""xhtml""));
            outputToFileTypes.put(""JSON"", Arrays.asList(""json""));
            outputToFileTypes.put(""TXT"", Arrays.asList(""txt"", ""text"", ""md"", ""markdown""));
            outputToFileTypes.put(""PPT"", Arrays.asList(""ppt"", ""pptx"", ""odp""));
            outputToFileTypes.put(""XML"", Arrays.asList(""xml"", ""xsd"", ""xsl""));
            outputToFileTypes.put(
                    ""BOOK"", Arrays.asList(""epub"", ""mobi"", ""azw3"", ""fb2"", ""txt"", ""docx""));
            // type.
        }
        if (apiDocsJsonRootNode == null || apiDocumentation.size() == 0) {
            loadApiDocumentation();
        }
        if (!apiDocumentation.containsKey(operationName)) {
            return null;
        }
        ApiEndpoint endpoint = apiDocumentation.get(operationName);
        String description = endpoint.getDescription();
        Pattern pattern = null;
        if (output) {
            pattern = Pattern.compile(""Output:(\\w+)"");
        } else {
            pattern = Pattern.compile(""Input:(\\w+)"");
        }
        Matcher matcher = pattern.matcher(description);
        while (matcher.find()) {
            String type = matcher.group(1).toUpperCase();
            if (outputToFileTypes.containsKey(type)) {
                return outputToFileTypes.get(type);
            }
        }
        return null;
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/ApiDocService.java,ApiDocService,getApiKeyForUser,String getApiKeyForUser(),"[101, 104]","{'A233': [(101, 104)]}",{'A233': 1.0},A233,,"    private String getApiKeyForUser() {
        if (userService == null) return """";
        return userService.getApiKeyForUser(Role.INTERNAL_API_USER.getRoleId());
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/ApiDocService.java,ApiDocService,loadApiDocumentation,void loadApiDocumentation(),"[107, 138]","{'A233': [(107, 122), (125, 135), (137, 138)], 'A238': [(136, 136)], 'A234': [(123, 124)]}","{'A233': 0.90625, 'A238': 0.03125, 'A234': 0.0625}",A233,,"    private synchronized void loadApiDocumentation() {
        String apiDocsJson = """";
        try {
            HttpHeaders headers = new HttpHeaders();
            String apiKey = getApiKeyForUser();
            if (!apiKey.isEmpty()) {
                headers.set(""X-API-KEY"", apiKey);
            }
            HttpEntity<String> entity = new HttpEntity<>(headers);
            RestTemplate restTemplate = new RestTemplate();
            ResponseEntity<String> response =
                    restTemplate.exchange(getApiDocsUrl(), HttpMethod.GET, entity, String.class);
            apiDocsJson = response.getBody();
            ObjectMapper mapper = new ObjectMapper();
            apiDocsJsonRootNode = mapper.readTree(apiDocsJson);
            JsonNode paths = apiDocsJsonRootNode.path(""paths"");
            paths.propertyStream()
                    .forEach(
                            entry -> {
                                String path = entry.getKey();
                                JsonNode pathNode = entry.getValue();
                                if (pathNode.has(""post"")) {
                                    JsonNode postNode = pathNode.get(""post"");
                                    ApiEndpoint endpoint = new ApiEndpoint(path, postNode);
                                    apiDocumentation.put(path, endpoint);
                                }
                            });
        } catch (Exception e) {
            // Handle exceptions
            log.error(""Error grabbing swagger doc, body result {}"", apiDocsJson);
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/ApiDocService.java,ApiDocService,isValidOperation,"boolean isValidOperation(String,Map<String, Object>)","[140, 149]","{'A233': [(140, 149)]}",{'A233': 1.0},A233,,"    public boolean isValidOperation(String operationName, Map<String, Object> parameters) {
        if (apiDocumentation.size() == 0) {
            loadApiDocumentation();
        }
        if (!apiDocumentation.containsKey(operationName)) {
            return false;
        }
        ApiEndpoint endpoint = apiDocumentation.get(operationName);
        return endpoint.areParametersValid(parameters);
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/ApiDocService.java,ApiDocService,isMultiInput,boolean isMultiInput(String),"[151, 167]","{'A233': [(151, 167)]}",{'A233': 1.0},A233,,"    public boolean isMultiInput(String operationName) {
        if (apiDocsJsonRootNode == null || apiDocumentation.size() == 0) {
            loadApiDocumentation();
        }
        if (!apiDocumentation.containsKey(operationName)) {
            return false;
        }
        ApiEndpoint endpoint = apiDocumentation.get(operationName);
        String description = endpoint.getDescription();
        Pattern pattern = Pattern.compile(""Type:(\\w+)"");
        Matcher matcher = pattern.matcher(description);
        if (matcher.find()) {
            String type = matcher.group(1);
            return type.startsWith(""MI"");
        }
        return false;
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/LanguageService.java,LanguageService,getSupportedLanguages,Set<String> getSupportedLanguages(),"[29, 55]","{'A234': [(29, 30), (32, 55)], 'A233': [(31, 31)]}","{'A234': 0.9629629629629629, 'A233': 0.037037037037037035}",A234,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/LanguageServiceTest.java,"    public Set<String> getSupportedLanguages() {
        try {
            Resource[] resources = getResourcesFromPattern(""classpath*:messages_*.properties"");

            return Arrays.stream(resources)
                    .map(Resource::getFilename)
                    .filter(
                            filename ->
                                    filename != null
                                            && filename.startsWith(""messages_"")
                                            && filename.endsWith("".properties""))
                    .map(filename -> filename.replace(""messages_"", """").replace("".properties"", """"))
                    .filter(
                            languageCode -> {
                                Set<String> allowedLanguages =
                                        new HashSet<>(applicationProperties.getUi().getLanguages());
                                return allowedLanguages.isEmpty()
                                        || allowedLanguages.contains(languageCode)
                                        || ""en_GB"".equals(languageCode);
                            })
                    .collect(Collectors.toSet());

        } catch (IOException e) {
            log.error(""Error retrieving supported languages"", e);
            return new HashSet<>();
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/LanguageService.java,LanguageService,getResourcesFromPattern,Resource[] getResourcesFromPattern(String),"[58, 60]","{'A233': [(58, 60)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/LanguageServiceTest.java,"    protected Resource[] getResourcesFromPattern(String pattern) throws IOException {
        return resourcePatternResolver.getResources(pattern);
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/SignatureService.java,SignatureService,hasAccessToFile,"boolean hasAccessToFile(String,String)","[30, 37]","{'A233': [(30, 37)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/SignatureServiceTest.java,"    public boolean hasAccessToFile(String username, String fileName) throws IOException {
        validateFileName(fileName);
        // Check if file exists in user's personal folder or ALL_USERS folder
        Path userPath = Paths.get(SIGNATURE_BASE_PATH, username, fileName);
        Path allUsersPath = Paths.get(SIGNATURE_BASE_PATH, ALL_USERS_FOLDER, fileName);

        return Files.exists(userPath) || Files.exists(allUsersPath);
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/SignatureService.java,SignatureService,getAvailableSignatures,List<SignatureFile> getAvailableSignatures(String),"[39, 65]","{'A233': [(39, 65)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/SignatureServiceTest.java,"    public List<SignatureFile> getAvailableSignatures(String username) {
        List<SignatureFile> signatures = new ArrayList<>();

        // Get signatures from user's personal folder
        if (!StringUtils.isEmptyOrWhitespace(username)) {
            Path userFolder = Paths.get(SIGNATURE_BASE_PATH, username);
            if (Files.exists(userFolder)) {
                try {
                    signatures.addAll(getSignaturesFromFolder(userFolder, ""Personal""));
                } catch (IOException e) {
                    log.error(""Error reading user signatures folder"", e);
                }
            }
        }

        // Get signatures from ALL_USERS folder
        Path allUsersFolder = Paths.get(SIGNATURE_BASE_PATH, ALL_USERS_FOLDER);
        if (Files.exists(allUsersFolder)) {
            try {
                signatures.addAll(getSignaturesFromFolder(allUsersFolder, ""Shared""));
            } catch (IOException e) {
                log.error(""Error reading shared signatures folder"", e);
            }
        }

        return signatures;
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/SignatureService.java,SignatureService,getSignaturesFromFolder,"List<SignatureFile> getSignaturesFromFolder(Path,String)","[67, 73]","{'A233': [(67, 73)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/SignatureServiceTest.java,"    private List<SignatureFile> getSignaturesFromFolder(Path folder, String category)
            throws IOException {
        return Files.list(folder)
                .filter(path -> isImageFile(path))
                .map(path -> new SignatureFile(path.getFileName().toString(), category))
                .toList();
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/SignatureService.java,SignatureService,getSignatureBytes,"byte[] getSignatureBytes(String,String)","[75, 90]","{'A233': [(75, 90)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/SignatureServiceTest.java,"    public byte[] getSignatureBytes(String username, String fileName) throws IOException {
        validateFileName(fileName);
        // First try user's personal folder
        Path userPath = Paths.get(SIGNATURE_BASE_PATH, username, fileName);
        if (Files.exists(userPath)) {
            return Files.readAllBytes(userPath);
        }

        // Then try ALL_USERS folder
        Path allUsersPath = Paths.get(SIGNATURE_BASE_PATH, ALL_USERS_FOLDER, fileName);
        if (Files.exists(allUsersPath)) {
            return Files.readAllBytes(allUsersPath);
        }

        throw new FileNotFoundException(""Signature file not found"");
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/SignatureService.java,SignatureService,isImageFile,boolean isImageFile(Path),"[92, 98]","{'A233': [(92, 98)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/SignatureServiceTest.java,"    private boolean isImageFile(Path path) {
        String fileName = path.getFileName().toString().toLowerCase();
        return fileName.endsWith("".jpg"")
                || fileName.endsWith("".jpeg"")
                || fileName.endsWith("".png"")
                || fileName.endsWith("".gif"");
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/SignatureService.java,SignatureService,validateFileName,void validateFileName(String),"[100, 104]","{'A233': [(100, 104)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/SignatureServiceTest.java,"    private void validateFileName(String fileName) {
        if (fileName.contains("".."") || fileName.contains(""/"") || fileName.contains(""\\"")) {
            throw new IllegalArgumentException(""Invalid filename"");
        }
    }
"
stirling.software.SPDF.service.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/misc/ReplaceAndInvertColorService.java,ReplaceAndInvertColorService,replaceAndInvertColor,"InputStreamResource replaceAndInvertColor(MultipartFile,ReplaceAndInvert,HighContrastColorCombination,String,String)","[21, 38]","{'A249': [(21, 38)]}",{'A249': 1.0},A249,,"    public InputStreamResource replaceAndInvertColor(
            MultipartFile file,
            ReplaceAndInvert replaceAndInvertOption,
            HighContrastColorCombination highContrastColorCombination,
            String backGroundColor,
            String textColor)
            throws IOException {

        ReplaceAndInvertColorStrategy replaceColorStrategy =
                replaceAndInvertColorFactory.replaceAndInvert(
                        file,
                        replaceAndInvertOption,
                        highContrastColorCombination,
                        backGroundColor,
                        textColor);

        return replaceColorStrategy.replace();
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java,PdfImageRemovalService,removeImagesFromPdf,PDDocument removeImagesFromPdf(PDDocument),"[28, 50]","{'A282': [(28, 50)]}",{'A282': 1.0},A282,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/PdfImageRemovalServiceTest.java,"    public PDDocument removeImagesFromPdf(PDDocument document) throws IOException {
        // Iterate over each page in the PDF document
        for (PDPage page : document.getPages()) {
            PDResources resources = page.getResources();
            // Collect the XObject names to remove
            List<COSName> namesToRemove = new ArrayList<>();

            // Iterate over all XObject names in the page's resources
            for (COSName name : resources.getXObjectNames()) {
                // Check if the XObject is an image
                if (resources.isImageXObject(name)) {
                    // Collect the name for removal
                    namesToRemove.add(name);
                }
            }

            // Now, modify the resources by removing the collected names
            for (COSName name : namesToRemove) {
                resources.put(name, (PDXObject) null);
            }
        }
        return document;
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java,MetricsAggregatorService,aggregateAndSendMetrics,void aggregateAndSendMetrics(),"[30, 90]","{'A233': [(30, 52), (54, 90)], 'A243': [(53, 53)]}","{'A233': 0.9836065573770492, 'A243': 0.01639344262295082}",A233,,"    @Scheduled(fixedRate = 7200000) // Run every 2 hours
    public void aggregateAndSendMetrics() {
        Map<String, Object> metrics = new HashMap<>();

        final boolean validateGetEndpoints = endpointInspector.getValidGetEndpoints().size() != 0;
        Search.in(meterRegistry)
                .name(""http.requests"")
                .counters()
                .forEach(
                        counter -> {
                            String method = counter.getId().getTag(""method"");
                            String uri = counter.getId().getTag(""uri"");
                            // Skip if either method or uri is null
                            if (method == null || uri == null) {
                                return;
                            }

                            // Skip URIs that are 2 characters or shorter
                            if (uri.length() <= 2) {
                                return;
                            }

                            // Skip non-GET and non-POST requests
                            if (!""GET"".equals(method) && !""POST"".equals(method)) {
                                return;
                            }

                            // For POST requests, only include if they start with /api/v1
                            if (""POST"".equals(method) && !uri.contains(""api/v1"")) {
                                return;
                            }

                            if (uri.contains("".txt"")) {
                                return;
                            }
                            // For GET requests, validate if we have a list of valid endpoints
                            if (""GET"".equals(method)
                                    && validateGetEndpoints
                                    && !endpointInspector.isValidGetEndpoint(uri)) {
                                logger.debug(""Skipping invalid GET endpoint: {}"", uri);
                                return;
                            }

                            String key =
                                    String.format(
                                            ""http_requests_%s_%s"", method, uri.replace(""/"", ""_""));
                            double currentCount = counter.count();
                            double lastCount = lastSentMetrics.getOrDefault(key, 0.0);
                            double difference = currentCount - lastCount;
                            if (difference > 0) {
                                logger.debug(""{}, {}"", key, difference);
                                metrics.put(key, difference);
                                lastSentMetrics.put(key, currentCount);
                            }
                        });
        // Send aggregated metrics to PostHog
        if (!metrics.isEmpty()) {

            postHogService.captureEvent(""aggregated_metrics"", metrics);
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java,CertificateValidationService,initializeTrustStore,void initializeTrustStore(),"[19, 24]","{'A233': [(19, 24)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/CertificateValidationServiceTest.java,"    @PostConstruct
    private void initializeTrustStore() throws Exception {
        trustStore = KeyStore.getInstance(KeyStore.getDefaultType());
        trustStore.load(null, null);
        loadMozillaCertificates();
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java,CertificateValidationService,loadMozillaCertificates,void loadMozillaCertificates(),"[26, 58]","{'A233': [(26, 58)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/CertificateValidationServiceTest.java,"    private void loadMozillaCertificates() throws Exception {
        try (InputStream is = getClass().getResourceAsStream(""/certdata.txt"")) {
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            String line;
            StringBuilder certData = new StringBuilder();
            boolean inCert = false;
            int certCount = 0;

            while ((line = BoundedLineReader.readLine(reader, 5_000_000)) != null) {
                if (line.startsWith(""CKA_VALUE MULTILINE_OCTAL"")) {
                    inCert = true;
                    certData = new StringBuilder();
                    continue;
                }
                if (inCert) {
                    if (""END"".equals(line)) {
                        inCert = false;
                        byte[] certBytes = parseOctalData(certData.toString());
                        if (certBytes != null) {
                            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
                            X509Certificate cert =
                                    (X509Certificate)
                                            cf.generateCertificate(
                                                    new ByteArrayInputStream(certBytes));
                            trustStore.setCertificateEntry(""mozilla-cert-"" + certCount++, cert);
                        }
                    } else {
                        certData.append(line).append(""\n"");
                    }
                }
            }
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java,CertificateValidationService,parseOctalData,byte[] parseOctalData(String),"[60, 74]","{'A233': [(60, 74)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/CertificateValidationServiceTest.java,"    private byte[] parseOctalData(String data) {
        try {
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            String[] tokens = data.split(""\\\\"");
            for (String token : tokens) {
                token = token.trim();
                if (!token.isEmpty()) {
                    baos.write(Integer.parseInt(token, 8));
                }
            }
            return baos.toByteArray();
        } catch (Exception e) {
            return null;
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java,CertificateValidationService,validateCertificateChain,boolean validateCertificateChain(X509Certificate),"[76, 99]","{'A233': [(76, 86), (89, 99)], 'A234': [(87, 88)]}","{'A233': 0.9166666666666666, 'A234': 0.08333333333333333}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/CertificateValidationServiceTest.java,"    public boolean validateCertificateChain(X509Certificate cert) {
        try {
            CertPathValidator validator = CertPathValidator.getInstance(""PKIX"");
            CertificateFactory cf = CertificateFactory.getInstance(""X.509"");
            List<X509Certificate> certList = Arrays.asList(cert);
            CertPath certPath = cf.generateCertPath(certList);

            Set<TrustAnchor> anchors = new HashSet<>();
            Enumeration<String> aliases = trustStore.aliases();
            while (aliases.hasMoreElements()) {
                Object trustCert = trustStore.getCertificate(aliases.nextElement());
                if (trustCert instanceof X509Certificate x509Cert) {
                    anchors.add(new TrustAnchor(x509Cert, null));
                }
            }

            PKIXParameters params = new PKIXParameters(anchors);
            params.setRevocationEnabled(false);
            validator.validate(certPath, params);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java,CertificateValidationService,validateTrustStore,boolean validateTrustStore(X509Certificate),"[101, 114]","{'A233': [(101, 114)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/CertificateValidationServiceTest.java,"    public boolean validateTrustStore(X509Certificate cert) {
        try {
            Enumeration<String> aliases = trustStore.aliases();
            while (aliases.hasMoreElements()) {
                Object trustCert = trustStore.getCertificate(aliases.nextElement());
                if (trustCert instanceof X509Certificate && cert.equals(trustCert)) {
                    return true;
                }
            }
            return false;
        } catch (KeyStoreException e) {
            return false;
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java,CertificateValidationService,isRevoked,boolean isRevoked(X509Certificate),"[116, 123]","{'A233': [(116, 123)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/CertificateValidationServiceTest.java,"    public boolean isRevoked(X509Certificate cert) {
        try {
            cert.checkValidity();
            return false;
        } catch (CertificateExpiredException | CertificateNotYetValidException e) {
            return true;
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java,CertificateValidationService,validateCertificateChainWithCustomCert,"boolean validateCertificateChainWithCustomCert(X509Certificate,X509Certificate)","[125, 133]","{'A233': [(125, 133)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/CertificateValidationServiceTest.java,"    public boolean validateCertificateChainWithCustomCert(
            X509Certificate cert, X509Certificate customCert) {
        try {
            cert.verify(customCert.getPublicKey());
            return true;
        } catch (Exception e) {
            return false;
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java,CertificateValidationService,validateTrustWithCustomCert,"boolean validateTrustWithCustomCert(X509Certificate,X509Certificate)","[135, 142]","{'A233': [(135, 142)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/CertificateValidationServiceTest.java,"    public boolean validateTrustWithCustomCert(X509Certificate cert, X509Certificate customCert) {
        try {
            // Compare the issuer of the signature certificate with the custom certificate
            return cert.getIssuerX500Principal().equals(customCert.getSubjectX500Principal());
        } catch (Exception e) {
            return false;
        }
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/AttachmentService.java,AttachmentService,addAttachment,"PDDocument addAttachment(PDDocument,List<MultipartFile>)","[28, 86]","{'A236': [(28, 86)]}",{'A236': 1.0},A236,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/AttachmentServiceTest.java,"    @Override
    public PDDocument addAttachment(PDDocument document, List<MultipartFile> attachments)
            throws IOException {
        PDEmbeddedFilesNameTreeNode embeddedFilesTree = getEmbeddedFilesTree(document);
        Map<String, PDComplexFileSpecification> existingNames;

        try {
            Map<String, PDComplexFileSpecification> names = embeddedFilesTree.getNames();

            if (names == null) {
                log.debug(""No existing embedded files found, creating new names map."");
                existingNames = new HashMap<>();
            } else {
                existingNames = new HashMap<>(names);
                log.debug(""Embedded files: {}"", existingNames.keySet());
            }
        } catch (IOException e) {
            log.error(""Could not retrieve existing embedded files"", e);
            throw e;
        }

        attachments.forEach(
                attachment -> {
                    String filename = attachment.getOriginalFilename();

                    try {
                        PDEmbeddedFile embeddedFile =
                                new PDEmbeddedFile(document, attachment.getInputStream());
                        embeddedFile.setSize((int) attachment.getSize());
                        embeddedFile.setCreationDate(new GregorianCalendar());
                        embeddedFile.setModDate(new GregorianCalendar());
                        String contentType = attachment.getContentType();
                        if (StringUtils.isNotBlank(contentType)) {
                            embeddedFile.setSubtype(contentType);
                        }

                        // Create attachments specification and associate embedded attachment with
                        // file
                        PDComplexFileSpecification fileSpecification =
                                new PDComplexFileSpecification();
                        fileSpecification.setFile(filename);
                        fileSpecification.setFileUnicode(filename);
                        fileSpecification.setFileDescription(""Embedded attachment: "" + filename);
                        fileSpecification.setEmbeddedFile(embeddedFile);
                        fileSpecification.setEmbeddedFileUnicode(embeddedFile);

                        existingNames.put(filename, fileSpecification);

                        log.info(""Added attachment: {} ({} bytes)"", filename, attachment.getSize());
                    } catch (IOException e) {
                        log.warn(""Failed to create embedded file for attachment: {}"", filename, e);
                    }
                });

        embeddedFilesTree.setNames(existingNames);
        setCatalogViewerPreferences(document, PageMode.USE_ATTACHMENTS);

        return document;
    }
"
stirling.software.SPDF.service,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/service/AttachmentService.java,AttachmentService,getEmbeddedFilesTree,PDEmbeddedFilesNameTreeNode getEmbeddedFilesTree(PDDocument),"[88, 104]","{'A236': [(88, 104)]}",{'A236': 1.0},A236,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/service/AttachmentServiceTest.java,"    private PDEmbeddedFilesNameTreeNode getEmbeddedFilesTree(PDDocument document) {
        PDDocumentCatalog catalog = document.getDocumentCatalog();
        PDDocumentNameDictionary documentNames = catalog.getNames();

        if (documentNames == null) {
            documentNames = new PDDocumentNameDictionary(catalog);
        }

        catalog.setNames(documentNames);
        PDEmbeddedFilesNameTreeNode embeddedFilesTree = documentNames.getEmbeddedFiles();

        if (embeddedFilesTree == null) {
            embeddedFilesTree = new PDEmbeddedFilesNameTreeNode();
            documentNames.setEmbeddedFiles(embeddedFilesTree);
        }
        return embeddedFilesTree;
    }
"
stirling.software.SPDF.pdf,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/pdf/TextFinder.java,TextFinder,findOccurrencesInText,"List<MatchInfo> findOccurrencesInText(String,String)","[33, 57]","{'A233': [(33, 57)]}",{'A233': 1.0},A233,,"    private List<MatchInfo> findOccurrencesInText(String searchText, String content) {
        List<MatchInfo> matches = new ArrayList<>();

        Pattern pattern;

        if (useRegex) {
            // Use regex-based search
            pattern =
                    wholeWordSearch
                            ? Pattern.compile(""\\b"" + searchText + ""\\b"")
                            : Pattern.compile(searchText);
        } else {
            // Use normal text search
            pattern =
                    wholeWordSearch
                            ? Pattern.compile(""\\b"" + Pattern.quote(searchText) + ""\\b"")
                            : Pattern.compile(Pattern.quote(searchText));
        }

        Matcher matcher = pattern.matcher(content);
        while (matcher.find()) {
            matches.add(new MatchInfo(matcher.start(), matcher.end() - matcher.start()));
        }
        return matches;
    }
"
stirling.software.SPDF.pdf,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/pdf/TextFinder.java,TextFinder,writeString,"void writeString(String,List<TextPosition>)","[59, 84]","{'A233': [(59, 84)]}",{'A233': 1.0},A233,,"    @Override
    protected void writeString(String text, List<TextPosition> textPositions) {
        for (MatchInfo match : findOccurrencesInText(searchText, text.toLowerCase())) {
            int index = match.startIndex;
            if (index + match.matchLength <= textPositions.size()) {
                // Initial values based on the first character
                TextPosition first = textPositions.get(index);
                float minX = first.getX();
                float minY = first.getY();
                float maxX = first.getX() + first.getWidth();
                float maxY = first.getY() + first.getHeight();

                // Loop over the rest of the characters and adjust bounding box values
                for (int i = index; i < index + match.matchLength; i++) {
                    TextPosition position = textPositions.get(i);
                    minX = Math.min(minX, position.getX());
                    minY = Math.min(minY, position.getY());
                    maxX = Math.max(maxX, position.getX() + position.getWidth());
                    maxY = Math.max(maxY, position.getY() + position.getHeight());
                }

                textOccurrences.add(
                        new PDFText(getCurrentPageNo() - 1, minX, minY, maxX, maxY, text));
            }
        }
    }
"
stirling.software.SPDF.pdf,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/pdf/TextFinder.java,TextFinder,getTextLocations,List<PDFText> getTextLocations(PDDocument),"[86, 96]","{'A233': [(86, 96)]}",{'A233': 1.0},A233,,"    public List<PDFText> getTextLocations(PDDocument document) throws Exception {
        this.getText(document);
        log.debug(
                ""Found ""
                        + textOccurrences.size()
                        + "" occurrences of '""
                        + searchText
                        + ""' in the document."");

        return textOccurrences;
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,main,void main(String[]),"[63, 142]","{'A285': [(63, 63), (97, 97), (99, 99), (131, 131), (134, 134), (139, 139)], 'A233': [(66, 66), (68, 79), (82, 89), (104, 105), (108, 110), (112, 112), (116, 117), (119, 124), (126, 129), (135, 136), (140, 140), (142, 142)], 'A236': [(64, 65), (67, 67), (80, 81), (90, 90), (100, 100), (118, 118), (125, 125), (130, 130), (132, 132), (141, 141)], 'A234': [(92, 96), (98, 98), (101, 103), (111, 111), (113, 115), (137, 137)], 'A286': [(91, 91), (133, 133)], 'A287': [(106, 107)], 'A238': [(138, 138)]}","{'A285': 0.075, 'A233': 0.5375, 'A236': 0.15, 'A234': 0.175, 'A286': 0.025, 'A287': 0.025, 'A238': 0.0125}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    public static void main(String[] args) throws IOException, InterruptedException {
        SpringApplication app = new SpringApplication(SPDFApplication.class);

        Properties props = new Properties();

        if (Boolean.parseBoolean(System.getProperty(""STIRLING_PDF_DESKTOP_UI"", ""false""))) {
            System.setProperty(""java.awt.headless"", ""false"");
            app.setHeadless(false);
            props.put(""java.awt.headless"", ""false"");
            props.put(""spring.main.web-application-type"", ""servlet"");

            int desiredPort = 8080;
            String port = UrlUtils.findAvailablePort(desiredPort);
            props.put(""server.port"", port);
            System.setProperty(""server.port"", port);
            log.info(""Desktop UI mode: Using port {}"", port);
        }

        app.setAdditionalProfiles(getActiveProfile(args));

        ConfigInitializer initializer = new ConfigInitializer();
        try {
            initializer.ensureConfigExists();
        } catch (IOException | URISyntaxException e) {
            log.error(""Error initialising configuration"", e);
        }
        Map<String, String> propertyFiles = new HashMap<>();

        // External config files
        Path settingsPath = Paths.get(InstallationPathConfig.getSettingsPath());
        log.info(""Settings file: {}"", settingsPath.toString());
        if (Files.exists(settingsPath)) {
            propertyFiles.put(
                    ""spring.config.additional-location"", ""file:"" + settingsPath.toString());
        } else {
            log.warn(""External configuration file '{}' does not exist."", settingsPath.toString());
        }

        Path customSettingsPath = Paths.get(InstallationPathConfig.getCustomSettingsPath());
        log.info(""Custom settings file: {}"", customSettingsPath.toString());
        if (Files.exists(customSettingsPath)) {
            String existingLocation =
                    propertyFiles.getOrDefault(""spring.config.additional-location"", """");
            if (!existingLocation.isEmpty()) {
                existingLocation += "","";
            }
            propertyFiles.put(
                    ""spring.config.additional-location"",
                    existingLocation + ""file:"" + customSettingsPath.toString());
        } else {
            log.warn(
                    ""Custom configuration file '{}' does not exist."",
                    customSettingsPath.toString());
        }
        Properties finalProps = new Properties();

        if (!propertyFiles.isEmpty()) {
            finalProps.putAll(
                    Collections.singletonMap(
                            ""spring.config.additional-location"",
                            propertyFiles.get(""spring.config.additional-location"")));
        }

        if (!props.isEmpty()) {
            finalProps.putAll(props);
        }
        app.setDefaultProperties(finalProps);

        app.run(args);

        // Ensure directories are created
        try {
            Files.createDirectories(Path.of(InstallationPathConfig.getTemplatesPath()));
            Files.createDirectories(Path.of(InstallationPathConfig.getStaticPath()));
        } catch (IOException e) {
            log.error(""Error creating directories: {}"", e.getMessage());
        }

        printStartupLogs();
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,init,void init(),"[144, 178]","{'A233': [(144, 145), (154, 157), (159, 163), (165, 172), (175, 178)], 'A236': [(146, 151), (153, 153), (164, 164)], 'A234': [(152, 152), (173, 173)], 'A238': [(158, 158), (174, 174)]}","{'A233': 0.6571428571428571, 'A236': 0.22857142857142856, 'A234': 0.05714285714285714, 'A238': 0.05714285714285714}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    @PostConstruct
    public void init() {
        String baseUrl = appConfig.getBaseUrl();
        String contextPath = appConfig.getContextPath();
        String serverPort = appConfig.getServerPort();
        baseUrlStatic = baseUrl;
        contextPathStatic = contextPath;
        serverPortStatic = serverPort;
        String url = baseUrl + "":"" + getStaticPort() + contextPath;

        if (webBrowser != null
                && Boolean.parseBoolean(System.getProperty(""STIRLING_PDF_DESKTOP_UI"", ""false""))) {
            webBrowser.initWebUI(url);
        } else {
            String browserOpenEnv = env.getProperty(""BROWSER_OPEN"");
            boolean browserOpen = browserOpenEnv != null && ""true"".equalsIgnoreCase(browserOpenEnv);
            if (browserOpen) {
                try {
                    String os = System.getProperty(""os.name"").toLowerCase();
                    Runtime rt = Runtime.getRuntime();

                    if (os.contains(""win"")) {
                        // For Windows
                        SystemCommand.runCommand(rt, ""rundll32 url.dll,FileProtocolHandler "" + url);
                    } else if (os.contains(""mac"")) {
                        SystemCommand.runCommand(rt, ""open "" + url);
                    } else if (os.contains(""nix"") || os.contains(""nux"")) {
                        SystemCommand.runCommand(rt, ""xdg-open "" + url);
                    }
                } catch (IOException e) {
                    log.error(""Error opening browser: {}"", e.getMessage());
                }
            }
        }
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,setServerPortStatic,void setServerPortStatic(String),"[180, 188]","{'A233': [(180, 180)], 'A236': [(181, 188)]}","{'A233': 0.1111111111111111, 'A236': 0.8888888888888888}",A236,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    public static void setServerPortStatic(String port) {
        if (""auto"".equalsIgnoreCase(port)) {
            // Use Spring Boot's automatic port assignment (server.port=0)
            SPDFApplication.serverPortStatic =
                    ""0""; // This will let Spring Boot assign an available port
        } else {
            SPDFApplication.serverPortStatic = port;
        }
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,cleanup,void cleanup(),"[190, 195]","{'A233': [(190, 195)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    @PreDestroy
    public void cleanup() {
        if (webBrowser != null) {
            webBrowser.cleanup();
        }
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,printStartupLogs,void printStartupLogs(),"[197, 201]","{'A236': [(197, 198), (200, 201)], 'A234': [(199, 199)]}","{'A236': 0.8, 'A234': 0.2}",A236,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    private static void printStartupLogs() {
        log.info(""Stirling-PDF Started."");
        String url = baseUrlStatic + "":"" + getStaticPort() + contextPathStatic;
        log.info(""Navigate to {}"", url);
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,getActiveProfile,String[] getActiveProfile(String[]),"[203, 225]","{'A233': [(204, 221), (225, 225)], 'A236': [(203, 203), (223, 224)], 'A234': [(222, 222)]}","{'A233': 0.8260869565217391, 'A236': 0.13043478260869565, 'A234': 0.043478260869565216}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    private static String[] getActiveProfile(String[] args) {
        // 1. Check for explicitly passed profiles
        if (args != null) {
            for (String arg : args) {
                if (arg.startsWith(""--spring.profiles.active="")) {
                    String[] provided = arg.substring(arg.indexOf('=') + 1).split("","");
                    if (provided.length > 0) {
                        return provided;
                    }
                }
            }
        }

        // 2. Detect if SecurityConfiguration is present on classpath
        if (isClassPresent(
                ""stirling.software.proprietary.security.configuration.SecurityConfiguration"")) {
            log.info(""Additional features in jar"");
            return new String[] {""security""};
        } else {
            log.info(""Without additional features in jar"");
            return new String[] {""default""};
        }
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,isClassPresent,boolean isClassPresent(String),"[227, 234]","{'A233': [(227, 232)], 'A236': [(233, 234)]}","{'A233': 0.75, 'A236': 0.25}",A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    private static boolean isClassPresent(String className) {
        try {
            Class.forName(className, false, SPDFApplication.class.getClassLoader());
            return true;
        } catch (ClassNotFoundException e) {
            return false;
        }
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,getStaticBaseUrl,String getStaticBaseUrl(),"[236, 238]","{'A236': [(236, 238)]}",{'A236': 1.0},A236,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    public static String getStaticBaseUrl() {
        return baseUrlStatic;
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,getStaticPort,String getStaticPort(),"[240, 242]","{'A236': [(240, 242)]}",{'A236': 1.0},A236,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    public static String getStaticPort() {
        return serverPortStatic;
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/SPDFApplication.java,SPDFApplication,getStaticContextPath,String getStaticContextPath(),"[244, 246]","{'A234': [(244, 246)]}",{'A234': 1.0},A234,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java,"    public static String getStaticContextPath() {
        return contextPathStatic;
    }
"
stirling.software.SPDF.model.api,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/api/PDFWithPageNums.java,PDFWithPageNums,getPageNumbersList,"List<Integer> getPageNumbersList(PDDocument,boolean)","[30, 34]","{'A233': [(30, 31), (33, 34)], 'A234': [(32, 32)]}","{'A233': 0.8, 'A234': 0.2}",A233,,"    @Hidden
    public List<Integer> getPageNumbersList(PDDocument doc, boolean oneBased) {
        int pageCount = doc.getNumberOfPages();
        return GeneralUtils.parsePageList(pageNumbers, pageCount, oneBased);
    }
"
stirling.software.SPDF.model.api.converters,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/api/converters/ConvertPDFToMarkdown.java,ConvertPDFToMarkdown,processPdfToMarkdown,ResponseEntity<byte[]> processPdfToMarkdown(PDFFile),"[21, 31]","{'A233': [(21, 25), (27, 27), (29, 31)], 'A234': [(26, 26), (28, 28)]}","{'A233': 0.8181818181818182, 'A234': 0.18181818181818182}",A233,,"    @PostMapping(consumes = ""multipart/form-data"", value = ""/pdf/markdown"")
    @Operation(
            summary = ""Convert PDF to Markdown"",
            description =
                    ""This endpoint converts a PDF file to Markdown format. Input:PDF Output:Markdown Type:SISO"")
    public ResponseEntity<byte[]> processPdfToMarkdown(@ModelAttribute PDFFile file)
            throws Exception {
        MultipartFile inputFile = file.getFileInput();
        PDFToFile pdfToFile = new PDFToFile();
        return pdfToFile.processPdfToMarkdown(inputFile);
    }
"
stirling.software.SPDF.model.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java,ScannerEffectRequest,isAdvancedEnabled,boolean isAdvancedEnabled(),"[82, 84]","{'A248': [(82, 84)]}",{'A248': 1.0},A248,,"    public boolean isAdvancedEnabled() {
        return advancedEnabled;
    }
"
stirling.software.SPDF.model.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java,ScannerEffectRequest,getQualityValue,int getQualityValue(),"[86, 92]","{'A248': [(86, 92)]}",{'A248': 1.0},A248,,"    public int getQualityValue() {
        return switch (quality) {
            case low -> 30;
            case medium -> 60;
            case high -> 100;
        };
    }
"
stirling.software.SPDF.model.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java,ScannerEffectRequest,getRotationValue,int getRotationValue(),"[94, 101]","{'A248': [(94, 101)]}",{'A248': 1.0},A248,,"    public int getRotationValue() {
        return switch (rotation) {
            case none -> 0;
            case slight -> 2;
            case moderate -> 5;
            case severe -> 8;
        };
    }
"
stirling.software.SPDF.model.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java,ScannerEffectRequest,applyHighQualityPreset,void applyHighQualityPreset(),"[103, 109]","{'A248': [(103, 109)]}",{'A248': 1.0},A248,,"    public void applyHighQualityPreset() {
        this.blur = 0.1f;
        this.noise = 1.0f;
        this.brightness = 1.02f;
        this.contrast = 1.05f;
        this.resolution = 600;
    }
"
stirling.software.SPDF.model.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java,ScannerEffectRequest,applyMediumQualityPreset,void applyMediumQualityPreset(),"[111, 117]","{'A248': [(111, 117)]}",{'A248': 1.0},A248,,"    public void applyMediumQualityPreset() {
        this.blur = 0.5f;
        this.noise = 3.0f;
        this.brightness = 1.05f;
        this.contrast = 1.1f;
        this.resolution = 300;
    }
"
stirling.software.SPDF.model.api.misc,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java,ScannerEffectRequest,applyLowQualityPreset,void applyLowQualityPreset(),"[119, 125]","{'A248': [(119, 125)]}",{'A248': 1.0},A248,,"    public void applyLowQualityPreset() {
        this.blur = 1.0f;
        this.noise = 5.0f;
        this.brightness = 1.1f;
        this.contrast = 1.2f;
        this.resolution = 150;
    }
"
stirling.software.SPDF.model,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/ApiEndpoint.java,ApiEndpoint,areParametersValid,"boolean areParametersValid(Map<String, Object>)","[25, 32]","{'A233': [(25, 32)]}",{'A233': 1.0},A233,,"    public boolean areParametersValid(Map<String, Object> providedParams) {
        for (String requiredParam : parameters.keySet()) {
            if (!providedParams.containsKey(requiredParam)) {
                return false;
            }
        }
        return true;
    }
"
stirling.software.SPDF.model,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/ApiEndpoint.java,ApiEndpoint,getDescription,String getDescription(),"[34, 36]","{'A233': [(34, 36)]}",{'A233': 1.0},A233,,"    public String getDescription() {
        return description;
    }
"
stirling.software.SPDF.model,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/model/ApiEndpoint.java,ApiEndpoint,toString,String toString(),"[38, 41]","{'A233': [(38, 41)]}",{'A233': 1.0},A233,,"    @Override
    public String toString() {
        return ""ApiEndpoint [name="" + name + "", parameters="" + parameters + ""]"";
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/LocaleConfiguration.java,LocaleConfiguration,addInterceptors,void addInterceptors(InterceptorRegistry),"[23, 27]","{'A233': [(23, 27)]}",{'A233': 1.0},A233,,"    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(localeChangeInterceptor());
        registry.addInterceptor(new CleanUrlInterceptor());
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/LocaleConfiguration.java,LocaleConfiguration,localeChangeInterceptor,LocaleChangeInterceptor localeChangeInterceptor(),"[29, 34]","{'A233': [(29, 34)]}",{'A233': 1.0},A233,,"    @Bean
    public LocaleChangeInterceptor localeChangeInterceptor() {
        LocaleChangeInterceptor lci = new LocaleChangeInterceptor();
        lci.setParamName(""lang"");
        return lci;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/LocaleConfiguration.java,LocaleConfiguration,localeResolver,LocaleResolver localeResolver(),"[36, 60]","{'A233': [(36, 53), (55, 60)], 'A234': [(54, 54)]}","{'A233': 0.96, 'A234': 0.04}",A233,,"    @Bean
    public LocaleResolver localeResolver() {
        SessionLocaleResolver slr = new SessionLocaleResolver();
        String appLocaleEnv = applicationProperties.getSystem().getDefaultLocale();
        Locale defaultLocale = // Fallback to UK locale if environment variable is not set
                Locale.UK;
        if (appLocaleEnv != null && !appLocaleEnv.isEmpty()) {
            Locale tempLocale = Locale.forLanguageTag(appLocaleEnv);
            String tempLanguageTag = tempLocale.toLanguageTag();
            if (appLocaleEnv.equalsIgnoreCase(tempLanguageTag)) {
                defaultLocale = tempLocale;
            } else {
                tempLocale = Locale.forLanguageTag(appLocaleEnv.replace(""_"", ""-""));
                tempLanguageTag = tempLocale.toLanguageTag();
                if (appLocaleEnv.equalsIgnoreCase(tempLanguageTag)) {
                    defaultLocale = tempLocale;
                } else {
                    System.err.println(
                            ""Invalid SYSTEM_DEFAULTLOCALE environment variable value. Falling back to default en-GB."");
                }
            }
        }
        slr.setDefaultLocale(defaultLocale);
        return slr;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java,InitialSetup,init,void init(),"[31, 38]","{'A233': [(31, 38)]}",{'A233': 1.0},A233,,"    @PostConstruct
    public void init() throws IOException {
        initUUIDKey();
        initSecretKey();
        initEnableCSRFSecurity();
        initLegalUrls();
        initSetAppVersion();
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java,InitialSetup,initUUIDKey,void initUUIDKey(),"[40, 48]","{'A233': [(40, 44), (46, 48)], 'A234': [(45, 45)]}","{'A233': 0.8888888888888888, 'A234': 0.1111111111111111}",A233,,"    public void initUUIDKey() throws IOException {
        String uuid = applicationProperties.getAutomaticallyGenerated().getUUID();
        if (!GeneralUtils.isValidUUID(uuid)) {
            // Generating a random UUID as the secret key
            uuid = UUID.randomUUID().toString();
            GeneralUtils.saveKeyToSettings(""AutomaticallyGenerated.UUID"", uuid);
            applicationProperties.getAutomaticallyGenerated().setUUID(uuid);
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java,InitialSetup,initSecretKey,void initSecretKey(),"[50, 58]","{'A233': [(50, 54), (56, 58)], 'A234': [(55, 55)]}","{'A233': 0.8888888888888888, 'A234': 0.1111111111111111}",A233,,"    public void initSecretKey() throws IOException {
        String secretKey = applicationProperties.getAutomaticallyGenerated().getKey();
        if (!GeneralUtils.isValidUUID(secretKey)) {
            // Generating a random UUID as the secret key
            secretKey = UUID.randomUUID().toString();
            GeneralUtils.saveKeyToSettings(""AutomaticallyGenerated.key"", secretKey);
            applicationProperties.getAutomaticallyGenerated().setKey(secretKey);
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java,InitialSetup,initEnableCSRFSecurity,void initEnableCSRFSecurity(),"[60, 70]","{'A233': [(60, 61), (63, 64), (67, 70)], 'A236': [(62, 62)], 'A234': [(65, 66)]}","{'A233': 0.7272727272727273, 'A236': 0.09090909090909091, 'A234': 0.18181818181818182}",A233,,"    public void initEnableCSRFSecurity() throws IOException {
        if (GeneralUtils.isVersionHigher(
                ""0.46.0"", applicationProperties.getAutomaticallyGenerated().getAppVersion())) {
            Boolean csrf = applicationProperties.getSecurity().getCsrfDisabled();
            if (!csrf) {
                GeneralUtils.saveKeyToSettings(""security.csrfDisabled"", false);
                GeneralUtils.saveKeyToSettings(""system.enableAnalytics"", true);
                applicationProperties.getSecurity().setCsrfDisabled(false);
            }
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java,InitialSetup,initLegalUrls,void initLegalUrls(),"[72, 87]","{'A233': [(72, 75), (78, 83), (85, 87)], 'A234': [(76, 77), (84, 84)]}","{'A233': 0.8125, 'A234': 0.1875}",A233,,"    public void initLegalUrls() throws IOException {
        // Initialize Terms and Conditions
        String termsUrl = applicationProperties.getLegal().getTermsAndConditions();
        if (StringUtils.isEmpty(termsUrl)) {
            String defaultTermsUrl = ""https://www.stirlingpdf.com/terms"";
            GeneralUtils.saveKeyToSettings(""legal.termsAndConditions"", defaultTermsUrl);
            applicationProperties.getLegal().setTermsAndConditions(defaultTermsUrl);
        }
        // Initialize Privacy Policy
        String privacyUrl = applicationProperties.getLegal().getPrivacyPolicy();
        if (StringUtils.isEmpty(privacyUrl)) {
            String defaultPrivacyUrl = ""https://www.stirlingpdf.com/privacy-policy"";
            GeneralUtils.saveKeyToSettings(""legal.privacyPolicy"", defaultPrivacyUrl);
            applicationProperties.getLegal().setPrivacyPolicy(defaultPrivacyUrl);
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java,InitialSetup,initSetAppVersion,void initSetAppVersion(),"[89, 100]","{'A233': [(89, 97), (99, 100)], 'A234': [(98, 98)]}","{'A233': 0.9166666666666666, 'A234': 0.08333333333333333}",A233,,"    public void initSetAppVersion() throws IOException {
        String appVersion = ""0.0.0"";
        Resource resource = new ClassPathResource(""version.properties"");
        Properties props = new Properties();
        try {
            props.load(resource.getInputStream());
            appVersion = props.getProperty(""version"");
        } catch (Exception e) {
        }
        GeneralUtils.saveKeyToSettings(""AutomaticallyGenerated.appVersion"", appVersion);
        applicationProperties.getAutomaticallyGenerated().setAppVersion(appVersion);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java,CleanUrlInterceptor,preHandle,"boolean preHandle(HttpServletRequest,HttpServletResponse,Object)","[35, 75]","{'A233': [(35, 41), (43, 46), (49, 50), (53, 56), (58, 59), (61, 75)], 'A287': [(42, 42), (47, 48), (51, 52), (57, 57), (60, 60)]}","{'A233': 0.8292682926829268, 'A287': 0.17073170731707318}",A233,,"    @Override
    public boolean preHandle(
            HttpServletRequest request, HttpServletResponse response, Object handler)
            throws Exception {
        String queryString = request.getQueryString();
        if (queryString != null && !queryString.isEmpty()) {
            String requestURI = request.getRequestURI();
            Map<String, String> allowedParameters = new HashMap<>();

            // Keep only the allowed parameters
            String[] queryParameters = queryString.split(""&"");
            for (String param : queryParameters) {
                String[] keyValuePair = param.split(""="");
                if (keyValuePair.length != 2) {
                    continue;
                }
                if (ALLOWED_PARAMS.contains(keyValuePair[0])) {
                    allowedParameters.put(keyValuePair[0], keyValuePair[1]);
                }
            }

            // If there are any parameters that are not allowed
            if (allowedParameters.size() != queryParameters.length) {
                // Construct new query string
                StringBuilder newQueryString = new StringBuilder();
                for (Map.Entry<String, String> entry : allowedParameters.entrySet()) {
                    if (newQueryString.length() > 0) {
                        newQueryString.append(""&"");
                    }
                    newQueryString.append(entry.getKey()).append(""="").append(entry.getValue());
                }

                // Redirect to the URL with only allowed query parameters
                String redirectUrl = requestURI + ""?"" + newQueryString;

                response.sendRedirect(request.getContextPath() + redirectUrl);
                return false;
            }
        }
        return true;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java,CleanUrlInterceptor,postHandle,"void postHandle(HttpServletRequest,HttpServletResponse,Object,ModelAndView)","[77, 82]","{'A233': [(77, 82)]}",{'A233': 1.0},A233,,"    @Override
    public void postHandle(
            HttpServletRequest request,
            HttpServletResponse response,
            Object handler,
            ModelAndView modelAndView) {}
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java,CleanUrlInterceptor,afterCompletion,"void afterCompletion(HttpServletRequest,HttpServletResponse,Object,Exception)","[84, 89]","{'A233': [(84, 89)]}",{'A233': 1.0},A233,,"    @Override
    public void afterCompletion(
            HttpServletRequest request,
            HttpServletResponse response,
            Object handler,
            Exception ex) {}
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,enableEndpoint,void enableEndpoint(String),"[37, 40]","{'A233': [(37, 40)]}",{'A233': 1.0},A233,,"    public void enableEndpoint(String endpoint) {
        endpointStatuses.put(endpoint, true);
        log.debug(""Enabled endpoint: {}"", endpoint);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,disableEndpoint,void disableEndpoint(String),"[42, 47]","{'A233': [(42, 47)]}",{'A233': 1.0},A233,,"    public void disableEndpoint(String endpoint) {
        if (!Boolean.FALSE.equals(endpointStatuses.get(endpoint))) {
            log.debug(""Disabling endpoint: {}"", endpoint);
        }
        endpointStatuses.put(endpoint, false);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,getEndpointStatuses,"Map<String, Boolean> getEndpointStatuses()","[49, 51]","{'A264': [(49, 51)]}",{'A264': 1.0},A264,,"    public Map<String, Boolean> getEndpointStatuses() {
        return endpointStatuses;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,isEndpointEnabled,boolean isEndpointEnabled(String),"[53, 112]","{'A233': [(53, 112)]}",{'A233': 1.0},A233,,"    public boolean isEndpointEnabled(String endpoint) {
        String original = endpoint;
        if (endpoint.startsWith(""/"")) {
            endpoint = endpoint.substring(1);
        }

        // Rule 1: Explicit flag wins - if disabled via disableEndpoint(), stay disabled
        Boolean explicitStatus = endpointStatuses.get(endpoint);
        if (Boolean.FALSE.equals(explicitStatus)) {
            log.debug(""isEndpointEnabled('{}') -> false (explicitly disabled)"", original);
            return false;
        }

        // Rule 2: Functional-group override - check if endpoint belongs to any disabled functional
        // group
        for (String group : endpointGroups.keySet()) {
            if (disabledGroups.contains(group) && endpointGroups.get(group).contains(endpoint)) {
                // Skip tool groups (qpdf, OCRmyPDF, Ghostscript, LibreOffice, etc.)
                if (!isToolGroup(group)) {
                    log.debug(
                            ""isEndpointEnabled('{}') -> false (functional group '{}' disabled)"",
                            original,
                            group);
                    return false;
                }
            }
        }

        // Rule 3: Tool-group fallback - check if at least one alternative tool group is enabled
        Set<String> alternatives = endpointAlternatives.get(endpoint);
        if (alternatives != null && !alternatives.isEmpty()) {
            boolean hasEnabledToolGroup =
                    alternatives.stream()
                            .anyMatch(toolGroup -> !disabledGroups.contains(toolGroup));
            log.debug(
                    ""isEndpointEnabled('{}') -> {} (tool groups check)"",
                    original,
                    hasEnabledToolGroup);
            return hasEnabledToolGroup;
        }

        // Rule 4: Single-dependency check - if no alternatives defined, check if endpoint belongs
        // to any disabled tool groups
        for (String group : endpointGroups.keySet()) {
            if (isToolGroup(group)
                    && disabledGroups.contains(group)
                    && endpointGroups.get(group).contains(endpoint)) {
                log.debug(
                        ""isEndpointEnabled('{}') -> false (single tool group '{}' disabled, no alternatives)"",
                        original,
                        group);
                return false;
            }
        }

        // Default: enabled if not explicitly disabled
        boolean enabled = !Boolean.FALSE.equals(explicitStatus);
        log.debug(""isEndpointEnabled('{}') -> {} (default)"", original, enabled);
        return enabled;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,isGroupEnabled,boolean isGroupEnabled(String),"[114, 145]","{'A233': [(114, 145)]}",{'A233': 1.0},A233,,"    public boolean isGroupEnabled(String group) {
        // Rule 1: If group is explicitly disabled, it stays disabled
        if (disabledGroups.contains(group)) {
            log.debug(""isGroupEnabled('{}') -> false (explicitly disabled)"", group);
            return false;
        }

        Set<String> endpoints = endpointGroups.get(group);
        if (endpoints == null || endpoints.isEmpty()) {
            log.debug(""isGroupEnabled('{}') -> false (no endpoints)"", group);
            return false;
        }

        // Rule 2: For functional groups, check if all endpoints are enabled
        // Rule 3: For tool groups, they're enabled unless explicitly disabled (handled above)
        if (isToolGroup(group)) {
            log.debug(""isGroupEnabled('{}') -> true (tool group not disabled)"", group);
            return true;
        }

        // For functional groups, check each endpoint individually
        for (String endpoint : endpoints) {
            if (!isEndpointEnabledDirectly(endpoint)) {
                log.debug(
                        ""isGroupEnabled('{}') -> false (endpoint '{}' disabled)"", group, endpoint);
                return false;
            }
        }

        log.debug(""isGroupEnabled('{}') -> true (all endpoints enabled)"", group);
        return true;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,addEndpointToGroup,"void addEndpointToGroup(String,String)","[147, 149]","{'A233': [(147, 149)]}",{'A233': 1.0},A233,,"    public void addEndpointToGroup(String group, String endpoint) {
        endpointGroups.computeIfAbsent(group, k -> new HashSet<>()).add(endpoint);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,addEndpointAlternative,"void addEndpointAlternative(String,String)","[151, 153]","{'A233': [(151, 153)]}",{'A233': 1.0},A233,,"    public void addEndpointAlternative(String endpoint, String toolGroup) {
        endpointAlternatives.computeIfAbsent(endpoint, k -> new HashSet<>()).add(toolGroup);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,disableGroup,void disableGroup(String),"[155, 174]","{'A233': [(155, 174)]}",{'A233': 1.0},A233,,"    public void disableGroup(String group) {
        if (disabledGroups.add(group)) {
            if (isToolGroup(group)) {
                log.debug(
                        ""Disabling tool group: {} (endpoints with alternatives remain available)"",
                        group);
            } else {
                log.debug(
                        ""Disabling functional group: {} (will disable all endpoints in group)"",
                        group);
            }
        }
        // Only cascade to endpoints for *functional* groups
        if (!isToolGroup(group)) {
            Set<String> endpoints = endpointGroups.get(group);
            if (endpoints != null) {
                endpoints.forEach(this::disableEndpoint);
            }
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,enableGroup,void enableGroup(String),"[176, 184]","{'A233': [(176, 184)]}",{'A233': 1.0},A233,,"    public void enableGroup(String group) {
        if (disabledGroups.remove(group)) {
            log.debug(""Enabling group: {}"", group);
        }
        Set<String> endpoints = endpointGroups.get(group);
        if (endpoints != null) {
            endpoints.forEach(this::enableEndpoint);
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,getDisabledGroups,Set<String> getDisabledGroups(),"[186, 188]","{'A233': [(186, 188)]}",{'A233': 1.0},A233,,"    public Set<String> getDisabledGroups() {
        return new HashSet<>(disabledGroups);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,logDisabledEndpointsSummary,void logDisabledEndpointsSummary(),"[190, 230]","{'A233': [(190, 221), (223, 230)], 'A238': [(222, 222)]}","{'A233': 0.975609756097561, 'A238': 0.024390243902439025}",A233,,"    public void logDisabledEndpointsSummary() {
        // Get all unique endpoints across all groups
        Set<String> allEndpoints =
                endpointGroups.values().stream()
                        .flatMap(Set::stream)
                        .collect(java.util.stream.Collectors.toSet());

        // Check which endpoints are actually disabled (functionally unavailable)
        List<String> functionallyDisabledEndpoints =
                allEndpoints.stream()
                        .filter(endpoint -> !isEndpointEnabled(endpoint))
                        .sorted()
                        .toList();

        // Separate tool groups from functional groups
        List<String> disabledToolGroups =
                disabledGroups.stream().filter(this::isToolGroup).sorted().toList();

        List<String> disabledFunctionalGroups =
                disabledGroups.stream().filter(group -> !isToolGroup(group)).sorted().toList();

        if (!disabledToolGroups.isEmpty()) {
            log.info(
                    ""Disabled tool groups: {} (endpoints may have alternative implementations)"",
                    String.join("", "", disabledToolGroups));
        }

        if (!disabledFunctionalGroups.isEmpty()) {
            log.info(""Disabled functional groups: {}"", String.join("", "", disabledFunctionalGroups));
        }

        if (!functionallyDisabledEndpoints.isEmpty()) {
            log.info(
                    ""Total disabled endpoints: {}. Disabled endpoints: {}"",
                    functionallyDisabledEndpoints.size(),
                    String.join("", "", functionallyDisabledEndpoints));
        } else if (!disabledToolGroups.isEmpty()) {
            log.info(
                    ""No endpoints disabled despite missing tools - fallback implementations available"");
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,init,void init(),"[232, 429]","{'A233': [(232, 264), (266, 272), (274, 275), (277, 287), (290, 295), (298, 317), (319, 333), (335, 350), (352, 364), (366, 369), (371, 371), (373, 373), (375, 375), (377, 423), (425, 429)], 'A236': [(297, 297), (374, 374)], 'A238': [(273, 273), (351, 351)], 'A248': [(265, 265), (424, 424)], 'A256': [(276, 276), (365, 365)], 'A273': [(288, 288)], 'A243': [(289, 289), (370, 370)], 'A282': [(296, 296), (372, 372)], 'A234': [(318, 318), (334, 334), (376, 376)]}","{'A233': 0.9191919191919192, 'A236': 0.010101010101010102, 'A238': 0.010101010101010102, 'A248': 0.010101010101010102, 'A256': 0.010101010101010102, 'A273': 0.005050505050505051, 'A243': 0.010101010101010102, 'A282': 0.010101010101010102, 'A234': 0.015151515151515152}",A233,,"    public void init() {
        // Adding endpoints to ""PageOps"" group
        addEndpointToGroup(""PageOps"", ""remove-pages"");
        addEndpointToGroup(""PageOps"", ""merge-pdfs"");
        addEndpointToGroup(""PageOps"", ""split-pdfs"");
        addEndpointToGroup(""PageOps"", ""pdf-organizer"");
        addEndpointToGroup(""PageOps"", ""rotate-pdf"");
        addEndpointToGroup(""PageOps"", ""multi-page-layout"");
        addEndpointToGroup(""PageOps"", ""scale-pages"");
        addEndpointToGroup(""PageOps"", ""adjust-contrast"");
        addEndpointToGroup(""PageOps"", ""crop"");
        addEndpointToGroup(""PageOps"", ""auto-split-pdf"");
        addEndpointToGroup(""PageOps"", ""extract-page"");
        addEndpointToGroup(""PageOps"", ""pdf-to-single-page"");
        addEndpointToGroup(""PageOps"", ""split-by-size-or-count"");
        addEndpointToGroup(""PageOps"", ""overlay-pdf"");
        addEndpointToGroup(""PageOps"", ""split-pdf-by-sections"");

        // Adding endpoints to ""Convert"" group
        addEndpointToGroup(""Convert"", ""pdf-to-img"");
        addEndpointToGroup(""Convert"", ""img-to-pdf"");
        addEndpointToGroup(""Convert"", ""pdf-to-pdfa"");
        addEndpointToGroup(""Convert"", ""file-to-pdf"");
        addEndpointToGroup(""Convert"", ""pdf-to-word"");
        addEndpointToGroup(""Convert"", ""pdf-to-presentation"");
        addEndpointToGroup(""Convert"", ""pdf-to-text"");
        addEndpointToGroup(""Convert"", ""pdf-to-html"");
        addEndpointToGroup(""Convert"", ""pdf-to-xml"");
        addEndpointToGroup(""Convert"", ""html-to-pdf"");
        addEndpointToGroup(""Convert"", ""url-to-pdf"");
        addEndpointToGroup(""Convert"", ""markdown-to-pdf"");
        addEndpointToGroup(""Convert"", ""pdf-to-csv"");
        addEndpointToGroup(""Convert"", ""pdf-to-markdown"");
        addEndpointToGroup(""Convert"", ""eml-to-pdf"");

        // Adding endpoints to ""Security"" group
        addEndpointToGroup(""Security"", ""add-password"");
        addEndpointToGroup(""Security"", ""remove-password"");
        addEndpointToGroup(""Security"", ""change-permissions"");
        addEndpointToGroup(""Security"", ""add-watermark"");
        addEndpointToGroup(""Security"", ""cert-sign"");
        addEndpointToGroup(""Security"", ""remove-cert-sign"");
        addEndpointToGroup(""Security"", ""sanitize-pdf"");
        addEndpointToGroup(""Security"", ""auto-redact"");
        addEndpointToGroup(""Security"", ""redact"");

        // Adding endpoints to ""Other"" group
        addEndpointToGroup(""Other"", ""ocr-pdf"");
        addEndpointToGroup(""Other"", ""add-image"");
        addEndpointToGroup(""Other"", ""compress-pdf"");
        addEndpointToGroup(""Other"", ""extract-images"");
        addEndpointToGroup(""Other"", ""change-metadata"");
        addEndpointToGroup(""Other"", ""extract-image-scans"");
        addEndpointToGroup(""Other"", ""sign"");
        addEndpointToGroup(""Other"", ""flatten"");
        addEndpointToGroup(""Other"", ""repair"");
        addEndpointToGroup(""Other"", ""unlock-pdf-forms"");
        addEndpointToGroup(""Other"", REMOVE_BLANKS);
        addEndpointToGroup(""Other"", ""remove-annotations"");
        addEndpointToGroup(""Other"", ""compare"");
        addEndpointToGroup(""Other"", ""add-page-numbers"");
        addEndpointToGroup(""Other"", ""auto-rename"");
        addEndpointToGroup(""Other"", ""get-info-on-pdf"");
        addEndpointToGroup(""Other"", ""show-javascript"");
        addEndpointToGroup(""Other"", ""remove-image-pdf"");
        addEndpointToGroup(""Other"", ""add-attachments"");

        // CLI
        addEndpointToGroup(""CLI"", ""compress-pdf"");
        addEndpointToGroup(""CLI"", ""extract-image-scans"");
        addEndpointToGroup(""CLI"", ""repair"");
        addEndpointToGroup(""CLI"", ""pdf-to-pdfa"");
        addEndpointToGroup(""CLI"", ""file-to-pdf"");
        addEndpointToGroup(""CLI"", ""pdf-to-word"");
        addEndpointToGroup(""CLI"", ""pdf-to-presentation"");
        addEndpointToGroup(""CLI"", ""pdf-to-html"");
        addEndpointToGroup(""CLI"", ""pdf-to-xml"");
        addEndpointToGroup(""CLI"", ""ocr-pdf"");
        addEndpointToGroup(""CLI"", ""html-to-pdf"");
        addEndpointToGroup(""CLI"", ""url-to-pdf"");
        addEndpointToGroup(""CLI"", ""pdf-to-rtf"");

        // python
        addEndpointToGroup(""Python"", ""extract-image-scans"");
        addEndpointToGroup(""Python"", ""html-to-pdf"");
        addEndpointToGroup(""Python"", ""url-to-pdf"");
        addEndpointToGroup(""Python"", ""file-to-pdf"");

        // openCV
        addEndpointToGroup(""OpenCV"", ""extract-image-scans"");

        // LibreOffice
        addEndpointToGroup(""LibreOffice"", ""file-to-pdf"");
        addEndpointToGroup(""LibreOffice"", ""pdf-to-word"");
        addEndpointToGroup(""LibreOffice"", ""pdf-to-presentation"");
        addEndpointToGroup(""LibreOffice"", ""pdf-to-rtf"");
        addEndpointToGroup(""LibreOffice"", ""pdf-to-html"");
        addEndpointToGroup(""LibreOffice"", ""pdf-to-xml"");
        addEndpointToGroup(""LibreOffice"", ""pdf-to-pdfa"");

        // Unoconvert
        addEndpointToGroup(""Unoconvert"", ""file-to-pdf"");

        // Java
        addEndpointToGroup(""Java"", ""merge-pdfs"");
        addEndpointToGroup(""Java"", ""remove-pages"");
        addEndpointToGroup(""Java"", ""split-pdfs"");
        addEndpointToGroup(""Java"", ""pdf-organizer"");
        addEndpointToGroup(""Java"", ""rotate-pdf"");
        addEndpointToGroup(""Java"", ""pdf-to-img"");
        addEndpointToGroup(""Java"", ""img-to-pdf"");
        addEndpointToGroup(""Java"", ""add-password"");
        addEndpointToGroup(""Java"", ""remove-password"");
        addEndpointToGroup(""Java"", ""change-permissions"");
        addEndpointToGroup(""Java"", ""add-watermark"");
        addEndpointToGroup(""Java"", ""add-image"");
        addEndpointToGroup(""Java"", ""extract-images"");
        addEndpointToGroup(""Java"", ""change-metadata"");
        addEndpointToGroup(""Java"", ""cert-sign"");
        addEndpointToGroup(""Java"", ""remove-cert-sign"");
        addEndpointToGroup(""Java"", ""multi-page-layout"");
        addEndpointToGroup(""Java"", ""scale-pages"");
        addEndpointToGroup(""Java"", ""add-page-numbers"");
        addEndpointToGroup(""Java"", ""auto-rename"");
        addEndpointToGroup(""Java"", ""auto-split-pdf"");
        addEndpointToGroup(""Java"", ""sanitize-pdf"");
        addEndpointToGroup(""Java"", ""crop"");
        addEndpointToGroup(""Java"", ""get-info-on-pdf"");
        addEndpointToGroup(""Java"", ""extract-page"");
        addEndpointToGroup(""Java"", ""pdf-to-single-page"");
        addEndpointToGroup(""Java"", ""markdown-to-pdf"");
        addEndpointToGroup(""Java"", ""show-javascript"");
        addEndpointToGroup(""Java"", ""auto-redact"");
        addEndpointToGroup(""Java"", ""redact"");
        addEndpointToGroup(""Java"", ""pdf-to-csv"");
        addEndpointToGroup(""Java"", ""split-by-size-or-count"");
        addEndpointToGroup(""Java"", ""overlay-pdf"");
        addEndpointToGroup(""Java"", ""split-pdf-by-sections"");
        addEndpointToGroup(""Java"", REMOVE_BLANKS);
        addEndpointToGroup(""Java"", ""pdf-to-text"");
        addEndpointToGroup(""Java"", ""remove-image-pdf"");
        addEndpointToGroup(""Java"", ""pdf-to-markdown"");
        addEndpointToGroup(""Java"", ""add-attachments"");
        addEndpointToGroup(""Java"", ""compress-pdf"");

        // Javascript
        addEndpointToGroup(""Javascript"", ""pdf-organizer"");
        addEndpointToGroup(""Javascript"", ""sign"");
        addEndpointToGroup(""Javascript"", ""compare"");
        addEndpointToGroup(""Javascript"", ""adjust-contrast"");

        /* qpdf */
        addEndpointToGroup(""qpdf"", ""repair"");
        addEndpointToGroup(""qpdf"", ""compress-pdf"");

        /* Ghostscript */
        addEndpointToGroup(""Ghostscript"", ""repair"");
        addEndpointToGroup(""Ghostscript"", ""compress-pdf"");

        /* tesseract */
        addEndpointToGroup(""tesseract"", ""ocr-pdf"");

        /* OCRmyPDF */
        addEndpointToGroup(""OCRmyPDF"", ""ocr-pdf"");

        // Multi-tool endpoints - endpoints that can be handled by multiple tools
        addEndpointAlternative(""repair"", ""qpdf"");
        addEndpointAlternative(""repair"", ""Ghostscript"");
        addEndpointAlternative(""compress-pdf"", ""qpdf"");
        addEndpointAlternative(""compress-pdf"", ""Ghostscript"");
        addEndpointAlternative(""compress-pdf"", ""Java"");
        addEndpointAlternative(""ocr-pdf"", ""tesseract"");
        addEndpointAlternative(""ocr-pdf"", ""OCRmyPDF"");

        // file-to-pdf has multiple implementations
        addEndpointAlternative(""file-to-pdf"", ""LibreOffice"");
        addEndpointAlternative(""file-to-pdf"", ""Python"");
        addEndpointAlternative(""file-to-pdf"", ""Unoconvert"");

        // pdf-to-html and pdf-to-markdown can use either LibreOffice or Pdftohtml
        addEndpointAlternative(""pdf-to-html"", ""LibreOffice"");
        addEndpointAlternative(""pdf-to-html"", ""Pdftohtml"");
        addEndpointAlternative(""pdf-to-markdown"", ""Pdftohtml"");

        // markdown-to-pdf can use either Weasyprint or Java
        addEndpointAlternative(""markdown-to-pdf"", ""Weasyprint"");
        addEndpointAlternative(""markdown-to-pdf"", ""Java"");

        // Weasyprint dependent endpoints
        addEndpointToGroup(""Weasyprint"", ""html-to-pdf"");
        addEndpointToGroup(""Weasyprint"", ""url-to-pdf"");
        addEndpointToGroup(""Weasyprint"", ""markdown-to-pdf"");
        addEndpointToGroup(""Weasyprint"", ""eml-to-pdf"");

        // Pdftohtml dependent endpoints
        addEndpointToGroup(""Pdftohtml"", ""pdf-to-html"");
        addEndpointToGroup(""Pdftohtml"", ""pdf-to-markdown"");
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,processEnvironmentConfigs,void processEnvironmentConfigs(),"[431, 455]","{'A233': [(431, 455)]}",{'A233': 1.0},A233,,"    private void processEnvironmentConfigs() {
        if (applicationProperties != null && applicationProperties.getEndpoints() != null) {
            List<String> endpointsToRemove = applicationProperties.getEndpoints().getToRemove();
            List<String> groupsToRemove = applicationProperties.getEndpoints().getGroupsToRemove();

            if (endpointsToRemove != null) {
                for (String endpoint : endpointsToRemove) {
                    disableEndpoint(endpoint.trim());
                }
            }

            if (groupsToRemove != null) {
                for (String group : groupsToRemove) {
                    disableGroup(group.trim());
                }
            }
        }
        if (!runningProOrHigher) {
            disableGroup(""enterprise"");
        }

        if (!applicationProperties.getSystem().getEnableUrlToPDF()) {
            disableEndpoint(""url-to-pdf"");
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,getEndpointsForGroup,Set<String> getEndpointsForGroup(String),"[457, 459]","{'A233': [(457, 459)]}",{'A233': 1.0},A233,,"    public Set<String> getEndpointsForGroup(String group) {
        return endpointGroups.getOrDefault(group, new HashSet<>());
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,isToolGroup,boolean isToolGroup(String),"[461, 475]","{'A233': [(461, 475)]}",{'A233': 1.0},A233,,"    private boolean isToolGroup(String group) {
        return ""qpdf"".equals(group)
                || ""OCRmyPDF"".equals(group)
                || ""Ghostscript"".equals(group)
                || ""LibreOffice"".equals(group)
                || ""tesseract"".equals(group)
                || ""CLI"".equals(group)
                || ""Python"".equals(group)
                || ""OpenCV"".equals(group)
                || ""Unoconvert"".equals(group)
                || ""Java"".equals(group)
                || ""Javascript"".equals(group)
                || ""Weasyprint"".equals(group)
                || ""Pdftohtml"".equals(group);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java,EndpointConfiguration,isEndpointEnabledDirectly,boolean isEndpointEnabledDirectly(String),"[477, 498]","{'A233': [(477, 498)]}",{'A233': 1.0},A233,,"    private boolean isEndpointEnabledDirectly(String endpoint) {
        if (endpoint.startsWith(""/"")) {
            endpoint = endpoint.substring(1);
        }

        // Check explicit disable flag
        Boolean explicitStatus = endpointStatuses.get(endpoint);
        if (Boolean.FALSE.equals(explicitStatus)) {
            return false;
        }

        // Check if endpoint belongs to any disabled functional group
        for (String group : endpointGroups.keySet()) {
            if (disabledGroups.contains(group) && endpointGroups.get(group).contains(endpoint)) {
                if (!isToolGroup(group)) {
                    return false;
                }
            }
        }

        return true;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/MetricsConfig.java,MetricsConfig,meterFilter,MeterFilter meterFilter(),"[13, 24]","{'A233': [(13, 17), (19, 24)], 'A234': [(18, 18)]}","{'A233': 0.9166666666666666, 'A234': 0.08333333333333333}",A233,,"    @Bean
    public MeterFilter meterFilter() {
        return new MeterFilter() {
            @Override
            public MeterFilterReply accept(Meter.Id id) {
                if (""http.requests"".equals(id.getName())) {
                    return MeterFilterReply.NEUTRAL;
                }
                return MeterFilterReply.DENY;
            }
        };
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/MetricsConfig.java,MetricsConfig,accept,MeterFilterReply accept(Meter.Id),"[16, 22]","{'A233': [(16, 17), (19, 22)], 'A234': [(18, 18)]}","{'A233': 0.8571428571428571, 'A234': 0.14285714285714285}",A233,,"            @Override
            public MeterFilterReply accept(Meter.Id id) {
                if (""http.requests"".equals(id.getName())) {
                    return MeterFilterReply.NEUTRAL;
                }
                return MeterFilterReply.DENY;
            }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/MetricsFilter.java,MetricsFilter,doFilterInternal,"void doFilterInternal(HttpServletRequest,HttpServletResponse,FilterChain)","[27, 47]","{'A233': [(27, 47)]}",{'A233': 1.0},A233,,"    @Override
    protected void doFilterInternal(
            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        String uri = request.getRequestURI();

        if (RequestUriUtils.isTrackableResource(request.getContextPath(), uri)) {
            HttpSession session = request.getSession(false);
            String sessionId = (session != null) ? session.getId() : ""no-session"";
            Counter counter =
                    Counter.builder(""http.requests"")
                            .tag(""session"", sessionId)
                            .tag(""method"", request.getMethod())
                            .tag(""uri"", uri)
                            .register(meterRegistry);

            counter.increment();
        }

        filterChain.doFilter(request, response);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/OpenApiConfig.java,OpenApiConfig,customOpenAPI,OpenAPI customOpenAPI(),"[29, 66]","{'A233': [(29, 35), (53, 53), (55, 55), (61, 62), (64, 66)], 'A234': [(36, 52), (54, 54), (56, 60), (63, 63)]}","{'A233': 0.3684210526315789, 'A234': 0.631578947368421}",A234,,"    @Bean
    public OpenAPI customOpenAPI() {
        String version = getClass().getPackage().getImplementationVersion();
        if (version == null) {
            // default version if all else fails
            version = ""1.0.0"";
        }
        Info info =
                new Info()
                        .title(DEFAULT_TITLE)
                        .version(version)
                        .license(
                                new License()
                                        .name(""MIT"")
                                        .url(
                                                ""https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/refs/heads/main/LICENSE"")
                                        .identifier(""MIT""))
                        .termsOfService(""https://www.stirlingpdf.com/terms"")
                        .contact(
                                new Contact()
                                        .name(""Stirling Software"")
                                        .url(""https://www.stirlingpdf.com"")
                                        .email(""contact@stirlingpdf.com""))
                        .description(DEFAULT_DESCRIPTION);
        if (!applicationProperties.getSecurity().getEnableLogin()) {
            return new OpenAPI().components(new Components()).info(info);
        } else {
            SecurityScheme apiKeyScheme =
                    new SecurityScheme()
                            .type(SecurityScheme.Type.APIKEY)
                            .in(SecurityScheme.In.HEADER)
                            .name(""X-API-KEY"");
            return new OpenAPI()
                    .components(new Components().addSecuritySchemes(""apiKey"", apiKeyScheme))
                    .info(info)
                    .addSecurityItem(new SecurityRequirement().addList(""apiKey""));
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInspector.java,EndpointInspector,onApplicationEvent,void onApplicationEvent(ContextRefreshedEvent),"[31, 37]","{'A233': [(31, 37)]}",{'A233': 1.0},A233,,"    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        if (!endpointsDiscovered) {
            discoverEndpoints();
            endpointsDiscovered = true;
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInspector.java,EndpointInspector,discoverEndpoints,void discoverEndpoints(),"[39, 82]","{'A233': [(39, 82)]}",{'A233': 1.0},A233,,"    private void discoverEndpoints() {
        try {
            Map<String, RequestMappingHandlerMapping> mappings =
                    applicationContext.getBeansOfType(RequestMappingHandlerMapping.class);

            for (Map.Entry<String, RequestMappingHandlerMapping> entry : mappings.entrySet()) {
                RequestMappingHandlerMapping mapping = entry.getValue();
                Map<RequestMappingInfo, HandlerMethod> handlerMethods = mapping.getHandlerMethods();

                for (Map.Entry<RequestMappingInfo, HandlerMethod> handlerEntry :
                        handlerMethods.entrySet()) {
                    RequestMappingInfo mappingInfo = handlerEntry.getKey();
                    HandlerMethod handlerMethod = handlerEntry.getValue();

                    boolean isGetHandler = false;
                    try {
                        Set<RequestMethod> methods = mappingInfo.getMethodsCondition().getMethods();
                        isGetHandler = methods.isEmpty() || methods.contains(RequestMethod.GET);
                    } catch (Exception e) {
                        isGetHandler = true;
                    }

                    if (isGetHandler) {
                        Set<String> patterns = extractPatternsUsingDirectPaths(mappingInfo);

                        if (patterns.isEmpty()) {
                            patterns = extractPatternsFromString(mappingInfo);
                        }

                        validGetEndpoints.addAll(patterns);
                    }
                }
            }

            if (validGetEndpoints.isEmpty()) {
                logger.warn(""No endpoints discovered. Adding common endpoints as fallback."");
                validGetEndpoints.add(""/"");
                validGetEndpoints.add(""/api/**"");
                validGetEndpoints.add(""/**"");
            }
        } catch (Exception e) {
            logger.error(""Error discovering endpoints"", e);
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInspector.java,EndpointInspector,extractPatternsUsingDirectPaths,Set<String> extractPatternsUsingDirectPaths(RequestMappingInfo),"[84, 100]","{'A233': [(84, 100)]}",{'A233': 1.0},A233,,"    private Set<String> extractPatternsUsingDirectPaths(RequestMappingInfo mappingInfo) {
        Set<String> patterns = new HashSet<>();

        try {
            Method getDirectPathsMethod = mappingInfo.getClass().getMethod(""getDirectPaths"");
            Object result = getDirectPathsMethod.invoke(mappingInfo);
            if (result instanceof Set) {
                @SuppressWarnings(""unchecked"")
                Set<String> resultSet = (Set<String>) result;
                patterns.addAll(resultSet);
            }
        } catch (Exception e) {
            // Return empty set if method not found or fails
        }

        return patterns;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInspector.java,EndpointInspector,extractPatternsFromString,Set<String> extractPatternsFromString(RequestMappingInfo),"[102, 121]","{'A233': [(102, 121)]}",{'A233': 1.0},A233,,"    private Set<String> extractPatternsFromString(RequestMappingInfo mappingInfo) {
        Set<String> patterns = new HashSet<>();
        try {
            String infoString = mappingInfo.toString();
            if (infoString.contains(""{"")) {
                String patternsSection =
                        infoString.substring(infoString.indexOf(""{"") + 1, infoString.indexOf(""}""));

                for (String pattern : patternsSection.split("","")) {
                    pattern = pattern.trim();
                    if (!pattern.isEmpty()) {
                        patterns.add(pattern);
                    }
                }
            }
        } catch (Exception e) {
            // Return empty set if parsing fails
        }
        return patterns;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInspector.java,EndpointInspector,isValidGetEndpoint,boolean isValidGetEndpoint(String),"[123, 142]","{'A233': [(123, 142)]}",{'A233': 1.0},A233,,"    public boolean isValidGetEndpoint(String uri) {
        if (!endpointsDiscovered) {
            discoverEndpoints();
            endpointsDiscovered = true;
        }

        if (validGetEndpoints.contains(uri)) {
            return true;
        }

        if (matchesWildcardOrPathVariable(uri)) {
            return true;
        }

        if (matchesPathSegments(uri)) {
            return true;
        }

        return false;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInspector.java,EndpointInspector,matchesWildcardOrPathVariable,boolean matchesWildcardOrPathVariable(String),"[144, 167]","{'A233': [(144, 167)]}",{'A233': 1.0},A233,,"    private boolean matchesWildcardOrPathVariable(String uri) {
        for (String pattern : validGetEndpoints) {
            if (pattern.contains(""*"") || pattern.contains(""{"")) {
                int wildcardIndex = pattern.indexOf('*');
                int variableIndex = pattern.indexOf('{');

                int cutoffIndex;
                if (wildcardIndex < 0) {
                    cutoffIndex = variableIndex;
                } else if (variableIndex < 0) {
                    cutoffIndex = wildcardIndex;
                } else {
                    cutoffIndex = Math.min(wildcardIndex, variableIndex);
                }

                String staticPrefix = pattern.substring(0, cutoffIndex);

                if (uri.startsWith(staticPrefix)) {
                    return true;
                }
            }
        }
        return false;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInspector.java,EndpointInspector,matchesPathSegments,boolean matchesPathSegments(String),"[169, 193]","{'A233': [(169, 193)]}",{'A233': 1.0},A233,,"    private boolean matchesPathSegments(String uri) {
        for (String pattern : validGetEndpoints) {
            if (!pattern.contains(""*"") && !pattern.contains(""{"")) {
                String[] patternSegments = pattern.split(""/"");
                String[] uriSegments = uri.split(""/"");

                if (uriSegments.length < patternSegments.length) {
                    continue;
                }

                boolean match = true;
                for (int i = 0; i < patternSegments.length; i++) {
                    if (!patternSegments[i].equals(uriSegments[i])) {
                        match = false;
                        break;
                    }
                }

                if (match) {
                    return true;
                }
            }
        }
        return false;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInspector.java,EndpointInspector,getValidGetEndpoints,Set<String> getValidGetEndpoints(),"[195, 201]","{'A233': [(195, 201)]}",{'A233': 1.0},A233,,"    public Set<String> getValidGetEndpoints() {
        if (!endpointsDiscovered) {
            discoverEndpoints();
            endpointsDiscovered = true;
        }
        return new HashSet<>(validGetEndpoints);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInspector.java,EndpointInspector,logAllEndpoints,void logAllEndpoints(),"[203, 211]","{'A233': [(203, 211)]}",{'A233': 1.0},A233,,"    private void logAllEndpoints() {
        Set<String> sortedEndpoints = new TreeSet<>(validGetEndpoints);

        logger.info(""=== BEGIN: All discovered GET endpoints ==="");
        for (String endpoint : sortedEndpoints) {
            logger.info(""Endpoint: {}"", endpoint);
        }
        logger.info(""=== END: All discovered GET endpoints ==="");
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/StartupApplicationListener.java,StartupApplicationListener,onApplicationEvent,void onApplicationEvent(ContextRefreshedEvent),"[14, 17]","{'A233': [(14, 17)]}",{'A233': 1.0},A233,,"    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        startTime = LocalDateTime.now();
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/AppUpdateService.java,AppUpdateService,shouldShow,boolean shouldShow(),"[25, 31]","{'A234': [(25, 27), (29, 31)], 'A233': [(28, 28)]}","{'A234': 0.8571428571428571, 'A233': 0.14285714285714285}",A234,,"    @Bean(name = ""shouldShow"")
    @Scope(""request"")
    public boolean shouldShow() {
        boolean showUpdate = applicationProperties.getSystem().isShowUpdate();
        boolean showAdminResult = (showAdmin != null) ? showAdmin.getShowUpdateOnlyAdmins() : true;
        return showUpdate && showAdminResult;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/EndpointInterceptor.java,EndpointInterceptor,preHandle,"boolean preHandle(HttpServletRequest,HttpServletResponse,Object)","[19, 51]","{'A233': [(19, 23), (47, 51)], 'A264': [(24, 46)]}","{'A233': 0.30303030303030304, 'A264': 0.696969696969697}",A264,,"    @Override
    public boolean preHandle(
            HttpServletRequest request, HttpServletResponse response, Object handler)
            throws Exception {
        String requestURI = request.getRequestURI();
        boolean isEnabled;

        // Extract the specific endpoint name (e.g: /api/v1/general/remove-pages -> remove-pages)
        if (requestURI.contains(""/api/v1"") && requestURI.split(""/"").length > 4) {

            String[] requestURIParts = requestURI.split(""/"");
            String requestEndpoint;

            // Endpoint: /api/v1/convert/pdf/img becomes pdf-to-img
            if (""convert"".equals(requestURIParts[3]) && requestURIParts.length > 5) {
                requestEndpoint = requestURIParts[4] + ""-to-"" + requestURIParts[5];
            } else {
                requestEndpoint = requestURIParts[4];
            }

            log.debug(""Request endpoint: {}"", requestEndpoint);
            isEnabled = endpointConfiguration.isEndpointEnabled(requestEndpoint);
            log.debug(""Is endpoint enabled: {}"", isEnabled);
        } else {
            isEnabled = endpointConfiguration.isEndpointEnabled(requestURI);
        }

        if (!isEnabled) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, ""This endpoint is disabled"");
            return false;
        }
        return true;
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/LogbackPropertyLoader.java,LogbackPropertyLoader,getPropertyValue,String getPropertyValue(),"[8, 11]","{'A233': [(8, 11)]}",{'A233': 1.0},A233,,"    @Override
    public String getPropertyValue() {
        return InstallationPathConfig.getLogPath();
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java,ExternalAppDepConfig,isCommandAvailable,boolean isCommandAvailable(String),"[49, 64]","{'A233': [(49, 64)]}",{'A233': 1.0},A233,,"    private boolean isCommandAvailable(String command) {
        try {
            ProcessBuilder processBuilder = new ProcessBuilder();
            if (System.getProperty(""os.name"").toLowerCase().contains(""windows"")) {
                processBuilder.command(""where"", command);
            } else {
                processBuilder.command(""which"", command);
            }
            Process process = processBuilder.start();
            int exitCode = process.waitFor();
            return exitCode == 0;
        } catch (Exception e) {
            log.debug(""Error checking for command {}: {}"", command, e.getMessage());
            return false;
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java,ExternalAppDepConfig,getAffectedFeatures,List<String> getAffectedFeatures(String),"[66, 70]","{'A233': [(66, 70)]}",{'A233': 1.0},A233,,"    private List<String> getAffectedFeatures(String group) {
        return endpointConfiguration.getEndpointsForGroup(group).stream()
                .map(endpoint -> formatEndpointAsFeature(endpoint))
                .toList();
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java,ExternalAppDepConfig,formatEndpointAsFeature,String formatEndpointAsFeature(String),"[72, 79]","{'A233': [(72, 79)]}",{'A233': 1.0},A233,,"    private String formatEndpointAsFeature(String endpoint) {
        // First replace common terms
        String feature = endpoint.replace(""-"", "" "").replace(""pdf"", ""PDF"").replace(""img"", ""image"");
        // Split into words and capitalize each word
        return Arrays.stream(feature.split(""\\s+""))
                .map(word -> capitalizeWord(word))
                .collect(Collectors.joining("" ""));
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java,ExternalAppDepConfig,capitalizeWord,String capitalizeWord(String),"[81, 89]","{'A233': [(81, 89)]}",{'A233': 1.0},A233,,"    private String capitalizeWord(String word) {
        if (word.isEmpty()) {
            return word;
        }
        if (""pdf"".equalsIgnoreCase(word)) {
            return ""PDF"";
        }
        return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java,ExternalAppDepConfig,checkDependencyAndDisableGroup,void checkDependencyAndDisableGroup(String),"[91, 109]","{'A233': [(91, 109)]}",{'A233': 1.0},A233,,"    private void checkDependencyAndDisableGroup(String command) {
        boolean isAvailable = isCommandAvailable(command);
        if (!isAvailable) {
            List<String> affectedGroups = commandToGroupMapping.get(command);
            if (affectedGroups != null) {
                for (String group : affectedGroups) {
                    List<String> affectedFeatures = getAffectedFeatures(group);
                    endpointConfiguration.disableGroup(group);
                    log.warn(
                            ""Missing dependency: {} - Disabling group: {} (Affected features: {})"",
                            command,
                            group,
                            affectedFeatures != null && !affectedFeatures.isEmpty()
                                    ? String.join("", "", affectedFeatures)
                                    : ""unknown"");
                }
            }
        }
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java,ExternalAppDepConfig,checkDependencies,void checkDependencies(),"[111, 161]","{'A233': [(111, 161)]}",{'A233': 1.0},A233,,"    @PostConstruct
    public void checkDependencies() {
        // Check core dependencies
        checkDependencyAndDisableGroup(""gs"");
        checkDependencyAndDisableGroup(""ocrmypdf"");
        checkDependencyAndDisableGroup(""tesseract"");
        checkDependencyAndDisableGroup(""soffice"");
        checkDependencyAndDisableGroup(""qpdf"");
        checkDependencyAndDisableGroup(weasyprintPath);
        checkDependencyAndDisableGroup(""pdftohtml"");
        checkDependencyAndDisableGroup(unoconvPath);
        // Special handling for Python/OpenCV dependencies
        boolean pythonAvailable = isCommandAvailable(""python3"") || isCommandAvailable(""python"");
        if (!pythonAvailable) {
            List<String> pythonFeatures = getAffectedFeatures(""Python"");
            List<String> openCVFeatures = getAffectedFeatures(""OpenCV"");
            endpointConfiguration.disableGroup(""Python"");
            endpointConfiguration.disableGroup(""OpenCV"");
            log.warn(
                    ""Missing dependency: Python - Disabling Python features: {} and OpenCV features: {}"",
                    String.join("", "", pythonFeatures),
                    String.join("", "", openCVFeatures));
        } else {
            // If Python is available, check for OpenCV
            try {
                ProcessBuilder processBuilder = new ProcessBuilder();
                if (System.getProperty(""os.name"").toLowerCase().contains(""windows"")) {
                    processBuilder.command(""python"", ""-c"", ""import cv2"");
                } else {
                    processBuilder.command(""python3"", ""-c"", ""import cv2"");
                }
                Process process = processBuilder.start();
                int exitCode = process.waitFor();
                if (exitCode != 0) {
                    List<String> openCVFeatures = getAffectedFeatures(""OpenCV"");
                    endpointConfiguration.disableGroup(""OpenCV"");
                    log.warn(
                            ""OpenCV not available in Python - Disabling OpenCV features: {}"",
                            String.join("", "", openCVFeatures));
                }
            } catch (Exception e) {
                List<String> openCVFeatures = getAffectedFeatures(""OpenCV"");
                endpointConfiguration.disableGroup(""OpenCV"");
                log.warn(
                        ""Error checking OpenCV: {} - Disabling OpenCV features: {}"",
                        e.getMessage(),
                        String.join("", "", openCVFeatures));
            }
        }
        endpointConfiguration.logDisabledEndpointsSummary();
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java,WebMvcConfig,addInterceptors,void addInterceptors(InterceptorRegistry),"[18, 21]","{'A233': [(18, 21)]}",{'A233': 1.0},A233,,"    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(endpointInterceptor);
    }
"
stirling.software.SPDF.config,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java,WebMvcConfig,addResourceHandlers,void addResourceHandlers(ResourceHandlerRegistry),"[23, 30]","{'A233': [(23, 30)]}",{'A233': 1.0},A233,,"    @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        // Handler for external static resources
        registry.addResourceHandler(""/**"")
                .addResourceLocations(
                        ""file:"" + InstallationPathConfig.getStaticPath(), ""classpath:/static/"");
        // .setCachePeriod(0); // Optional: disable caching
    }
"
stirling.software.SPDF.Factories,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/Factories/ReplaceAndInvertColorFactory.java,ReplaceAndInvertColorFactory,replaceAndInvert,"ReplaceAndInvertColorStrategy replaceAndInvert(MultipartFile,ReplaceAndInvert,HighContrastColorCombination,String,String)","[15, 38]","{'A249': [(15, 38)]}",{'A249': 1.0},A249,,"    public ReplaceAndInvertColorStrategy replaceAndInvert(
            MultipartFile file,
            ReplaceAndInvert replaceAndInvertOption,
            HighContrastColorCombination highContrastColorCombination,
            String backGroundColor,
            String textColor) {

        if (replaceAndInvertOption == ReplaceAndInvert.CUSTOM_COLOR
                || replaceAndInvertOption == ReplaceAndInvert.HIGH_CONTRAST_COLOR) {

            return new CustomColorReplaceStrategy(
                    file,
                    replaceAndInvertOption,
                    textColor,
                    backGroundColor,
                    highContrastColorCombination);

        } else if (replaceAndInvertOption == ReplaceAndInvert.FULL_INVERSION) {

            return new InvertFullColorStrategy(file, replaceAndInvertOption);
        }

        return null;
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/LibreOfficeListener.java,LibreOfficeListener,getInstance,LibreOfficeListener getInstance(),"[26, 28]","{'A233': [(26, 28)]}",{'A233': 1.0},A233,,"    public static LibreOfficeListener getInstance() {
        return INSTANCE;
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/LibreOfficeListener.java,LibreOfficeListener,isListenerRunning,boolean isListenerRunning(),"[30, 40]","{'A233': [(30, 40)]}",{'A233': 1.0},A233,,"    private boolean isListenerRunning() {
        log.info(""waiting for listener to start"");
        try (Socket socket = new Socket()) {
            socket.connect(
                    new InetSocketAddress(""localhost"", LISTENER_PORT),
                    1000); // Timeout after 1 second
            return true;
        } catch (Exception e) {
            return false;
        }
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/LibreOfficeListener.java,LibreOfficeListener,start,void start(),"[42, 88]","{'A233': [(42, 48), (50, 84), (86, 88)], 'A243': [(49, 49)], 'A238': [(85, 85)]}","{'A233': 0.9574468085106383, 'A243': 0.02127659574468085, 'A238': 0.02127659574468085}",A233,,"    public void start() throws IOException {
        // Check if the listener is already running
        if (process != null && process.isAlive()) {
            return;
        }

        // Start the listener process
        process = SystemCommand.runCommand(Runtime.getRuntime(), ""unoconv --listener"");
        lastActivityTime = System.currentTimeMillis();

        // Start a background thread to monitor the activity timeout
        executorService = Executors.newSingleThreadExecutor();
        executorService.submit(
                () -> {
                    while (true) {
                        long idleTime = System.currentTimeMillis() - lastActivityTime;
                        if (idleTime >= ACTIVITY_TIMEOUT) {
                            // If there has been no activity for too long, tear down the listener
                            process.destroy();
                            break;
                        }
                        try {
                            Thread.sleep(5000); // Check for inactivity every 5 seconds
                        } catch (InterruptedException e) {
                            Thread.currentThread().interrupt();
                            break;
                        }
                    }
                });

        // Wait for the listener to start up
        long startTime = System.currentTimeMillis();
        long timeout = 30000; // Timeout after 30 seconds
        while (System.currentTimeMillis() - startTime < timeout) {
            if (isListenerRunning()) {

                lastActivityTime = System.currentTimeMillis();
                return;
            }
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                log.error(""exception"", e);
            } // Check every 1 second
        }
    }
"
stirling.software.SPDF,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/SPDF/LibreOfficeListener.java,LibreOfficeListener,stop,void stop(),"[90, 98]","{'A233': [(90, 98)]}",{'A233': 1.0},A233,,"    public synchronized void stop() {
        // Stop the activity timeout monitor thread
        executorService.shutdownNow();

        // Stop the listener process
        if (process != null && process.isAlive()) {
            process.destroy();
        }
    }
"
stirling.software.common.controller,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/common/controller/JobController.java,JobController,getJobStatus,ResponseEntity<?> getJobStatus(String),"[43, 63]","{'A233': [(43, 63)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/common/controller/JobControllerTest.java,"    @GetMapping(""/api/v1/general/job/{jobId}"")
    public ResponseEntity<?> getJobStatus(@PathVariable(""jobId"") String jobId) {
        JobResult result = taskManager.getJobResult(jobId);
        if (result == null) {
            return ResponseEntity.notFound().build();
        }

        // Check if the job is in the queue and add queue information
        if (!result.isComplete() && jobQueue.isJobQueued(jobId)) {
            int position = jobQueue.getJobPosition(jobId);
            Map<String, Object> resultWithQueueInfo =
                    Map.of(
                            ""jobResult"",
                            result,
                            ""queueInfo"",
                            Map.of(""inQueue"", true, ""position"", position));
            return ResponseEntity.ok(resultWithQueueInfo);
        }

        return ResponseEntity.ok(result);
    }
"
stirling.software.common.controller,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/common/controller/JobController.java,JobController,getJobResult,ResponseEntity<?> getJobResult(String),"[71, 120]","{'A233': [(71, 120)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/common/controller/JobControllerTest.java,"    @GetMapping(""/api/v1/general/job/{jobId}/result"")
    public ResponseEntity<?> getJobResult(@PathVariable(""jobId"") String jobId) {
        JobResult result = taskManager.getJobResult(jobId);
        if (result == null) {
            return ResponseEntity.notFound().build();
        }

        if (!result.isComplete()) {
            return ResponseEntity.badRequest().body(""Job is not complete yet"");
        }

        if (result.getError() != null) {
            return ResponseEntity.badRequest().body(""Job failed: "" + result.getError());
        }

        // Handle multiple files - return metadata for client to download individually
        if (result.hasMultipleFiles()) {
            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_JSON)
                    .body(
                            Map.of(
                                    ""jobId"",
                                    jobId,
                                    ""hasMultipleFiles"",
                                    true,
                                    ""files"",
                                    result.getAllResultFiles()));
        }

        // Handle single file (download directly)
        if (result.hasFiles() && !result.hasMultipleFiles()) {
            try {
                List<ResultFile> files = result.getAllResultFiles();
                ResultFile singleFile = files.get(0);
                byte[] fileContent = fileStorage.retrieveBytes(singleFile.getFileId());
                return ResponseEntity.ok()
                        .header(""Content-Type"", singleFile.getContentType())
                        .header(
                                ""Content-Disposition"",
                                createContentDispositionHeader(singleFile.getFileName()))
                        .body(fileContent);
            } catch (Exception e) {
                log.error(""Error retrieving file for job {}: {}"", jobId, e.getMessage(), e);
                return ResponseEntity.internalServerError()
                        .body(""Error retrieving file: "" + e.getMessage());
            }
        }

        return ResponseEntity.ok(result.getResult());
    }
"
stirling.software.common.controller,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/common/controller/JobController.java,JobController,cancelJob,ResponseEntity<?> cancelJob(String),"[133, 192]","{'A233': [(133, 192)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/common/controller/JobControllerTest.java,"    @DeleteMapping(""/api/v1/general/job/{jobId}"")
    public ResponseEntity<?> cancelJob(@PathVariable(""jobId"") String jobId) {
        log.debug(""Request to cancel job: {}"", jobId);

        // Verify that this job belongs to the current user
        // We can use the current request's session to validate ownership
        Object sessionJobIds = request.getSession().getAttribute(""userJobIds"");
        if (sessionJobIds == null
                || !(sessionJobIds instanceof java.util.Set)
                || !((java.util.Set<?>) sessionJobIds).contains(jobId)) {
            // Either no jobs in session or jobId doesn't match user's jobs
            log.warn(""Unauthorized attempt to cancel job: {}"", jobId);
            return ResponseEntity.status(403)
                    .body(Map.of(""message"", ""You are not authorized to cancel this job""));
        }

        // First check if the job is in the queue
        boolean cancelled = false;
        int queuePosition = -1;

        if (jobQueue.isJobQueued(jobId)) {
            queuePosition = jobQueue.getJobPosition(jobId);
            cancelled = jobQueue.cancelJob(jobId);
            log.info(""Cancelled queued job: {} (was at position {})"", jobId, queuePosition);
        }

        // If not in queue or couldn't cancel, try to cancel in TaskManager
        if (!cancelled) {
            JobResult result = taskManager.getJobResult(jobId);
            if (result != null && !result.isComplete()) {
                // Mark as error with cancellation message
                taskManager.setError(jobId, ""Job was cancelled by user"");
                cancelled = true;
                log.info(""Marked job as cancelled in TaskManager: {}"", jobId);
            }
        }

        if (cancelled) {
            return ResponseEntity.ok(
                    Map.of(
                            ""message"",
                            ""Job cancelled successfully"",
                            ""wasQueued"",
                            queuePosition >= 0,
                            ""queuePosition"",
                            queuePosition >= 0 ? queuePosition : ""n/a""));
        } else {
            // Job not found or already complete
            JobResult result = taskManager.getJobResult(jobId);
            if (result == null) {
                return ResponseEntity.notFound().build();
            } else if (result.isComplete()) {
                return ResponseEntity.badRequest()
                        .body(Map.of(""message"", ""Cannot cancel job that is already complete""));
            } else {
                return ResponseEntity.internalServerError()
                        .body(Map.of(""message"", ""Failed to cancel job for unknown reason""));
            }
        }
    }
"
stirling.software.common.controller,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/common/controller/JobController.java,JobController,getJobFiles,ResponseEntity<?> getJobFiles(String),"[200, 221]","{'A233': [(200, 221)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/common/controller/JobControllerTest.java,"    @GetMapping(""/api/v1/general/job/{jobId}/result/files"")
    public ResponseEntity<?> getJobFiles(@PathVariable(""jobId"") String jobId) {
        JobResult result = taskManager.getJobResult(jobId);
        if (result == null) {
            return ResponseEntity.notFound().build();
        }

        if (!result.isComplete()) {
            return ResponseEntity.badRequest().body(""Job is not complete yet"");
        }

        if (result.getError() != null) {
            return ResponseEntity.badRequest().body(""Job failed: "" + result.getError());
        }

        List<ResultFile> files = result.getAllResultFiles();
        return ResponseEntity.ok(
                Map.of(
                        ""jobId"", jobId,
                        ""fileCount"", files.size(),
                        ""files"", files));
    }
"
stirling.software.common.controller,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/common/controller/JobController.java,JobController,getFileMetadata,ResponseEntity<?> getFileMetadata(String),"[229, 261]","{'A233': [(229, 261)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/common/controller/JobControllerTest.java,"    @GetMapping(""/api/v1/general/files/{fileId}/metadata"")
    public ResponseEntity<?> getFileMetadata(@PathVariable(""fileId"") String fileId) {
        try {
            // Verify file exists
            if (!fileStorage.fileExists(fileId)) {
                return ResponseEntity.notFound().build();
            }

            // Find the file metadata from any job that contains this file
            ResultFile resultFile = taskManager.findResultFileByFileId(fileId);

            if (resultFile != null) {
                return ResponseEntity.ok(resultFile);
            } else {
                // File exists but no metadata found, get basic info efficiently
                long fileSize = fileStorage.getFileSize(fileId);
                return ResponseEntity.ok(
                        Map.of(
                                ""fileId"",
                                fileId,
                                ""fileName"",
                                ""unknown"",
                                ""contentType"",
                                ""application/octet-stream"",
                                ""fileSize"",
                                fileSize));
            }
        } catch (Exception e) {
            log.error(""Error retrieving file metadata {}: {}"", fileId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(""Error retrieving file metadata: "" + e.getMessage());
        }
    }
"
stirling.software.common.controller,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/common/controller/JobController.java,JobController,downloadFile,ResponseEntity<?> downloadFile(String),"[269, 297]","{'A233': [(269, 297)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/common/controller/JobControllerTest.java,"    @GetMapping(""/api/v1/general/files/{fileId}"")
    public ResponseEntity<?> downloadFile(@PathVariable(""fileId"") String fileId) {
        try {
            // Verify file exists
            if (!fileStorage.fileExists(fileId)) {
                return ResponseEntity.notFound().build();
            }

            // Retrieve file content
            byte[] fileContent = fileStorage.retrieveBytes(fileId);

            // Find the file metadata from any job that contains this file
            // This is for getting the original filename and content type
            ResultFile resultFile = taskManager.findResultFileByFileId(fileId);

            String fileName = resultFile != null ? resultFile.getFileName() : ""download"";
            String contentType =
                    resultFile != null ? resultFile.getContentType() : ""application/octet-stream"";

            return ResponseEntity.ok()
                    .header(""Content-Type"", contentType)
                    .header(""Content-Disposition"", createContentDispositionHeader(fileName))
                    .body(fileContent);
        } catch (Exception e) {
            log.error(""Error retrieving file {}: {}"", fileId, e.getMessage(), e);
            return ResponseEntity.internalServerError()
                    .body(""Error retrieving file: "" + e.getMessage());
        }
    }
"
stirling.software.common.controller,../projects/Stirling-PDF/app/core/src/main/java/stirling/software/common/controller/JobController.java,JobController,createContentDispositionHeader,String createContentDispositionHeader(String),"[305, 315]","{'A233': [(305, 315)]}",{'A233': 1.0},A233,../projects/Stirling-PDF/app/core/src/test/java/stirling/software/common/controller/JobControllerTest.java,"    private String createContentDispositionHeader(String fileName) {
        try {
            String encodedFileName =
                    URLEncoder.encode(fileName, StandardCharsets.UTF_8)
                            .replace(""+"", ""%20""); // URLEncoder uses + for spaces, but we want %20
            return ""attachment; filename=\"""" + fileName + ""\""; filename*=UTF-8''"" + encodedFileName;
        } catch (Exception e) {
            // Fallback to basic filename if encoding fails
            return ""attachment; filename=\"""" + fileName + ""\"""";
        }
    }
"
