package,filepath,class_path,method_name,signature,line_range,author_lines_map,author_edit_ratio_map,dominant_author,test_class,code
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/RedisVersion.java,RedisVersion,compareTo,int compareTo(RedisVersion),"[16, 26]","{'A1': [(16, 26)]}",{'A1': 1.0},A1,,"    @Override
    public int compareTo(RedisVersion other) {
        int max = Math.max(this.numbers.length, other.numbers.length);
        for (int i = 0; i < max; i++) {
            int thisNumber = this.numbers.length > i ? this.numbers[i]:0;
            int otherNumber = other.numbers.length > i ? other.numbers[i]:0;
            if (thisNumber < otherNumber) return -1;
            if (thisNumber > otherNumber) return 1;
        }
        return 0;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/RedisVersion.java,RedisVersion,toString,String toString(),"[28, 31]","{'A1': [(28, 31)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
        return this.version;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/RedisVersion.java,RedisVersion,equals,boolean equals(Object),"[33, 39]","{'A1': [(33, 39)]}",{'A1': 1.0},A1,,"    @Override
    public boolean equals(Object that) {
        if (this == that) return true;
        if (that == null) return false;
        if (this.getClass() != that.getClass()) return false;
        return this.compareTo((RedisVersion) that) == 0;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,setCache,void setCache(Cache),"[36, 54]","{'A1': [(36, 54)]}",{'A1': 1.0},A1,,"    @Override
    public void setCache(Cache cache) {
        this.cache = cache;
        this.accessTimes = new LinkedHashMap<CacheKey, Long>(initialCapacity, 1f, true) {
            @Override
            protected boolean removeEldestEntry(Map.Entry<CacheKey, Long> eldest) {
                boolean evictionRequired = cache.getSize() > cache.getMaxSize()
                        || accessTimes.size() > cache.getMaxSize();
                // here the cache check is only for performance gain; we are trying to avoid the sequence add + poll + hasCacheKey
                // and prefer to check it in cache once in early stage.
                // if there is nothing to remove in actual cache as of now, stop worrying about it.
                if (evictionRequired && cache.hasCacheKey(eldest.getKey())) {
                    pendingEvictions.addLast(eldest.getKey());

                }
                return evictionRequired;
            }
        };
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,removeEldestEntry,"boolean removeEldestEntry(Map.Entry<CacheKey, Long>)","[40, 52]","{'A1': [(40, 52)]}",{'A1': 1.0},A1,,"            @Override
            protected boolean removeEldestEntry(Map.Entry<CacheKey, Long> eldest) {
                boolean evictionRequired = cache.getSize() > cache.getMaxSize()
                        || accessTimes.size() > cache.getMaxSize();
                // here the cache check is only for performance gain; we are trying to avoid the sequence add + poll + hasCacheKey
                // and prefer to check it in cache once in early stage.
                // if there is nothing to remove in actual cache as of now, stop worrying about it.
                if (evictionRequired && cache.hasCacheKey(eldest.getKey())) {
                    pendingEvictions.addLast(eldest.getKey());

                }
                return evictionRequired;
            }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,getCache,Cache getCache(),"[56, 59]","{'A1': [(56, 59)]}",{'A1': 1.0},A1,,"    @Override
    public Cache getCache() {
        return this.cache;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,getType,EvictionType getType(),"[61, 64]","{'A1': [(61, 64)]}",{'A1': 1.0},A1,,"    @Override
    public EvictionType getType() {
        return EvictionType.AGE;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,getName,String getName(),"[66, 69]","{'A1': [(66, 69)]}",{'A1': 1.0},A1,,"    @Override
    public String getName() {
        return ""Simple L(east) R(ecently) U(sed)"";
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,evictNext,CacheKey evictNext(),"[71, 78]","{'A1': [(71, 78)]}",{'A1': 1.0},A1,,"    @Override
    public synchronized CacheKey evictNext() {
        CacheKey cacheKey = pendingEvictions.pollFirst();
        while (cacheKey != null && !cache.hasCacheKey(cacheKey)) {
            cacheKey = pendingEvictions.pollFirst();
        }
        return cacheKey;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,evictMany,List<CacheKey> evictMany(int),"[80, 87]","{'A1': [(80, 87)]}",{'A1': 1.0},A1,,"    @Override
    public synchronized List<CacheKey> evictMany(int n) {
        List<CacheKey> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            result.add(this.evictNext());
        }
        return result;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,touch,void touch(CacheKey),"[89, 92]","{'A1': [(89, 92)]}",{'A1': 1.0},A1,,"    @Override
    public synchronized void touch(CacheKey cacheKey) {
        this.accessTimes.put(cacheKey, new Date().getTime());
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,reset,boolean reset(CacheKey),"[94, 97]","{'A1': [(94, 97)]}",{'A1': 1.0},A1,,"    @Override
    public synchronized boolean reset(CacheKey cacheKey) {
        return this.accessTimes.remove(cacheKey) != null;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/LRUEviction.java,LRUEviction,resetAll,int resetAll(),"[99, 104]","{'A1': [(99, 104)]}",{'A1': 1.0},A1,,"    @Override
    public synchronized int resetAll() {
        int result = this.accessTimes.size();
        accessTimes.clear();
        return result;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,getMaxSize,int getMaxSize(),"[40, 43]","{'A1': [(40, 43)]}",{'A1': 1.0},A1,,"  @Override
  public int getMaxSize() {
    return maximumSize;
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,get,CacheEntry get(CacheKey),"[51, 58]","{'A1': [(51, 58)]}",{'A1': 1.0},A1,,"  @Override
  public CacheEntry get(CacheKey cacheKey) {
    CacheEntry entry = getFromStore(cacheKey);
    if (entry != null) {
      getEvictionPolicy().touch(cacheKey);
    }
    return entry;
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,set,"CacheEntry set(CacheKey,CacheEntry)","[60, 87]","{'A1': [(60, 87)]}",{'A1': 1.0},A1,,"  @Override
  public CacheEntry set(CacheKey cacheKey, CacheEntry entry) {
    lock.lock();
    try {
      entry = putIntoStore(cacheKey, entry);
      EvictionPolicy policy = getEvictionPolicy();
      policy.touch(cacheKey);
      CacheKey evictedKey = policy.evictNext();
      if (evictedKey != null) {
        delete(evictedKey);
        stats.evict();
      }
      for (Object redisKey : cacheKey.getRedisKeys()) {
        ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);
        if (redisKeysToCacheKeys.containsKey(mapKey)) {
          redisKeysToCacheKeys.get(mapKey).add(cacheKey);
        } else {
          Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();
          set.add(cacheKey);
          redisKeysToCacheKeys.put(mapKey, set);
        }
      }
      stats.load();
      return entry;
    } finally {
      lock.unlock();
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,delete,boolean delete(CacheKey),"[89, 109]","{'A1': [(89, 109)]}",{'A1': 1.0},A1,,"  @Override
  public boolean delete(CacheKey cacheKey) {
    lock.lock();
    try {
      boolean removed = removeFromStore(cacheKey);
      getEvictionPolicy().reset(cacheKey);

      // removing it from redisKeysToCacheKeys as well
      // TODO: considering not doing it, what is the impact of not doing it ??
      for (Object redisKey : cacheKey.getRedisKeys()) {
        ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);
        Set<CacheKey<?>> cacheKeysRelatedtoRedisKey = redisKeysToCacheKeys.get(mapKey);
        if (cacheKeysRelatedtoRedisKey != null) {
          cacheKeysRelatedtoRedisKey.remove(cacheKey);
        }
      }
      return removed;
    } finally {
      lock.unlock();
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,delete,List<Boolean> delete(List<CacheKey>),"[111, 119]","{'A1': [(111, 119)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> delete(List<CacheKey> cacheKeys) {
    lock.lock();
    try {
      return cacheKeys.stream().map(this::delete).collect(Collectors.toList());
    } finally {
      lock.unlock();
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,deleteByRedisKey,List<CacheKey> deleteByRedisKey(Object),"[121, 139]","{'A1': [(121, 139)]}",{'A1': 1.0},A1,,"  @Override
  public List<CacheKey> deleteByRedisKey(Object key) {
    lock.lock();
    try {
      final ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(key);

      Set<CacheKey<?>> commands = redisKeysToCacheKeys.get(mapKey);
      List<CacheKey> cacheKeys = new ArrayList<>();
      if (commands != null) {
        cacheKeys.addAll(commands.stream().filter(this::removeFromStore).collect(Collectors.toList()));
        stats.invalidationByServer(cacheKeys.size());
        redisKeysToCacheKeys.remove(mapKey);
      }
      stats.invalidationMessages();
      return cacheKeys;
    } finally {
      lock.unlock();
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,deleteByRedisKeys,List<CacheKey> deleteByRedisKeys(List),"[141, 154]","{'A1': [(141, 154)]}",{'A1': 1.0},A1,,"  @Override
  public List<CacheKey> deleteByRedisKeys(List keys) {
    if (keys == null) {
      flush();
      return null;
    }
    lock.lock();
    try {
      return ((List<Object>) keys).stream()
          .map(this::deleteByRedisKey).flatMap(List::stream).collect(Collectors.toList());
    } finally {
      lock.unlock();
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,flush,int flush(),"[156, 169]","{'A1': [(156, 169)]}",{'A1': 1.0},A1,,"  @Override
  public int flush() {
    lock.lock();
    try {
      int result = this.getSize();
      clearStore();
      redisKeysToCacheKeys.clear();
      getEvictionPolicy().resetAll();
      getStats().flush();
      return result;
    } finally {
      lock.unlock();
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,isCacheable,boolean isCacheable(CacheKey),"[171, 174]","{'A1': [(171, 174)]}",{'A1': 1.0},A1,,"  @Override
  public boolean isCacheable(CacheKey cacheKey) {
    return cacheable.isCacheable(cacheKey.getRedisCommand(), cacheKey.getRedisKeys());
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,hasCacheKey,boolean hasCacheKey(CacheKey),"[176, 179]","{'A1': [(176, 179)]}",{'A1': 1.0},A1,,"  @Override
  public boolean hasCacheKey(CacheKey cacheKey) {
    return containsKeyInStore(cacheKey);
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,getStats,CacheStats getStats(),"[184, 187]","{'A1': [(184, 187)]}",{'A1': 1.0},A1,,"  @Override
  public CacheStats getStats() {
    return stats;
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,getAndResetStats,CacheStats getAndResetStats(),"[189, 194]","{'A1': [(189, 194)]}",{'A1': 1.0},A1,,"  @Override
  public CacheStats getAndResetStats() {
    CacheStats result = stats;
    stats = new CacheStats();
    return result;
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,compatibilityMode,boolean compatibilityMode(),"[196, 199]","{'A1': [(196, 199)]}",{'A1': 1.0},A1,,"  @Override
  public boolean compatibilityMode() {
    return false;
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,makeKeyForRedisKeysToCacheKeys,ByteBuffer makeKeyForRedisKeysToCacheKeys(Object),"[217, 226]","{'A1': [(217, 226)]}",{'A1': 1.0},A1,,"  private ByteBuffer makeKeyForRedisKeysToCacheKeys(Object key) {
    if (key instanceof byte[]) {
      return makeKeyForRedisKeysToCacheKeys((byte[]) key);
    } else if (key instanceof String) {
      return makeKeyForRedisKeysToCacheKeys(SafeEncoder.encode((String) key));
    } else {
      throw new IllegalArgumentException(key.getClass().getSimpleName() + "" is not supported.""
          + "" Value: \"""" + String.valueOf(key) + ""\""."");
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/AbstractCache.java,AbstractCache,makeKeyForRedisKeysToCacheKeys,ByteBuffer makeKeyForRedisKeysToCacheKeys(byte[]),"[228, 230]","{'A1': [(228, 230)]}",{'A1': 1.0},A1,,"  private static ByteBuffer makeKeyForRedisKeysToCacheKeys(byte[] b) {
    return ByteBuffer.wrap(b);
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,hit,void hit(),"[16, 18]","{'A1': [(16, 18)]}",{'A1': 1.0},A1,,"    protected void hit() {
        hits.incrementAndGet();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,miss,void miss(),"[20, 22]","{'A1': [(20, 22)]}",{'A1': 1.0},A1,,"    protected void miss() {
        misses.incrementAndGet();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,load,void load(),"[24, 26]","{'A1': [(24, 26)]}",{'A1': 1.0},A1,,"    protected void load() {
        loads.incrementAndGet();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,evict,void evict(),"[28, 30]","{'A1': [(28, 30)]}",{'A1': 1.0},A1,,"    protected void evict() {
        evicts.incrementAndGet();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,nonCacheable,void nonCacheable(),"[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"    protected void nonCacheable() {
        nonCacheable.incrementAndGet();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,flush,void flush(),"[36, 38]","{'A1': [(36, 38)]}",{'A1': 1.0},A1,,"    protected void flush() {
        flush.incrementAndGet();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,invalidationByServer,void invalidationByServer(int),"[40, 42]","{'A1': [(40, 42)]}",{'A1': 1.0},A1,,"    protected void invalidationByServer(int size) {
        invalidationsByServer.addAndGet(size);
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,invalidationMessages,void invalidationMessages(),"[44, 46]","{'A1': [(44, 46)]}",{'A1': 1.0},A1,,"    protected void invalidationMessages() {
        invalidationMessages.incrementAndGet();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,getHitCount,long getHitCount(),"[48, 50]","{'A1': [(48, 50)]}",{'A1': 1.0},A1,,"    public long getHitCount() {
        return hits.get();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,getMissCount,long getMissCount(),"[52, 54]","{'A1': [(52, 54)]}",{'A1': 1.0},A1,,"    public long getMissCount() {
        return misses.get();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,getLoadCount,long getLoadCount(),"[56, 58]","{'A1': [(56, 58)]}",{'A1': 1.0},A1,,"    public long getLoadCount() {
        return loads.get();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,getEvictCount,long getEvictCount(),"[60, 62]","{'A1': [(60, 62)]}",{'A1': 1.0},A1,,"    public long getEvictCount() {
        return evicts.get();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,getNonCacheableCount,long getNonCacheableCount(),"[64, 66]","{'A1': [(64, 66)]}",{'A1': 1.0},A1,,"    public long getNonCacheableCount() {
        return nonCacheable.get();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,getFlushCount,long getFlushCount(),"[68, 70]","{'A1': [(68, 70)]}",{'A1': 1.0},A1,,"    public long getFlushCount() {
        return flush.get();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,getInvalidationCount,long getInvalidationCount(),"[72, 74]","{'A1': [(72, 74)]}",{'A1': 1.0},A1,,"    public long getInvalidationCount() {
        return invalidationsByServer.get();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheStats.java,CacheStats,toString,String toString(),"[76, 87]","{'A1': [(76, 87)]}",{'A1': 1.0},A1,,"    public String toString() {
        return ""CacheStats{"" +
                ""hits="" + hits +
                "", misses="" + misses +
                "", loads="" + loads +
                "", evicts="" + evicts +
                "", nonCacheable="" + nonCacheable +
                "", flush="" + flush +
                "", invalidationsByServer="" + invalidationsByServer +
                "", invalidationMessages="" + invalidationMessages +
                '}';
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig,getMaxSize,int getMaxSize(),"[10, 12]","{'A1': [(10, 12)]}",{'A1': 1.0},A1,,"    public int getMaxSize() {
        return maxSize;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig,getCacheable,Cacheable getCacheable(),"[14, 16]","{'A1': [(14, 16)]}",{'A1': 1.0},A1,,"    public Cacheable getCacheable() {
        return cacheable;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig,getEvictionPolicy,EvictionPolicy getEvictionPolicy(),"[18, 20]","{'A1': [(18, 20)]}",{'A1': 1.0},A1,,"    public EvictionPolicy getEvictionPolicy() {
        return evictionPolicy;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig,getCacheClass,Class getCacheClass(),"[22, 24]","{'A1': [(22, 24)]}",{'A1': 1.0},A1,,"    public Class getCacheClass() {
        return cacheClass;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig,builder,Builder builder(),"[25, 27]","{'A1': [(25, 27)]}",{'A1': 1.0},A1,,"    public static Builder builder() {
        return new Builder();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig.Builder,maxSize,Builder maxSize(int),"[36, 39]","{'A1': [(36, 39)]}",{'A1': 1.0},A1,,"        public Builder maxSize(int maxSize) {
            this.maxSize = maxSize;
            return this;
        }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig.Builder,evictionPolicy,Builder evictionPolicy(EvictionPolicy),"[41, 44]","{'A1': [(41, 44)]}",{'A1': 1.0},A1,,"        public Builder evictionPolicy(EvictionPolicy policy) {
            this.evictionPolicy = policy;
            return this;
        }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig.Builder,cacheable,Builder cacheable(Cacheable),"[46, 49]","{'A1': [(46, 49)]}",{'A1': 1.0},A1,,"        public Builder cacheable(Cacheable cacheable) {
            this.cacheable = cacheable;
            return this;
        }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig.Builder,cacheClass,Builder cacheClass(Class),"[51, 54]","{'A1': [(51, 54)]}",{'A1': 1.0},A1,,"        public Builder cacheClass(Class cacheClass) {
            this.cacheClass = cacheClass;
            return this;
        }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConfig.java,CacheConfig.Builder,build,CacheConfig build(),"[56, 63]","{'A1': [(56, 63)]}",{'A1': 1.0},A1,,"        public CacheConfig build() {
            CacheConfig cacheConfig = new CacheConfig();
            cacheConfig.maxSize = this.maxSize;
            cacheConfig.cacheable = this.cacheable;
            cacheConfig.evictionPolicy = this.evictionPolicy;
            cacheConfig.cacheClass = this.cacheClass;
            return cacheConfig;
        }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheFactory.java,CacheFactory,getCache,Cache getCache(CacheConfig),"[11, 19]","{'A1': [(11, 19)]}",{'A1': 1.0},A1,,"    public static Cache getCache(CacheConfig config) {
        if (config.getCacheClass() == null) {
            if (config.getCacheable() == null) {
                throw new JedisCacheException(""Cacheable is required to create the default cache!"");
            }
            return new DefaultCache(config.getMaxSize(), config.getCacheable(), getEvictionPolicy(config));
        }
        return instantiateCustomCache(config);
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheFactory.java,CacheFactory,instantiateCustomCache,Cache instantiateCustomCache(CacheConfig),"[21, 35]","{'A1': [(21, 35)]}",{'A1': 1.0},A1,,"    private static Cache instantiateCustomCache(CacheConfig config) {
        try {
            if (config.getCacheable() != null) {
                Constructor ctorWithCacheable = findConstructorWithCacheable(config.getCacheClass());
                if (ctorWithCacheable != null) {
                    return (Cache) ctorWithCacheable.newInstance(config.getMaxSize(), getEvictionPolicy(config), config.getCacheable());
                }
            }
            Constructor ctor = getConstructor(config.getCacheClass());
            return (Cache) ctor.newInstance(config.getMaxSize(), getEvictionPolicy(config));
        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
                | SecurityException e) {
            throw new JedisCacheException(""Failed to insantiate custom cache type!"", e);
        }
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheFactory.java,CacheFactory,findConstructorWithCacheable,Constructor findConstructorWithCacheable(Class),"[37, 41]","{'A1': [(37, 41)]}",{'A1': 1.0},A1,,"    private static Constructor findConstructorWithCacheable(Class customCacheType) {
        return Arrays.stream(customCacheType.getConstructors())
                .filter(ctor -> Arrays.equals(ctor.getParameterTypes(), new Class[] { int.class, EvictionPolicy.class, Cacheable.class }))
                .findFirst().orElse(null);
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheFactory.java,CacheFactory,getConstructor,Constructor getConstructor(Class),"[43, 54]","{'A1': [(43, 54)]}",{'A1': 1.0},A1,,"    private static Constructor getConstructor(Class customCacheType) {
        try {
            return customCacheType.getConstructor(int.class, EvictionPolicy.class);
        } catch (NoSuchMethodException e) {
            String className = customCacheType.getName();
            throw new JedisCacheException(String.format(
                ""Failed to find compatible constructor for custom cache type!  Provide one of these;""
                        // give hints about the compatible constructors
                        + ""\n - %s(int maxSize, EvictionPolicy evictionPolicy)\n - %s(int maxSize, EvictionPolicy evictionPolicy, Cacheable cacheable)"",
                className, className), e);
        }
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheFactory.java,CacheFactory,getEvictionPolicy,EvictionPolicy getEvictionPolicy(CacheConfig),"[56, 62]","{'A1': [(56, 62)]}",{'A1': 1.0},A1,,"    private static EvictionPolicy getEvictionPolicy(CacheConfig config) {
        if (config.getEvictionPolicy() == null) {
            // It will be default to LRUEviction, until we have other eviction implementations
            return new LRUEviction(config.getMaxSize());
        }
        return config.getEvictionPolicy();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCache.java,DefaultCache,getSize,int getSize(),"[35, 38]","{'A1': [(35, 38)]}",{'A1': 1.0},A1,,"    @Override
    public int getSize() {
        return cache.size();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCache.java,DefaultCache,getCacheEntries,Collection<CacheEntry> getCacheEntries(),"[40, 43]","{'A1': [(40, 43)]}",{'A1': 1.0},A1,,"    @Override
    public Collection<CacheEntry> getCacheEntries() {
        return cache.values();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCache.java,DefaultCache,getEvictionPolicy,EvictionPolicy getEvictionPolicy(),"[45, 48]","{'A1': [(45, 48)]}",{'A1': 1.0},A1,,"    @Override
    public EvictionPolicy getEvictionPolicy() {
        return this.evictionPolicy;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCache.java,DefaultCache,getFromStore,CacheEntry getFromStore(CacheKey),"[50, 53]","{'A1': [(50, 53)]}",{'A1': 1.0},A1,,"    @Override
    public CacheEntry getFromStore(CacheKey key) {
        return cache.get(key);
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCache.java,DefaultCache,putIntoStore,"CacheEntry putIntoStore(CacheKey,CacheEntry)","[55, 58]","{'A1': [(55, 58)]}",{'A1': 1.0},A1,,"    @Override
    public CacheEntry putIntoStore(CacheKey key, CacheEntry entry) {
        return cache.put(key, entry);
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCache.java,DefaultCache,removeFromStore,boolean removeFromStore(CacheKey),"[60, 63]","{'A1': [(60, 63)]}",{'A1': 1.0},A1,,"    @Override
    public boolean removeFromStore(CacheKey key) {
        return cache.remove(key) != null;
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCache.java,DefaultCache,clearStore,void clearStore(),"[65, 68]","{'A1': [(65, 68)]}",{'A1': 1.0},A1,,"    @Override
    protected final void clearStore() {
        cache.clear();
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCache.java,DefaultCache,containsKeyInStore,boolean containsKeyInStore(CacheKey),"[70, 73]","{'A1': [(70, 73)]}",{'A1': 1.0},A1,,"    @Override
    protected boolean containsKeyInStore(CacheKey cacheKey) {
        return cache.containsKey(cacheKey);
    }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCacheable.java,DefaultCacheable,isDefaultCacheableCommand,boolean isDefaultCacheableCommand(ProtocolCommand),"[90, 92]","{'A1': [(90, 92)]}",{'A1': 1.0},A1,,"  public static boolean isDefaultCacheableCommand(ProtocolCommand command) {
    return DEFAULT_CACHEABLE_COMMANDS.contains(command);
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/DefaultCacheable.java,DefaultCacheable,isCacheable,"boolean isCacheable(ProtocolCommand,List<Object>)","[94, 97]","{'A1': [(94, 97)]}",{'A1': 1.0},A1,,"  @Override
  public boolean isCacheable(ProtocolCommand command, List<Object> keys) {
    return isDefaultCacheableCommand(command);
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConnection.java,CacheConnection,initializeFromClientConfig,void initializeFromClientConfig(JedisClientConfig),"[39, 43]","{'A1': [(39, 43)]}",{'A1': 1.0},A1,,"  @Override
  protected void initializeFromClientConfig(JedisClientConfig config) {
    lock = new ReentrantLock();
    super.initializeFromClientConfig(config);
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConnection.java,CacheConnection,protocolRead,Object protocolRead(RedisInputStream),"[45, 53]","{'A1': [(45, 53)]}",{'A1': 1.0},A1,,"  @Override
  protected Object protocolRead(RedisInputStream inputStream) {
    lock.lock();
    try {
      return Protocol.read(inputStream, cache);
    } finally {
      lock.unlock();
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConnection.java,CacheConnection,protocolReadPushes,void protocolReadPushes(RedisInputStream),"[55, 64]","{'A1': [(55, 64)]}",{'A1': 1.0},A1,,"  @Override
  protected void protocolReadPushes(RedisInputStream inputStream) {
    if (lock.tryLock()) {
      try {
        Protocol.readPushes(inputStream, cache, true);
      } finally {
        lock.unlock();
      }
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConnection.java,CacheConnection,disconnect,void disconnect(),"[66, 70]","{'A1': [(66, 70)]}",{'A1': 1.0},A1,,"  @Override
  public void disconnect() {
    super.disconnect();
    cache.flush();
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConnection.java,CacheConnection,executeCommand,T executeCommand(CommandObject<T>),"[72, 98]","{'A1': [(72, 98)]}",{'A1': 1.0},A1,,"  @Override
  public <T> T executeCommand(final CommandObject<T> commandObject) {
    final CacheKey cacheKey = new CacheKey(commandObject);
    if (!cache.isCacheable(cacheKey)) {
      cache.getStats().nonCacheable();
      return super.executeCommand(commandObject);
    }

    CacheEntry<T> cacheEntry = cache.get(cacheKey);
    if (cacheEntry != null) { // (probable) CACHE HIT !!
      cacheEntry = validateEntry(cacheEntry);
      if (cacheEntry != null) {
        // CACHE HIT confirmed !!!
        cache.getStats().hit();
        return cacheEntry.getValue();
      }
    }

    // CACHE MISS !!
    cache.getStats().miss();
    T value = super.executeCommand(commandObject);
    cacheEntry = new CacheEntry<>(cacheKey, value, this);
    cache.set(cacheKey, cacheEntry);
    // this line actually provides a deep copy of cached object instance 
    value = cacheEntry.getValue();
    return value;
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConnection.java,CacheConnection,getCache,Cache getCache(),"[100, 102]","{'A1': [(100, 102)]}",{'A1': 1.0},A1,,"  public Cache getCache() {
    return cache;
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConnection.java,CacheConnection,initializeClientSideCache,void initializeClientSideCache(),"[104, 110]","{'A1': [(104, 110)]}",{'A1': 1.0},A1,,"  private void initializeClientSideCache() {
    sendCommand(Protocol.Command.CLIENT, ""TRACKING"", ""ON"");
    String reply = getStatusCodeReply();
    if (!""OK"".equals(reply)) {
      throw new JedisException(""Could not enable client tracking. Reply: "" + reply);
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheConnection.java,CacheConnection,validateEntry,CacheEntry validateEntry(CacheEntry),"[112, 127]","{'A1': [(112, 127)]}",{'A1': 1.0},A1,,"  private CacheEntry validateEntry(CacheEntry cacheEntry) {
    CacheConnection cacheOwner = cacheEntry.getConnection();
    if (cacheOwner == null || cacheOwner.isBroken() || !cacheOwner.isConnected()) {
      cache.delete(cacheEntry.getCacheKey());
      return null;
    } else {
      try {
        cacheOwner.readPushesWithCheckingBroken();
      } catch (JedisException e) {
        cache.delete(cacheEntry.getCacheKey());
        return null;
      }

      return cache.get(cacheEntry.getCacheKey());
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheKey.java,CacheKey,hashCode,int hashCode(),"[17, 20]","{'A1': [(17, 20)]}",{'A1': 1.0},A1,,"  @Override
  public int hashCode() {
    return command.hashCode();
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheKey.java,CacheKey,equals,boolean equals(Object),"[22, 28]","{'A1': [(22, 28)]}",{'A1': 1.0},A1,,"  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null || getClass() != obj.getClass()) return false;
    final CacheKey other = (CacheKey) obj;
    return Objects.equals(this.command, other.command);
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheKey.java,CacheKey,getRedisKeys,List<Object> getRedisKeys(),"[30, 32]","{'A1': [(30, 32)]}",{'A1': 1.0},A1,,"  public List<Object> getRedisKeys() {
    return command.getArguments().getKeys();
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheKey.java,CacheKey,getRedisCommand,ProtocolCommand getRedisCommand(),"[34, 36]","{'A1': [(34, 36)]}",{'A1': 1.0},A1,,"  public ProtocolCommand getRedisCommand() {
    return command.getArguments().getCommand();
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheEntry.java,CacheEntry,getCacheKey,CacheKey<T> getCacheKey(),"[24, 26]","{'A1': [(24, 26)]}",{'A1': 1.0},A1,,"  public CacheKey<T> getCacheKey() {
    return cacheKey;
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheEntry.java,CacheEntry,getValue,T getValue(),"[28, 30]","{'A1': [(28, 30)]}",{'A1': 1.0},A1,,"  public T getValue() {
    return toObject(bytes);
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheEntry.java,CacheEntry,getConnection,CacheConnection getConnection(),"[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"  public CacheConnection getConnection() {
    return connection.get();
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheEntry.java,CacheEntry,toBytes,byte[] toBytes(Object),"[36, 46]","{'A1': [(36, 46)]}",{'A1': 1.0},A1,,"  private static byte[] toBytes(Object object) {
    try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos)) {
      oos.writeObject(object);
      oos.flush();
      oos.close();
      return baos.toByteArray();
    } catch (IOException e) {
      throw new JedisCacheException(""Failed to serialize object"", e);
    }
  }
"
redis.clients.jedis.csc,../projects/jedis/src/main/java/redis/clients/jedis/csc/CacheEntry.java,CacheEntry,toObject,T toObject(byte[]),"[48, 55]","{'A1': [(48, 55)]}",{'A1': 1.0},A1,,"  private T toObject(byte[] data) {
    try (ByteArrayInputStream bais = new ByteArrayInputStream(data);
        ObjectInputStream ois = new ObjectInputStream(bais)) {
      return (T) ois.readObject();
    } catch (IOException | ClassNotFoundException e) {
      throw new JedisCacheException(""Failed to deserialize object"", e);
    }
  }
"
redis.clients.jedis.csc.util,../projects/jedis/src/main/java/redis/clients/jedis/csc/util/AllowAndDenyListWithStringKeys.java,AllowAndDenyListWithStringKeys,isCacheable,"boolean isCacheable(ProtocolCommand,List<Object>)","[25, 47]","{'A1': [(25, 47)]}",{'A1': 1.0},A1,,"  @Override
  public boolean isCacheable(ProtocolCommand command, List<Object> keys) {
    if (allowCommands != null && !allowCommands.contains(command)) {
      return false;
    }
    if (denyCommands != null && denyCommands.contains(command)) {
      return false;
    }

    for (Object key : keys) {
      if (!(key instanceof String)) {
        return false;
      }
      if (allowKeys != null && !allowKeys.contains((String) key)) {
        return false;
      }
      if (denyKeys != null && denyKeys.contains((String) key)) {
        return false;
      }
    }

    return DefaultCacheable.isDefaultCacheableCommand(command);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,createCommandObjects,CommandObjects createCommandObjects(Connection),"[87, 92]","{'A1': [(87, 92)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  private static CommandObjects createCommandObjects(Connection connection) {
    CommandObjects commandObjects = new CommandObjects();
    RedisProtocol proto = connection.getRedisProtocol();
    if (proto != null) commandObjects.setProtocol(proto);
    return commandObjects;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,multi,void multi(),"[94, 102]","{'A1': [(94, 102)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  @Override
  public final void multi() {
    connection.sendCommand(MULTI);
    String status = connection.getStatusCodeReply();
    if (!""OK"".equals(status)) {
      throw new JedisException(""MULTI command failed. Received response: "" + status);
    }
    inMulti = true;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,watch,String watch(),"[104, 109]","{'A1': [(104, 109)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  @Override
  public String watch(final String... keys) {
    String status = connection.executeCommand(commandObjects.watch(keys));
    inWatch = true;
    return status;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,watch,String watch(),"[111, 116]","{'A1': [(111, 116)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  @Override
  public String watch(final byte[]... keys) {
    String status = connection.executeCommand(commandObjects.watch(keys));
    inWatch = true;
    return status;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,unwatch,String unwatch(),"[118, 124]","{'A1': [(118, 124)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  @Override
  public String unwatch() {
    connection.sendCommand(UNWATCH);
    String status = connection.getStatusCodeReply();
    inWatch = false;
    return status;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,appendCommand,Response<T> appendCommand(CommandObject<T>),"[126, 136]","{'A1': [(126, 136)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  @Override
  protected final <T> Response<T> appendCommand(CommandObject<T> commandObject) {
    connection.sendCommand(commandObject.getArguments());
    String status = connection.getStatusCodeReply();
    if (!QUEUED_STR.equals(status)) {
      throw new JedisException(status);
    }
    Response<T> response = new Response<>(commandObject.getBuilder());
    pipelinedResponses.add(response);
    return response;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,close,void close(),"[138, 147]","{'A1': [(138, 147)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  @Override
  public final void close() {
    try {
      clear();
    } finally {
      if (closeConnection) {
        connection.close();
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,clear,void clear(),"[149, 159]","{'A1': [(149, 159)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  @Deprecated // TODO: private
  public final void clear() {
    if (broken) {
      return;
    }
    if (inMulti) {
      discard();
    } else if (inWatch) {
      unwatch();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,exec,List<Object> exec(),"[161, 197]","{'A1': [(161, 197)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  @Override
  public List<Object> exec() {
    if (!inMulti) {
      throw new IllegalStateException(""EXEC without MULTI"");
    }

    try {
      // processPipelinedResponses(pipelinedResponses.size());
      // do nothing
      connection.sendCommand(EXEC);

      List<Object> unformatted = connection.getObjectMultiBulkReply();
      if (unformatted == null) {
        pipelinedResponses.clear();
        return null;
      }

      List<Object> formatted = new ArrayList<>(unformatted.size());
      for (Object o : unformatted) {
        try {
          Response<?> response = pipelinedResponses.poll();
          response.set(o);
          formatted.add(response.get());
        } catch (JedisDataException e) {
          formatted.add(e);
        }
      }
      return formatted;
    } catch (JedisConnectionException jce) {
      broken = true;
      throw jce;
    } finally {
      inMulti = false;
      inWatch = false;
      pipelinedResponses.clear();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ReliableTransaction.java,ReliableTransaction,discard,String discard(),"[199, 222]","{'A1': [(199, 222)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ReliableTransactionTest.java,"  @Override
  public String discard() {
    if (!inMulti) {
      throw new IllegalStateException(""DISCARD without MULTI"");
    }

    try {
      // processPipelinedResponses(pipelinedResponses.size());
      // do nothing
      connection.sendCommand(DISCARD);
      String status = connection.getStatusCodeReply();
      if (!""OK"".equals(status)) {
        throw new JedisException(""DISCARD command failed. Received response: "" + status);
      }
      return status;
    } catch (JedisConnectionException jce) {
      broken = true;
      throw jce;
    } finally {
      inMulti = false;
      inWatch = false;
      pipelinedResponses.clear();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Object build(Object),"[16, 19]","{'A1': [(16, 19)]}",{'A1': 1.0},A1,,"    @Override
    public Object build(Object data) {
      return data;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[21, 24]","{'A1': [(21, 24)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Object"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Object> build(Object),"[28, 31]","{'A1': [(28, 31)]}",{'A1': 1.0},A1,,"    @Override
    public List<Object> build(Object data) {
      return (List<Object>) data;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[33, 36]","{'A1': [(33, 36)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<Object>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Object build(Object),"[40, 43]","{'A1': [(40, 43)]}",{'A1': 1.0},A1,,"    @Override
    public Object build(Object data) {
      return SafeEncoder.encodeObject(data);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[45, 48]","{'A1': [(45, 48)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Object"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Object> build(Object),"[52, 55]","{'A1': [(52, 55)]}",{'A1': 1.0},A1,,"    @Override
    public List<Object> build(Object data) {
      return (List<Object>) SafeEncoder.encodeObject(data);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[57, 60]","{'A1': [(57, 60)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<Object>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Long build(Object),"[64, 67]","{'A1': [(64, 67)]}",{'A1': 1.0},A1,,"    @Override
    public Long build(Object data) {
      return (Long) data;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[69, 72]","{'A1': [(69, 72)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Long"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Long> build(Object),"[77, 84]","{'A1': [(77, 84)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Long> build(Object data) {
      if (null == data) {
        return null;
      }
      return (List<Long>) data;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[86, 89]","{'A1': [(86, 89)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<Long>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Double build(Object),"[94, 99]","{'A1': [(96, 98)], 'A7': [(95, 95), (99, 99)], 'A8': [(94, 94)]}","{'A1': 0.5, 'A7': 0.3333333333333333, 'A8': 0.16666666666666666}",A1,,"    @Override
    public Double build(Object data) {
      if (data == null) return null;
      else if (data instanceof Double) return (Double) data;
      else return DoublePrecision.parseFloatingPointNumber(STRING.build(data));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[101, 104]","{'A1': [(101, 101), (103, 104)], 'A7': [(102, 102)]}","{'A1': 0.75, 'A7': 0.25}",A1,,"    @Override
    public String toString() {
      return ""Double"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Double> build(Object),"[108, 113]","{'A1': [(108, 113)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Double> build(Object data) {
      if (null == data) return null;
      return ((List<Object>) data).stream().map(DOUBLE::build).collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[115, 118]","{'A1': [(115, 117)], 'A7': [(118, 118)]}","{'A1': 0.75, 'A7': 0.25}",A1,,"    @Override
    public String toString() {
      return ""List<Double>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Boolean build(Object),"[122, 127]","{'A1': [(124, 126)], 'A7': [(123, 123), (127, 127)], 'A8': [(122, 122)]}","{'A1': 0.5, 'A7': 0.3333333333333333, 'A8': 0.16666666666666666}",A1,,"    @Override
    public Boolean build(Object data) {
      if (data == null) return null;
      else if (data instanceof Boolean) return (Boolean) data;
      return ((Long) data) == 1L;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[129, 132]","{'A1': [(129, 129), (131, 131)], 'A7': [(130, 130), (132, 132)]}","{'A1': 0.5, 'A7': 0.5}",A1,,"    @Override
    public String toString() {
      return ""Boolean"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Boolean> build(Object),"[136, 141]","{'A1': [(137, 140)], 'A7': [(141, 141)], 'A8': [(136, 136)]}","{'A1': 0.6666666666666666, 'A7': 0.16666666666666666, 'A8': 0.16666666666666666}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Boolean> build(Object data) {
      if (null == data) return null;
      return ((List<Object>) data).stream().map(BOOLEAN::build).collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[143, 146]","{'A1': [(143, 143), (145, 145)], 'A7': [(144, 144), (146, 146)]}","{'A1': 0.5, 'A7': 0.5}",A1,,"    @Override
    public String toString() {
      return ""List<Boolean>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Boolean> build(Object),"[150, 158]","{'A1': [(150, 158)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Boolean> build(Object data) {
      if (null == data) return null;
      return ((List<Object>) data).stream()
          //.map((val) -> (val instanceof JedisDataException) ? val : BOOLEAN.build(val))
          .map((val) -> (val instanceof JedisDataException) ? null : BOOLEAN.build(val))
          .collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[160, 163]","{'A1': [(160, 163)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<Boolean>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,byte[] build(Object),"[167, 170]","{'A1': [(167, 170)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] build(Object data) {
      return (byte[]) data;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[172, 175]","{'A1': [(172, 175)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""byte[]"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<byte[]> build(Object),"[179, 183]","{'A1': [(179, 183)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<byte[]> build(Object data) {
      return (List<byte[]>) data;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[185, 188]","{'A1': [(185, 188)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<byte[]>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Set<byte[]> build(Object),"[192, 200]","{'A1': [(194, 194), (196, 196), (198, 199)], 'A7': [(193, 193), (195, 195), (197, 197), (200, 200)], 'A8': [(192, 192)]}","{'A1': 0.4444444444444444, 'A7': 0.4444444444444444, 'A8': 0.1111111111111111}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Set<byte[]> build(Object data) {
      if (null == data) {
        return null;
      }
      List<byte[]> l = BINARY_LIST.build(data);
      return SetFromList.of(l);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[202, 205]","{'A1': [(202, 202), (204, 204)], 'A7': [(203, 203), (205, 205)]}","{'A1': 0.5, 'A7': 0.5}",A1,,"    @Override
    public String toString() {
      return ""Set<byte[]>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"List<Map.Entry<byte[], byte[]>> build(Object)","[210, 221]","{'A1': [(210, 211)], 'A9': [(212, 221)]}","{'A1': 0.16666666666666666, 'A9': 0.8333333333333334}",A9,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Map.Entry<byte[], byte[]>> build(Object data) {
      final List<byte[]> flatHash = (List<byte[]>) data;
      final List<Map.Entry<byte[], byte[]>> pairList = new ArrayList<>();
      final Iterator<byte[]> iterator = flatHash.iterator();
      while (iterator.hasNext()) {
        pairList.add(new AbstractMap.SimpleEntry<>(iterator.next(), iterator.next()));
      }

      return pairList;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[223, 226]","{'A9': [(223, 226)]}",{'A9': 1.0},A9,,"    @Override
    public String toString() {
      return ""List<Map.Entry<byte[], byte[]>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"List<Map.Entry<byte[], byte[]>> build(Object)","[231, 242]","{'A1': [(234, 234), (236, 237), (239, 240), (242, 242)], 'A9': [(231, 233), (235, 235), (238, 238), (241, 241)]}","{'A1': 0.5, 'A9': 0.5}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Map.Entry<byte[], byte[]>> build(Object data) {
      final List<Object> list = (List<Object>) data;
      final List<Map.Entry<byte[], byte[]>> pairList = new ArrayList<>();
      for (Object object : list) {
        final List<byte[]> flat = (List<byte[]>) object;
        pairList.add(new AbstractMap.SimpleEntry<>(flat.get(0), flat.get(1)));
      }

      return pairList;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[244, 247]","{'A1': [(244, 245), (247, 247)], 'A9': [(246, 246)]}","{'A1': 0.75, 'A9': 0.25}",A1,,"    @Override
    public String toString() {
      return ""List<Map.Entry<byte[], byte[]>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,String build(Object),"[251, 254]","{'A1': [(252, 253)], 'A7': [(254, 254)], 'A8': [(251, 251)]}","{'A1': 0.5, 'A7': 0.25, 'A8': 0.25}",A1,,"    @Override
    public String build(Object data) {
      return data == null ? null : SafeEncoder.encode((byte[]) data);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[256, 259]","{'A1': [(256, 256), (258, 258)], 'A7': [(257, 257), (259, 259)]}","{'A1': 0.5, 'A7': 0.5}",A1,,"    @Override
    public String toString() {
      return ""String"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<String> build(Object),"[263, 268]","{'A1': [(265, 267)], 'A7': [(264, 264), (268, 268)], 'A8': [(263, 263)]}","{'A1': 0.5, 'A7': 0.3333333333333333, 'A8': 0.16666666666666666}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<String> build(Object data) {
      if (null == data) return null;
      return ((List<Object>) data).stream().map(STRING::build).collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[270, 273]","{'A1': [(270, 270), (272, 272)], 'A7': [(271, 271), (273, 273)]}","{'A1': 0.5, 'A7': 0.5}",A1,,"    @Override
    public String toString() {
      return ""List<String>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Set<String> build(Object),"[277, 282]","{'A1': [(279, 281)], 'A7': [(278, 278), (282, 282)], 'A8': [(277, 277)]}","{'A1': 0.5, 'A7': 0.3333333333333333, 'A8': 0.16666666666666666}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Set<String> build(Object data) {
      if (null == data) return null;
      return ((List<Object>) data).stream().map(STRING::build).collect(Collectors.toSet());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[284, 287]","{'A1': [(284, 284), (286, 286)], 'A7': [(285, 285), (287, 287)]}","{'A1': 0.5, 'A7': 0.5}",A1,,"    @Override
    public String toString() {
      return ""Set<String>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<byte[], byte[]> build(Object)","[291, 313]","{'A1': [(291, 313)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Map<byte[], byte[]> build(Object data) {
      final List<Object> list = (List<Object>) data;
      if (list.isEmpty()) return Collections.emptyMap();

      if (list.get(0) instanceof KeyValue) {
        final Map<byte[], byte[]> map = new JedisByteHashMap();
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          KeyValue kv = (KeyValue) iterator.next();
          map.put(BINARY.build(kv.getKey()), BINARY.build(kv.getValue()));
        }
        return map;
      } else {
        final Map<byte[], byte[]> map = new JedisByteHashMap();
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          map.put(BINARY.build(iterator.next()), BINARY.build(iterator.next()));
        }
        return map;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[315, 318]","{'A1': [(315, 318)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Map<byte[], byte[]>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, String> build(Object)","[322, 344]","{'A1': [(322, 344)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Map<String, String> build(Object data) {
      final List<Object> list = (List<Object>) data;
      if (list.isEmpty()) return Collections.emptyMap();

      if (list.get(0) instanceof KeyValue) {
        final Map<String, String> map = new HashMap<>(list.size(), 1f);
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          KeyValue kv = (KeyValue) iterator.next();
          map.put(STRING.build(kv.getKey()), STRING.build(kv.getValue()));
        }
        return map;
      } else {
        final Map<String, String> map = new HashMap<>(list.size() / 2, 1f);
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          map.put(STRING.build(iterator.next()), STRING.build(iterator.next()));
        }
        return map;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[346, 349]","{'A1': [(346, 349)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Map<String, String>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, Object> build(Object)","[353, 375]","{'A1': [(354, 373)], 'A7': [(374, 375)], 'A8': [(353, 353)]}","{'A1': 0.8695652173913043, 'A7': 0.08695652173913043, 'A8': 0.043478260869565216}",A1,,"    @Override
    public Map<String, Object> build(Object data) {
      if (data == null) return null;
      final List<Object> list = (List<Object>) data;
      if (list.isEmpty()) return Collections.emptyMap();

      if (list.get(0) instanceof KeyValue) {
        final Map<String, Object> map = new HashMap<>(list.size(), 1f);
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          KeyValue kv = (KeyValue) iterator.next();
          map.put(STRING.build(kv.getKey()), ENCODED_OBJECT.build(kv.getValue()));
        }
        return map;
      } else {
        final Map<String, Object> map = new HashMap<>(list.size() / 2, 1f);
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          map.put(STRING.build(iterator.next()), ENCODED_OBJECT.build(iterator.next()));
        }
        return map;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Object build(Object),"[379, 402]","{'A1': [(379, 402)]}",{'A1': 1.0},A1,,"    @Override
    public Object build(Object data) {
      if (data == null) return null;

      if (data instanceof List) {
        final List list = (List) data;
        if (list.isEmpty()) {
          return list == Protocol.PROTOCOL_EMPTY_MAP ? Collections.emptyMap() : Collections.emptyList();
        }

        if (list.get(0) instanceof KeyValue) {
          return ((List<KeyValue>) data).stream()
              .filter(kv -> kv != null && kv.getKey() != null && kv.getValue() != null)
              .collect(Collectors.toMap(kv -> STRING.build(kv.getKey()),
                  kv -> this.build(kv.getValue())));
        } else {
          return list.stream().map(this::build).collect(Collectors.toList());
        }
      } else if (data instanceof byte[]) {
        return STRING.build(data);
      } else {
        return data;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, Object> build(Object)","[406, 409]","{'A1': [(406, 408)], 'A7': [(409, 409)]}","{'A1': 0.75, 'A7': 0.25}",A1,,"    @Override
    public Map<String, Object> build(Object data) {
      return (Map<String, Object>) AGGRESSIVE_ENCODED_OBJECT.build(data);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"List<Map.Entry<String, String>> build(Object)","[414, 425]","{'A1': [(418, 418), (421, 421)], 'A9': [(414, 417), (419, 420), (422, 425)]}","{'A1': 0.16666666666666666, 'A9': 0.8333333333333334}",A9,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Map.Entry<String, String>> build(Object data) {
      final List<byte[]> flatHash = (List<byte[]>) data;
      final List<Map.Entry<String, String>> pairList = new ArrayList<>(flatHash.size() / 2);
      final Iterator<byte[]> iterator = flatHash.iterator();
      while (iterator.hasNext()) {
        pairList.add(KeyValue.of(STRING.build(iterator.next()), STRING.build(iterator.next())));
      }

      return pairList;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[427, 430]","{'A9': [(427, 430)]}",{'A9': 1.0},A9,,"    @Override
    public String toString() {
      return ""List<Map.Entry<String, String>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"List<Map.Entry<String, String>> build(Object)","[435, 441]","{'A1': [(438, 440)], 'A9': [(435, 437), (441, 441)]}","{'A1': 0.42857142857142855, 'A9': 0.5714285714285714}",A9,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Map.Entry<String, String>> build(Object data) {
      return ((List<Object>) data).stream().map(o -> (List<Object>) o)
          .map(l -> KeyValue.of(STRING.build(l.get(0)), STRING.build(l.get(1))))
          .collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[443, 446]","{'A9': [(443, 446)]}",{'A9': 1.0},A9,,"    @Override
    public String toString() {
      return ""List<Map.Entry<String, String>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, Long> build(Object)","[450, 472]","{'A1': [(450, 472)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Map<String, Long> build(Object data) {
      final List<Object> list = (List<Object>) data;
      if (list.isEmpty()) return Collections.emptyMap();

      if (list.get(0) instanceof KeyValue) {
        final Map<String, Long> map = new LinkedHashMap<>(list.size(), 1f);
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          KeyValue kv = (KeyValue) iterator.next();
          map.put(STRING.build(kv.getKey()), LONG.build(kv.getValue()));
        }
        return map;
      } else {
        final Map<String, Long> map = new LinkedHashMap<>(list.size() / 2, 1f);
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          map.put(STRING.build(iterator.next()), LONG.build(iterator.next()));
        }
        return map;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[474, 477]","{'A1': [(474, 477)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Map<String, Long>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<String, String> build(Object)","[481, 487]","{'A1': [(481, 487)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public KeyValue<String, String> build(Object data) {
      if (data == null) return null;
      List<Object> l = (List<Object>) data;
      return KeyValue.of(STRING.build(l.get(0)), STRING.build(l.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[489, 492]","{'A1': [(489, 492)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""KeyValue<String, String>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<byte[], byte[]> build(Object)","[496, 502]","{'A1': [(496, 502)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public KeyValue<byte[], byte[]> build(Object data) {
      if (data == null) return null;
      List<Object> l = (List<Object>) data;
      return KeyValue.of(BINARY.build(l.get(0)), BINARY.build(l.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[504, 507]","{'A1': [(504, 507)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""KeyValue<byte[], byte[]>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<Long, Double> build(Object)","[511, 518]","{'A10': [(511, 518)]}",{'A10': 1.0},A10,,"    @Override
    public KeyValue<Long, Double> build(Object data) {
      if (data == null) {
        return null;
      }
      List<Object> l = (List<Object>) data;
      return new KeyValue<>(LONG.build(l.get(0)), DOUBLE.build(l.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[520, 523]","{'A10': [(520, 523)]}",{'A10': 1.0},A10,,"    @Override
    public String toString() {
      return ""KeyValue<Long, Double>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<String, List<String>> build(Object)","[528, 534]","{'A1': [(528, 534)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public KeyValue<String, List<String>> build(Object data) {
      if (data == null) return null;
      List<byte[]> l = (List<byte[]>) data;
      return new KeyValue<>(STRING.build(l.get(0)), STRING_LIST.build(l.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[536, 539]","{'A1': [(536, 539)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""KeyValue<String, List<String>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<Long, Long> build(Object)","[543, 549]","{'A11': [(543, 549)]}",{'A11': 1.0},A11,,"    @Override
    @SuppressWarnings(""unchecked"")
    public KeyValue<Long, Long> build(Object data) {
      if (data == null) return null;
      List<Object> dataList = (List<Object>) data;
      return new KeyValue<>(LONG.build(dataList.get(0)), LONG.build(dataList.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"List<KeyValue<String, List<String>>> build(Object)","[554, 558]","{'A12': [(554, 558)]}",{'A12': 1.0},A12,,"    @Override
    public List<KeyValue<String, List<String>>> build(Object data) {
      List<Object> list = (List<Object>) data;
      return list.stream().map(KEYED_STRING_LIST::build).collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<byte[], List<byte[]>> build(Object)","[563, 569]","{'A1': [(563, 569)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public KeyValue<byte[], List<byte[]>> build(Object data) {
      if (data == null) return null;
      List<byte[]> l = (List<byte[]>) data;
      return new KeyValue<>(BINARY.build(l.get(0)), BINARY_LIST.build(l.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[571, 574]","{'A1': [(571, 574)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""KeyValue<byte[], List<byte[]>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Tuple build(Object),"[578, 586]","{'A13': [(578, 586)]}",{'A13': 1.0},A13,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Tuple build(Object data) {
      List<byte[]> l = (List<byte[]>) data; // never null
      if (l.isEmpty()) {
        return null;
      }
      return new Tuple(l.get(0), DOUBLE.build(l.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[588, 591]","{'A13': [(588, 591)]}",{'A13': 1.0},A13,,"    @Override
    public String toString() {
      return ""Tuple"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<String, Tuple> build(Object)","[595, 602]","{'A1': [(597, 602)], 'A14': [(595, 596)]}","{'A1': 0.75, 'A14': 0.25}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public KeyValue<String, Tuple> build(Object data) {
      if (data == null) return null;
      List<Object> l = (List<Object>) data;
      if (l.isEmpty()) return null;
      return KeyValue.of(STRING.build(l.get(0)), new Tuple(BINARY.build(l.get(1)), DOUBLE.build(l.get(2))));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[604, 607]","{'A1': [(604, 607)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""KeyValue<String, Tuple>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<byte[], Tuple> build(Object)","[611, 618]","{'A1': [(611, 617)], 'A14': [(618, 618)]}","{'A1': 0.875, 'A14': 0.125}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public KeyValue<byte[], Tuple> build(Object data) {
      if (data == null) return null;
      List<Object> l = (List<Object>) data;
      if (l.isEmpty()) return null;
      return KeyValue.of(BINARY.build(l.get(0)), new Tuple(BINARY.build(l.get(1)), DOUBLE.build(l.get(2))));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[620, 623]","{'A1': [(622, 622)], 'A14': [(620, 621), (623, 623)]}","{'A1': 0.25, 'A14': 0.75}",A14,,"    @Override
    public String toString() {
      return ""KeyValue<byte[], Tuple>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Tuple> build(Object),"[627, 640]","{'A1': [(627, 640)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Tuple> build(Object data) {
      if (null == data) {
        return null;
      }
      List<byte[]> l = (List<byte[]>) data;
      final List<Tuple> result = new ArrayList<>(l.size() / 2);
      Iterator<byte[]> iterator = l.iterator();
      while (iterator.hasNext()) {
        result.add(new Tuple(iterator.next(), DOUBLE.build(iterator.next())));
      }
      return result;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[642, 645]","{'A1': [(642, 645)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<Tuple>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Tuple> build(Object),"[649, 654]","{'A1': [(649, 654)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Tuple> build(Object data) {
      if (null == data) return null;
      return ((List<Object>) data).stream().map(TUPLE::build).collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[656, 659]","{'A1': [(656, 659)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<Tuple>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Set<Tuple> build(Object),"[664, 677]","{'A1': [(665, 676)], 'A7': [(664, 664), (677, 677)]}","{'A1': 0.8571428571428571, 'A7': 0.14285714285714285}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Set<Tuple> build(Object data) {
      if (null == data) {
        return null;
      }
      List<byte[]> l = (List<byte[]>) data;
      final Set<Tuple> result = new LinkedHashSet<>(l.size() / 2, 1);
      Iterator<byte[]> iterator = l.iterator();
      while (iterator.hasNext()) {
        result.add(new Tuple(iterator.next(), DOUBLE.build(iterator.next())));
      }
      return result;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[679, 682]","{'A1': [(679, 679), (681, 681)], 'A7': [(680, 680), (682, 682)]}","{'A1': 0.5, 'A7': 0.5}",A1,,"    @Override
    public String toString() {
      return ""ZSet<Tuple>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,Set<Tuple> build(Object),"[687, 692]","{'A1': [(687, 692)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Set<Tuple> build(Object data) {
      if (null == data) return null;
      return ((List<Object>) data).stream().map(TUPLE::build).collect(Collectors.toCollection(LinkedHashSet::new));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[694, 697]","{'A1': [(694, 697)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""ZSet<Tuple>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Tuple> build(Object),"[701, 706]","{'A1': [(701, 706)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Tuple> build(Object data) {
      if (data == null) return null;
      return ((List<List<Object>>) data).stream().map(TUPLE::build).collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[708, 711]","{'A1': [(708, 711)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<Tuple>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<String, List<Tuple>> build(Object)","[716, 722]","{'A1': [(716, 722)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public KeyValue<String, List<Tuple>> build(Object data) {
      if (data == null) return null;
      List<Object> l = (List<Object>) data;
      return new KeyValue<>(STRING.build(l.get(0)), TUPLE_LIST_FROM_PAIRS.build(l.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[724, 727]","{'A1': [(724, 727)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""KeyValue<String, List<Tuple>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"KeyValue<byte[], List<Tuple>> build(Object)","[732, 738]","{'A1': [(732, 738)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public KeyValue<byte[], List<Tuple>> build(Object data) {
      if (data == null) return null;
      List<Object> l = (List<Object>) data;
      return new KeyValue<>(BINARY.build(l.get(0)), TUPLE_LIST_FROM_PAIRS.build(l.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[740, 743]","{'A1': [(740, 743)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""KeyValue<byte[], List<Tuple>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,ScanResult<String> build(Object),"[747, 757]","{'A1': [(747, 757)]}",{'A1': 1.0},A1,,"    @Override
    public ScanResult<String> build(Object data) {
      List<Object> result = (List<Object>) data;
      String newcursor = new String((byte[]) result.get(0));
      List<byte[]> rawResults = (List<byte[]>) result.get(1);
      List<String> results = new ArrayList<>(rawResults.size());
      for (byte[] bs : rawResults) {
        results.add(SafeEncoder.encode(bs));
      }
      return new ScanResult<>(newcursor, results);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"ScanResult<Map.Entry<String, String>> build(Object)","[762, 774]","{'A1': [(762, 773)], 'A7': [(774, 774)]}","{'A1': 0.9230769230769231, 'A7': 0.07692307692307693}",A1,,"    @Override
    public ScanResult<Map.Entry<String, String>> build(Object data) {
      List<Object> result = (List<Object>) data;
      String newcursor = new String((byte[]) result.get(0));
      List<byte[]> rawResults = (List<byte[]>) result.get(1);
      List<Map.Entry<String, String>> results = new ArrayList<>(rawResults.size() / 2);
      Iterator<byte[]> iterator = rawResults.iterator();
      while (iterator.hasNext()) {
        results.add(new AbstractMap.SimpleEntry<>(SafeEncoder.encode(iterator.next()),
            SafeEncoder.encode(iterator.next())));
      }
      return new ScanResult<>(newcursor, results);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,ScanResult<String> build(Object),"[778, 788]","{'A1': [(778, 788)]}",{'A1': 1.0},A1,,"    @Override
    public ScanResult<String> build(Object data) {
      List<Object> result = (List<Object>) data;
      String newcursor = new String((byte[]) result.get(0));
      List<byte[]> rawResults = (List<byte[]>) result.get(1);
      List<String> results = new ArrayList<>(rawResults.size());
      for (byte[] bs : rawResults) {
        results.add(SafeEncoder.encode(bs));
      }
      return new ScanResult<>(newcursor, results);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,ScanResult<Tuple> build(Object),"[792, 803]","{'A1': [(792, 803)]}",{'A1': 1.0},A1,,"    @Override
    public ScanResult<Tuple> build(Object data) {
      List<Object> result = (List<Object>) data;
      String newcursor = new String((byte[]) result.get(0));
      List<byte[]> rawResults = (List<byte[]>) result.get(1);
      List<Tuple> results = new ArrayList<>(rawResults.size() / 2);
      Iterator<byte[]> iterator = rawResults.iterator();
      while (iterator.hasNext()) {
        results.add(new Tuple(iterator.next(), BuilderFactory.DOUBLE.build(iterator.next())));
      }
      return new ScanResult<>(newcursor, results);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,ScanResult<byte[]> build(Object),"[807, 813]","{'A1': [(808, 812)], 'A7': [(807, 807), (813, 813)]}","{'A1': 0.7142857142857143, 'A7': 0.2857142857142857}",A1,,"    @Override
    public ScanResult<byte[]> build(Object data) {
      List<Object> result = (List<Object>) data;
      byte[] newcursor = (byte[]) result.get(0);
      List<byte[]> rawResults = (List<byte[]>) result.get(1);
      return new ScanResult<>(newcursor, rawResults);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"ScanResult<Map.Entry<byte[], byte[]>> build(Object)","[818, 829]","{'A1': [(818, 828)], 'A7': [(829, 829)]}","{'A1': 0.9166666666666666, 'A7': 0.08333333333333333}",A1,,"    @Override
    public ScanResult<Map.Entry<byte[], byte[]>> build(Object data) {
      List<Object> result = (List<Object>) data;
      byte[] newcursor = (byte[]) result.get(0);
      List<byte[]> rawResults = (List<byte[]>) result.get(1);
      List<Map.Entry<byte[], byte[]>> results = new ArrayList<>(rawResults.size() / 2);
      Iterator<byte[]> iterator = rawResults.iterator();
      while (iterator.hasNext()) {
        results.add(new AbstractMap.SimpleEntry<>(iterator.next(), iterator.next()));
      }
      return new ScanResult<>(newcursor, results);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,ScanResult<byte[]> build(Object),"[833, 839]","{'A1': [(833, 839)]}",{'A1': 1.0},A1,,"    @Override
    public ScanResult<byte[]> build(Object data) {
      List<Object> result = (List<Object>) data;
      byte[] newcursor = (byte[]) result.get(0);
      List<byte[]> rawResults = (List<byte[]>) result.get(1);
      return new ScanResult<>(newcursor, rawResults);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, Long> build(Object)","[843, 853]","{'A1': [(843, 850), (852, 852)], 'A7': [(851, 851), (853, 853)]}","{'A1': 0.8181818181818182, 'A7': 0.18181818181818182}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Map<String, Long> build(Object data) {
      final List<Object> flatHash = (List<Object>) data;
      final Map<String, Long> hash = new HashMap<>(flatHash.size() / 2, 1f);
      final Iterator<Object> iterator = flatHash.iterator();
      while (iterator.hasNext()) {
        hash.put(SafeEncoder.encode((byte[]) iterator.next()), (Long) iterator.next());
      }
      return hash;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[855, 858]","{'A1': [(855, 858)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""PUBSUB_NUMSUB_MAP<String, String>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<GeoCoordinate> build(Object),"[862, 868]","{'A1': [(865, 865)], 'A7': [(862, 864), (866, 868)]}","{'A1': 0.14285714285714285, 'A7': 0.8571428571428571}",A7,,"    @Override
    public List<GeoCoordinate> build(Object data) {
      if (null == data) {
        return null;
      }
      return interpretGeoposResult((List<Object>) data);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[870, 873]","{'A1': [(870, 870)], 'A7': [(871, 873)]}","{'A1': 0.25, 'A7': 0.75}",A7,,"    @Override
    public String toString() {
      return ""List<GeoCoordinate>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,interpretGeoposResult,List<GeoCoordinate> interpretGeoposResult(List<Object>),"[875, 888]","{'A1': [(882, 883)], 'A7': [(875, 875), (877, 881), (884, 888)], 'A15': [(876, 876)]}","{'A1': 0.14285714285714285, 'A7': 0.7857142857142857, 'A15': 0.07142857142857142}",A7,,"    private List<GeoCoordinate> interpretGeoposResult(List<Object> responses) {
      List<GeoCoordinate> responseCoordinate = new ArrayList<>(responses.size());
      for (Object response : responses) {
        if (response == null) {
          responseCoordinate.add(null);
        } else {
          List<Object> respList = (List<Object>) response;
          GeoCoordinate coord = new GeoCoordinate(DOUBLE.build(respList.get(0)),
              DOUBLE.build(respList.get(1)));
          responseCoordinate.add(coord);
        }
      }
      return responseCoordinate;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<GeoRadiusResponse> build(Object),"[892, 941]","{'A1': [(895, 896), (898, 898), (901, 903), (905, 921), (925, 928), (931, 937), (939, 940)], 'A7': [(892, 894), (897, 897), (899, 899), (904, 904), (929, 930), (938, 938), (941, 941)], 'A15': [(900, 900)], 'A16': [(922, 924)]}","{'A1': 0.72, 'A7': 0.2, 'A15': 0.02, 'A16': 0.06}",A1,,"    @Override
    public List<GeoRadiusResponse> build(Object data) {
      if (data == null) {
        return null;
      }

      List<Object> objectList = (List<Object>) data;

      List<GeoRadiusResponse> responses = new ArrayList<>(objectList.size());
      if (objectList.isEmpty()) {
        return responses;
      }

      if (objectList.get(0) instanceof List<?>) {
        // list of members with additional informations
        GeoRadiusResponse resp;
        for (Object obj : objectList) {
          List<Object> informations = (List<Object>) obj;

          resp = new GeoRadiusResponse((byte[]) informations.get(0));

          int size = informations.size();
          for (int idx = 1; idx < size; idx++) {
            Object info = informations.get(idx);
            if (info instanceof List<?>) {
              // coordinate
              List<Object> coord = (List<Object>) info;

              resp.setCoordinate(new GeoCoordinate(DOUBLE.build(coord.get(0)),
                  DOUBLE.build(coord.get(1))));
            } else if (info instanceof Long) {
              // score
              resp.setRawScore(LONG.build(info));
            } else {
              // distance
              resp.setDistance(DOUBLE.build(info));
            }
          }

          responses.add(resp);
        }
      } else {
        // list of members
        for (Object obj : objectList) {
          responses.add(new GeoRadiusResponse((byte[]) obj));
        }
      }

      return responses;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[943, 946]","{'A1': [(943, 943)], 'A7': [(944, 945)], 'A12': [(946, 946)]}","{'A1': 0.25, 'A7': 0.5, 'A12': 0.25}",A7,,"    @Override
    public String toString() {
      return ""GeoRadiusWithParamsResult"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, CommandDocument> build(Object)","[950, 972]","{'A1': [(952, 952), (954, 970)], 'A12': [(950, 951), (953, 953), (971, 972)]}","{'A1': 0.782608695652174, 'A12': 0.21739130434782608}",A1,,"    @Override
    public Map<String, CommandDocument> build(Object data) {
      if (data == null) return null;
      List<Object> list = (List<Object>) data;
      if (list.isEmpty()) return Collections.emptyMap();

      if (list.get(0) instanceof KeyValue) {
        final Map<String, CommandDocument> map = new HashMap<>(list.size(), 1f);
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          KeyValue kv = (KeyValue) iterator.next();
          map.put(STRING.build(kv.getKey()), new CommandDocument(ENCODED_OBJECT_MAP.build(kv.getValue())));
        }
        return map;
      } else {
        final Map<String, CommandDocument> map = new HashMap<>(list.size() / 2, 1f);
        final Iterator iterator = list.iterator();
        while (iterator.hasNext()) {
          map.put(STRING.build(iterator.next()), new CommandDocument(ENCODED_OBJECT_MAP.build(iterator.next())));
        }
        return map;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, LatencyLatestInfo> build(Object)","[979, 999]","{'A17': [(979, 999)]}",{'A17': 1.0},A17,,"    @Override
    public Map<String, LatencyLatestInfo> build(Object data) {
      if (data == null) {
        return null;
      }

      List<Object> rawList = (List<Object>) data;
      Map<String, LatencyLatestInfo> map = new HashMap<>(rawList.size());

      for (Object rawLatencyLatestInfo : rawList) {
        if (rawLatencyLatestInfo == null) {
          continue;
        }

        LatencyLatestInfo latestInfo = LatencyLatestInfo.LATENCY_LATEST_BUILDER.build(rawLatencyLatestInfo);
        String name = latestInfo.getCommand();
        map.put(name, latestInfo);
      }

      return map;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<LatencyHistoryInfo> build(Object),"[1003, 1022]","{'A17': [(1003, 1022)]}",{'A17': 1.0},A17,,"    @Override
    public List<LatencyHistoryInfo> build(Object data) {
      if (data == null) {
        return null;
      }

      List<Object> rawList = (List<Object>) data;
      List<LatencyHistoryInfo> response = new ArrayList<>(rawList.size());

      for (Object rawLatencyHistoryInfo : rawList) {
        if (rawLatencyHistoryInfo == null) {
          continue;
        }

        LatencyHistoryInfo historyInfo = LatencyHistoryInfo.LATENCY_HISTORY_BUILDER.build(rawLatencyHistoryInfo);
        response.add(historyInfo);
      }

      return response;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<List<Long>> build(Object),"[1027, 1039]","{'A18': [(1027, 1039)]}",{'A18': 1.0},A18,,"    @Override
    public List<List<Long>> build(Object data) {
      if (null == data) {
        return null;
      }

      List<Long> rawSlots = (List<Long>) data;
      List<List<Long>> slotsRanges = new ArrayList<>();
      for (int i = 0; i < rawSlots.size(); i += 2) {
        slotsRanges.add(Arrays.asList(rawSlots.get(i), rawSlots.get(i + 1)));
      }
      return slotsRanges;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1047, 1061]","{'A18': [(1047, 1061)]}",{'A18': 1.0},A18,,"    private Map<String, Builder> createDecoderMap() {

      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(ClusterShardNodeInfo.ID, STRING);
      tempMappingFunctions.put(ClusterShardNodeInfo.ENDPOINT, STRING);
      tempMappingFunctions.put(ClusterShardNodeInfo.IP, STRING);
      tempMappingFunctions.put(ClusterShardNodeInfo.HOSTNAME, STRING);
      tempMappingFunctions.put(ClusterShardNodeInfo.PORT, LONG);
      tempMappingFunctions.put(ClusterShardNodeInfo.TLS_PORT, LONG);
      tempMappingFunctions.put(ClusterShardNodeInfo.ROLE, STRING);
      tempMappingFunctions.put(ClusterShardNodeInfo.REPLICATION_OFFSET, LONG);
      tempMappingFunctions.put(ClusterShardNodeInfo.HEALTH, STRING);

      return tempMappingFunctions;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<ClusterShardNodeInfo> build(Object),"[1063, 1080]","{'A18': [(1063, 1080)]}",{'A18': 1.0},A18,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<ClusterShardNodeInfo> build(Object data) {
      if (null == data) {
        return null;
      }

      List<ClusterShardNodeInfo> response = new ArrayList<>();

      List<Object> clusterShardNodeInfos = (List<Object>) data;
      for (Object clusterShardNodeInfoObject : clusterShardNodeInfos) {
        List<Object> clusterShardNodeInfo = (List<Object>) clusterShardNodeInfoObject;
        Iterator<Object> iterator = clusterShardNodeInfo.iterator();
        response.add(new ClusterShardNodeInfo(createMapFromDecodingFunctions(iterator, mappingFunctions)));
      }

      return response;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1082, 1085]","{'A18': [(1082, 1085)]}",{'A18': 1.0},A18,,"    @Override
    public String toString() {
      return ""List<ClusterShardNodeInfo>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1093, 1100]","{'A18': [(1093, 1100)]}",{'A18': 1.0},A18,,"    private Map<String, Builder> createDecoderMap() {

      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(ClusterShardInfo.SLOTS, CLUSTER_SHARD_SLOTS_RANGES);
      tempMappingFunctions.put(ClusterShardInfo.NODES, CLUSTER_SHARD_NODE_INFO_LIST);

      return tempMappingFunctions;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<ClusterShardInfo> build(Object),"[1102, 1119]","{'A18': [(1102, 1119)]}",{'A18': 1.0},A18,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<ClusterShardInfo> build(Object data) {
      if (null == data) {
        return null;
      }

      List<ClusterShardInfo> response = new ArrayList<>();

      List<Object> clusterShardInfos = (List<Object>) data;
      for (Object clusterShardInfoObject : clusterShardInfos) {
        List<Object> clusterShardInfo = (List<Object>) clusterShardInfoObject;
        Iterator<Object> iterator = clusterShardInfo.iterator();
        response.add(new ClusterShardInfo(createMapFromDecodingFunctions(iterator, mappingFunctions)));
      }

      return response;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1121, 1124]","{'A18': [(1121, 1124)]}",{'A18': 1.0},A18,,"    @Override
    public String toString() {
      return ""List<ClusterShardInfo>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<Module> build(Object),"[1128, 1153]","{'A1': [(1131, 1132), (1134, 1134), (1137, 1137), (1140, 1152)], 'A15': [(1136, 1136)], 'A19': [(1128, 1130), (1133, 1133), (1135, 1135), (1138, 1139), (1153, 1153)]}","{'A1': 0.6538461538461539, 'A15': 0.038461538461538464, 'A19': 0.3076923076923077}",A1,,"    @Override
    public List<Module> build(Object data) {
      if (data == null) {
        return null;
      }

      List<List<Object>> objectList = (List<List<Object>>) data;

      List<Module> responses = new ArrayList<>(objectList.size());
      if (objectList.isEmpty()) {
        return responses;
      }

      for (List<Object> moduleResp : objectList) {
        if (moduleResp.get(0) instanceof KeyValue) {
          responses.add(new Module(STRING.build(((KeyValue) moduleResp.get(0)).getValue()),
              LONG.build(((KeyValue) moduleResp.get(1)).getValue()).intValue()));
          continue;
        }
        Module m = new Module(SafeEncoder.encode((byte[]) moduleResp.get(1)),
            ((Long) moduleResp.get(3)).intValue());
        responses.add(m);
      }

      return responses;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1155, 1158]","{'A1': [(1155, 1155)], 'A19': [(1156, 1158)]}","{'A1': 0.25, 'A19': 0.75}",A19,,"    @Override
    public String toString() {
      return ""List<Module>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,AccessControlUser build(Object),"[1165, 1170]","{'A1': [(1167, 1169)], 'A20': [(1165, 1166), (1170, 1170)]}","{'A1': 0.5, 'A20': 0.5}",A1,,"    @Override
    public AccessControlUser build(Object data) {
      Map<String, Object> map = ENCODED_OBJECT_MAP.build(data);
      if (map == null) return null;
      return new AccessControlUser(map);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1172, 1175]","{'A20': [(1172, 1175)]}",{'A20': 1.0},A20,,"    @Override
    public String toString() {
      return ""AccessControlUser"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1186, 1201]","{'A1': [(1186, 1195), (1199, 1201)], 'A10': [(1196, 1198)]}","{'A1': 0.8125, 'A10': 0.1875}",A1,,"    private Map<String, Builder> createDecoderMap() {

      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(AccessControlLogEntry.COUNT, LONG);
      tempMappingFunctions.put(AccessControlLogEntry.REASON, STRING);
      tempMappingFunctions.put(AccessControlLogEntry.CONTEXT, STRING);
      tempMappingFunctions.put(AccessControlLogEntry.OBJECT, STRING);
      tempMappingFunctions.put(AccessControlLogEntry.USERNAME, STRING);
      tempMappingFunctions.put(AccessControlLogEntry.AGE_SECONDS, DOUBLE);
      tempMappingFunctions.put(AccessControlLogEntry.CLIENT_INFO, STRING);
      tempMappingFunctions.put(AccessControlLogEntry.ENTRY_ID, LONG);
      tempMappingFunctions.put(AccessControlLogEntry.TIMESTAMP_CREATED, LONG);
      tempMappingFunctions.put(AccessControlLogEntry.TIMESTAMP_LAST_UPDATED, LONG);

      return tempMappingFunctions;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<AccessControlLogEntry> build(Object),"[1203, 1220]","{'A1': [(1203, 1220)]}",{'A1': 1.0},A1,,"    @Override
    public List<AccessControlLogEntry> build(Object data) {

      if (null == data) {
        return null;
      }

      List<AccessControlLogEntry> list = new ArrayList<>();
      List<List<Object>> logEntries = (List<List<Object>>) data;
      for (List<Object> logEntryData : logEntries) {
        Iterator<Object> logEntryDataIterator = logEntryData.iterator();
        AccessControlLogEntry accessControlLogEntry = new AccessControlLogEntry(
            createMapFromDecodingFunctions(logEntryDataIterator, mappingFunctions,
                BACKUP_BUILDERS_FOR_DECODING_FUNCTIONS));
        list.add(accessControlLogEntry);
      }
      return list;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1222, 1225]","{'A1': [(1222, 1225)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<AccessControlLogEntry>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,StreamEntryID build(Object),"[1231, 1238]","{'A1': [(1232, 1232), (1236, 1236)], 'A22': [(1231, 1231), (1233, 1235), (1238, 1238)], 'A23': [(1237, 1237)]}","{'A1': 0.25, 'A22': 0.625, 'A23': 0.125}",A22,,"    @Override
    public StreamEntryID build(Object data) {
      if (null == data) {
        return null;
      }
      String id = SafeEncoder.encode((byte[]) data);
      return new StreamEntryID(id);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1240, 1243]","{'A22': [(1240, 1243)]}",{'A22': 1.0},A22,,"    @Override
    public String toString() {
      return ""StreamEntryID"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<StreamEntryID> build(Object),"[1247, 1261]","{'A14': [(1247, 1261)]}",{'A14': 1.0},A14,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<StreamEntryID> build(Object data) {
      if (null == data) {
        return null;
      }
      List<Object> objectList = (List<Object>) data;
      List<StreamEntryID> responses = new ArrayList<>(objectList.size());
      if (!objectList.isEmpty()) {
        for(Object object : objectList) {
          responses.add(STREAM_ENTRY_ID.build(object));
        }
      }
      return responses;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,StreamEntry build(Object),"[1265, 1287]","{'A1': [(1265, 1287)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public StreamEntry build(Object data) {
      if (null == data) {
        return null;
      }
      List<Object> objectList = (List<Object>) data;

      if (objectList.isEmpty()) {
        return null;
      }

      String entryIdString = SafeEncoder.encode((byte[]) objectList.get(0));
      StreamEntryID entryID = new StreamEntryID(entryIdString);
      List<byte[]> hash = (List<byte[]>) objectList.get(1);

      Iterator<byte[]> hashIterator = hash.iterator();
      Map<String, String> map = new HashMap<>(hash.size() / 2, 1f);
      while (hashIterator.hasNext()) {
        map.put(SafeEncoder.encode(hashIterator.next()), SafeEncoder.encode(hashIterator.next()));
      }
      return new StreamEntry(entryID, map);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1289, 1292]","{'A1': [(1291, 1291)], 'A14': [(1289, 1290), (1292, 1292)]}","{'A1': 0.25, 'A14': 0.75}",A14,,"    @Override
    public String toString() {
      return ""StreamEntry"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<StreamEntry> build(Object),"[1296, 1331]","{'A1': [(1298, 1298), (1304, 1304), (1309, 1310), (1314, 1314), (1316, 1316), (1321, 1321), (1323, 1324)], 'A22': [(1296, 1297), (1299, 1303), (1305, 1308), (1311, 1313), (1315, 1315), (1322, 1322), (1326, 1331)], 'A24': [(1317, 1320)], 'A25': [(1325, 1325)]}","{'A1': 0.25, 'A22': 0.6111111111111112, 'A24': 0.1111111111111111, 'A25': 0.027777777777777776}",A22,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<StreamEntry> build(Object data) {
      if (null == data) {
        return null;
      }
      List<ArrayList<Object>> objectList = (List<ArrayList<Object>>) data;

      List<StreamEntry> responses = new ArrayList<>(objectList.size() / 2);
      if (objectList.isEmpty()) {
        return responses;
      }

      for (ArrayList<Object> res : objectList) {
        if (res == null) {
          responses.add(null);
          continue;
        }
        String entryIdString = SafeEncoder.encode((byte[]) res.get(0));
        StreamEntryID entryID = new StreamEntryID(entryIdString);
        List<byte[]> hash = (List<byte[]>) res.get(1);
        if (hash == null) {
          responses.add(new StreamEntry(entryID, null));
          continue;
        }

        Iterator<byte[]> hashIterator = hash.iterator();
        Map<String, String> map = new HashMap<>(hash.size() / 2, 1f);
        while (hashIterator.hasNext()) {
          map.put(SafeEncoder.encode(hashIterator.next()), SafeEncoder.encode(hashIterator.next()));
        }
        responses.add(new StreamEntry(entryID, map));
      }

      return responses;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1333, 1336]","{'A22': [(1333, 1336)]}",{'A22': 1.0},A22,,"    @Override
    public String toString() {
      return ""List<StreamEntry>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map.Entry<StreamEntryID, List<StreamEntry>> build(Object)","[1341, 1351]","{'A9': [(1341, 1351)]}",{'A9': 1.0},A9,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Map.Entry<StreamEntryID, List<StreamEntry>> build(Object data) {
      if (null == data) {
        return null;
      }

      List<Object> objectList = (List<Object>) data;
      return new AbstractMap.SimpleEntry<>(STREAM_ENTRY_ID.build(objectList.get(0)),
          STREAM_ENTRY_LIST.build(objectList.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1353, 1356]","{'A9': [(1353, 1356)]}",{'A9': 1.0},A9,,"    @Override
    public String toString() {
      return ""Map.Entry<StreamEntryID, List<StreamEntry>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map.Entry<StreamEntryID, List<StreamEntryID>> build(Object)","[1361, 1371]","{'A9': [(1361, 1371)]}",{'A9': 1.0},A9,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Map.Entry<StreamEntryID, List<StreamEntryID>> build(Object data) {
      if (null == data) {
        return null;
      }

      List<Object> objectList = (List<Object>) data;
      return new AbstractMap.SimpleEntry<>(STREAM_ENTRY_ID.build(objectList.get(0)),
          STREAM_ENTRY_ID_LIST.build(objectList.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1373, 1376]","{'A9': [(1373, 1376)]}",{'A9': 1.0},A9,,"    @Override
    public String toString() {
      return ""Map.Entry<StreamEntryID, List<StreamEntryID>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"List<Map.Entry<String, List<StreamEntry>>> build(Object)","[1388, 1409]","{'A1': [(1389, 1407)], 'A25': [(1388, 1388), (1408, 1409)]}","{'A1': 0.8636363636363636, 'A25': 0.13636363636363635}",A1,,"    @Override
    public List<Map.Entry<String, List<StreamEntry>>> build(Object data) {
      if (data == null) return null;
      List list = (List) data;
      if (list.isEmpty()) return Collections.emptyList();

      if (list.get(0) instanceof KeyValue) {
        return ((List<KeyValue>) list).stream()
            .map(kv -> new KeyValue<>(STRING.build(kv.getKey()),
                STREAM_ENTRY_LIST.build(kv.getValue())))
            .collect(Collectors.toList());
      } else {
        List<Map.Entry<String, List<StreamEntry>>> result = new ArrayList<>(list.size());
        for (Object anObj : list) {
          List<Object> streamObj = (List<Object>) anObj;
          String streamKey = STRING.build(streamObj.get(0));
          List<StreamEntry> streamEntries = STREAM_ENTRY_LIST.build(streamObj.get(1));
          result.add(KeyValue.of(streamKey, streamEntries));
        }
        return result;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1411, 1414]","{'A1': [(1413, 1413)], 'A25': [(1411, 1412), (1414, 1414)]}","{'A1': 0.25, 'A25': 0.75}",A25,,"    @Override
    public String toString() {
      return ""List<Entry<String, List<StreamEntry>>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, List<StreamEntry>> build(Object)","[1419, 1438]","{'A1': [(1419, 1438)]}",{'A1': 1.0},A1,,"    @Override
    public Map<String, List<StreamEntry>> build(Object data) {
      if (data == null) return null;
      List list = (List) data;
      if (list.isEmpty()) return Collections.emptyMap();

      if (list.get(0) instanceof KeyValue) {
        return ((List<KeyValue>) list).stream()
            .collect(Collectors.toMap(kv -> STRING.build(kv.getKey()), kv -> STREAM_ENTRY_LIST.build(kv.getValue())));
      } else {
        Map<String, List<StreamEntry>> result = new HashMap<>(list.size());
        for (Object anObj : list) {
          List<Object> streamObj = (List<Object>) anObj;
          String streamKey = STRING.build(streamObj.get(0));
          List<StreamEntry> streamEntries = STREAM_ENTRY_LIST.build(streamObj.get(1));
          result.put(streamKey, streamEntries);
        }
        return result;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1440, 1443]","{'A1': [(1440, 1443)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Map<String, List<StreamEntry>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<StreamPendingEntry> build(Object),"[1447, 1466]","{'A1': [(1449, 1449), (1453, 1454), (1456, 1460), (1462, 1463)], 'A22': [(1447, 1448), (1450, 1452), (1455, 1455), (1461, 1461), (1464, 1466)]}","{'A1': 0.5, 'A22': 0.5}",A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<StreamPendingEntry> build(Object data) {
      if (null == data) {
        return null;
      }

      List<Object> streamsEntries = (List<Object>) data;
      List<StreamPendingEntry> result = new ArrayList<>(streamsEntries.size());
      for (Object streamObj : streamsEntries) {
        List<Object> stream = (List<Object>) streamObj;
        String id = SafeEncoder.encode((byte[]) stream.get(0));
        String consumerName = SafeEncoder.encode((byte[]) stream.get(1));
        long idleTime = BuilderFactory.LONG.build(stream.get(2));
        long deliveredTimes = BuilderFactory.LONG.build(stream.get(3));
        result.add(new StreamPendingEntry(new StreamEntryID(id), consumerName, idleTime,
            deliveredTimes));
      }
      return result;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1468, 1471]","{'A22': [(1468, 1471)]}",{'A22': 1.0},A22,,"    @Override
    public String toString() {
      return ""List<StreamPendingEntry>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1478, 1490]","{'A1': [(1480, 1482), (1486, 1486), (1489, 1489)], 'A25': [(1478, 1479), (1483, 1485), (1487, 1488), (1490, 1490)]}","{'A1': 0.38461538461538464, 'A25': 0.6153846153846154}",A25,,"    private Map<String, Builder> createDecoderMap() {

      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(StreamInfo.LAST_GENERATED_ID, STREAM_ENTRY_ID);
      tempMappingFunctions.put(StreamInfo.FIRST_ENTRY, STREAM_ENTRY);
      tempMappingFunctions.put(StreamInfo.LENGTH, LONG);
      tempMappingFunctions.put(StreamInfo.RADIX_TREE_KEYS, LONG);
      tempMappingFunctions.put(StreamInfo.RADIX_TREE_NODES, LONG);
      tempMappingFunctions.put(StreamInfo.LAST_ENTRY, STREAM_ENTRY);
      tempMappingFunctions.put(StreamInfo.GROUPS, LONG);

      return tempMappingFunctions;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,StreamInfo build(Object),"[1492, 1503]","{'A1': [(1499, 1499), (1502, 1502)], 'A25': [(1492, 1498), (1500, 1501), (1503, 1503)]}","{'A1': 0.16666666666666666, 'A25': 0.8333333333333334}",A25,,"    @Override
    @SuppressWarnings(""unchecked"")
    public StreamInfo build(Object data) {
      if (null == data) {
        return null;
      }

      List<Object> streamsEntries = (List<Object>) data;
      Iterator<Object> iterator = streamsEntries.iterator();

      return new StreamInfo(createMapFromDecodingFunctions(iterator, mappingFunctions));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1505, 1508]","{'A25': [(1505, 1508)]}",{'A25': 1.0},A25,,"    @Override
    public String toString() {
      return ""StreamInfo"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1515, 1524]","{'A1': [(1517, 1518), (1521, 1521), (1523, 1523)], 'A25': [(1515, 1516), (1519, 1520), (1522, 1522), (1524, 1524)]}","{'A1': 0.4, 'A25': 0.6}",A25,,"    private Map<String, Builder> createDecoderMap() {

      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(StreamGroupInfo.NAME, STRING);
      tempMappingFunctions.put(StreamGroupInfo.CONSUMERS, LONG);
      tempMappingFunctions.put(StreamGroupInfo.PENDING, LONG);
      tempMappingFunctions.put(StreamGroupInfo.LAST_DELIVERED, STREAM_ENTRY_ID);

      return tempMappingFunctions;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<StreamGroupInfo> build(Object),"[1526, 1550]","{'A1': [(1528, 1528), (1534, 1534), (1543, 1544)], 'A25': [(1526, 1527), (1529, 1533), (1535, 1542), (1545, 1550)]}","{'A1': 0.16, 'A25': 0.84}",A25,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<StreamGroupInfo> build(Object data) {
      if (null == data) {
        return null;
      }

      List<StreamGroupInfo> list = new ArrayList<>();
      List<Object> streamsEntries = (List<Object>) data;
      Iterator<Object> groupsArray = streamsEntries.iterator();

      while (groupsArray.hasNext()) {

        List<Object> groupInfo = (List<Object>) groupsArray.next();

        Iterator<Object> groupInfoIterator = groupInfo.iterator();

        StreamGroupInfo streamGroupInfo = new StreamGroupInfo(createMapFromDecodingFunctions(
          groupInfoIterator, mappingFunctions));
        list.add(streamGroupInfo);

      }
      return list;

    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1552, 1555]","{'A25': [(1552, 1555)]}",{'A25': 1.0},A25,,"    @Override
    public String toString() {
      return ""List<StreamGroupInfo>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1567, 1574]","{'A1': [(1568, 1571)], 'A25': [(1567, 1567), (1572, 1574)]}","{'A1': 0.5, 'A25': 0.5}",A1,,"    private Map<String, Builder> createDecoderMap() {
      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(StreamConsumersInfo.NAME, STRING);
      tempMappingFunctions.put(StreamConsumersInfo.IDLE, LONG);
      tempMappingFunctions.put(StreamConsumersInfo.PENDING, LONG);
      return tempMappingFunctions;

    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<StreamConsumersInfo> build(Object),"[1576, 1600]","{'A1': [(1578, 1578), (1583, 1584), (1593, 1594)], 'A25': [(1576, 1577), (1579, 1582), (1585, 1592), (1595, 1600)]}","{'A1': 0.2, 'A25': 0.8}",A25,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<StreamConsumersInfo> build(Object data) {
      if (null == data) {
        return null;
      }

      List<StreamConsumersInfo> list = new ArrayList<>();
      List<Object> streamsEntries = (List<Object>) data;
      Iterator<Object> groupsArray = streamsEntries.iterator();

      while (groupsArray.hasNext()) {

        List<Object> groupInfo = (List<Object>) groupsArray.next();

        Iterator<Object> consumerInfoIterator = groupInfo.iterator();

        StreamConsumersInfo streamGroupInfo = new StreamConsumersInfo(
            createMapFromDecodingFunctions(consumerInfoIterator, mappingFunctions));
        list.add(streamGroupInfo);

      }
      return list;

    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1602, 1605]","{'A25': [(1602, 1605)]}",{'A25': 1.0},A25,,"    @Override
    public String toString() {
      return ""List<StreamConsumersInfo>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1613, 1620]","{'A1': [(1613, 1620)]}",{'A1': 1.0},A1,,"    private Map<String, Builder> createDecoderMap() {
      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(StreamConsumerInfo.NAME, STRING);
      tempMappingFunctions.put(StreamConsumerInfo.IDLE, LONG);
      tempMappingFunctions.put(StreamConsumerInfo.PENDING, LONG);
      return tempMappingFunctions;

    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<StreamConsumerInfo> build(Object),"[1622, 1645]","{'A1': [(1622, 1645)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<StreamConsumerInfo> build(Object data) {
      if (null == data) {
        return null;
      }

      List<StreamConsumerInfo> list = new ArrayList<>();
      List<Object> streamsEntries = (List<Object>) data;
      Iterator<Object> groupsArray = streamsEntries.iterator();

      while (groupsArray.hasNext()) {

        List<Object> groupInfo = (List<Object>) groupsArray.next();

        Iterator<Object> consumerInfoIterator = groupInfo.iterator();

        StreamConsumerInfo streamConsumerInfo = new StreamConsumerInfo(
            createMapFromDecodingFunctions(consumerInfoIterator, mappingFunctions));
        list.add(streamConsumerInfo);
      }

      return list;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1647, 1650]","{'A1': [(1647, 1650)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<StreamConsumerInfo>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1658, 1667]","{'A1': [(1664, 1664)], 'A26': [(1658, 1663), (1665, 1667)]}","{'A1': 0.1, 'A26': 0.9}",A26,,"    private Map<String, Builder> createDecoderMap() {

      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(StreamConsumerFullInfo.NAME, STRING);
      tempMappingFunctions.put(StreamConsumerFullInfo.SEEN_TIME, LONG);
      tempMappingFunctions.put(StreamConsumerFullInfo.PEL_COUNT, LONG);
      tempMappingFunctions.put(StreamConsumerFullInfo.PENDING, ENCODED_OBJECT_LIST);

      return tempMappingFunctions;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<StreamConsumerFullInfo> build(Object),"[1669, 1687]","{'A1': [(1682, 1683)], 'A26': [(1669, 1681), (1684, 1687)]}","{'A1': 0.10526315789473684, 'A26': 0.8947368421052632}",A26,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<StreamConsumerFullInfo> build(Object data) {
      if (null == data) {
        return null;
      }

      List<StreamConsumerFullInfo> list = new ArrayList<>();
      List<Object> streamsEntries = (List<Object>) data;

      for (Object streamsEntry : streamsEntries) {
        List<Object> consumerInfoList = (List<Object>) streamsEntry;
        Iterator<Object> consumerInfoIterator = consumerInfoList.iterator();
        StreamConsumerFullInfo consumerInfo = new StreamConsumerFullInfo(
            createMapFromDecodingFunctions(consumerInfoIterator, mappingFunctions));
        list.add(consumerInfo);
      }
      return list;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1689, 1692]","{'A26': [(1689, 1692)]}",{'A26': 1.0},A26,,"    @Override
    public String toString() {
      return ""List<StreamConsumerFullInfo>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1700, 1710]","{'A1': [(1705, 1705)], 'A26': [(1700, 1704), (1706, 1710)]}","{'A1': 0.09090909090909091, 'A26': 0.9090909090909091}",A26,,"    private Map<String, Builder> createDecoderMap() {

      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(StreamGroupFullInfo.NAME, STRING);
      tempMappingFunctions.put(StreamGroupFullInfo.CONSUMERS, STREAM_CONSUMER_FULL_INFO_LIST);
      tempMappingFunctions.put(StreamGroupFullInfo.PENDING, ENCODED_OBJECT_LIST);
      tempMappingFunctions.put(StreamGroupFullInfo.LAST_DELIVERED, STREAM_ENTRY_ID);
      tempMappingFunctions.put(StreamGroupFullInfo.PEL_COUNT, LONG);

      return tempMappingFunctions;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<StreamGroupFullInfo> build(Object),"[1712, 1734]","{'A1': [(1728, 1729)], 'A26': [(1712, 1727), (1730, 1734)]}","{'A1': 0.08695652173913043, 'A26': 0.9130434782608695}",A26,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<StreamGroupFullInfo> build(Object data) {
      if (null == data) {
        return null;
      }

      List<StreamGroupFullInfo> list = new ArrayList<>();
      List<Object> streamsEntries = (List<Object>) data;

      for (Object streamsEntry : streamsEntries) {

        List<Object> groupInfo = (List<Object>) streamsEntry;

        Iterator<Object> groupInfoIterator = groupInfo.iterator();

        StreamGroupFullInfo groupFullInfo = new StreamGroupFullInfo(
            createMapFromDecodingFunctions(groupInfoIterator, mappingFunctions));
        list.add(groupFullInfo);

      }
      return list;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1736, 1739]","{'A26': [(1736, 1739)]}",{'A26': 1.0},A26,,"    @Override
    public String toString() {
      return ""List<StreamGroupFullInfo>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createDecoderMap,"Map<String, Builder> createDecoderMap()","[1746, 1757]","{'A26': [(1746, 1757)]}",{'A26': 1.0},A26,,"    private Map<String, Builder> createDecoderMap() {

      Map<String, Builder> tempMappingFunctions = new HashMap<>();
      tempMappingFunctions.put(StreamFullInfo.LAST_GENERATED_ID, STREAM_ENTRY_ID);
      tempMappingFunctions.put(StreamFullInfo.LENGTH, LONG);
      tempMappingFunctions.put(StreamFullInfo.RADIX_TREE_KEYS, LONG);
      tempMappingFunctions.put(StreamFullInfo.RADIX_TREE_NODES, LONG);
      tempMappingFunctions.put(StreamFullInfo.GROUPS, STREAM_GROUP_FULL_INFO_LIST);
      tempMappingFunctions.put(StreamFullInfo.ENTRIES, STREAM_ENTRY_LIST);

      return tempMappingFunctions;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,StreamFullInfo build(Object),"[1759, 1770]","{'A26': [(1759, 1770)]}",{'A26': 1.0},A26,,"    @Override
    @SuppressWarnings(""unchecked"")
    public StreamFullInfo build(Object data) {
      if (null == data) {
        return null;
      }

      List<Object> streamsEntries = (List<Object>) data;
      Iterator<Object> iterator = streamsEntries.iterator();

      return new StreamFullInfo(createMapFromDecodingFunctions(iterator, mappingFunctions));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1772, 1775]","{'A26': [(1772, 1775)]}",{'A26': 1.0},A26,,"    @Override
    public String toString() {
      return ""StreamFullInfo"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,StreamPendingSummary build(Object),"[1785, 1801]","{'A1': [(1793, 1800)], 'A14': [(1785, 1792), (1801, 1801)]}","{'A1': 0.47058823529411764, 'A14': 0.5294117647058824}",A14,,"    @Override
    @SuppressWarnings(""unchecked"")
    public StreamPendingSummary build(Object data) {
      if (null == data) {
        return null;
      }

      List<Object> objectList = (List<Object>) data;
      long total = LONG.build(objectList.get(0));
      StreamEntryID minId = STREAM_ENTRY_ID.build(objectList.get(1));
      StreamEntryID maxId = STREAM_ENTRY_ID.build(objectList.get(2));
      Map<String, Long> map = objectList.get(3) == null ? null
          : ((List<List<Object>>) objectList.get(3)).stream().collect(
              Collectors.toMap(pair -> STRING.build(pair.get(0)),
                  pair -> Long.parseLong(STRING.build(pair.get(1)))));
      return new StreamPendingSummary(total, minId, maxId, map);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1803, 1806]","{'A14': [(1803, 1806)]}",{'A14': 1.0},A14,,"    @Override
    public String toString() {
      return ""StreamPendingSummary"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<StreamEntryBinary> build(Object),"[1810, 1845]","{'A4': [(1810, 1845)]}",{'A4': 1.0},A4,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<StreamEntryBinary> build(Object data) {
      if (null == data) {
        return null;
      }
      List<ArrayList<Object>> objectList = (List<ArrayList<Object>>) data;

      List<StreamEntryBinary> responses = new ArrayList<>(objectList.size() / 2);
      if (objectList.isEmpty()) {
        return responses;
      }

      for (ArrayList<Object> res : objectList) {
        if (res == null) {
          responses.add(null);
          continue;
        }
        String entryIdString = SafeEncoder.encode((byte[]) res.get(0));
        StreamEntryID entryID = new StreamEntryID(entryIdString);
        List<byte[]> hash = (List<byte[]>) res.get(1);
        if (hash == null) {
          responses.add(new StreamEntryBinary(entryID, null));
          continue;
        }

        Iterator<byte[]> hashIterator = hash.iterator();
        Map<byte[], byte[]> map = new JedisByteHashMap();
        while (hashIterator.hasNext()) {
          map.put(BINARY.build(hashIterator.next()), BINARY.build(hashIterator.next()));
        }
        responses.add(new StreamEntryBinary(entryID, map));
      }

      return responses;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1847, 1850]","{'A4': [(1847, 1850)]}",{'A4': 1.0},A4,,"    @Override
    public String toString() {
      return ""List<StreamEntryBinary>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<byte[], List<StreamEntryBinary>> build(Object)","[1855, 1875]","{'A4': [(1855, 1875)]}",{'A4': 1.0},A4,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Map<byte[], List<StreamEntryBinary>> build(Object data) {
      if (data == null) return null;
      List list = (List) data;
      if (list.isEmpty()) return Collections.emptyMap();

      JedisByteMap<List<StreamEntryBinary>> result = new JedisByteMap<>();
      if (list.get(0) instanceof KeyValue) {
        ((List<KeyValue>) list).forEach(kv -> result.put(BINARY.build(kv.getKey()), STREAM_ENTRY_BINARY_LIST.build(kv.getValue())));
        return result;
      } else {
        for (Object anObj : list) {
          List<Object> streamObj = (List<Object>) anObj;
          byte[] streamKey = (byte[]) streamObj.get(0);
          List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));
          result.put(streamKey, streamEntries);
        }
        return result;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1877, 1880]","{'A4': [(1877, 1880)]}",{'A4': 1.0},A4,,"    @Override
    public String toString() {
      return ""Map<byte[], List<StreamEntryBinary>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object)","[1885, 1907]","{'A4': [(1885, 1907)]}",{'A4': 1.0},A4,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {
      if (data == null) return null;
      List list = (List) data;
      if (list.isEmpty()) return Collections.emptyList();

      if (list.get(0) instanceof KeyValue) {
        return ((List<KeyValue>) list).stream()
                .map(kv -> new KeyValue<>(BINARY.build(kv.getKey()),
                    STREAM_ENTRY_BINARY_LIST.build(kv.getValue())))
                .collect(Collectors.toList());
      } else {
        List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());
        for (Object anObj : list) {
          List<Object> streamObj = (List<Object>) anObj;
          byte[] streamKey = BINARY.build(streamObj.get(0));
          List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));
          result.add(KeyValue.of(streamKey, streamEntries));
        }
        return result;
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[1909, 1912]","{'A4': [(1909, 1912)]}",{'A4': 1.0},A4,,"    @Override
    public String toString() {
      return ""List<Entry<byte[], List<StreamEntryBinary>>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createMapFromDecodingFunctions,"Map<String, Object> createMapFromDecodingFunctions(Iterator<Object>,Map<String, Builder>)","[1918, 1921]","{'A1': [(1918, 1921)]}",{'A1': 1.0},A1,,"  private static Map<String, Object> createMapFromDecodingFunctions(Iterator<Object> iterator,
      Map<String, Builder> mappingFunctions) {
    return createMapFromDecodingFunctions(iterator, mappingFunctions, null);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,createMapFromDecodingFunctions,"Map<String, Object> createMapFromDecodingFunctions(Iterator<Object>,Map<String, Builder>,Collection<Builder>)","[1923, 1960]","{'A1': [(1923, 1924), (1926, 1930), (1932, 1943), (1946, 1949), (1951, 1951), (1954, 1954)], 'A25': [(1925, 1925), (1931, 1931), (1944, 1945), (1950, 1950), (1952, 1953), (1955, 1960)]}","{'A1': 0.6578947368421053, 'A25': 0.34210526315789475}",A1,,"  private static Map<String, Object> createMapFromDecodingFunctions(Iterator<Object> iterator,
      Map<String, Builder> mappingFunctions, Collection<Builder> backupBuilders) {

    if (!iterator.hasNext()) {
      return Collections.emptyMap();
    }

    Map<String, Object> resultMap = new HashMap<>();
    while (iterator.hasNext()) {
      final Object tempObject = iterator.next();
      final String mapKey;
      final Object rawValue;

      if (tempObject instanceof KeyValue) {
        KeyValue kv = (KeyValue) tempObject;
        mapKey = STRING.build(kv.getKey());
        rawValue = kv.getValue();
      } else {
        mapKey = STRING.build(tempObject);
        rawValue = iterator.next();
      }

      if (mappingFunctions.containsKey(mapKey)) {
        resultMap.put(mapKey, mappingFunctions.get(mapKey).build(rawValue));
      } else { // For future - if we don't find an element in our builder map
        Collection<Builder> builders = backupBuilders != null ? backupBuilders : mappingFunctions.values();
        for (Builder b : builders) {
          try {
            resultMap.put(mapKey, b.build(rawValue));
            break;
          } catch (ClassCastException e) {
            // We continue with next builder
          }
        }
      }
    }
    return resultMap;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,LCSMatchResult build(Object),"[1965, 2002]","{'A1': [(1980, 1995)], 'A3': [(1965, 1979), (1996, 2002)]}","{'A1': 0.42105263157894735, 'A3': 0.5789473684210527}",A3,,"    @Override
    public LCSMatchResult build(Object data) {
      if (data == null) {
        return null;
      }

      if (data instanceof byte[]) {
        return new LCSMatchResult(STRING.build(data));
      } else if (data instanceof Long) {
        return new LCSMatchResult(LONG.build(data));
      } else {
        long len = 0;
        List<MatchedPosition> matchedPositions = new ArrayList<>();

        List<Object> objectList = (List<Object>) data;
        if (objectList.get(0) instanceof KeyValue) {
          Iterator iterator = objectList.iterator();
          while (iterator.hasNext()) {
            KeyValue kv = (KeyValue) iterator.next();
            if (""matches"".equalsIgnoreCase(STRING.build(kv.getKey()))) {
              addMatchedPosition(matchedPositions, kv.getValue());
            } else if (""len"".equalsIgnoreCase(STRING.build(kv.getKey()))) {
              len = LONG.build(kv.getValue());
            }
          }
        } else {
          for (int i = 0; i < objectList.size(); i += 2) {
            if (""matches"".equalsIgnoreCase(STRING.build(objectList.get(i)))) {
              addMatchedPosition(matchedPositions, objectList.get(i + 1));
            } else if (""len"".equalsIgnoreCase(STRING.build(objectList.get(i)))) {
              len = LONG.build(objectList.get(i + 1));
            }
          }
        }

        return new LCSMatchResult(matchedPositions, len);
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,addMatchedPosition,"void addMatchedPosition(List<MatchedPosition>,Object)","[2004, 2024]","{'A1': [(2004, 2024)]}",{'A1': 1.0},A1,,"    private void addMatchedPosition(List<MatchedPosition> matchedPositions, Object o) {
      List<Object> matches = (List<Object>) o;
      for (Object obj : matches) {
        if (obj instanceof List<?>) {
          List<Object> positions = (List<Object>) obj;
          Position a = new Position(
              LONG.build(((List<Object>) positions.get(0)).get(0)),
              LONG.build(((List<Object>) positions.get(0)).get(1))
          );
          Position b = new Position(
              LONG.build(((List<Object>) positions.get(1)).get(0)),
              LONG.build(((List<Object>) positions.get(1)).get(1))
          );
          long matchLen = 0;
          if (positions.size() >= 3) {
            matchLen = LONG.build(positions.get(2));
          }
          matchedPositions.add(new MatchedPosition(a, b, matchLen));
        }
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, String> build(Object)","[2028, 2048]","{'A1': [(2028, 2048)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Map<String, String> build(Object data) {
      final List list = (List) data;
      if (list.isEmpty()) return Collections.emptyMap();

      if (list.get(0) instanceof KeyValue) {
        return ((List<KeyValue>) list).stream()
            .collect(Collectors.toMap(kv -> STRING.build(kv.getKey()),
                kv -> STRING.build(kv.getValue())));
      }

      final Map<String, String> map = new HashMap<>(list.size());
      for (Object object : list) {
        if (object == null) continue;
        final List<Object> flat = (List<Object>) object;
        if (flat.isEmpty()) continue;
        map.put(STRING.build(flat.get(0)), STRING.build(flat.get(1)));
      }
      return map;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[2050, 2053]","{'A1': [(2050, 2053)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Map<String, String>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,"Map<String, Object> build(Object)","[2057, 2077]","{'A1': [(2057, 2077)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public Map<String, Object> build(Object data) {
      final List list = (List) data;
      if (list.isEmpty()) return Collections.emptyMap();

      if (list.get(0) instanceof KeyValue) {
        return ((List<KeyValue>) list).stream()
            .collect(Collectors.toMap(kv -> STRING.build(kv.getKey()),
                kv -> ENCODED_OBJECT.build(kv.getValue())));
      }

      final Map<String, Object> map = new HashMap<>(list.size());
      for (Object object : list) {
        if (object == null) continue;
        final List<Object> flat = (List<Object>) object;
        if (flat.isEmpty()) continue;
        map.put(STRING.build(flat.get(0)), STRING.build(flat.get(1)));
      }
      return map;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[2079, 2082]","{'A1': [(2079, 2082)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Map<String, String>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<List<String>> build(Object),"[2092, 2097]","{'A1': [(2092, 2097)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<List<String>> build(Object data) {
      if (null == data) return null;
      return ((List<Object>) data).stream().map(STRING_LIST::build).collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[2099, 2102]","{'A1': [(2099, 2102)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<List<String>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,build,List<List<Object>> build(Object),"[2106, 2111]","{'A1': [(2106, 2111)]}",{'A1': 1.0},A1,,"    @Override
    @SuppressWarnings(""unchecked"")
    public List<List<Object>> build(Object data) {
      if (null == data) return null;
      return ((List<Object>) data).stream().map(ENCODED_OBJECT_LIST::build).collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory,toString,String toString(),"[2113, 2116]","{'A1': [(2113, 2116)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""List<List<Object>>"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,clear,void clear(),"[2133, 2136]","{'A1': [(2133, 2136)]}",{'A1': 1.0},A1,,"    @Override
    public void clear() {
      list.clear();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,size,int size(),"[2138, 2141]","{'A1': [(2138, 2141)]}",{'A1': 1.0},A1,,"    @Override
    public int size() {
      return list.size();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,isEmpty,boolean isEmpty(),"[2143, 2146]","{'A1': [(2143, 2146)]}",{'A1': 1.0},A1,,"    @Override
    public boolean isEmpty() {
      return list.isEmpty();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,contains,boolean contains(Object),"[2148, 2151]","{'A1': [(2148, 2151)]}",{'A1': 1.0},A1,,"    @Override
    public boolean contains(Object o) {
      return list.contains(o);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,remove,boolean remove(Object),"[2153, 2156]","{'A1': [(2153, 2156)]}",{'A1': 1.0},A1,,"    @Override
    public boolean remove(Object o) {
      return list.remove(o);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,add,boolean add(E),"[2158, 2161]","{'A1': [(2158, 2161)]}",{'A1': 1.0},A1,,"    @Override
    public boolean add(E e) {
      return !contains(e) && list.add(e);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,iterator,Iterator<E> iterator(),"[2163, 2166]","{'A1': [(2163, 2166)]}",{'A1': 1.0},A1,,"    @Override
    public Iterator<E> iterator() {
      return list.iterator();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,toArray,Object[] toArray(),"[2168, 2171]","{'A1': [(2168, 2171)]}",{'A1': 1.0},A1,,"    @Override
    public Object[] toArray() {
      return list.toArray();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,toArray,T[] toArray(T[]),"[2173, 2176]","{'A1': [(2173, 2176)]}",{'A1': 1.0},A1,,"    @Override
    public <T> T[] toArray(T[] a) {
      return list.toArray(a);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,toString,String toString(),"[2178, 2181]","{'A1': [(2178, 2181)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return list.toString();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,hashCode,int hashCode(),"[2183, 2186]","{'A1': [(2183, 2186)]}",{'A1': 1.0},A1,,"    @Override
    public int hashCode() {
      return list.hashCode();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,equals,boolean equals(Object),"[2188, 2200]","{'A1': [(2188, 2200)]}",{'A1': 1.0},A1,,"    @Override
    public boolean equals(Object o) {
      if (o == null) return false;
      if (o == this) return true;
      if (!(o instanceof Set)) return false;

      Collection<?> c = (Collection<?>) o;
      if (c.size() != size()) {
        return false;
      }

      return containsAll(c);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,containsAll,boolean containsAll(Collection<?>),"[2202, 2205]","{'A1': [(2202, 2205)]}",{'A1': 1.0},A1,,"    @Override
    public boolean containsAll(Collection<?> c) {
      return list.containsAll(c);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,removeAll,boolean removeAll(Collection<?>),"[2207, 2210]","{'A1': [(2207, 2210)]}",{'A1': 1.0},A1,,"    @Override
    public boolean removeAll(Collection<?> c) {
      return list.removeAll(c);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,retainAll,boolean retainAll(Collection<?>),"[2212, 2215]","{'A1': [(2212, 2215)]}",{'A1': 1.0},A1,,"    @Override
    public boolean retainAll(Collection<?> c) {
      return list.retainAll(c);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BuilderFactory.java,BuilderFactory.SetFromList,of,SetFromList<E> of(List<E>),"[2217, 2222]","{'A1': [(2217, 2222)]}",{'A1': 1.0},A1,,"    protected static <E> SetFromList<E> of(List<E> list) {
      if (list == null) {
        return null;
      }
      return new SetFromList<>(list);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisMonitor.java,JedisMonitor,proceed,void proceed(Connection),"[7, 14]","{'A1': [(7, 7)], 'A7': [(8, 14)]}","{'A1': 0.125, 'A7': 0.875}",A7,,"  public void proceed(Connection client) {
    this.client = client;
    this.client.setTimeoutInfinite();
    do {
      String command = client.getBulkReply();
      onCommand(command);
    } while (client.isConnected());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BinaryJedisPubSub.java,BinaryJedisPubSub,encode,byte[] encode(byte[]),"[5, 8]","{'A1': [(5, 7)], 'A7': [(8, 8)]}","{'A1': 0.75, 'A7': 0.25}",A1,,"  @Override
  protected final byte[] encode(byte[] raw) {
    return raw;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache.TopologyRefreshTask,run,void run(),"[63, 68]","{'A10': [(63, 68)]}",{'A10': 1.0},A10,,"    @Override
    public void run() {
      logger.debug(""Cluster topology refresh run, old nodes: {}"", nodes.keySet());
      renewClusterSlots(null);
      logger.debug(""Cluster topology refresh run, new nodes: {}"", nodes.keySet());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,checkClusterSlotSequence,boolean checkClusterSlotSequence(List<Object>),"[127, 143]","{'A7': [(143, 143)], 'A10': [(127, 142)]}","{'A7': 0.058823529411764705, 'A10': 0.9411764705882353}",A10,,"  private boolean checkClusterSlotSequence(List<Object> slotsInfo) {
    List<Integer> slots = new ArrayList<>();
    for (Object slotInfoObj : slotsInfo) {
      List<Object> slotInfo = (List<Object>)slotInfoObj;
      slots.addAll(getAssignedSlotArray(slotInfo));
    }
    Collections.sort(slots);
    if (slots.size() != Protocol.CLUSTER_HASHSLOTS) {
      return false;
    }
    for (int i = 0; i < Protocol.CLUSTER_HASHSLOTS; ++i) {
      if (i != slots.get(i)) {
        return false;
      }
    }
    return true;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,discoverClusterNodesAndSlots,void discoverClusterNodesAndSlots(Connection),"[145, 187]","{'A7': [(155, 156), (160, 160), (183, 187)], 'A10': [(147, 153)], 'A30': [(157, 157), (176, 176)], 'A1': [(145, 146), (158, 158), (179, 179)], 'A32': [(154, 154)], 'A33': [(180, 180)], 'A34': [(159, 159), (161, 170), (172, 175), (177, 178), (181, 182)], 'A22': [(171, 171)]}","{'A7': 0.18604651162790697, 'A10': 0.16279069767441862, 'A30': 0.046511627906976744, 'A1': 0.09302325581395349, 'A32': 0.023255813953488372, 'A33': 0.023255813953488372, 'A34': 0.4418604651162791, 'A22': 0.023255813953488372}",A34,,"  public void discoverClusterNodesAndSlots(Connection jedis) {
    List<Object> slotsInfo = executeClusterSlots(jedis);
    if (System.getProperty(INIT_NO_ERROR_PROPERTY) == null) {
      if (slotsInfo.isEmpty()) {
        throw new JedisClusterOperationException(""Cluster slots list is empty."");
      }
      if (!checkClusterSlotSequence(slotsInfo)) {
        throw new JedisClusterOperationException(""Cluster slots have holes."");
      }
    }
    w.lock();
    try {
      reset();
      for (Object slotInfoObj : slotsInfo) {
        List<Object> slotInfo = (List<Object>) slotInfoObj;

        if (slotInfo.size() <= MASTER_NODE_INDEX) {
          continue;
        }

        List<Integer> slotNums = getAssignedSlotArray(slotInfo);

        // hostInfos
        int size = slotInfo.size();
        for (int i = MASTER_NODE_INDEX; i < size; i++) {
          List<Object> hostInfos = (List<Object>) slotInfo.get(i);
          if (hostInfos.isEmpty()) {
            continue;
          }

          HostAndPort targetNode = generateHostAndPort(hostInfos);
          setupNodeIfNotExist(targetNode);
          if (i == MASTER_NODE_INDEX) {
            assignSlotsToNode(slotNums, targetNode);
          } else if (clientConfig.isReadOnlyForRedisClusterReplicas()) {
            assignSlotsToReplicaNode(slotNums, targetNode);
          }
        }
      }
    } finally {
      w.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,renewClusterSlots,void renewClusterSlots(Connection),"[189, 234]","{'A7': [(202, 202), (232, 234)], 'A10': [(193, 193), (203, 209), (211, 216), (218, 222), (229, 229)], 'A30': [(192, 192), (195, 195), (227, 228), (230, 230)], 'A1': [(189, 190), (210, 210), (217, 217), (225, 225)], 'A31': [(191, 191), (194, 194), (196, 201), (223, 224), (226, 226), (231, 231)]}","{'A7': 0.08695652173913043, 'A10': 0.43478260869565216, 'A30': 0.10869565217391304, 'A1': 0.10869565217391304, 'A31': 0.2608695652173913}",A10,,"  public void renewClusterSlots(Connection jedis) {
    // If rediscovering is already in process - no need to start one more same rediscovering, just return
    if (rediscoverLock.tryLock()) {
      try {
        // First, if jedis is available, use jedis renew.
        if (jedis != null) {
          try {
            discoverClusterSlots(jedis);
            return;
          } catch (JedisException e) {
            // try nodes from all pools
          }
        }

        // Then, we use startNodes to try, as long as startNodes is available,
        // whether it is vip, domain, or physical ip, it will succeed.
        if (startNodes != null) {
          for (HostAndPort hostAndPort : startNodes) {
            try (Connection j = new Connection(hostAndPort, clientConfig)) {
              discoverClusterSlots(j);
              return;
            } catch (JedisException e) {
              // try next nodes
            }
          }
        }

        // Finally, we go back to the ShuffledNodesPool and try the remaining physical nodes.
        for (ConnectionPool jp : getShuffledNodesPool()) {
          try (Connection j = jp.getResource()) {
            // If already tried in startNodes, skip this node.
            if (startNodes != null && startNodes.contains(j.getHostAndPort())) {
              continue;
            }
            discoverClusterSlots(j);
            return;
          } catch (JedisException e) {
            // try next nodes
          }
        }

      } finally {
        rediscoverLock.unlock();
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,discoverClusterSlots,void discoverClusterSlots(Connection),"[236, 301]","{'A10': [(238, 244)], 'A29': [(248, 249)], 'A30': [(254, 254), (257, 257), (261, 261), (263, 263), (281, 281), (300, 301)], 'A3': [(253, 253), (264, 275), (278, 278), (280, 280), (282, 282), (284, 284), (286, 286), (288, 296)], 'A1': [(236, 237), (250, 252), (255, 255), (276, 276), (283, 283), (285, 285), (287, 287)], 'A31': [(246, 247), (256, 256), (258, 260), (262, 262), (279, 279), (297, 299)], 'A32': [(245, 245)], 'A33': [(277, 277)]}","{'A10': 0.10606060606060606, 'A29': 0.030303030303030304, 'A30': 0.10606060606060606, 'A3': 0.4090909090909091, 'A1': 0.15151515151515152, 'A31': 0.16666666666666666, 'A32': 0.015151515151515152, 'A33': 0.015151515151515152}",A3,,"  private void discoverClusterSlots(Connection jedis) {
    List<Object> slotsInfo = executeClusterSlots(jedis);
    if (System.getProperty(INIT_NO_ERROR_PROPERTY) == null) {
      if (slotsInfo.isEmpty()) {
        throw new JedisClusterOperationException(""Cluster slots list is empty."");
      }
      if (!checkClusterSlotSequence(slotsInfo)) {
        throw new JedisClusterOperationException(""Cluster slots have holes."");
      }
    }
    w.lock();
    try {
      Arrays.fill(slots, null);
      Arrays.fill(slotNodes, null);
      if (clientSideCache != null) {
        clientSideCache.flush();
      }
      Set<String> hostAndPortKeys = new HashSet<>();

      for (Object slotInfoObj : slotsInfo) {
        List<Object> slotInfo = (List<Object>) slotInfoObj;

        if (slotInfo.size() <= MASTER_NODE_INDEX) {
          continue;
        }

        List<Integer> slotNums = getAssignedSlotArray(slotInfo);

        int size = slotInfo.size();
        for (int i = MASTER_NODE_INDEX; i < size; i++) {
          List<Object> hostInfos = (List<Object>) slotInfo.get(i);
          if (hostInfos.isEmpty()) {
            continue;
          }

          HostAndPort targetNode = generateHostAndPort(hostInfos);
          hostAndPortKeys.add(getNodeKey(targetNode));
          setupNodeIfNotExist(targetNode);
          if (i == MASTER_NODE_INDEX) {
            assignSlotsToNode(slotNums, targetNode);
          } else if (clientConfig.isReadOnlyForRedisClusterReplicas()) {
            assignSlotsToReplicaNode(slotNums, targetNode);
          }
        }
      }

      // Remove dead nodes according to the latest query
      Iterator<Entry<String, ConnectionPool>> entryIt = nodes.entrySet().iterator();
      while (entryIt.hasNext()) {
        Entry<String, ConnectionPool> entry = entryIt.next();
        if (!hostAndPortKeys.contains(entry.getKey())) {
          ConnectionPool pool = entry.getValue();
          try {
            if (pool != null) {
              pool.destroy();
            }
          } catch (Exception e) {
            // pass, may be this node dead
          }
          entryIt.remove();
        }
      }
    } finally {
      w.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,generateHostAndPort,HostAndPort generateHostAndPort(List<Object>),"[303, 307]","{'A7': [(303, 303), (307, 307)], 'A1': [(304, 306)]}","{'A7': 0.4, 'A1': 0.6}",A1,,"  private HostAndPort generateHostAndPort(List<Object> hostInfos) {
    String host = SafeEncoder.encode((byte[]) hostInfos.get(0));
    int port = ((Long) hostInfos.get(1)).intValue();
    return new HostAndPort(host, port);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,setupNodeIfNotExist,ConnectionPool setupNodeIfNotExist(HostAndPort),"[309, 322]","{'A7': [(310, 312), (315, 315)], 'A30': [(314, 314), (318, 318)], 'A1': [(309, 309), (313, 313), (316, 316)], 'A36': [(317, 317), (319, 322)]}","{'A7': 0.2857142857142857, 'A30': 0.14285714285714285, 'A1': 0.21428571428571427, 'A36': 0.35714285714285715}",A36,,"  public ConnectionPool setupNodeIfNotExist(final HostAndPort node) {
    w.lock();
    try {
      String nodeKey = getNodeKey(node);
      ConnectionPool existingPool = nodes.get(nodeKey);
      if (existingPool != null) return existingPool;

      ConnectionPool nodePool = createNodePool(node);
      nodes.put(nodeKey, nodePool);
      return nodePool;
    } finally {
      w.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,createNodePool,ConnectionPool createNodePool(HostAndPort),"[324, 338]","{'A1': [(324, 338)]}",{'A1': 1.0},A1,,"  private ConnectionPool createNodePool(HostAndPort node) {
    if (poolConfig == null) {
      if (clientSideCache == null) {
        return new ConnectionPool(node, clientConfig);
      } else {
        return new ConnectionPool(node, clientConfig, clientSideCache);
      }
    } else {
      if (clientSideCache == null) {
        return new ConnectionPool(node, clientConfig, poolConfig);
      } else {
        return new ConnectionPool(node, clientConfig, clientSideCache, poolConfig);
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,assignSlotToNode,"void assignSlotToNode(int,HostAndPort)","[340, 349]","{'A7': [(340, 342), (346, 349)], 'A29': [(344, 345)], 'A1': [(343, 343)]}","{'A7': 0.7, 'A29': 0.2, 'A1': 0.1}",A7,,"  public void assignSlotToNode(int slot, HostAndPort targetNode) {
    w.lock();
    try {
      ConnectionPool targetPool = setupNodeIfNotExist(targetNode);
      slots[slot] = targetPool;
      slotNodes[slot] = targetNode;
    } finally {
      w.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,assignSlotsToNode,"void assignSlotsToNode(List<Integer>,HostAndPort)","[351, 362]","{'A7': [(351, 353), (355, 355), (358, 362)], 'A29': [(356, 357)], 'A1': [(354, 354)]}","{'A7': 0.75, 'A29': 0.16666666666666666, 'A1': 0.08333333333333333}",A7,,"  public void assignSlotsToNode(List<Integer> targetSlots, HostAndPort targetNode) {
    w.lock();
    try {
      ConnectionPool targetPool = setupNodeIfNotExist(targetNode);
      for (Integer slot : targetSlots) {
        slots[slot] = targetPool;
        slotNodes[slot] = targetNode;
      }
    } finally {
      w.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,assignSlotsToReplicaNode,"void assignSlotsToReplicaNode(List<Integer>,HostAndPort)","[364, 377]","{'A33': [(364, 377)]}",{'A33': 1.0},A33,,"  public void assignSlotsToReplicaNode(List<Integer> targetSlots, HostAndPort targetNode) {
    w.lock();
    try {
      ConnectionPool targetPool = setupNodeIfNotExist(targetNode);
      for (Integer slot : targetSlots) {
        if (replicaSlots[slot] == null) {
          replicaSlots[slot] = new ArrayList<>();
        }
        replicaSlots[slot].add(targetPool);
      }
    } finally {
      w.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,getNode,ConnectionPool getNode(String),"[379, 386]","{'A7': [(380, 386)], 'A1': [(379, 379)]}","{'A7': 0.875, 'A1': 0.125}",A7,,"  public ConnectionPool getNode(String nodeKey) {
    r.lock();
    try {
      return nodes.get(nodeKey);
    } finally {
      r.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,getNode,ConnectionPool getNode(HostAndPort),"[388, 390]","{'A1': [(388, 390)]}",{'A1': 1.0},A1,,"  public ConnectionPool getNode(HostAndPort node) {
    return getNode(getNodeKey(node));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,getSlotPool,ConnectionPool getSlotPool(int),"[392, 399]","{'A7': [(393, 394), (396, 399)], 'A29': [(395, 395)], 'A1': [(392, 392)]}","{'A7': 0.75, 'A29': 0.125, 'A1': 0.125}",A7,,"  public ConnectionPool getSlotPool(int slot) {
    r.lock();
    try {
      return slots[slot];
    } finally {
      r.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,getSlotNode,HostAndPort getSlotNode(int),"[401, 408]","{'A29': [(404, 404)], 'A1': [(401, 403), (405, 408)]}","{'A29': 0.125, 'A1': 0.875}",A1,,"  public HostAndPort getSlotNode(int slot) {
    r.lock();
    try {
      return slotNodes[slot];
    } finally {
      r.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,getSlotReplicaPools,List<ConnectionPool> getSlotReplicaPools(int),"[410, 417]","{'A33': [(410, 417)]}",{'A33': 1.0},A33,,"  public List<ConnectionPool> getSlotReplicaPools(int slot) {
    r.lock();
    try {
      return replicaSlots[slot];
    } finally {
      r.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,getNodes,"Map<String, ConnectionPool> getNodes()","[419, 426]","{'A7': [(420, 421), (423, 426)], 'A1': [(419, 419)], 'A22': [(422, 422)]}","{'A7': 0.75, 'A1': 0.125, 'A22': 0.125}",A7,,"  public Map<String, ConnectionPool> getNodes() {
    r.lock();
    try {
      return new HashMap<>(nodes);
    } finally {
      r.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,getShuffledNodesPool,List<ConnectionPool> getShuffledNodesPool(),"[428, 437]","{'A30': [(429, 430), (432, 437)], 'A1': [(428, 428), (431, 431)]}","{'A30': 0.8, 'A1': 0.2}",A30,,"  public List<ConnectionPool> getShuffledNodesPool() {
    r.lock();
    try {
      List<ConnectionPool> pools = new ArrayList<>(nodes.values());
      Collections.shuffle(pools);
      return pools;
    } finally {
      r.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,reset,void reset(),"[442, 460]","{'A29': [(455, 456)], 'A30': [(442, 444), (446, 449), (451, 454), (457, 460)], 'A1': [(445, 445)], 'A37': [(450, 450)]}","{'A29': 0.10526315789473684, 'A30': 0.7894736842105263, 'A1': 0.05263157894736842, 'A37': 0.05263157894736842}",A30,,"  public void reset() {
    w.lock();
    try {
      for (ConnectionPool pool : nodes.values()) {
        try {
          if (pool != null) {
            pool.destroy();
          }
        } catch (RuntimeException e) {
          // pass
        }
      }
      nodes.clear();
      Arrays.fill(slots, null);
      Arrays.fill(slotNodes, null);
    } finally {
      w.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,close,void close(),"[462, 468]","{'A10': [(462, 468)]}",{'A10': 1.0},A10,,"  public void close() {
    reset();
    if (topologyRefreshExecutor != null) {
      logger.info(""Cluster topology refresh shutdown, startNodes: {}"", startNodes);
      topologyRefreshExecutor.shutdownNow();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,getNodeKey,String getNodeKey(HostAndPort),"[470, 473]","{'A7': [(470, 470), (473, 473)], 'A1': [(471, 472)]}","{'A7': 0.5, 'A1': 0.5}",A7,,"  public static String getNodeKey(HostAndPort hnp) {
    //return hnp.getHost() + "":"" + hnp.getPort();
    return hnp.toString();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,executeClusterSlots,List<Object> executeClusterSlots(Connection),"[475, 478]","{'A7': [(478, 478)], 'A1': [(475, 477)]}","{'A7': 0.25, 'A1': 0.75}",A1,,"  private List<Object> executeClusterSlots(Connection jedis) {
    jedis.sendCommand(Protocol.Command.CLUSTER, ""SLOTS"");
    return jedis.getObjectMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClusterInfoCache.java,JedisClusterInfoCache,getAssignedSlotArray,List<Integer> getAssignedSlotArray(List<Object>),"[480, 487]","{'A7': [(480, 480), (482, 487)], 'A22': [(481, 481)]}","{'A7': 0.875, 'A22': 0.125}",A7,,"  private List<Integer> getAssignedSlotArray(List<Object> slotInfo) {
    List<Integer> slotNums = new ArrayList<>();
    for (int slot = ((Long) slotInfo.get(0)).intValue(); slot <= ((Long) slotInfo.get(1))
        .intValue(); slot++) {
      slotNums.add(slot);
    }
    return slotNums;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/AbstractPipeline.java,AbstractPipeline,publish,"Response<Long> publish(String,String)","[19, 21]","{'A1': [(19, 21)]}",{'A1': 1.0},A1,,"  public Response<Long> publish(String channel, String message) {
    return appendCommand(commandObjects.publish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/AbstractPipeline.java,AbstractPipeline,publish,"Response<Long> publish(byte[],byte[])","[23, 25]","{'A1': [(23, 25)]}",{'A1': 1.0},A1,,"  public Response<Long> publish(byte[] channel, byte[] message) {
    return appendCommand(commandObjects.publish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/RedisProtocol.java,RedisProtocol,version,String version(),"[14, 16]","{'A1': [(14, 16)]}",{'A1': 1.0},A1,,"  public String version() {
    return version;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObject.java,CommandObject,getArguments,CommandArguments getArguments(),"[16, 18]","{'A1': [(16, 18)]}",{'A1': 1.0},A1,,"  public CommandArguments getArguments() {
    return arguments;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObject.java,CommandObject,getBuilder,Builder<T> getBuilder(),"[20, 22]","{'A1': [(20, 22)]}",{'A1': 1.0},A1,,"  public Builder<T> getBuilder() {
    return builder;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObject.java,CommandObject,hashCode,int hashCode(),"[24, 32]","{'A1': [(24, 32)]}",{'A1': 1.0},A1,,"  @Override
  public int hashCode() {
    int hashCode = 1;
    for (Rawable e : arguments) {
      hashCode = 31 * hashCode + e.hashCode();
    }
    hashCode = 31 * hashCode + builder.hashCode();
    return hashCode;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObject.java,CommandObject,equals,boolean equals(Object),"[34, 57]","{'A1': [(34, 57)]}",{'A1': 1.0},A1,,"  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof CommandObject)) {
      return false;
    }

    Iterator<Rawable> e1 = arguments.iterator();
    Iterator<Rawable> e2 = ((CommandObject) o).arguments.iterator();
    while (e1.hasNext() && e2.hasNext()) {
      Rawable o1 = e1.next();
      Rawable o2 = e2.next();
      if (!(o1 == null ? o2 == null : o1.equals(o2))) {
        return false;
      }
    }
    if (e1.hasNext() || e2.hasNext()) {
      return false;
    }

    return builder == ((CommandObject) o).builder;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Response.java,Response,set,void set(Object),"[22, 25]","{'A7': [(22, 25)]}",{'A7': 1.0},A7,,"  public void set(Object data) {
    this.data = data;
    set = true;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Response.java,Response,get,T get(),"[27, 44]","{'A2': [(32, 32), (36, 36)], 'A1': [(27, 27), (29, 29), (34, 34)], 'A7': [(28, 28), (30, 31), (33, 33), (35, 35), (37, 44)]}","{'A2': 0.1111111111111111, 'A1': 0.16666666666666666, 'A7': 0.7222222222222222}",A7,,"  @Override
  public T get() {
    // if response has dependency response and dependency is not built, build it first and no more!!
    if (dependency != null && dependency.set && !dependency.built) {
      dependency.build();
    }
    if (!set) {
      throw new IllegalStateException(
          ""Please close pipeline or multi block before calling this method."");
    }
    if (!built) {
      build();
    }
    if (exception != null) {
      throw exception;
    }
    return response;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Response.java,Response,setDependency,void setDependency(Response<?>),"[46, 48]","{'A7': [(46, 48)]}",{'A7': 1.0},A7,,"  public void setDependency(Response<?> dependency) {
    this.dependency = dependency;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Response.java,Response,build,void build(),"[50, 71]","{'A7': [(50, 71)]}",{'A7': 1.0},A7,,"  private void build() {
    // check build state to prevent recursion
    if (building) {
      return;
    }

    building = true;
    try {
      if (data != null) {
        if (data instanceof JedisDataException) {
          exception = (JedisDataException) data;
        } else {
          response = builder.build(data);
        }
      }

      data = null;
    } finally {
      building = false;
      built = true;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Response.java,Response,toString,String toString(),"[73, 76]","{'A7': [(74, 76)], 'A38': [(73, 73)]}","{'A7': 0.75, 'A38': 0.25}",A7,,"  @Override
  public String toString() {
    return ""Response "" + builder.toString();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/RedisCredentials.java,,getUser,String getUser(),"[8, 10]","{'A1': [(8, 10)]}",{'A1': 1.0},A1,,"  default String getUser() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/RedisCredentials.java,,getPassword,char[] getPassword(),"[12, 14]","{'A1': [(12, 14)]}",{'A1': 1.0},A1,,"  default char[] getPassword() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper.InputStreamWrapper,read,int read(),"[32, 35]","{'A1': [(32, 35)]}",{'A1': 1.0},A1,,"    @Override
    public int read() throws IOException {
      return actual.read();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper.InputStreamWrapper,read,int read(byte[]),"[37, 40]","{'A1': [(37, 40)]}",{'A1': 1.0},A1,,"    @Override
    public int read(byte[] b) throws IOException {
      return actual.read(b);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper.InputStreamWrapper,read,"int read(byte[],int,int)","[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"    @Override
    public int read(byte[] b, int off, int len) throws IOException {
      return actual.read(b, off, len);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper.InputStreamWrapper,skip,long skip(long),"[47, 50]","{'A1': [(47, 50)]}",{'A1': 1.0},A1,,"    @Override
    public long skip(long n) throws IOException {
      return actual.skip(n);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper.InputStreamWrapper,available,int available(),"[52, 55]","{'A1': [(52, 55)]}",{'A1': 1.0},A1,,"    @Override
    public int available() throws IOException {
      return underlying.available();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper.InputStreamWrapper,close,void close(),"[57, 60]","{'A1': [(57, 60)]}",{'A1': 1.0},A1,,"    @Override
    public void close() throws IOException {
      actual.close();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper.InputStreamWrapper,mark,void mark(int),"[62, 65]","{'A1': [(62, 65)]}",{'A1': 1.0},A1,,"    @Override
    public synchronized void mark(int readlimit) {
      actual.mark(readlimit);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper.InputStreamWrapper,reset,void reset(),"[67, 70]","{'A1': [(67, 70)]}",{'A1': 1.0},A1,,"    @Override
    public synchronized void reset() throws IOException {
      actual.reset();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper.InputStreamWrapper,markSupported,boolean markSupported(),"[72, 75]","{'A1': [(72, 75)]}",{'A1': 1.0},A1,,"    @Override
    public boolean markSupported() {
      return actual.markSupported();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,connect,void connect(SocketAddress),"[84, 87]","{'A1': [(84, 87)]}",{'A1': 1.0},A1,,"  @Override
  public void connect(SocketAddress endpoint) throws IOException {
    actual.connect(endpoint);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,connect,"void connect(SocketAddress,int)","[89, 92]","{'A1': [(89, 92)]}",{'A1': 1.0},A1,,"  @Override
  public void connect(SocketAddress endpoint, int timeout) throws IOException {
    actual.connect(endpoint, timeout);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,bind,void bind(SocketAddress),"[94, 97]","{'A1': [(94, 97)]}",{'A1': 1.0},A1,,"  @Override
  public void bind(SocketAddress bindpoint) throws IOException {
    actual.bind(bindpoint);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getInetAddress,InetAddress getInetAddress(),"[99, 102]","{'A1': [(99, 102)]}",{'A1': 1.0},A1,,"  @Override
  public InetAddress getInetAddress() {
    return actual.getInetAddress();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getLocalAddress,InetAddress getLocalAddress(),"[104, 107]","{'A1': [(104, 107)]}",{'A1': 1.0},A1,,"  @Override
  public InetAddress getLocalAddress() {
    return actual.getLocalAddress();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getPort,int getPort(),"[109, 112]","{'A1': [(109, 112)]}",{'A1': 1.0},A1,,"  @Override
  public int getPort() {
    return actual.getPort();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getLocalPort,int getLocalPort(),"[114, 117]","{'A1': [(114, 117)]}",{'A1': 1.0},A1,,"  @Override
  public int getLocalPort() {
    return actual.getLocalPort();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getRemoteSocketAddress,SocketAddress getRemoteSocketAddress(),"[119, 122]","{'A1': [(119, 122)]}",{'A1': 1.0},A1,,"  @Override
  public SocketAddress getRemoteSocketAddress() {
    return actual.getRemoteSocketAddress();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getLocalSocketAddress,SocketAddress getLocalSocketAddress(),"[124, 127]","{'A1': [(124, 127)]}",{'A1': 1.0},A1,,"  @Override
  public SocketAddress getLocalSocketAddress() {
    return actual.getLocalSocketAddress();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setTcpNoDelay,void setTcpNoDelay(boolean),"[129, 132]","{'A1': [(129, 132)]}",{'A1': 1.0},A1,,"  @Override
  public void setTcpNoDelay(boolean on) throws SocketException {
    actual.setTcpNoDelay(on);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getTcpNoDelay,boolean getTcpNoDelay(),"[134, 137]","{'A1': [(134, 137)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getTcpNoDelay() throws SocketException {
    return actual.getTcpNoDelay();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setSoLinger,"void setSoLinger(boolean,int)","[139, 142]","{'A1': [(139, 142)]}",{'A1': 1.0},A1,,"  @Override
  public void setSoLinger(boolean on, int linger) throws SocketException {
    actual.setSoLinger(on, linger);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getSoLinger,int getSoLinger(),"[144, 147]","{'A1': [(144, 147)]}",{'A1': 1.0},A1,,"  @Override
  public int getSoLinger() throws SocketException {
    return actual.getSoLinger();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,sendUrgentData,void sendUrgentData(int),"[149, 152]","{'A1': [(149, 152)]}",{'A1': 1.0},A1,,"  @Override
  public void sendUrgentData(int data) throws IOException {
    actual.sendUrgentData(data);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setOOBInline,void setOOBInline(boolean),"[154, 157]","{'A1': [(154, 157)]}",{'A1': 1.0},A1,,"  @Override
  public void setOOBInline(boolean on) throws SocketException {
    actual.setOOBInline(on);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getOOBInline,boolean getOOBInline(),"[159, 162]","{'A1': [(159, 162)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getOOBInline() throws SocketException {
    return actual.getOOBInline();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setSoTimeout,void setSoTimeout(int),"[164, 167]","{'A1': [(164, 167)]}",{'A1': 1.0},A1,,"  @Override
  public synchronized void setSoTimeout(int timeout) throws SocketException {
    actual.setSoTimeout(timeout);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getSoTimeout,int getSoTimeout(),"[169, 172]","{'A1': [(169, 172)]}",{'A1': 1.0},A1,,"  @Override
  public synchronized int getSoTimeout() throws SocketException {
    return actual.getSoTimeout();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setSendBufferSize,void setSendBufferSize(int),"[174, 177]","{'A1': [(174, 177)]}",{'A1': 1.0},A1,,"  @Override
  public synchronized void setSendBufferSize(int size) throws SocketException {
    actual.setSendBufferSize(size);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getSendBufferSize,int getSendBufferSize(),"[179, 182]","{'A1': [(179, 182)]}",{'A1': 1.0},A1,,"  @Override
  public synchronized int getSendBufferSize() throws SocketException {
    return actual.getSendBufferSize();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setReceiveBufferSize,void setReceiveBufferSize(int),"[184, 187]","{'A1': [(184, 187)]}",{'A1': 1.0},A1,,"  @Override
  public synchronized void setReceiveBufferSize(int size) throws SocketException {
    actual.setReceiveBufferSize(size);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getReceiveBufferSize,int getReceiveBufferSize(),"[189, 192]","{'A1': [(189, 192)]}",{'A1': 1.0},A1,,"  @Override
  public synchronized int getReceiveBufferSize() throws SocketException {
    return actual.getReceiveBufferSize();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setKeepAlive,void setKeepAlive(boolean),"[194, 197]","{'A1': [(194, 197)]}",{'A1': 1.0},A1,,"  @Override
  public void setKeepAlive(boolean on) throws SocketException {
    actual.setKeepAlive(on);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getKeepAlive,boolean getKeepAlive(),"[199, 202]","{'A1': [(199, 202)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getKeepAlive() throws SocketException {
    return actual.getKeepAlive();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setTrafficClass,void setTrafficClass(int),"[204, 207]","{'A1': [(204, 207)]}",{'A1': 1.0},A1,,"  @Override
  public void setTrafficClass(int tc) throws SocketException {
    actual.setTrafficClass(tc);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getTrafficClass,int getTrafficClass(),"[209, 212]","{'A1': [(209, 212)]}",{'A1': 1.0},A1,,"  @Override
  public int getTrafficClass() throws SocketException {
    return actual.getTrafficClass();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setReuseAddress,void setReuseAddress(boolean),"[214, 217]","{'A1': [(214, 217)]}",{'A1': 1.0},A1,,"  @Override
  public void setReuseAddress(boolean on) throws SocketException {
    actual.setReuseAddress(on);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getReuseAddress,boolean getReuseAddress(),"[219, 222]","{'A1': [(219, 222)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getReuseAddress() throws SocketException {
    return actual.getReuseAddress();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,close,void close(),"[224, 227]","{'A1': [(224, 227)]}",{'A1': 1.0},A1,,"  @Override
  public synchronized void close() throws IOException {
    actual.close();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,shutdownInput,void shutdownInput(),"[229, 232]","{'A1': [(229, 232)]}",{'A1': 1.0},A1,,"  @Override
  public void shutdownInput() throws IOException {
    actual.shutdownInput();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,shutdownOutput,void shutdownOutput(),"[234, 237]","{'A1': [(234, 237)]}",{'A1': 1.0},A1,,"  @Override
  public void shutdownOutput() throws IOException {
    actual.shutdownOutput();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,toString,String toString(),"[239, 242]","{'A1': [(239, 242)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return actual.toString();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,isConnected,boolean isConnected(),"[244, 247]","{'A1': [(244, 247)]}",{'A1': 1.0},A1,,"  @Override
  public boolean isConnected() {
    return actual.isConnected();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,isBound,boolean isBound(),"[249, 252]","{'A1': [(249, 252)]}",{'A1': 1.0},A1,,"  @Override
  public boolean isBound() {
    return actual.isBound();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,isClosed,boolean isClosed(),"[254, 257]","{'A1': [(254, 257)]}",{'A1': 1.0},A1,,"  @Override
  public boolean isClosed() {
    return actual.isClosed();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,isInputShutdown,boolean isInputShutdown(),"[259, 262]","{'A1': [(259, 262)]}",{'A1': 1.0},A1,,"  @Override
  public boolean isInputShutdown() {
    return actual.isInputShutdown();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,isOutputShutdown,boolean isOutputShutdown(),"[264, 267]","{'A1': [(264, 267)]}",{'A1': 1.0},A1,,"  @Override
  public boolean isOutputShutdown() {
    return actual.isOutputShutdown();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setPerformancePreferences,"void setPerformancePreferences(int,int,int)","[269, 272]","{'A1': [(269, 272)]}",{'A1': 1.0},A1,,"  @Override
  public void setPerformancePreferences(int connectionTime, int latency, int bandwidth) {
    actual.setPerformancePreferences(connectionTime, latency, bandwidth);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getInputStream,InputStream getInputStream(),"[274, 277]","{'A1': [(274, 277)]}",{'A1': 1.0},A1,,"  @Override
  public InputStream getInputStream() throws IOException {
    return wrapper;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getOutputStream,OutputStream getOutputStream(),"[279, 282]","{'A1': [(279, 282)]}",{'A1': 1.0},A1,,"  @Override
  public OutputStream getOutputStream() throws IOException {
    return actual.getOutputStream();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getSupportedCipherSuites,String[] getSupportedCipherSuites(),"[284, 287]","{'A1': [(284, 287)]}",{'A1': 1.0},A1,,"  @Override
  public String[] getSupportedCipherSuites() {
    return actual.getSupportedCipherSuites();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getEnabledCipherSuites,String[] getEnabledCipherSuites(),"[289, 292]","{'A1': [(289, 292)]}",{'A1': 1.0},A1,,"  @Override
  public String[] getEnabledCipherSuites() {
    return actual.getEnabledCipherSuites();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setEnabledCipherSuites,void setEnabledCipherSuites(String[]),"[294, 297]","{'A1': [(294, 297)]}",{'A1': 1.0},A1,,"  @Override
  public void setEnabledCipherSuites(String[] var1) {
    actual.setEnabledCipherSuites(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getSupportedProtocols,String[] getSupportedProtocols(),"[299, 302]","{'A1': [(299, 302)]}",{'A1': 1.0},A1,,"  @Override
  public String[] getSupportedProtocols() {
    return actual.getSupportedProtocols();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getEnabledProtocols,String[] getEnabledProtocols(),"[304, 307]","{'A1': [(304, 307)]}",{'A1': 1.0},A1,,"  @Override
  public String[] getEnabledProtocols() {
    return actual.getEnabledProtocols();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setEnabledProtocols,void setEnabledProtocols(String[]),"[309, 312]","{'A1': [(309, 312)]}",{'A1': 1.0},A1,,"  @Override
  public void setEnabledProtocols(String[] var1) {
    actual.setEnabledProtocols(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getSession,SSLSession getSession(),"[314, 317]","{'A1': [(314, 317)]}",{'A1': 1.0},A1,,"  @Override
  public SSLSession getSession() {
    return actual.getSession();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getHandshakeSession,SSLSession getHandshakeSession(),"[319, 322]","{'A1': [(319, 322)]}",{'A1': 1.0},A1,,"  @Override
  public SSLSession getHandshakeSession() {
    return actual.getHandshakeSession();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,addHandshakeCompletedListener,void addHandshakeCompletedListener(HandshakeCompletedListener),"[324, 327]","{'A1': [(324, 327)]}",{'A1': 1.0},A1,,"  @Override
  public void addHandshakeCompletedListener(HandshakeCompletedListener var1) {
    actual.addHandshakeCompletedListener(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,removeHandshakeCompletedListener,void removeHandshakeCompletedListener(HandshakeCompletedListener),"[329, 332]","{'A1': [(329, 332)]}",{'A1': 1.0},A1,,"  @Override
  public void removeHandshakeCompletedListener(HandshakeCompletedListener var1) {
    actual.removeHandshakeCompletedListener(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,startHandshake,void startHandshake(),"[334, 337]","{'A1': [(334, 337)]}",{'A1': 1.0},A1,,"  @Override
  public void startHandshake() throws IOException {
    actual.startHandshake();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setUseClientMode,void setUseClientMode(boolean),"[339, 342]","{'A1': [(339, 342)]}",{'A1': 1.0},A1,,"  @Override
  public void setUseClientMode(boolean var1) {
    actual.setUseClientMode(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getUseClientMode,boolean getUseClientMode(),"[344, 347]","{'A1': [(344, 347)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getUseClientMode() {
    return actual.getUseClientMode();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setNeedClientAuth,void setNeedClientAuth(boolean),"[349, 352]","{'A1': [(349, 352)]}",{'A1': 1.0},A1,,"  @Override
  public void setNeedClientAuth(boolean var1) {
    actual.setNeedClientAuth(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getNeedClientAuth,boolean getNeedClientAuth(),"[354, 357]","{'A1': [(354, 357)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getNeedClientAuth() {
    return actual.getNeedClientAuth();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setWantClientAuth,void setWantClientAuth(boolean),"[359, 362]","{'A1': [(359, 362)]}",{'A1': 1.0},A1,,"  @Override
  public void setWantClientAuth(boolean var1) {
    actual.setWantClientAuth(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getWantClientAuth,boolean getWantClientAuth(),"[364, 367]","{'A1': [(364, 367)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getWantClientAuth() {
    return actual.getWantClientAuth();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setEnableSessionCreation,void setEnableSessionCreation(boolean),"[369, 372]","{'A1': [(369, 372)]}",{'A1': 1.0},A1,,"  @Override
  public void setEnableSessionCreation(boolean var1) {
    actual.setEnableSessionCreation(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getEnableSessionCreation,boolean getEnableSessionCreation(),"[374, 377]","{'A1': [(374, 377)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getEnableSessionCreation() {
    return actual.getEnableSessionCreation();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getSSLParameters,SSLParameters getSSLParameters(),"[379, 382]","{'A1': [(379, 382)]}",{'A1': 1.0},A1,,"  @Override
  public SSLParameters getSSLParameters() {
    return actual.getSSLParameters();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setSSLParameters,void setSSLParameters(SSLParameters),"[384, 387]","{'A1': [(384, 387)]}",{'A1': 1.0},A1,,"  @Override
  public void setSSLParameters(SSLParameters var1) {
    actual.setSSLParameters(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getApplicationProtocol,String getApplicationProtocol(),"[389, 392]","{'A1': [(389, 392)]}",{'A1': 1.0},A1,,"  @Override
  public String getApplicationProtocol() {
    return actual.getApplicationProtocol();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getHandshakeApplicationProtocol,String getHandshakeApplicationProtocol(),"[394, 397]","{'A1': [(394, 397)]}",{'A1': 1.0},A1,,"  @Override
  public String getHandshakeApplicationProtocol() {
    return actual.getHandshakeApplicationProtocol();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,setHandshakeApplicationProtocolSelector,"void setHandshakeApplicationProtocolSelector(BiFunction<SSLSocket, List<String>, String>)","[399, 402]","{'A1': [(399, 402)]}",{'A1': 1.0},A1,,"  @Override
  public void setHandshakeApplicationProtocolSelector(BiFunction<SSLSocket, List<String>, String> var1) {
    actual.setHandshakeApplicationProtocolSelector(var1);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SSLSocketWrapper.java,SSLSocketWrapper,getHandshakeApplicationProtocolSelector,"BiFunction<SSLSocket, List<String>, String> getHandshakeApplicationProtocolSelector()","[404, 407]","{'A1': [(404, 407)]}",{'A1': 1.0},A1,,"  @Override
  public BiFunction<SSLSocket, List<String>, String> getHandshakeApplicationProtocolSelector() {
    return actual.getHandshakeApplicationProtocolSelector();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSharding.java,JedisSharding,setProtocol,void setProtocol(JedisClientConfig),"[51, 54]","{'A1': [(51, 54)]}",{'A1': 1.0},A1,,"  private void setProtocol(JedisClientConfig clientConfig) {
    RedisProtocol proto = clientConfig.getRedisProtocol();
    if (proto == RedisProtocol.RESP3) commandObjects.setProtocol(proto);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSharding.java,JedisSharding,pipelined,ShardedPipeline pipelined(),"[56, 59]","{'A1': [(56, 59)]}",{'A1': 1.0},A1,,"  @Override
  public ShardedPipeline pipelined() {
    return new ShardedPipeline((ShardedConnectionProvider) provider);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSharding.java,JedisSharding,transaction,AbstractTransaction transaction(boolean),"[66, 69]","{'A1': [(66, 69)]}",{'A1': 1.0},A1,,"  @Override
  public AbstractTransaction transaction(boolean doMulti) {
    throw new UnsupportedOperationException();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ScanIteration.java,ScanIteration,isNodeCompleted,boolean isNodeCompleted(ScanResult<String>),"[31, 34]","{'A1': [(31, 34)]}",{'A1': 1.0},A1,,"  @Override
  protected boolean isNodeCompleted(ScanResult<String> reply) {
    return reply.isCompleteIteration();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ScanIteration.java,ScanIteration,initCommandArguments,CommandArguments initCommandArguments(),"[36, 39]","{'A1': [(36, 39)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments initCommandArguments() {
    return args.apply(ScanParams.SCAN_POINTER_START);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ScanIteration.java,ScanIteration,nextCommandArguments,CommandArguments nextCommandArguments(ScanResult<String>),"[41, 44]","{'A1': [(41, 44)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments nextCommandArguments(ScanResult<String> lastReply) {
    return args.apply(lastReply.getCursor());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ScanIteration.java,ScanIteration,convertBatchToData,Collection<String> convertBatchToData(ScanResult<String>),"[46, 49]","{'A1': [(46, 49)]}",{'A1': 1.0},A1,,"  @Override
  protected Collection<String> convertBatchToData(ScanResult<String> batch) {
    return batch.getResult();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPooled.java,JedisPooled,getPool,Pool<Connection> getPool(),"[428, 430]","{'A1': [(428, 430)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPooledTest.java,"  public final Pool<Connection> getPool() {
    return ((PooledConnectionProvider) provider).getPool();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPooled.java,JedisPooled,pipelined,Pipeline pipelined(),"[432, 435]","{'A1': [(432, 435)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPooledTest.java,"  @Override
  public Pipeline pipelined() {
    return (Pipeline) super.pipelined();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,exists,Response<Boolean> exists(String),"[38, 41]","{'A1': [(38, 41)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> exists(String key) {
    return appendCommand(commandObjects.exists(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,exists,Response<Long> exists(),"[43, 46]","{'A1': [(43, 46)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> exists(String... keys) {
    return appendCommand(commandObjects.exists(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,persist,Response<Long> persist(String),"[48, 51]","{'A1': [(48, 51)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> persist(String key) {
    return appendCommand(commandObjects.persist(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,type,Response<String> type(String),"[53, 56]","{'A1': [(53, 56)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> type(String key) {
    return appendCommand(commandObjects.type(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,dump,Response<byte[]> dump(String),"[58, 61]","{'A1': [(58, 61)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> dump(String key) {
    return appendCommand(commandObjects.dump(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,restore,"Response<String> restore(String,long,byte[])","[63, 66]","{'A1': [(63, 66)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> restore(String key, long ttl, byte[] serializedValue) {
    return appendCommand(commandObjects.restore(key, ttl, serializedValue));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,restore,"Response<String> restore(String,long,byte[],RestoreParams)","[68, 71]","{'A1': [(68, 71)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> restore(String key, long ttl, byte[] serializedValue, RestoreParams params) {
    return appendCommand(commandObjects.restore(key, ttl, serializedValue, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expire,"Response<Long> expire(String,long)","[73, 76]","{'A1': [(73, 76)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> expire(String key, long seconds) {
    return appendCommand(commandObjects.expire(key, seconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expire,"Response<Long> expire(String,long,ExpiryOption)","[78, 81]","{'A1': [(78, 81)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> expire(String key, long seconds, ExpiryOption expiryOption) {
    return appendCommand(commandObjects.expire(key, seconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpire,"Response<Long> pexpire(String,long)","[83, 86]","{'A1': [(83, 86)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpire(String key, long milliseconds) {
    return appendCommand(commandObjects.pexpire(key, milliseconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpire,"Response<Long> pexpire(String,long,ExpiryOption)","[88, 91]","{'A1': [(88, 91)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpire(String key, long milliseconds, ExpiryOption expiryOption) {
    return appendCommand(commandObjects.pexpire(key, milliseconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expireTime,Response<Long> expireTime(String),"[93, 96]","{'A1': [(93, 96)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> expireTime(String key) {
    return appendCommand(commandObjects.expireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpireTime,Response<Long> pexpireTime(String),"[98, 101]","{'A1': [(98, 101)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpireTime(String key) {
    return appendCommand(commandObjects.pexpireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expireAt,"Response<Long> expireAt(String,long)","[103, 106]","{'A1': [(103, 106)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> expireAt(String key, long unixTime) {
    return appendCommand(commandObjects.expireAt(key, unixTime));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expireAt,"Response<Long> expireAt(String,long,ExpiryOption)","[108, 111]","{'A1': [(108, 111)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> expireAt(String key, long unixTime, ExpiryOption expiryOption) {
    return appendCommand(commandObjects.expireAt(key, unixTime, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpireAt,"Response<Long> pexpireAt(String,long)","[113, 116]","{'A1': [(113, 116)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpireAt(String key, long millisecondsTimestamp) {
    return appendCommand(commandObjects.pexpireAt(key, millisecondsTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpireAt,"Response<Long> pexpireAt(String,long,ExpiryOption)","[118, 121]","{'A1': [(118, 121)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpireAt(String key, long millisecondsTimestamp, ExpiryOption expiryOption) {
    return appendCommand(commandObjects.pexpireAt(key, millisecondsTimestamp, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ttl,Response<Long> ttl(String),"[123, 126]","{'A1': [(123, 126)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> ttl(String key) {
    return appendCommand(commandObjects.ttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pttl,Response<Long> pttl(String),"[128, 131]","{'A1': [(128, 131)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pttl(String key) {
    return appendCommand(commandObjects.pttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,touch,Response<Long> touch(String),"[133, 136]","{'A1': [(133, 136)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> touch(String key) {
    return appendCommand(commandObjects.touch(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,touch,Response<Long> touch(),"[138, 141]","{'A1': [(138, 141)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> touch(String... keys) {
    return appendCommand(commandObjects.touch(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sort,Response<List<String>> sort(String),"[143, 146]","{'A1': [(143, 146)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> sort(String key) {
    return appendCommand(commandObjects.sort(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sort,"Response<Long> sort(String,String)","[148, 151]","{'A1': [(148, 151)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sort(String key, String dstKey) {
    return appendCommand(commandObjects.sort(key, dstKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sort,"Response<List<String>> sort(String,SortingParams)","[153, 156]","{'A1': [(153, 156)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> sort(String key, SortingParams sortingParams) {
    return appendCommand(commandObjects.sort(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sort,"Response<Long> sort(String,SortingParams,String)","[158, 161]","{'A1': [(158, 161)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sort(String key, SortingParams sortingParams, String dstKey) {
    return appendCommand(commandObjects.sort(key, sortingParams, dstKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sortReadonly,"Response<List<String>> sortReadonly(String,SortingParams)","[163, 166]","{'A1': [(163, 166)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> sortReadonly(String key, SortingParams sortingParams) {
    return appendCommand(commandObjects.sortReadonly(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,del,Response<Long> del(String),"[168, 171]","{'A1': [(168, 171)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> del(String key) {
    return appendCommand(commandObjects.del(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,del,Response<Long> del(),"[173, 176]","{'A1': [(173, 176)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> del(String... keys) {
    return appendCommand(commandObjects.del(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,unlink,Response<Long> unlink(String),"[178, 181]","{'A1': [(178, 181)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> unlink(String key) {
    return appendCommand(commandObjects.unlink(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,unlink,Response<Long> unlink(),"[183, 186]","{'A1': [(183, 186)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> unlink(String... keys) {
    return appendCommand(commandObjects.unlink(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,copy,"Response<Boolean> copy(String,String,boolean)","[188, 191]","{'A1': [(188, 191)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> copy(String srcKey, String dstKey, boolean replace) {
    return appendCommand(commandObjects.copy(srcKey, dstKey, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rename,"Response<String> rename(String,String)","[193, 196]","{'A1': [(193, 196)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> rename(String oldkey, String newkey) {
    return appendCommand(commandObjects.rename(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,renamenx,"Response<Long> renamenx(String,String)","[198, 201]","{'A1': [(198, 201)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> renamenx(String oldkey, String newkey) {
    return appendCommand(commandObjects.renamenx(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,memoryUsage,Response<Long> memoryUsage(String),"[203, 206]","{'A1': [(203, 206)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> memoryUsage(String key) {
    return appendCommand(commandObjects.memoryUsage(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,memoryUsage,"Response<Long> memoryUsage(String,int)","[208, 211]","{'A1': [(208, 211)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> memoryUsage(String key, int samples) {
    return appendCommand(commandObjects.memoryUsage(key, samples));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,objectRefcount,Response<Long> objectRefcount(String),"[213, 216]","{'A1': [(213, 216)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> objectRefcount(String key) {
    return appendCommand(commandObjects.objectRefcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,objectEncoding,Response<String> objectEncoding(String),"[218, 221]","{'A1': [(218, 221)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> objectEncoding(String key) {
    return appendCommand(commandObjects.objectEncoding(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,objectIdletime,Response<Long> objectIdletime(String),"[223, 226]","{'A1': [(223, 226)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> objectIdletime(String key) {
    return appendCommand(commandObjects.objectIdletime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,objectFreq,Response<Long> objectFreq(String),"[228, 231]","{'A1': [(228, 231)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> objectFreq(String key) {
    return appendCommand(commandObjects.objectFreq(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,migrate,"Response<String> migrate(String,int,String,int)","[233, 236]","{'A1': [(233, 236)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> migrate(String host, int port, String key, int timeout) {
    return appendCommand(commandObjects.migrate(host, port, key, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,migrate,"Response<String> migrate(String,int,int,MigrateParams)","[238, 241]","{'A1': [(238, 241)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> migrate(String host, int port, int timeout, MigrateParams params, String... keys) {
    return appendCommand(commandObjects.migrate(host, port, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,keys,Response<Set<String>> keys(String),"[243, 246]","{'A1': [(243, 246)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> keys(String pattern) {
    return appendCommand(commandObjects.keys(pattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scan,Response<ScanResult<String>> scan(String),"[248, 251]","{'A1': [(248, 251)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<String>> scan(String cursor) {
    return appendCommand(commandObjects.scan(cursor));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scan,"Response<ScanResult<String>> scan(String,ScanParams)","[253, 256]","{'A1': [(253, 256)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<String>> scan(String cursor, ScanParams params) {
    return appendCommand(commandObjects.scan(cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scan,"Response<ScanResult<String>> scan(String,ScanParams,String)","[258, 261]","{'A1': [(258, 261)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<String>> scan(String cursor, ScanParams params, String type) {
    return appendCommand(commandObjects.scan(cursor, params, type));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,randomKey,Response<String> randomKey(),"[263, 266]","{'A1': [(263, 266)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> randomKey() {
    return appendCommand(commandObjects.randomKey());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,get,Response<String> get(String),"[268, 271]","{'A1': [(268, 271)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> get(String key) {
    return appendCommand(commandObjects.get(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setGet,"Response<String> setGet(String,String)","[273, 276]","{'A1': [(273, 276)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> setGet(String key, String value) {
    return appendCommand(commandObjects.setGet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setGet,"Response<String> setGet(String,String,SetParams)","[278, 281]","{'A1': [(278, 281)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> setGet(String key, String value, SetParams params) {
    return appendCommand(commandObjects.setGet(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getDel,Response<String> getDel(String),"[283, 286]","{'A1': [(283, 286)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> getDel(String key) {
    return appendCommand(commandObjects.getDel(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getEx,"Response<String> getEx(String,GetExParams)","[288, 291]","{'A1': [(288, 291)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> getEx(String key, GetExParams params) {
    return appendCommand(commandObjects.getEx(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setbit,"Response<Boolean> setbit(String,long,boolean)","[293, 296]","{'A1': [(293, 296)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> setbit(String key, long offset, boolean value) {
    return appendCommand(commandObjects.setbit(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getbit,"Response<Boolean> getbit(String,long)","[298, 301]","{'A1': [(298, 301)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> getbit(String key, long offset) {
    return appendCommand(commandObjects.getbit(key, offset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setrange,"Response<Long> setrange(String,long,String)","[303, 306]","{'A1': [(303, 306)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> setrange(String key, long offset, String value) {
    return appendCommand(commandObjects.setrange(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getrange,"Response<String> getrange(String,long,long)","[308, 311]","{'A1': [(308, 311)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> getrange(String key, long startOffset, long endOffset) {
    return appendCommand(commandObjects.getrange(key, startOffset, endOffset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getSet,"Response<String> getSet(String,String)","[316, 320]","{'A1': [(316, 320)]}",{'A1': 1.0},A1,,"  @Deprecated
  @Override
  public Response<String> getSet(String key, String value) {
    return appendCommand(commandObjects.getSet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setnx,"Response<Long> setnx(String,String)","[322, 325]","{'A1': [(322, 325)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> setnx(String key, String value) {
    return appendCommand(commandObjects.setnx(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setex,"Response<String> setex(String,long,String)","[327, 330]","{'A1': [(327, 330)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> setex(String key, long seconds, String value) {
    return appendCommand(commandObjects.setex(key, seconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,psetex,"Response<String> psetex(String,long,String)","[332, 335]","{'A1': [(332, 335)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> psetex(String key, long milliseconds, String value) {
    return appendCommand(commandObjects.psetex(key, milliseconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,mget,Response<List<String>> mget(),"[337, 340]","{'A1': [(337, 340)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> mget(String... keys) {
    return appendCommand(commandObjects.mget(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,mset,Response<String> mset(),"[342, 345]","{'A1': [(342, 345)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> mset(String... keysvalues) {
    return appendCommand(commandObjects.mset(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,msetnx,Response<Long> msetnx(),"[347, 350]","{'A1': [(347, 350)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> msetnx(String... keysvalues) {
    return appendCommand(commandObjects.msetnx(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,incr,Response<Long> incr(String),"[352, 355]","{'A1': [(352, 355)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> incr(String key) {
    return appendCommand(commandObjects.incr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,incrBy,"Response<Long> incrBy(String,long)","[357, 360]","{'A1': [(357, 360)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> incrBy(String key, long increment) {
    return appendCommand(commandObjects.incrBy(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,incrByFloat,"Response<Double> incrByFloat(String,double)","[362, 365]","{'A1': [(362, 365)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> incrByFloat(String key, double increment) {
    return appendCommand(commandObjects.incrByFloat(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,decr,Response<Long> decr(String),"[367, 370]","{'A1': [(367, 370)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> decr(String key) {
    return appendCommand(commandObjects.decr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,decrBy,"Response<Long> decrBy(String,long)","[372, 375]","{'A1': [(372, 375)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> decrBy(String key, long decrement) {
    return appendCommand(commandObjects.decrBy(key, decrement));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,append,"Response<Long> append(String,String)","[377, 380]","{'A1': [(377, 380)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> append(String key, String value) {
    return appendCommand(commandObjects.append(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,substr,"Response<String> substr(String,int,int)","[382, 385]","{'A1': [(382, 385)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> substr(String key, int start, int end) {
    return appendCommand(commandObjects.substr(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,strlen,Response<Long> strlen(String),"[387, 390]","{'A1': [(387, 390)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> strlen(String key) {
    return appendCommand(commandObjects.strlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitcount,Response<Long> bitcount(String),"[392, 395]","{'A1': [(392, 395)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitcount(String key) {
    return appendCommand(commandObjects.bitcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitcount,"Response<Long> bitcount(String,long,long)","[397, 400]","{'A1': [(397, 400)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitcount(String key, long start, long end) {
    return appendCommand(commandObjects.bitcount(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitcount,"Response<Long> bitcount(String,long,long,BitCountOption)","[402, 405]","{'A1': [(402, 405)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitcount(String key, long start, long end, BitCountOption option) {
    return appendCommand(commandObjects.bitcount(key, start, end, option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitpos,"Response<Long> bitpos(String,boolean)","[407, 410]","{'A1': [(407, 410)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitpos(String key, boolean value) {
    return appendCommand(commandObjects.bitpos(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitpos,"Response<Long> bitpos(String,boolean,BitPosParams)","[412, 415]","{'A1': [(412, 415)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitpos(String key, boolean value, BitPosParams params) {
    return appendCommand(commandObjects.bitpos(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitfield,Response<List<Long>> bitfield(String),"[417, 420]","{'A1': [(417, 420)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> bitfield(String key, String... arguments) {
    return appendCommand(commandObjects.bitfield(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitfieldReadonly,Response<List<Long>> bitfieldReadonly(String),"[422, 425]","{'A1': [(422, 425)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> bitfieldReadonly(String key, String... arguments) {
    return appendCommand(commandObjects.bitfieldReadonly(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitop,"Response<Long> bitop(BitOP,String)","[427, 430]","{'A1': [(427, 430)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitop(BitOP op, String destKey, String... srcKeys) {
    return appendCommand(commandObjects.bitop(op, destKey, srcKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lcs,"Response<LCSMatchResult> lcs(String,String,LCSParams)","[432, 435]","{'A1': [(432, 435)]}",{'A1': 1.0},A1,,"  @Override
  public Response<LCSMatchResult> lcs(String keyA, String keyB, LCSParams params) {
    return appendCommand(commandObjects.lcs(keyA, keyB, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,set,"Response<String> set(String,String)","[437, 440]","{'A1': [(437, 440)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> set(String key, String value) {
    return appendCommand(commandObjects.set(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,set,"Response<String> set(String,String,SetParams)","[442, 445]","{'A1': [(442, 445)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> set(String key, String value, SetParams params) {
    return appendCommand(commandObjects.set(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpush,Response<Long> rpush(String),"[447, 451]","{'A1': [(447, 451)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> rpush(String key, String... string) {
    return appendCommand(commandObjects.rpush(key, string));

  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpush,Response<Long> lpush(String),"[453, 456]","{'A1': [(453, 456)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lpush(String key, String... string) {
    return appendCommand(commandObjects.lpush(key, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,llen,Response<Long> llen(String),"[458, 461]","{'A1': [(458, 461)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> llen(String key) {
    return appendCommand(commandObjects.llen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lrange,"Response<List<String>> lrange(String,long,long)","[463, 466]","{'A1': [(463, 466)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> lrange(String key, long start, long stop) {
    return appendCommand(commandObjects.lrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ltrim,"Response<String> ltrim(String,long,long)","[468, 471]","{'A1': [(468, 471)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ltrim(String key, long start, long stop) {
    return appendCommand(commandObjects.ltrim(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lindex,"Response<String> lindex(String,long)","[473, 476]","{'A1': [(473, 476)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> lindex(String key, long index) {
    return appendCommand(commandObjects.lindex(key, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lset,"Response<String> lset(String,long,String)","[478, 481]","{'A1': [(478, 481)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> lset(String key, long index, String value) {
    return appendCommand(commandObjects.lset(key, index, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lrem,"Response<Long> lrem(String,long,String)","[483, 486]","{'A1': [(483, 486)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lrem(String key, long count, String value) {
    return appendCommand(commandObjects.lrem(key, count, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpop,Response<String> lpop(String),"[488, 491]","{'A1': [(488, 491)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> lpop(String key) {
    return appendCommand(commandObjects.lpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpop,"Response<List<String>> lpop(String,int)","[493, 496]","{'A1': [(493, 496)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> lpop(String key, int count) {
    return appendCommand(commandObjects.lpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpos,"Response<Long> lpos(String,String)","[498, 501]","{'A1': [(498, 501)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lpos(String key, String element) {
    return appendCommand(commandObjects.lpos(key, element));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpos,"Response<Long> lpos(String,String,LPosParams)","[503, 506]","{'A1': [(503, 506)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lpos(String key, String element, LPosParams params) {
    return appendCommand(commandObjects.lpos(key, element, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpos,"Response<List<Long>> lpos(String,String,LPosParams,long)","[508, 511]","{'A1': [(508, 511)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> lpos(String key, String element, LPosParams params, long count) {
    return appendCommand(commandObjects.lpos(key, element, params, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpop,Response<String> rpop(String),"[513, 516]","{'A1': [(513, 516)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> rpop(String key) {
    return appendCommand(commandObjects.rpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpop,"Response<List<String>> rpop(String,int)","[518, 521]","{'A1': [(518, 521)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> rpop(String key, int count) {
    return appendCommand(commandObjects.rpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,linsert,"Response<Long> linsert(String,ListPosition,String,String)","[523, 526]","{'A1': [(523, 526)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> linsert(String key, ListPosition where, String pivot, String value) {
    return appendCommand(commandObjects.linsert(key, where, pivot, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpushx,Response<Long> lpushx(String),"[528, 531]","{'A1': [(528, 531)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lpushx(String key, String... strings) {
    return appendCommand(commandObjects.lpushx(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpushx,Response<Long> rpushx(String),"[533, 536]","{'A1': [(533, 536)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> rpushx(String key, String... strings) {
    return appendCommand(commandObjects.rpushx(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blpop,"Response<List<String>> blpop(int,String)","[538, 541]","{'A1': [(538, 541)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> blpop(int timeout, String key) {
    return appendCommand(commandObjects.blpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blpop,"Response<KeyValue<String, String>> blpop(double,String)","[543, 546]","{'A1': [(543, 546)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, String>> blpop(double timeout, String key) {
    return appendCommand(commandObjects.blpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,brpop,"Response<List<String>> brpop(int,String)","[548, 551]","{'A1': [(548, 551)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> brpop(int timeout, String key) {
    return appendCommand(commandObjects.brpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,brpop,"Response<KeyValue<String, String>> brpop(double,String)","[553, 556]","{'A1': [(553, 556)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, String>> brpop(double timeout, String key) {
    return appendCommand(commandObjects.brpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blpop,Response<List<String>> blpop(int),"[558, 561]","{'A1': [(558, 561)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> blpop(int timeout, String... keys) {
    return appendCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blpop,"Response<KeyValue<String, String>> blpop(double)","[563, 566]","{'A1': [(563, 566)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, String>> blpop(double timeout, String... keys) {
    return appendCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,brpop,Response<List<String>> brpop(int),"[568, 571]","{'A1': [(568, 571)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> brpop(int timeout, String... keys) {
    return appendCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,brpop,"Response<KeyValue<String, String>> brpop(double)","[573, 576]","{'A1': [(573, 576)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, String>> brpop(double timeout, String... keys) {
    return appendCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpoplpush,"Response<String> rpoplpush(String,String)","[578, 581]","{'A1': [(578, 581)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> rpoplpush(String srcKey, String dstKey) {
    return appendCommand(commandObjects.rpoplpush(srcKey, dstKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,brpoplpush,"Response<String> brpoplpush(String,String,int)","[583, 586]","{'A1': [(583, 586)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> brpoplpush(String source, String destination, int timeout) {
    return appendCommand(commandObjects.brpoplpush(source, destination, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lmove,"Response<String> lmove(String,String,ListDirection,ListDirection)","[588, 591]","{'A1': [(588, 591)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> lmove(String srcKey, String dstKey, ListDirection from, ListDirection to) {
    return appendCommand(commandObjects.lmove(srcKey, dstKey, from, to));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blmove,"Response<String> blmove(String,String,ListDirection,ListDirection,double)","[593, 596]","{'A1': [(593, 596)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> blmove(String srcKey, String dstKey, ListDirection from, ListDirection to, double timeout) {
    return appendCommand(commandObjects.blmove(srcKey, dstKey, from, to, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lmpop,"Response<KeyValue<String, List<String>>> lmpop(ListDirection)","[598, 601]","{'A1': [(598, 601)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, List<String>>> lmpop(ListDirection direction, String... keys) {
    return appendCommand(commandObjects.lmpop(direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lmpop,"Response<KeyValue<String, List<String>>> lmpop(ListDirection,int)","[603, 606]","{'A1': [(603, 606)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, List<String>>> lmpop(ListDirection direction, int count, String... keys) {
    return appendCommand(commandObjects.lmpop(direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blmpop,"Response<KeyValue<String, List<String>>> blmpop(double,ListDirection)","[608, 611]","{'A1': [(608, 611)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, List<String>>> blmpop(double timeout, ListDirection direction, String... keys) {
    return appendCommand(commandObjects.blmpop(timeout, direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blmpop,"Response<KeyValue<String, List<String>>> blmpop(double,ListDirection,int)","[613, 616]","{'A1': [(613, 616)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, List<String>>> blmpop(double timeout, ListDirection direction, int count, String... keys) {
    return appendCommand(commandObjects.blmpop(timeout, direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hset,"Response<Long> hset(String,String,String)","[618, 621]","{'A1': [(618, 621)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hset(String key, String field, String value) {
    return appendCommand(commandObjects.hset(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hset,"Response<Long> hset(String,Map<String, String>)","[623, 626]","{'A1': [(623, 626)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hset(String key, Map<String, String> hash) {
    return appendCommand(commandObjects.hset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hsetex,"Response<Long> hsetex(String,HSetExParams,String,String)","[642, 645]","{'A35': [(642, 645)]}",{'A35': 1.0},A35,,"  @Override
  public Response<Long> hsetex(String key, HSetExParams params, String field, String value) {
    return appendCommand(commandObjects.hsetex(key, params, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hsetex,"Response<Long> hsetex(String,HSetExParams,Map<String, String>)","[660, 663]","{'A35': [(660, 663)]}",{'A35': 1.0},A35,,"  @Override
  public Response<Long> hsetex(String key, HSetExParams params, Map<String, String> hash) {
    return appendCommand(commandObjects.hsetex(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hget,"Response<String> hget(String,String)","[665, 668]","{'A1': [(665, 668)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> hget(String key, String field) {
    return appendCommand(commandObjects.hget(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hgetex,"Response<List<String>> hgetex(String,HGetExParams)","[681, 684]","{'A35': [(681, 684)]}",{'A35': 1.0},A35,,"  @Override
  public Response<List<String>> hgetex(String key, HGetExParams params, String... fields) {
    return appendCommand(commandObjects.hgetex(key, params, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hgetdel,Response<List<String>> hgetdel(String),"[694, 697]","{'A35': [(694, 697)]}",{'A35': 1.0},A35,,"  @Override
  public Response<List<String>> hgetdel(String key, String... fields) {
    return appendCommand(commandObjects.hgetdel(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hsetnx,"Response<Long> hsetnx(String,String,String)","[699, 702]","{'A1': [(699, 702)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hsetnx(String key, String field, String value) {
    return appendCommand(commandObjects.hsetnx(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hmset,"Response<String> hmset(String,Map<String, String>)","[704, 707]","{'A1': [(704, 707)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> hmset(String key, Map<String, String> hash) {
    return appendCommand(commandObjects.hmset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hmget,Response<List<String>> hmget(String),"[709, 712]","{'A1': [(709, 712)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> hmget(String key, String... fields) {
    return appendCommand(commandObjects.hmget(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hincrBy,"Response<Long> hincrBy(String,String,long)","[714, 717]","{'A1': [(714, 717)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hincrBy(String key, String field, long value) {
    return appendCommand(commandObjects.hincrBy(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hincrByFloat,"Response<Double> hincrByFloat(String,String,double)","[719, 722]","{'A1': [(719, 722)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> hincrByFloat(String key, String field, double value) {
    return appendCommand(commandObjects.hincrByFloat(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexists,"Response<Boolean> hexists(String,String)","[724, 727]","{'A1': [(724, 727)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> hexists(String key, String field) {
    return appendCommand(commandObjects.hexists(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hdel,Response<Long> hdel(String),"[729, 732]","{'A1': [(729, 732)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hdel(String key, String... field) {
    return appendCommand(commandObjects.hdel(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hlen,Response<Long> hlen(String),"[734, 737]","{'A1': [(734, 737)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hlen(String key) {
    return appendCommand(commandObjects.hlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hkeys,Response<Set<String>> hkeys(String),"[739, 742]","{'A1': [(739, 742)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> hkeys(String key) {
    return appendCommand(commandObjects.hkeys(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hvals,Response<List<String>> hvals(String),"[744, 747]","{'A1': [(744, 747)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> hvals(String key) {
    return appendCommand(commandObjects.hvals(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hgetAll,"Response<Map<String, String>> hgetAll(String)","[749, 752]","{'A1': [(749, 752)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, String>> hgetAll(String key) {
    return appendCommand(commandObjects.hgetAll(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hrandfield,Response<String> hrandfield(String),"[754, 757]","{'A1': [(754, 757)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> hrandfield(String key) {
    return appendCommand(commandObjects.hrandfield(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hrandfield,"Response<List<String>> hrandfield(String,long)","[759, 762]","{'A1': [(759, 762)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> hrandfield(String key, long count) {
    return appendCommand(commandObjects.hrandfield(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hrandfieldWithValues,"Response<List<Map.Entry<String, String>>> hrandfieldWithValues(String,long)","[764, 767]","{'A1': [(764, 767)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Map.Entry<String, String>>> hrandfieldWithValues(String key, long count) {
    return appendCommand(commandObjects.hrandfieldWithValues(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hscan,"Response<ScanResult<Map.Entry<String, String>>> hscan(String,String,ScanParams)","[769, 772]","{'A1': [(769, 772)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<Map.Entry<String, String>>> hscan(String key, String cursor, ScanParams params) {
    return appendCommand(commandObjects.hscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hscanNoValues,"Response<ScanResult<String>> hscanNoValues(String,String,ScanParams)","[774, 777]","{'A1': [(774, 777)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<String>> hscanNoValues(String key, String cursor, ScanParams params) {
    return appendCommand(commandObjects.hscanNoValues(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hstrlen,"Response<Long> hstrlen(String,String)","[779, 782]","{'A1': [(779, 782)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hstrlen(String key, String field) {
    return appendCommand(commandObjects.hstrlen(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpire,"Response<List<Long>> hexpire(String,long)","[784, 787]","{'A1': [(784, 787)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpire(String key, long seconds, String... fields) {
    return appendCommand(commandObjects.hexpire(key, seconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpire,"Response<List<Long>> hexpire(String,long,ExpiryOption)","[789, 792]","{'A1': [(789, 792)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpire(String key, long seconds, ExpiryOption condition, String... fields) {
    return appendCommand(commandObjects.hexpire(key, seconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpire,"Response<List<Long>> hpexpire(String,long)","[794, 797]","{'A1': [(794, 797)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpire(String key, long milliseconds, String... fields) {
    return appendCommand(commandObjects.hpexpire(key, milliseconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpire,"Response<List<Long>> hpexpire(String,long,ExpiryOption)","[799, 802]","{'A1': [(799, 802)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpire(String key, long milliseconds, ExpiryOption condition, String... fields) {
    return appendCommand(commandObjects.hpexpire(key, milliseconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpireAt,"Response<List<Long>> hexpireAt(String,long)","[804, 807]","{'A1': [(804, 807)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpireAt(String key, long unixTimeSeconds, String... fields) {
    return appendCommand(commandObjects.hexpireAt(key, unixTimeSeconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpireAt,"Response<List<Long>> hexpireAt(String,long,ExpiryOption)","[809, 812]","{'A1': [(809, 812)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpireAt(String key, long unixTimeSeconds, ExpiryOption condition, String... fields) {
    return appendCommand(commandObjects.hexpireAt(key, unixTimeSeconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpireAt,"Response<List<Long>> hpexpireAt(String,long)","[814, 817]","{'A1': [(814, 817)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpireAt(String key, long unixTimeMillis, String... fields) {
    return appendCommand(commandObjects.hpexpireAt(key, unixTimeMillis, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpireAt,"Response<List<Long>> hpexpireAt(String,long,ExpiryOption)","[819, 822]","{'A1': [(819, 822)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpireAt(String key, long unixTimeMillis, ExpiryOption condition, String... fields) {
    return appendCommand(commandObjects.hpexpireAt(key, unixTimeMillis, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpireTime,Response<List<Long>> hexpireTime(String),"[824, 827]","{'A1': [(824, 827)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpireTime(String key, String... fields) {
    return appendCommand(commandObjects.hexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpireTime,Response<List<Long>> hpexpireTime(String),"[829, 832]","{'A1': [(829, 832)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpireTime(String key, String... fields) {
    return appendCommand(commandObjects.hpexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,httl,Response<List<Long>> httl(String),"[834, 837]","{'A1': [(834, 837)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> httl(String key, String... fields) {
    return appendCommand(commandObjects.httl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpttl,Response<List<Long>> hpttl(String),"[839, 842]","{'A1': [(839, 842)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpttl(String key, String... fields) {
    return appendCommand(commandObjects.hpttl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpersist,Response<List<Long>> hpersist(String),"[844, 847]","{'A1': [(844, 847)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpersist(String key, String... fields) {
    return appendCommand(commandObjects.hpersist(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sadd,Response<Long> sadd(String),"[849, 852]","{'A1': [(849, 852)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sadd(String key, String... members) {
    return appendCommand(commandObjects.sadd(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,smembers,Response<Set<String>> smembers(String),"[854, 857]","{'A1': [(854, 857)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> smembers(String key) {
    return appendCommand(commandObjects.smembers(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,srem,Response<Long> srem(String),"[859, 862]","{'A1': [(859, 862)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> srem(String key, String... members) {
    return appendCommand(commandObjects.srem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,spop,Response<String> spop(String),"[864, 867]","{'A1': [(864, 867)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> spop(String key) {
    return appendCommand(commandObjects.spop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,spop,"Response<Set<String>> spop(String,long)","[869, 872]","{'A1': [(869, 872)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> spop(String key, long count) {
    return appendCommand(commandObjects.spop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scard,Response<Long> scard(String),"[874, 877]","{'A1': [(874, 877)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> scard(String key) {
    return appendCommand(commandObjects.scard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sismember,"Response<Boolean> sismember(String,String)","[879, 882]","{'A1': [(879, 882)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> sismember(String key, String member) {
    return appendCommand(commandObjects.sismember(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,smismember,Response<List<Boolean>> smismember(String),"[884, 887]","{'A1': [(884, 887)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> smismember(String key, String... members) {
    return appendCommand(commandObjects.smismember(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,srandmember,Response<String> srandmember(String),"[889, 892]","{'A1': [(889, 892)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> srandmember(String key) {
    return appendCommand(commandObjects.srandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,srandmember,"Response<List<String>> srandmember(String,int)","[894, 897]","{'A1': [(894, 897)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> srandmember(String key, int count) {
    return appendCommand(commandObjects.srandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sscan,"Response<ScanResult<String>> sscan(String,String,ScanParams)","[899, 902]","{'A1': [(899, 902)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<String>> sscan(String key, String cursor, ScanParams params) {
    return appendCommand(commandObjects.sscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sdiff,Response<Set<String>> sdiff(),"[904, 907]","{'A1': [(904, 907)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> sdiff(String... keys) {
    return appendCommand(commandObjects.sdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sdiffstore,Response<Long> sdiffstore(String),"[909, 912]","{'A1': [(909, 909), (911, 912)], 'A40': [(910, 910)]}","{'A1': 0.75, 'A40': 0.25}",A1,,"  @Override
  public Response<Long> sdiffstore(String dstKey, String... keys) {
    return appendCommand(commandObjects.sdiffstore(dstKey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sinter,Response<Set<String>> sinter(),"[914, 917]","{'A1': [(914, 917)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> sinter(String... keys) {
    return appendCommand(commandObjects.sinter(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sinterstore,Response<Long> sinterstore(String),"[919, 922]","{'A1': [(919, 922)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sinterstore(String dstKey, String... keys) {
    return appendCommand(commandObjects.sinterstore(dstKey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sintercard,Response<Long> sintercard(),"[924, 927]","{'A1': [(924, 927)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sintercard(String... keys) {
    return appendCommand(commandObjects.sintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sintercard,Response<Long> sintercard(int),"[929, 932]","{'A1': [(929, 932)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sintercard(int limit, String... keys) {
    return appendCommand(commandObjects.sintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sunion,Response<Set<String>> sunion(),"[934, 937]","{'A1': [(934, 937)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> sunion(String... keys) {
    return appendCommand(commandObjects.sunion(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sunionstore,Response<Long> sunionstore(String),"[939, 942]","{'A1': [(939, 942)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sunionstore(String dstKey, String... keys) {
    return appendCommand(commandObjects.sunionstore(dstKey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,smove,"Response<Long> smove(String,String,String)","[944, 947]","{'A1': [(944, 947)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> smove(String srcKey, String dstKey, String member) {
    return appendCommand(commandObjects.smove(srcKey, dstKey, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zadd,"Response<Long> zadd(String,double,String)","[949, 952]","{'A1': [(949, 952)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zadd(String key, double score, String member) {
    return appendCommand(commandObjects.zadd(key, score, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zadd,"Response<Long> zadd(String,double,String,ZAddParams)","[954, 957]","{'A1': [(954, 957)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zadd(String key, double score, String member, ZAddParams params) {
    return appendCommand(commandObjects.zadd(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zadd,"Response<Long> zadd(String,Map<String, Double>)","[959, 962]","{'A1': [(959, 962)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zadd(String key, Map<String, Double> scoreMembers) {
    return appendCommand(commandObjects.zadd(key, scoreMembers));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zadd,"Response<Long> zadd(String,Map<String, Double>,ZAddParams)","[964, 967]","{'A1': [(964, 967)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zadd(String key, Map<String, Double> scoreMembers, ZAddParams params) {
    return appendCommand(commandObjects.zadd(key, scoreMembers, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zaddIncr,"Response<Double> zaddIncr(String,double,String,ZAddParams)","[969, 972]","{'A1': [(969, 972)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> zaddIncr(String key, double score, String member, ZAddParams params) {
    return appendCommand(commandObjects.zaddIncr(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrem,Response<Long> zrem(String),"[974, 977]","{'A1': [(974, 977)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zrem(String key, String... members) {
    return appendCommand(commandObjects.zrem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zincrby,"Response<Double> zincrby(String,double,String)","[979, 982]","{'A1': [(979, 982)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> zincrby(String key, double increment, String member) {
    return appendCommand(commandObjects.zincrby(key, increment, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zincrby,"Response<Double> zincrby(String,double,String,ZIncrByParams)","[984, 987]","{'A1': [(984, 987)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> zincrby(String key, double increment, String member, ZIncrByParams params) {
    return appendCommand(commandObjects.zincrby(key, increment, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrank,"Response<Long> zrank(String,String)","[989, 992]","{'A1': [(989, 992)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zrank(String key, String member) {
    return appendCommand(commandObjects.zrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrank,"Response<Long> zrevrank(String,String)","[994, 997]","{'A1': [(994, 997)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zrevrank(String key, String member) {
    return appendCommand(commandObjects.zrevrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrankWithScore,"Response<KeyValue<Long, Double>> zrankWithScore(String,String)","[999, 1002]","{'A1': [(999, 1002)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<Long, Double>> zrankWithScore(String key, String member) {
    return appendCommand(commandObjects.zrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrankWithScore,"Response<KeyValue<Long, Double>> zrevrankWithScore(String,String)","[1004, 1007]","{'A1': [(1004, 1007)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<Long, Double>> zrevrankWithScore(String key, String member) {
    return appendCommand(commandObjects.zrevrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrange,"Response<List<String>> zrange(String,long,long)","[1009, 1012]","{'A1': [(1009, 1012)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrange(String key, long start, long stop) {
    return appendCommand(commandObjects.zrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrange,"Response<List<String>> zrevrange(String,long,long)","[1014, 1017]","{'A1': [(1014, 1017)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrevrange(String key, long start, long stop) {
    return appendCommand(commandObjects.zrevrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeWithScores,"Response<List<Tuple>> zrangeWithScores(String,long,long)","[1019, 1022]","{'A1': [(1019, 1022)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeWithScores(String key, long start, long stop) {
    return appendCommand(commandObjects.zrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeWithScores,"Response<List<Tuple>> zrevrangeWithScores(String,long,long)","[1024, 1027]","{'A1': [(1024, 1027)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeWithScores(String key, long start, long stop) {
    return appendCommand(commandObjects.zrevrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrandmember,Response<String> zrandmember(String),"[1029, 1032]","{'A1': [(1029, 1032)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> zrandmember(String key) {
    return appendCommand(commandObjects.zrandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrandmember,"Response<List<String>> zrandmember(String,long)","[1034, 1037]","{'A1': [(1034, 1037)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrandmember(String key, long count) {
    return appendCommand(commandObjects.zrandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrandmemberWithScores,"Response<List<Tuple>> zrandmemberWithScores(String,long)","[1039, 1042]","{'A1': [(1039, 1042)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrandmemberWithScores(String key, long count) {
    return appendCommand(commandObjects.zrandmemberWithScores(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zcard,Response<Long> zcard(String),"[1044, 1047]","{'A1': [(1044, 1047)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zcard(String key) {
    return appendCommand(commandObjects.zcard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zscore,"Response<Double> zscore(String,String)","[1049, 1052]","{'A1': [(1049, 1052)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> zscore(String key, String member) {
    return appendCommand(commandObjects.zscore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zmscore,Response<List<Double>> zmscore(String),"[1054, 1057]","{'A1': [(1054, 1057)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Double>> zmscore(String key, String... members) {
    return appendCommand(commandObjects.zmscore(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zpopmax,Response<Tuple> zpopmax(String),"[1059, 1062]","{'A1': [(1059, 1062)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Tuple> zpopmax(String key) {
    return appendCommand(commandObjects.zpopmax(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zpopmax,"Response<List<Tuple>> zpopmax(String,int)","[1064, 1067]","{'A1': [(1064, 1067)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zpopmax(String key, int count) {
    return appendCommand(commandObjects.zpopmax(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zpopmin,Response<Tuple> zpopmin(String),"[1069, 1072]","{'A1': [(1069, 1072)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Tuple> zpopmin(String key) {
    return appendCommand(commandObjects.zpopmin(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zpopmin,"Response<List<Tuple>> zpopmin(String,int)","[1074, 1077]","{'A1': [(1074, 1077)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zpopmin(String key, int count) {
    return appendCommand(commandObjects.zpopmin(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zcount,"Response<Long> zcount(String,double,double)","[1079, 1082]","{'A1': [(1079, 1082)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zcount(String key, double min, double max) {
    return appendCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zcount,"Response<Long> zcount(String,String,String)","[1084, 1087]","{'A1': [(1084, 1087)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zcount(String key, String min, String max) {
    return appendCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScore,"Response<List<String>> zrangeByScore(String,double,double)","[1089, 1092]","{'A1': [(1089, 1092)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrangeByScore(String key, double min, double max) {
    return appendCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScore,"Response<List<String>> zrangeByScore(String,String,String)","[1094, 1097]","{'A1': [(1094, 1097)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrangeByScore(String key, String min, String max) {
    return appendCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScore,"Response<List<String>> zrevrangeByScore(String,double,double)","[1099, 1102]","{'A1': [(1099, 1102)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrevrangeByScore(String key, double max, double min) {
    return appendCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScore,"Response<List<String>> zrangeByScore(String,double,double,int,int)","[1104, 1107]","{'A1': [(1104, 1107)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrangeByScore(String key, double min, double max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScore,"Response<List<String>> zrevrangeByScore(String,String,String)","[1109, 1112]","{'A1': [(1109, 1112)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrevrangeByScore(String key, String max, String min) {
    return appendCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScore,"Response<List<String>> zrangeByScore(String,String,String,int,int)","[1114, 1117]","{'A1': [(1114, 1117)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrangeByScore(String key, String min, String max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScore,"Response<List<String>> zrevrangeByScore(String,double,double,int,int)","[1119, 1122]","{'A1': [(1119, 1122)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrevrangeByScore(String key, double max, double min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScoreWithScores,"Response<List<Tuple>> zrangeByScoreWithScores(String,double,double)","[1124, 1127]","{'A1': [(1124, 1127)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeByScoreWithScores(String key, double min, double max) {
    return appendCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScoreWithScores,"Response<List<Tuple>> zrevrangeByScoreWithScores(String,double,double)","[1129, 1132]","{'A1': [(1129, 1132)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeByScoreWithScores(String key, double max, double min) {
    return appendCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScoreWithScores,"Response<List<Tuple>> zrangeByScoreWithScores(String,double,double,int,int)","[1134, 1137]","{'A1': [(1134, 1137)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeByScoreWithScores(String key, double min, double max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScore,"Response<List<String>> zrevrangeByScore(String,String,String,int,int)","[1139, 1142]","{'A1': [(1139, 1142)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrevrangeByScore(String key, String max, String min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScoreWithScores,"Response<List<Tuple>> zrangeByScoreWithScores(String,String,String)","[1144, 1147]","{'A1': [(1144, 1147)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeByScoreWithScores(String key, String min, String max) {
    return appendCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScoreWithScores,"Response<List<Tuple>> zrevrangeByScoreWithScores(String,String,String)","[1149, 1152]","{'A1': [(1149, 1152)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeByScoreWithScores(String key, String max, String min) {
    return appendCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScoreWithScores,"Response<List<Tuple>> zrangeByScoreWithScores(String,String,String,int,int)","[1154, 1157]","{'A1': [(1154, 1157)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeByScoreWithScores(String key, String min, String max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScoreWithScores,"Response<List<Tuple>> zrevrangeByScoreWithScores(String,double,double,int,int)","[1159, 1162]","{'A1': [(1159, 1162)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeByScoreWithScores(String key, double max, double min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScoreWithScores,"Response<List<Tuple>> zrevrangeByScoreWithScores(String,String,String,int,int)","[1164, 1167]","{'A1': [(1164, 1167)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeByScoreWithScores(String key, String max, String min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrange,"Response<List<String>> zrange(String,ZRangeParams)","[1169, 1172]","{'A1': [(1169, 1172)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrange(String key, ZRangeParams zRangeParams) {
    return appendCommand(commandObjects.zrange(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeWithScores,"Response<List<Tuple>> zrangeWithScores(String,ZRangeParams)","[1174, 1177]","{'A1': [(1174, 1177)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeWithScores(String key, ZRangeParams zRangeParams) {
    return appendCommand(commandObjects.zrangeWithScores(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangestore,"Response<Long> zrangestore(String,String,ZRangeParams)","[1179, 1182]","{'A1': [(1179, 1182)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zrangestore(String dest, String src, ZRangeParams zRangeParams) {
    return appendCommand(commandObjects.zrangestore(dest, src, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zremrangeByRank,"Response<Long> zremrangeByRank(String,long,long)","[1184, 1187]","{'A1': [(1184, 1187)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zremrangeByRank(String key, long start, long stop) {
    return appendCommand(commandObjects.zremrangeByRank(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zremrangeByScore,"Response<Long> zremrangeByScore(String,double,double)","[1189, 1192]","{'A1': [(1189, 1192)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zremrangeByScore(String key, double min, double max) {
    return appendCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zremrangeByScore,"Response<Long> zremrangeByScore(String,String,String)","[1194, 1197]","{'A1': [(1194, 1197)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zremrangeByScore(String key, String min, String max) {
    return appendCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zlexcount,"Response<Long> zlexcount(String,String,String)","[1199, 1202]","{'A1': [(1199, 1202)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zlexcount(String key, String min, String max) {
    return appendCommand(commandObjects.zlexcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByLex,"Response<List<String>> zrangeByLex(String,String,String)","[1204, 1207]","{'A1': [(1204, 1207)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrangeByLex(String key, String min, String max) {
    return appendCommand(commandObjects.zrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByLex,"Response<List<String>> zrangeByLex(String,String,String,int,int)","[1209, 1212]","{'A1': [(1209, 1212)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrangeByLex(String key, String min, String max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByLex(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByLex,"Response<List<String>> zrevrangeByLex(String,String,String)","[1214, 1217]","{'A1': [(1214, 1217)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrevrangeByLex(String key, String max, String min) {
    return appendCommand(commandObjects.zrevrangeByLex(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByLex,"Response<List<String>> zrevrangeByLex(String,String,String,int,int)","[1219, 1222]","{'A1': [(1219, 1222)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zrevrangeByLex(String key, String max, String min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByLex(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zremrangeByLex,"Response<Long> zremrangeByLex(String,String,String)","[1224, 1227]","{'A1': [(1224, 1227)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zremrangeByLex(String key, String min, String max) {
    return appendCommand(commandObjects.zremrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zscan,"Response<ScanResult<Tuple>> zscan(String,String,ScanParams)","[1229, 1232]","{'A1': [(1229, 1232)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<Tuple>> zscan(String key, String cursor, ScanParams params) {
    return appendCommand(commandObjects.zscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bzpopmax,"Response<KeyValue<String, Tuple>> bzpopmax(double)","[1234, 1237]","{'A1': [(1234, 1237)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, Tuple>> bzpopmax(double timeout, String... keys) {
    return appendCommand(commandObjects.bzpopmax(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bzpopmin,"Response<KeyValue<String, Tuple>> bzpopmin(double)","[1239, 1242]","{'A1': [(1239, 1242)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, Tuple>> bzpopmin(double timeout, String... keys) {
    return appendCommand(commandObjects.bzpopmin(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zmpop,"Response<KeyValue<String, List<Tuple>>> zmpop(SortedSetOption)","[1244, 1247]","{'A1': [(1244, 1247)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, List<Tuple>>> zmpop(SortedSetOption option, String... keys) {
    return appendCommand(commandObjects.zmpop(option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zmpop,"Response<KeyValue<String, List<Tuple>>> zmpop(SortedSetOption,int)","[1249, 1252]","{'A1': [(1249, 1252)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, List<Tuple>>> zmpop(SortedSetOption option, int count, String... keys) {
    return appendCommand(commandObjects.zmpop(option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bzmpop,"Response<KeyValue<String, List<Tuple>>> bzmpop(double,SortedSetOption)","[1254, 1257]","{'A1': [(1254, 1257)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, List<Tuple>>> bzmpop(double timeout, SortedSetOption option, String... keys) {
    return appendCommand(commandObjects.bzmpop(timeout, option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bzmpop,"Response<KeyValue<String, List<Tuple>>> bzmpop(double,SortedSetOption,int)","[1259, 1262]","{'A1': [(1259, 1262)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<String, List<Tuple>>> bzmpop(double timeout, SortedSetOption option, int count, String... keys) {
    return appendCommand(commandObjects.bzmpop(timeout, option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zdiff,Response<List<String>> zdiff(),"[1264, 1267]","{'A1': [(1264, 1267)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zdiff(String... keys) {
    return appendCommand(commandObjects.zdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zdiffWithScores,Response<List<Tuple>> zdiffWithScores(),"[1269, 1272]","{'A1': [(1269, 1272)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zdiffWithScores(String... keys) {
    return appendCommand(commandObjects.zdiffWithScores(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zdiffStore,Response<Long> zdiffStore(String),"[1274, 1278]","{'A1': [(1274, 1278)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Response<Long> zdiffStore(String dstKey, String... keys) {
    return appendCommand(commandObjects.zdiffStore(dstKey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zdiffstore,Response<Long> zdiffstore(String),"[1280, 1283]","{'A1': [(1280, 1283)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zdiffstore(String dstKey, String... keys) {
    return appendCommand(commandObjects.zdiffstore(dstKey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zinterstore,Response<Long> zinterstore(String),"[1285, 1288]","{'A1': [(1285, 1288)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zinterstore(String dstKey, String... sets) {
    return appendCommand(commandObjects.zinterstore(dstKey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zinterstore,"Response<Long> zinterstore(String,ZParams)","[1290, 1293]","{'A1': [(1290, 1293)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zinterstore(String dstKey, ZParams params, String... sets) {
    return appendCommand(commandObjects.zinterstore(dstKey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zinter,Response<List<String>> zinter(ZParams),"[1295, 1298]","{'A1': [(1295, 1298)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zinter(ZParams params, String... keys) {
    return appendCommand(commandObjects.zinter(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zinterWithScores,Response<List<Tuple>> zinterWithScores(ZParams),"[1300, 1303]","{'A1': [(1300, 1303)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zinterWithScores(ZParams params, String... keys) {
    return appendCommand(commandObjects.zinterWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zintercard,Response<Long> zintercard(),"[1305, 1308]","{'A1': [(1305, 1308)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zintercard(String... keys) {
    return appendCommand(commandObjects.zintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zintercard,Response<Long> zintercard(long),"[1310, 1313]","{'A1': [(1310, 1313)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zintercard(long limit, String... keys) {
    return appendCommand(commandObjects.zintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zunion,Response<List<String>> zunion(ZParams),"[1315, 1318]","{'A1': [(1315, 1318)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> zunion(ZParams params, String... keys) {
    return appendCommand(commandObjects.zunion(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zunionWithScores,Response<List<Tuple>> zunionWithScores(ZParams),"[1320, 1323]","{'A1': [(1320, 1323)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zunionWithScores(ZParams params, String... keys) {
    return appendCommand(commandObjects.zunionWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zunionstore,Response<Long> zunionstore(String),"[1325, 1328]","{'A1': [(1325, 1328)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zunionstore(String dstKey, String... sets) {
    return appendCommand(commandObjects.zunionstore(dstKey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zunionstore,"Response<Long> zunionstore(String,ZParams)","[1330, 1333]","{'A1': [(1330, 1333)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zunionstore(String dstKey, ZParams params, String... sets) {
    return appendCommand(commandObjects.zunionstore(dstKey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geoadd,"Response<Long> geoadd(String,double,double,String)","[1335, 1338]","{'A1': [(1335, 1338)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geoadd(String key, double longitude, double latitude, String member) {
    return appendCommand(commandObjects.geoadd(key, longitude, latitude, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geoadd,"Response<Long> geoadd(String,Map<String, GeoCoordinate>)","[1340, 1343]","{'A1': [(1340, 1343)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geoadd(String key, Map<String, GeoCoordinate> memberCoordinateMap) {
    return appendCommand(commandObjects.geoadd(key, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geoadd,"Response<Long> geoadd(String,GeoAddParams,Map<String, GeoCoordinate>)","[1345, 1348]","{'A1': [(1345, 1348)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geoadd(String key, GeoAddParams params, Map<String, GeoCoordinate> memberCoordinateMap) {
    return appendCommand(commandObjects.geoadd(key, params, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geodist,"Response<Double> geodist(String,String,String)","[1350, 1353]","{'A1': [(1350, 1353)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> geodist(String key, String member1, String member2) {
    return appendCommand(commandObjects.geodist(key, member1, member2));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geodist,"Response<Double> geodist(String,String,String,GeoUnit)","[1355, 1358]","{'A1': [(1355, 1358)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> geodist(String key, String member1, String member2, GeoUnit unit) {
    return appendCommand(commandObjects.geodist(key, member1, member2, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geohash,Response<List<String>> geohash(String),"[1360, 1363]","{'A1': [(1360, 1363)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> geohash(String key, String... members) {
    return appendCommand(commandObjects.geohash(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geopos,Response<List<GeoCoordinate>> geopos(String),"[1365, 1368]","{'A1': [(1365, 1368)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoCoordinate>> geopos(String key, String... members) {
    return appendCommand(commandObjects.geopos(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadius,"Response<List<GeoRadiusResponse>> georadius(String,double,double,double,GeoUnit)","[1370, 1373]","{'A1': [(1370, 1373)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadius(String key, double longitude, double latitude, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.georadius(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusReadonly,"Response<List<GeoRadiusResponse>> georadiusReadonly(String,double,double,double,GeoUnit)","[1375, 1378]","{'A1': [(1375, 1378)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusReadonly(String key, double longitude, double latitude, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadius,"Response<List<GeoRadiusResponse>> georadius(String,double,double,double,GeoUnit,GeoRadiusParam)","[1380, 1383]","{'A1': [(1380, 1383)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadius(String key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return appendCommand(commandObjects.georadius(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusReadonly,"Response<List<GeoRadiusResponse>> georadiusReadonly(String,double,double,double,GeoUnit,GeoRadiusParam)","[1385, 1388]","{'A1': [(1385, 1388)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusReadonly(String key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return appendCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMember,"Response<List<GeoRadiusResponse>> georadiusByMember(String,String,double,GeoUnit)","[1390, 1393]","{'A1': [(1390, 1393)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusByMember(String key, String member, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.georadiusByMember(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMemberReadonly,"Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(String,String,double,GeoUnit)","[1395, 1398]","{'A1': [(1395, 1398)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(String key, String member, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMember,"Response<List<GeoRadiusResponse>> georadiusByMember(String,String,double,GeoUnit,GeoRadiusParam)","[1400, 1403]","{'A1': [(1400, 1403)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusByMember(String key, String member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return appendCommand(commandObjects.georadiusByMember(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMemberReadonly,"Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(String,String,double,GeoUnit,GeoRadiusParam)","[1405, 1408]","{'A1': [(1405, 1408)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(String key, String member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return appendCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusStore,"Response<Long> georadiusStore(String,double,double,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[1410, 1413]","{'A1': [(1410, 1413)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> georadiusStore(String key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return appendCommand(commandObjects.georadiusStore(key, longitude, latitude, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMemberStore,"Response<Long> georadiusByMemberStore(String,String,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[1415, 1418]","{'A1': [(1415, 1418)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> georadiusByMemberStore(String key, String member, double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return appendCommand(commandObjects.georadiusByMemberStore(key, member, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(String,String,double,GeoUnit)","[1420, 1423]","{'A1': [(1420, 1423)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(String key, String member, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.geosearch(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(String,GeoCoordinate,double,GeoUnit)","[1425, 1428]","{'A1': [(1425, 1428)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(String key, GeoCoordinate coord, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.geosearch(key, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(String,String,double,double,GeoUnit)","[1430, 1433]","{'A1': [(1430, 1433)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(String key, String member, double width, double height, GeoUnit unit) {
    return appendCommand(commandObjects.geosearch(key, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(String,GeoCoordinate,double,double,GeoUnit)","[1435, 1438]","{'A1': [(1435, 1438)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(String key, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    return appendCommand(commandObjects.geosearch(key, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(String,GeoSearchParam)","[1440, 1443]","{'A1': [(1440, 1443)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(String key, GeoSearchParam params) {
    return appendCommand(commandObjects.geosearch(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(String,String,String,double,GeoUnit)","[1445, 1448]","{'A1': [(1445, 1448)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(String dest, String src, String member, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.geosearchStore(dest, src, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(String,String,GeoCoordinate,double,GeoUnit)","[1450, 1453]","{'A1': [(1450, 1453)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(String dest, String src, GeoCoordinate coord, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.geosearchStore(dest, src, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(String,String,String,double,double,GeoUnit)","[1455, 1458]","{'A1': [(1455, 1458)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(String dest, String src, String member, double width, double height, GeoUnit unit) {
    return appendCommand(commandObjects.geosearchStore(dest, src, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(String,String,GeoCoordinate,double,double,GeoUnit)","[1460, 1463]","{'A1': [(1460, 1463)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(String dest, String src, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    return appendCommand(commandObjects.geosearchStore(dest, src, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(String,String,GeoSearchParam)","[1465, 1468]","{'A1': [(1465, 1468)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(String dest, String src, GeoSearchParam params) {
    return appendCommand(commandObjects.geosearchStore(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStoreStoreDist,"Response<Long> geosearchStoreStoreDist(String,String,GeoSearchParam)","[1470, 1473]","{'A1': [(1470, 1473)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStoreStoreDist(String dest, String src, GeoSearchParam params) {
    return appendCommand(commandObjects.geosearchStoreStoreDist(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pfadd,Response<Long> pfadd(String),"[1475, 1478]","{'A1': [(1475, 1478)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pfadd(String key, String... elements) {
    return appendCommand(commandObjects.pfadd(key, elements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pfmerge,Response<String> pfmerge(String),"[1480, 1483]","{'A1': [(1480, 1483)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> pfmerge(String destkey, String... sourcekeys) {
    return appendCommand(commandObjects.pfmerge(destkey, sourcekeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pfcount,Response<Long> pfcount(String),"[1485, 1488]","{'A1': [(1485, 1488)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pfcount(String key) {
    return appendCommand(commandObjects.pfcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pfcount,Response<Long> pfcount(),"[1490, 1493]","{'A1': [(1490, 1493)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pfcount(String... keys) {
    return appendCommand(commandObjects.pfcount(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xadd,"Response<StreamEntryID> xadd(String,StreamEntryID,Map<String, String>)","[1495, 1498]","{'A1': [(1495, 1498)]}",{'A1': 1.0},A1,,"  @Override
  public Response<StreamEntryID> xadd(String key, StreamEntryID id, Map<String, String> hash) {
    return appendCommand(commandObjects.xadd(key, id, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xadd,"Response<StreamEntryID> xadd(String,XAddParams,Map<String, String>)","[1500, 1503]","{'A1': [(1500, 1503)]}",{'A1': 1.0},A1,,"  @Override
  public Response<StreamEntryID> xadd(String key, XAddParams params, Map<String, String> hash) {
    return appendCommand(commandObjects.xadd(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xlen,Response<Long> xlen(String),"[1505, 1508]","{'A1': [(1505, 1508)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xlen(String key) {
    return appendCommand(commandObjects.xlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrange,"Response<List<StreamEntry>> xrange(String,StreamEntryID,StreamEntryID)","[1510, 1513]","{'A1': [(1510, 1513)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntry>> xrange(String key, StreamEntryID start, StreamEntryID end) {
    return appendCommand(commandObjects.xrange(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrange,"Response<List<StreamEntry>> xrange(String,StreamEntryID,StreamEntryID,int)","[1515, 1518]","{'A1': [(1515, 1518)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntry>> xrange(String key, StreamEntryID start, StreamEntryID end, int count) {
    return appendCommand(commandObjects.xrange(key, start, end, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrevrange,"Response<List<StreamEntry>> xrevrange(String,StreamEntryID,StreamEntryID)","[1520, 1523]","{'A1': [(1520, 1523)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntry>> xrevrange(String key, StreamEntryID end, StreamEntryID start) {
    return appendCommand(commandObjects.xrevrange(key, end, start));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrevrange,"Response<List<StreamEntry>> xrevrange(String,StreamEntryID,StreamEntryID,int)","[1525, 1528]","{'A1': [(1525, 1528)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntry>> xrevrange(String key, StreamEntryID end, StreamEntryID start, int count) {
    return appendCommand(commandObjects.xrevrange(key, end, start, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrange,"Response<List<StreamEntry>> xrange(String,String,String)","[1530, 1533]","{'A1': [(1530, 1533)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntry>> xrange(String key, String start, String end) {
    return appendCommand(commandObjects.xrange(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrange,"Response<List<StreamEntry>> xrange(String,String,String,int)","[1535, 1538]","{'A1': [(1535, 1538)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntry>> xrange(String key, String start, String end, int count) {
    return appendCommand(commandObjects.xrange(key, start, end, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrevrange,"Response<List<StreamEntry>> xrevrange(String,String,String)","[1540, 1543]","{'A1': [(1540, 1543)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntry>> xrevrange(String key, String end, String start) {
    return appendCommand(commandObjects.xrevrange(key, end, start));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrevrange,"Response<List<StreamEntry>> xrevrange(String,String,String,int)","[1545, 1548]","{'A1': [(1545, 1548)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntry>> xrevrange(String key, String end, String start, int count) {
    return appendCommand(commandObjects.xrevrange(key, end, start, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xack,"Response<Long> xack(String,String)","[1550, 1553]","{'A1': [(1550, 1553)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xack(String key, String group, StreamEntryID... ids) {
    return appendCommand(commandObjects.xack(key, group, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupCreate,"Response<String> xgroupCreate(String,String,StreamEntryID,boolean)","[1555, 1558]","{'A1': [(1555, 1558)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> xgroupCreate(String key, String groupName, StreamEntryID id, boolean makeStream) {
    return appendCommand(commandObjects.xgroupCreate(key, groupName, id, makeStream));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupSetID,"Response<String> xgroupSetID(String,String,StreamEntryID)","[1560, 1563]","{'A1': [(1560, 1563)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> xgroupSetID(String key, String groupName, StreamEntryID id) {
    return appendCommand(commandObjects.xgroupSetID(key, groupName, id));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupDestroy,"Response<Long> xgroupDestroy(String,String)","[1565, 1568]","{'A1': [(1565, 1568)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xgroupDestroy(String key, String groupName) {
    return appendCommand(commandObjects.xgroupDestroy(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupCreateConsumer,"Response<Boolean> xgroupCreateConsumer(String,String,String)","[1570, 1573]","{'A1': [(1570, 1573)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> xgroupCreateConsumer(String key, String groupName, String consumerName) {
    return appendCommand(commandObjects.xgroupCreateConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupDelConsumer,"Response<Long> xgroupDelConsumer(String,String,String)","[1575, 1578]","{'A1': [(1575, 1578)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xgroupDelConsumer(String key, String groupName, String consumerName) {
    return appendCommand(commandObjects.xgroupDelConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xpending,"Response<StreamPendingSummary> xpending(String,String)","[1580, 1583]","{'A1': [(1580, 1583)]}",{'A1': 1.0},A1,,"  @Override
  public Response<StreamPendingSummary> xpending(String key, String groupName) {
    return appendCommand(commandObjects.xpending(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xpending,"Response<List<StreamPendingEntry>> xpending(String,String,XPendingParams)","[1585, 1588]","{'A1': [(1585, 1588)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamPendingEntry>> xpending(String key, String groupName, XPendingParams params) {
    return appendCommand(commandObjects.xpending(key, groupName, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xdel,Response<Long> xdel(String),"[1590, 1593]","{'A1': [(1590, 1593)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xdel(String key, StreamEntryID... ids) {
    return appendCommand(commandObjects.xdel(key, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xtrim,"Response<Long> xtrim(String,long,boolean)","[1595, 1598]","{'A1': [(1595, 1598)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xtrim(String key, long maxLen, boolean approximate) {
    return appendCommand(commandObjects.xtrim(key, maxLen, approximate));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xtrim,"Response<Long> xtrim(String,XTrimParams)","[1600, 1603]","{'A1': [(1600, 1603)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xtrim(String key, XTrimParams params) {
    return appendCommand(commandObjects.xtrim(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xclaim,"Response<List<StreamEntry>> xclaim(String,String,String,long,XClaimParams)","[1605, 1608]","{'A1': [(1605, 1608)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntry>> xclaim(String key, String group, String consumerName, long minIdleTime, XClaimParams params, StreamEntryID... ids) {
    return appendCommand(commandObjects.xclaim(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xclaimJustId,"Response<List<StreamEntryID>> xclaimJustId(String,String,String,long,XClaimParams)","[1610, 1613]","{'A1': [(1610, 1613)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamEntryID>> xclaimJustId(String key, String group, String consumerName, long minIdleTime, XClaimParams params, StreamEntryID... ids) {
    return appendCommand(commandObjects.xclaimJustId(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xautoclaim,"Response<Map.Entry<StreamEntryID, List<StreamEntry>>> xautoclaim(String,String,String,long,StreamEntryID,XAutoClaimParams)","[1615, 1618]","{'A1': [(1615, 1618)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map.Entry<StreamEntryID, List<StreamEntry>>> xautoclaim(String key, String group, String consumerName, long minIdleTime, StreamEntryID start, XAutoClaimParams params) {
    return appendCommand(commandObjects.xautoclaim(key, group, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xautoclaimJustId,"Response<Map.Entry<StreamEntryID, List<StreamEntryID>>> xautoclaimJustId(String,String,String,long,StreamEntryID,XAutoClaimParams)","[1620, 1623]","{'A1': [(1620, 1623)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map.Entry<StreamEntryID, List<StreamEntryID>>> xautoclaimJustId(String key, String group, String consumerName, long minIdleTime, StreamEntryID start, XAutoClaimParams params) {
    return appendCommand(commandObjects.xautoclaimJustId(key, group, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoStream,Response<StreamInfo> xinfoStream(String),"[1625, 1628]","{'A1': [(1625, 1628)]}",{'A1': 1.0},A1,,"  @Override
  public Response<StreamInfo> xinfoStream(String key) {
    return appendCommand(commandObjects.xinfoStream(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoStreamFull,Response<StreamFullInfo> xinfoStreamFull(String),"[1630, 1633]","{'A1': [(1630, 1633)]}",{'A1': 1.0},A1,,"  @Override
  public Response<StreamFullInfo> xinfoStreamFull(String key) {
    return appendCommand(commandObjects.xinfoStreamFull(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoStreamFull,"Response<StreamFullInfo> xinfoStreamFull(String,int)","[1635, 1638]","{'A1': [(1635, 1638)]}",{'A1': 1.0},A1,,"  @Override
  public Response<StreamFullInfo> xinfoStreamFull(String key, int count) {
    return appendCommand(commandObjects.xinfoStreamFull(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoGroups,Response<List<StreamGroupInfo>> xinfoGroups(String),"[1640, 1643]","{'A1': [(1640, 1643)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamGroupInfo>> xinfoGroups(String key) {
    return appendCommand(commandObjects.xinfoGroups(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoConsumers,"Response<List<StreamConsumersInfo>> xinfoConsumers(String,String)","[1645, 1648]","{'A1': [(1645, 1648)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamConsumersInfo>> xinfoConsumers(String key, String group) {
    return appendCommand(commandObjects.xinfoConsumers(key, group));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoConsumers2,"Response<List<StreamConsumerInfo>> xinfoConsumers2(String,String)","[1650, 1653]","{'A1': [(1650, 1653)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<StreamConsumerInfo>> xinfoConsumers2(String key, String group) {
    return appendCommand(commandObjects.xinfoConsumers2(key, group));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xread,"Response<List<Map.Entry<String, List<StreamEntry>>>> xread(XReadParams,Map<String, StreamEntryID>)","[1655, 1658]","{'A1': [(1655, 1658)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Map.Entry<String, List<StreamEntry>>>> xread(XReadParams xReadParams, Map<String, StreamEntryID> streams) {
    return appendCommand(commandObjects.xread(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xreadAsMap,"Response<Map<String, List<StreamEntry>>> xreadAsMap(XReadParams,Map<String, StreamEntryID>)","[1660, 1663]","{'A1': [(1660, 1663)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, List<StreamEntry>>> xreadAsMap(XReadParams xReadParams, Map<String, StreamEntryID> streams) {
    return appendCommand(commandObjects.xreadAsMap(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xreadGroup,"Response<List<Map.Entry<String, List<StreamEntry>>>> xreadGroup(String,String,XReadGroupParams,Map<String, StreamEntryID>)","[1665, 1668]","{'A1': [(1665, 1668)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Map.Entry<String, List<StreamEntry>>>> xreadGroup(String groupName, String consumer, XReadGroupParams xReadGroupParams, Map<String, StreamEntryID> streams) {
    return appendCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xreadGroupAsMap,"Response<Map<String, List<StreamEntry>>> xreadGroupAsMap(String,String,XReadGroupParams,Map<String, StreamEntryID>)","[1670, 1673]","{'A1': [(1670, 1673)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, List<StreamEntry>>> xreadGroupAsMap(String groupName, String consumer, XReadGroupParams xReadGroupParams, Map<String, StreamEntryID> streams) {
    return appendCommand(commandObjects.xreadGroupAsMap(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,eval,Response<Object> eval(String),"[1675, 1678]","{'A1': [(1675, 1678)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> eval(String script) {
    return appendCommand(commandObjects.eval(script));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,eval,"Response<Object> eval(String,int)","[1680, 1683]","{'A1': [(1680, 1683)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> eval(String script, int keyCount, String... params) {
    return appendCommand(commandObjects.eval(script, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,eval,"Response<Object> eval(String,List<String>,List<String>)","[1685, 1688]","{'A1': [(1685, 1688)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> eval(String script, List<String> keys, List<String> args) {
    return appendCommand(commandObjects.eval(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalReadonly,"Response<Object> evalReadonly(String,List<String>,List<String>)","[1690, 1693]","{'A1': [(1690, 1693)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalReadonly(String script, List<String> keys, List<String> args) {
    return appendCommand(commandObjects.evalReadonly(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalsha,Response<Object> evalsha(String),"[1695, 1698]","{'A1': [(1695, 1698)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalsha(String sha1) {
    return appendCommand(commandObjects.evalsha(sha1));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalsha,"Response<Object> evalsha(String,int)","[1700, 1703]","{'A1': [(1700, 1703)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalsha(String sha1, int keyCount, String... params) {
    return appendCommand(commandObjects.evalsha(sha1, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalsha,"Response<Object> evalsha(String,List<String>,List<String>)","[1705, 1708]","{'A1': [(1705, 1708)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalsha(String sha1, List<String> keys, List<String> args) {
    return appendCommand(commandObjects.evalsha(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalshaReadonly,"Response<Object> evalshaReadonly(String,List<String>,List<String>)","[1710, 1713]","{'A1': [(1710, 1713)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalshaReadonly(String sha1, List<String> keys, List<String> args) {
    return appendCommand(commandObjects.evalshaReadonly(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,waitReplicas,"Response<Long> waitReplicas(String,int,long)","[1715, 1718]","{'A1': [(1715, 1718)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> waitReplicas(String sampleKey, int replicas, long timeout) {
    return appendCommand(commandObjects.waitReplicas(sampleKey, replicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,waitAOF,"Response<KeyValue<Long, Long>> waitAOF(String,long,long,long)","[1720, 1723]","{'A1': [(1720, 1723)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<Long, Long>> waitAOF(String sampleKey, long numLocal, long numReplicas, long timeout) {
    return appendCommand(commandObjects.waitAOF(sampleKey, numLocal, numReplicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,eval,"Response<Object> eval(String,String)","[1725, 1728]","{'A1': [(1725, 1728)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> eval(String script, String sampleKey) {
    return appendCommand(commandObjects.eval(script, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalsha,"Response<Object> evalsha(String,String)","[1730, 1733]","{'A1': [(1730, 1733)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalsha(String sha1, String sampleKey) {
    return appendCommand(commandObjects.evalsha(sha1, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptExists,Response<List<Boolean>> scriptExists(String),"[1735, 1738]","{'A1': [(1735, 1738)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> scriptExists(String sampleKey, String... sha1) {
    return appendCommand(commandObjects.scriptExists(sampleKey, sha1));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptLoad,"Response<String> scriptLoad(String,String)","[1740, 1743]","{'A1': [(1740, 1743)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> scriptLoad(String script, String sampleKey) {
    return appendCommand(commandObjects.scriptLoad(script, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptFlush,Response<String> scriptFlush(String),"[1745, 1748]","{'A1': [(1745, 1748)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> scriptFlush(String sampleKey) {
    return appendCommand(commandObjects.scriptFlush(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptFlush,"Response<String> scriptFlush(String,FlushMode)","[1750, 1753]","{'A1': [(1750, 1753)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> scriptFlush(String sampleKey, FlushMode flushMode) {
    return appendCommand(commandObjects.scriptFlush(sampleKey, flushMode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptKill,Response<String> scriptKill(String),"[1755, 1758]","{'A1': [(1755, 1758)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> scriptKill(String sampleKey) {
    return appendCommand(commandObjects.scriptKill(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,fcall,"Response<Object> fcall(byte[],List<byte[]>,List<byte[]>)","[1760, 1763]","{'A1': [(1760, 1763)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> fcall(byte[] name, List<byte[]> keys, List<byte[]> args) {
    return appendCommand(commandObjects.fcall(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,fcall,"Response<Object> fcall(String,List<String>,List<String>)","[1765, 1768]","{'A1': [(1765, 1768)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> fcall(String name, List<String> keys, List<String> args) {
    return appendCommand(commandObjects.fcall(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,fcallReadonly,"Response<Object> fcallReadonly(byte[],List<byte[]>,List<byte[]>)","[1770, 1773]","{'A1': [(1770, 1773)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> fcallReadonly(byte[] name, List<byte[]> keys, List<byte[]> args) {
    return appendCommand(commandObjects.fcallReadonly(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,fcallReadonly,"Response<Object> fcallReadonly(String,List<String>,List<String>)","[1775, 1778]","{'A1': [(1775, 1778)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> fcallReadonly(String name, List<String> keys, List<String> args) {
    return appendCommand(commandObjects.fcallReadonly(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionDelete,Response<String> functionDelete(byte[]),"[1780, 1783]","{'A1': [(1780, 1783)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionDelete(byte[] libraryName) {
    return appendCommand(commandObjects.functionDelete(libraryName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionDelete,Response<String> functionDelete(String),"[1785, 1788]","{'A1': [(1785, 1788)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionDelete(String libraryName) {
    return appendCommand(commandObjects.functionDelete(libraryName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionDump,Response<byte[]> functionDump(),"[1790, 1793]","{'A1': [(1790, 1793)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> functionDump() {
    return appendCommand(commandObjects.functionDump());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionList,Response<List<LibraryInfo>> functionList(String),"[1795, 1798]","{'A1': [(1795, 1798)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<LibraryInfo>> functionList(String libraryNamePattern) {
    return appendCommand(commandObjects.functionList(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionList,Response<List<LibraryInfo>> functionList(),"[1800, 1803]","{'A1': [(1800, 1803)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<LibraryInfo>> functionList() {
    return appendCommand(commandObjects.functionList());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionListWithCode,Response<List<LibraryInfo>> functionListWithCode(String),"[1805, 1808]","{'A1': [(1805, 1808)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<LibraryInfo>> functionListWithCode(String libraryNamePattern) {
    return appendCommand(commandObjects.functionListWithCode(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionListWithCode,Response<List<LibraryInfo>> functionListWithCode(),"[1810, 1813]","{'A1': [(1810, 1813)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<LibraryInfo>> functionListWithCode() {
    return appendCommand(commandObjects.functionListWithCode());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionListBinary,Response<List<Object>> functionListBinary(),"[1815, 1818]","{'A1': [(1815, 1818)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> functionListBinary() {
    return appendCommand(commandObjects.functionListBinary());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionList,Response<List<Object>> functionList(byte[]),"[1820, 1823]","{'A1': [(1820, 1823)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> functionList(final byte[] libraryNamePattern) {
    return appendCommand(commandObjects.functionList(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionListWithCodeBinary,Response<List<Object>> functionListWithCodeBinary(),"[1825, 1828]","{'A1': [(1825, 1828)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> functionListWithCodeBinary() {
    return appendCommand(commandObjects.functionListWithCodeBinary());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionListWithCode,Response<List<Object>> functionListWithCode(byte[]),"[1830, 1833]","{'A1': [(1830, 1833)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> functionListWithCode(final byte[] libraryNamePattern) {
    return appendCommand(commandObjects.functionListWithCode(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionLoad,Response<String> functionLoad(byte[]),"[1835, 1838]","{'A1': [(1835, 1838)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionLoad(byte[] functionCode) {
    return appendCommand(commandObjects.functionLoad(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionLoad,Response<String> functionLoad(String),"[1840, 1843]","{'A1': [(1840, 1843)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionLoad(String functionCode) {
    return appendCommand(commandObjects.functionLoad(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionLoadReplace,Response<String> functionLoadReplace(byte[]),"[1845, 1848]","{'A1': [(1845, 1848)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionLoadReplace(byte[] functionCode) {
    return appendCommand(commandObjects.functionLoadReplace(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionLoadReplace,Response<String> functionLoadReplace(String),"[1850, 1853]","{'A1': [(1850, 1853)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionLoadReplace(String functionCode) {
    return appendCommand(commandObjects.functionLoadReplace(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionRestore,Response<String> functionRestore(byte[]),"[1855, 1858]","{'A1': [(1855, 1858)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionRestore(byte[] serializedValue) {
    return appendCommand(commandObjects.functionRestore(serializedValue));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionRestore,"Response<String> functionRestore(byte[],FunctionRestorePolicy)","[1860, 1863]","{'A1': [(1860, 1863)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionRestore(byte[] serializedValue, FunctionRestorePolicy policy) {
    return appendCommand(commandObjects.functionRestore(serializedValue, policy));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionFlush,Response<String> functionFlush(),"[1865, 1868]","{'A1': [(1865, 1868)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionFlush() {
    return appendCommand(commandObjects.functionFlush());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionFlush,Response<String> functionFlush(FlushMode),"[1870, 1873]","{'A1': [(1870, 1873)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionFlush(FlushMode mode) {
    return appendCommand(commandObjects.functionFlush(mode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionKill,Response<String> functionKill(),"[1875, 1878]","{'A1': [(1875, 1878)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> functionKill() {
    return appendCommand(commandObjects.functionKill());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionStats,Response<FunctionStats> functionStats(),"[1880, 1883]","{'A1': [(1880, 1883)]}",{'A1': 1.0},A1,,"  @Override
  public Response<FunctionStats> functionStats() {
    return appendCommand(commandObjects.functionStats());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,functionStatsBinary,Response<Object> functionStatsBinary(),"[1885, 1888]","{'A1': [(1885, 1888)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> functionStatsBinary() {
    return appendCommand(commandObjects.functionStatsBinary());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geoadd,"Response<Long> geoadd(byte[],double,double,byte[])","[1890, 1893]","{'A1': [(1890, 1893)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geoadd(byte[] key, double longitude, double latitude, byte[] member) {
    return appendCommand(commandObjects.geoadd(key, longitude, latitude, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geoadd,"Response<Long> geoadd(byte[],Map<byte[], GeoCoordinate>)","[1895, 1898]","{'A1': [(1895, 1898)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geoadd(byte[] key, Map<byte[], GeoCoordinate> memberCoordinateMap) {
    return appendCommand(commandObjects.geoadd(key, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geoadd,"Response<Long> geoadd(byte[],GeoAddParams,Map<byte[], GeoCoordinate>)","[1900, 1903]","{'A1': [(1900, 1903)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geoadd(byte[] key, GeoAddParams params, Map<byte[], GeoCoordinate> memberCoordinateMap) {
    return appendCommand(commandObjects.geoadd(key, params, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geodist,"Response<Double> geodist(byte[],byte[],byte[])","[1905, 1908]","{'A1': [(1905, 1908)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> geodist(byte[] key, byte[] member1, byte[] member2) {
    return appendCommand(commandObjects.geodist(key, member1, member2));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geodist,"Response<Double> geodist(byte[],byte[],byte[],GeoUnit)","[1910, 1913]","{'A1': [(1910, 1913)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> geodist(byte[] key, byte[] member1, byte[] member2, GeoUnit unit) {
    return appendCommand(commandObjects.geodist(key, member1, member2, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geohash,Response<List<byte[]>> geohash(byte[]),"[1915, 1918]","{'A1': [(1915, 1918)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> geohash(byte[] key, byte[]... members) {
    return appendCommand(commandObjects.geohash(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geopos,Response<List<GeoCoordinate>> geopos(byte[]),"[1920, 1923]","{'A1': [(1920, 1923)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoCoordinate>> geopos(byte[] key, byte[]... members) {
    return appendCommand(commandObjects.geopos(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadius,"Response<List<GeoRadiusResponse>> georadius(byte[],double,double,double,GeoUnit)","[1925, 1928]","{'A1': [(1925, 1928)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadius(byte[] key, double longitude, double latitude, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.georadius(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusReadonly,"Response<List<GeoRadiusResponse>> georadiusReadonly(byte[],double,double,double,GeoUnit)","[1930, 1933]","{'A1': [(1930, 1933)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusReadonly(byte[] key, double longitude, double latitude, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadius,"Response<List<GeoRadiusResponse>> georadius(byte[],double,double,double,GeoUnit,GeoRadiusParam)","[1935, 1938]","{'A1': [(1935, 1938)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadius(byte[] key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return appendCommand(commandObjects.georadius(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusReadonly,"Response<List<GeoRadiusResponse>> georadiusReadonly(byte[],double,double,double,GeoUnit,GeoRadiusParam)","[1940, 1943]","{'A1': [(1940, 1943)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusReadonly(byte[] key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return appendCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMember,"Response<List<GeoRadiusResponse>> georadiusByMember(byte[],byte[],double,GeoUnit)","[1945, 1948]","{'A1': [(1945, 1948)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusByMember(byte[] key, byte[] member, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.georadiusByMember(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMemberReadonly,"Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[],byte[],double,GeoUnit)","[1950, 1953]","{'A1': [(1950, 1953)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[] key, byte[] member, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMember,"Response<List<GeoRadiusResponse>> georadiusByMember(byte[],byte[],double,GeoUnit,GeoRadiusParam)","[1955, 1958]","{'A1': [(1955, 1958)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusByMember(byte[] key, byte[] member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return appendCommand(commandObjects.georadiusByMember(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMemberReadonly,"Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[],byte[],double,GeoUnit,GeoRadiusParam)","[1960, 1963]","{'A1': [(1960, 1963)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[] key, byte[] member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return appendCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusStore,"Response<Long> georadiusStore(byte[],double,double,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[1965, 1968]","{'A1': [(1965, 1968)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> georadiusStore(byte[] key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return appendCommand(commandObjects.georadiusStore(key, longitude, latitude, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,georadiusByMemberStore,"Response<Long> georadiusByMemberStore(byte[],byte[],double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[1970, 1973]","{'A1': [(1970, 1973)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> georadiusByMemberStore(byte[] key, byte[] member, double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return appendCommand(commandObjects.georadiusByMemberStore(key, member, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(byte[],byte[],double,GeoUnit)","[1975, 1978]","{'A1': [(1975, 1978)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(byte[] key, byte[] member, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.geosearch(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(byte[],GeoCoordinate,double,GeoUnit)","[1980, 1983]","{'A1': [(1980, 1983)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(byte[] key, GeoCoordinate coord, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.geosearch(key, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(byte[],byte[],double,double,GeoUnit)","[1985, 1988]","{'A1': [(1985, 1988)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(byte[] key, byte[] member, double width, double height, GeoUnit unit) {
    return appendCommand(commandObjects.geosearch(key, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(byte[],GeoCoordinate,double,double,GeoUnit)","[1990, 1993]","{'A1': [(1990, 1993)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(byte[] key, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    return appendCommand(commandObjects.geosearch(key, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearch,"Response<List<GeoRadiusResponse>> geosearch(byte[],GeoSearchParam)","[1995, 1998]","{'A1': [(1995, 1998)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<GeoRadiusResponse>> geosearch(byte[] key, GeoSearchParam params) {
    return appendCommand(commandObjects.geosearch(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(byte[],byte[],byte[],double,GeoUnit)","[2000, 2003]","{'A1': [(2000, 2003)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(byte[] dest, byte[] src, byte[] member, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.geosearchStore(dest, src, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(byte[],byte[],GeoCoordinate,double,GeoUnit)","[2005, 2008]","{'A1': [(2005, 2008)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(byte[] dest, byte[] src, GeoCoordinate coord, double radius, GeoUnit unit) {
    return appendCommand(commandObjects.geosearchStore(dest, src, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(byte[],byte[],byte[],double,double,GeoUnit)","[2010, 2013]","{'A1': [(2010, 2013)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(byte[] dest, byte[] src, byte[] member, double width, double height, GeoUnit unit) {
    return appendCommand(commandObjects.geosearchStore(dest, src, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(byte[],byte[],GeoCoordinate,double,double,GeoUnit)","[2015, 2018]","{'A1': [(2015, 2018)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(byte[] dest, byte[] src, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    return appendCommand(commandObjects.geosearchStore(dest, src, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStore,"Response<Long> geosearchStore(byte[],byte[],GeoSearchParam)","[2020, 2023]","{'A1': [(2020, 2023)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStore(byte[] dest, byte[] src, GeoSearchParam params) {
    return appendCommand(commandObjects.geosearchStore(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,geosearchStoreStoreDist,"Response<Long> geosearchStoreStoreDist(byte[],byte[],GeoSearchParam)","[2025, 2028]","{'A1': [(2025, 2028)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> geosearchStoreStoreDist(byte[] dest, byte[] src, GeoSearchParam params) {
    return appendCommand(commandObjects.geosearchStoreStoreDist(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hset,"Response<Long> hset(byte[],byte[],byte[])","[2030, 2033]","{'A1': [(2030, 2033)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hset(byte[] key, byte[] field, byte[] value) {
    return appendCommand(commandObjects.hset(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hset,"Response<Long> hset(byte[],Map<byte[], byte[]>)","[2035, 2038]","{'A1': [(2035, 2038)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hset(byte[] key, Map<byte[], byte[]> hash) {
    return appendCommand(commandObjects.hset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hsetex,"Response<Long> hsetex(byte[],HSetExParams,byte[],byte[])","[2054, 2057]","{'A35': [(2054, 2057)]}",{'A35': 1.0},A35,,"  @Override
  public Response<Long> hsetex(byte[] key, HSetExParams params, byte[] field, byte[] value) {
    return appendCommand(commandObjects.hsetex(key, params, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hsetex,"Response<Long> hsetex(byte[],HSetExParams,Map<byte[], byte[]>)","[2072, 2075]","{'A35': [(2072, 2075)]}",{'A35': 1.0},A35,,"  @Override
  public Response<Long> hsetex(byte[] key, HSetExParams params, Map<byte[], byte[]> hash) {
    return appendCommand(commandObjects.hsetex(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hget,"Response<byte[]> hget(byte[],byte[])","[2077, 2080]","{'A1': [(2077, 2080)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> hget(byte[] key, byte[] field) {
    return appendCommand(commandObjects.hget(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hgetex,"Response<List<byte[]>> hgetex(byte[],HGetExParams)","[2093, 2096]","{'A35': [(2093, 2096)]}",{'A35': 1.0},A35,,"  @Override
  public Response<List<byte[]>> hgetex(byte[] key, HGetExParams params, byte[]... fields) {
    return appendCommand(commandObjects.hgetex(key, params, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hgetdel,Response<List<byte[]>> hgetdel(byte[]),"[2106, 2109]","{'A35': [(2106, 2109)]}",{'A35': 1.0},A35,,"  @Override
  public Response<List<byte[]>> hgetdel(byte[] key, byte[]... fields) {
    return appendCommand(commandObjects.hgetdel(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hsetnx,"Response<Long> hsetnx(byte[],byte[],byte[])","[2111, 2114]","{'A1': [(2111, 2114)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hsetnx(byte[] key, byte[] field, byte[] value) {
    return appendCommand(commandObjects.hsetnx(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hmset,"Response<String> hmset(byte[],Map<byte[], byte[]>)","[2116, 2119]","{'A1': [(2116, 2119)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> hmset(byte[] key, Map<byte[], byte[]> hash) {
    return appendCommand(commandObjects.hmset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hmget,Response<List<byte[]>> hmget(byte[]),"[2121, 2124]","{'A1': [(2121, 2124)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> hmget(byte[] key, byte[]... fields) {
    return appendCommand(commandObjects.hmget(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hincrBy,"Response<Long> hincrBy(byte[],byte[],long)","[2126, 2129]","{'A1': [(2126, 2129)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hincrBy(byte[] key, byte[] field, long value) {
    return appendCommand(commandObjects.hincrBy(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hincrByFloat,"Response<Double> hincrByFloat(byte[],byte[],double)","[2131, 2134]","{'A1': [(2131, 2134)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> hincrByFloat(byte[] key, byte[] field, double value) {
    return appendCommand(commandObjects.hincrByFloat(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexists,"Response<Boolean> hexists(byte[],byte[])","[2136, 2139]","{'A1': [(2136, 2139)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> hexists(byte[] key, byte[] field) {
    return appendCommand(commandObjects.hexists(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hdel,Response<Long> hdel(byte[]),"[2141, 2144]","{'A1': [(2141, 2144)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hdel(byte[] key, byte[]... field) {
    return appendCommand(commandObjects.hdel(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hlen,Response<Long> hlen(byte[]),"[2146, 2149]","{'A1': [(2146, 2149)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hlen(byte[] key) {
    return appendCommand(commandObjects.hlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hkeys,Response<Set<byte[]>> hkeys(byte[]),"[2151, 2154]","{'A1': [(2151, 2154)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<byte[]>> hkeys(byte[] key) {
    return appendCommand(commandObjects.hkeys(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hvals,Response<List<byte[]>> hvals(byte[]),"[2156, 2159]","{'A1': [(2156, 2159)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> hvals(byte[] key) {
    return appendCommand(commandObjects.hvals(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hgetAll,"Response<Map<byte[], byte[]>> hgetAll(byte[])","[2161, 2164]","{'A1': [(2161, 2164)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<byte[], byte[]>> hgetAll(byte[] key) {
    return appendCommand(commandObjects.hgetAll(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hrandfield,Response<byte[]> hrandfield(byte[]),"[2166, 2169]","{'A1': [(2166, 2169)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> hrandfield(byte[] key) {
    return appendCommand(commandObjects.hrandfield(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hrandfield,"Response<List<byte[]>> hrandfield(byte[],long)","[2171, 2174]","{'A1': [(2171, 2174)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> hrandfield(byte[] key, long count) {
    return appendCommand(commandObjects.hrandfield(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hrandfieldWithValues,"Response<List<Map.Entry<byte[], byte[]>>> hrandfieldWithValues(byte[],long)","[2176, 2179]","{'A1': [(2176, 2179)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Map.Entry<byte[], byte[]>>> hrandfieldWithValues(byte[] key, long count) {
    return appendCommand(commandObjects.hrandfieldWithValues(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hscan,"Response<ScanResult<Map.Entry<byte[], byte[]>>> hscan(byte[],byte[],ScanParams)","[2181, 2184]","{'A1': [(2181, 2184)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<Map.Entry<byte[], byte[]>>> hscan(byte[] key, byte[] cursor, ScanParams params) {
    return appendCommand(commandObjects.hscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hscanNoValues,"Response<ScanResult<byte[]>> hscanNoValues(byte[],byte[],ScanParams)","[2186, 2189]","{'A1': [(2186, 2189)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<byte[]>> hscanNoValues(byte[] key, byte[] cursor, ScanParams params) {
    return appendCommand(commandObjects.hscanNoValues(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hstrlen,"Response<Long> hstrlen(byte[],byte[])","[2191, 2194]","{'A1': [(2191, 2194)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> hstrlen(byte[] key, byte[] field) {
    return appendCommand(commandObjects.hstrlen(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpire,"Response<List<Long>> hexpire(byte[],long)","[2196, 2199]","{'A1': [(2196, 2199)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpire(byte[] key, long seconds, byte[]... fields) {
    return appendCommand(commandObjects.hexpire(key, seconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpire,"Response<List<Long>> hexpire(byte[],long,ExpiryOption)","[2201, 2204]","{'A1': [(2201, 2204)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpire(byte[] key, long seconds, ExpiryOption condition, byte[]... fields) {
    return appendCommand(commandObjects.hexpire(key, seconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpire,"Response<List<Long>> hpexpire(byte[],long)","[2206, 2209]","{'A1': [(2206, 2209)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpire(byte[] key, long milliseconds, byte[]... fields) {
    return appendCommand(commandObjects.hpexpire(key, milliseconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpire,"Response<List<Long>> hpexpire(byte[],long,ExpiryOption)","[2211, 2214]","{'A1': [(2211, 2214)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpire(byte[] key, long milliseconds, ExpiryOption condition, byte[]... fields) {
    return appendCommand(commandObjects.hpexpire(key, milliseconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpireAt,"Response<List<Long>> hexpireAt(byte[],long)","[2216, 2219]","{'A1': [(2216, 2219)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpireAt(byte[] key, long unixTimeSeconds, byte[]... fields) {
    return appendCommand(commandObjects.hexpireAt(key, unixTimeSeconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpireAt,"Response<List<Long>> hexpireAt(byte[],long,ExpiryOption)","[2221, 2224]","{'A1': [(2221, 2224)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpireAt(byte[] key, long unixTimeSeconds, ExpiryOption condition, byte[]... fields) {
    return appendCommand(commandObjects.hexpireAt(key, unixTimeSeconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpireAt,"Response<List<Long>> hpexpireAt(byte[],long)","[2226, 2229]","{'A1': [(2226, 2229)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpireAt(byte[] key, long unixTimeMillis, byte[]... fields) {
    return appendCommand(commandObjects.hpexpireAt(key, unixTimeMillis, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpireAt,"Response<List<Long>> hpexpireAt(byte[],long,ExpiryOption)","[2231, 2234]","{'A1': [(2231, 2234)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpireAt(byte[] key, long unixTimeMillis, ExpiryOption condition, byte[]... fields) {
    return appendCommand(commandObjects.hpexpireAt(key, unixTimeMillis, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hexpireTime,Response<List<Long>> hexpireTime(byte[]),"[2236, 2239]","{'A1': [(2236, 2239)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hexpireTime(byte[] key, byte[]... fields) {
    return appendCommand(commandObjects.hexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpexpireTime,Response<List<Long>> hpexpireTime(byte[]),"[2241, 2244]","{'A1': [(2241, 2244)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpexpireTime(byte[] key, byte[]... fields) {
    return appendCommand(commandObjects.hpexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,httl,Response<List<Long>> httl(byte[]),"[2246, 2249]","{'A1': [(2246, 2249)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> httl(byte[] key, byte[]... fields) {
    return appendCommand(commandObjects.httl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpttl,Response<List<Long>> hpttl(byte[]),"[2251, 2254]","{'A1': [(2251, 2254)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpttl(byte[] key, byte[]... fields) {
    return appendCommand(commandObjects.hpttl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,hpersist,Response<List<Long>> hpersist(byte[]),"[2256, 2259]","{'A1': [(2256, 2259)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> hpersist(byte[] key, byte[]... fields) {
    return appendCommand(commandObjects.hpersist(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pfadd,Response<Long> pfadd(byte[]),"[2261, 2264]","{'A1': [(2261, 2264)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pfadd(byte[] key, byte[]... elements) {
    return appendCommand(commandObjects.pfadd(key, elements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pfmerge,Response<String> pfmerge(byte[]),"[2266, 2269]","{'A1': [(2266, 2269)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> pfmerge(byte[] destkey, byte[]... sourcekeys) {
    return appendCommand(commandObjects.pfmerge(destkey, sourcekeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pfcount,Response<Long> pfcount(byte[]),"[2271, 2274]","{'A1': [(2271, 2274)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pfcount(byte[] key) {
    return appendCommand(commandObjects.pfcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pfcount,Response<Long> pfcount(),"[2276, 2279]","{'A1': [(2276, 2279)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pfcount(byte[]... keys) {
    return appendCommand(commandObjects.pfcount(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,exists,Response<Boolean> exists(byte[]),"[2281, 2284]","{'A1': [(2281, 2284)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> exists(byte[] key) {
    return appendCommand(commandObjects.exists(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,exists,Response<Long> exists(),"[2286, 2289]","{'A1': [(2286, 2289)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> exists(byte[]... keys) {
    return appendCommand(commandObjects.exists(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,persist,Response<Long> persist(byte[]),"[2291, 2294]","{'A1': [(2291, 2294)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> persist(byte[] key) {
    return appendCommand(commandObjects.persist(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,type,Response<String> type(byte[]),"[2296, 2299]","{'A1': [(2296, 2299)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> type(byte[] key) {
    return appendCommand(commandObjects.type(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,dump,Response<byte[]> dump(byte[]),"[2301, 2304]","{'A1': [(2301, 2304)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> dump(byte[] key) {
    return appendCommand(commandObjects.dump(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,restore,"Response<String> restore(byte[],long,byte[])","[2306, 2309]","{'A1': [(2306, 2309)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> restore(byte[] key, long ttl, byte[] serializedValue) {
    return appendCommand(commandObjects.restore(key, ttl, serializedValue));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,restore,"Response<String> restore(byte[],long,byte[],RestoreParams)","[2311, 2314]","{'A1': [(2311, 2314)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> restore(byte[] key, long ttl, byte[] serializedValue, RestoreParams params) {
    return appendCommand(commandObjects.restore(key, ttl, serializedValue, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expire,"Response<Long> expire(byte[],long)","[2316, 2319]","{'A1': [(2316, 2319)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> expire(byte[] key, long seconds) {
    return appendCommand(commandObjects.expire(key, seconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expire,"Response<Long> expire(byte[],long,ExpiryOption)","[2321, 2324]","{'A1': [(2321, 2324)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> expire(byte[] key, long seconds, ExpiryOption expiryOption) {
    return appendCommand(commandObjects.expire(key, seconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpire,"Response<Long> pexpire(byte[],long)","[2326, 2329]","{'A1': [(2326, 2329)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpire(byte[] key, long milliseconds) {
    return appendCommand(commandObjects.pexpire(key, milliseconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpire,"Response<Long> pexpire(byte[],long,ExpiryOption)","[2331, 2334]","{'A1': [(2331, 2334)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpire(byte[] key, long milliseconds, ExpiryOption expiryOption) {
    return appendCommand(commandObjects.pexpire(key, milliseconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expireTime,Response<Long> expireTime(byte[]),"[2336, 2339]","{'A1': [(2336, 2339)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> expireTime(byte[] key) {
    return appendCommand(commandObjects.expireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpireTime,Response<Long> pexpireTime(byte[]),"[2341, 2344]","{'A1': [(2341, 2344)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpireTime(byte[] key) {
    return appendCommand(commandObjects.pexpireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expireAt,"Response<Long> expireAt(byte[],long)","[2346, 2349]","{'A1': [(2346, 2349)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> expireAt(byte[] key, long unixTime) {
    return appendCommand(commandObjects.expireAt(key, unixTime));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,expireAt,"Response<Long> expireAt(byte[],long,ExpiryOption)","[2351, 2354]","{'A1': [(2351, 2352), (2354, 2354)], 'A40': [(2353, 2353)]}","{'A1': 0.75, 'A40': 0.25}",A1,,"  @Override
  public Response<Long> expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {
    return appendCommand(commandObjects.expireAt(key, unixTime, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpireAt,"Response<Long> pexpireAt(byte[],long)","[2356, 2359]","{'A1': [(2356, 2359)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpireAt(byte[] key, long millisecondsTimestamp) {
    return appendCommand(commandObjects.pexpireAt(key, millisecondsTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pexpireAt,"Response<Long> pexpireAt(byte[],long,ExpiryOption)","[2361, 2364]","{'A1': [(2361, 2364)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pexpireAt(byte[] key, long millisecondsTimestamp, ExpiryOption expiryOption) {
    return appendCommand(commandObjects.pexpireAt(key, millisecondsTimestamp, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ttl,Response<Long> ttl(byte[]),"[2366, 2369]","{'A1': [(2366, 2369)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> ttl(byte[] key) {
    return appendCommand(commandObjects.ttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,pttl,Response<Long> pttl(byte[]),"[2371, 2374]","{'A1': [(2371, 2374)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> pttl(byte[] key) {
    return appendCommand(commandObjects.pttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,touch,Response<Long> touch(byte[]),"[2376, 2379]","{'A1': [(2376, 2379)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> touch(byte[] key) {
    return appendCommand(commandObjects.touch(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,touch,Response<Long> touch(),"[2381, 2384]","{'A1': [(2381, 2384)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> touch(byte[]... keys) {
    return appendCommand(commandObjects.touch(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sort,Response<List<byte[]>> sort(byte[]),"[2386, 2389]","{'A1': [(2386, 2389)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> sort(byte[] key) {
    return appendCommand(commandObjects.sort(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sort,"Response<List<byte[]>> sort(byte[],SortingParams)","[2391, 2394]","{'A1': [(2391, 2394)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> sort(byte[] key, SortingParams sortingParams) {
    return appendCommand(commandObjects.sort(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sortReadonly,"Response<List<byte[]>> sortReadonly(byte[],SortingParams)","[2396, 2399]","{'A1': [(2396, 2399)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> sortReadonly(byte[] key, SortingParams sortingParams) {
    return appendCommand(commandObjects.sortReadonly(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,del,Response<Long> del(byte[]),"[2401, 2404]","{'A1': [(2401, 2404)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> del(byte[] key) {
    return appendCommand(commandObjects.del(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,del,Response<Long> del(),"[2406, 2409]","{'A1': [(2406, 2409)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> del(byte[]... keys) {
    return appendCommand(commandObjects.del(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,unlink,Response<Long> unlink(byte[]),"[2411, 2414]","{'A1': [(2411, 2414)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> unlink(byte[] key) {
    return appendCommand(commandObjects.unlink(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,unlink,Response<Long> unlink(),"[2416, 2419]","{'A1': [(2416, 2419)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> unlink(byte[]... keys) {
    return appendCommand(commandObjects.unlink(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,copy,"Response<Boolean> copy(byte[],byte[],boolean)","[2421, 2424]","{'A1': [(2421, 2424)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> copy(byte[] srcKey, byte[] dstKey, boolean replace) {
    return appendCommand(commandObjects.copy(srcKey, dstKey, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rename,"Response<String> rename(byte[],byte[])","[2426, 2429]","{'A1': [(2426, 2429)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> rename(byte[] oldkey, byte[] newkey) {
    return appendCommand(commandObjects.rename(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,renamenx,"Response<Long> renamenx(byte[],byte[])","[2431, 2434]","{'A1': [(2431, 2434)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> renamenx(byte[] oldkey, byte[] newkey) {
    return appendCommand(commandObjects.renamenx(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sort,"Response<Long> sort(byte[],SortingParams,byte[])","[2436, 2439]","{'A1': [(2436, 2439)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sort(byte[] key, SortingParams sortingParams, byte[] dstkey) {
    return appendCommand(commandObjects.sort(key, sortingParams, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sort,"Response<Long> sort(byte[],byte[])","[2441, 2444]","{'A1': [(2441, 2444)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sort(byte[] key, byte[] dstkey) {
    return appendCommand(commandObjects.sort(key, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,memoryUsage,Response<Long> memoryUsage(byte[]),"[2446, 2449]","{'A1': [(2446, 2449)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> memoryUsage(byte[] key) {
    return appendCommand(commandObjects.memoryUsage(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,memoryUsage,"Response<Long> memoryUsage(byte[],int)","[2451, 2454]","{'A1': [(2451, 2454)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> memoryUsage(byte[] key, int samples) {
    return appendCommand(commandObjects.memoryUsage(key, samples));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,objectRefcount,Response<Long> objectRefcount(byte[]),"[2456, 2459]","{'A1': [(2456, 2459)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> objectRefcount(byte[] key) {
    return appendCommand(commandObjects.objectRefcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,objectEncoding,Response<byte[]> objectEncoding(byte[]),"[2461, 2464]","{'A1': [(2461, 2464)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> objectEncoding(byte[] key) {
    return appendCommand(commandObjects.objectEncoding(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,objectIdletime,Response<Long> objectIdletime(byte[]),"[2466, 2469]","{'A1': [(2466, 2469)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> objectIdletime(byte[] key) {
    return appendCommand(commandObjects.objectIdletime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,objectFreq,Response<Long> objectFreq(byte[]),"[2471, 2474]","{'A1': [(2471, 2474)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> objectFreq(byte[] key) {
    return appendCommand(commandObjects.objectFreq(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,migrate,"Response<String> migrate(String,int,byte[],int)","[2476, 2479]","{'A1': [(2476, 2479)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> migrate(String host, int port, byte[] key, int timeout) {
    return appendCommand(commandObjects.migrate(host, port, key, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,migrate,"Response<String> migrate(String,int,int,MigrateParams)","[2481, 2484]","{'A1': [(2481, 2484)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> migrate(String host, int port, int timeout, MigrateParams params, byte[]... keys) {
    return appendCommand(commandObjects.migrate(host, port, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,keys,Response<Set<byte[]>> keys(byte[]),"[2486, 2489]","{'A1': [(2486, 2489)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<byte[]>> keys(byte[] pattern) {
    return appendCommand(commandObjects.keys(pattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scan,Response<ScanResult<byte[]>> scan(byte[]),"[2491, 2494]","{'A1': [(2491, 2494)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<byte[]>> scan(byte[] cursor) {
    return appendCommand(commandObjects.scan(cursor));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scan,"Response<ScanResult<byte[]>> scan(byte[],ScanParams)","[2496, 2499]","{'A1': [(2496, 2499)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<byte[]>> scan(byte[] cursor, ScanParams params) {
    return appendCommand(commandObjects.scan(cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scan,"Response<ScanResult<byte[]>> scan(byte[],ScanParams,byte[])","[2501, 2504]","{'A1': [(2501, 2504)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<byte[]>> scan(byte[] cursor, ScanParams params, byte[] type) {
    return appendCommand(commandObjects.scan(cursor, params, type));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,randomBinaryKey,Response<byte[]> randomBinaryKey(),"[2506, 2509]","{'A1': [(2506, 2509)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> randomBinaryKey() {
    return appendCommand(commandObjects.randomBinaryKey());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpush,Response<Long> rpush(byte[]),"[2511, 2514]","{'A1': [(2511, 2514)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> rpush(byte[] key, byte[]... args) {
    return appendCommand(commandObjects.rpush(key, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpush,Response<Long> lpush(byte[]),"[2516, 2519]","{'A1': [(2516, 2519)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lpush(byte[] key, byte[]... args) {
    return appendCommand(commandObjects.lpush(key, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,llen,Response<Long> llen(byte[]),"[2521, 2524]","{'A1': [(2521, 2524)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> llen(byte[] key) {
    return appendCommand(commandObjects.llen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lrange,"Response<List<byte[]>> lrange(byte[],long,long)","[2526, 2529]","{'A1': [(2526, 2529)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> lrange(byte[] key, long start, long stop) {
    return appendCommand(commandObjects.lrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ltrim,"Response<String> ltrim(byte[],long,long)","[2531, 2534]","{'A1': [(2531, 2534)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ltrim(byte[] key, long start, long stop) {
    return appendCommand(commandObjects.ltrim(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lindex,"Response<byte[]> lindex(byte[],long)","[2536, 2539]","{'A1': [(2536, 2539)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> lindex(byte[] key, long index) {
    return appendCommand(commandObjects.lindex(key, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lset,"Response<String> lset(byte[],long,byte[])","[2541, 2544]","{'A1': [(2541, 2544)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> lset(byte[] key, long index, byte[] value) {
    return appendCommand(commandObjects.lset(key, index, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lrem,"Response<Long> lrem(byte[],long,byte[])","[2546, 2549]","{'A1': [(2546, 2549)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lrem(byte[] key, long count, byte[] value) {
    return appendCommand(commandObjects.lrem(key, count, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpop,Response<byte[]> lpop(byte[]),"[2551, 2554]","{'A1': [(2551, 2554)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> lpop(byte[] key) {
    return appendCommand(commandObjects.lpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpop,"Response<List<byte[]>> lpop(byte[],int)","[2556, 2559]","{'A1': [(2556, 2559)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> lpop(byte[] key, int count) {
    return appendCommand(commandObjects.lpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpos,"Response<Long> lpos(byte[],byte[])","[2561, 2564]","{'A1': [(2561, 2564)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lpos(byte[] key, byte[] element) {
    return appendCommand(commandObjects.lpos(key, element));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpos,"Response<Long> lpos(byte[],byte[],LPosParams)","[2566, 2569]","{'A1': [(2566, 2569)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lpos(byte[] key, byte[] element, LPosParams params) {
    return appendCommand(commandObjects.lpos(key, element, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpos,"Response<List<Long>> lpos(byte[],byte[],LPosParams,long)","[2571, 2574]","{'A1': [(2571, 2574)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> lpos(byte[] key, byte[] element, LPosParams params, long count) {
    return appendCommand(commandObjects.lpos(key, element, params, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpop,Response<byte[]> rpop(byte[]),"[2576, 2579]","{'A1': [(2576, 2579)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> rpop(byte[] key) {
    return appendCommand(commandObjects.rpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpop,"Response<List<byte[]>> rpop(byte[],int)","[2581, 2584]","{'A1': [(2581, 2584)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> rpop(byte[] key, int count) {
    return appendCommand(commandObjects.rpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,linsert,"Response<Long> linsert(byte[],ListPosition,byte[],byte[])","[2586, 2589]","{'A1': [(2586, 2589)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> linsert(byte[] key, ListPosition where, byte[] pivot, byte[] value) {
    return appendCommand(commandObjects.linsert(key, where, pivot, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lpushx,Response<Long> lpushx(byte[]),"[2591, 2594]","{'A1': [(2591, 2594)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> lpushx(byte[] key, byte[]... args) {
    return appendCommand(commandObjects.lpushx(key, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpushx,Response<Long> rpushx(byte[]),"[2596, 2599]","{'A1': [(2596, 2599)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> rpushx(byte[] key, byte[]... args) {
    return appendCommand(commandObjects.rpushx(key, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blpop,Response<List<byte[]>> blpop(int),"[2601, 2604]","{'A1': [(2601, 2604)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> blpop(int timeout, byte[]... keys) {
    return appendCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blpop,"Response<KeyValue<byte[], byte[]>> blpop(double)","[2606, 2609]","{'A1': [(2606, 2609)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], byte[]>> blpop(double timeout, byte[]... keys) {
    return appendCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,brpop,Response<List<byte[]>> brpop(int),"[2611, 2614]","{'A1': [(2611, 2614)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> brpop(int timeout, byte[]... keys) {
    return appendCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,brpop,"Response<KeyValue<byte[], byte[]>> brpop(double)","[2616, 2619]","{'A1': [(2616, 2619)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], byte[]>> brpop(double timeout, byte[]... keys) {
    return appendCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,rpoplpush,"Response<byte[]> rpoplpush(byte[],byte[])","[2621, 2624]","{'A1': [(2621, 2624)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> rpoplpush(byte[] srckey, byte[] dstkey) {
    return appendCommand(commandObjects.rpoplpush(srckey, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,brpoplpush,"Response<byte[]> brpoplpush(byte[],byte[],int)","[2626, 2629]","{'A1': [(2626, 2629)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> brpoplpush(byte[] source, byte[] destination, int timeout) {
    return appendCommand(commandObjects.brpoplpush(source, destination, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lmove,"Response<byte[]> lmove(byte[],byte[],ListDirection,ListDirection)","[2631, 2634]","{'A1': [(2631, 2634)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> lmove(byte[] srcKey, byte[] dstKey, ListDirection from, ListDirection to) {
    return appendCommand(commandObjects.lmove(srcKey, dstKey, from, to));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blmove,"Response<byte[]> blmove(byte[],byte[],ListDirection,ListDirection,double)","[2636, 2639]","{'A1': [(2636, 2639)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> blmove(byte[] srcKey, byte[] dstKey, ListDirection from, ListDirection to, double timeout) {
    return appendCommand(commandObjects.blmove(srcKey, dstKey, from, to, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lmpop,"Response<KeyValue<byte[], List<byte[]>>> lmpop(ListDirection)","[2641, 2644]","{'A1': [(2641, 2644)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], List<byte[]>>> lmpop(ListDirection direction, byte[]... keys) {
    return appendCommand(commandObjects.lmpop(direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lmpop,"Response<KeyValue<byte[], List<byte[]>>> lmpop(ListDirection,int)","[2646, 2649]","{'A1': [(2646, 2649)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], List<byte[]>>> lmpop(ListDirection direction, int count, byte[]... keys) {
    return appendCommand(commandObjects.lmpop(direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blmpop,"Response<KeyValue<byte[], List<byte[]>>> blmpop(double,ListDirection)","[2651, 2654]","{'A1': [(2651, 2654)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], List<byte[]>>> blmpop(double timeout, ListDirection direction, byte[]... keys) {
    return appendCommand(commandObjects.blmpop(timeout, direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,blmpop,"Response<KeyValue<byte[], List<byte[]>>> blmpop(double,ListDirection,int)","[2656, 2659]","{'A1': [(2656, 2659)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], List<byte[]>>> blmpop(double timeout, ListDirection direction, int count, byte[]... keys) {
    return appendCommand(commandObjects.blmpop(timeout, direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,waitReplicas,"Response<Long> waitReplicas(byte[],int,long)","[2661, 2664]","{'A1': [(2661, 2664)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> waitReplicas(byte[] sampleKey, int replicas, long timeout) {
    return appendCommand(commandObjects.waitReplicas(sampleKey, replicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,waitAOF,"Response<KeyValue<Long, Long>> waitAOF(byte[],long,long,long)","[2666, 2669]","{'A1': [(2666, 2669)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<Long, Long>> waitAOF(byte[] sampleKey, long numLocal, long numReplicas, long timeout) {
    return appendCommand(commandObjects.waitAOF(sampleKey, numLocal, numReplicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,eval,"Response<Object> eval(byte[],byte[])","[2671, 2674]","{'A1': [(2671, 2674)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> eval(byte[] script, byte[] sampleKey) {
    return appendCommand(commandObjects.eval(script, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalsha,"Response<Object> evalsha(byte[],byte[])","[2676, 2679]","{'A1': [(2676, 2679)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalsha(byte[] sha1, byte[] sampleKey) {
    return appendCommand(commandObjects.evalsha(sha1, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptExists,Response<List<Boolean>> scriptExists(byte[]),"[2681, 2684]","{'A1': [(2681, 2684)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> scriptExists(byte[] sampleKey, byte[]... sha1s) {
    return appendCommand(commandObjects.scriptExists(sampleKey, sha1s));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptLoad,"Response<byte[]> scriptLoad(byte[],byte[])","[2686, 2689]","{'A1': [(2686, 2689)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> scriptLoad(byte[] script, byte[] sampleKey) {
    return appendCommand(commandObjects.scriptLoad(script, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptFlush,Response<String> scriptFlush(byte[]),"[2691, 2694]","{'A1': [(2691, 2694)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> scriptFlush(byte[] sampleKey) {
    return appendCommand(commandObjects.scriptFlush(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptFlush,"Response<String> scriptFlush(byte[],FlushMode)","[2696, 2699]","{'A1': [(2696, 2699)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> scriptFlush(byte[] sampleKey, FlushMode flushMode) {
    return appendCommand(commandObjects.scriptFlush(sampleKey, flushMode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scriptKill,Response<String> scriptKill(byte[]),"[2701, 2704]","{'A1': [(2701, 2704)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> scriptKill(byte[] sampleKey) {
    return appendCommand(commandObjects.scriptKill(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,eval,Response<Object> eval(byte[]),"[2706, 2709]","{'A1': [(2706, 2709)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> eval(byte[] script) {
    return appendCommand(commandObjects.eval(script));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,eval,"Response<Object> eval(byte[],int)","[2711, 2714]","{'A1': [(2711, 2714)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> eval(byte[] script, int keyCount, byte[]... params) {
    return appendCommand(commandObjects.eval(script, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,eval,"Response<Object> eval(byte[],List<byte[]>,List<byte[]>)","[2716, 2719]","{'A1': [(2716, 2719)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> eval(byte[] script, List<byte[]> keys, List<byte[]> args) {
    return appendCommand(commandObjects.eval(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalReadonly,"Response<Object> evalReadonly(byte[],List<byte[]>,List<byte[]>)","[2721, 2724]","{'A1': [(2721, 2724)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalReadonly(byte[] script, List<byte[]> keys, List<byte[]> args) {
    return appendCommand(commandObjects.evalReadonly(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalsha,Response<Object> evalsha(byte[]),"[2726, 2729]","{'A1': [(2726, 2729)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalsha(byte[] sha1) {
    return appendCommand(commandObjects.evalsha(sha1));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalsha,"Response<Object> evalsha(byte[],int)","[2731, 2734]","{'A1': [(2731, 2734)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalsha(byte[] sha1, int keyCount, byte[]... params) {
    return appendCommand(commandObjects.evalsha(sha1, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalsha,"Response<Object> evalsha(byte[],List<byte[]>,List<byte[]>)","[2736, 2739]","{'A1': [(2736, 2739)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalsha(byte[] sha1, List<byte[]> keys, List<byte[]> args) {
    return appendCommand(commandObjects.evalsha(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,evalshaReadonly,"Response<Object> evalshaReadonly(byte[],List<byte[]>,List<byte[]>)","[2741, 2744]","{'A1': [(2741, 2744)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> evalshaReadonly(byte[] sha1, List<byte[]> keys, List<byte[]> args) {
    return appendCommand(commandObjects.evalshaReadonly(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sadd,Response<Long> sadd(byte[]),"[2746, 2749]","{'A1': [(2746, 2749)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sadd(byte[] key, byte[]... members) {
    return appendCommand(commandObjects.sadd(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,smembers,Response<Set<byte[]>> smembers(byte[]),"[2751, 2754]","{'A1': [(2751, 2754)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<byte[]>> smembers(byte[] key) {
    return appendCommand(commandObjects.smembers(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,srem,Response<Long> srem(byte[]),"[2756, 2759]","{'A1': [(2756, 2759)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> srem(byte[] key, byte[]... members) {
    return appendCommand(commandObjects.srem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,spop,Response<byte[]> spop(byte[]),"[2761, 2764]","{'A1': [(2761, 2764)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> spop(byte[] key) {
    return appendCommand(commandObjects.spop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,spop,"Response<Set<byte[]>> spop(byte[],long)","[2766, 2769]","{'A1': [(2766, 2769)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<byte[]>> spop(byte[] key, long count) {
    return appendCommand(commandObjects.spop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,scard,Response<Long> scard(byte[]),"[2771, 2774]","{'A1': [(2771, 2774)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> scard(byte[] key) {
    return appendCommand(commandObjects.scard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sismember,"Response<Boolean> sismember(byte[],byte[])","[2776, 2779]","{'A1': [(2776, 2779)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> sismember(byte[] key, byte[] member) {
    return appendCommand(commandObjects.sismember(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,smismember,Response<List<Boolean>> smismember(byte[]),"[2781, 2784]","{'A1': [(2781, 2784)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> smismember(byte[] key, byte[]... members) {
    return appendCommand(commandObjects.smismember(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,srandmember,Response<byte[]> srandmember(byte[]),"[2786, 2789]","{'A1': [(2786, 2789)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> srandmember(byte[] key) {
    return appendCommand(commandObjects.srandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,srandmember,"Response<List<byte[]>> srandmember(byte[],int)","[2791, 2794]","{'A1': [(2791, 2794)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> srandmember(byte[] key, int count) {
    return appendCommand(commandObjects.srandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sscan,"Response<ScanResult<byte[]>> sscan(byte[],byte[],ScanParams)","[2796, 2799]","{'A1': [(2796, 2799)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<byte[]>> sscan(byte[] key, byte[] cursor, ScanParams params) {
    return appendCommand(commandObjects.sscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sdiff,Response<Set<byte[]>> sdiff(),"[2801, 2804]","{'A1': [(2801, 2804)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<byte[]>> sdiff(byte[]... keys) {
    return appendCommand(commandObjects.sdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sdiffstore,Response<Long> sdiffstore(byte[]),"[2806, 2809]","{'A1': [(2806, 2809)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sdiffstore(byte[] dstkey, byte[]... keys) {
    return appendCommand(commandObjects.sdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sinter,Response<Set<byte[]>> sinter(),"[2811, 2814]","{'A1': [(2811, 2814)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<byte[]>> sinter(byte[]... keys) {
    return appendCommand(commandObjects.sinter(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sinterstore,Response<Long> sinterstore(byte[]),"[2816, 2819]","{'A1': [(2816, 2819)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sinterstore(byte[] dstkey, byte[]... keys) {
    return appendCommand(commandObjects.sinterstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sintercard,Response<Long> sintercard(),"[2821, 2824]","{'A1': [(2821, 2824)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sintercard(byte[]... keys) {
    return appendCommand(commandObjects.sintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sintercard,Response<Long> sintercard(int),"[2826, 2829]","{'A1': [(2826, 2829)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sintercard(int limit, byte[]... keys) {
    return appendCommand(commandObjects.sintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sunion,Response<Set<byte[]>> sunion(),"[2831, 2834]","{'A1': [(2831, 2834)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<byte[]>> sunion(byte[]... keys) {
    return appendCommand(commandObjects.sunion(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sunionstore,Response<Long> sunionstore(byte[]),"[2836, 2839]","{'A1': [(2836, 2839)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> sunionstore(byte[] dstkey, byte[]... keys) {
    return appendCommand(commandObjects.sunionstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,smove,"Response<Long> smove(byte[],byte[],byte[])","[2841, 2844]","{'A1': [(2841, 2844)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> smove(byte[] srckey, byte[] dstkey, byte[] member) {
    return appendCommand(commandObjects.smove(srckey, dstkey, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zadd,"Response<Long> zadd(byte[],double,byte[])","[2846, 2849]","{'A1': [(2846, 2849)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zadd(byte[] key, double score, byte[] member) {
    return appendCommand(commandObjects.zadd(key, score, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zadd,"Response<Long> zadd(byte[],double,byte[],ZAddParams)","[2851, 2854]","{'A1': [(2851, 2854)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zadd(byte[] key, double score, byte[] member, ZAddParams params) {
    return appendCommand(commandObjects.zadd(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zadd,"Response<Long> zadd(byte[],Map<byte[], Double>)","[2856, 2859]","{'A1': [(2856, 2859)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zadd(byte[] key, Map<byte[], Double> scoreMembers) {
    return appendCommand(commandObjects.zadd(key, scoreMembers));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zadd,"Response<Long> zadd(byte[],Map<byte[], Double>,ZAddParams)","[2861, 2864]","{'A1': [(2861, 2864)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zadd(byte[] key, Map<byte[], Double> scoreMembers, ZAddParams params) {
    return appendCommand(commandObjects.zadd(key, scoreMembers, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zaddIncr,"Response<Double> zaddIncr(byte[],double,byte[],ZAddParams)","[2866, 2869]","{'A1': [(2866, 2869)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> zaddIncr(byte[] key, double score, byte[] member, ZAddParams params) {
    return appendCommand(commandObjects.zaddIncr(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrem,Response<Long> zrem(byte[]),"[2871, 2874]","{'A1': [(2871, 2874)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zrem(byte[] key, byte[]... members) {
    return appendCommand(commandObjects.zrem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zincrby,"Response<Double> zincrby(byte[],double,byte[])","[2876, 2879]","{'A1': [(2876, 2879)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> zincrby(byte[] key, double increment, byte[] member) {
    return appendCommand(commandObjects.zincrby(key, increment, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zincrby,"Response<Double> zincrby(byte[],double,byte[],ZIncrByParams)","[2881, 2884]","{'A1': [(2881, 2884)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> zincrby(byte[] key, double increment, byte[] member, ZIncrByParams params) {
    return appendCommand(commandObjects.zincrby(key, increment, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrank,"Response<Long> zrank(byte[],byte[])","[2886, 2889]","{'A1': [(2886, 2889)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zrank(byte[] key, byte[] member) {
    return appendCommand(commandObjects.zrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrank,"Response<Long> zrevrank(byte[],byte[])","[2891, 2894]","{'A1': [(2891, 2894)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zrevrank(byte[] key, byte[] member) {
    return appendCommand(commandObjects.zrevrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrankWithScore,"Response<KeyValue<Long, Double>> zrankWithScore(byte[],byte[])","[2896, 2899]","{'A1': [(2896, 2899)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<Long, Double>> zrankWithScore(byte[] key, byte[] member) {
    return appendCommand(commandObjects.zrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrankWithScore,"Response<KeyValue<Long, Double>> zrevrankWithScore(byte[],byte[])","[2901, 2904]","{'A1': [(2901, 2904)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<Long, Double>> zrevrankWithScore(byte[] key, byte[] member) {
    return appendCommand(commandObjects.zrevrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrange,"Response<List<byte[]>> zrange(byte[],long,long)","[2906, 2909]","{'A1': [(2906, 2909)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrange(byte[] key, long start, long stop) {
    return appendCommand(commandObjects.zrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrange,"Response<List<byte[]>> zrevrange(byte[],long,long)","[2911, 2914]","{'A1': [(2911, 2914)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrevrange(byte[] key, long start, long stop) {
    return appendCommand(commandObjects.zrevrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeWithScores,"Response<List<Tuple>> zrangeWithScores(byte[],long,long)","[2916, 2919]","{'A1': [(2916, 2919)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeWithScores(byte[] key, long start, long stop) {
    return appendCommand(commandObjects.zrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeWithScores,"Response<List<Tuple>> zrevrangeWithScores(byte[],long,long)","[2921, 2924]","{'A1': [(2921, 2924)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeWithScores(byte[] key, long start, long stop) {
    return appendCommand(commandObjects.zrevrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrandmember,Response<byte[]> zrandmember(byte[]),"[2926, 2929]","{'A1': [(2926, 2929)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> zrandmember(byte[] key) {
    return appendCommand(commandObjects.zrandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrandmember,"Response<List<byte[]>> zrandmember(byte[],long)","[2931, 2934]","{'A1': [(2931, 2934)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrandmember(byte[] key, long count) {
    return appendCommand(commandObjects.zrandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrandmemberWithScores,"Response<List<Tuple>> zrandmemberWithScores(byte[],long)","[2936, 2939]","{'A1': [(2936, 2939)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrandmemberWithScores(byte[] key, long count) {
    return appendCommand(commandObjects.zrandmemberWithScores(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zcard,Response<Long> zcard(byte[]),"[2941, 2944]","{'A1': [(2941, 2944)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zcard(byte[] key) {
    return appendCommand(commandObjects.zcard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zscore,"Response<Double> zscore(byte[],byte[])","[2946, 2949]","{'A1': [(2946, 2949)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> zscore(byte[] key, byte[] member) {
    return appendCommand(commandObjects.zscore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zmscore,Response<List<Double>> zmscore(byte[]),"[2951, 2954]","{'A1': [(2951, 2954)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Double>> zmscore(byte[] key, byte[]... members) {
    return appendCommand(commandObjects.zmscore(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zpopmax,Response<Tuple> zpopmax(byte[]),"[2956, 2959]","{'A1': [(2956, 2959)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Tuple> zpopmax(byte[] key) {
    return appendCommand(commandObjects.zpopmax(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zpopmax,"Response<List<Tuple>> zpopmax(byte[],int)","[2961, 2964]","{'A1': [(2961, 2964)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zpopmax(byte[] key, int count) {
    return appendCommand(commandObjects.zpopmax(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zpopmin,Response<Tuple> zpopmin(byte[]),"[2966, 2969]","{'A1': [(2966, 2969)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Tuple> zpopmin(byte[] key) {
    return appendCommand(commandObjects.zpopmin(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zpopmin,"Response<List<Tuple>> zpopmin(byte[],int)","[2971, 2974]","{'A1': [(2971, 2974)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zpopmin(byte[] key, int count) {
    return appendCommand(commandObjects.zpopmin(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zcount,"Response<Long> zcount(byte[],double,double)","[2976, 2979]","{'A1': [(2976, 2979)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zcount(byte[] key, double min, double max) {
    return appendCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zcount,"Response<Long> zcount(byte[],byte[],byte[])","[2981, 2984]","{'A1': [(2981, 2984)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zcount(byte[] key, byte[] min, byte[] max) {
    return appendCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScore,"Response<List<byte[]>> zrangeByScore(byte[],double,double)","[2986, 2989]","{'A1': [(2986, 2989)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrangeByScore(byte[] key, double min, double max) {
    return appendCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScore,"Response<List<byte[]>> zrangeByScore(byte[],byte[],byte[])","[2991, 2994]","{'A1': [(2991, 2994)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrangeByScore(byte[] key, byte[] min, byte[] max) {
    return appendCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScore,"Response<List<byte[]>> zrevrangeByScore(byte[],double,double)","[2996, 2999]","{'A1': [(2996, 2999)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrevrangeByScore(byte[] key, double max, double min) {
    return appendCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScore,"Response<List<byte[]>> zrangeByScore(byte[],double,double,int,int)","[3001, 3004]","{'A1': [(3001, 3004)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrangeByScore(byte[] key, double min, double max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScore,"Response<List<byte[]>> zrevrangeByScore(byte[],byte[],byte[])","[3006, 3009]","{'A1': [(3006, 3009)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrevrangeByScore(byte[] key, byte[] max, byte[] min) {
    return appendCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScore,"Response<List<byte[]>> zrangeByScore(byte[],byte[],byte[],int,int)","[3011, 3014]","{'A1': [(3011, 3014)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrangeByScore(byte[] key, byte[] min, byte[] max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScore,"Response<List<byte[]>> zrevrangeByScore(byte[],double,double,int,int)","[3016, 3019]","{'A1': [(3016, 3019)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrevrangeByScore(byte[] key, double max, double min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScoreWithScores,"Response<List<Tuple>> zrangeByScoreWithScores(byte[],double,double)","[3021, 3024]","{'A1': [(3021, 3024)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeByScoreWithScores(byte[] key, double min, double max) {
    return appendCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScoreWithScores,"Response<List<Tuple>> zrevrangeByScoreWithScores(byte[],double,double)","[3026, 3029]","{'A1': [(3026, 3029)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeByScoreWithScores(byte[] key, double max, double min) {
    return appendCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScoreWithScores,"Response<List<Tuple>> zrangeByScoreWithScores(byte[],double,double,int,int)","[3031, 3034]","{'A1': [(3031, 3034)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeByScoreWithScores(byte[] key, double min, double max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScore,"Response<List<byte[]>> zrevrangeByScore(byte[],byte[],byte[],int,int)","[3036, 3039]","{'A1': [(3036, 3039)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrevrangeByScore(byte[] key, byte[] max, byte[] min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScoreWithScores,"Response<List<Tuple>> zrangeByScoreWithScores(byte[],byte[],byte[])","[3041, 3044]","{'A1': [(3041, 3044)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeByScoreWithScores(byte[] key, byte[] min, byte[] max) {
    return appendCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScoreWithScores,"Response<List<Tuple>> zrevrangeByScoreWithScores(byte[],byte[],byte[])","[3046, 3049]","{'A1': [(3046, 3049)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeByScoreWithScores(byte[] key, byte[] max, byte[] min) {
    return appendCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByScoreWithScores,"Response<List<Tuple>> zrangeByScoreWithScores(byte[],byte[],byte[],int,int)","[3051, 3054]","{'A1': [(3051, 3054)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeByScoreWithScores(byte[] key, byte[] min, byte[] max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScoreWithScores,"Response<List<Tuple>> zrevrangeByScoreWithScores(byte[],double,double,int,int)","[3056, 3059]","{'A1': [(3056, 3059)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeByScoreWithScores(byte[] key, double max, double min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByScoreWithScores,"Response<List<Tuple>> zrevrangeByScoreWithScores(byte[],byte[],byte[],int,int)","[3061, 3064]","{'A1': [(3061, 3064)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrevrangeByScoreWithScores(byte[] key, byte[] max, byte[] min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zremrangeByRank,"Response<Long> zremrangeByRank(byte[],long,long)","[3066, 3069]","{'A1': [(3066, 3069)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zremrangeByRank(byte[] key, long start, long stop) {
    return appendCommand(commandObjects.zremrangeByRank(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zremrangeByScore,"Response<Long> zremrangeByScore(byte[],double,double)","[3071, 3074]","{'A1': [(3071, 3074)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zremrangeByScore(byte[] key, double min, double max) {
    return appendCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zremrangeByScore,"Response<Long> zremrangeByScore(byte[],byte[],byte[])","[3076, 3079]","{'A1': [(3076, 3079)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zremrangeByScore(byte[] key, byte[] min, byte[] max) {
    return appendCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zlexcount,"Response<Long> zlexcount(byte[],byte[],byte[])","[3081, 3084]","{'A1': [(3081, 3084)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zlexcount(byte[] key, byte[] min, byte[] max) {
    return appendCommand(commandObjects.zlexcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByLex,"Response<List<byte[]>> zrangeByLex(byte[],byte[],byte[])","[3086, 3089]","{'A1': [(3086, 3089)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrangeByLex(byte[] key, byte[] min, byte[] max) {
    return appendCommand(commandObjects.zrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeByLex,"Response<List<byte[]>> zrangeByLex(byte[],byte[],byte[],int,int)","[3091, 3094]","{'A1': [(3091, 3094)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrangeByLex(byte[] key, byte[] min, byte[] max, int offset, int count) {
    return appendCommand(commandObjects.zrangeByLex(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByLex,"Response<List<byte[]>> zrevrangeByLex(byte[],byte[],byte[])","[3096, 3099]","{'A1': [(3096, 3099)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrevrangeByLex(byte[] key, byte[] max, byte[] min) {
    return appendCommand(commandObjects.zrevrangeByLex(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrevrangeByLex,"Response<List<byte[]>> zrevrangeByLex(byte[],byte[],byte[],int,int)","[3101, 3104]","{'A1': [(3101, 3104)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrevrangeByLex(byte[] key, byte[] max, byte[] min, int offset, int count) {
    return appendCommand(commandObjects.zrevrangeByLex(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrange,"Response<List<byte[]>> zrange(byte[],ZRangeParams)","[3106, 3109]","{'A1': [(3106, 3109)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zrange(byte[] key, ZRangeParams zRangeParams) {
    return appendCommand(commandObjects.zrange(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangeWithScores,"Response<List<Tuple>> zrangeWithScores(byte[],ZRangeParams)","[3111, 3114]","{'A1': [(3111, 3114)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zrangeWithScores(byte[] key, ZRangeParams zRangeParams) {
    return appendCommand(commandObjects.zrangeWithScores(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zrangestore,"Response<Long> zrangestore(byte[],byte[],ZRangeParams)","[3116, 3119]","{'A1': [(3116, 3119)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zrangestore(byte[] dest, byte[] src, ZRangeParams zRangeParams) {
    return appendCommand(commandObjects.zrangestore(dest, src, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zremrangeByLex,"Response<Long> zremrangeByLex(byte[],byte[],byte[])","[3121, 3124]","{'A1': [(3121, 3124)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zremrangeByLex(byte[] key, byte[] min, byte[] max) {
    return appendCommand(commandObjects.zremrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zscan,"Response<ScanResult<Tuple>> zscan(byte[],byte[],ScanParams)","[3126, 3129]","{'A1': [(3126, 3129)]}",{'A1': 1.0},A1,,"  @Override
  public Response<ScanResult<Tuple>> zscan(byte[] key, byte[] cursor, ScanParams params) {
    return appendCommand(commandObjects.zscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bzpopmax,"Response<KeyValue<byte[], Tuple>> bzpopmax(double)","[3131, 3134]","{'A1': [(3131, 3134)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], Tuple>> bzpopmax(double timeout, byte[]... keys) {
    return appendCommand(commandObjects.bzpopmax(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bzpopmin,"Response<KeyValue<byte[], Tuple>> bzpopmin(double)","[3136, 3139]","{'A1': [(3136, 3139)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], Tuple>> bzpopmin(double timeout, byte[]... keys) {
    return appendCommand(commandObjects.bzpopmin(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zmpop,"Response<KeyValue<byte[], List<Tuple>>> zmpop(SortedSetOption)","[3141, 3144]","{'A1': [(3141, 3144)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], List<Tuple>>> zmpop(SortedSetOption option, byte[]... keys) {
    return appendCommand(commandObjects.zmpop(option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zmpop,"Response<KeyValue<byte[], List<Tuple>>> zmpop(SortedSetOption,int)","[3146, 3149]","{'A1': [(3146, 3149)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], List<Tuple>>> zmpop(SortedSetOption option, int count, byte[]... keys) {
    return appendCommand(commandObjects.zmpop(option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bzmpop,"Response<KeyValue<byte[], List<Tuple>>> bzmpop(double,SortedSetOption)","[3151, 3154]","{'A1': [(3151, 3154)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], List<Tuple>>> bzmpop(double timeout, SortedSetOption option, byte[]... keys) {
    return appendCommand(commandObjects.bzmpop(timeout, option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bzmpop,"Response<KeyValue<byte[], List<Tuple>>> bzmpop(double,SortedSetOption,int)","[3156, 3159]","{'A1': [(3156, 3159)]}",{'A1': 1.0},A1,,"  @Override
  public Response<KeyValue<byte[], List<Tuple>>> bzmpop(double timeout, SortedSetOption option, int count, byte[]... keys) {
    return appendCommand(commandObjects.bzmpop(timeout, option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zdiff,Response<List<byte[]>> zdiff(),"[3161, 3164]","{'A1': [(3161, 3164)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zdiff(byte[]... keys) {
    return appendCommand(commandObjects.zdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zdiffWithScores,Response<List<Tuple>> zdiffWithScores(),"[3166, 3169]","{'A1': [(3166, 3169)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zdiffWithScores(byte[]... keys) {
    return appendCommand(commandObjects.zdiffWithScores(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zdiffStore,Response<Long> zdiffStore(byte[]),"[3171, 3175]","{'A1': [(3171, 3175)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Response<Long> zdiffStore(byte[] dstkey, byte[]... keys) {
    return appendCommand(commandObjects.zdiffStore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zdiffstore,Response<Long> zdiffstore(byte[]),"[3177, 3180]","{'A1': [(3177, 3180)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zdiffstore(byte[] dstkey, byte[]... keys) {
    return appendCommand(commandObjects.zdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zinter,Response<List<byte[]>> zinter(ZParams),"[3182, 3185]","{'A1': [(3182, 3185)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zinter(ZParams params, byte[]... keys) {
    return appendCommand(commandObjects.zinter(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zinterWithScores,Response<List<Tuple>> zinterWithScores(ZParams),"[3187, 3190]","{'A1': [(3187, 3190)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zinterWithScores(ZParams params, byte[]... keys) {
    return appendCommand(commandObjects.zinterWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zinterstore,Response<Long> zinterstore(byte[]),"[3192, 3195]","{'A1': [(3192, 3195)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zinterstore(byte[] dstkey, byte[]... sets) {
    return appendCommand(commandObjects.zinterstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zinterstore,"Response<Long> zinterstore(byte[],ZParams)","[3197, 3200]","{'A1': [(3197, 3200)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zinterstore(byte[] dstkey, ZParams params, byte[]... sets) {
    return appendCommand(commandObjects.zinterstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zintercard,Response<Long> zintercard(),"[3202, 3205]","{'A1': [(3202, 3205)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zintercard(byte[]... keys) {
    return appendCommand(commandObjects.zintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zintercard,Response<Long> zintercard(long),"[3207, 3210]","{'A1': [(3207, 3210)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zintercard(long limit, byte[]... keys) {
    return appendCommand(commandObjects.zintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zunion,Response<List<byte[]>> zunion(ZParams),"[3212, 3215]","{'A1': [(3212, 3215)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> zunion(ZParams params, byte[]... keys) {
    return appendCommand(commandObjects.zunion(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zunionWithScores,Response<List<Tuple>> zunionWithScores(ZParams),"[3217, 3220]","{'A1': [(3217, 3220)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> zunionWithScores(ZParams params, byte[]... keys) {
    return appendCommand(commandObjects.zunionWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zunionstore,Response<Long> zunionstore(byte[]),"[3222, 3225]","{'A1': [(3222, 3225)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zunionstore(byte[] dstkey, byte[]... sets) {
    return appendCommand(commandObjects.zunionstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,zunionstore,"Response<Long> zunionstore(byte[],ZParams)","[3227, 3230]","{'A1': [(3227, 3230)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> zunionstore(byte[] dstkey, ZParams params, byte[]... sets) {
    return appendCommand(commandObjects.zunionstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xadd,"Response<byte[]> xadd(byte[],XAddParams,Map<byte[], byte[]>)","[3232, 3235]","{'A1': [(3232, 3235)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> xadd(byte[] key, XAddParams params, Map<byte[], byte[]> hash) {
    return appendCommand(commandObjects.xadd(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xlen,Response<Long> xlen(byte[]),"[3237, 3240]","{'A1': [(3237, 3240)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xlen(byte[] key) {
    return appendCommand(commandObjects.xlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrange,"Response<List<Object>> xrange(byte[],byte[],byte[])","[3242, 3245]","{'A1': [(3242, 3245)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> xrange(byte[] key, byte[] start, byte[] end) {
    return appendCommand(commandObjects.xrange(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrange,"Response<List<Object>> xrange(byte[],byte[],byte[],int)","[3247, 3250]","{'A1': [(3247, 3250)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> xrange(byte[] key, byte[] start, byte[] end, int count) {
    return appendCommand(commandObjects.xrange(key, start, end, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrevrange,"Response<List<Object>> xrevrange(byte[],byte[],byte[])","[3252, 3255]","{'A1': [(3252, 3255)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> xrevrange(byte[] key, byte[] end, byte[] start) {
    return appendCommand(commandObjects.xrevrange(key, end, start));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xrevrange,"Response<List<Object>> xrevrange(byte[],byte[],byte[],int)","[3257, 3260]","{'A1': [(3257, 3260)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> xrevrange(byte[] key, byte[] end, byte[] start, int count) {
    return appendCommand(commandObjects.xrevrange(key, end, start, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xack,"Response<Long> xack(byte[],byte[])","[3262, 3265]","{'A1': [(3262, 3265)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xack(byte[] key, byte[] group, byte[]... ids) {
    return appendCommand(commandObjects.xack(key, group, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupCreate,"Response<String> xgroupCreate(byte[],byte[],byte[],boolean)","[3267, 3270]","{'A1': [(3267, 3270)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> xgroupCreate(byte[] key, byte[] groupName, byte[] id, boolean makeStream) {
    return appendCommand(commandObjects.xgroupCreate(key, groupName, id, makeStream));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupSetID,"Response<String> xgroupSetID(byte[],byte[],byte[])","[3272, 3275]","{'A1': [(3272, 3275)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> xgroupSetID(byte[] key, byte[] groupName, byte[] id) {
    return appendCommand(commandObjects.xgroupSetID(key, groupName, id));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupDestroy,"Response<Long> xgroupDestroy(byte[],byte[])","[3277, 3280]","{'A1': [(3277, 3280)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xgroupDestroy(byte[] key, byte[] groupName) {
    return appendCommand(commandObjects.xgroupDestroy(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupCreateConsumer,"Response<Boolean> xgroupCreateConsumer(byte[],byte[],byte[])","[3282, 3285]","{'A1': [(3282, 3285)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> xgroupCreateConsumer(byte[] key, byte[] groupName, byte[] consumerName) {
    return appendCommand(commandObjects.xgroupCreateConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xgroupDelConsumer,"Response<Long> xgroupDelConsumer(byte[],byte[],byte[])","[3287, 3290]","{'A1': [(3287, 3290)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xgroupDelConsumer(byte[] key, byte[] groupName, byte[] consumerName) {
    return appendCommand(commandObjects.xgroupDelConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xdel,Response<Long> xdel(byte[]),"[3292, 3295]","{'A1': [(3292, 3295)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xdel(byte[] key, byte[]... ids) {
    return appendCommand(commandObjects.xdel(key, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xtrim,"Response<Long> xtrim(byte[],long,boolean)","[3297, 3300]","{'A1': [(3297, 3300)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xtrim(byte[] key, long maxLen, boolean approximateLength) {
    return appendCommand(commandObjects.xtrim(key, maxLen, approximateLength));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xtrim,"Response<Long> xtrim(byte[],XTrimParams)","[3302, 3305]","{'A1': [(3302, 3305)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> xtrim(byte[] key, XTrimParams params) {
    return appendCommand(commandObjects.xtrim(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xpending,"Response<Object> xpending(byte[],byte[])","[3307, 3310]","{'A1': [(3307, 3310)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> xpending(byte[] key, byte[] groupName) {
    return appendCommand(commandObjects.xpending(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xpending,"Response<List<Object>> xpending(byte[],byte[],XPendingParams)","[3312, 3315]","{'A1': [(3312, 3315)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> xpending(byte[] key, byte[] groupName, XPendingParams params) {
    return appendCommand(commandObjects.xpending(key, groupName, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xclaim,"Response<List<byte[]>> xclaim(byte[],byte[],byte[],long,XClaimParams)","[3317, 3320]","{'A1': [(3317, 3320)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> xclaim(byte[] key, byte[] group, byte[] consumerName, long minIdleTime, XClaimParams params, byte[]... ids) {
    return appendCommand(commandObjects.xclaim(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xclaimJustId,"Response<List<byte[]>> xclaimJustId(byte[],byte[],byte[],long,XClaimParams)","[3322, 3325]","{'A1': [(3322, 3325)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> xclaimJustId(byte[] key, byte[] group, byte[] consumerName, long minIdleTime, XClaimParams params, byte[]... ids) {
    return appendCommand(commandObjects.xclaimJustId(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xautoclaim,"Response<List<Object>> xautoclaim(byte[],byte[],byte[],long,byte[],XAutoClaimParams)","[3327, 3330]","{'A1': [(3327, 3330)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> xautoclaim(byte[] key, byte[] groupName, byte[] consumerName, long minIdleTime, byte[] start, XAutoClaimParams params) {
    return appendCommand(commandObjects.xautoclaim(key, groupName, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xautoclaimJustId,"Response<List<Object>> xautoclaimJustId(byte[],byte[],byte[],long,byte[],XAutoClaimParams)","[3332, 3335]","{'A1': [(3332, 3335)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> xautoclaimJustId(byte[] key, byte[] groupName, byte[] consumerName, long minIdleTime, byte[] start, XAutoClaimParams params) {
    return appendCommand(commandObjects.xautoclaimJustId(key, groupName, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoStream,Response<Object> xinfoStream(byte[]),"[3337, 3340]","{'A1': [(3337, 3340)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> xinfoStream(byte[] key) {
    return appendCommand(commandObjects.xinfoStream(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoStreamFull,Response<Object> xinfoStreamFull(byte[]),"[3342, 3345]","{'A1': [(3342, 3345)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> xinfoStreamFull(byte[] key) {
    return appendCommand(commandObjects.xinfoStreamFull(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoStreamFull,"Response<Object> xinfoStreamFull(byte[],int)","[3347, 3350]","{'A1': [(3347, 3350)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> xinfoStreamFull(byte[] key, int count) {
    return appendCommand(commandObjects.xinfoStreamFull(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoGroups,Response<List<Object>> xinfoGroups(byte[]),"[3352, 3355]","{'A1': [(3352, 3355)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> xinfoGroups(byte[] key) {
    return appendCommand(commandObjects.xinfoGroups(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xinfoConsumers,"Response<List<Object>> xinfoConsumers(byte[],byte[])","[3357, 3360]","{'A1': [(3357, 3360)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> xinfoConsumers(byte[] key, byte[] group) {
    return appendCommand(commandObjects.xinfoConsumers(key, group));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xread,Response<List<Object>> xread(XReadParams),"[3367, 3372]","{'A1': [(3368, 3368), (3371, 3372)], 'A4': [(3367, 3367), (3369, 3370)]}","{'A1': 0.5, 'A4': 0.5}",A1,,"  @Deprecated
  @Override
  public Response<List<Object>> xread(XReadParams xReadParams,
      Map.Entry<byte[], byte[]>... streams) {
    return appendCommand(commandObjects.xread(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xreadGroup,"Response<List<Object>> xreadGroup(byte[],byte[],XReadGroupParams)","[3379, 3384]","{'A1': [(3380, 3384)], 'A4': [(3379, 3379)]}","{'A1': 0.8333333333333334, 'A4': 0.16666666666666666}",A1,,"  @Deprecated
  @Override
  public Response<List<Object>> xreadGroup(byte[] groupName, byte[] consumer,
      XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {
    return appendCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xreadBinary,"Response<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(XReadParams,Map<byte[], StreamEntryID>)","[3386, 3390]","{'A4': [(3386, 3390)]}",{'A4': 1.0},A4,,"  @Override
  public Response<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(XReadParams xReadParams,
      Map<byte[], StreamEntryID> streams) {
    return appendCommand(commandObjects.xreadBinary(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xreadBinaryAsMap,"Response<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(XReadParams,Map<byte[], StreamEntryID>)","[3392, 3396]","{'A4': [(3392, 3396)]}",{'A4': 1.0},A4,,"  @Override
  public Response<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(XReadParams xReadParams,
      Map<byte[], StreamEntryID> streams) {
    return appendCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xreadGroupBinary,"Response<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadGroupBinary(byte[],byte[],XReadGroupParams,Map<byte[], StreamEntryID>)","[3398, 3403]","{'A4': [(3398, 3403)]}",{'A4': 1.0},A4,,"  @Override
  public Response<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadGroupBinary(byte[] groupName,
      byte[] consumer, XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {
    return appendCommand(
        commandObjects.xreadGroupBinary(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,xreadGroupBinaryAsMap,"Response<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(byte[],byte[],XReadGroupParams,Map<byte[], StreamEntryID>)","[3405, 3410]","{'A4': [(3405, 3410)]}",{'A4': 1.0},A4,,"  @Override
  public Response<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(byte[] groupName,
      byte[] consumer, XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {
    return appendCommand(
        commandObjects.xreadGroupBinaryAsMap(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,set,"Response<String> set(byte[],byte[])","[3412, 3415]","{'A1': [(3412, 3415)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> set(byte[] key, byte[] value) {
    return appendCommand(commandObjects.set(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,set,"Response<String> set(byte[],byte[],SetParams)","[3417, 3420]","{'A1': [(3417, 3420)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> set(byte[] key, byte[] value, SetParams params) {
    return appendCommand(commandObjects.set(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,get,Response<byte[]> get(byte[]),"[3422, 3425]","{'A1': [(3422, 3425)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> get(byte[] key) {
    return appendCommand(commandObjects.get(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setGet,"Response<byte[]> setGet(byte[],byte[])","[3427, 3430]","{'A1': [(3427, 3430)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> setGet(byte[] key, byte[] value) {
    return appendCommand(commandObjects.setGet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setGet,"Response<byte[]> setGet(byte[],byte[],SetParams)","[3432, 3435]","{'A1': [(3432, 3435)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> setGet(byte[] key, byte[] value, SetParams params) {
    return appendCommand(commandObjects.setGet(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getDel,Response<byte[]> getDel(byte[]),"[3437, 3440]","{'A1': [(3437, 3440)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> getDel(byte[] key) {
    return appendCommand(commandObjects.getDel(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getEx,"Response<byte[]> getEx(byte[],GetExParams)","[3442, 3445]","{'A1': [(3442, 3445)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> getEx(byte[] key, GetExParams params) {
    return appendCommand(commandObjects.getEx(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setbit,"Response<Boolean> setbit(byte[],long,boolean)","[3447, 3450]","{'A1': [(3447, 3450)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> setbit(byte[] key, long offset, boolean value) {
    return appendCommand(commandObjects.setbit(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getbit,"Response<Boolean> getbit(byte[],long)","[3452, 3455]","{'A1': [(3452, 3455)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> getbit(byte[] key, long offset) {
    return appendCommand(commandObjects.getbit(key, offset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setrange,"Response<Long> setrange(byte[],long,byte[])","[3457, 3460]","{'A1': [(3457, 3460)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> setrange(byte[] key, long offset, byte[] value) {
    return appendCommand(commandObjects.setrange(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getrange,"Response<byte[]> getrange(byte[],long,long)","[3462, 3465]","{'A1': [(3462, 3465)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> getrange(byte[] key, long startOffset, long endOffset) {
    return appendCommand(commandObjects.getrange(key, startOffset, endOffset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,getSet,"Response<byte[]> getSet(byte[],byte[])","[3470, 3474]","{'A1': [(3470, 3474)]}",{'A1': 1.0},A1,,"  @Deprecated
  @Override
  public Response<byte[]> getSet(byte[] key, byte[] value) {
    return appendCommand(commandObjects.getSet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setnx,"Response<Long> setnx(byte[],byte[])","[3476, 3479]","{'A1': [(3476, 3479)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> setnx(byte[] key, byte[] value) {
    return appendCommand(commandObjects.setnx(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setex,"Response<String> setex(byte[],long,byte[])","[3481, 3484]","{'A1': [(3481, 3484)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> setex(byte[] key, long seconds, byte[] value) {
    return appendCommand(commandObjects.setex(key, seconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,psetex,"Response<String> psetex(byte[],long,byte[])","[3486, 3489]","{'A1': [(3486, 3489)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> psetex(byte[] key, long milliseconds, byte[] value) {
    return appendCommand(commandObjects.psetex(key, milliseconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,mget,Response<List<byte[]>> mget(),"[3491, 3494]","{'A1': [(3491, 3494)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<byte[]>> mget(byte[]... keys) {
    return appendCommand(commandObjects.mget(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,mset,Response<String> mset(),"[3496, 3499]","{'A1': [(3496, 3499)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> mset(byte[]... keysvalues) {
    return appendCommand(commandObjects.mset(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,msetnx,Response<Long> msetnx(),"[3501, 3504]","{'A1': [(3501, 3504)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> msetnx(byte[]... keysvalues) {
    return appendCommand(commandObjects.msetnx(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,incr,Response<Long> incr(byte[]),"[3506, 3509]","{'A1': [(3506, 3509)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> incr(byte[] key) {
    return appendCommand(commandObjects.incr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,incrBy,"Response<Long> incrBy(byte[],long)","[3511, 3514]","{'A1': [(3511, 3514)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> incrBy(byte[] key, long increment) {
    return appendCommand(commandObjects.incrBy(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,incrByFloat,"Response<Double> incrByFloat(byte[],double)","[3516, 3519]","{'A1': [(3516, 3519)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> incrByFloat(byte[] key, double increment) {
    return appendCommand(commandObjects.incrByFloat(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,decr,Response<Long> decr(byte[]),"[3521, 3524]","{'A1': [(3521, 3524)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> decr(byte[] key) {
    return appendCommand(commandObjects.decr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,decrBy,"Response<Long> decrBy(byte[],long)","[3526, 3529]","{'A1': [(3526, 3529)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> decrBy(byte[] key, long decrement) {
    return appendCommand(commandObjects.decrBy(key, decrement));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,append,"Response<Long> append(byte[],byte[])","[3531, 3534]","{'A1': [(3531, 3534)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> append(byte[] key, byte[] value) {
    return appendCommand(commandObjects.append(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,substr,"Response<byte[]> substr(byte[],int,int)","[3536, 3539]","{'A1': [(3536, 3539)]}",{'A1': 1.0},A1,,"  @Override
  public Response<byte[]> substr(byte[] key, int start, int end) {
    return appendCommand(commandObjects.substr(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,strlen,Response<Long> strlen(byte[]),"[3541, 3544]","{'A1': [(3541, 3544)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> strlen(byte[] key) {
    return appendCommand(commandObjects.strlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitcount,Response<Long> bitcount(byte[]),"[3546, 3549]","{'A1': [(3546, 3549)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitcount(byte[] key) {
    return appendCommand(commandObjects.bitcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitcount,"Response<Long> bitcount(byte[],long,long)","[3551, 3554]","{'A1': [(3551, 3554)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitcount(byte[] key, long start, long end) {
    return appendCommand(commandObjects.bitcount(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitcount,"Response<Long> bitcount(byte[],long,long,BitCountOption)","[3556, 3559]","{'A1': [(3556, 3559)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitcount(byte[] key, long start, long end, BitCountOption option) {
    return appendCommand(commandObjects.bitcount(key, start, end, option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitpos,"Response<Long> bitpos(byte[],boolean)","[3561, 3564]","{'A1': [(3561, 3564)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitpos(byte[] key, boolean value) {
    return appendCommand(commandObjects.bitpos(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitpos,"Response<Long> bitpos(byte[],boolean,BitPosParams)","[3566, 3569]","{'A1': [(3566, 3569)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitpos(byte[] key, boolean value, BitPosParams params) {
    return appendCommand(commandObjects.bitpos(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitfield,Response<List<Long>> bitfield(byte[]),"[3571, 3574]","{'A1': [(3571, 3574)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> bitfield(byte[] key, byte[]... arguments) {
    return appendCommand(commandObjects.bitfield(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitfieldReadonly,Response<List<Long>> bitfieldReadonly(byte[]),"[3576, 3579]","{'A1': [(3576, 3579)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> bitfieldReadonly(byte[] key, byte[]... arguments) {
    return appendCommand(commandObjects.bitfieldReadonly(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bitop,"Response<Long> bitop(BitOP,byte[])","[3581, 3584]","{'A1': [(3581, 3584)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bitop(BitOP op, byte[] destKey, byte[]... srcKeys) {
    return appendCommand(commandObjects.bitop(op, destKey, srcKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftCreate,"Response<String> ftCreate(String,IndexOptions,Schema)","[3587, 3590]","{'A1': [(3587, 3590)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftCreate(String indexName, IndexOptions indexOptions, Schema schema) {
    return appendCommand(commandObjects.ftCreate(indexName, indexOptions, schema));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftCreate,"Response<String> ftCreate(String,FTCreateParams,Iterable<SchemaField>)","[3592, 3595]","{'A1': [(3592, 3595)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftCreate(String indexName, FTCreateParams createParams, Iterable<SchemaField> schemaFields) {
    return appendCommand(commandObjects.ftCreate(indexName, createParams, schemaFields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftAlter,"Response<String> ftAlter(String,Schema)","[3597, 3600]","{'A1': [(3597, 3600)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftAlter(String indexName, Schema schema) {
    return appendCommand(commandObjects.ftAlter(indexName, schema));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftAlter,"Response<String> ftAlter(String,Iterable<SchemaField>)","[3602, 3605]","{'A1': [(3602, 3605)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftAlter(String indexName, Iterable<SchemaField> schemaFields) {
    return appendCommand(commandObjects.ftAlter(indexName, schemaFields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftAliasAdd,"Response<String> ftAliasAdd(String,String)","[3607, 3610]","{'A1': [(3607, 3610)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftAliasAdd(String aliasName, String indexName) {
    return appendCommand(commandObjects.ftAliasAdd(aliasName, indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftAliasUpdate,"Response<String> ftAliasUpdate(String,String)","[3612, 3615]","{'A1': [(3612, 3615)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftAliasUpdate(String aliasName, String indexName) {
    return appendCommand(commandObjects.ftAliasUpdate(aliasName, indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftAliasDel,Response<String> ftAliasDel(String),"[3617, 3620]","{'A1': [(3617, 3620)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftAliasDel(String aliasName) {
    return appendCommand(commandObjects.ftAliasDel(aliasName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftDropIndex,Response<String> ftDropIndex(String),"[3622, 3625]","{'A1': [(3622, 3625)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftDropIndex(String indexName) {
    return appendCommand(commandObjects.ftDropIndex(indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftDropIndexDD,Response<String> ftDropIndexDD(String),"[3627, 3630]","{'A1': [(3627, 3630)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftDropIndexDD(String indexName) {
    return appendCommand(commandObjects.ftDropIndexDD(indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSearch,"Response<SearchResult> ftSearch(String,String)","[3632, 3635]","{'A1': [(3632, 3635)]}",{'A1': 1.0},A1,,"  @Override
  public Response<SearchResult> ftSearch(String indexName, String query) {
    return appendCommand(commandObjects.ftSearch(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSearch,"Response<SearchResult> ftSearch(String,String,FTSearchParams)","[3637, 3640]","{'A1': [(3637, 3640)]}",{'A1': 1.0},A1,,"  @Override
  public Response<SearchResult> ftSearch(String indexName, String query, FTSearchParams searchParams) {
    return appendCommand(commandObjects.ftSearch(indexName, query, searchParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSearch,"Response<SearchResult> ftSearch(String,Query)","[3642, 3645]","{'A1': [(3642, 3645)]}",{'A1': 1.0},A1,,"  @Override
  public Response<SearchResult> ftSearch(String indexName, Query query) {
    return appendCommand(commandObjects.ftSearch(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSearch,"Response<SearchResult> ftSearch(byte[],Query)","[3647, 3651]","{'A1': [(3647, 3651)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Response<SearchResult> ftSearch(byte[] indexName, Query query) {
    return appendCommand(commandObjects.ftSearch(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftExplain,"Response<String> ftExplain(String,Query)","[3653, 3656]","{'A1': [(3653, 3656)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftExplain(String indexName, Query query) {
    return appendCommand(commandObjects.ftExplain(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftExplainCLI,"Response<List<String>> ftExplainCLI(String,Query)","[3658, 3661]","{'A1': [(3658, 3661)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> ftExplainCLI(String indexName, Query query) {
    return appendCommand(commandObjects.ftExplainCLI(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftAggregate,"Response<AggregationResult> ftAggregate(String,AggregationBuilder)","[3663, 3666]","{'A1': [(3663, 3666)]}",{'A1': 1.0},A1,,"  @Override
  public Response<AggregationResult> ftAggregate(String indexName, AggregationBuilder aggr) {
    return appendCommand(commandObjects.ftAggregate(indexName, aggr));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSynUpdate,"Response<String> ftSynUpdate(String,String)","[3668, 3671]","{'A1': [(3668, 3671)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> ftSynUpdate(String indexName, String synonymGroupId, String... terms) {
    return appendCommand(commandObjects.ftSynUpdate(indexName, synonymGroupId, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSynDump,"Response<Map<String, List<String>>> ftSynDump(String)","[3673, 3676]","{'A1': [(3673, 3676)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, List<String>>> ftSynDump(String indexName) {
    return appendCommand(commandObjects.ftSynDump(indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftDictAdd,Response<Long> ftDictAdd(String),"[3678, 3681]","{'A1': [(3678, 3681)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> ftDictAdd(String dictionary, String... terms) {
    return appendCommand(commandObjects.ftDictAdd(dictionary, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftDictDel,Response<Long> ftDictDel(String),"[3683, 3686]","{'A1': [(3683, 3686)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> ftDictDel(String dictionary, String... terms) {
    return appendCommand(commandObjects.ftDictDel(dictionary, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftDictDump,Response<Set<String>> ftDictDump(String),"[3688, 3691]","{'A1': [(3688, 3691)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> ftDictDump(String dictionary) {
    return appendCommand(commandObjects.ftDictDump(dictionary));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftDictAddBySampleKey,"Response<Long> ftDictAddBySampleKey(String,String)","[3693, 3696]","{'A1': [(3693, 3696)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> ftDictAddBySampleKey(String indexName, String dictionary, String... terms) {
    return appendCommand(commandObjects.ftDictAddBySampleKey(indexName, dictionary, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftDictDelBySampleKey,"Response<Long> ftDictDelBySampleKey(String,String)","[3698, 3701]","{'A1': [(3698, 3701)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> ftDictDelBySampleKey(String indexName, String dictionary, String... terms) {
    return appendCommand(commandObjects.ftDictDelBySampleKey(indexName, dictionary, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftDictDumpBySampleKey,"Response<Set<String>> ftDictDumpBySampleKey(String,String)","[3703, 3706]","{'A1': [(3703, 3706)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> ftDictDumpBySampleKey(String indexName, String dictionary) {
    return appendCommand(commandObjects.ftDictDumpBySampleKey(indexName, dictionary));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSpellCheck,"Response<Map<String, Map<String, Double>>> ftSpellCheck(String,String)","[3708, 3711]","{'A1': [(3708, 3711)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, Map<String, Double>>> ftSpellCheck(String index, String query) {
    return appendCommand(commandObjects.ftSpellCheck(index, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSpellCheck,"Response<Map<String, Map<String, Double>>> ftSpellCheck(String,String,FTSpellCheckParams)","[3713, 3716]","{'A1': [(3713, 3716)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, Map<String, Double>>> ftSpellCheck(String index, String query, FTSpellCheckParams spellCheckParams) {
    return appendCommand(commandObjects.ftSpellCheck(index, query, spellCheckParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftInfo,"Response<Map<String, Object>> ftInfo(String)","[3718, 3721]","{'A1': [(3718, 3721)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, Object>> ftInfo(String indexName) {
    return appendCommand(commandObjects.ftInfo(indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftTagVals,"Response<Set<String>> ftTagVals(String,String)","[3723, 3726]","{'A1': [(3723, 3726)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Set<String>> ftTagVals(String indexName, String fieldName) {
    return appendCommand(commandObjects.ftTagVals(indexName, fieldName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftConfigGet,"Response<Map<String, Object>> ftConfigGet(String)","[3728, 3732]","{'A1': [(3728, 3732)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Response<Map<String, Object>> ftConfigGet(String option) {
    return appendCommand(commandObjects.ftConfigGet(option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftConfigGet,"Response<Map<String, Object>> ftConfigGet(String,String)","[3734, 3738]","{'A1': [(3734, 3738)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Response<Map<String, Object>> ftConfigGet(String indexName, String option) {
    return appendCommand(commandObjects.ftConfigGet(indexName, option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftConfigSet,"Response<String> ftConfigSet(String,String)","[3740, 3744]","{'A1': [(3740, 3744)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Response<String> ftConfigSet(String option, String value) {
    return appendCommand(commandObjects.ftConfigSet(option, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftConfigSet,"Response<String> ftConfigSet(String,String,String)","[3746, 3750]","{'A1': [(3746, 3750)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Response<String> ftConfigSet(String indexName, String option, String value) {
    return appendCommand(commandObjects.ftConfigSet(indexName, option, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSugAdd,"Response<Long> ftSugAdd(String,String,double)","[3752, 3755]","{'A1': [(3752, 3755)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> ftSugAdd(String key, String string, double score) {
    return appendCommand(commandObjects.ftSugAdd(key, string, score));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSugAddIncr,"Response<Long> ftSugAddIncr(String,String,double)","[3757, 3760]","{'A1': [(3757, 3760)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> ftSugAddIncr(String key, String string, double score) {
    return appendCommand(commandObjects.ftSugAddIncr(key, string, score));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSugGet,"Response<List<String>> ftSugGet(String,String)","[3762, 3765]","{'A1': [(3762, 3765)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> ftSugGet(String key, String prefix) {
    return appendCommand(commandObjects.ftSugGet(key, prefix));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSugGet,"Response<List<String>> ftSugGet(String,String,boolean,int)","[3767, 3770]","{'A1': [(3767, 3770)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> ftSugGet(String key, String prefix, boolean fuzzy, int max) {
    return appendCommand(commandObjects.ftSugGet(key, prefix, fuzzy, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSugGetWithScores,"Response<List<Tuple>> ftSugGetWithScores(String,String)","[3772, 3775]","{'A1': [(3772, 3775)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> ftSugGetWithScores(String key, String prefix) {
    return appendCommand(commandObjects.ftSugGetWithScores(key, prefix));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSugGetWithScores,"Response<List<Tuple>> ftSugGetWithScores(String,String,boolean,int)","[3777, 3780]","{'A1': [(3777, 3780)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Tuple>> ftSugGetWithScores(String key, String prefix, boolean fuzzy, int max) {
    return appendCommand(commandObjects.ftSugGetWithScores(key, prefix, fuzzy, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSugDel,"Response<Boolean> ftSugDel(String,String)","[3782, 3785]","{'A1': [(3782, 3785)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> ftSugDel(String key, String string) {
    return appendCommand(commandObjects.ftSugDel(key, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,ftSugLen,Response<Long> ftSugLen(String),"[3787, 3790]","{'A1': [(3787, 3790)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> ftSugLen(String key) {
    return appendCommand(commandObjects.ftSugLen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,lcs,"Response<LCSMatchResult> lcs(byte[],byte[],LCSParams)","[3794, 3797]","{'A1': [(3794, 3797)]}",{'A1': 1.0},A1,,"  @Override
  public Response<LCSMatchResult> lcs(byte[] keyA, byte[] keyB, LCSParams params) {
    return appendCommand(commandObjects.lcs(keyA, keyB, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonSet,"Response<String> jsonSet(String,Path2,Object)","[3799, 3802]","{'A1': [(3799, 3802)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> jsonSet(String key, Path2 path, Object object) {
    return appendCommand(commandObjects.jsonSet(key, path, object));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonSetWithEscape,"Response<String> jsonSetWithEscape(String,Path2,Object)","[3804, 3807]","{'A1': [(3804, 3807)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> jsonSetWithEscape(String key, Path2 path, Object object) {
    return appendCommand(commandObjects.jsonSetWithEscape(key, path, object));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonSet,"Response<String> jsonSet(String,Path,Object)","[3809, 3812]","{'A1': [(3809, 3812)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> jsonSet(String key, Path path, Object object) {
    return appendCommand(commandObjects.jsonSet(key, path, object));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonSet,"Response<String> jsonSet(String,Path2,Object,JsonSetParams)","[3814, 3817]","{'A1': [(3814, 3817)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> jsonSet(String key, Path2 path, Object object, JsonSetParams params) {
    return appendCommand(commandObjects.jsonSet(key, path, object, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonSetWithEscape,"Response<String> jsonSetWithEscape(String,Path2,Object,JsonSetParams)","[3819, 3822]","{'A1': [(3819, 3822)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> jsonSetWithEscape(String key, Path2 path, Object object, JsonSetParams params) {
    return appendCommand(commandObjects.jsonSetWithEscape(key, path, object, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonSet,"Response<String> jsonSet(String,Path,Object,JsonSetParams)","[3824, 3827]","{'A1': [(3824, 3827)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> jsonSet(String key, Path path, Object object, JsonSetParams params) {
    return appendCommand(commandObjects.jsonSet(key, path, object, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonMerge,"Response<String> jsonMerge(String,Path2,Object)","[3829, 3832]","{'A1': [(3829, 3832)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> jsonMerge(String key, Path2 path, Object object) {
    return appendCommand(commandObjects.jsonMerge(key, path, object));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonMerge,"Response<String> jsonMerge(String,Path,Object)","[3834, 3837]","{'A1': [(3834, 3837)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> jsonMerge(String key, Path path, Object object) {
    return appendCommand(commandObjects.jsonMerge(key, path, object));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonGet,Response<Object> jsonGet(String),"[3839, 3842]","{'A1': [(3839, 3842)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> jsonGet(String key) {
    return appendCommand(commandObjects.jsonGet(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonGet,"Response<T> jsonGet(String,Class<T>)","[3844, 3847]","{'A1': [(3844, 3847)]}",{'A1': 1.0},A1,,"  @Override
  public <T> Response<T> jsonGet(String key, Class<T> clazz) {
    return appendCommand(commandObjects.jsonGet(key, clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonGet,Response<Object> jsonGet(String),"[3849, 3852]","{'A1': [(3849, 3852)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> jsonGet(String key, Path2... paths) {
    return appendCommand(commandObjects.jsonGet(key, paths));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonGet,Response<Object> jsonGet(String),"[3854, 3857]","{'A1': [(3854, 3857)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> jsonGet(String key, Path... paths) {
    return appendCommand(commandObjects.jsonGet(key, paths));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonGet,"Response<T> jsonGet(String,Class<T>)","[3859, 3862]","{'A1': [(3859, 3862)]}",{'A1': 1.0},A1,,"  @Override
  public <T> Response<T> jsonGet(String key, Class<T> clazz, Path... paths) {
    return appendCommand(commandObjects.jsonGet(key, clazz, paths));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonMGet,Response<List<JSONArray>> jsonMGet(Path2),"[3864, 3867]","{'A1': [(3864, 3867)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<JSONArray>> jsonMGet(Path2 path, String... keys) {
    return appendCommand(commandObjects.jsonMGet(path, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonMGet,"Response<List<T>> jsonMGet(Path,Class<T>)","[3869, 3872]","{'A1': [(3869, 3872)]}",{'A1': 1.0},A1,,"  @Override
  public <T> Response<List<T>> jsonMGet(Path path, Class<T> clazz, String... keys) {
    return appendCommand(commandObjects.jsonMGet(path, clazz, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonDel,Response<Long> jsonDel(String),"[3874, 3877]","{'A1': [(3874, 3877)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonDel(String key) {
    return appendCommand(commandObjects.jsonDel(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonDel,"Response<Long> jsonDel(String,Path2)","[3879, 3882]","{'A1': [(3879, 3882)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonDel(String key, Path2 path) {
    return appendCommand(commandObjects.jsonDel(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonDel,"Response<Long> jsonDel(String,Path)","[3884, 3887]","{'A1': [(3884, 3887)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonDel(String key, Path path) {
    return appendCommand(commandObjects.jsonDel(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonClear,Response<Long> jsonClear(String),"[3889, 3892]","{'A1': [(3889, 3892)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonClear(String key) {
    return appendCommand(commandObjects.jsonClear(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonClear,"Response<Long> jsonClear(String,Path2)","[3894, 3897]","{'A1': [(3894, 3897)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonClear(String key, Path2 path) {
    return appendCommand(commandObjects.jsonClear(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonClear,"Response<Long> jsonClear(String,Path)","[3899, 3902]","{'A1': [(3899, 3902)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonClear(String key, Path path) {
    return appendCommand(commandObjects.jsonClear(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonToggle,"Response<List<Boolean>> jsonToggle(String,Path2)","[3904, 3907]","{'A1': [(3904, 3907)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> jsonToggle(String key, Path2 path) {
    return appendCommand(commandObjects.jsonToggle(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonToggle,"Response<String> jsonToggle(String,Path)","[3909, 3912]","{'A1': [(3909, 3912)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> jsonToggle(String key, Path path) {
    return appendCommand(commandObjects.jsonToggle(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonType,Response<Class<?>> jsonType(String),"[3914, 3917]","{'A1': [(3914, 3917)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Class<?>> jsonType(String key) {
    return appendCommand(commandObjects.jsonType(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonType,"Response<List<Class<?>>> jsonType(String,Path2)","[3919, 3922]","{'A1': [(3919, 3922)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Class<?>>> jsonType(String key, Path2 path) {
    return appendCommand(commandObjects.jsonType(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonType,"Response<Class<?>> jsonType(String,Path)","[3924, 3927]","{'A1': [(3924, 3927)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Class<?>> jsonType(String key, Path path) {
    return appendCommand(commandObjects.jsonType(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonStrAppend,"Response<Long> jsonStrAppend(String,Object)","[3929, 3932]","{'A1': [(3929, 3932)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonStrAppend(String key, Object string) {
    return appendCommand(commandObjects.jsonStrAppend(key, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonStrAppend,"Response<List<Long>> jsonStrAppend(String,Path2,Object)","[3934, 3937]","{'A1': [(3934, 3937)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonStrAppend(String key, Path2 path, Object string) {
    return appendCommand(commandObjects.jsonStrAppend(key, path, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonStrAppend,"Response<Long> jsonStrAppend(String,Path,Object)","[3939, 3942]","{'A1': [(3939, 3942)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonStrAppend(String key, Path path, Object string) {
    return appendCommand(commandObjects.jsonStrAppend(key, path, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonStrLen,Response<Long> jsonStrLen(String),"[3944, 3947]","{'A1': [(3944, 3947)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonStrLen(String key) {
    return appendCommand(commandObjects.jsonStrLen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonStrLen,"Response<List<Long>> jsonStrLen(String,Path2)","[3949, 3952]","{'A1': [(3949, 3952)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonStrLen(String key, Path2 path) {
    return appendCommand(commandObjects.jsonStrLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonStrLen,"Response<Long> jsonStrLen(String,Path)","[3954, 3957]","{'A1': [(3954, 3957)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonStrLen(String key, Path path) {
    return appendCommand(commandObjects.jsonStrLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonNumIncrBy,"Response<Object> jsonNumIncrBy(String,Path2,double)","[3959, 3962]","{'A1': [(3959, 3962)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> jsonNumIncrBy(String key, Path2 path, double value) {
    return appendCommand(commandObjects.jsonNumIncrBy(key, path, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonNumIncrBy,"Response<Double> jsonNumIncrBy(String,Path,double)","[3964, 3967]","{'A1': [(3964, 3967)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> jsonNumIncrBy(String key, Path path, double value) {
    return appendCommand(commandObjects.jsonNumIncrBy(key, path, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrAppend,"Response<List<Long>> jsonArrAppend(String,Path2)","[3969, 3972]","{'A1': [(3969, 3972)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonArrAppend(String key, Path2 path, Object... objects) {
    return appendCommand(commandObjects.jsonArrAppend(key, path, objects));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrAppendWithEscape,"Response<List<Long>> jsonArrAppendWithEscape(String,Path2)","[3974, 3977]","{'A1': [(3974, 3977)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonArrAppendWithEscape(String key, Path2 path, Object... objects) {
    return appendCommand(commandObjects.jsonArrAppendWithEscape(key, path, objects));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrAppend,"Response<Long> jsonArrAppend(String,Path)","[3979, 3982]","{'A1': [(3979, 3982)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonArrAppend(String key, Path path, Object... objects) {
    return appendCommand(commandObjects.jsonArrAppend(key, path, objects));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrIndex,"Response<List<Long>> jsonArrIndex(String,Path2,Object)","[3984, 3987]","{'A1': [(3984, 3987)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonArrIndex(String key, Path2 path, Object scalar) {
    return appendCommand(commandObjects.jsonArrIndex(key, path, scalar));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrIndexWithEscape,"Response<List<Long>> jsonArrIndexWithEscape(String,Path2,Object)","[3989, 3992]","{'A1': [(3989, 3992)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonArrIndexWithEscape(String key, Path2 path, Object scalar) {
    return appendCommand(commandObjects.jsonArrIndexWithEscape(key, path, scalar));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrIndex,"Response<Long> jsonArrIndex(String,Path,Object)","[3994, 3997]","{'A1': [(3994, 3997)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonArrIndex(String key, Path path, Object scalar) {
    return appendCommand(commandObjects.jsonArrIndex(key, path, scalar));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrInsert,"Response<List<Long>> jsonArrInsert(String,Path2,int)","[3999, 4002]","{'A1': [(3999, 4002)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonArrInsert(String key, Path2 path, int index, Object... objects) {
    return appendCommand(commandObjects.jsonArrInsert(key, path, index, objects));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrInsertWithEscape,"Response<List<Long>> jsonArrInsertWithEscape(String,Path2,int)","[4004, 4007]","{'A1': [(4004, 4007)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonArrInsertWithEscape(String key, Path2 path, int index, Object... objects) {
    return appendCommand(commandObjects.jsonArrInsertWithEscape(key, path, index, objects));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrInsert,"Response<Long> jsonArrInsert(String,Path,int)","[4009, 4012]","{'A1': [(4009, 4012)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonArrInsert(String key, Path path, int index, Object... pojos) {
    return appendCommand(commandObjects.jsonArrInsert(key, path, index, pojos));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrPop,Response<Object> jsonArrPop(String),"[4014, 4017]","{'A1': [(4014, 4017)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> jsonArrPop(String key) {
    return appendCommand(commandObjects.jsonArrPop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrLen,"Response<Long> jsonArrLen(String,Path)","[4019, 4022]","{'A1': [(4019, 4022)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonArrLen(String key, Path path) {
    return appendCommand(commandObjects.jsonArrLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrTrim,"Response<List<Long>> jsonArrTrim(String,Path2,int,int)","[4024, 4027]","{'A1': [(4024, 4027)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonArrTrim(String key, Path2 path, int start, int stop) {
    return appendCommand(commandObjects.jsonArrTrim(key, path, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrTrim,"Response<Long> jsonArrTrim(String,Path,int,int)","[4029, 4032]","{'A1': [(4029, 4032)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonArrTrim(String key, Path path, int start, int stop) {
    return appendCommand(commandObjects.jsonArrTrim(key, path, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrPop,"Response<T> jsonArrPop(String,Class<T>,Path)","[4034, 4037]","{'A1': [(4034, 4037)]}",{'A1': 1.0},A1,,"  @Override
  public <T> Response<T> jsonArrPop(String key, Class<T> clazz, Path path) {
    return appendCommand(commandObjects.jsonArrPop(key, clazz, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrPop,"Response<List<Object>> jsonArrPop(String,Path2,int)","[4039, 4042]","{'A1': [(4039, 4042)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> jsonArrPop(String key, Path2 path, int index) {
    return appendCommand(commandObjects.jsonArrPop(key, path, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrPop,"Response<Object> jsonArrPop(String,Path,int)","[4044, 4047]","{'A1': [(4044, 4047)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> jsonArrPop(String key, Path path, int index) {
    return appendCommand(commandObjects.jsonArrPop(key, path, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrPop,"Response<T> jsonArrPop(String,Class<T>,Path,int)","[4049, 4052]","{'A1': [(4049, 4052)]}",{'A1': 1.0},A1,,"  @Override
  public <T> Response<T> jsonArrPop(String key, Class<T> clazz, Path path, int index) {
    return appendCommand(commandObjects.jsonArrPop(key, clazz, path, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrLen,Response<Long> jsonArrLen(String),"[4054, 4057]","{'A1': [(4054, 4057)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> jsonArrLen(String key) {
    return appendCommand(commandObjects.jsonArrLen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrLen,"Response<List<Long>> jsonArrLen(String,Path2)","[4059, 4062]","{'A1': [(4059, 4062)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> jsonArrLen(String key, Path2 path) {
    return appendCommand(commandObjects.jsonArrLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrPop,"Response<T> jsonArrPop(String,Class<T>)","[4064, 4067]","{'A1': [(4064, 4067)]}",{'A1': 1.0},A1,,"  @Override
  public <T> Response<T> jsonArrPop(String key, Class<T> clazz) {
    return appendCommand(commandObjects.jsonArrPop(key, clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrPop,"Response<List<Object>> jsonArrPop(String,Path2)","[4069, 4072]","{'A1': [(4069, 4072)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Object>> jsonArrPop(String key, Path2 path) {
    return appendCommand(commandObjects.jsonArrPop(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,jsonArrPop,"Response<Object> jsonArrPop(String,Path)","[4074, 4077]","{'A1': [(4074, 4077)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Object> jsonArrPop(String key, Path path) {
    return appendCommand(commandObjects.jsonArrPop(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsCreate,Response<String> tsCreate(String),"[4081, 4084]","{'A1': [(4081, 4084)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tsCreate(String key) {
    return appendCommand(commandObjects.tsCreate(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsCreate,"Response<String> tsCreate(String,TSCreateParams)","[4086, 4089]","{'A1': [(4086, 4089)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tsCreate(String key, TSCreateParams createParams) {
    return appendCommand(commandObjects.tsCreate(key, createParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsDel,"Response<Long> tsDel(String,long,long)","[4091, 4094]","{'A1': [(4091, 4094)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsDel(String key, long fromTimestamp, long toTimestamp) {
    return appendCommand(commandObjects.tsDel(key, fromTimestamp, toTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsAlter,"Response<String> tsAlter(String,TSAlterParams)","[4096, 4099]","{'A1': [(4096, 4099)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tsAlter(String key, TSAlterParams alterParams) {
    return appendCommand(commandObjects.tsAlter(key, alterParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsAdd,"Response<Long> tsAdd(String,double)","[4101, 4104]","{'A1': [(4101, 4104)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsAdd(String key, double value) {
    return appendCommand(commandObjects.tsAdd(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsAdd,"Response<Long> tsAdd(String,long,double)","[4106, 4109]","{'A1': [(4106, 4109)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsAdd(String key, long timestamp, double value) {
    return appendCommand(commandObjects.tsAdd(key, timestamp, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsAdd,"Response<Long> tsAdd(String,long,double,TSCreateParams)","[4111, 4114]","{'A1': [(4111, 4114)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsAdd(String key, long timestamp, double value, TSCreateParams createParams) {
    return appendCommand(commandObjects.tsAdd(key, timestamp, value, createParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsAdd,"Response<Long> tsAdd(String,long,double,TSAddParams)","[4116, 4119]","{'A1': [(4116, 4119)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsAdd(String key, long timestamp, double value, TSAddParams addParams) {
    return appendCommand(commandObjects.tsAdd(key, timestamp, value, addParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsMAdd,Response<List<Long>> tsMAdd(),"[4121, 4124]","{'A1': [(4121, 4124)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> tsMAdd(Map.Entry<String, TSElement>... entries) {
    return appendCommand(commandObjects.tsMAdd(entries));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsIncrBy,"Response<Long> tsIncrBy(String,double)","[4126, 4129]","{'A1': [(4126, 4129)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsIncrBy(String key, double value) {
    return appendCommand(commandObjects.tsIncrBy(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsIncrBy,"Response<Long> tsIncrBy(String,double,long)","[4131, 4134]","{'A1': [(4131, 4134)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsIncrBy(String key, double value, long timestamp) {
    return appendCommand(commandObjects.tsIncrBy(key, value, timestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsIncrBy,"Response<Long> tsIncrBy(String,double,TSIncrByParams)","[4136, 4139]","{'A1': [(4136, 4139)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsIncrBy(String key, double addend, TSIncrByParams incrByParams) {
    return appendCommand(commandObjects.tsIncrBy(key, addend, incrByParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsDecrBy,"Response<Long> tsDecrBy(String,double)","[4141, 4144]","{'A1': [(4141, 4144)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsDecrBy(String key, double value) {
    return appendCommand(commandObjects.tsDecrBy(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsDecrBy,"Response<Long> tsDecrBy(String,double,long)","[4146, 4149]","{'A1': [(4146, 4149)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsDecrBy(String key, double value, long timestamp) {
    return appendCommand(commandObjects.tsDecrBy(key, value, timestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsDecrBy,"Response<Long> tsDecrBy(String,double,TSDecrByParams)","[4151, 4154]","{'A1': [(4151, 4154)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> tsDecrBy(String key, double subtrahend, TSDecrByParams decrByParams) {
    return appendCommand(commandObjects.tsDecrBy(key, subtrahend, decrByParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsRange,"Response<List<TSElement>> tsRange(String,long,long)","[4156, 4159]","{'A1': [(4156, 4159)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<TSElement>> tsRange(String key, long fromTimestamp, long toTimestamp) {
    return appendCommand(commandObjects.tsRange(key, fromTimestamp, toTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsRange,"Response<List<TSElement>> tsRange(String,TSRangeParams)","[4161, 4164]","{'A1': [(4161, 4164)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<TSElement>> tsRange(String key, TSRangeParams rangeParams) {
    return appendCommand(commandObjects.tsRange(key, rangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsRevRange,"Response<List<TSElement>> tsRevRange(String,long,long)","[4166, 4169]","{'A1': [(4166, 4169)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<TSElement>> tsRevRange(String key, long fromTimestamp, long toTimestamp) {
    return appendCommand(commandObjects.tsRevRange(key, fromTimestamp, toTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsRevRange,"Response<List<TSElement>> tsRevRange(String,TSRangeParams)","[4171, 4174]","{'A1': [(4171, 4174)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<TSElement>> tsRevRange(String key, TSRangeParams rangeParams) {
    return appendCommand(commandObjects.tsRevRange(key, rangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsMRange,"Response<Map<String, TSMRangeElements>> tsMRange(long,long)","[4176, 4179]","{'A1': [(4176, 4179)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, TSMRangeElements>> tsMRange(long fromTimestamp, long toTimestamp, String... filters) {
    return appendCommand(commandObjects.tsMRange(fromTimestamp, toTimestamp, filters));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsMRange,"Response<Map<String, TSMRangeElements>> tsMRange(TSMRangeParams)","[4181, 4184]","{'A1': [(4181, 4184)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, TSMRangeElements>> tsMRange(TSMRangeParams multiRangeParams) {
    return appendCommand(commandObjects.tsMRange(multiRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsMRevRange,"Response<Map<String, TSMRangeElements>> tsMRevRange(long,long)","[4186, 4189]","{'A1': [(4186, 4189)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, TSMRangeElements>> tsMRevRange(long fromTimestamp, long toTimestamp, String... filters) {
    return appendCommand(commandObjects.tsMRevRange(fromTimestamp, toTimestamp, filters));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsMRevRange,"Response<Map<String, TSMRangeElements>> tsMRevRange(TSMRangeParams)","[4191, 4194]","{'A1': [(4191, 4194)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, TSMRangeElements>> tsMRevRange(TSMRangeParams multiRangeParams) {
    return appendCommand(commandObjects.tsMRevRange(multiRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsGet,Response<TSElement> tsGet(String),"[4196, 4199]","{'A1': [(4196, 4199)]}",{'A1': 1.0},A1,,"  @Override
  public Response<TSElement> tsGet(String key) {
    return appendCommand(commandObjects.tsGet(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsGet,"Response<TSElement> tsGet(String,TSGetParams)","[4201, 4204]","{'A1': [(4201, 4204)]}",{'A1': 1.0},A1,,"  @Override
  public Response<TSElement> tsGet(String key, TSGetParams getParams) {
    return appendCommand(commandObjects.tsGet(key, getParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsMGet,"Response<Map<String, TSMGetElement>> tsMGet(TSMGetParams)","[4206, 4209]","{'A1': [(4206, 4209)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, TSMGetElement>> tsMGet(TSMGetParams multiGetParams, String... filters) {
    return appendCommand(commandObjects.tsMGet(multiGetParams, filters));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsCreateRule,"Response<String> tsCreateRule(String,String,AggregationType,long)","[4211, 4214]","{'A1': [(4211, 4214)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tsCreateRule(String sourceKey, String destKey, AggregationType aggregationType, long timeBucket) {
    return appendCommand(commandObjects.tsCreateRule(sourceKey, destKey, aggregationType, timeBucket));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsCreateRule,"Response<String> tsCreateRule(String,String,AggregationType,long,long)","[4216, 4219]","{'A1': [(4216, 4219)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tsCreateRule(String sourceKey, String destKey, AggregationType aggregationType, long bucketDuration, long alignTimestamp) {
    return appendCommand(commandObjects.tsCreateRule(sourceKey, destKey, aggregationType, bucketDuration, alignTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsDeleteRule,"Response<String> tsDeleteRule(String,String)","[4221, 4224]","{'A1': [(4221, 4224)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tsDeleteRule(String sourceKey, String destKey) {
    return appendCommand(commandObjects.tsDeleteRule(sourceKey, destKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsQueryIndex,Response<List<String>> tsQueryIndex(),"[4226, 4229]","{'A1': [(4226, 4229)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> tsQueryIndex(String... filters) {
    return appendCommand(commandObjects.tsQueryIndex(filters));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsInfo,Response<TSInfo> tsInfo(String),"[4231, 4234]","{'A40': [(4231, 4234)]}",{'A40': 1.0},A40,,"  @Override
  public Response<TSInfo> tsInfo(String key) {
    return appendCommand(commandObjects.tsInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tsInfoDebug,Response<TSInfo> tsInfoDebug(String),"[4236, 4239]","{'A40': [(4236, 4239)]}",{'A40': 1.0},A40,,"  @Override
  public Response<TSInfo> tsInfoDebug(String key) {
    return appendCommand(commandObjects.tsInfoDebug(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfReserve,"Response<String> bfReserve(String,double,long)","[4243, 4246]","{'A1': [(4243, 4246)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> bfReserve(String key, double errorRate, long capacity) {
    return appendCommand(commandObjects.bfReserve(key, errorRate, capacity));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfReserve,"Response<String> bfReserve(String,double,long,BFReserveParams)","[4248, 4251]","{'A1': [(4248, 4251)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> bfReserve(String key, double errorRate, long capacity, BFReserveParams reserveParams) {
    return appendCommand(commandObjects.bfReserve(key, errorRate, capacity, reserveParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfAdd,"Response<Boolean> bfAdd(String,String)","[4253, 4256]","{'A1': [(4253, 4256)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> bfAdd(String key, String item) {
    return appendCommand(commandObjects.bfAdd(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfMAdd,Response<List<Boolean>> bfMAdd(String),"[4258, 4261]","{'A1': [(4258, 4261)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> bfMAdd(String key, String... items) {
    return appendCommand(commandObjects.bfMAdd(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfInsert,Response<List<Boolean>> bfInsert(String),"[4263, 4266]","{'A1': [(4263, 4266)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> bfInsert(String key, String... items) {
    return appendCommand(commandObjects.bfInsert(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfInsert,"Response<List<Boolean>> bfInsert(String,BFInsertParams)","[4268, 4271]","{'A1': [(4268, 4271)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> bfInsert(String key, BFInsertParams insertParams, String... items) {
    return appendCommand(commandObjects.bfInsert(key, insertParams, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfExists,"Response<Boolean> bfExists(String,String)","[4273, 4276]","{'A1': [(4273, 4276)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> bfExists(String key, String item) {
    return appendCommand(commandObjects.bfExists(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfMExists,Response<List<Boolean>> bfMExists(String),"[4278, 4281]","{'A1': [(4278, 4281)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> bfMExists(String key, String... items) {
    return appendCommand(commandObjects.bfMExists(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfScanDump,"Response<Map.Entry<Long, byte[]>> bfScanDump(String,long)","[4283, 4286]","{'A1': [(4283, 4286)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map.Entry<Long, byte[]>> bfScanDump(String key, long iterator) {
    return appendCommand(commandObjects.bfScanDump(key, iterator));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfLoadChunk,"Response<String> bfLoadChunk(String,long,byte[])","[4288, 4291]","{'A1': [(4288, 4291)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> bfLoadChunk(String key, long iterator, byte[] data) {
    return appendCommand(commandObjects.bfLoadChunk(key, iterator, data));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfCard,Response<Long> bfCard(String),"[4293, 4296]","{'A1': [(4293, 4296)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> bfCard(String key) {
    return appendCommand(commandObjects.bfCard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,bfInfo,"Response<Map<String, Object>> bfInfo(String)","[4298, 4301]","{'A1': [(4298, 4301)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, Object>> bfInfo(String key) {
    return appendCommand(commandObjects.bfInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfReserve,"Response<String> cfReserve(String,long)","[4303, 4306]","{'A1': [(4303, 4306)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> cfReserve(String key, long capacity) {
    return appendCommand(commandObjects.cfReserve(key, capacity));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfReserve,"Response<String> cfReserve(String,long,CFReserveParams)","[4308, 4311]","{'A1': [(4308, 4311)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> cfReserve(String key, long capacity, CFReserveParams reserveParams) {
    return appendCommand(commandObjects.cfReserve(key, capacity, reserveParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfAdd,"Response<Boolean> cfAdd(String,String)","[4313, 4316]","{'A1': [(4313, 4316)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> cfAdd(String key, String item) {
    return appendCommand(commandObjects.cfAdd(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfAddNx,"Response<Boolean> cfAddNx(String,String)","[4318, 4321]","{'A1': [(4318, 4321)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> cfAddNx(String key, String item) {
    return appendCommand(commandObjects.cfAddNx(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfInsert,Response<List<Boolean>> cfInsert(String),"[4323, 4326]","{'A1': [(4323, 4326)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> cfInsert(String key, String... items) {
    return appendCommand(commandObjects.cfInsert(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfInsert,"Response<List<Boolean>> cfInsert(String,CFInsertParams)","[4328, 4331]","{'A1': [(4328, 4331)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> cfInsert(String key, CFInsertParams insertParams, String... items) {
    return appendCommand(commandObjects.cfInsert(key, insertParams, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfInsertNx,Response<List<Boolean>> cfInsertNx(String),"[4333, 4336]","{'A1': [(4333, 4336)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> cfInsertNx(String key, String... items) {
    return appendCommand(commandObjects.cfInsertNx(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfInsertNx,"Response<List<Boolean>> cfInsertNx(String,CFInsertParams)","[4338, 4341]","{'A1': [(4338, 4341)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> cfInsertNx(String key, CFInsertParams insertParams, String... items) {
    return appendCommand(commandObjects.cfInsertNx(key, insertParams, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfExists,"Response<Boolean> cfExists(String,String)","[4343, 4346]","{'A1': [(4343, 4346)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> cfExists(String key, String item) {
    return appendCommand(commandObjects.cfExists(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfMExists,Response<List<Boolean>> cfMExists(String),"[4348, 4351]","{'A40': [(4348, 4351)]}",{'A40': 1.0},A40,,"  @Override
  public Response<List<Boolean>> cfMExists(String key, String... items) {
    return appendCommand(commandObjects.cfMExists(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfDel,"Response<Boolean> cfDel(String,String)","[4353, 4356]","{'A1': [(4353, 4356)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> cfDel(String key, String item) {
    return appendCommand(commandObjects.cfDel(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfCount,"Response<Long> cfCount(String,String)","[4358, 4361]","{'A1': [(4358, 4361)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> cfCount(String key, String item) {
    return appendCommand(commandObjects.cfCount(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfScanDump,"Response<Map.Entry<Long, byte[]>> cfScanDump(String,long)","[4363, 4366]","{'A1': [(4363, 4366)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map.Entry<Long, byte[]>> cfScanDump(String key, long iterator) {
    return appendCommand(commandObjects.cfScanDump(key, iterator));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfLoadChunk,"Response<String> cfLoadChunk(String,long,byte[])","[4368, 4371]","{'A1': [(4368, 4371)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> cfLoadChunk(String key, long iterator, byte[] data) {
    return appendCommand(commandObjects.cfLoadChunk(key, iterator, data));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cfInfo,"Response<Map<String, Object>> cfInfo(String)","[4373, 4376]","{'A1': [(4373, 4376)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, Object>> cfInfo(String key) {
    return appendCommand(commandObjects.cfInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cmsInitByDim,"Response<String> cmsInitByDim(String,long,long)","[4378, 4381]","{'A1': [(4378, 4381)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> cmsInitByDim(String key, long width, long depth) {
    return appendCommand(commandObjects.cmsInitByDim(key, width, depth));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cmsInitByProb,"Response<String> cmsInitByProb(String,double,double)","[4383, 4386]","{'A1': [(4383, 4386)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> cmsInitByProb(String key, double error, double probability) {
    return appendCommand(commandObjects.cmsInitByProb(key, error, probability));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cmsIncrBy,"Response<List<Long>> cmsIncrBy(String,Map<String, Long>)","[4388, 4391]","{'A1': [(4388, 4391)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> cmsIncrBy(String key, Map<String, Long> itemIncrements) {
    return appendCommand(commandObjects.cmsIncrBy(key, itemIncrements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cmsQuery,Response<List<Long>> cmsQuery(String),"[4393, 4396]","{'A1': [(4393, 4396)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> cmsQuery(String key, String... items) {
    return appendCommand(commandObjects.cmsQuery(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cmsMerge,Response<String> cmsMerge(String),"[4398, 4401]","{'A1': [(4398, 4401)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> cmsMerge(String destKey, String... keys) {
    return appendCommand(commandObjects.cmsMerge(destKey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cmsMerge,"Response<String> cmsMerge(String,Map<String, Long>)","[4403, 4406]","{'A1': [(4403, 4406)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> cmsMerge(String destKey, Map<String, Long> keysAndWeights) {
    return appendCommand(commandObjects.cmsMerge(destKey, keysAndWeights));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,cmsInfo,"Response<Map<String, Object>> cmsInfo(String)","[4408, 4411]","{'A1': [(4408, 4411)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, Object>> cmsInfo(String key) {
    return appendCommand(commandObjects.cmsInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,topkReserve,"Response<String> topkReserve(String,long)","[4413, 4416]","{'A1': [(4413, 4416)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> topkReserve(String key, long topk) {
    return appendCommand(commandObjects.topkReserve(key, topk));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,topkReserve,"Response<String> topkReserve(String,long,long,long,double)","[4418, 4421]","{'A1': [(4418, 4421)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> topkReserve(String key, long topk, long width, long depth, double decay) {
    return appendCommand(commandObjects.topkReserve(key, topk, width, depth, decay));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,topkAdd,Response<List<String>> topkAdd(String),"[4423, 4426]","{'A1': [(4423, 4426)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> topkAdd(String key, String... items) {
    return appendCommand(commandObjects.topkAdd(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,topkIncrBy,"Response<List<String>> topkIncrBy(String,Map<String, Long>)","[4428, 4431]","{'A1': [(4428, 4431)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> topkIncrBy(String key, Map<String, Long> itemIncrements) {
    return appendCommand(commandObjects.topkIncrBy(key, itemIncrements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,topkQuery,Response<List<Boolean>> topkQuery(String),"[4433, 4436]","{'A1': [(4433, 4436)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Boolean>> topkQuery(String key, String... items) {
    return appendCommand(commandObjects.topkQuery(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,topkList,Response<List<String>> topkList(String),"[4438, 4441]","{'A1': [(4438, 4441)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<String>> topkList(String key) {
    return appendCommand(commandObjects.topkList(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,topkListWithCount,"Response<Map<String, Long>> topkListWithCount(String)","[4443, 4446]","{'A1': [(4443, 4446)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, Long>> topkListWithCount(String key) {
    return appendCommand(commandObjects.topkListWithCount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,topkInfo,"Response<Map<String, Object>> topkInfo(String)","[4448, 4451]","{'A1': [(4448, 4451)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, Object>> topkInfo(String key) {
    return appendCommand(commandObjects.topkInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestCreate,Response<String> tdigestCreate(String),"[4453, 4456]","{'A1': [(4453, 4456)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tdigestCreate(String key) {
    return appendCommand(commandObjects.tdigestCreate(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestCreate,"Response<String> tdigestCreate(String,int)","[4458, 4461]","{'A1': [(4458, 4461)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tdigestCreate(String key, int compression) {
    return appendCommand(commandObjects.tdigestCreate(key, compression));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestReset,Response<String> tdigestReset(String),"[4463, 4466]","{'A1': [(4463, 4466)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tdigestReset(String key) {
    return appendCommand(commandObjects.tdigestReset(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestMerge,Response<String> tdigestMerge(String),"[4468, 4471]","{'A1': [(4468, 4471)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tdigestMerge(String destinationKey, String... sourceKeys) {
    return appendCommand(commandObjects.tdigestMerge(destinationKey, sourceKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestMerge,"Response<String> tdigestMerge(TDigestMergeParams,String)","[4473, 4476]","{'A1': [(4473, 4476)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tdigestMerge(TDigestMergeParams mergeParams, String destinationKey, String... sourceKeys) {
    return appendCommand(commandObjects.tdigestMerge(mergeParams, destinationKey, sourceKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestInfo,"Response<Map<String, Object>> tdigestInfo(String)","[4478, 4481]","{'A1': [(4478, 4481)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Map<String, Object>> tdigestInfo(String key) {
    return appendCommand(commandObjects.tdigestInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestAdd,Response<String> tdigestAdd(String),"[4483, 4486]","{'A1': [(4483, 4486)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> tdigestAdd(String key, double... values) {
    return appendCommand(commandObjects.tdigestAdd(key, values));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestCDF,Response<List<Double>> tdigestCDF(String),"[4488, 4491]","{'A1': [(4488, 4491)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Double>> tdigestCDF(String key, double... values) {
    return appendCommand(commandObjects.tdigestCDF(key, values));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestQuantile,Response<List<Double>> tdigestQuantile(String),"[4493, 4496]","{'A1': [(4493, 4496)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Double>> tdigestQuantile(String key, double... quantiles) {
    return appendCommand(commandObjects.tdigestQuantile(key, quantiles));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestMin,Response<Double> tdigestMin(String),"[4498, 4501]","{'A1': [(4498, 4501)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> tdigestMin(String key) {
    return appendCommand(commandObjects.tdigestMin(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestMax,Response<Double> tdigestMax(String),"[4503, 4506]","{'A1': [(4503, 4506)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> tdigestMax(String key) {
    return appendCommand(commandObjects.tdigestMax(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestTrimmedMean,"Response<Double> tdigestTrimmedMean(String,double,double)","[4508, 4511]","{'A1': [(4508, 4511)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Double> tdigestTrimmedMean(String key, double lowCutQuantile, double highCutQuantile) {
    return appendCommand(commandObjects.tdigestTrimmedMean(key, lowCutQuantile, highCutQuantile));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestRank,Response<List<Long>> tdigestRank(String),"[4513, 4516]","{'A1': [(4513, 4516)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> tdigestRank(String key, double... values) {
    return appendCommand(commandObjects.tdigestRank(key, values));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestRevRank,Response<List<Long>> tdigestRevRank(String),"[4518, 4521]","{'A1': [(4518, 4521)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Long>> tdigestRevRank(String key, double... values) {
    return appendCommand(commandObjects.tdigestRevRank(key, values));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestByRank,Response<List<Double>> tdigestByRank(String),"[4523, 4526]","{'A1': [(4523, 4526)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Double>> tdigestByRank(String key, long... ranks) {
    return appendCommand(commandObjects.tdigestByRank(key, ranks));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,tdigestByRevRank,Response<List<Double>> tdigestByRevRank(String),"[4528, 4531]","{'A1': [(4528, 4531)]}",{'A1': 1.0},A1,,"  @Override
  public Response<List<Double>> tdigestByRevRank(String key, long... ranks) {
    return appendCommand(commandObjects.tdigestByRevRank(key, ranks));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sendCommand,Response<Object> sendCommand(ProtocolCommand),"[4534, 4536]","{'A1': [(4534, 4536)]}",{'A1': 1.0},A1,,"  public Response<Object> sendCommand(ProtocolCommand cmd, String... args) {
    return sendCommand(new CommandArguments(cmd).addObjects((Object[]) args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sendCommand,Response<Object> sendCommand(ProtocolCommand),"[4538, 4540]","{'A1': [(4538, 4540)]}",{'A1': 1.0},A1,,"  public Response<Object> sendCommand(ProtocolCommand cmd, byte[]... args) {
    return sendCommand(new CommandArguments(cmd).addObjects((Object[]) args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,sendCommand,Response<Object> sendCommand(CommandArguments),"[4542, 4544]","{'A1': [(4542, 4544)]}",{'A1': 1.0},A1,,"  public Response<Object> sendCommand(CommandArguments args) {
    return executeCommand(new CommandObject<>(args, BuilderFactory.RAW_OBJECT));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,executeCommand,Response<T> executeCommand(CommandObject<T>),"[4546, 4548]","{'A1': [(4546, 4548)]}",{'A1': 1.0},A1,,"  public <T> Response<T> executeCommand(CommandObject<T> command) {
    return appendCommand(command);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/PipeliningBase.java,PipeliningBase,setJsonObjectMapper,void setJsonObjectMapper(JsonObjectMapper),"[4550, 4552]","{'A1': [(4550, 4552)]}",{'A1': 1.0},A1,,"  public void setJsonObjectMapper(JsonObjectMapper jsonObjectMapper) {
    this.commandObjects.setJsonObjectMapper(jsonObjectMapper);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPool.java,JedisPool,getResource,Jedis getResource(),"[376, 381]","{'A7': [(376, 381)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisPoolTest.java,"  @Override
  public Jedis getResource() {
    Jedis jedis = super.getResource();
    jedis.setDataSource(this);
    return jedis;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPool.java,JedisPool,returnResource,void returnResource(Jedis),"[383, 394]","{'A1': [(384, 384), (388, 388), (390, 391)], 'A7': [(386, 387), (392, 392), (394, 394)], 'A8': [(383, 383)], 'A42': [(385, 385)], 'A37': [(389, 389)], 'A43': [(393, 393)]}","{'A1': 0.3333333333333333, 'A7': 0.3333333333333333, 'A8': 0.08333333333333333, 'A42': 0.08333333333333333, 'A37': 0.08333333333333333, 'A43': 0.08333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPoolTest.java,"  @Override
  public void returnResource(final Jedis resource) {
    if (resource != null) {
      try {
        resource.resetState();
        super.returnResource(resource);
      } catch (RuntimeException e) {
        super.returnBrokenResource(resource);
        log.warn(""Resource is returned to the pool as broken"", e);
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultRedisCredentials.java,DefaultRedisCredentials,getUser,String getUser(),"[20, 23]","{'A1': [(20, 23)]}",{'A1': 1.0},A1,,"  @Override
  public String getUser() {
    return user;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultRedisCredentials.java,DefaultRedisCredentials,getPassword,char[] getPassword(),"[25, 28]","{'A1': [(25, 28)]}",{'A1': 1.0},A1,,"  @Override
  public char[] getPassword() {
    return password;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultRedisCredentials.java,DefaultRedisCredentials,toCharArray,char[] toCharArray(CharSequence),"[30, 37]","{'A1': [(30, 37)]}",{'A1': 1.0},A1,,"  private static char[] toCharArray(CharSequence seq) {
    final int len = seq.length();
    char[] arr = new char[len];
    for (int i = 0; i < len; i++) {
      arr[i] = seq.charAt(i);
    }
    return arr;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiNodePipelineBase.java,MultiNodePipelineBase,appendCommand,Response<T> appendCommand(CommandObject<T>),"[45, 71]","{'A1': [(45, 54), (65, 71)], 'A47': [(55, 64)]}","{'A1': 0.6296296296296297, 'A47': 0.37037037037037035}",A1,,"  @Override
  protected final <T> Response<T> appendCommand(CommandObject<T> commandObject) {
    HostAndPort nodeKey = getNodeKey(commandObject.getArguments());

    Queue<Response<?>> queue;
    Connection connection;
    if (pipelinedResponses.containsKey(nodeKey)) {
      queue = pipelinedResponses.get(nodeKey);
      connection = connections.get(nodeKey);
    } else {
      Connection newOne = getConnection(nodeKey);
      connections.putIfAbsent(nodeKey, newOne);
      connection = connections.get(nodeKey);
      if (connection != newOne) {
        log.debug(""Duplicate connection to {}, closing it."", nodeKey);
        IOUtils.closeQuietly(newOne);
      }

      pipelinedResponses.putIfAbsent(nodeKey, new LinkedList<>());
      queue = pipelinedResponses.get(nodeKey);
    }

    connection.sendCommand(commandObject.getArguments());
    Response<T> response = new Response<>(commandObject.getBuilder());
    queue.add(response);
    return response;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiNodePipelineBase.java,MultiNodePipelineBase,close,void close(),"[73, 80]","{'A1': [(73, 80)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    try {
      sync();
    } finally {
      connections.values().forEach(IOUtils::closeQuietly);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiNodePipelineBase.java,MultiNodePipelineBase,sync,void sync(),"[82, 141]","{'A1': [(82, 88), (101, 101), (104, 108), (126, 126), (136, 136), (139, 141)], 'A45': [(110, 117), (119, 122), (127, 129)], 'A46': [(89, 100), (102, 103), (109, 109), (118, 118), (123, 125), (130, 135), (137, 138)]}","{'A1': 0.3, 'A45': 0.25, 'A46': 0.45}",A46,,"  @Override
  public final void sync() {
    if (syncing) {
      return;
    }
    syncing = true;

    boolean multiNode = pipelinedResponses.size() > 1;
    Executor executor;
    ExecutorService executorService = null;
    if (multiNode) {
      executorService = Executors.newFixedThreadPool(MULTI_NODE_PIPELINE_SYNC_WORKERS);
      executor = executorService;
    } else {
      executor = Runnable::run;
    }
    CountDownLatch countDownLatch = multiNode
        ? new CountDownLatch(pipelinedResponses.size())
        : null;

    Iterator<Map.Entry<HostAndPort, Queue<Response<?>>>> pipelinedResponsesIterator = pipelinedResponses.entrySet()
        .iterator();
    while (pipelinedResponsesIterator.hasNext()) {
      Map.Entry<HostAndPort, Queue<Response<?>>> entry = pipelinedResponsesIterator.next();
      HostAndPort nodeKey = entry.getKey();
      Queue<Response<?>> queue = entry.getValue();
      Connection connection = connections.get(nodeKey);
      executor.execute(() -> {
        try {
          List<Object> unformatted = connection.getMany(queue.size());
          for (Object o : unformatted) {
            queue.poll().set(o);
          }
        } catch (JedisConnectionException jce) {
          log.error(""Error with connection to "" + nodeKey, jce);
          // cleanup the connection
          // TODO these operations not thread-safe and when executed here, the iter may moved
          pipelinedResponsesIterator.remove();
          connections.remove(nodeKey);
          IOUtils.closeQuietly(connection);
        } finally {
          if (multiNode) {
            countDownLatch.countDown();
          }
        }
      });
    }

    if (multiNode) {
      try {
        countDownLatch.await();
      } catch (InterruptedException e) {
        log.error(""Thread is interrupted during sync."", e);
      }

      executorService.shutdownNow();
    }

    syncing = false;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiNodePipelineBase.java,MultiNodePipelineBase,waitReplicas,"Response<Long> waitReplicas(int,long)","[143, 146]","{'A1': [(143, 146)]}",{'A1': 1.0},A1,,"  @Deprecated
  public Response<Long> waitReplicas(int replicas, long timeout) {
    return appendCommand(commandObjects.waitReplicas(replicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,close,void close(),"[299, 302]","{'A1': [(299, 302)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    IOUtils.closeQuietly(this.executor);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setProtocol,void setProtocol(RedisProtocol),"[304, 308]","{'A1': [(304, 308)]}",{'A1': 1.0},A1,,"  @Deprecated
  protected final void setProtocol(RedisProtocol protocol) {
    this.protocol = protocol;
    this.commandObjects.setProtocol(this.protocol);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,executeCommand,T executeCommand(CommandObject<T>),"[310, 312]","{'A1': [(310, 312)]}",{'A1': 1.0},A1,,"  public final <T> T executeCommand(CommandObject<T> commandObject) {
    return executor.executeCommand(commandObject);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,broadcastCommand,T broadcastCommand(CommandObject<T>),"[314, 316]","{'A1': [(314, 316)]}",{'A1': 1.0},A1,,"  public final <T> T broadcastCommand(CommandObject<T> commandObject) {
    return executor.broadcastCommand(commandObject);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,checkAndBroadcastCommand,T checkAndBroadcastCommand(CommandObject<T>),"[318, 329]","{'A1': [(318, 329)]}",{'A1': 1.0},A1,,"  private <T> T checkAndBroadcastCommand(CommandObject<T> commandObject) {
    boolean broadcast = true;

    if (broadcastAndRoundRobinConfig == null) {
    } else if (commandObject.getArguments().getCommand() instanceof SearchProtocol.SearchCommand
        && broadcastAndRoundRobinConfig
            .getRediSearchModeInCluster() == JedisBroadcastAndRoundRobinConfig.RediSearchMode.LIGHT) {
      broadcast = false;
    }

    return broadcast ? broadcastCommand(commandObject) : executeCommand(commandObject);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setBroadcastAndRoundRobinConfig,void setBroadcastAndRoundRobinConfig(JedisBroadcastAndRoundRobinConfig),"[331, 334]","{'A1': [(331, 334)]}",{'A1': 1.0},A1,,"  public void setBroadcastAndRoundRobinConfig(JedisBroadcastAndRoundRobinConfig config) {
    this.broadcastAndRoundRobinConfig = config;
    this.commandObjects.setBroadcastAndRoundRobinConfig(this.broadcastAndRoundRobinConfig);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getCache,Cache getCache(),"[336, 338]","{'A1': [(336, 338)]}",{'A1': 1.0},A1,,"  public Cache getCache() {
    return cache;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ping,String ping(),"[340, 342]","{'A1': [(340, 342)]}",{'A1': 1.0},A1,,"  public String ping() {
    return checkAndBroadcastCommand(commandObjects.ping());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,flushDB,String flushDB(),"[344, 346]","{'A1': [(344, 346)]}",{'A1': 1.0},A1,,"  public String flushDB() {
    return checkAndBroadcastCommand(commandObjects.flushDB());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,flushAll,String flushAll(),"[348, 350]","{'A1': [(348, 350)]}",{'A1': 1.0},A1,,"  public String flushAll() {
    return checkAndBroadcastCommand(commandObjects.flushAll());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,configSet,"String configSet(String,String)","[352, 354]","{'A1': [(352, 354)]}",{'A1': 1.0},A1,,"  public String configSet(String parameter, String value) {
    return checkAndBroadcastCommand(commandObjects.configSet(parameter, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,info,String info(),"[356, 358]","{'A1': [(356, 358)]}",{'A1': 1.0},A1,,"  public String info() {
    return executeCommand(commandObjects.info());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,info,String info(String),"[360, 362]","{'A1': [(360, 362)]}",{'A1': 1.0},A1,,"  public String info(String section) {
    return executeCommand(commandObjects.info(section));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,exists,boolean exists(String),"[365, 368]","{'A1': [(365, 368)]}",{'A1': 1.0},A1,,"  @Override
  public boolean exists(String key) {
    return executeCommand(commandObjects.exists(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,exists,long exists(),"[370, 373]","{'A1': [(370, 373)]}",{'A1': 1.0},A1,,"  @Override
  public long exists(String... keys) {
    return executeCommand(commandObjects.exists(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,persist,long persist(String),"[375, 378]","{'A1': [(375, 378)]}",{'A1': 1.0},A1,,"  @Override
  public long persist(String key) {
    return executeCommand(commandObjects.persist(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,type,String type(String),"[380, 383]","{'A1': [(380, 383)]}",{'A1': 1.0},A1,,"  @Override
  public String type(String key) {
    return executeCommand(commandObjects.type(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,exists,boolean exists(byte[]),"[385, 388]","{'A1': [(385, 388)]}",{'A1': 1.0},A1,,"  @Override
  public boolean exists(byte[] key) {
    return executeCommand(commandObjects.exists(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,exists,long exists(),"[390, 393]","{'A1': [(390, 393)]}",{'A1': 1.0},A1,,"  @Override
  public long exists(byte[]... keys) {
    return executeCommand(commandObjects.exists(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,persist,long persist(byte[]),"[395, 398]","{'A1': [(395, 398)]}",{'A1': 1.0},A1,,"  @Override
  public long persist(byte[] key) {
    return executeCommand(commandObjects.persist(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,type,String type(byte[]),"[400, 403]","{'A1': [(400, 403)]}",{'A1': 1.0},A1,,"  @Override
  public String type(byte[] key) {
    return executeCommand(commandObjects.type(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,dump,byte[] dump(String),"[405, 408]","{'A1': [(405, 408)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] dump(String key) {
    return executeCommand(commandObjects.dump(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,restore,"String restore(String,long,byte[])","[410, 413]","{'A1': [(410, 413)]}",{'A1': 1.0},A1,,"  @Override
  public String restore(String key, long ttl, byte[] serializedValue) {
    return executeCommand(commandObjects.restore(key, ttl, serializedValue));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,restore,"String restore(String,long,byte[],RestoreParams)","[415, 418]","{'A1': [(415, 418)]}",{'A1': 1.0},A1,,"  @Override
  public String restore(String key, long ttl, byte[] serializedValue, RestoreParams params) {
    return executeCommand(commandObjects.restore(key, ttl, serializedValue, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,dump,byte[] dump(byte[]),"[420, 423]","{'A1': [(420, 423)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] dump(byte[] key) {
    return executeCommand(commandObjects.dump(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,restore,"String restore(byte[],long,byte[])","[425, 428]","{'A1': [(425, 428)]}",{'A1': 1.0},A1,,"  @Override
  public String restore(byte[] key, long ttl, byte[] serializedValue) {
    return executeCommand(commandObjects.restore(key, ttl, serializedValue));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,restore,"String restore(byte[],long,byte[],RestoreParams)","[430, 433]","{'A1': [(430, 433)]}",{'A1': 1.0},A1,,"  @Override
  public String restore(byte[] key, long ttl, byte[] serializedValue, RestoreParams params) {
    return executeCommand(commandObjects.restore(key, ttl, serializedValue, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expire,"long expire(String,long)","[435, 438]","{'A1': [(435, 438)]}",{'A1': 1.0},A1,,"  @Override
  public long expire(String key, long seconds) {
    return executeCommand(commandObjects.expire(key, seconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expire,"long expire(String,long,ExpiryOption)","[440, 443]","{'A12': [(440, 443)]}",{'A12': 1.0},A12,,"  @Override
  public long expire(String key, long seconds, ExpiryOption expiryOption) {
    return executeCommand(commandObjects.expire(key, seconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpire,"long pexpire(String,long)","[445, 448]","{'A1': [(445, 448)]}",{'A1': 1.0},A1,,"  @Override
  public long pexpire(String key, long milliseconds) {
    return executeCommand(commandObjects.pexpire(key, milliseconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpire,"long pexpire(String,long,ExpiryOption)","[450, 453]","{'A12': [(450, 453)]}",{'A12': 1.0},A12,,"  @Override
  public long pexpire(String key, long milliseconds, ExpiryOption expiryOption) {
    return executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expireTime,long expireTime(String),"[455, 458]","{'A12': [(455, 458)]}",{'A12': 1.0},A12,,"  @Override
  public long expireTime(String key) {
    return executeCommand(commandObjects.expireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpireTime,long pexpireTime(String),"[460, 463]","{'A12': [(460, 463)]}",{'A12': 1.0},A12,,"  @Override
  public long pexpireTime(String key) {
    return executeCommand(commandObjects.pexpireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expireAt,"long expireAt(String,long)","[465, 468]","{'A1': [(465, 468)]}",{'A1': 1.0},A1,,"  @Override
  public long expireAt(String key, long unixTime) {
    return executeCommand(commandObjects.expireAt(key, unixTime));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expireAt,"long expireAt(String,long,ExpiryOption)","[470, 473]","{'A12': [(470, 473)]}",{'A12': 1.0},A12,,"  @Override
  public long expireAt(String key, long unixTime, ExpiryOption expiryOption) {
    return executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpireAt,"long pexpireAt(String,long)","[475, 478]","{'A1': [(475, 478)]}",{'A1': 1.0},A1,,"  @Override
  public long pexpireAt(String key, long millisecondsTimestamp) {
    return executeCommand(commandObjects.pexpireAt(key, millisecondsTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpireAt,"long pexpireAt(String,long,ExpiryOption)","[480, 483]","{'A12': [(480, 483)]}",{'A12': 1.0},A12,,"  @Override
  public long pexpireAt(String key, long millisecondsTimestamp, ExpiryOption expiryOption) {
    return executeCommand(commandObjects.pexpireAt(key, millisecondsTimestamp, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expire,"long expire(byte[],long)","[485, 488]","{'A1': [(485, 488)]}",{'A1': 1.0},A1,,"  @Override
  public long expire(byte[] key, long seconds) {
    return executeCommand(commandObjects.expire(key, seconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expire,"long expire(byte[],long,ExpiryOption)","[490, 493]","{'A12': [(490, 493)]}",{'A12': 1.0},A12,,"  @Override
  public long expire(byte[] key, long seconds, ExpiryOption expiryOption) {
    return executeCommand(commandObjects.expire(key, seconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpire,"long pexpire(byte[],long)","[495, 498]","{'A1': [(495, 498)]}",{'A1': 1.0},A1,,"  @Override
  public long pexpire(byte[] key, long milliseconds) {
    return executeCommand(commandObjects.pexpire(key, milliseconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpire,"long pexpire(byte[],long,ExpiryOption)","[500, 503]","{'A12': [(500, 503)]}",{'A12': 1.0},A12,,"  @Override
  public long pexpire(byte[] key, long milliseconds, ExpiryOption expiryOption) {
    return executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expireTime,long expireTime(byte[]),"[505, 508]","{'A12': [(505, 508)]}",{'A12': 1.0},A12,,"  @Override
  public long expireTime(byte[] key) {
    return executeCommand(commandObjects.expireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpireTime,long pexpireTime(byte[]),"[510, 513]","{'A12': [(510, 513)]}",{'A12': 1.0},A12,,"  @Override
  public long pexpireTime(byte[] key) {
    return executeCommand(commandObjects.pexpireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expireAt,"long expireAt(byte[],long)","[515, 518]","{'A1': [(515, 518)]}",{'A1': 1.0},A1,,"  @Override
  public long expireAt(byte[] key, long unixTime) {
    return executeCommand(commandObjects.expireAt(key, unixTime));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,expireAt,"long expireAt(byte[],long,ExpiryOption)","[520, 523]","{'A12': [(520, 523)]}",{'A12': 1.0},A12,,"  @Override
  public long expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {
    return executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpireAt,"long pexpireAt(byte[],long)","[525, 528]","{'A1': [(525, 528)]}",{'A1': 1.0},A1,,"  @Override
  public long pexpireAt(byte[] key, long millisecondsTimestamp) {
    return executeCommand(commandObjects.pexpireAt(key, millisecondsTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pexpireAt,"long pexpireAt(byte[],long,ExpiryOption)","[530, 533]","{'A40': [(532, 532)], 'A12': [(530, 531), (533, 533)]}","{'A40': 0.25, 'A12': 0.75}",A12,,"  @Override
  public long pexpireAt(byte[] key, long millisecondsTimestamp, ExpiryOption expiryOption) {
    return executeCommand(commandObjects.pexpireAt(key, millisecondsTimestamp, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ttl,long ttl(String),"[535, 538]","{'A1': [(535, 538)]}",{'A1': 1.0},A1,,"  @Override
  public long ttl(String key) {
    return executeCommand(commandObjects.ttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pttl,long pttl(String),"[540, 543]","{'A1': [(540, 543)]}",{'A1': 1.0},A1,,"  @Override
  public long pttl(String key) {
    return executeCommand(commandObjects.pttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,touch,long touch(String),"[545, 548]","{'A1': [(545, 548)]}",{'A1': 1.0},A1,,"  @Override
  public long touch(String key) {
    return executeCommand(commandObjects.touch(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,touch,long touch(),"[550, 553]","{'A1': [(550, 553)]}",{'A1': 1.0},A1,,"  @Override
  public long touch(String... keys) {
    return executeCommand(commandObjects.touch(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ttl,long ttl(byte[]),"[555, 558]","{'A1': [(555, 558)]}",{'A1': 1.0},A1,,"  @Override
  public long ttl(byte[] key) {
    return executeCommand(commandObjects.ttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pttl,long pttl(byte[]),"[560, 563]","{'A1': [(560, 563)]}",{'A1': 1.0},A1,,"  @Override
  public long pttl(byte[] key) {
    return executeCommand(commandObjects.pttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,touch,long touch(byte[]),"[565, 568]","{'A1': [(565, 568)]}",{'A1': 1.0},A1,,"  @Override
  public long touch(byte[] key) {
    return executeCommand(commandObjects.touch(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,touch,long touch(),"[570, 573]","{'A1': [(570, 573)]}",{'A1': 1.0},A1,,"  @Override
  public long touch(byte[]... keys) {
    return executeCommand(commandObjects.touch(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sort,List<String> sort(String),"[575, 578]","{'A1': [(575, 578)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> sort(String key) {
    return executeCommand(commandObjects.sort(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sort,"List<String> sort(String,SortingParams)","[580, 583]","{'A1': [(580, 580), (583, 583)], 'A12': [(581, 582)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public List<String> sort(String key, SortingParams sortingParams) {
    return executeCommand(commandObjects.sort(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sort,"long sort(String,String)","[585, 588]","{'A1': [(585, 588)]}",{'A1': 1.0},A1,,"  @Override
  public long sort(String key, String dstkey) {
    return executeCommand(commandObjects.sort(key, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sort,"long sort(String,SortingParams,String)","[590, 593]","{'A1': [(590, 590)], 'A12': [(591, 593)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public long sort(String key, SortingParams sortingParams, String dstkey) {
    return executeCommand(commandObjects.sort(key, sortingParams, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sortReadonly,"List<String> sortReadonly(String,SortingParams)","[595, 598]","{'A1': [(598, 598)], 'A12': [(595, 597)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public List<String> sortReadonly(String key, SortingParams sortingParams) {
    return executeCommand(commandObjects.sortReadonly(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sort,List<byte[]> sort(byte[]),"[600, 603]","{'A1': [(600, 603)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> sort(byte[] key) {
    return executeCommand(commandObjects.sort(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sort,"List<byte[]> sort(byte[],SortingParams)","[605, 608]","{'A1': [(605, 605), (608, 608)], 'A12': [(606, 607)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public List<byte[]> sort(byte[] key, SortingParams sortingParams) {
    return executeCommand(commandObjects.sort(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sort,"long sort(byte[],byte[])","[610, 613]","{'A1': [(610, 613)]}",{'A1': 1.0},A1,,"  @Override
  public long sort(byte[] key, byte[] dstkey) {
    return executeCommand(commandObjects.sort(key, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sortReadonly,"List<byte[]> sortReadonly(byte[],SortingParams)","[615, 618]","{'A1': [(615, 615)], 'A12': [(616, 618)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public List<byte[]> sortReadonly(byte[] key, SortingParams sortingParams) {
    return executeCommand(commandObjects.sortReadonly(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sort,"long sort(byte[],SortingParams,byte[])","[620, 623]","{'A1': [(623, 623)], 'A12': [(620, 622)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public long sort(byte[] key, SortingParams sortingParams, byte[] dstkey) {
    return executeCommand(commandObjects.sort(key, sortingParams, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,del,long del(String),"[625, 628]","{'A1': [(625, 628)]}",{'A1': 1.0},A1,,"  @Override
  public long del(String key) {
    return executeCommand(commandObjects.del(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,del,long del(),"[630, 633]","{'A1': [(630, 633)]}",{'A1': 1.0},A1,,"  @Override
  public long del(String... keys) {
    return executeCommand(commandObjects.del(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,unlink,long unlink(String),"[635, 638]","{'A1': [(635, 638)]}",{'A1': 1.0},A1,,"  @Override
  public long unlink(String key) {
    return executeCommand(commandObjects.unlink(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,unlink,long unlink(),"[640, 643]","{'A1': [(640, 643)]}",{'A1': 1.0},A1,,"  @Override
  public long unlink(String... keys) {
    return executeCommand(commandObjects.unlink(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,del,long del(byte[]),"[645, 648]","{'A1': [(645, 648)]}",{'A1': 1.0},A1,,"  @Override
  public long del(byte[] key) {
    return executeCommand(commandObjects.del(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,del,long del(),"[650, 653]","{'A1': [(650, 653)]}",{'A1': 1.0},A1,,"  @Override
  public long del(byte[]... keys) {
    return executeCommand(commandObjects.del(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,unlink,long unlink(byte[]),"[655, 658]","{'A1': [(655, 658)]}",{'A1': 1.0},A1,,"  @Override
  public long unlink(byte[] key) {
    return executeCommand(commandObjects.unlink(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,unlink,long unlink(),"[660, 663]","{'A1': [(660, 663)]}",{'A1': 1.0},A1,,"  @Override
  public long unlink(byte[]... keys) {
    return executeCommand(commandObjects.unlink(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,memoryUsage,Long memoryUsage(String),"[665, 668]","{'A1': [(665, 668)]}",{'A1': 1.0},A1,,"  @Override
  public Long memoryUsage(String key) {
    return executeCommand(commandObjects.memoryUsage(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,memoryUsage,"Long memoryUsage(String,int)","[670, 673]","{'A1': [(670, 673)]}",{'A1': 1.0},A1,,"  @Override
  public Long memoryUsage(String key, int samples) {
    return executeCommand(commandObjects.memoryUsage(key, samples));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,memoryUsage,Long memoryUsage(byte[]),"[675, 678]","{'A1': [(675, 678)]}",{'A1': 1.0},A1,,"  @Override
  public Long memoryUsage(byte[] key) {
    return executeCommand(commandObjects.memoryUsage(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,memoryUsage,"Long memoryUsage(byte[],int)","[680, 683]","{'A1': [(680, 683)]}",{'A1': 1.0},A1,,"  @Override
  public Long memoryUsage(byte[] key, int samples) {
    return executeCommand(commandObjects.memoryUsage(key, samples));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,copy,"boolean copy(String,String,boolean)","[685, 688]","{'A1': [(685, 688)]}",{'A1': 1.0},A1,,"  @Override
  public boolean copy(String srcKey, String dstKey, boolean replace) {
    return executeCommand(commandObjects.copy(srcKey, dstKey, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rename,"String rename(String,String)","[690, 693]","{'A1': [(690, 693)]}",{'A1': 1.0},A1,,"  @Override
  public String rename(String oldkey, String newkey) {
    return executeCommand(commandObjects.rename(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,renamenx,"long renamenx(String,String)","[695, 698]","{'A1': [(695, 698)]}",{'A1': 1.0},A1,,"  @Override
  public long renamenx(String oldkey, String newkey) {
    return executeCommand(commandObjects.renamenx(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,copy,"boolean copy(byte[],byte[],boolean)","[700, 703]","{'A1': [(700, 703)]}",{'A1': 1.0},A1,,"  @Override
  public boolean copy(byte[] srcKey, byte[] dstKey, boolean replace) {
    return executeCommand(commandObjects.copy(srcKey, dstKey, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rename,"String rename(byte[],byte[])","[705, 708]","{'A1': [(705, 708)]}",{'A1': 1.0},A1,,"  @Override
  public String rename(byte[] oldkey, byte[] newkey) {
    return executeCommand(commandObjects.rename(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,renamenx,"long renamenx(byte[],byte[])","[710, 713]","{'A1': [(710, 713)]}",{'A1': 1.0},A1,,"  @Override
  public long renamenx(byte[] oldkey, byte[] newkey) {
    return executeCommand(commandObjects.renamenx(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,dbSize,long dbSize(),"[715, 717]","{'A1': [(715, 717)]}",{'A1': 1.0},A1,,"  public long dbSize() {
    return executeCommand(commandObjects.dbSize());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,keys,Set<String> keys(String),"[719, 722]","{'A1': [(719, 722)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> keys(String pattern) {
    return executeCommand(commandObjects.keys(pattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scan,ScanResult<String> scan(String),"[724, 727]","{'A1': [(724, 727)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<String> scan(String cursor) {
    return executeCommand(commandObjects.scan(cursor));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scan,"ScanResult<String> scan(String,ScanParams)","[729, 732]","{'A1': [(729, 732)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<String> scan(String cursor, ScanParams params) {
    return executeCommand(commandObjects.scan(cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scan,"ScanResult<String> scan(String,ScanParams,String)","[734, 737]","{'A1': [(734, 737)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<String> scan(String cursor, ScanParams params, String type) {
    return executeCommand(commandObjects.scan(cursor, params, type));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scanIteration,"ScanIteration scanIteration(int,String)","[744, 746]","{'A1': [(744, 746)]}",{'A1': 1.0},A1,,"  public ScanIteration scanIteration(int batchCount, String match) {
    return new ScanIteration(provider, batchCount, match);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scanIteration,"ScanIteration scanIteration(int,String,String)","[754, 756]","{'A1': [(754, 756)]}",{'A1': 1.0},A1,,"  public ScanIteration scanIteration(int batchCount, String match, String type) {
    return new ScanIteration(provider, batchCount, match, type);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,keys,Set<byte[]> keys(byte[]),"[758, 761]","{'A1': [(758, 761)]}",{'A1': 1.0},A1,,"  @Override
  public Set<byte[]> keys(byte[] pattern) {
    return executeCommand(commandObjects.keys(pattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scan,ScanResult<byte[]> scan(byte[]),"[763, 766]","{'A1': [(763, 766)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<byte[]> scan(byte[] cursor) {
    return executeCommand(commandObjects.scan(cursor));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scan,"ScanResult<byte[]> scan(byte[],ScanParams)","[768, 771]","{'A1': [(768, 771)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<byte[]> scan(byte[] cursor, ScanParams params) {
    return executeCommand(commandObjects.scan(cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scan,"ScanResult<byte[]> scan(byte[],ScanParams,byte[])","[773, 776]","{'A1': [(773, 776)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<byte[]> scan(byte[] cursor, ScanParams params, byte[] type) {
    return executeCommand(commandObjects.scan(cursor, params, type));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,randomKey,String randomKey(),"[778, 781]","{'A1': [(778, 781)]}",{'A1': 1.0},A1,,"  @Override
  public String randomKey() {
    return executeCommand(commandObjects.randomKey());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,randomBinaryKey,byte[] randomBinaryKey(),"[783, 786]","{'A1': [(783, 786)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] randomBinaryKey() {
    return executeCommand(commandObjects.randomBinaryKey());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,set,"String set(String,String)","[790, 793]","{'A1': [(790, 793)]}",{'A1': 1.0},A1,,"  @Override
  public String set(String key, String value) {
    return executeCommand(commandObjects.set(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,set,"String set(String,String,SetParams)","[795, 798]","{'A1': [(795, 798)]}",{'A1': 1.0},A1,,"  @Override
  public String set(String key, String value, SetParams params) {
    return executeCommand(commandObjects.set(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,get,String get(String),"[800, 803]","{'A1': [(800, 803)]}",{'A1': 1.0},A1,,"  @Override
  public String get(String key) {
    return executeCommand(commandObjects.get(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setGet,"String setGet(String,String)","[805, 808]","{'A1': [(805, 808)]}",{'A1': 1.0},A1,,"  @Override
  public String setGet(String key, String value) {
    return executeCommand(commandObjects.setGet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setGet,"String setGet(String,String,SetParams)","[810, 813]","{'A1': [(810, 813)]}",{'A1': 1.0},A1,,"  @Override
  public String setGet(String key, String value, SetParams params) {
    return executeCommand(commandObjects.setGet(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getDel,String getDel(String),"[815, 818]","{'A1': [(815, 818)]}",{'A1': 1.0},A1,,"  @Override
  public String getDel(String key) {
    return executeCommand(commandObjects.getDel(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getEx,"String getEx(String,GetExParams)","[820, 823]","{'A1': [(820, 823)]}",{'A1': 1.0},A1,,"  @Override
  public String getEx(String key, GetExParams params) {
    return executeCommand(commandObjects.getEx(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,set,"String set(byte[],byte[])","[825, 828]","{'A1': [(825, 828)]}",{'A1': 1.0},A1,,"  @Override
  public String set(byte[] key, byte[] value) {
    return executeCommand(commandObjects.set(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,set,"String set(byte[],byte[],SetParams)","[830, 833]","{'A1': [(830, 833)]}",{'A1': 1.0},A1,,"  @Override
  public String set(byte[] key, byte[] value, SetParams params) {
    return executeCommand(commandObjects.set(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,get,byte[] get(byte[]),"[835, 838]","{'A1': [(835, 838)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] get(byte[] key) {
    return executeCommand(commandObjects.get(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setGet,"byte[] setGet(byte[],byte[])","[840, 843]","{'A1': [(840, 843)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] setGet(byte[] key, byte[] value) {
    return executeCommand(commandObjects.setGet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setGet,"byte[] setGet(byte[],byte[],SetParams)","[845, 848]","{'A1': [(845, 848)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] setGet(byte[] key, byte[] value, SetParams params) {
    return executeCommand(commandObjects.setGet(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getDel,byte[] getDel(byte[]),"[850, 853]","{'A1': [(850, 853)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getDel(byte[] key) {
    return executeCommand(commandObjects.getDel(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getEx,"byte[] getEx(byte[],GetExParams)","[855, 858]","{'A1': [(855, 858)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getEx(byte[] key, GetExParams params) {
    return executeCommand(commandObjects.getEx(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setbit,"boolean setbit(String,long,boolean)","[860, 863]","{'A1': [(860, 863)]}",{'A1': 1.0},A1,,"  @Override
  public boolean setbit(String key, long offset, boolean value) {
    return executeCommand(commandObjects.setbit(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getbit,"boolean getbit(String,long)","[865, 868]","{'A1': [(865, 868)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getbit(String key, long offset) {
    return executeCommand(commandObjects.getbit(key, offset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setrange,"long setrange(String,long,String)","[870, 873]","{'A1': [(870, 873)]}",{'A1': 1.0},A1,,"  @Override
  public long setrange(String key, long offset, String value) {
    return executeCommand(commandObjects.setrange(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getrange,"String getrange(String,long,long)","[875, 878]","{'A1': [(875, 878)]}",{'A1': 1.0},A1,,"  @Override
  public String getrange(String key, long startOffset, long endOffset) {
    return executeCommand(commandObjects.getrange(key, startOffset, endOffset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setbit,"boolean setbit(byte[],long,boolean)","[880, 883]","{'A1': [(880, 883)]}",{'A1': 1.0},A1,,"  @Override
  public boolean setbit(byte[] key, long offset, boolean value) {
    return executeCommand(commandObjects.setbit(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getbit,"boolean getbit(byte[],long)","[885, 888]","{'A1': [(885, 888)]}",{'A1': 1.0},A1,,"  @Override
  public boolean getbit(byte[] key, long offset) {
    return executeCommand(commandObjects.getbit(key, offset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setrange,"long setrange(byte[],long,byte[])","[890, 893]","{'A1': [(890, 893)]}",{'A1': 1.0},A1,,"  @Override
  public long setrange(byte[] key, long offset, byte[] value) {
    return executeCommand(commandObjects.setrange(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getrange,"byte[] getrange(byte[],long,long)","[895, 898]","{'A1': [(895, 898)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getrange(byte[] key, long startOffset, long endOffset) {
    return executeCommand(commandObjects.getrange(key, startOffset, endOffset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getSet,"String getSet(String,String)","[903, 907]","{'A1': [(903, 907)]}",{'A1': 1.0},A1,,"  @Deprecated
  @Override
  public String getSet(String key, String value) {
    return executeCommand(commandObjects.getSet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setnx,"long setnx(String,String)","[909, 912]","{'A1': [(909, 912)]}",{'A1': 1.0},A1,,"  @Override
  public long setnx(String key, String value) {
    return executeCommand(commandObjects.setnx(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setex,"String setex(String,long,String)","[914, 917]","{'A1': [(914, 917)]}",{'A1': 1.0},A1,,"  @Override
  public String setex(String key, long seconds, String value) {
    return executeCommand(commandObjects.setex(key, seconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,psetex,"String psetex(String,long,String)","[919, 922]","{'A1': [(919, 922)]}",{'A1': 1.0},A1,,"  @Override
  public String psetex(String key, long milliseconds, String value) {
    return executeCommand(commandObjects.psetex(key, milliseconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,getSet,"byte[] getSet(byte[],byte[])","[927, 931]","{'A1': [(927, 931)]}",{'A1': 1.0},A1,,"  @Deprecated
  @Override
  public byte[] getSet(byte[] key, byte[] value) {
    return executeCommand(commandObjects.getSet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setnx,"long setnx(byte[],byte[])","[933, 936]","{'A1': [(933, 936)]}",{'A1': 1.0},A1,,"  @Override
  public long setnx(byte[] key, byte[] value) {
    return executeCommand(commandObjects.setnx(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setex,"String setex(byte[],long,byte[])","[938, 941]","{'A1': [(938, 941)]}",{'A1': 1.0},A1,,"  @Override
  public String setex(byte[] key, long seconds, byte[] value) {
    return executeCommand(commandObjects.setex(key, seconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,psetex,"String psetex(byte[],long,byte[])","[943, 946]","{'A1': [(943, 946)]}",{'A1': 1.0},A1,,"  @Override
  public String psetex(byte[] key, long milliseconds, byte[] value) {
    return executeCommand(commandObjects.psetex(key, milliseconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,incr,long incr(String),"[948, 951]","{'A1': [(948, 951)]}",{'A1': 1.0},A1,,"  @Override
  public long incr(String key) {
    return executeCommand(commandObjects.incr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,incrBy,"long incrBy(String,long)","[953, 956]","{'A1': [(953, 956)]}",{'A1': 1.0},A1,,"  @Override
  public long incrBy(String key, long increment) {
    return executeCommand(commandObjects.incrBy(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,incrByFloat,"double incrByFloat(String,double)","[958, 961]","{'A1': [(958, 961)]}",{'A1': 1.0},A1,,"  @Override
  public double incrByFloat(String key, double increment) {
    return executeCommand(commandObjects.incrByFloat(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,decr,long decr(String),"[963, 966]","{'A1': [(963, 966)]}",{'A1': 1.0},A1,,"  @Override
  public long decr(String key) {
    return executeCommand(commandObjects.decr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,decrBy,"long decrBy(String,long)","[968, 971]","{'A1': [(968, 971)]}",{'A1': 1.0},A1,,"  @Override
  public long decrBy(String key, long decrement) {
    return executeCommand(commandObjects.decrBy(key, decrement));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,incr,long incr(byte[]),"[973, 976]","{'A1': [(973, 976)]}",{'A1': 1.0},A1,,"  @Override
  public long incr(byte[] key) {
    return executeCommand(commandObjects.incr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,incrBy,"long incrBy(byte[],long)","[978, 981]","{'A1': [(978, 981)]}",{'A1': 1.0},A1,,"  @Override
  public long incrBy(byte[] key, long increment) {
    return executeCommand(commandObjects.incrBy(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,incrByFloat,"double incrByFloat(byte[],double)","[983, 986]","{'A1': [(983, 986)]}",{'A1': 1.0},A1,,"  @Override
  public double incrByFloat(byte[] key, double increment) {
    return executeCommand(commandObjects.incrByFloat(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,decr,long decr(byte[]),"[988, 991]","{'A1': [(988, 991)]}",{'A1': 1.0},A1,,"  @Override
  public long decr(byte[] key) {
    return executeCommand(commandObjects.decr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,decrBy,"long decrBy(byte[],long)","[993, 996]","{'A1': [(993, 996)]}",{'A1': 1.0},A1,,"  @Override
  public long decrBy(byte[] key, long decrement) {
    return executeCommand(commandObjects.decrBy(key, decrement));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,mget,List<String> mget(),"[998, 1001]","{'A1': [(998, 1001)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> mget(String... keys) {
    return executeCommand(commandObjects.mget(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,mset,String mset(),"[1003, 1006]","{'A1': [(1003, 1006)]}",{'A1': 1.0},A1,,"  @Override
  public String mset(String... keysvalues) {
    return executeCommand(commandObjects.mset(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,msetnx,long msetnx(),"[1008, 1011]","{'A1': [(1008, 1011)]}",{'A1': 1.0},A1,,"  @Override
  public long msetnx(String... keysvalues) {
    return executeCommand(commandObjects.msetnx(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,mget,List<byte[]> mget(),"[1013, 1016]","{'A1': [(1013, 1016)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> mget(byte[]... keys) {
    return executeCommand(commandObjects.mget(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,mset,String mset(),"[1018, 1021]","{'A1': [(1018, 1021)]}",{'A1': 1.0},A1,,"  @Override
  public String mset(byte[]... keysvalues) {
    return executeCommand(commandObjects.mset(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,msetnx,long msetnx(),"[1023, 1026]","{'A1': [(1023, 1026)]}",{'A1': 1.0},A1,,"  @Override
  public long msetnx(byte[]... keysvalues) {
    return executeCommand(commandObjects.msetnx(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,append,"long append(String,String)","[1028, 1031]","{'A1': [(1028, 1031)]}",{'A1': 1.0},A1,,"  @Override
  public long append(String key, String value) {
    return executeCommand(commandObjects.append(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,substr,"String substr(String,int,int)","[1033, 1036]","{'A1': [(1033, 1036)]}",{'A1': 1.0},A1,,"  @Override
  public String substr(String key, int start, int end) {
    return executeCommand(commandObjects.substr(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,strlen,long strlen(String),"[1038, 1041]","{'A1': [(1038, 1041)]}",{'A1': 1.0},A1,,"  @Override
  public long strlen(String key) {
    return executeCommand(commandObjects.strlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,append,"long append(byte[],byte[])","[1043, 1046]","{'A1': [(1043, 1046)]}",{'A1': 1.0},A1,,"  @Override
  public long append(byte[] key, byte[] value) {
    return executeCommand(commandObjects.append(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,substr,"byte[] substr(byte[],int,int)","[1048, 1051]","{'A1': [(1048, 1051)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] substr(byte[] key, int start, int end) {
    return executeCommand(commandObjects.substr(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,strlen,long strlen(byte[]),"[1053, 1056]","{'A1': [(1053, 1056)]}",{'A1': 1.0},A1,,"  @Override
  public long strlen(byte[] key) {
    return executeCommand(commandObjects.strlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitcount,long bitcount(String),"[1058, 1061]","{'A1': [(1058, 1061)]}",{'A1': 1.0},A1,,"  @Override
  public long bitcount(String key) {
    return executeCommand(commandObjects.bitcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitcount,"long bitcount(String,long,long)","[1063, 1066]","{'A1': [(1063, 1066)]}",{'A1': 1.0},A1,,"  @Override
  public long bitcount(String key, long start, long end) {
    return executeCommand(commandObjects.bitcount(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitcount,"long bitcount(String,long,long,BitCountOption)","[1068, 1071]","{'A1': [(1069, 1069)], 'A26': [(1068, 1068), (1070, 1071)]}","{'A1': 0.25, 'A26': 0.75}",A26,,"  @Override
  public long bitcount(String key, long start, long end, BitCountOption option) {
    return executeCommand(commandObjects.bitcount(key, start, end, option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitpos,"long bitpos(String,boolean)","[1073, 1076]","{'A1': [(1073, 1076)]}",{'A1': 1.0},A1,,"  @Override
  public long bitpos(String key, boolean value) {
    return executeCommand(commandObjects.bitpos(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitpos,"long bitpos(String,boolean,BitPosParams)","[1078, 1081]","{'A1': [(1078, 1081)]}",{'A1': 1.0},A1,,"  @Override
  public long bitpos(String key, boolean value, BitPosParams params) {
    return executeCommand(commandObjects.bitpos(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitcount,long bitcount(byte[]),"[1083, 1086]","{'A1': [(1083, 1086)]}",{'A1': 1.0},A1,,"  @Override
  public long bitcount(byte[] key) {
    return executeCommand(commandObjects.bitcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitcount,"long bitcount(byte[],long,long)","[1088, 1091]","{'A1': [(1088, 1091)]}",{'A1': 1.0},A1,,"  @Override
  public long bitcount(byte[] key, long start, long end) {
    return executeCommand(commandObjects.bitcount(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitcount,"long bitcount(byte[],long,long,BitCountOption)","[1093, 1096]","{'A1': [(1093, 1096)]}",{'A1': 1.0},A1,,"  @Override
  public long bitcount(byte[] key, long start, long end, BitCountOption option) {
    return executeCommand(commandObjects.bitcount(key, start, end, option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitpos,"long bitpos(byte[],boolean)","[1098, 1101]","{'A1': [(1098, 1101)]}",{'A1': 1.0},A1,,"  @Override
  public long bitpos(byte[] key, boolean value) {
    return executeCommand(commandObjects.bitpos(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitpos,"long bitpos(byte[],boolean,BitPosParams)","[1103, 1106]","{'A1': [(1103, 1106)]}",{'A1': 1.0},A1,,"  @Override
  public long bitpos(byte[] key, boolean value, BitPosParams params) {
    return executeCommand(commandObjects.bitpos(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitfield,List<Long> bitfield(String),"[1108, 1111]","{'A1': [(1108, 1111)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> bitfield(String key, String... arguments) {
    return executeCommand(commandObjects.bitfield(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitfieldReadonly,List<Long> bitfieldReadonly(String),"[1113, 1116]","{'A1': [(1113, 1116)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> bitfieldReadonly(String key, String... arguments) {
    return executeCommand(commandObjects.bitfieldReadonly(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitfield,List<Long> bitfield(byte[]),"[1118, 1121]","{'A1': [(1118, 1121)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> bitfield(byte[] key, byte[]... arguments) {
    return executeCommand(commandObjects.bitfield(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitfieldReadonly,List<Long> bitfieldReadonly(byte[]),"[1123, 1126]","{'A1': [(1123, 1126)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> bitfieldReadonly(byte[] key, byte[]... arguments) {
    return executeCommand(commandObjects.bitfieldReadonly(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitop,"long bitop(BitOP,String)","[1128, 1131]","{'A1': [(1128, 1131)]}",{'A1': 1.0},A1,,"  @Override
  public long bitop(BitOP op, String destKey, String... srcKeys) {
    return executeCommand(commandObjects.bitop(op, destKey, srcKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bitop,"long bitop(BitOP,byte[])","[1133, 1136]","{'A1': [(1133, 1136)]}",{'A1': 1.0},A1,,"  @Override
  public long bitop(BitOP op, byte[] destKey, byte[]... srcKeys) {
    return executeCommand(commandObjects.bitop(op, destKey, srcKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lcs,"LCSMatchResult lcs(String,String,LCSParams)","[1138, 1141]","{'A12': [(1138, 1141)]}",{'A12': 1.0},A12,,"  @Override
  public LCSMatchResult lcs(String keyA, String keyB, LCSParams params) {
    return executeCommand(commandObjects.lcs(keyA, keyB, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lcs,"LCSMatchResult lcs(byte[],byte[],LCSParams)","[1143, 1146]","{'A12': [(1143, 1146)]}",{'A12': 1.0},A12,,"  @Override
  public LCSMatchResult lcs(byte[] keyA, byte[] keyB, LCSParams params) {
    return executeCommand(commandObjects.lcs(keyA, keyB, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpush,long rpush(String),"[1150, 1153]","{'A1': [(1150, 1153)]}",{'A1': 1.0},A1,,"  @Override
  public long rpush(String key, String... string) {
    return executeCommand(commandObjects.rpush(key, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpush,long lpush(String),"[1155, 1158]","{'A1': [(1155, 1158)]}",{'A1': 1.0},A1,,"  @Override
  public long lpush(String key, String... string) {
    return executeCommand(commandObjects.lpush(key, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,llen,long llen(String),"[1160, 1163]","{'A1': [(1160, 1163)]}",{'A1': 1.0},A1,,"  @Override
  public long llen(String key) {
    return executeCommand(commandObjects.llen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lrange,"List<String> lrange(String,long,long)","[1165, 1168]","{'A1': [(1165, 1168)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> lrange(String key, long start, long stop) {
    return executeCommand(commandObjects.lrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ltrim,"String ltrim(String,long,long)","[1170, 1173]","{'A1': [(1170, 1173)]}",{'A1': 1.0},A1,,"  @Override
  public String ltrim(String key, long start, long stop) {
    return executeCommand(commandObjects.ltrim(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lindex,"String lindex(String,long)","[1175, 1178]","{'A1': [(1175, 1178)]}",{'A1': 1.0},A1,,"  @Override
  public String lindex(String key, long index) {
    return executeCommand(commandObjects.lindex(key, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpush,long rpush(byte[]),"[1180, 1183]","{'A1': [(1180, 1183)]}",{'A1': 1.0},A1,,"  @Override
  public long rpush(byte[] key, byte[]... args) {
    return executeCommand(commandObjects.rpush(key, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpush,long lpush(byte[]),"[1185, 1188]","{'A1': [(1185, 1188)]}",{'A1': 1.0},A1,,"  @Override
  public long lpush(byte[] key, byte[]... args) {
    return executeCommand(commandObjects.lpush(key, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,llen,long llen(byte[]),"[1190, 1193]","{'A1': [(1190, 1193)]}",{'A1': 1.0},A1,,"  @Override
  public long llen(byte[] key) {
    return executeCommand(commandObjects.llen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lrange,"List<byte[]> lrange(byte[],long,long)","[1195, 1198]","{'A1': [(1195, 1198)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> lrange(byte[] key, long start, long stop) {
    return executeCommand(commandObjects.lrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ltrim,"String ltrim(byte[],long,long)","[1200, 1203]","{'A1': [(1200, 1203)]}",{'A1': 1.0},A1,,"  @Override
  public String ltrim(byte[] key, long start, long stop) {
    return executeCommand(commandObjects.ltrim(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lindex,"byte[] lindex(byte[],long)","[1205, 1208]","{'A1': [(1205, 1208)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] lindex(byte[] key, long index) {
    return executeCommand(commandObjects.lindex(key, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lset,"String lset(String,long,String)","[1210, 1213]","{'A1': [(1210, 1213)]}",{'A1': 1.0},A1,,"  @Override
  public String lset(String key, long index, String value) {
    return executeCommand(commandObjects.lset(key, index, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lrem,"long lrem(String,long,String)","[1215, 1218]","{'A1': [(1215, 1218)]}",{'A1': 1.0},A1,,"  @Override
  public long lrem(String key, long count, String value) {
    return executeCommand(commandObjects.lrem(key, count, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpop,String lpop(String),"[1220, 1223]","{'A1': [(1220, 1223)]}",{'A1': 1.0},A1,,"  @Override
  public String lpop(String key) {
    return executeCommand(commandObjects.lpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpop,"List<String> lpop(String,int)","[1225, 1228]","{'A1': [(1225, 1228)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> lpop(String key, int count) {
    return executeCommand(commandObjects.lpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lset,"String lset(byte[],long,byte[])","[1230, 1233]","{'A1': [(1230, 1233)]}",{'A1': 1.0},A1,,"  @Override
  public String lset(byte[] key, long index, byte[] value) {
    return executeCommand(commandObjects.lset(key, index, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lrem,"long lrem(byte[],long,byte[])","[1235, 1238]","{'A1': [(1235, 1238)]}",{'A1': 1.0},A1,,"  @Override
  public long lrem(byte[] key, long count, byte[] value) {
    return executeCommand(commandObjects.lrem(key, count, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpop,byte[] lpop(byte[]),"[1240, 1243]","{'A1': [(1240, 1243)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] lpop(byte[] key) {
    return executeCommand(commandObjects.lpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpop,"List<byte[]> lpop(byte[],int)","[1245, 1248]","{'A1': [(1245, 1248)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> lpop(byte[] key, int count) {
    return executeCommand(commandObjects.lpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpos,"Long lpos(String,String)","[1250, 1253]","{'A1': [(1250, 1253)]}",{'A1': 1.0},A1,,"  @Override
  public Long lpos(String key, String element) {
    return executeCommand(commandObjects.lpos(key, element));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpos,"Long lpos(String,String,LPosParams)","[1255, 1258]","{'A1': [(1255, 1258)]}",{'A1': 1.0},A1,,"  @Override
  public Long lpos(String key, String element, LPosParams params) {
    return executeCommand(commandObjects.lpos(key, element, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpos,"List<Long> lpos(String,String,LPosParams,long)","[1260, 1263]","{'A1': [(1260, 1263)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> lpos(String key, String element, LPosParams params, long count) {
    return executeCommand(commandObjects.lpos(key, element, params, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpos,"Long lpos(byte[],byte[])","[1265, 1268]","{'A1': [(1265, 1268)]}",{'A1': 1.0},A1,,"  @Override
  public Long lpos(byte[] key, byte[] element) {
    return executeCommand(commandObjects.lpos(key, element));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpos,"Long lpos(byte[],byte[],LPosParams)","[1270, 1273]","{'A1': [(1270, 1273)]}",{'A1': 1.0},A1,,"  @Override
  public Long lpos(byte[] key, byte[] element, LPosParams params) {
    return executeCommand(commandObjects.lpos(key, element, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpos,"List<Long> lpos(byte[],byte[],LPosParams,long)","[1275, 1278]","{'A1': [(1275, 1278)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> lpos(byte[] key, byte[] element, LPosParams params, long count) {
    return executeCommand(commandObjects.lpos(key, element, params, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpop,String rpop(String),"[1280, 1283]","{'A1': [(1280, 1283)]}",{'A1': 1.0},A1,,"  @Override
  public String rpop(String key) {
    return executeCommand(commandObjects.rpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpop,"List<String> rpop(String,int)","[1285, 1288]","{'A1': [(1285, 1288)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> rpop(String key, int count) {
    return executeCommand(commandObjects.rpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpop,byte[] rpop(byte[]),"[1290, 1293]","{'A1': [(1290, 1293)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] rpop(byte[] key) {
    return executeCommand(commandObjects.rpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpop,"List<byte[]> rpop(byte[],int)","[1295, 1298]","{'A1': [(1295, 1298)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> rpop(byte[] key, int count) {
    return executeCommand(commandObjects.rpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,linsert,"long linsert(String,ListPosition,String,String)","[1300, 1303]","{'A1': [(1300, 1303)]}",{'A1': 1.0},A1,,"  @Override
  public long linsert(String key, ListPosition where, String pivot, String value) {
    return executeCommand(commandObjects.linsert(key, where, pivot, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpushx,long lpushx(String),"[1305, 1308]","{'A1': [(1305, 1305), (1308, 1308)], 'A12': [(1306, 1307)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long lpushx(String key, String... strings) {
    return executeCommand(commandObjects.lpushx(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpushx,long rpushx(String),"[1310, 1313]","{'A1': [(1310, 1310), (1313, 1313)], 'A12': [(1311, 1312)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long rpushx(String key, String... strings) {
    return executeCommand(commandObjects.rpushx(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,linsert,"long linsert(byte[],ListPosition,byte[],byte[])","[1315, 1318]","{'A1': [(1315, 1318)]}",{'A1': 1.0},A1,,"  @Override
  public long linsert(byte[] key, ListPosition where, byte[] pivot, byte[] value) {
    return executeCommand(commandObjects.linsert(key, where, pivot, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lpushx,long lpushx(byte[]),"[1320, 1323]","{'A1': [(1320, 1320), (1323, 1323)], 'A12': [(1321, 1322)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long lpushx(byte[] key, byte[]... args) {
    return executeCommand(commandObjects.lpushx(key, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpushx,long rpushx(byte[]),"[1325, 1328]","{'A1': [(1325, 1325), (1328, 1328)], 'A12': [(1326, 1327)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long rpushx(byte[] key, byte[]... args) {
    return executeCommand(commandObjects.rpushx(key, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blpop,"List<String> blpop(int,String)","[1330, 1333]","{'A1': [(1330, 1333)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> blpop(int timeout, String key) {
    return executeCommand(commandObjects.blpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blpop,"KeyValue<String, String> blpop(double,String)","[1335, 1338]","{'A1': [(1335, 1338)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, String> blpop(double timeout, String key) {
    return executeCommand(commandObjects.blpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,brpop,"List<String> brpop(int,String)","[1340, 1343]","{'A1': [(1340, 1343)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> brpop(int timeout, String key) {
    return executeCommand(commandObjects.brpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,brpop,"KeyValue<String, String> brpop(double,String)","[1345, 1348]","{'A1': [(1345, 1348)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, String> brpop(double timeout, String key) {
    return executeCommand(commandObjects.brpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blpop,List<String> blpop(int),"[1350, 1353]","{'A1': [(1350, 1353)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> blpop(int timeout, String... keys) {
    return executeCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blpop,"KeyValue<String, String> blpop(double)","[1355, 1358]","{'A1': [(1355, 1358)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, String> blpop(double timeout, String... keys) {
    return executeCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,brpop,List<String> brpop(int),"[1360, 1363]","{'A1': [(1360, 1363)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> brpop(int timeout, String... keys) {
    return executeCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,brpop,"KeyValue<String, String> brpop(double)","[1365, 1368]","{'A1': [(1365, 1368)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, String> brpop(double timeout, String... keys) {
    return executeCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blpop,List<byte[]> blpop(int),"[1370, 1373]","{'A1': [(1370, 1373)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> blpop(int timeout, byte[]... keys) {
    return executeCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blpop,"KeyValue<byte[], byte[]> blpop(double)","[1375, 1378]","{'A1': [(1375, 1378)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], byte[]> blpop(double timeout, byte[]... keys) {
    return executeCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,brpop,List<byte[]> brpop(int),"[1380, 1383]","{'A1': [(1380, 1383)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> brpop(int timeout, byte[]... keys) {
    return executeCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,brpop,"KeyValue<byte[], byte[]> brpop(double)","[1385, 1388]","{'A1': [(1385, 1388)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], byte[]> brpop(double timeout, byte[]... keys) {
    return executeCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpoplpush,"String rpoplpush(String,String)","[1390, 1393]","{'A1': [(1390, 1393)]}",{'A1': 1.0},A1,,"  @Override
  public String rpoplpush(String srckey, String dstkey) {
    return executeCommand(commandObjects.rpoplpush(srckey, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,brpoplpush,"String brpoplpush(String,String,int)","[1395, 1398]","{'A1': [(1395, 1398)]}",{'A1': 1.0},A1,,"  @Override
  public String brpoplpush(String source, String destination, int timeout) {
    return executeCommand(commandObjects.brpoplpush(source, destination, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,rpoplpush,"byte[] rpoplpush(byte[],byte[])","[1400, 1403]","{'A1': [(1400, 1403)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] rpoplpush(byte[] srckey, byte[] dstkey) {
    return executeCommand(commandObjects.rpoplpush(srckey, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,brpoplpush,"byte[] brpoplpush(byte[],byte[],int)","[1405, 1408]","{'A1': [(1405, 1408)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] brpoplpush(byte[] source, byte[] destination, int timeout) {
    return executeCommand(commandObjects.brpoplpush(source, destination, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lmove,"String lmove(String,String,ListDirection,ListDirection)","[1410, 1413]","{'A1': [(1410, 1413)]}",{'A1': 1.0},A1,,"  @Override
  public String lmove(String srcKey, String dstKey, ListDirection from, ListDirection to) {
    return executeCommand(commandObjects.lmove(srcKey, dstKey, from, to));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blmove,"String blmove(String,String,ListDirection,ListDirection,double)","[1415, 1418]","{'A1': [(1415, 1418)]}",{'A1': 1.0},A1,,"  @Override
  public String blmove(String srcKey, String dstKey, ListDirection from, ListDirection to, double timeout) {
    return executeCommand(commandObjects.blmove(srcKey, dstKey, from, to, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lmove,"byte[] lmove(byte[],byte[],ListDirection,ListDirection)","[1420, 1423]","{'A1': [(1420, 1423)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] lmove(byte[] srcKey, byte[] dstKey, ListDirection from, ListDirection to) {
    return executeCommand(commandObjects.lmove(srcKey, dstKey, from, to));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blmove,"byte[] blmove(byte[],byte[],ListDirection,ListDirection,double)","[1425, 1428]","{'A1': [(1425, 1428)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] blmove(byte[] srcKey, byte[] dstKey, ListDirection from, ListDirection to, double timeout) {
    return executeCommand(commandObjects.blmove(srcKey, dstKey, from, to, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lmpop,"KeyValue<String, List<String>> lmpop(ListDirection)","[1430, 1433]","{'A1': [(1430, 1433)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, List<String>> lmpop(ListDirection direction, String... keys) {
    return executeCommand(commandObjects.lmpop(direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lmpop,"KeyValue<String, List<String>> lmpop(ListDirection,int)","[1435, 1438]","{'A1': [(1435, 1438)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, List<String>> lmpop(ListDirection direction, int count, String... keys) {
    return executeCommand(commandObjects.lmpop(direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blmpop,"KeyValue<String, List<String>> blmpop(double,ListDirection)","[1440, 1443]","{'A1': [(1440, 1443)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, List<String>> blmpop(double timeout, ListDirection direction, String... keys) {
    return executeCommand(commandObjects.blmpop(timeout, direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blmpop,"KeyValue<String, List<String>> blmpop(double,ListDirection,int)","[1445, 1448]","{'A1': [(1445, 1448)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, List<String>> blmpop(double timeout, ListDirection direction, int count, String... keys) {
    return executeCommand(commandObjects.blmpop(timeout, direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lmpop,"KeyValue<byte[], List<byte[]>> lmpop(ListDirection)","[1450, 1453]","{'A1': [(1450, 1453)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], List<byte[]>> lmpop(ListDirection direction, byte[]... keys) {
    return executeCommand(commandObjects.lmpop(direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,lmpop,"KeyValue<byte[], List<byte[]>> lmpop(ListDirection,int)","[1455, 1458]","{'A1': [(1455, 1458)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], List<byte[]>> lmpop(ListDirection direction, int count, byte[]... keys) {
    return executeCommand(commandObjects.lmpop(direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blmpop,"KeyValue<byte[], List<byte[]>> blmpop(double,ListDirection)","[1460, 1463]","{'A1': [(1460, 1463)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], List<byte[]>> blmpop(double timeout, ListDirection direction, byte[]... keys) {
    return executeCommand(commandObjects.blmpop(timeout, direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,blmpop,"KeyValue<byte[], List<byte[]>> blmpop(double,ListDirection,int)","[1465, 1468]","{'A1': [(1465, 1468)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], List<byte[]>> blmpop(double timeout, ListDirection direction, int count, byte[]... keys) {
    return executeCommand(commandObjects.blmpop(timeout, direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hset,"long hset(String,String,String)","[1472, 1475]","{'A1': [(1472, 1475)]}",{'A1': 1.0},A1,,"  @Override
  public long hset(String key, String field, String value) {
    return executeCommand(commandObjects.hset(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hset,"long hset(String,Map<String, String>)","[1477, 1480]","{'A1': [(1477, 1480)]}",{'A1': 1.0},A1,,"  @Override
  public long hset(String key, Map<String, String> hash) {
    return executeCommand(commandObjects.hset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hsetex,"long hsetex(String,HSetExParams,String,String)","[1482, 1485]","{'A35': [(1482, 1485)]}",{'A35': 1.0},A35,,"  @Override
  public long hsetex(String key, HSetExParams params, String field, String value) {
   return executeCommand(commandObjects.hsetex(key, params, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hsetex,"long hsetex(String,HSetExParams,Map<String, String>)","[1487, 1490]","{'A35': [(1487, 1490)]}",{'A35': 1.0},A35,,"  @Override
  public long hsetex(String key, HSetExParams params, Map<String, String> hash) {
    return executeCommand(commandObjects.hsetex(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hget,"String hget(String,String)","[1492, 1495]","{'A1': [(1492, 1495)]}",{'A1': 1.0},A1,,"  @Override
  public String hget(String key, String field) {
    return executeCommand(commandObjects.hget(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hgetex,"List<String> hgetex(String,HGetExParams)","[1497, 1500]","{'A35': [(1497, 1500)]}",{'A35': 1.0},A35,,"  @Override
  public List<String> hgetex(String key, HGetExParams params, String... fields) {
    return executeCommand(commandObjects.hgetex(key, params, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hgetdel,List<String> hgetdel(String),"[1502, 1505]","{'A35': [(1502, 1505)]}",{'A35': 1.0},A35,,"  @Override
  public List<String> hgetdel(String key, String... fields) {
    return executeCommand(commandObjects.hgetdel(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hsetnx,"long hsetnx(String,String,String)","[1507, 1510]","{'A1': [(1507, 1510)]}",{'A1': 1.0},A1,,"  @Override
  public long hsetnx(String key, String field, String value) {
    return executeCommand(commandObjects.hsetnx(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hmset,"String hmset(String,Map<String, String>)","[1512, 1515]","{'A1': [(1512, 1515)]}",{'A1': 1.0},A1,,"  @Override
  public String hmset(String key, Map<String, String> hash) {
    return executeCommand(commandObjects.hmset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hmget,List<String> hmget(String),"[1517, 1520]","{'A1': [(1517, 1520)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> hmget(String key, String... fields) {
    return executeCommand(commandObjects.hmget(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hset,"long hset(byte[],byte[],byte[])","[1522, 1525]","{'A1': [(1522, 1525)]}",{'A1': 1.0},A1,,"  @Override
  public long hset(byte[] key, byte[] field, byte[] value) {
    return executeCommand(commandObjects.hset(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hset,"long hset(byte[],Map<byte[], byte[]>)","[1527, 1530]","{'A1': [(1527, 1530)]}",{'A1': 1.0},A1,,"  @Override
  public long hset(byte[] key, Map<byte[], byte[]> hash) {
    return executeCommand(commandObjects.hset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hsetex,"long hsetex(byte[],HSetExParams,byte[],byte[])","[1532, 1535]","{'A35': [(1532, 1535)]}",{'A35': 1.0},A35,,"  @Override
  public long hsetex(byte[] key, HSetExParams params, byte[] field, byte[] value) {
   return executeCommand(commandObjects.hsetex(key, params, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hsetex,"long hsetex(byte[],HSetExParams,Map<byte[], byte[]>)","[1537, 1540]","{'A35': [(1537, 1540)]}",{'A35': 1.0},A35,,"  @Override
  public long hsetex(byte[] key, HSetExParams params, Map<byte[], byte[]> hash) {
    return executeCommand(commandObjects.hsetex(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hget,"byte[] hget(byte[],byte[])","[1542, 1545]","{'A1': [(1542, 1545)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] hget(byte[] key, byte[] field) {
    return executeCommand(commandObjects.hget(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hgetex,"List<byte[]> hgetex(byte[],HGetExParams)","[1547, 1550]","{'A35': [(1547, 1550)]}",{'A35': 1.0},A35,,"  @Override
  public List<byte[]> hgetex(byte[] key, HGetExParams params, byte[]... fields) {
    return executeCommand(commandObjects.hgetex(key, params, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hgetdel,List<byte[]> hgetdel(byte[]),"[1552, 1555]","{'A35': [(1552, 1555)]}",{'A35': 1.0},A35,,"  @Override
  public List<byte[]> hgetdel(byte[] key, byte[]... fields) {
    return executeCommand(commandObjects.hgetdel(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hsetnx,"long hsetnx(byte[],byte[],byte[])","[1557, 1560]","{'A1': [(1557, 1560)]}",{'A1': 1.0},A1,,"  @Override
  public long hsetnx(byte[] key, byte[] field, byte[] value) {
    return executeCommand(commandObjects.hsetnx(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hmset,"String hmset(byte[],Map<byte[], byte[]>)","[1562, 1565]","{'A1': [(1562, 1565)]}",{'A1': 1.0},A1,,"  @Override
  public String hmset(byte[] key, Map<byte[], byte[]> hash) {
    return executeCommand(commandObjects.hmset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hmget,List<byte[]> hmget(byte[]),"[1567, 1570]","{'A1': [(1567, 1570)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> hmget(byte[] key, byte[]... fields) {
    return executeCommand(commandObjects.hmget(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hincrBy,"long hincrBy(String,String,long)","[1572, 1575]","{'A1': [(1572, 1575)]}",{'A1': 1.0},A1,,"  @Override
  public long hincrBy(String key, String field, long value) {
    return executeCommand(commandObjects.hincrBy(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hincrByFloat,"double hincrByFloat(String,String,double)","[1577, 1580]","{'A1': [(1577, 1580)]}",{'A1': 1.0},A1,,"  @Override
  public double hincrByFloat(String key, String field, double value) {
    return executeCommand(commandObjects.hincrByFloat(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexists,"boolean hexists(String,String)","[1582, 1585]","{'A1': [(1582, 1585)]}",{'A1': 1.0},A1,,"  @Override
  public boolean hexists(String key, String field) {
    return executeCommand(commandObjects.hexists(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hdel,long hdel(String),"[1587, 1590]","{'A1': [(1587, 1590)]}",{'A1': 1.0},A1,,"  @Override
  public long hdel(String key, String... field) {
    return executeCommand(commandObjects.hdel(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hlen,long hlen(String),"[1592, 1595]","{'A1': [(1592, 1595)]}",{'A1': 1.0},A1,,"  @Override
  public long hlen(String key) {
    return executeCommand(commandObjects.hlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hincrBy,"long hincrBy(byte[],byte[],long)","[1597, 1600]","{'A1': [(1597, 1600)]}",{'A1': 1.0},A1,,"  @Override
  public long hincrBy(byte[] key, byte[] field, long value) {
    return executeCommand(commandObjects.hincrBy(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hincrByFloat,"double hincrByFloat(byte[],byte[],double)","[1602, 1605]","{'A1': [(1602, 1605)]}",{'A1': 1.0},A1,,"  @Override
  public double hincrByFloat(byte[] key, byte[] field, double value) {
    return executeCommand(commandObjects.hincrByFloat(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexists,"boolean hexists(byte[],byte[])","[1607, 1610]","{'A1': [(1607, 1610)]}",{'A1': 1.0},A1,,"  @Override
  public boolean hexists(byte[] key, byte[] field) {
    return executeCommand(commandObjects.hexists(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hdel,long hdel(byte[]),"[1612, 1615]","{'A1': [(1612, 1615)]}",{'A1': 1.0},A1,,"  @Override
  public long hdel(byte[] key, byte[]... field) {
    return executeCommand(commandObjects.hdel(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hlen,long hlen(byte[]),"[1617, 1620]","{'A1': [(1617, 1620)]}",{'A1': 1.0},A1,,"  @Override
  public long hlen(byte[] key) {
    return executeCommand(commandObjects.hlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hkeys,Set<String> hkeys(String),"[1622, 1625]","{'A1': [(1622, 1625)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> hkeys(String key) {
    return executeCommand(commandObjects.hkeys(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hvals,List<String> hvals(String),"[1627, 1630]","{'A1': [(1627, 1630)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> hvals(String key) {
    return executeCommand(commandObjects.hvals(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hgetAll,"Map<String, String> hgetAll(String)","[1632, 1635]","{'A1': [(1632, 1635)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, String> hgetAll(String key) {
    return executeCommand(commandObjects.hgetAll(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hkeys,Set<byte[]> hkeys(byte[]),"[1637, 1640]","{'A1': [(1637, 1640)]}",{'A1': 1.0},A1,,"  @Override
  public Set<byte[]> hkeys(byte[] key) {
    return executeCommand(commandObjects.hkeys(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hvals,List<byte[]> hvals(byte[]),"[1642, 1645]","{'A1': [(1642, 1645)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> hvals(byte[] key) {
    return executeCommand(commandObjects.hvals(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hgetAll,"Map<byte[], byte[]> hgetAll(byte[])","[1647, 1650]","{'A1': [(1647, 1650)]}",{'A1': 1.0},A1,,"  @Override
  public Map<byte[], byte[]> hgetAll(byte[] key) {
    return executeCommand(commandObjects.hgetAll(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hrandfield,String hrandfield(String),"[1652, 1655]","{'A1': [(1652, 1655)]}",{'A1': 1.0},A1,,"  @Override
  public String hrandfield(String key) {
    return executeCommand(commandObjects.hrandfield(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hrandfield,"List<String> hrandfield(String,long)","[1657, 1660]","{'A1': [(1657, 1660)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> hrandfield(String key, long count) {
    return executeCommand(commandObjects.hrandfield(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hrandfieldWithValues,"List<Map.Entry<String, String>> hrandfieldWithValues(String,long)","[1662, 1665]","{'A1': [(1662, 1662), (1664, 1665)], 'A9': [(1663, 1663)]}","{'A1': 0.75, 'A9': 0.25}",A1,,"  @Override
  public List<Map.Entry<String, String>> hrandfieldWithValues(String key, long count) {
    return executeCommand(commandObjects.hrandfieldWithValues(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hscan,"ScanResult<Map.Entry<String, String>> hscan(String,String,ScanParams)","[1667, 1670]","{'A1': [(1667, 1670)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<Map.Entry<String, String>> hscan(String key, String cursor, ScanParams params) {
    return executeCommand(commandObjects.hscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hscanNoValues,"ScanResult<String> hscanNoValues(String,String,ScanParams)","[1672, 1675]","{'A40': [(1672, 1675)]}",{'A40': 1.0},A40,,"  @Override
  public ScanResult<String> hscanNoValues(String key, String cursor, ScanParams params) {
    return executeCommand(commandObjects.hscanNoValues(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hstrlen,"long hstrlen(String,String)","[1677, 1680]","{'A1': [(1677, 1680)]}",{'A1': 1.0},A1,,"  @Override
  public long hstrlen(String key, String field) {
    return executeCommand(commandObjects.hstrlen(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hrandfield,byte[] hrandfield(byte[]),"[1682, 1685]","{'A1': [(1682, 1685)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] hrandfield(byte[] key) {
    return executeCommand(commandObjects.hrandfield(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hrandfield,"List<byte[]> hrandfield(byte[],long)","[1687, 1690]","{'A1': [(1687, 1690)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> hrandfield(byte[] key, long count) {
    return executeCommand(commandObjects.hrandfield(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hrandfieldWithValues,"List<Map.Entry<byte[], byte[]>> hrandfieldWithValues(byte[],long)","[1692, 1695]","{'A1': [(1692, 1692), (1694, 1695)], 'A9': [(1693, 1693)]}","{'A1': 0.75, 'A9': 0.25}",A1,,"  @Override
  public List<Map.Entry<byte[], byte[]>> hrandfieldWithValues(byte[] key, long count) {
    return executeCommand(commandObjects.hrandfieldWithValues(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hscan,"ScanResult<Map.Entry<byte[], byte[]>> hscan(byte[],byte[],ScanParams)","[1697, 1700]","{'A1': [(1697, 1700)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<Map.Entry<byte[], byte[]>> hscan(byte[] key, byte[] cursor, ScanParams params) {
    return executeCommand(commandObjects.hscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hscanNoValues,"ScanResult<byte[]> hscanNoValues(byte[],byte[],ScanParams)","[1702, 1705]","{'A40': [(1702, 1705)]}",{'A40': 1.0},A40,,"  @Override
  public ScanResult<byte[]> hscanNoValues(byte[] key, byte[] cursor, ScanParams params) {
    return executeCommand(commandObjects.hscanNoValues(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hstrlen,"long hstrlen(byte[],byte[])","[1707, 1710]","{'A1': [(1707, 1710)]}",{'A1': 1.0},A1,,"  @Override
  public long hstrlen(byte[] key, byte[] field) {
    return executeCommand(commandObjects.hstrlen(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpire,"List<Long> hexpire(String,long)","[1712, 1715]","{'A1': [(1712, 1715)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpire(String key, long seconds, String... fields) {
    return executeCommand(commandObjects.hexpire(key, seconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpire,"List<Long> hexpire(String,long,ExpiryOption)","[1717, 1720]","{'A1': [(1717, 1720)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpire(String key, long seconds, ExpiryOption condition, String... fields) {
    return executeCommand(commandObjects.hexpire(key, seconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpire,"List<Long> hpexpire(String,long)","[1722, 1725]","{'A1': [(1722, 1725)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpire(String key, long milliseconds, String... fields) {
    return executeCommand(commandObjects.hpexpire(key, milliseconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpire,"List<Long> hpexpire(String,long,ExpiryOption)","[1727, 1730]","{'A1': [(1727, 1730)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpire(String key, long milliseconds, ExpiryOption condition, String... fields) {
    return executeCommand(commandObjects.hpexpire(key, milliseconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpireAt,"List<Long> hexpireAt(String,long)","[1732, 1735]","{'A1': [(1732, 1735)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpireAt(String key, long unixTimeSeconds, String... fields) {
    return executeCommand(commandObjects.hexpireAt(key, unixTimeSeconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpireAt,"List<Long> hexpireAt(String,long,ExpiryOption)","[1737, 1740]","{'A1': [(1737, 1740)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpireAt(String key, long unixTimeSeconds, ExpiryOption condition, String... fields) {
    return executeCommand(commandObjects.hexpireAt(key, unixTimeSeconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpireAt,"List<Long> hpexpireAt(String,long)","[1742, 1745]","{'A1': [(1742, 1745)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpireAt(String key, long unixTimeMillis, String... fields) {
    return executeCommand(commandObjects.hpexpireAt(key, unixTimeMillis, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpireAt,"List<Long> hpexpireAt(String,long,ExpiryOption)","[1747, 1750]","{'A1': [(1747, 1750)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpireAt(String key, long unixTimeMillis, ExpiryOption condition, String... fields) {
    return executeCommand(commandObjects.hpexpireAt(key, unixTimeMillis, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpire,"List<Long> hexpire(byte[],long)","[1752, 1755]","{'A1': [(1752, 1755)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpire(byte[] key, long seconds, byte[]... fields) {
    return executeCommand(commandObjects.hexpire(key, seconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpire,"List<Long> hexpire(byte[],long,ExpiryOption)","[1757, 1760]","{'A1': [(1757, 1760)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpire(byte[] key, long seconds, ExpiryOption condition, byte[]... fields) {
    return executeCommand(commandObjects.hexpire(key, seconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpire,"List<Long> hpexpire(byte[],long)","[1762, 1765]","{'A1': [(1762, 1765)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpire(byte[] key, long milliseconds, byte[]... fields) {
    return executeCommand(commandObjects.hpexpire(key, milliseconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpire,"List<Long> hpexpire(byte[],long,ExpiryOption)","[1767, 1770]","{'A1': [(1767, 1770)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpire(byte[] key, long milliseconds, ExpiryOption condition, byte[]... fields) {
    return executeCommand(commandObjects.hpexpire(key, milliseconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpireAt,"List<Long> hexpireAt(byte[],long)","[1772, 1775]","{'A1': [(1772, 1775)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpireAt(byte[] key, long unixTimeSeconds, byte[]... fields) {
    return executeCommand(commandObjects.hexpireAt(key, unixTimeSeconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpireAt,"List<Long> hexpireAt(byte[],long,ExpiryOption)","[1777, 1780]","{'A1': [(1777, 1780)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpireAt(byte[] key, long unixTimeSeconds, ExpiryOption condition, byte[]... fields) {
    return executeCommand(commandObjects.hexpireAt(key, unixTimeSeconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpireAt,"List<Long> hpexpireAt(byte[],long)","[1782, 1785]","{'A1': [(1782, 1785)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpireAt(byte[] key, long unixTimeMillis, byte[]... fields) {
    return executeCommand(commandObjects.hpexpireAt(key, unixTimeMillis, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpireAt,"List<Long> hpexpireAt(byte[],long,ExpiryOption)","[1787, 1790]","{'A1': [(1787, 1790)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpireAt(byte[] key, long unixTimeMillis, ExpiryOption condition, byte[]... fields) {
    return executeCommand(commandObjects.hpexpireAt(key, unixTimeMillis, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpireTime,List<Long> hexpireTime(String),"[1792, 1795]","{'A1': [(1792, 1795)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpireTime(String key, String... fields) {
    return executeCommand(commandObjects.hexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpireTime,List<Long> hpexpireTime(String),"[1797, 1800]","{'A1': [(1797, 1800)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpireTime(String key, String... fields) {
    return executeCommand(commandObjects.hpexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,httl,List<Long> httl(String),"[1802, 1805]","{'A1': [(1802, 1805)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> httl(String key, String... fields) {
    return executeCommand(commandObjects.httl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpttl,List<Long> hpttl(String),"[1807, 1810]","{'A1': [(1807, 1810)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpttl(String key, String... fields) {
    return executeCommand(commandObjects.hpttl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hexpireTime,List<Long> hexpireTime(byte[]),"[1812, 1815]","{'A1': [(1812, 1815)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hexpireTime(byte[] key, byte[]... fields) {
    return executeCommand(commandObjects.hexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpexpireTime,List<Long> hpexpireTime(byte[]),"[1817, 1820]","{'A1': [(1817, 1820)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpexpireTime(byte[] key, byte[]... fields) {
    return executeCommand(commandObjects.hpexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,httl,List<Long> httl(byte[]),"[1822, 1825]","{'A1': [(1822, 1825)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> httl(byte[] key, byte[]... fields) {
    return executeCommand(commandObjects.httl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpttl,List<Long> hpttl(byte[]),"[1827, 1830]","{'A1': [(1827, 1830)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpttl(byte[] key, byte[]... fields) {
    return executeCommand(commandObjects.hpttl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpersist,List<Long> hpersist(String),"[1832, 1835]","{'A1': [(1832, 1835)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpersist(String key, String... fields) {
    return executeCommand(commandObjects.hpersist(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hpersist,List<Long> hpersist(byte[]),"[1837, 1840]","{'A1': [(1837, 1840)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> hpersist(byte[] key, byte[]... fields) {
    return executeCommand(commandObjects.hpersist(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sadd,long sadd(String),"[1844, 1847]","{'A1': [(1844, 1844), (1847, 1847)], 'A12': [(1845, 1846)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long sadd(String key, String... members) {
    return executeCommand(commandObjects.sadd(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,smembers,Set<String> smembers(String),"[1849, 1852]","{'A1': [(1849, 1852)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> smembers(String key) {
    return executeCommand(commandObjects.smembers(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,srem,long srem(String),"[1854, 1857]","{'A1': [(1854, 1854), (1857, 1857)], 'A12': [(1855, 1856)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long srem(String key, String... members) {
    return executeCommand(commandObjects.srem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,spop,String spop(String),"[1859, 1862]","{'A1': [(1859, 1862)]}",{'A1': 1.0},A1,,"  @Override
  public String spop(String key) {
    return executeCommand(commandObjects.spop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,spop,"Set<String> spop(String,long)","[1864, 1867]","{'A1': [(1864, 1867)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> spop(String key, long count) {
    return executeCommand(commandObjects.spop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scard,long scard(String),"[1869, 1872]","{'A1': [(1869, 1872)]}",{'A1': 1.0},A1,,"  @Override
  public long scard(String key) {
    return executeCommand(commandObjects.scard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sismember,"boolean sismember(String,String)","[1874, 1877]","{'A1': [(1874, 1877)]}",{'A1': 1.0},A1,,"  @Override
  public boolean sismember(String key, String member) {
    return executeCommand(commandObjects.sismember(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,smismember,List<Boolean> smismember(String),"[1879, 1882]","{'A1': [(1879, 1882)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> smismember(String key, String... members) {
    return executeCommand(commandObjects.smismember(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sadd,long sadd(byte[]),"[1884, 1887]","{'A1': [(1884, 1884), (1887, 1887)], 'A12': [(1885, 1886)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long sadd(byte[] key, byte[]... members) {
    return executeCommand(commandObjects.sadd(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,smembers,Set<byte[]> smembers(byte[]),"[1889, 1892]","{'A1': [(1889, 1892)]}",{'A1': 1.0},A1,,"  @Override
  public Set<byte[]> smembers(byte[] key) {
    return executeCommand(commandObjects.smembers(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,srem,long srem(byte[]),"[1894, 1897]","{'A1': [(1894, 1894), (1897, 1897)], 'A12': [(1895, 1896)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long srem(byte[] key, byte[]... members) {
    return executeCommand(commandObjects.srem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,spop,byte[] spop(byte[]),"[1899, 1902]","{'A1': [(1899, 1902)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] spop(byte[] key) {
    return executeCommand(commandObjects.spop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,spop,"Set<byte[]> spop(byte[],long)","[1904, 1907]","{'A1': [(1904, 1907)]}",{'A1': 1.0},A1,,"  @Override
  public Set<byte[]> spop(byte[] key, long count) {
    return executeCommand(commandObjects.spop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scard,long scard(byte[]),"[1909, 1912]","{'A1': [(1909, 1912)]}",{'A1': 1.0},A1,,"  @Override
  public long scard(byte[] key) {
    return executeCommand(commandObjects.scard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sismember,"boolean sismember(byte[],byte[])","[1914, 1917]","{'A1': [(1914, 1917)]}",{'A1': 1.0},A1,,"  @Override
  public boolean sismember(byte[] key, byte[] member) {
    return executeCommand(commandObjects.sismember(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,smismember,List<Boolean> smismember(byte[]),"[1919, 1922]","{'A1': [(1919, 1922)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> smismember(byte[] key, byte[]... members) {
    return executeCommand(commandObjects.smismember(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,srandmember,String srandmember(String),"[1924, 1927]","{'A1': [(1924, 1927)]}",{'A1': 1.0},A1,,"  @Override
  public String srandmember(String key) {
    return executeCommand(commandObjects.srandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,srandmember,"List<String> srandmember(String,int)","[1929, 1932]","{'A1': [(1929, 1932)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> srandmember(String key, int count) {
    return executeCommand(commandObjects.srandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sscan,"ScanResult<String> sscan(String,String,ScanParams)","[1934, 1937]","{'A1': [(1934, 1937)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<String> sscan(String key, String cursor, ScanParams params) {
    return executeCommand(commandObjects.sscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,srandmember,byte[] srandmember(byte[]),"[1939, 1942]","{'A1': [(1939, 1942)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] srandmember(byte[] key) {
    return executeCommand(commandObjects.srandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,srandmember,"List<byte[]> srandmember(byte[],int)","[1944, 1947]","{'A1': [(1944, 1947)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> srandmember(byte[] key, int count) {
    return executeCommand(commandObjects.srandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sscan,"ScanResult<byte[]> sscan(byte[],byte[],ScanParams)","[1949, 1952]","{'A1': [(1949, 1952)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<byte[]> sscan(byte[] key, byte[] cursor, ScanParams params) {
    return executeCommand(commandObjects.sscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sdiff,Set<String> sdiff(),"[1954, 1957]","{'A1': [(1954, 1957)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> sdiff(String... keys) {
    return executeCommand(commandObjects.sdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sdiffstore,long sdiffstore(String),"[1959, 1962]","{'A1': [(1959, 1962)]}",{'A1': 1.0},A1,,"  @Override
  public long sdiffstore(String dstkey, String... keys) {
    return executeCommand(commandObjects.sdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sinter,Set<String> sinter(),"[1964, 1967]","{'A1': [(1964, 1967)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> sinter(String... keys) {
    return executeCommand(commandObjects.sinter(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sinterstore,long sinterstore(String),"[1969, 1972]","{'A1': [(1969, 1972)]}",{'A1': 1.0},A1,,"  @Override
  public long sinterstore(String dstkey, String... keys) {
    return executeCommand(commandObjects.sinterstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sintercard,long sintercard(),"[1974, 1977]","{'A12': [(1974, 1977)]}",{'A12': 1.0},A12,,"  @Override
  public long sintercard(String... keys) {
    return executeCommand(commandObjects.sintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sintercard,long sintercard(int),"[1979, 1982]","{'A12': [(1979, 1982)]}",{'A12': 1.0},A12,,"  @Override
  public long sintercard(int limit, String... keys) {
    return executeCommand(commandObjects.sintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sunion,Set<String> sunion(),"[1984, 1987]","{'A1': [(1984, 1987)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> sunion(String... keys) {
    return executeCommand(commandObjects.sunion(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sunionstore,long sunionstore(String),"[1989, 1992]","{'A1': [(1989, 1992)]}",{'A1': 1.0},A1,,"  @Override
  public long sunionstore(String dstkey, String... keys) {
    return executeCommand(commandObjects.sunionstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,smove,"long smove(String,String,String)","[1994, 1997]","{'A1': [(1994, 1997)]}",{'A1': 1.0},A1,,"  @Override
  public long smove(String srckey, String dstkey, String member) {
    return executeCommand(commandObjects.smove(srckey, dstkey, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sdiff,Set<byte[]> sdiff(),"[1999, 2002]","{'A1': [(1999, 2002)]}",{'A1': 1.0},A1,,"  @Override
  public Set<byte[]> sdiff(byte[]... keys) {
    return executeCommand(commandObjects.sdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sdiffstore,long sdiffstore(byte[]),"[2004, 2007]","{'A1': [(2004, 2007)]}",{'A1': 1.0},A1,,"  @Override
  public long sdiffstore(byte[] dstkey, byte[]... keys) {
    return executeCommand(commandObjects.sdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sinter,Set<byte[]> sinter(),"[2009, 2012]","{'A1': [(2009, 2012)]}",{'A1': 1.0},A1,,"  @Override
  public Set<byte[]> sinter(byte[]... keys) {
    return executeCommand(commandObjects.sinter(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sinterstore,long sinterstore(byte[]),"[2014, 2017]","{'A1': [(2014, 2017)]}",{'A1': 1.0},A1,,"  @Override
  public long sinterstore(byte[] dstkey, byte[]... keys) {
    return executeCommand(commandObjects.sinterstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sintercard,long sintercard(),"[2019, 2022]","{'A12': [(2019, 2022)]}",{'A12': 1.0},A12,,"  @Override
  public long sintercard(byte[]... keys) {
    return executeCommand(commandObjects.sintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sintercard,long sintercard(int),"[2024, 2027]","{'A12': [(2024, 2027)]}",{'A12': 1.0},A12,,"  @Override
  public long sintercard(int limit, byte[]... keys) {
    return executeCommand(commandObjects.sintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sunion,Set<byte[]> sunion(),"[2029, 2032]","{'A1': [(2029, 2032)]}",{'A1': 1.0},A1,,"  @Override
  public Set<byte[]> sunion(byte[]... keys) {
    return executeCommand(commandObjects.sunion(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sunionstore,long sunionstore(byte[]),"[2034, 2037]","{'A1': [(2034, 2037)]}",{'A1': 1.0},A1,,"  @Override
  public long sunionstore(byte[] dstkey, byte[]... keys) {
    return executeCommand(commandObjects.sunionstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,smove,"long smove(byte[],byte[],byte[])","[2039, 2042]","{'A1': [(2039, 2042)]}",{'A1': 1.0},A1,,"  @Override
  public long smove(byte[] srckey, byte[] dstkey, byte[] member) {
    return executeCommand(commandObjects.smove(srckey, dstkey, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zadd,"long zadd(String,double,String)","[2046, 2049]","{'A1': [(2046, 2049)]}",{'A1': 1.0},A1,,"  @Override
  public long zadd(String key, double score, String member) {
    return executeCommand(commandObjects.zadd(key, score, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zadd,"long zadd(String,double,String,ZAddParams)","[2051, 2054]","{'A1': [(2051, 2054)]}",{'A1': 1.0},A1,,"  @Override
  public long zadd(String key, double score, String member, ZAddParams params) {
    return executeCommand(commandObjects.zadd(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zadd,"long zadd(String,Map<String, Double>)","[2056, 2059]","{'A1': [(2056, 2059)]}",{'A1': 1.0},A1,,"  @Override
  public long zadd(String key, Map<String, Double> scoreMembers) {
    return executeCommand(commandObjects.zadd(key, scoreMembers));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zadd,"long zadd(String,Map<String, Double>,ZAddParams)","[2061, 2064]","{'A1': [(2061, 2064)]}",{'A1': 1.0},A1,,"  @Override
  public long zadd(String key, Map<String, Double> scoreMembers, ZAddParams params) {
    return executeCommand(commandObjects.zadd(key, scoreMembers, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zaddIncr,"Double zaddIncr(String,double,String,ZAddParams)","[2066, 2069]","{'A1': [(2066, 2069)]}",{'A1': 1.0},A1,,"  @Override
  public Double zaddIncr(String key, double score, String member, ZAddParams params) {
    return executeCommand(commandObjects.zaddIncr(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zadd,"long zadd(byte[],double,byte[])","[2071, 2074]","{'A1': [(2071, 2074)]}",{'A1': 1.0},A1,,"  @Override
  public long zadd(byte[] key, double score, byte[] member) {
    return executeCommand(commandObjects.zadd(key, score, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zadd,"long zadd(byte[],double,byte[],ZAddParams)","[2076, 2079]","{'A1': [(2076, 2079)]}",{'A1': 1.0},A1,,"  @Override
  public long zadd(byte[] key, double score, byte[] member, ZAddParams params) {
    return executeCommand(commandObjects.zadd(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zadd,"long zadd(byte[],Map<byte[], Double>)","[2081, 2084]","{'A1': [(2081, 2084)]}",{'A1': 1.0},A1,,"  @Override
  public long zadd(byte[] key, Map<byte[], Double> scoreMembers) {
    return executeCommand(commandObjects.zadd(key, scoreMembers));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zadd,"long zadd(byte[],Map<byte[], Double>,ZAddParams)","[2086, 2089]","{'A1': [(2086, 2089)]}",{'A1': 1.0},A1,,"  @Override
  public long zadd(byte[] key, Map<byte[], Double> scoreMembers, ZAddParams params) {
    return executeCommand(commandObjects.zadd(key, scoreMembers, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zaddIncr,"Double zaddIncr(byte[],double,byte[],ZAddParams)","[2091, 2094]","{'A1': [(2091, 2094)]}",{'A1': 1.0},A1,,"  @Override
  public Double zaddIncr(byte[] key, double score, byte[] member, ZAddParams params) {
    return executeCommand(commandObjects.zaddIncr(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrem,long zrem(String),"[2096, 2099]","{'A1': [(2096, 2099)]}",{'A1': 1.0},A1,,"  @Override
  public long zrem(String key, String... members) {
    return executeCommand(commandObjects.zrem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zincrby,"double zincrby(String,double,String)","[2101, 2104]","{'A1': [(2101, 2104)]}",{'A1': 1.0},A1,,"  @Override
  public double zincrby(String key, double increment, String member) {
    return executeCommand(commandObjects.zincrby(key, increment, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zincrby,"Double zincrby(String,double,String,ZIncrByParams)","[2106, 2109]","{'A1': [(2106, 2109)]}",{'A1': 1.0},A1,,"  @Override
  public Double zincrby(String key, double increment, String member, ZIncrByParams params) {
    return executeCommand(commandObjects.zincrby(key, increment, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrank,"Long zrank(String,String)","[2111, 2114]","{'A1': [(2111, 2114)]}",{'A1': 1.0},A1,,"  @Override
  public Long zrank(String key, String member) {
    return executeCommand(commandObjects.zrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrank,"Long zrevrank(String,String)","[2116, 2119]","{'A1': [(2116, 2119)]}",{'A1': 1.0},A1,,"  @Override
  public Long zrevrank(String key, String member) {
    return executeCommand(commandObjects.zrevrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrankWithScore,"KeyValue<Long, Double> zrankWithScore(String,String)","[2121, 2124]","{'A10': [(2121, 2124)]}",{'A10': 1.0},A10,,"  @Override
  public KeyValue<Long, Double> zrankWithScore(String key, String member) {
    return executeCommand(commandObjects.zrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrankWithScore,"KeyValue<Long, Double> zrevrankWithScore(String,String)","[2126, 2129]","{'A10': [(2126, 2129)]}",{'A10': 1.0},A10,,"  @Override
  public KeyValue<Long, Double> zrevrankWithScore(String key, String member) {
    return executeCommand(commandObjects.zrevrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrem,long zrem(byte[]),"[2131, 2134]","{'A1': [(2131, 2134)]}",{'A1': 1.0},A1,,"  @Override
  public long zrem(byte[] key, byte[]... members) {
    return executeCommand(commandObjects.zrem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zincrby,"double zincrby(byte[],double,byte[])","[2136, 2139]","{'A1': [(2136, 2139)]}",{'A1': 1.0},A1,,"  @Override
  public double zincrby(byte[] key, double increment, byte[] member) {
    return executeCommand(commandObjects.zincrby(key, increment, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zincrby,"Double zincrby(byte[],double,byte[],ZIncrByParams)","[2141, 2144]","{'A1': [(2141, 2144)]}",{'A1': 1.0},A1,,"  @Override
  public Double zincrby(byte[] key, double increment, byte[] member, ZIncrByParams params) {
    return executeCommand(commandObjects.zincrby(key, increment, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrank,"Long zrank(byte[],byte[])","[2146, 2149]","{'A1': [(2146, 2149)]}",{'A1': 1.0},A1,,"  @Override
  public Long zrank(byte[] key, byte[] member) {
    return executeCommand(commandObjects.zrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrank,"Long zrevrank(byte[],byte[])","[2151, 2154]","{'A1': [(2151, 2154)]}",{'A1': 1.0},A1,,"  @Override
  public Long zrevrank(byte[] key, byte[] member) {
    return executeCommand(commandObjects.zrevrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrankWithScore,"KeyValue<Long, Double> zrankWithScore(byte[],byte[])","[2156, 2159]","{'A10': [(2156, 2159)]}",{'A10': 1.0},A10,,"  @Override
  public KeyValue<Long, Double> zrankWithScore(byte[] key, byte[] member) {
    return executeCommand(commandObjects.zrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrankWithScore,"KeyValue<Long, Double> zrevrankWithScore(byte[],byte[])","[2161, 2164]","{'A10': [(2161, 2164)]}",{'A10': 1.0},A10,,"  @Override
  public KeyValue<Long, Double> zrevrankWithScore(byte[] key, byte[] member) {
    return executeCommand(commandObjects.zrevrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrandmember,String zrandmember(String),"[2166, 2169]","{'A1': [(2166, 2169)]}",{'A1': 1.0},A1,,"  @Override
  public String zrandmember(String key) {
    return executeCommand(commandObjects.zrandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrandmember,"List<String> zrandmember(String,long)","[2171, 2174]","{'A1': [(2171, 2174)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrandmember(String key, long count) {
    return executeCommand(commandObjects.zrandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrandmemberWithScores,"List<Tuple> zrandmemberWithScores(String,long)","[2176, 2179]","{'A1': [(2176, 2179)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrandmemberWithScores(String key, long count) {
    return executeCommand(commandObjects.zrandmemberWithScores(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zcard,long zcard(String),"[2181, 2184]","{'A1': [(2181, 2184)]}",{'A1': 1.0},A1,,"  @Override
  public long zcard(String key) {
    return executeCommand(commandObjects.zcard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zscore,"Double zscore(String,String)","[2186, 2189]","{'A1': [(2186, 2189)]}",{'A1': 1.0},A1,,"  @Override
  public Double zscore(String key, String member) {
    return executeCommand(commandObjects.zscore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zmscore,List<Double> zmscore(String),"[2191, 2194]","{'A1': [(2191, 2194)]}",{'A1': 1.0},A1,,"  @Override
  public List<Double> zmscore(String key, String... members) {
    return executeCommand(commandObjects.zmscore(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrandmember,byte[] zrandmember(byte[]),"[2196, 2199]","{'A1': [(2196, 2199)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] zrandmember(byte[] key) {
    return executeCommand(commandObjects.zrandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrandmember,"List<byte[]> zrandmember(byte[],long)","[2201, 2204]","{'A1': [(2201, 2204)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrandmember(byte[] key, long count) {
    return executeCommand(commandObjects.zrandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrandmemberWithScores,"List<Tuple> zrandmemberWithScores(byte[],long)","[2206, 2209]","{'A1': [(2206, 2209)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrandmemberWithScores(byte[] key, long count) {
    return executeCommand(commandObjects.zrandmemberWithScores(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zcard,long zcard(byte[]),"[2211, 2214]","{'A1': [(2211, 2214)]}",{'A1': 1.0},A1,,"  @Override
  public long zcard(byte[] key) {
    return executeCommand(commandObjects.zcard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zscore,"Double zscore(byte[],byte[])","[2216, 2219]","{'A1': [(2216, 2219)]}",{'A1': 1.0},A1,,"  @Override
  public Double zscore(byte[] key, byte[] member) {
    return executeCommand(commandObjects.zscore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zmscore,List<Double> zmscore(byte[]),"[2221, 2224]","{'A1': [(2221, 2224)]}",{'A1': 1.0},A1,,"  @Override
  public List<Double> zmscore(byte[] key, byte[]... members) {
    return executeCommand(commandObjects.zmscore(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zpopmax,Tuple zpopmax(String),"[2226, 2229]","{'A1': [(2226, 2229)]}",{'A1': 1.0},A1,,"  @Override
  public Tuple zpopmax(String key) {
    return executeCommand(commandObjects.zpopmax(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zpopmax,"List<Tuple> zpopmax(String,int)","[2231, 2234]","{'A1': [(2231, 2234)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zpopmax(String key, int count) {
    return executeCommand(commandObjects.zpopmax(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zpopmin,Tuple zpopmin(String),"[2236, 2239]","{'A1': [(2236, 2239)]}",{'A1': 1.0},A1,,"  @Override
  public Tuple zpopmin(String key) {
    return executeCommand(commandObjects.zpopmin(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zpopmin,"List<Tuple> zpopmin(String,int)","[2241, 2244]","{'A1': [(2241, 2244)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zpopmin(String key, int count) {
    return executeCommand(commandObjects.zpopmin(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zcount,"long zcount(String,double,double)","[2246, 2249]","{'A1': [(2246, 2249)]}",{'A1': 1.0},A1,,"  @Override
  public long zcount(String key, double min, double max) {
    return executeCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zcount,"long zcount(String,String,String)","[2251, 2254]","{'A1': [(2251, 2254)]}",{'A1': 1.0},A1,,"  @Override
  public long zcount(String key, String min, String max) {
    return executeCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zpopmax,Tuple zpopmax(byte[]),"[2256, 2259]","{'A1': [(2256, 2259)]}",{'A1': 1.0},A1,,"  @Override
  public Tuple zpopmax(byte[] key) {
    return executeCommand(commandObjects.zpopmax(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zpopmax,"List<Tuple> zpopmax(byte[],int)","[2261, 2264]","{'A1': [(2261, 2264)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zpopmax(byte[] key, int count) {
    return executeCommand(commandObjects.zpopmax(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zpopmin,Tuple zpopmin(byte[]),"[2266, 2269]","{'A1': [(2266, 2269)]}",{'A1': 1.0},A1,,"  @Override
  public Tuple zpopmin(byte[] key) {
    return executeCommand(commandObjects.zpopmin(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zpopmin,"List<Tuple> zpopmin(byte[],int)","[2271, 2274]","{'A1': [(2271, 2274)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zpopmin(byte[] key, int count) {
    return executeCommand(commandObjects.zpopmin(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zcount,"long zcount(byte[],double,double)","[2276, 2279]","{'A1': [(2276, 2279)]}",{'A1': 1.0},A1,,"  @Override
  public long zcount(byte[] key, double min, double max) {
    return executeCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zcount,"long zcount(byte[],byte[],byte[])","[2281, 2284]","{'A1': [(2281, 2284)]}",{'A1': 1.0},A1,,"  @Override
  public long zcount(byte[] key, byte[] min, byte[] max) {
    return executeCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrange,"List<String> zrange(String,long,long)","[2286, 2289]","{'A1': [(2286, 2289)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrange(String key, long start, long stop) {
    return executeCommand(commandObjects.zrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrange,"List<String> zrevrange(String,long,long)","[2291, 2294]","{'A1': [(2291, 2294)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrevrange(String key, long start, long stop) {
    return executeCommand(commandObjects.zrevrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeWithScores,"List<Tuple> zrangeWithScores(String,long,long)","[2296, 2299]","{'A1': [(2296, 2299)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeWithScores(String key, long start, long stop) {
    return executeCommand(commandObjects.zrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeWithScores,"List<Tuple> zrevrangeWithScores(String,long,long)","[2301, 2304]","{'A1': [(2301, 2304)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeWithScores(String key, long start, long stop) {
    return executeCommand(commandObjects.zrevrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrange,"List<String> zrange(String,ZRangeParams)","[2306, 2309]","{'A1': [(2306, 2309)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrange(String key, ZRangeParams zRangeParams) {
    return executeCommand(commandObjects.zrange(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeWithScores,"List<Tuple> zrangeWithScores(String,ZRangeParams)","[2311, 2314]","{'A1': [(2311, 2314)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeWithScores(String key, ZRangeParams zRangeParams) {
    return executeCommand(commandObjects.zrangeWithScores(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangestore,"long zrangestore(String,String,ZRangeParams)","[2316, 2319]","{'A1': [(2316, 2319)]}",{'A1': 1.0},A1,,"  @Override
  public long zrangestore(String dest, String src, ZRangeParams zRangeParams) {
    return executeCommand(commandObjects.zrangestore(dest, src, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScore,"List<String> zrangeByScore(String,double,double)","[2321, 2324]","{'A1': [(2321, 2324)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrangeByScore(String key, double min, double max) {
    return executeCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScore,"List<String> zrangeByScore(String,String,String)","[2326, 2329]","{'A1': [(2326, 2329)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrangeByScore(String key, String min, String max) {
    return executeCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScore,"List<String> zrevrangeByScore(String,double,double)","[2331, 2334]","{'A1': [(2331, 2334)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrevrangeByScore(String key, double max, double min) {
    return executeCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScore,"List<String> zrangeByScore(String,double,double,int,int)","[2336, 2339]","{'A1': [(2336, 2339)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrangeByScore(String key, double min, double max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScore,"List<String> zrevrangeByScore(String,String,String)","[2341, 2344]","{'A1': [(2341, 2344)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrevrangeByScore(String key, String max, String min) {
    return executeCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScore,"List<String> zrangeByScore(String,String,String,int,int)","[2346, 2349]","{'A1': [(2346, 2349)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrangeByScore(String key, String min, String max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScore,"List<String> zrevrangeByScore(String,double,double,int,int)","[2351, 2354]","{'A1': [(2351, 2354)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrevrangeByScore(String key, double max, double min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(String,double,double)","[2356, 2359]","{'A1': [(2356, 2359)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeByScoreWithScores(String key, double min, double max) {
    return executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(String,double,double)","[2361, 2364]","{'A1': [(2361, 2364)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(String key, double max, double min) {
    return executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(String,double,double,int,int)","[2366, 2369]","{'A1': [(2366, 2369)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeByScoreWithScores(String key, double min, double max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScore,"List<String> zrevrangeByScore(String,String,String,int,int)","[2371, 2374]","{'A1': [(2371, 2374)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrevrangeByScore(String key, String max, String min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(String,String,String)","[2376, 2379]","{'A1': [(2376, 2379)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeByScoreWithScores(String key, String min, String max) {
    return executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(String,String,String)","[2381, 2384]","{'A1': [(2381, 2384)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(String key, String max, String min) {
    return executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(String,String,String,int,int)","[2386, 2389]","{'A1': [(2386, 2389)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeByScoreWithScores(String key, String min, String max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(String,double,double,int,int)","[2391, 2394]","{'A1': [(2391, 2394)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(String key, double max, double min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(String,String,String,int,int)","[2396, 2399]","{'A1': [(2396, 2399)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(String key, String max, String min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrange,"List<byte[]> zrange(byte[],long,long)","[2401, 2404]","{'A1': [(2401, 2404)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrange(byte[] key, long start, long stop) {
    return executeCommand(commandObjects.zrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrange,"List<byte[]> zrevrange(byte[],long,long)","[2406, 2409]","{'A1': [(2406, 2409)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrevrange(byte[] key, long start, long stop) {
    return executeCommand(commandObjects.zrevrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeWithScores,"List<Tuple> zrangeWithScores(byte[],long,long)","[2411, 2414]","{'A1': [(2411, 2414)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeWithScores(byte[] key, long start, long stop) {
    return executeCommand(commandObjects.zrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeWithScores,"List<Tuple> zrevrangeWithScores(byte[],long,long)","[2416, 2419]","{'A1': [(2416, 2419)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeWithScores(byte[] key, long start, long stop) {
    return executeCommand(commandObjects.zrevrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrange,"List<byte[]> zrange(byte[],ZRangeParams)","[2421, 2424]","{'A1': [(2421, 2424)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrange(byte[] key, ZRangeParams zRangeParams) {
    return executeCommand(commandObjects.zrange(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeWithScores,"List<Tuple> zrangeWithScores(byte[],ZRangeParams)","[2426, 2429]","{'A1': [(2426, 2429)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeWithScores(byte[] key, ZRangeParams zRangeParams) {
    return executeCommand(commandObjects.zrangeWithScores(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangestore,"long zrangestore(byte[],byte[],ZRangeParams)","[2431, 2434]","{'A1': [(2431, 2434)]}",{'A1': 1.0},A1,,"  @Override
  public long zrangestore(byte[] dest, byte[] src, ZRangeParams zRangeParams) {
    return executeCommand(commandObjects.zrangestore(dest, src, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScore,"List<byte[]> zrangeByScore(byte[],double,double)","[2436, 2439]","{'A1': [(2436, 2439)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrangeByScore(byte[] key, double min, double max) {
    return executeCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScore,"List<byte[]> zrangeByScore(byte[],byte[],byte[])","[2441, 2444]","{'A1': [(2441, 2444)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrangeByScore(byte[] key, byte[] min, byte[] max) {
    return executeCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScore,"List<byte[]> zrevrangeByScore(byte[],double,double)","[2446, 2449]","{'A1': [(2446, 2449)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrevrangeByScore(byte[] key, double max, double min) {
    return executeCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScore,"List<byte[]> zrangeByScore(byte[],double,double,int,int)","[2451, 2454]","{'A1': [(2451, 2454)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrangeByScore(byte[] key, double min, double max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScore,"List<byte[]> zrevrangeByScore(byte[],byte[],byte[])","[2456, 2459]","{'A1': [(2456, 2459)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrevrangeByScore(byte[] key, byte[] max, byte[] min) {
    return executeCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScore,"List<byte[]> zrangeByScore(byte[],byte[],byte[],int,int)","[2461, 2464]","{'A1': [(2461, 2464)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrangeByScore(byte[] key, byte[] min, byte[] max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScore,"List<byte[]> zrevrangeByScore(byte[],double,double,int,int)","[2466, 2469]","{'A1': [(2466, 2469)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrevrangeByScore(byte[] key, double max, double min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(byte[],double,double)","[2471, 2474]","{'A1': [(2471, 2474)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeByScoreWithScores(byte[] key, double min, double max) {
    return executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(byte[],double,double)","[2476, 2479]","{'A1': [(2476, 2479)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(byte[] key, double max, double min) {
    return executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(byte[],double,double,int,int)","[2481, 2484]","{'A1': [(2481, 2484)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeByScoreWithScores(byte[] key, double min, double max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScore,"List<byte[]> zrevrangeByScore(byte[],byte[],byte[],int,int)","[2486, 2489]","{'A1': [(2486, 2489)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrevrangeByScore(byte[] key, byte[] max, byte[] min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(byte[],byte[],byte[])","[2491, 2494]","{'A1': [(2491, 2494)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeByScoreWithScores(byte[] key, byte[] min, byte[] max) {
    return executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(byte[],byte[],byte[])","[2496, 2499]","{'A1': [(2496, 2499)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(byte[] key, byte[] max, byte[] min) {
    return executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(byte[],byte[],byte[],int,int)","[2501, 2504]","{'A1': [(2501, 2504)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrangeByScoreWithScores(byte[] key, byte[] min, byte[] max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(byte[],double,double,int,int)","[2506, 2509]","{'A1': [(2506, 2509)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(byte[] key, double max, double min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(byte[],byte[],byte[],int,int)","[2511, 2514]","{'A1': [(2511, 2514)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(byte[] key, byte[] max, byte[] min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zremrangeByRank,"long zremrangeByRank(String,long,long)","[2516, 2519]","{'A1': [(2516, 2519)]}",{'A1': 1.0},A1,,"  @Override
  public long zremrangeByRank(String key, long start, long stop) {
    return executeCommand(commandObjects.zremrangeByRank(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zremrangeByScore,"long zremrangeByScore(String,double,double)","[2521, 2524]","{'A1': [(2521, 2524)]}",{'A1': 1.0},A1,,"  @Override
  public long zremrangeByScore(String key, double min, double max) {
    return executeCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zremrangeByScore,"long zremrangeByScore(String,String,String)","[2526, 2529]","{'A1': [(2526, 2529)]}",{'A1': 1.0},A1,,"  @Override
  public long zremrangeByScore(String key, String min, String max) {
    return executeCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zremrangeByRank,"long zremrangeByRank(byte[],long,long)","[2531, 2534]","{'A1': [(2531, 2534)]}",{'A1': 1.0},A1,,"  @Override
  public long zremrangeByRank(byte[] key, long start, long stop) {
    return executeCommand(commandObjects.zremrangeByRank(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zremrangeByScore,"long zremrangeByScore(byte[],double,double)","[2536, 2539]","{'A1': [(2536, 2539)]}",{'A1': 1.0},A1,,"  @Override
  public long zremrangeByScore(byte[] key, double min, double max) {
    return executeCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zremrangeByScore,"long zremrangeByScore(byte[],byte[],byte[])","[2541, 2544]","{'A1': [(2541, 2544)]}",{'A1': 1.0},A1,,"  @Override
  public long zremrangeByScore(byte[] key, byte[] min, byte[] max) {
    return executeCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zlexcount,"long zlexcount(String,String,String)","[2546, 2549]","{'A1': [(2546, 2549)]}",{'A1': 1.0},A1,,"  @Override
  public long zlexcount(String key, String min, String max) {
    return executeCommand(commandObjects.zlexcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByLex,"List<String> zrangeByLex(String,String,String)","[2551, 2554]","{'A1': [(2551, 2554)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrangeByLex(String key, String min, String max) {
    return executeCommand(commandObjects.zrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByLex,"List<String> zrangeByLex(String,String,String,int,int)","[2556, 2559]","{'A1': [(2556, 2559)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrangeByLex(String key, String min, String max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByLex(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByLex,"List<String> zrevrangeByLex(String,String,String)","[2561, 2564]","{'A1': [(2561, 2564)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrevrangeByLex(String key, String max, String min) {
    return executeCommand(commandObjects.zrevrangeByLex(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByLex,"List<String> zrevrangeByLex(String,String,String,int,int)","[2566, 2569]","{'A1': [(2566, 2569)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zrevrangeByLex(String key, String max, String min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByLex(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zremrangeByLex,"long zremrangeByLex(String,String,String)","[2571, 2574]","{'A1': [(2571, 2574)]}",{'A1': 1.0},A1,,"  @Override
  public long zremrangeByLex(String key, String min, String max) {
    return executeCommand(commandObjects.zremrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zlexcount,"long zlexcount(byte[],byte[],byte[])","[2576, 2579]","{'A1': [(2576, 2579)]}",{'A1': 1.0},A1,,"  @Override
  public long zlexcount(byte[] key, byte[] min, byte[] max) {
    return executeCommand(commandObjects.zlexcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByLex,"List<byte[]> zrangeByLex(byte[],byte[],byte[])","[2581, 2584]","{'A1': [(2581, 2584)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrangeByLex(byte[] key, byte[] min, byte[] max) {
    return executeCommand(commandObjects.zrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrangeByLex,"List<byte[]> zrangeByLex(byte[],byte[],byte[],int,int)","[2586, 2589]","{'A1': [(2586, 2589)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrangeByLex(byte[] key, byte[] min, byte[] max, int offset, int count) {
    return executeCommand(commandObjects.zrangeByLex(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByLex,"List<byte[]> zrevrangeByLex(byte[],byte[],byte[])","[2591, 2594]","{'A1': [(2591, 2594)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrevrangeByLex(byte[] key, byte[] max, byte[] min) {
    return executeCommand(commandObjects.zrevrangeByLex(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zrevrangeByLex,"List<byte[]> zrevrangeByLex(byte[],byte[],byte[],int,int)","[2596, 2599]","{'A1': [(2596, 2599)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zrevrangeByLex(byte[] key, byte[] max, byte[] min, int offset, int count) {
    return executeCommand(commandObjects.zrevrangeByLex(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zremrangeByLex,"long zremrangeByLex(byte[],byte[],byte[])","[2601, 2604]","{'A1': [(2601, 2604)]}",{'A1': 1.0},A1,,"  @Override
  public long zremrangeByLex(byte[] key, byte[] min, byte[] max) {
    return executeCommand(commandObjects.zremrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zscan,"ScanResult<Tuple> zscan(String,String,ScanParams)","[2606, 2609]","{'A1': [(2606, 2609)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<Tuple> zscan(String key, String cursor, ScanParams params) {
    return executeCommand(commandObjects.zscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zscan,"ScanResult<Tuple> zscan(byte[],byte[],ScanParams)","[2611, 2614]","{'A1': [(2611, 2614)]}",{'A1': 1.0},A1,,"  @Override
  public ScanResult<Tuple> zscan(byte[] key, byte[] cursor, ScanParams params) {
    return executeCommand(commandObjects.zscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bzpopmax,"KeyValue<String, Tuple> bzpopmax(double)","[2616, 2619]","{'A1': [(2616, 2619)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, Tuple> bzpopmax(double timeout, String... keys) {
    return executeCommand(commandObjects.bzpopmax(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bzpopmin,"KeyValue<String, Tuple> bzpopmin(double)","[2621, 2624]","{'A1': [(2621, 2624)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, Tuple> bzpopmin(double timeout, String... keys) {
    return executeCommand(commandObjects.bzpopmin(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bzpopmax,"KeyValue<byte[], Tuple> bzpopmax(double)","[2626, 2629]","{'A1': [(2626, 2629)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], Tuple> bzpopmax(double timeout, byte[]... keys) {
    return executeCommand(commandObjects.bzpopmax(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bzpopmin,"KeyValue<byte[], Tuple> bzpopmin(double)","[2631, 2634]","{'A1': [(2631, 2634)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], Tuple> bzpopmin(double timeout, byte[]... keys) {
    return executeCommand(commandObjects.bzpopmin(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zdiff,List<String> zdiff(),"[2636, 2639]","{'A1': [(2636, 2639)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zdiff(String... keys) {
    return executeCommand(commandObjects.zdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zdiffWithScores,List<Tuple> zdiffWithScores(),"[2641, 2644]","{'A1': [(2641, 2644)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zdiffWithScores(String... keys) {
    return executeCommand(commandObjects.zdiffWithScores(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zdiffStore,long zdiffStore(String),"[2646, 2650]","{'A1': [(2646, 2650)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long zdiffStore(String dstkey, String... keys) {
    return executeCommand(commandObjects.zdiffStore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zdiffstore,long zdiffstore(String),"[2652, 2655]","{'A1': [(2652, 2655)]}",{'A1': 1.0},A1,,"  @Override
  public long zdiffstore(String dstkey, String... keys) {
    return executeCommand(commandObjects.zdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zdiff,List<byte[]> zdiff(),"[2657, 2660]","{'A1': [(2657, 2660)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zdiff(byte[]... keys) {
    return executeCommand(commandObjects.zdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zdiffWithScores,List<Tuple> zdiffWithScores(),"[2662, 2665]","{'A1': [(2662, 2665)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zdiffWithScores(byte[]... keys) {
    return executeCommand(commandObjects.zdiffWithScores(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zdiffStore,long zdiffStore(byte[]),"[2667, 2671]","{'A1': [(2667, 2671)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long zdiffStore(byte[] dstkey, byte[]... keys) {
    return executeCommand(commandObjects.zdiffStore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zdiffstore,long zdiffstore(byte[]),"[2673, 2676]","{'A1': [(2673, 2676)]}",{'A1': 1.0},A1,,"  @Override
  public long zdiffstore(byte[] dstkey, byte[]... keys) {
    return executeCommand(commandObjects.zdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zinterstore,long zinterstore(String),"[2678, 2681]","{'A1': [(2678, 2681)]}",{'A1': 1.0},A1,,"  @Override
  public long zinterstore(String dstkey, String... sets) {
    return executeCommand(commandObjects.zinterstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zinterstore,"long zinterstore(String,ZParams)","[2683, 2686]","{'A1': [(2683, 2686)]}",{'A1': 1.0},A1,,"  @Override
  public long zinterstore(String dstkey, ZParams params, String... sets) {
    return executeCommand(commandObjects.zinterstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zinter,List<String> zinter(ZParams),"[2688, 2691]","{'A1': [(2688, 2691)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zinter(ZParams params, String... keys) {
    return executeCommand(commandObjects.zinter(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zinterWithScores,List<Tuple> zinterWithScores(ZParams),"[2693, 2696]","{'A1': [(2693, 2696)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zinterWithScores(ZParams params, String... keys) {
    return executeCommand(commandObjects.zinterWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zinterstore,long zinterstore(byte[]),"[2698, 2701]","{'A1': [(2698, 2701)]}",{'A1': 1.0},A1,,"  @Override
  public long zinterstore(byte[] dstkey, byte[]... sets) {
    return executeCommand(commandObjects.zinterstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zinterstore,"long zinterstore(byte[],ZParams)","[2703, 2706]","{'A1': [(2703, 2706)]}",{'A1': 1.0},A1,,"  @Override
  public long zinterstore(byte[] dstkey, ZParams params, byte[]... sets) {
    return executeCommand(commandObjects.zinterstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zintercard,long zintercard(),"[2708, 2711]","{'A12': [(2708, 2711)]}",{'A12': 1.0},A12,,"  @Override
  public long zintercard(byte[]... keys) {
    return executeCommand(commandObjects.zintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zintercard,long zintercard(long),"[2713, 2716]","{'A12': [(2713, 2716)]}",{'A12': 1.0},A12,,"  @Override
  public long zintercard(long limit, byte[]... keys) {
    return executeCommand(commandObjects.zintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zintercard,long zintercard(),"[2718, 2721]","{'A12': [(2718, 2721)]}",{'A12': 1.0},A12,,"  @Override
  public long zintercard(String... keys) {
    return executeCommand(commandObjects.zintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zintercard,long zintercard(long),"[2723, 2726]","{'A12': [(2723, 2726)]}",{'A12': 1.0},A12,,"  @Override
  public long zintercard(long limit, String... keys) {
    return executeCommand(commandObjects.zintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zinter,List<byte[]> zinter(ZParams),"[2728, 2731]","{'A1': [(2728, 2731)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zinter(ZParams params, byte[]... keys) {
    return executeCommand(commandObjects.zinter(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zinterWithScores,List<Tuple> zinterWithScores(ZParams),"[2733, 2736]","{'A1': [(2733, 2736)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zinterWithScores(ZParams params, byte[]... keys) {
    return executeCommand(commandObjects.zinterWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zunion,List<String> zunion(ZParams),"[2738, 2741]","{'A1': [(2738, 2741)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> zunion(ZParams params, String... keys) {
    return executeCommand(commandObjects.zunion(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zunionWithScores,List<Tuple> zunionWithScores(ZParams),"[2743, 2746]","{'A1': [(2743, 2746)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zunionWithScores(ZParams params, String... keys) {
    return executeCommand(commandObjects.zunionWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zunionstore,long zunionstore(String),"[2748, 2751]","{'A1': [(2748, 2751)]}",{'A1': 1.0},A1,,"  @Override
  public long zunionstore(String dstkey, String... sets) {
    return executeCommand(commandObjects.zunionstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zunionstore,"long zunionstore(String,ZParams)","[2753, 2756]","{'A1': [(2753, 2756)]}",{'A1': 1.0},A1,,"  @Override
  public long zunionstore(String dstkey, ZParams params, String... sets) {
    return executeCommand(commandObjects.zunionstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zunion,List<byte[]> zunion(ZParams),"[2758, 2761]","{'A1': [(2758, 2761)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> zunion(ZParams params, byte[]... keys) {
    return executeCommand(commandObjects.zunion(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zunionWithScores,List<Tuple> zunionWithScores(ZParams),"[2763, 2766]","{'A1': [(2763, 2766)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> zunionWithScores(ZParams params, byte[]... keys) {
    return executeCommand(commandObjects.zunionWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zunionstore,long zunionstore(byte[]),"[2768, 2771]","{'A1': [(2768, 2771)]}",{'A1': 1.0},A1,,"  @Override
  public long zunionstore(byte[] dstkey, byte[]... sets) {
    return executeCommand(commandObjects.zunionstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zunionstore,"long zunionstore(byte[],ZParams)","[2773, 2776]","{'A1': [(2773, 2776)]}",{'A1': 1.0},A1,,"  @Override
  public long zunionstore(byte[] dstkey, ZParams params, byte[]... sets) {
    return executeCommand(commandObjects.zunionstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zmpop,"KeyValue<String, List<Tuple>> zmpop(SortedSetOption)","[2778, 2781]","{'A1': [(2778, 2781)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, List<Tuple>> zmpop(SortedSetOption option, String... keys) {
    return executeCommand(commandObjects.zmpop(option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zmpop,"KeyValue<String, List<Tuple>> zmpop(SortedSetOption,int)","[2783, 2786]","{'A1': [(2783, 2786)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, List<Tuple>> zmpop(SortedSetOption option, int count, String... keys) {
    return executeCommand(commandObjects.zmpop(option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bzmpop,"KeyValue<String, List<Tuple>> bzmpop(double,SortedSetOption)","[2788, 2791]","{'A1': [(2788, 2791)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, List<Tuple>> bzmpop(double timeout, SortedSetOption option, String... keys) {
    return executeCommand(commandObjects.bzmpop(timeout, option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bzmpop,"KeyValue<String, List<Tuple>> bzmpop(double,SortedSetOption,int)","[2793, 2796]","{'A1': [(2793, 2796)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<String, List<Tuple>> bzmpop(double timeout, SortedSetOption option, int count, String... keys) {
    return executeCommand(commandObjects.bzmpop(timeout, option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zmpop,"KeyValue<byte[], List<Tuple>> zmpop(SortedSetOption)","[2798, 2801]","{'A1': [(2798, 2801)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], List<Tuple>> zmpop(SortedSetOption option, byte[]... keys) {
    return executeCommand(commandObjects.zmpop(option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,zmpop,"KeyValue<byte[], List<Tuple>> zmpop(SortedSetOption,int)","[2803, 2806]","{'A1': [(2803, 2806)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], List<Tuple>> zmpop(SortedSetOption option, int count, byte[]... keys) {
    return executeCommand(commandObjects.zmpop(option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bzmpop,"KeyValue<byte[], List<Tuple>> bzmpop(double,SortedSetOption)","[2808, 2811]","{'A1': [(2808, 2811)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], List<Tuple>> bzmpop(double timeout, SortedSetOption option, byte[]... keys) {
    return executeCommand(commandObjects.bzmpop(timeout, option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bzmpop,"KeyValue<byte[], List<Tuple>> bzmpop(double,SortedSetOption,int)","[2813, 2816]","{'A1': [(2813, 2816)]}",{'A1': 1.0},A1,,"  @Override
  public KeyValue<byte[], List<Tuple>> bzmpop(double timeout, SortedSetOption option, int count, byte[]... keys) {
    return executeCommand(commandObjects.bzmpop(timeout, option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geoadd,"long geoadd(String,double,double,String)","[2820, 2823]","{'A1': [(2820, 2823)]}",{'A1': 1.0},A1,,"  @Override
  public long geoadd(String key, double longitude, double latitude, String member) {
    return executeCommand(commandObjects.geoadd(key, longitude, latitude, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geoadd,"long geoadd(String,Map<String, GeoCoordinate>)","[2825, 2828]","{'A1': [(2825, 2828)]}",{'A1': 1.0},A1,,"  @Override
  public long geoadd(String key, Map<String, GeoCoordinate> memberCoordinateMap) {
    return executeCommand(commandObjects.geoadd(key, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geoadd,"long geoadd(String,GeoAddParams,Map<String, GeoCoordinate>)","[2830, 2833]","{'A1': [(2830, 2833)]}",{'A1': 1.0},A1,,"  @Override
  public long geoadd(String key, GeoAddParams params, Map<String, GeoCoordinate> memberCoordinateMap) {
    return executeCommand(commandObjects.geoadd(key, params, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geodist,"Double geodist(String,String,String)","[2835, 2838]","{'A1': [(2835, 2838)]}",{'A1': 1.0},A1,,"  @Override
  public Double geodist(String key, String member1, String member2) {
    return executeCommand(commandObjects.geodist(key, member1, member2));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geodist,"Double geodist(String,String,String,GeoUnit)","[2840, 2843]","{'A1': [(2840, 2843)]}",{'A1': 1.0},A1,,"  @Override
  public Double geodist(String key, String member1, String member2, GeoUnit unit) {
    return executeCommand(commandObjects.geodist(key, member1, member2, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geohash,List<String> geohash(String),"[2845, 2848]","{'A1': [(2845, 2848)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> geohash(String key, String... members) {
    return executeCommand(commandObjects.geohash(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geopos,List<GeoCoordinate> geopos(String),"[2850, 2853]","{'A1': [(2850, 2853)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoCoordinate> geopos(String key, String... members) {
    return executeCommand(commandObjects.geopos(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geoadd,"long geoadd(byte[],double,double,byte[])","[2855, 2858]","{'A1': [(2855, 2858)]}",{'A1': 1.0},A1,,"  @Override
  public long geoadd(byte[] key, double longitude, double latitude, byte[] member) {
    return executeCommand(commandObjects.geoadd(key, longitude, latitude, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geoadd,"long geoadd(byte[],Map<byte[], GeoCoordinate>)","[2860, 2863]","{'A1': [(2860, 2863)]}",{'A1': 1.0},A1,,"  @Override
  public long geoadd(byte[] key, Map<byte[], GeoCoordinate> memberCoordinateMap) {
    return executeCommand(commandObjects.geoadd(key, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geoadd,"long geoadd(byte[],GeoAddParams,Map<byte[], GeoCoordinate>)","[2865, 2868]","{'A1': [(2865, 2868)]}",{'A1': 1.0},A1,,"  @Override
  public long geoadd(byte[] key, GeoAddParams params, Map<byte[], GeoCoordinate> memberCoordinateMap) {
    return executeCommand(commandObjects.geoadd(key, params, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geodist,"Double geodist(byte[],byte[],byte[])","[2870, 2873]","{'A1': [(2870, 2873)]}",{'A1': 1.0},A1,,"  @Override
  public Double geodist(byte[] key, byte[] member1, byte[] member2) {
    return executeCommand(commandObjects.geodist(key, member1, member2));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geodist,"Double geodist(byte[],byte[],byte[],GeoUnit)","[2875, 2878]","{'A1': [(2875, 2878)]}",{'A1': 1.0},A1,,"  @Override
  public Double geodist(byte[] key, byte[] member1, byte[] member2, GeoUnit unit) {
    return executeCommand(commandObjects.geodist(key, member1, member2, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geohash,List<byte[]> geohash(byte[]),"[2880, 2883]","{'A1': [(2880, 2883)]}",{'A1': 1.0},A1,,"  @Override
  public List<byte[]> geohash(byte[] key, byte[]... members) {
    return executeCommand(commandObjects.geohash(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geopos,List<GeoCoordinate> geopos(byte[]),"[2885, 2888]","{'A1': [(2885, 2888)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoCoordinate> geopos(byte[] key, byte[]... members) {
    return executeCommand(commandObjects.geopos(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadius,"List<GeoRadiusResponse> georadius(String,double,double,double,GeoUnit)","[2890, 2893]","{'A1': [(2890, 2893)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadius(String key, double longitude, double latitude, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.georadius(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusReadonly,"List<GeoRadiusResponse> georadiusReadonly(String,double,double,double,GeoUnit)","[2895, 2898]","{'A1': [(2895, 2898)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusReadonly(String key, double longitude, double latitude, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadius,"List<GeoRadiusResponse> georadius(String,double,double,double,GeoUnit,GeoRadiusParam)","[2900, 2903]","{'A1': [(2900, 2903)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadius(String key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return executeCommand(commandObjects.georadius(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusReadonly,"List<GeoRadiusResponse> georadiusReadonly(String,double,double,double,GeoUnit,GeoRadiusParam)","[2905, 2908]","{'A1': [(2905, 2908)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusReadonly(String key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return executeCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMember,"List<GeoRadiusResponse> georadiusByMember(String,String,double,GeoUnit)","[2910, 2913]","{'A1': [(2910, 2913)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusByMember(String key, String member, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.georadiusByMember(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMemberReadonly,"List<GeoRadiusResponse> georadiusByMemberReadonly(String,String,double,GeoUnit)","[2915, 2918]","{'A1': [(2915, 2918)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusByMemberReadonly(String key, String member, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMember,"List<GeoRadiusResponse> georadiusByMember(String,String,double,GeoUnit,GeoRadiusParam)","[2920, 2923]","{'A1': [(2920, 2923)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusByMember(String key, String member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return executeCommand(commandObjects.georadiusByMember(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMemberReadonly,"List<GeoRadiusResponse> georadiusByMemberReadonly(String,String,double,GeoUnit,GeoRadiusParam)","[2925, 2928]","{'A1': [(2925, 2928)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusByMemberReadonly(String key, String member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return executeCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusStore,"long georadiusStore(String,double,double,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[2930, 2933]","{'A1': [(2930, 2933)]}",{'A1': 1.0},A1,,"  @Override
  public long georadiusStore(String key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return executeCommand(commandObjects.georadiusStore(key, longitude, latitude, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMemberStore,"long georadiusByMemberStore(String,String,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[2935, 2938]","{'A1': [(2935, 2938)]}",{'A1': 1.0},A1,,"  @Override
  public long georadiusByMemberStore(String key, String member, double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return executeCommand(commandObjects.georadiusByMemberStore(key, member, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(String,String,double,GeoUnit)","[2940, 2943]","{'A12': [(2940, 2943)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, String member, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.geosearch(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(String,GeoCoordinate,double,GeoUnit)","[2945, 2948]","{'A12': [(2945, 2948)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, GeoCoordinate coord, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.geosearch(key, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(String,String,double,double,GeoUnit)","[2950, 2953]","{'A12': [(2950, 2953)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, String member, double width, double height, GeoUnit unit) {
    return executeCommand(commandObjects.geosearch(key, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(String,GeoCoordinate,double,double,GeoUnit)","[2955, 2958]","{'A12': [(2955, 2958)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    return executeCommand(commandObjects.geosearch(key, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(String,GeoSearchParam)","[2960, 2963]","{'A12': [(2960, 2963)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, GeoSearchParam params) {
    return executeCommand(commandObjects.geosearch(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(String,String,String,double,GeoUnit)","[2965, 2968]","{'A12': [(2965, 2968)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(String dest, String src, String member, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.geosearchStore(dest, src, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(String,String,GeoCoordinate,double,GeoUnit)","[2970, 2973]","{'A12': [(2970, 2973)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(String dest, String src, GeoCoordinate coord, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.geosearchStore(dest, src, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(String,String,String,double,double,GeoUnit)","[2975, 2978]","{'A12': [(2975, 2978)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(String dest, String src, String member, double width, double height, GeoUnit unit) {
    return executeCommand(commandObjects.geosearchStore(dest, src, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(String,String,GeoCoordinate,double,double,GeoUnit)","[2980, 2983]","{'A12': [(2980, 2983)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(String dest, String src, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    return executeCommand(commandObjects.geosearchStore(dest, src, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(String,String,GeoSearchParam)","[2985, 2988]","{'A12': [(2985, 2988)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(String dest, String src, GeoSearchParam params) {
    return executeCommand(commandObjects.geosearchStore(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStoreStoreDist,"long geosearchStoreStoreDist(String,String,GeoSearchParam)","[2990, 2993]","{'A12': [(2990, 2993)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStoreStoreDist(String dest, String src, GeoSearchParam params) {
    return executeCommand(commandObjects.geosearchStoreStoreDist(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadius,"List<GeoRadiusResponse> georadius(byte[],double,double,double,GeoUnit)","[2995, 2998]","{'A1': [(2995, 2998)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadius(byte[] key, double longitude, double latitude, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.georadius(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusReadonly,"List<GeoRadiusResponse> georadiusReadonly(byte[],double,double,double,GeoUnit)","[3000, 3003]","{'A1': [(3000, 3003)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusReadonly(byte[] key, double longitude, double latitude, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadius,"List<GeoRadiusResponse> georadius(byte[],double,double,double,GeoUnit,GeoRadiusParam)","[3005, 3008]","{'A1': [(3005, 3008)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadius(byte[] key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return executeCommand(commandObjects.georadius(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusReadonly,"List<GeoRadiusResponse> georadiusReadonly(byte[],double,double,double,GeoUnit,GeoRadiusParam)","[3010, 3013]","{'A1': [(3010, 3013)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusReadonly(byte[] key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return executeCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMember,"List<GeoRadiusResponse> georadiusByMember(byte[],byte[],double,GeoUnit)","[3015, 3018]","{'A1': [(3015, 3018)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusByMember(byte[] key, byte[] member, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.georadiusByMember(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMemberReadonly,"List<GeoRadiusResponse> georadiusByMemberReadonly(byte[],byte[],double,GeoUnit)","[3020, 3023]","{'A1': [(3020, 3023)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusByMemberReadonly(byte[] key, byte[] member, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMember,"List<GeoRadiusResponse> georadiusByMember(byte[],byte[],double,GeoUnit,GeoRadiusParam)","[3025, 3028]","{'A1': [(3025, 3028)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusByMember(byte[] key, byte[] member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return executeCommand(commandObjects.georadiusByMember(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMemberReadonly,"List<GeoRadiusResponse> georadiusByMemberReadonly(byte[],byte[],double,GeoUnit,GeoRadiusParam)","[3030, 3033]","{'A1': [(3030, 3033)]}",{'A1': 1.0},A1,,"  @Override
  public List<GeoRadiusResponse> georadiusByMemberReadonly(byte[] key, byte[] member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return executeCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusStore,"long georadiusStore(byte[],double,double,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[3035, 3038]","{'A1': [(3035, 3038)]}",{'A1': 1.0},A1,,"  @Override
  public long georadiusStore(byte[] key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return executeCommand(commandObjects.georadiusStore(key, longitude, latitude, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,georadiusByMemberStore,"long georadiusByMemberStore(byte[],byte[],double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[3040, 3043]","{'A1': [(3040, 3043)]}",{'A1': 1.0},A1,,"  @Override
  public long georadiusByMemberStore(byte[] key, byte[] member, double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return executeCommand(commandObjects.georadiusByMemberStore(key, member, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],byte[],double,GeoUnit)","[3045, 3048]","{'A12': [(3045, 3048)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, byte[] member, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.geosearch(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],GeoCoordinate,double,GeoUnit)","[3050, 3053]","{'A12': [(3050, 3053)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, GeoCoordinate coord, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.geosearch(key, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],byte[],double,double,GeoUnit)","[3055, 3058]","{'A12': [(3055, 3058)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, byte[] member, double width, double height, GeoUnit unit) {
    return executeCommand(commandObjects.geosearch(key, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],GeoCoordinate,double,double,GeoUnit)","[3060, 3063]","{'A12': [(3060, 3063)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    return executeCommand(commandObjects.geosearch(key, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],GeoSearchParam)","[3065, 3068]","{'A12': [(3065, 3068)]}",{'A12': 1.0},A12,,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, GeoSearchParam params) {
    return executeCommand(commandObjects.geosearch(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(byte[],byte[],byte[],double,GeoUnit)","[3070, 3073]","{'A12': [(3070, 3073)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, byte[] member, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.geosearchStore(dest, src, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(byte[],byte[],GeoCoordinate,double,GeoUnit)","[3075, 3078]","{'A12': [(3075, 3078)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, GeoCoordinate coord, double radius, GeoUnit unit) {
    return executeCommand(commandObjects.geosearchStore(dest, src, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(byte[],byte[],byte[],double,double,GeoUnit)","[3080, 3083]","{'A12': [(3080, 3083)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, byte[] member, double width, double height, GeoUnit unit) {
    return executeCommand(commandObjects.geosearchStore(dest, src, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(byte[],byte[],GeoCoordinate,double,double,GeoUnit)","[3085, 3088]","{'A12': [(3085, 3088)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    return executeCommand(commandObjects.geosearchStore(dest, src, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStore,"long geosearchStore(byte[],byte[],GeoSearchParam)","[3090, 3093]","{'A12': [(3090, 3093)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, GeoSearchParam params) {
    return executeCommand(commandObjects.geosearchStore(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,geosearchStoreStoreDist,"long geosearchStoreStoreDist(byte[],byte[],GeoSearchParam)","[3095, 3098]","{'A12': [(3095, 3098)]}",{'A12': 1.0},A12,,"  @Override
  public long geosearchStoreStoreDist(byte[] dest, byte[] src, GeoSearchParam params) {
    return executeCommand(commandObjects.geosearchStoreStoreDist(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pfadd,long pfadd(String),"[3102, 3105]","{'A1': [(3102, 3105)]}",{'A1': 1.0},A1,,"  @Override
  public long pfadd(String key, String... elements) {
    return executeCommand(commandObjects.pfadd(key, elements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pfmerge,String pfmerge(String),"[3107, 3110]","{'A1': [(3107, 3110)]}",{'A1': 1.0},A1,,"  @Override
  public String pfmerge(String destkey, String... sourcekeys) {
    return executeCommand(commandObjects.pfmerge(destkey, sourcekeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pfcount,long pfcount(String),"[3112, 3115]","{'A1': [(3112, 3115)]}",{'A1': 1.0},A1,,"  @Override
  public long pfcount(String key) {
    return executeCommand(commandObjects.pfcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pfcount,long pfcount(),"[3117, 3120]","{'A1': [(3117, 3120)]}",{'A1': 1.0},A1,,"  @Override
  public long pfcount(String... keys) {
    return executeCommand(commandObjects.pfcount(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pfadd,long pfadd(byte[]),"[3122, 3125]","{'A1': [(3122, 3125)]}",{'A1': 1.0},A1,,"  @Override
  public long pfadd(byte[] key, byte[]... elements) {
    return executeCommand(commandObjects.pfadd(key, elements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pfmerge,String pfmerge(byte[]),"[3127, 3130]","{'A1': [(3127, 3130)]}",{'A1': 1.0},A1,,"  @Override
  public String pfmerge(byte[] destkey, byte[]... sourcekeys) {
    return executeCommand(commandObjects.pfmerge(destkey, sourcekeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pfcount,long pfcount(byte[]),"[3132, 3135]","{'A1': [(3132, 3135)]}",{'A1': 1.0},A1,,"  @Override
  public long pfcount(byte[] key) {
    return executeCommand(commandObjects.pfcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pfcount,long pfcount(),"[3137, 3140]","{'A1': [(3137, 3140)]}",{'A1': 1.0},A1,,"  @Override
  public long pfcount(byte[]... keys) {
    return executeCommand(commandObjects.pfcount(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xadd,"StreamEntryID xadd(String,StreamEntryID,Map<String, String>)","[3144, 3147]","{'A1': [(3144, 3147)]}",{'A1': 1.0},A1,,"  @Override
  public StreamEntryID xadd(String key, StreamEntryID id, Map<String, String> hash) {
    return executeCommand(commandObjects.xadd(key, id, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xadd,"StreamEntryID xadd(String,XAddParams,Map<String, String>)","[3149, 3152]","{'A1': [(3149, 3152)]}",{'A1': 1.0},A1,,"  @Override
  public StreamEntryID xadd(String key, XAddParams params, Map<String, String> hash) {
    return executeCommand(commandObjects.xadd(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xlen,long xlen(String),"[3154, 3157]","{'A1': [(3154, 3157)]}",{'A1': 1.0},A1,,"  @Override
  public long xlen(String key) {
    return executeCommand(commandObjects.xlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrange,"List<StreamEntry> xrange(String,StreamEntryID,StreamEntryID)","[3159, 3162]","{'A1': [(3159, 3162)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamEntry> xrange(String key, StreamEntryID start, StreamEntryID end) {
    return executeCommand(commandObjects.xrange(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrange,"List<StreamEntry> xrange(String,StreamEntryID,StreamEntryID,int)","[3164, 3167]","{'A1': [(3164, 3167)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamEntry> xrange(String key, StreamEntryID start, StreamEntryID end, int count) {
    return executeCommand(commandObjects.xrange(key, start, end, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrevrange,"List<StreamEntry> xrevrange(String,StreamEntryID,StreamEntryID)","[3169, 3172]","{'A1': [(3169, 3172)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamEntry> xrevrange(String key, StreamEntryID end, StreamEntryID start) {
    return executeCommand(commandObjects.xrevrange(key, end, start));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrevrange,"List<StreamEntry> xrevrange(String,StreamEntryID,StreamEntryID,int)","[3174, 3177]","{'A1': [(3174, 3177)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamEntry> xrevrange(String key, StreamEntryID end, StreamEntryID start, int count) {
    return executeCommand(commandObjects.xrevrange(key, end, start, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrange,"List<StreamEntry> xrange(String,String,String)","[3179, 3182]","{'A1': [(3179, 3182)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamEntry> xrange(String key, String start, String end) {
    return executeCommand(commandObjects.xrange(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrange,"List<StreamEntry> xrange(String,String,String,int)","[3184, 3187]","{'A1': [(3184, 3187)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamEntry> xrange(String key, String start, String end, int count) {
    return executeCommand(commandObjects.xrange(key, start, end, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrevrange,"List<StreamEntry> xrevrange(String,String,String)","[3189, 3192]","{'A1': [(3189, 3192)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamEntry> xrevrange(String key, String end, String start) {
    return executeCommand(commandObjects.xrevrange(key, end, start));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrevrange,"List<StreamEntry> xrevrange(String,String,String,int)","[3194, 3197]","{'A1': [(3194, 3197)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamEntry> xrevrange(String key, String end, String start, int count) {
    return executeCommand(commandObjects.xrevrange(key, end, start, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xack,"long xack(String,String)","[3199, 3202]","{'A1': [(3199, 3202)]}",{'A1': 1.0},A1,,"  @Override
  public long xack(String key, String group, StreamEntryID... ids) {
    return executeCommand(commandObjects.xack(key, group, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupCreate,"String xgroupCreate(String,String,StreamEntryID,boolean)","[3204, 3207]","{'A1': [(3204, 3204), (3207, 3207)], 'A12': [(3205, 3206)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public String xgroupCreate(String key, String groupName, StreamEntryID id, boolean makeStream) {
    return executeCommand(commandObjects.xgroupCreate(key, groupName, id, makeStream));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupSetID,"String xgroupSetID(String,String,StreamEntryID)","[3209, 3212]","{'A1': [(3209, 3209), (3212, 3212)], 'A12': [(3210, 3211)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public String xgroupSetID(String key, String groupName, StreamEntryID id) {
    return executeCommand(commandObjects.xgroupSetID(key, groupName, id));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupDestroy,"long xgroupDestroy(String,String)","[3214, 3217]","{'A1': [(3214, 3214), (3217, 3217)], 'A12': [(3215, 3216)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long xgroupDestroy(String key, String groupName) {
    return executeCommand(commandObjects.xgroupDestroy(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupCreateConsumer,"boolean xgroupCreateConsumer(String,String,String)","[3219, 3222]","{'A1': [(3219, 3219), (3222, 3222)], 'A12': [(3220, 3221)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public boolean xgroupCreateConsumer(String key, String groupName, String consumerName) {
    return executeCommand(commandObjects.xgroupCreateConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupDelConsumer,"long xgroupDelConsumer(String,String,String)","[3224, 3227]","{'A1': [(3224, 3224), (3227, 3227)], 'A12': [(3225, 3226)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long xgroupDelConsumer(String key, String groupName, String consumerName) {
    return executeCommand(commandObjects.xgroupDelConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xpending,"StreamPendingSummary xpending(String,String)","[3229, 3232]","{'A1': [(3229, 3229), (3232, 3232)], 'A12': [(3230, 3231)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public StreamPendingSummary xpending(String key, String groupName) {
    return executeCommand(commandObjects.xpending(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xpending,"List<StreamPendingEntry> xpending(String,String,XPendingParams)","[3234, 3237]","{'A1': [(3237, 3237)], 'A12': [(3234, 3236)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public List<StreamPendingEntry> xpending(String key, String groupName, XPendingParams params) {
    return executeCommand(commandObjects.xpending(key, groupName, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xdel,long xdel(String),"[3239, 3242]","{'A1': [(3239, 3242)]}",{'A1': 1.0},A1,,"  @Override
  public long xdel(String key, StreamEntryID... ids) {
    return executeCommand(commandObjects.xdel(key, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xtrim,"long xtrim(String,long,boolean)","[3244, 3247]","{'A1': [(3244, 3247)]}",{'A1': 1.0},A1,,"  @Override
  public long xtrim(String key, long maxLen, boolean approximate) {
    return executeCommand(commandObjects.xtrim(key, maxLen, approximate));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xtrim,"long xtrim(String,XTrimParams)","[3249, 3252]","{'A1': [(3249, 3252)]}",{'A1': 1.0},A1,,"  @Override
  public long xtrim(String key, XTrimParams params) {
    return executeCommand(commandObjects.xtrim(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xclaim,"List<StreamEntry> xclaim(String,String,String,long,XClaimParams)","[3254, 3257]","{'A1': [(3254, 3254), (3257, 3257)], 'A12': [(3255, 3256)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public List<StreamEntry> xclaim(String key, String group, String consumerName, long minIdleTime, XClaimParams params, StreamEntryID... ids) {
    return executeCommand(commandObjects.xclaim(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xclaimJustId,"List<StreamEntryID> xclaimJustId(String,String,String,long,XClaimParams)","[3259, 3262]","{'A1': [(3259, 3259), (3262, 3262)], 'A12': [(3260, 3261)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public List<StreamEntryID> xclaimJustId(String key, String group, String consumerName, long minIdleTime, XClaimParams params, StreamEntryID... ids) {
    return executeCommand(commandObjects.xclaimJustId(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xautoclaim,"Map.Entry<StreamEntryID, List<StreamEntry>> xautoclaim(String,String,String,long,StreamEntryID,XAutoClaimParams)","[3264, 3267]","{'A1': [(3264, 3267)]}",{'A1': 1.0},A1,,"  @Override
  public Map.Entry<StreamEntryID, List<StreamEntry>> xautoclaim(String key, String group, String consumerName, long minIdleTime, StreamEntryID start, XAutoClaimParams params) {
    return executeCommand(commandObjects.xautoclaim(key, group, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xautoclaimJustId,"Map.Entry<StreamEntryID, List<StreamEntryID>> xautoclaimJustId(String,String,String,long,StreamEntryID,XAutoClaimParams)","[3269, 3272]","{'A1': [(3269, 3272)]}",{'A1': 1.0},A1,,"  @Override
  public Map.Entry<StreamEntryID, List<StreamEntryID>> xautoclaimJustId(String key, String group, String consumerName, long minIdleTime, StreamEntryID start, XAutoClaimParams params) {
    return executeCommand(commandObjects.xautoclaimJustId(key, group, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoStream,StreamInfo xinfoStream(String),"[3274, 3277]","{'A1': [(3274, 3277)]}",{'A1': 1.0},A1,,"  @Override
  public StreamInfo xinfoStream(String key) {
    return executeCommand(commandObjects.xinfoStream(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoStreamFull,StreamFullInfo xinfoStreamFull(String),"[3279, 3282]","{'A26': [(3279, 3282)]}",{'A26': 1.0},A26,,"  @Override
  public StreamFullInfo xinfoStreamFull(String key) {
    return executeCommand(commandObjects.xinfoStreamFull(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoStreamFull,"StreamFullInfo xinfoStreamFull(String,int)","[3284, 3287]","{'A26': [(3284, 3287)]}",{'A26': 1.0},A26,,"  @Override
  public StreamFullInfo xinfoStreamFull(String key, int count) {
    return executeCommand(commandObjects.xinfoStreamFull(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoGroups,List<StreamGroupInfo> xinfoGroups(String),"[3289, 3292]","{'A1': [(3289, 3292)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamGroupInfo> xinfoGroups(String key) {
    return executeCommand(commandObjects.xinfoGroups(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoConsumers,"List<StreamConsumersInfo> xinfoConsumers(String,String)","[3294, 3297]","{'A1': [(3294, 3297)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamConsumersInfo> xinfoConsumers(String key, String group) {
    return executeCommand(commandObjects.xinfoConsumers(key, group));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoConsumers2,"List<StreamConsumerInfo> xinfoConsumers2(String,String)","[3299, 3302]","{'A1': [(3299, 3302)]}",{'A1': 1.0},A1,,"  @Override
  public List<StreamConsumerInfo> xinfoConsumers2(String key, String group) {
    return executeCommand(commandObjects.xinfoConsumers2(key, group));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xread,"List<Map.Entry<String, List<StreamEntry>>> xread(XReadParams,Map<String, StreamEntryID>)","[3304, 3307]","{'A1': [(3304, 3307)]}",{'A1': 1.0},A1,,"  @Override
  public List<Map.Entry<String, List<StreamEntry>>> xread(XReadParams xReadParams, Map<String, StreamEntryID> streams) {
    return executeCommand(commandObjects.xread(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xreadAsMap,"Map<String, List<StreamEntry>> xreadAsMap(XReadParams,Map<String, StreamEntryID>)","[3309, 3312]","{'A1': [(3309, 3312)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, List<StreamEntry>> xreadAsMap(XReadParams xReadParams, Map<String, StreamEntryID> streams) {
    return executeCommand(commandObjects.xreadAsMap(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xreadGroup,"List<Map.Entry<String, List<StreamEntry>>> xreadGroup(String,String,XReadGroupParams,Map<String, StreamEntryID>)","[3314, 3317]","{'A1': [(3314, 3315), (3317, 3317)], 'A12': [(3316, 3316)]}","{'A1': 0.75, 'A12': 0.25}",A1,,"  @Override
  public List<Map.Entry<String, List<StreamEntry>>> xreadGroup(String groupName, String consumer, XReadGroupParams xReadGroupParams, Map<String, StreamEntryID> streams) {
    return executeCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xreadGroupAsMap,"Map<String, List<StreamEntry>> xreadGroupAsMap(String,String,XReadGroupParams,Map<String, StreamEntryID>)","[3319, 3322]","{'A1': [(3319, 3322)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, List<StreamEntry>> xreadGroupAsMap(String groupName, String consumer, XReadGroupParams xReadGroupParams, Map<String, StreamEntryID> streams) {
    return executeCommand(commandObjects.xreadGroupAsMap(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xadd,"byte[] xadd(byte[],XAddParams,Map<byte[], byte[]>)","[3324, 3327]","{'A1': [(3324, 3327)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] xadd(byte[] key, XAddParams params, Map<byte[], byte[]> hash) {
    return executeCommand(commandObjects.xadd(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xlen,long xlen(byte[]),"[3329, 3332]","{'A1': [(3329, 3332)]}",{'A1': 1.0},A1,,"  @Override
  public long xlen(byte[] key) {
    return executeCommand(commandObjects.xlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrange,"List<Object> xrange(byte[],byte[],byte[])","[3334, 3337]","{'A1': [(3334, 3337)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> xrange(byte[] key, byte[] start, byte[] end) {
    return executeCommand(commandObjects.xrange(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrange,"List<Object> xrange(byte[],byte[],byte[],int)","[3339, 3342]","{'A1': [(3339, 3342)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> xrange(byte[] key, byte[] start, byte[] end, int count) {
    return executeCommand(commandObjects.xrange(key, start, end, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrevrange,"List<Object> xrevrange(byte[],byte[],byte[])","[3344, 3347]","{'A1': [(3344, 3347)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> xrevrange(byte[] key, byte[] end, byte[] start) {
    return executeCommand(commandObjects.xrevrange(key, end, start));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xrevrange,"List<Object> xrevrange(byte[],byte[],byte[],int)","[3349, 3352]","{'A1': [(3349, 3352)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> xrevrange(byte[] key, byte[] end, byte[] start, int count) {
    return executeCommand(commandObjects.xrevrange(key, end, start, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xack,"long xack(byte[],byte[])","[3354, 3357]","{'A1': [(3354, 3357)]}",{'A1': 1.0},A1,,"  @Override
  public long xack(byte[] key, byte[] group, byte[]... ids) {
    return executeCommand(commandObjects.xack(key, group, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupCreate,"String xgroupCreate(byte[],byte[],byte[],boolean)","[3359, 3362]","{'A1': [(3359, 3359)], 'A12': [(3360, 3362)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String xgroupCreate(byte[] key, byte[] groupName, byte[] id, boolean makeStream) {
    return executeCommand(commandObjects.xgroupCreate(key, groupName, id, makeStream));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupSetID,"String xgroupSetID(byte[],byte[],byte[])","[3364, 3367]","{'A1': [(3367, 3367)], 'A12': [(3364, 3366)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String xgroupSetID(byte[] key, byte[] groupName, byte[] id) {
    return executeCommand(commandObjects.xgroupSetID(key, groupName, id));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupDestroy,"long xgroupDestroy(byte[],byte[])","[3369, 3372]","{'A1': [(3369, 3369), (3372, 3372)], 'A12': [(3370, 3371)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long xgroupDestroy(byte[] key, byte[] groupName) {
    return executeCommand(commandObjects.xgroupDestroy(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupCreateConsumer,"boolean xgroupCreateConsumer(byte[],byte[],byte[])","[3374, 3377]","{'A1': [(3374, 3374), (3377, 3377)], 'A12': [(3375, 3376)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public boolean xgroupCreateConsumer(byte[] key, byte[] groupName, byte[] consumerName) {
    return executeCommand(commandObjects.xgroupCreateConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xgroupDelConsumer,"long xgroupDelConsumer(byte[],byte[],byte[])","[3379, 3382]","{'A1': [(3379, 3379), (3382, 3382)], 'A12': [(3380, 3381)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public long xgroupDelConsumer(byte[] key, byte[] groupName, byte[] consumerName) {
    return executeCommand(commandObjects.xgroupDelConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xdel,long xdel(byte[]),"[3384, 3387]","{'A1': [(3384, 3387)]}",{'A1': 1.0},A1,,"  @Override
  public long xdel(byte[] key, byte[]... ids) {
    return executeCommand(commandObjects.xdel(key, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xtrim,"long xtrim(byte[],long,boolean)","[3389, 3392]","{'A1': [(3389, 3392)]}",{'A1': 1.0},A1,,"  @Override
  public long xtrim(byte[] key, long maxLen, boolean approximateLength) {
    return executeCommand(commandObjects.xtrim(key, maxLen, approximateLength));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xtrim,"long xtrim(byte[],XTrimParams)","[3394, 3397]","{'A1': [(3394, 3397)]}",{'A1': 1.0},A1,,"  @Override
  public long xtrim(byte[] key, XTrimParams params) {
    return executeCommand(commandObjects.xtrim(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xpending,"Object xpending(byte[],byte[])","[3399, 3402]","{'A1': [(3399, 3399), (3402, 3402)], 'A12': [(3400, 3401)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public Object xpending(byte[] key, byte[] groupName) {
    return executeCommand(commandObjects.xpending(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xpending,"List<Object> xpending(byte[],byte[],XPendingParams)","[3404, 3407]","{'A1': [(3404, 3404), (3407, 3407)], 'A12': [(3405, 3406)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public List<Object> xpending(byte[] key, byte[] groupName, XPendingParams params) {
    return executeCommand(commandObjects.xpending(key, groupName, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xclaim,"List<byte[]> xclaim(byte[],byte[],byte[],long,XClaimParams)","[3409, 3412]","{'A1': [(3409, 3409), (3412, 3412)], 'A12': [(3410, 3411)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public List<byte[]> xclaim(byte[] key, byte[] group, byte[] consumerName, long minIdleTime, XClaimParams params, byte[]... ids) {
    return executeCommand(commandObjects.xclaim(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xclaimJustId,"List<byte[]> xclaimJustId(byte[],byte[],byte[],long,XClaimParams)","[3414, 3417]","{'A1': [(3414, 3414), (3417, 3417)], 'A12': [(3415, 3416)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public List<byte[]> xclaimJustId(byte[] key, byte[] group, byte[] consumerName, long minIdleTime, XClaimParams params, byte[]... ids) {
    return executeCommand(commandObjects.xclaimJustId(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xautoclaim,"List<Object> xautoclaim(byte[],byte[],byte[],long,byte[],XAutoClaimParams)","[3419, 3422]","{'A1': [(3419, 3422)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> xautoclaim(byte[] key, byte[] groupName, byte[] consumerName, long minIdleTime, byte[] start, XAutoClaimParams params) {
    return executeCommand(commandObjects.xautoclaim(key, groupName, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xautoclaimJustId,"List<Object> xautoclaimJustId(byte[],byte[],byte[],long,byte[],XAutoClaimParams)","[3424, 3427]","{'A1': [(3424, 3427)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> xautoclaimJustId(byte[] key, byte[] groupName, byte[] consumerName, long minIdleTime, byte[] start, XAutoClaimParams params) {
    return executeCommand(commandObjects.xautoclaimJustId(key, groupName, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoStream,Object xinfoStream(byte[]),"[3429, 3432]","{'A1': [(3429, 3432)]}",{'A1': 1.0},A1,,"  @Override
  public Object xinfoStream(byte[] key) {
    return executeCommand(commandObjects.xinfoStream(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoStreamFull,Object xinfoStreamFull(byte[]),"[3434, 3437]","{'A1': [(3434, 3437)]}",{'A1': 1.0},A1,,"  @Override
  public Object xinfoStreamFull(byte[] key) {
    return executeCommand(commandObjects.xinfoStreamFull(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoStreamFull,"Object xinfoStreamFull(byte[],int)","[3439, 3442]","{'A1': [(3439, 3442)]}",{'A1': 1.0},A1,,"  @Override
  public Object xinfoStreamFull(byte[] key, int count) {
    return executeCommand(commandObjects.xinfoStreamFull(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoGroups,List<Object> xinfoGroups(byte[]),"[3444, 3447]","{'A1': [(3444, 3447)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> xinfoGroups(byte[] key) {
    return executeCommand(commandObjects.xinfoGroups(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xinfoConsumers,"List<Object> xinfoConsumers(byte[],byte[])","[3449, 3452]","{'A1': [(3449, 3452)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> xinfoConsumers(byte[] key, byte[] group) {
    return executeCommand(commandObjects.xinfoConsumers(key, group));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xread,List<Object> xread(XReadParams),"[3460, 3464]","{'A1': [(3461, 3464)], 'A4': [(3460, 3460)]}","{'A1': 0.8, 'A4': 0.2}",A1,,"  @Deprecated
  @Override
  public List<Object> xread(XReadParams xReadParams, Map.Entry<byte[], byte[]>... streams) {
    return executeCommand(commandObjects.xread(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xreadGroup,"List<Object> xreadGroup(byte[],byte[],XReadGroupParams)","[3471, 3477]","{'A1': [(3472, 3472)], 'A4': [(3471, 3471), (3473, 3477)]}","{'A1': 0.14285714285714285, 'A4': 0.8571428571428571}",A4,,"  @Deprecated
  @Override
  public List<Object> xreadGroup(byte[] groupName, byte[] consumer,
      XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {
    return executeCommand(
        commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xreadBinary,"List<Map.Entry<byte[], List<StreamEntryBinary>>> xreadBinary(XReadParams,Map<byte[], StreamEntryID>)","[3479, 3483]","{'A4': [(3479, 3483)]}",{'A4': 1.0},A4,,"  @Override
  public List<Map.Entry<byte[], List<StreamEntryBinary>>> xreadBinary(XReadParams xReadParams,
      Map<byte[], StreamEntryID> streams) {
    return executeCommand(commandObjects.xreadBinary(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xreadBinaryAsMap,"Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams,Map<byte[], StreamEntryID>)","[3485, 3489]","{'A4': [(3485, 3489)]}",{'A4': 1.0},A4,,"  @Override
  public Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams,
      Map<byte[], StreamEntryID> streams) {
    return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xreadGroupBinary,"List<Map.Entry<byte[], List<StreamEntryBinary>>> xreadGroupBinary(byte[],byte[],XReadGroupParams,Map<byte[], StreamEntryID>)","[3491, 3496]","{'A4': [(3491, 3496)]}",{'A4': 1.0},A4,,"  @Override
  public List<Map.Entry<byte[], List<StreamEntryBinary>>> xreadGroupBinary(byte[] groupName,
      byte[] consumer, XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {
    return executeCommand(
        commandObjects.xreadGroupBinary(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,xreadGroupBinaryAsMap,"Map<byte[], List<StreamEntryBinary>> xreadGroupBinaryAsMap(byte[],byte[],XReadGroupParams,Map<byte[], StreamEntryID>)","[3498, 3503]","{'A1': [(3503, 3503)], 'A4': [(3498, 3502)]}","{'A1': 0.16666666666666666, 'A4': 0.8333333333333334}",A4,,"  @Override
  public Map<byte[], List<StreamEntryBinary>> xreadGroupBinaryAsMap(byte[] groupName,
      byte[] consumer, XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {
    return executeCommand(
        commandObjects.xreadGroupBinaryAsMap(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,eval,Object eval(String),"[3507, 3510]","{'A1': [(3507, 3510)]}",{'A1': 1.0},A1,,"  @Override
  public Object eval(String script) {
    return executeCommand(commandObjects.eval(script));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,eval,"Object eval(String,int)","[3512, 3515]","{'A1': [(3512, 3515)]}",{'A1': 1.0},A1,,"  @Override
  public Object eval(String script, int keyCount, String... params) {
    return executeCommand(commandObjects.eval(script, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,eval,"Object eval(String,List<String>,List<String>)","[3517, 3520]","{'A1': [(3517, 3520)]}",{'A1': 1.0},A1,,"  @Override
  public Object eval(String script, List<String> keys, List<String> args) {
    return executeCommand(commandObjects.eval(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalReadonly,"Object evalReadonly(String,List<String>,List<String>)","[3522, 3525]","{'A12': [(3522, 3525)]}",{'A12': 1.0},A12,,"  @Override
  public Object evalReadonly(String script, List<String> keys, List<String> args) {
    return executeCommand(commandObjects.evalReadonly(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalsha,Object evalsha(String),"[3527, 3530]","{'A1': [(3527, 3530)]}",{'A1': 1.0},A1,,"  @Override
  public Object evalsha(String sha1) {
    return executeCommand(commandObjects.evalsha(sha1));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalsha,"Object evalsha(String,int)","[3532, 3535]","{'A1': [(3532, 3535)]}",{'A1': 1.0},A1,,"  @Override
  public Object evalsha(String sha1, int keyCount, String... params) {
    return executeCommand(commandObjects.evalsha(sha1, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalsha,"Object evalsha(String,List<String>,List<String>)","[3537, 3540]","{'A1': [(3537, 3540)]}",{'A1': 1.0},A1,,"  @Override
  public Object evalsha(String sha1, List<String> keys, List<String> args) {
    return executeCommand(commandObjects.evalsha(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalshaReadonly,"Object evalshaReadonly(String,List<String>,List<String>)","[3542, 3545]","{'A12': [(3542, 3545)]}",{'A12': 1.0},A12,,"  @Override
  public Object evalshaReadonly(String sha1, List<String> keys, List<String> args) {
    return executeCommand(commandObjects.evalshaReadonly(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,eval,Object eval(byte[]),"[3547, 3550]","{'A1': [(3547, 3550)]}",{'A1': 1.0},A1,,"  @Override
  public Object eval(byte[] script) {
    return executeCommand(commandObjects.eval(script));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,eval,"Object eval(byte[],int)","[3552, 3555]","{'A1': [(3552, 3555)]}",{'A1': 1.0},A1,,"  @Override
  public Object eval(byte[] script, int keyCount, byte[]... params) {
    return executeCommand(commandObjects.eval(script, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,eval,"Object eval(byte[],List<byte[]>,List<byte[]>)","[3557, 3560]","{'A1': [(3557, 3560)]}",{'A1': 1.0},A1,,"  @Override
  public Object eval(byte[] script, List<byte[]> keys, List<byte[]> args) {
    return executeCommand(commandObjects.eval(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalReadonly,"Object evalReadonly(byte[],List<byte[]>,List<byte[]>)","[3562, 3565]","{'A12': [(3562, 3565)]}",{'A12': 1.0},A12,,"  @Override
  public Object evalReadonly(byte[] script, List<byte[]> keys, List<byte[]> args) {
    return executeCommand(commandObjects.evalReadonly(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalsha,Object evalsha(byte[]),"[3567, 3570]","{'A1': [(3567, 3570)]}",{'A1': 1.0},A1,,"  @Override
  public Object evalsha(byte[] sha1) {
    return executeCommand(commandObjects.evalsha(sha1));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalsha,"Object evalsha(byte[],int)","[3572, 3575]","{'A1': [(3572, 3575)]}",{'A1': 1.0},A1,,"  @Override
  public Object evalsha(byte[] sha1, int keyCount, byte[]... params) {
    return executeCommand(commandObjects.evalsha(sha1, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalsha,"Object evalsha(byte[],List<byte[]>,List<byte[]>)","[3577, 3580]","{'A1': [(3577, 3580)]}",{'A1': 1.0},A1,,"  @Override
  public Object evalsha(byte[] sha1, List<byte[]> keys, List<byte[]> args) {
    return executeCommand(commandObjects.evalsha(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalshaReadonly,"Object evalshaReadonly(byte[],List<byte[]>,List<byte[]>)","[3582, 3585]","{'A12': [(3582, 3585)]}",{'A12': 1.0},A12,,"  @Override
  public Object evalshaReadonly(byte[] sha1, List<byte[]> keys, List<byte[]> args) {
    return executeCommand(commandObjects.evalshaReadonly(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,fcall,"Object fcall(String,List<String>,List<String>)","[3587, 3590]","{'A12': [(3587, 3590)]}",{'A12': 1.0},A12,,"  @Override
  public Object fcall(String name, List<String> keys, List<String> args) {
    return executeCommand(commandObjects.fcall(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,fcallReadonly,"Object fcallReadonly(String,List<String>,List<String>)","[3592, 3595]","{'A12': [(3592, 3595)]}",{'A12': 1.0},A12,,"  @Override
  public Object fcallReadonly(String name, List<String> keys, List<String> args) {
    return executeCommand(commandObjects.fcallReadonly(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionDelete,String functionDelete(String),"[3597, 3600]","{'A1': [(3599, 3599)], 'A12': [(3597, 3598), (3600, 3600)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionDelete(String libraryName) {
    return checkAndBroadcastCommand(commandObjects.functionDelete(libraryName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionFlush,String functionFlush(),"[3602, 3605]","{'A1': [(3604, 3604)], 'A12': [(3602, 3603), (3605, 3605)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionFlush() {
    return checkAndBroadcastCommand(commandObjects.functionFlush());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionFlush,String functionFlush(FlushMode),"[3607, 3610]","{'A1': [(3609, 3609)], 'A12': [(3607, 3608), (3610, 3610)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionFlush(FlushMode mode) {
    return checkAndBroadcastCommand(commandObjects.functionFlush(mode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionKill,String functionKill(),"[3612, 3615]","{'A1': [(3614, 3614)], 'A12': [(3612, 3613), (3615, 3615)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionKill() {
    return checkAndBroadcastCommand(commandObjects.functionKill());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionList,List<LibraryInfo> functionList(),"[3617, 3620]","{'A12': [(3617, 3620)]}",{'A12': 1.0},A12,,"  @Override
  public List<LibraryInfo> functionList() {
    return executeCommand(commandObjects.functionList());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionList,List<LibraryInfo> functionList(String),"[3622, 3625]","{'A12': [(3622, 3625)]}",{'A12': 1.0},A12,,"  @Override
  public List<LibraryInfo> functionList(String libraryNamePattern) {
    return executeCommand(commandObjects.functionList(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionListWithCode,List<LibraryInfo> functionListWithCode(),"[3627, 3630]","{'A12': [(3627, 3630)]}",{'A12': 1.0},A12,,"  @Override
  public List<LibraryInfo> functionListWithCode() {
    return executeCommand(commandObjects.functionListWithCode());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionListWithCode,List<LibraryInfo> functionListWithCode(String),"[3632, 3635]","{'A12': [(3632, 3635)]}",{'A12': 1.0},A12,,"  @Override
  public List<LibraryInfo> functionListWithCode(String libraryNamePattern) {
    return executeCommand(commandObjects.functionListWithCode(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionLoad,String functionLoad(String),"[3637, 3640]","{'A1': [(3639, 3639)], 'A12': [(3637, 3638), (3640, 3640)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionLoad(String functionCode) {
    return checkAndBroadcastCommand(commandObjects.functionLoad(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionLoadReplace,String functionLoadReplace(String),"[3642, 3645]","{'A1': [(3644, 3644)], 'A12': [(3642, 3643), (3645, 3645)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionLoadReplace(String functionCode) {
    return checkAndBroadcastCommand(commandObjects.functionLoadReplace(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionStats,FunctionStats functionStats(),"[3647, 3650]","{'A12': [(3647, 3650)]}",{'A12': 1.0},A12,,"  @Override
  public FunctionStats functionStats() {
    return executeCommand(commandObjects.functionStats());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,fcall,"Object fcall(byte[],List<byte[]>,List<byte[]>)","[3652, 3655]","{'A12': [(3652, 3655)]}",{'A12': 1.0},A12,,"  @Override
  public Object fcall(byte[] name, List<byte[]> keys, List<byte[]> args) {
    return executeCommand(commandObjects.fcall(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,fcallReadonly,"Object fcallReadonly(byte[],List<byte[]>,List<byte[]>)","[3657, 3660]","{'A12': [(3657, 3660)]}",{'A12': 1.0},A12,,"  @Override
  public Object fcallReadonly(byte[] name, List<byte[]> keys, List<byte[]> args) {
    return executeCommand(commandObjects.fcallReadonly(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionDelete,String functionDelete(byte[]),"[3662, 3665]","{'A1': [(3664, 3664)], 'A12': [(3662, 3663), (3665, 3665)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionDelete(byte[] libraryName) {
    return checkAndBroadcastCommand(commandObjects.functionDelete(libraryName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionDump,byte[] functionDump(),"[3667, 3670]","{'A12': [(3667, 3670)]}",{'A12': 1.0},A12,,"  @Override
  public byte[] functionDump() {
    return executeCommand(commandObjects.functionDump());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionListBinary,List<Object> functionListBinary(),"[3672, 3675]","{'A12': [(3672, 3675)]}",{'A12': 1.0},A12,,"  @Override
  public List<Object> functionListBinary() {
    return executeCommand(commandObjects.functionListBinary());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionList,List<Object> functionList(byte[]),"[3677, 3680]","{'A12': [(3677, 3680)]}",{'A12': 1.0},A12,,"  @Override
  public List<Object> functionList(final byte[] libraryNamePattern) {
    return executeCommand(commandObjects.functionList(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionListWithCodeBinary,List<Object> functionListWithCodeBinary(),"[3682, 3685]","{'A12': [(3682, 3685)]}",{'A12': 1.0},A12,,"  @Override
  public List<Object> functionListWithCodeBinary() {
    return executeCommand(commandObjects.functionListWithCodeBinary());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionListWithCode,List<Object> functionListWithCode(byte[]),"[3687, 3690]","{'A12': [(3687, 3690)]}",{'A12': 1.0},A12,,"  @Override
  public List<Object> functionListWithCode(final byte[] libraryNamePattern) {
    return executeCommand(commandObjects.functionListWithCode(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionLoad,String functionLoad(byte[]),"[3692, 3695]","{'A1': [(3694, 3694)], 'A12': [(3692, 3693), (3695, 3695)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionLoad(byte[] functionCode) {
    return checkAndBroadcastCommand(commandObjects.functionLoad(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionLoadReplace,String functionLoadReplace(byte[]),"[3697, 3700]","{'A1': [(3699, 3699)], 'A12': [(3697, 3698), (3700, 3700)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionLoadReplace(byte[] functionCode) {
    return checkAndBroadcastCommand(commandObjects.functionLoadReplace(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionRestore,String functionRestore(byte[]),"[3702, 3705]","{'A1': [(3704, 3704)], 'A12': [(3702, 3703), (3705, 3705)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionRestore(byte[] serializedValue) {
    return checkAndBroadcastCommand(commandObjects.functionRestore(serializedValue));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionRestore,"String functionRestore(byte[],FunctionRestorePolicy)","[3707, 3710]","{'A1': [(3709, 3709)], 'A12': [(3707, 3708), (3710, 3710)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  @Override
  public String functionRestore(byte[] serializedValue, FunctionRestorePolicy policy) {
    return checkAndBroadcastCommand(commandObjects.functionRestore(serializedValue, policy));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,functionStatsBinary,Object functionStatsBinary(),"[3712, 3715]","{'A12': [(3712, 3715)]}",{'A12': 1.0},A12,,"  @Override
  public Object functionStatsBinary() {
    return executeCommand(commandObjects.functionStatsBinary());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,objectRefcount,Long objectRefcount(String),"[3719, 3722]","{'A1': [(3719, 3722)]}",{'A1': 1.0},A1,,"  @Override
  public Long objectRefcount(String key) {
    return executeCommand(commandObjects.objectRefcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,objectEncoding,String objectEncoding(String),"[3724, 3727]","{'A1': [(3724, 3727)]}",{'A1': 1.0},A1,,"  @Override
  public String objectEncoding(String key) {
    return executeCommand(commandObjects.objectEncoding(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,objectIdletime,Long objectIdletime(String),"[3729, 3732]","{'A1': [(3729, 3732)]}",{'A1': 1.0},A1,,"  @Override
  public Long objectIdletime(String key) {
    return executeCommand(commandObjects.objectIdletime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,objectFreq,Long objectFreq(String),"[3734, 3737]","{'A1': [(3734, 3737)]}",{'A1': 1.0},A1,,"  @Override
  public Long objectFreq(String key) {
    return executeCommand(commandObjects.objectFreq(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,objectRefcount,Long objectRefcount(byte[]),"[3739, 3742]","{'A1': [(3739, 3742)]}",{'A1': 1.0},A1,,"  @Override
  public Long objectRefcount(byte[] key) {
    return executeCommand(commandObjects.objectRefcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,objectEncoding,byte[] objectEncoding(byte[]),"[3744, 3747]","{'A1': [(3744, 3747)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] objectEncoding(byte[] key) {
    return executeCommand(commandObjects.objectEncoding(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,objectIdletime,Long objectIdletime(byte[]),"[3749, 3752]","{'A1': [(3749, 3752)]}",{'A1': 1.0},A1,,"  @Override
  public Long objectIdletime(byte[] key) {
    return executeCommand(commandObjects.objectIdletime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,objectFreq,Long objectFreq(byte[]),"[3754, 3757]","{'A1': [(3754, 3757)]}",{'A1': 1.0},A1,,"  @Override
  public Long objectFreq(byte[] key) {
    return executeCommand(commandObjects.objectFreq(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,migrate,"String migrate(String,int,String,int)","[3759, 3762]","{'A1': [(3759, 3762)]}",{'A1': 1.0},A1,,"  @Override
  public String migrate(String host, int port, String key, int timeout) {
    return executeCommand(commandObjects.migrate(host, port, key, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,migrate,"String migrate(String,int,int,MigrateParams)","[3764, 3767]","{'A1': [(3764, 3767)]}",{'A1': 1.0},A1,,"  @Override
  public String migrate(String host, int port, int timeout, MigrateParams params, String... keys) {
    return executeCommand(commandObjects.migrate(host, port, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,migrate,"String migrate(String,int,byte[],int)","[3769, 3772]","{'A1': [(3769, 3772)]}",{'A1': 1.0},A1,,"  @Override
  public String migrate(String host, int port, byte[] key, int timeout) {
    return executeCommand(commandObjects.migrate(host, port, key, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,migrate,"String migrate(String,int,int,MigrateParams)","[3774, 3777]","{'A1': [(3774, 3777)]}",{'A1': 1.0},A1,,"  @Override
  public String migrate(String host, int port, int timeout, MigrateParams params, byte[]... keys) {
    return executeCommand(commandObjects.migrate(host, port, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,waitReplicas,"long waitReplicas(String,int,long)","[3781, 3784]","{'A1': [(3781, 3784)]}",{'A1': 1.0},A1,,"  @Override
  public long waitReplicas(String sampleKey, int replicas, long timeout) {
    return executeCommand(commandObjects.waitReplicas(sampleKey, replicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,waitReplicas,"long waitReplicas(byte[],int,long)","[3786, 3789]","{'A1': [(3786, 3789)]}",{'A1': 1.0},A1,,"  @Override
  public long waitReplicas(byte[] sampleKey, int replicas, long timeout) {
    return executeCommand(commandObjects.waitReplicas(sampleKey, replicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,waitAOF,"KeyValue<Long, Long> waitAOF(String,long,long,long)","[3791, 3794]","{'A11': [(3791, 3794)]}",{'A11': 1.0},A11,,"  @Override
  public KeyValue<Long, Long> waitAOF(String sampleKey, long numLocal, long numReplicas, long timeout) {
    return executeCommand(commandObjects.waitAOF(sampleKey, numLocal, numReplicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,waitAOF,"KeyValue<Long, Long> waitAOF(byte[],long,long,long)","[3796, 3799]","{'A11': [(3796, 3799)]}",{'A11': 1.0},A11,,"  @Override
  public KeyValue<Long, Long> waitAOF(byte[] sampleKey, long numLocal, long numReplicas, long timeout) {
    return executeCommand(commandObjects.waitAOF(sampleKey, numLocal, numReplicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,eval,"Object eval(String,String)","[3801, 3804]","{'A1': [(3801, 3804)]}",{'A1': 1.0},A1,,"  @Override
  public Object eval(String script, String sampleKey) {
    return executeCommand(commandObjects.eval(script, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalsha,"Object evalsha(String,String)","[3806, 3809]","{'A1': [(3806, 3809)]}",{'A1': 1.0},A1,,"  @Override
  public Object evalsha(String sha1, String sampleKey) {
    return executeCommand(commandObjects.evalsha(sha1, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,eval,"Object eval(byte[],byte[])","[3811, 3814]","{'A1': [(3811, 3814)]}",{'A1': 1.0},A1,,"  @Override
  public Object eval(byte[] script, byte[] sampleKey) {
    return executeCommand(commandObjects.eval(script, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,evalsha,"Object evalsha(byte[],byte[])","[3816, 3819]","{'A1': [(3816, 3819)]}",{'A1': 1.0},A1,,"  @Override
  public Object evalsha(byte[] sha1, byte[] sampleKey) {
    return executeCommand(commandObjects.evalsha(sha1, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptExists,List<Boolean> scriptExists(List<String>),"[3821, 3823]","{'A1': [(3821, 3823)]}",{'A1': 1.0},A1,,"  public List<Boolean> scriptExists(List<String> sha1s) {
    return checkAndBroadcastCommand(commandObjects.scriptExists(sha1s));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptExists,"Boolean scriptExists(String,String)","[3825, 3828]","{'A1': [(3825, 3828)]}",{'A1': 1.0},A1,,"  @Override
  public Boolean scriptExists(String sha1, String sampleKey) {
    return scriptExists(sampleKey, new String[] { sha1 }).get(0);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptExists,List<Boolean> scriptExists(String),"[3830, 3833]","{'A1': [(3830, 3833)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> scriptExists(String sampleKey, String... sha1s) {
    return executeCommand(commandObjects.scriptExists(sampleKey, sha1s));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptExists,"Boolean scriptExists(byte[],byte[])","[3835, 3838]","{'A1': [(3835, 3838)]}",{'A1': 1.0},A1,,"  @Override
  public Boolean scriptExists(byte[] sha1, byte[] sampleKey) {
    return scriptExists(sampleKey, new byte[][] { sha1 }).get(0);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptExists,List<Boolean> scriptExists(byte[]),"[3840, 3843]","{'A1': [(3840, 3843)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> scriptExists(byte[] sampleKey, byte[]... sha1s) {
    return executeCommand(commandObjects.scriptExists(sampleKey, sha1s));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptLoad,String scriptLoad(String),"[3845, 3847]","{'A1': [(3845, 3847)]}",{'A1': 1.0},A1,,"  public String scriptLoad(String script) {
    return checkAndBroadcastCommand(commandObjects.scriptLoad(script));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptLoad,"String scriptLoad(String,String)","[3849, 3852]","{'A1': [(3849, 3852)]}",{'A1': 1.0},A1,,"  @Override
  public String scriptLoad(String script, String sampleKey) {
    return executeCommand(commandObjects.scriptLoad(script, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptFlush,String scriptFlush(),"[3854, 3856]","{'A1': [(3854, 3856)]}",{'A1': 1.0},A1,,"  public String scriptFlush() {
    return checkAndBroadcastCommand(commandObjects.scriptFlush());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptFlush,String scriptFlush(String),"[3858, 3861]","{'A1': [(3858, 3861)]}",{'A1': 1.0},A1,,"  @Override
  public String scriptFlush(String sampleKey) {
    return executeCommand(commandObjects.scriptFlush(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptFlush,"String scriptFlush(String,FlushMode)","[3863, 3866]","{'A1': [(3863, 3866)]}",{'A1': 1.0},A1,,"  @Override
  public String scriptFlush(String sampleKey, FlushMode flushMode) {
    return executeCommand(commandObjects.scriptFlush(sampleKey, flushMode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptKill,String scriptKill(),"[3868, 3870]","{'A1': [(3868, 3870)]}",{'A1': 1.0},A1,,"  public String scriptKill() {
    return checkAndBroadcastCommand(commandObjects.scriptKill());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptKill,String scriptKill(String),"[3872, 3875]","{'A1': [(3872, 3875)]}",{'A1': 1.0},A1,,"  @Override
  public String scriptKill(String sampleKey) {
    return executeCommand(commandObjects.scriptKill(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptLoad,"byte[] scriptLoad(byte[],byte[])","[3877, 3880]","{'A1': [(3877, 3880)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] scriptLoad(byte[] script, byte[] sampleKey) {
    return executeCommand(commandObjects.scriptLoad(script, sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptFlush,String scriptFlush(byte[]),"[3882, 3885]","{'A1': [(3882, 3885)]}",{'A1': 1.0},A1,,"  @Override
  public String scriptFlush(byte[] sampleKey) {
    return executeCommand(commandObjects.scriptFlush(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptFlush,"String scriptFlush(byte[],FlushMode)","[3887, 3890]","{'A1': [(3887, 3890)]}",{'A1': 1.0},A1,,"  @Override
  public String scriptFlush(byte[] sampleKey, FlushMode flushMode) {
    return executeCommand(commandObjects.scriptFlush(sampleKey, flushMode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,scriptKill,String scriptKill(byte[]),"[3892, 3895]","{'A1': [(3892, 3895)]}",{'A1': 1.0},A1,,"  @Override
  public String scriptKill(byte[] sampleKey) {
    return executeCommand(commandObjects.scriptKill(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,slowlogReset,String slowlogReset(),"[3897, 3899]","{'A1': [(3897, 3899)]}",{'A1': 1.0},A1,,"  public String slowlogReset() {
    return checkAndBroadcastCommand(commandObjects.slowlogReset());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,publish,"long publish(String,String)","[3903, 3905]","{'A1': [(3903, 3905)]}",{'A1': 1.0},A1,,"  public long publish(String channel, String message) {
    return executeCommand(commandObjects.publish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,publish,"long publish(byte[],byte[])","[3907, 3909]","{'A1': [(3907, 3909)]}",{'A1': 1.0},A1,,"  public long publish(byte[] channel, byte[] message) {
    return executeCommand(commandObjects.publish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,subscribe,void subscribe(JedisPubSub),"[3911, 3915]","{'A1': [(3911, 3915)]}",{'A1': 1.0},A1,,"  public void subscribe(final JedisPubSub jedisPubSub, final String... channels) {
    try (Connection connection = this.provider.getConnection()) {
      jedisPubSub.proceed(connection, channels);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,psubscribe,void psubscribe(JedisPubSub),"[3917, 3921]","{'A1': [(3917, 3921)]}",{'A1': 1.0},A1,,"  public void psubscribe(final JedisPubSub jedisPubSub, final String... patterns) {
    try (Connection connection = this.provider.getConnection()) {
      jedisPubSub.proceedWithPatterns(connection, patterns);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,subscribe,void subscribe(BinaryJedisPubSub),"[3923, 3927]","{'A1': [(3923, 3927)]}",{'A1': 1.0},A1,,"  public void subscribe(BinaryJedisPubSub jedisPubSub, final byte[]... channels) {
    try (Connection connection = this.provider.getConnection()) {
      jedisPubSub.proceed(connection, channels);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,psubscribe,void psubscribe(BinaryJedisPubSub),"[3929, 3933]","{'A1': [(3929, 3933)]}",{'A1': 1.0},A1,,"  public void psubscribe(BinaryJedisPubSub jedisPubSub, final byte[]... patterns) {
    try (Connection connection = this.provider.getConnection()) {
      jedisPubSub.proceedWithPatterns(connection, patterns);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hsetObject,"long hsetObject(String,String,Object)","[3937, 3939]","{'A1': [(3937, 3939)]}",{'A1': 1.0},A1,,"  public long hsetObject(String key, String field, Object value) {
    return executeCommand(commandObjects.hsetObject(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,hsetObject,"long hsetObject(String,Map<String, Object>)","[3941, 3943]","{'A1': [(3941, 3943)]}",{'A1': 1.0},A1,,"  public long hsetObject(String key, Map<String, Object> hash) {
    return executeCommand(commandObjects.hsetObject(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftCreate,"String ftCreate(String,IndexOptions,Schema)","[3945, 3948]","{'A1': [(3945, 3948)]}",{'A1': 1.0},A1,,"  @Override
  public String ftCreate(String indexName, IndexOptions indexOptions, Schema schema) {
    return checkAndBroadcastCommand(commandObjects.ftCreate(indexName, indexOptions, schema));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftCreate,"String ftCreate(String,FTCreateParams,Iterable<SchemaField>)","[3950, 3953]","{'A1': [(3950, 3953)]}",{'A1': 1.0},A1,,"  @Override
  public String ftCreate(String indexName, FTCreateParams createParams, Iterable<SchemaField> schemaFields) {
    return checkAndBroadcastCommand(commandObjects.ftCreate(indexName, createParams, schemaFields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftAlter,"String ftAlter(String,Schema)","[3955, 3958]","{'A1': [(3955, 3958)]}",{'A1': 1.0},A1,,"  @Override
  public String ftAlter(String indexName, Schema schema) {
    return checkAndBroadcastCommand(commandObjects.ftAlter(indexName, schema));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftAlter,"String ftAlter(String,Iterable<SchemaField>)","[3960, 3963]","{'A1': [(3960, 3963)]}",{'A1': 1.0},A1,,"  @Override
  public String ftAlter(String indexName, Iterable<SchemaField> schemaFields) {
    return checkAndBroadcastCommand(commandObjects.ftAlter(indexName, schemaFields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftAliasAdd,"String ftAliasAdd(String,String)","[3965, 3968]","{'A1': [(3965, 3968)]}",{'A1': 1.0},A1,,"  @Override
  public String ftAliasAdd(String aliasName, String indexName) {
    return checkAndBroadcastCommand(commandObjects.ftAliasAdd(aliasName, indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftAliasUpdate,"String ftAliasUpdate(String,String)","[3970, 3973]","{'A1': [(3970, 3973)]}",{'A1': 1.0},A1,,"  @Override
  public String ftAliasUpdate(String aliasName, String indexName) {
    return checkAndBroadcastCommand(commandObjects.ftAliasUpdate(aliasName, indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftAliasDel,String ftAliasDel(String),"[3975, 3978]","{'A1': [(3975, 3978)]}",{'A1': 1.0},A1,,"  @Override
  public String ftAliasDel(String aliasName) {
    return checkAndBroadcastCommand(commandObjects.ftAliasDel(aliasName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftDropIndex,String ftDropIndex(String),"[3980, 3983]","{'A1': [(3980, 3983)]}",{'A1': 1.0},A1,,"  @Override
  public String ftDropIndex(String indexName) {
    return checkAndBroadcastCommand(commandObjects.ftDropIndex(indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftDropIndexDD,String ftDropIndexDD(String),"[3985, 3988]","{'A1': [(3985, 3988)]}",{'A1': 1.0},A1,,"  @Override
  public String ftDropIndexDD(String indexName) {
    return checkAndBroadcastCommand(commandObjects.ftDropIndexDD(indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSearch,"SearchResult ftSearch(String,String)","[3990, 3993]","{'A1': [(3990, 3993)]}",{'A1': 1.0},A1,,"  @Override
  public SearchResult ftSearch(String indexName, String query) {
    return executeCommand(commandObjects.ftSearch(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSearch,"SearchResult ftSearch(String,String,FTSearchParams)","[3995, 3998]","{'A1': [(3995, 3998)]}",{'A1': 1.0},A1,,"  @Override
  public SearchResult ftSearch(String indexName, String query, FTSearchParams params) {
    return executeCommand(commandObjects.ftSearch(indexName, query, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSearchIteration,"FtSearchIteration ftSearchIteration(int,String,String,FTSearchParams)","[4009, 4011]","{'A1': [(4009, 4011)]}",{'A1': 1.0},A1,,"  public FtSearchIteration ftSearchIteration(int batchSize, String indexName, String query, FTSearchParams params) {
    return new FtSearchIteration(provider, commandObjects.getProtocol(), batchSize, indexName, query, params);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSearch,"SearchResult ftSearch(String,Query)","[4013, 4016]","{'A1': [(4013, 4016)]}",{'A1': 1.0},A1,,"  @Override
  public SearchResult ftSearch(String indexName, Query query) {
    return executeCommand(commandObjects.ftSearch(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSearchIteration,"FtSearchIteration ftSearchIteration(int,String,Query)","[4025, 4027]","{'A1': [(4025, 4027)]}",{'A1': 1.0},A1,,"  public FtSearchIteration ftSearchIteration(int batchSize, String indexName, Query query) {
    return new FtSearchIteration(provider, commandObjects.getProtocol(), batchSize, indexName, query);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSearch,"SearchResult ftSearch(byte[],Query)","[4029, 4033]","{'A1': [(4029, 4033)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public SearchResult ftSearch(byte[] indexName, Query query) {
    return executeCommand(commandObjects.ftSearch(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftExplain,"String ftExplain(String,Query)","[4035, 4038]","{'A1': [(4035, 4038)]}",{'A1': 1.0},A1,,"  @Override
  public String ftExplain(String indexName, Query query) {
    return executeCommand(commandObjects.ftExplain(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftExplainCLI,"List<String> ftExplainCLI(String,Query)","[4040, 4043]","{'A1': [(4040, 4043)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> ftExplainCLI(String indexName, Query query) {
    return executeCommand(commandObjects.ftExplainCLI(indexName, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftAggregate,"AggregationResult ftAggregate(String,AggregationBuilder)","[4045, 4048]","{'A1': [(4045, 4048)]}",{'A1': 1.0},A1,,"  @Override
  public AggregationResult ftAggregate(String indexName, AggregationBuilder aggr) {
    return executeCommand(commandObjects.ftAggregate(indexName, aggr));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftCursorRead,"AggregationResult ftCursorRead(String,long,int)","[4050, 4053]","{'A1': [(4050, 4053)]}",{'A1': 1.0},A1,,"  @Override
  public AggregationResult ftCursorRead(String indexName, long cursorId, int count) {
    return executeCommand(commandObjects.ftCursorRead(indexName, cursorId, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftCursorDel,"String ftCursorDel(String,long)","[4055, 4058]","{'A1': [(4055, 4058)]}",{'A1': 1.0},A1,,"  @Override
  public String ftCursorDel(String indexName, long cursorId) {
    return executeCommand(commandObjects.ftCursorDel(indexName, cursorId));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftAggregateIteration,"FtAggregateIteration ftAggregateIteration(String,AggregationBuilder)","[4066, 4068]","{'A1': [(4066, 4068)]}",{'A1': 1.0},A1,,"  public FtAggregateIteration ftAggregateIteration(String indexName, AggregationBuilder aggr) {
    return new FtAggregateIteration(provider, indexName, aggr);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftProfileAggregate,"Map.Entry<AggregationResult, ProfilingInfo> ftProfileAggregate(String,FTProfileParams,AggregationBuilder)","[4070, 4074]","{'A1': [(4070, 4074)]}",{'A1': 1.0},A1,,"  @Override
  public Map.Entry<AggregationResult, ProfilingInfo> ftProfileAggregate(String indexName,
      FTProfileParams profileParams, AggregationBuilder aggr) {
    return executeCommand(commandObjects.ftProfileAggregate(indexName, profileParams, aggr));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftProfileSearch,"Map.Entry<SearchResult, ProfilingInfo> ftProfileSearch(String,FTProfileParams,Query)","[4076, 4080]","{'A1': [(4076, 4080)]}",{'A1': 1.0},A1,,"  @Override
  public Map.Entry<SearchResult, ProfilingInfo> ftProfileSearch(String indexName,
      FTProfileParams profileParams, Query query) {
    return executeCommand(commandObjects.ftProfileSearch(indexName, profileParams, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftProfileSearch,"Map.Entry<SearchResult, ProfilingInfo> ftProfileSearch(String,FTProfileParams,String,FTSearchParams)","[4082, 4086]","{'A1': [(4082, 4086)]}",{'A1': 1.0},A1,,"  @Override
  public Map.Entry<SearchResult, ProfilingInfo> ftProfileSearch(String indexName,
      FTProfileParams profileParams, String query, FTSearchParams searchParams) {
    return executeCommand(commandObjects.ftProfileSearch(indexName, profileParams, query, searchParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSynUpdate,"String ftSynUpdate(String,String)","[4088, 4091]","{'A1': [(4088, 4091)]}",{'A1': 1.0},A1,,"  @Override
  public String ftSynUpdate(String indexName, String synonymGroupId, String... terms) {
    return executeCommand(commandObjects.ftSynUpdate(indexName, synonymGroupId, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSynDump,"Map<String, List<String>> ftSynDump(String)","[4093, 4096]","{'A1': [(4093, 4096)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, List<String>> ftSynDump(String indexName) {
    return executeCommand(commandObjects.ftSynDump(indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftDictAdd,long ftDictAdd(String),"[4098, 4101]","{'A1': [(4098, 4101)]}",{'A1': 1.0},A1,,"  @Override
  public long ftDictAdd(String dictionary, String... terms) {
    return executeCommand(commandObjects.ftDictAdd(dictionary, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftDictDel,long ftDictDel(String),"[4103, 4106]","{'A1': [(4103, 4106)]}",{'A1': 1.0},A1,,"  @Override
  public long ftDictDel(String dictionary, String... terms) {
    return executeCommand(commandObjects.ftDictDel(dictionary, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftDictDump,Set<String> ftDictDump(String),"[4108, 4111]","{'A1': [(4108, 4111)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> ftDictDump(String dictionary) {
    return executeCommand(commandObjects.ftDictDump(dictionary));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftDictAddBySampleKey,"long ftDictAddBySampleKey(String,String)","[4113, 4116]","{'A1': [(4113, 4116)]}",{'A1': 1.0},A1,,"  @Override
  public long ftDictAddBySampleKey(String indexName, String dictionary, String... terms) {
    return executeCommand(commandObjects.ftDictAddBySampleKey(indexName, dictionary, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftDictDelBySampleKey,"long ftDictDelBySampleKey(String,String)","[4118, 4121]","{'A1': [(4118, 4121)]}",{'A1': 1.0},A1,,"  @Override
  public long ftDictDelBySampleKey(String indexName, String dictionary, String... terms) {
    return executeCommand(commandObjects.ftDictDelBySampleKey(indexName, dictionary, terms));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftDictDumpBySampleKey,"Set<String> ftDictDumpBySampleKey(String,String)","[4123, 4126]","{'A1': [(4123, 4126)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> ftDictDumpBySampleKey(String indexName, String dictionary) {
    return executeCommand(commandObjects.ftDictDumpBySampleKey(indexName, dictionary));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSpellCheck,"Map<String, Map<String, Double>> ftSpellCheck(String,String)","[4128, 4131]","{'A1': [(4128, 4131)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, Map<String, Double>> ftSpellCheck(String index, String query) {
    return executeCommand(commandObjects.ftSpellCheck(index, query));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSpellCheck,"Map<String, Map<String, Double>> ftSpellCheck(String,String,FTSpellCheckParams)","[4133, 4137]","{'A1': [(4133, 4137)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, Map<String, Double>> ftSpellCheck(String index, String query,
      FTSpellCheckParams spellCheckParams) {
    return executeCommand(commandObjects.ftSpellCheck(index, query, spellCheckParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftInfo,"Map<String, Object> ftInfo(String)","[4139, 4142]","{'A1': [(4139, 4142)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, Object> ftInfo(String indexName) {
    return executeCommand(commandObjects.ftInfo(indexName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftTagVals,"Set<String> ftTagVals(String,String)","[4144, 4147]","{'A1': [(4144, 4147)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> ftTagVals(String indexName, String fieldName) {
    return executeCommand(commandObjects.ftTagVals(indexName, fieldName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftConfigGet,"Map<String, Object> ftConfigGet(String)","[4149, 4153]","{'A1': [(4149, 4153)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Map<String, Object> ftConfigGet(String option) {
    return executeCommand(commandObjects.ftConfigGet(option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftConfigGet,"Map<String, Object> ftConfigGet(String,String)","[4155, 4159]","{'A1': [(4155, 4159)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Map<String, Object> ftConfigGet(String indexName, String option) {
    return executeCommand(commandObjects.ftConfigGet(indexName, option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftConfigSet,"String ftConfigSet(String,String)","[4161, 4165]","{'A1': [(4161, 4165)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public String ftConfigSet(String option, String value) {
    return executeCommand(commandObjects.ftConfigSet(option, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftConfigSet,"String ftConfigSet(String,String,String)","[4167, 4171]","{'A1': [(4167, 4171)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public String ftConfigSet(String indexName, String option, String value) {
    return executeCommand(commandObjects.ftConfigSet(indexName, option, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSugAdd,"long ftSugAdd(String,String,double)","[4173, 4176]","{'A1': [(4173, 4176)]}",{'A1': 1.0},A1,,"  @Override
  public long ftSugAdd(String key, String string, double score) {
    return executeCommand(commandObjects.ftSugAdd(key, string, score));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSugAddIncr,"long ftSugAddIncr(String,String,double)","[4178, 4181]","{'A1': [(4178, 4181)]}",{'A1': 1.0},A1,,"  @Override
  public long ftSugAddIncr(String key, String string, double score) {
    return executeCommand(commandObjects.ftSugAddIncr(key, string, score));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSugGet,"List<String> ftSugGet(String,String)","[4183, 4186]","{'A1': [(4183, 4186)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> ftSugGet(String key, String prefix) {
    return executeCommand(commandObjects.ftSugGet(key, prefix));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSugGet,"List<String> ftSugGet(String,String,boolean,int)","[4188, 4191]","{'A1': [(4188, 4191)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> ftSugGet(String key, String prefix, boolean fuzzy, int max) {
    return executeCommand(commandObjects.ftSugGet(key, prefix, fuzzy, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSugGetWithScores,"List<Tuple> ftSugGetWithScores(String,String)","[4193, 4196]","{'A1': [(4193, 4196)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> ftSugGetWithScores(String key, String prefix) {
    return executeCommand(commandObjects.ftSugGetWithScores(key, prefix));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSugGetWithScores,"List<Tuple> ftSugGetWithScores(String,String,boolean,int)","[4198, 4201]","{'A1': [(4198, 4201)]}",{'A1': 1.0},A1,,"  @Override
  public List<Tuple> ftSugGetWithScores(String key, String prefix, boolean fuzzy, int max) {
    return executeCommand(commandObjects.ftSugGetWithScores(key, prefix, fuzzy, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSugDel,"boolean ftSugDel(String,String)","[4203, 4206]","{'A1': [(4203, 4206)]}",{'A1': 1.0},A1,,"  @Override
  public boolean ftSugDel(String key, String string) {
    return executeCommand(commandObjects.ftSugDel(key, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftSugLen,long ftSugLen(String),"[4208, 4211]","{'A1': [(4208, 4211)]}",{'A1': 1.0},A1,,"  @Override
  public long ftSugLen(String key) {
    return executeCommand(commandObjects.ftSugLen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,ftList,Set<String> ftList(),"[4213, 4216]","{'A1': [(4213, 4216)]}",{'A1': 1.0},A1,,"  @Override
  public Set<String> ftList() {
    return executeCommand(commandObjects.ftList());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonSet,"String jsonSet(String,Path2,Object)","[4220, 4223]","{'A1': [(4220, 4223)]}",{'A1': 1.0},A1,,"  @Override
  public String jsonSet(String key, Path2 path, Object object) {
    return executeCommand(commandObjects.jsonSet(key, path, object));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonSetWithEscape,"String jsonSetWithEscape(String,Path2,Object)","[4225, 4228]","{'A1': [(4225, 4228)]}",{'A1': 1.0},A1,,"  @Override
  public String jsonSetWithEscape(String key, Path2 path, Object object) {
    return executeCommand(commandObjects.jsonSetWithEscape(key, path, object));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonSet,"String jsonSet(String,Path,Object)","[4230, 4234]","{'A1': [(4230, 4234)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public String jsonSet(String key, Path path, Object pojo) {
    return executeCommand(commandObjects.jsonSet(key, path, pojo));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonSetWithPlainString,"String jsonSetWithPlainString(String,Path,String)","[4236, 4240]","{'A1': [(4236, 4240)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public String jsonSetWithPlainString(String key, Path path, String string) {
    return executeCommand(commandObjects.jsonSetWithPlainString(key, path, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonSet,"String jsonSet(String,Path2,Object,JsonSetParams)","[4242, 4245]","{'A1': [(4242, 4245)]}",{'A1': 1.0},A1,,"  @Override
  public String jsonSet(String key, Path2 path, Object pojo, JsonSetParams params) {
    return executeCommand(commandObjects.jsonSet(key, path, pojo, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonSetWithEscape,"String jsonSetWithEscape(String,Path2,Object,JsonSetParams)","[4247, 4250]","{'A1': [(4247, 4250)]}",{'A1': 1.0},A1,,"  @Override
  public String jsonSetWithEscape(String key, Path2 path, Object pojo, JsonSetParams params) {
    return executeCommand(commandObjects.jsonSetWithEscape(key, path, pojo, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonSet,"String jsonSet(String,Path,Object,JsonSetParams)","[4252, 4256]","{'A1': [(4252, 4256)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public String jsonSet(String key, Path path, Object pojo, JsonSetParams params) {
    return executeCommand(commandObjects.jsonSet(key, path, pojo, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonMerge,"String jsonMerge(String,Path2,Object)","[4258, 4261]","{'A50': [(4258, 4261)]}",{'A50': 1.0},A50,,"  @Override
  public String jsonMerge(String key, Path2 path, Object object) {
    return executeCommand(commandObjects.jsonMerge(key, path, object));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonMerge,"String jsonMerge(String,Path,Object)","[4263, 4267]","{'A1': [(4264, 4264)], 'A50': [(4263, 4263), (4265, 4267)]}","{'A1': 0.2, 'A50': 0.8}",A50,,"  @Override
  @Deprecated
  public String jsonMerge(String key, Path path, Object pojo) {
    return executeCommand(commandObjects.jsonMerge(key, path, pojo));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonGet,Object jsonGet(String),"[4269, 4272]","{'A1': [(4269, 4272)]}",{'A1': 1.0},A1,,"  @Override
  public Object jsonGet(String key) {
    return executeCommand(commandObjects.jsonGet(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonGet,"T jsonGet(String,Class<T>)","[4274, 4278]","{'A1': [(4274, 4278)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public <T> T jsonGet(String key, Class<T> clazz) {
    return executeCommand(commandObjects.jsonGet(key, clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonGet,Object jsonGet(String),"[4280, 4283]","{'A1': [(4280, 4283)]}",{'A1': 1.0},A1,,"  @Override
  public Object jsonGet(String key, Path2... paths) {
    return executeCommand(commandObjects.jsonGet(key, paths));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonGet,Object jsonGet(String),"[4285, 4289]","{'A1': [(4285, 4289)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Object jsonGet(String key, Path... paths) {
    return executeCommand(commandObjects.jsonGet(key, paths));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonGetAsPlainString,"String jsonGetAsPlainString(String,Path)","[4291, 4295]","{'A1': [(4291, 4295)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public String jsonGetAsPlainString(String key, Path path) {
    return executeCommand(commandObjects.jsonGetAsPlainString(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonGet,"T jsonGet(String,Class<T>)","[4297, 4301]","{'A1': [(4297, 4301)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public <T> T jsonGet(String key, Class<T> clazz, Path... paths) {
    return executeCommand(commandObjects.jsonGet(key, clazz, paths));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonMGet,List<JSONArray> jsonMGet(Path2),"[4303, 4306]","{'A1': [(4303, 4306)]}",{'A1': 1.0},A1,,"  @Override
  public List<JSONArray> jsonMGet(Path2 path, String... keys) {
    return executeCommand(commandObjects.jsonMGet(path, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonMGet,"List<T> jsonMGet(Path,Class<T>)","[4308, 4312]","{'A1': [(4308, 4312)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public <T> List<T> jsonMGet(Path path, Class<T> clazz, String... keys) {
    return executeCommand(commandObjects.jsonMGet(path, clazz, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonDel,long jsonDel(String),"[4314, 4317]","{'A1': [(4314, 4317)]}",{'A1': 1.0},A1,,"  @Override
  public long jsonDel(String key) {
    return executeCommand(commandObjects.jsonDel(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonDel,"long jsonDel(String,Path2)","[4319, 4322]","{'A1': [(4319, 4322)]}",{'A1': 1.0},A1,,"  @Override
  public long jsonDel(String key, Path2 path) {
    return executeCommand(commandObjects.jsonDel(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonDel,"long jsonDel(String,Path)","[4324, 4328]","{'A1': [(4324, 4328)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long jsonDel(String key, Path path) {
    return executeCommand(commandObjects.jsonDel(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonClear,long jsonClear(String),"[4330, 4333]","{'A1': [(4330, 4333)]}",{'A1': 1.0},A1,,"  @Override
  public long jsonClear(String key) {
    return executeCommand(commandObjects.jsonClear(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonClear,"long jsonClear(String,Path2)","[4335, 4338]","{'A1': [(4335, 4338)]}",{'A1': 1.0},A1,,"  @Override
  public long jsonClear(String key, Path2 path) {
    return executeCommand(commandObjects.jsonClear(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonClear,"long jsonClear(String,Path)","[4340, 4344]","{'A1': [(4340, 4344)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long jsonClear(String key, Path path) {
    return executeCommand(commandObjects.jsonClear(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonToggle,"List<Boolean> jsonToggle(String,Path2)","[4346, 4349]","{'A1': [(4346, 4349)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> jsonToggle(String key, Path2 path) {
    return executeCommand(commandObjects.jsonToggle(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonToggle,"String jsonToggle(String,Path)","[4351, 4355]","{'A1': [(4351, 4355)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public String jsonToggle(String key, Path path) {
    return executeCommand(commandObjects.jsonToggle(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonType,Class<?> jsonType(String),"[4357, 4361]","{'A1': [(4357, 4361)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Class<?> jsonType(String key) {
    return executeCommand(commandObjects.jsonType(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonType,"List<Class<?>> jsonType(String,Path2)","[4363, 4366]","{'A1': [(4363, 4366)]}",{'A1': 1.0},A1,,"  @Override
  public List<Class<?>> jsonType(String key, Path2 path) {
    return executeCommand(commandObjects.jsonType(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonType,"Class<?> jsonType(String,Path)","[4368, 4372]","{'A1': [(4368, 4372)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Class<?> jsonType(String key, Path path) {
    return executeCommand(commandObjects.jsonType(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonStrAppend,"long jsonStrAppend(String,Object)","[4374, 4378]","{'A1': [(4374, 4378)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long jsonStrAppend(String key, Object string) {
    return executeCommand(commandObjects.jsonStrAppend(key, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonStrAppend,"List<Long> jsonStrAppend(String,Path2,Object)","[4380, 4383]","{'A1': [(4380, 4383)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonStrAppend(String key, Path2 path, Object string) {
    return executeCommand(commandObjects.jsonStrAppend(key, path, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonStrAppend,"long jsonStrAppend(String,Path,Object)","[4385, 4389]","{'A1': [(4385, 4389)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long jsonStrAppend(String key, Path path, Object string) {
    return executeCommand(commandObjects.jsonStrAppend(key, path, string));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonStrLen,Long jsonStrLen(String),"[4391, 4395]","{'A1': [(4391, 4395)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Long jsonStrLen(String key) {
    return executeCommand(commandObjects.jsonStrLen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonStrLen,"List<Long> jsonStrLen(String,Path2)","[4397, 4400]","{'A1': [(4397, 4400)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonStrLen(String key, Path2 path) {
    return executeCommand(commandObjects.jsonStrLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonStrLen,"Long jsonStrLen(String,Path)","[4402, 4406]","{'A1': [(4402, 4406)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Long jsonStrLen(String key, Path path) {
    return executeCommand(commandObjects.jsonStrLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonNumIncrBy,"Object jsonNumIncrBy(String,Path2,double)","[4408, 4411]","{'A1': [(4408, 4411)]}",{'A1': 1.0},A1,,"  @Override
  public Object jsonNumIncrBy(String key, Path2 path, double value) {
    return executeCommand(commandObjects.jsonNumIncrBy(key, path, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonNumIncrBy,"double jsonNumIncrBy(String,Path,double)","[4413, 4417]","{'A1': [(4413, 4417)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public double jsonNumIncrBy(String key, Path path, double value) {
    return executeCommand(commandObjects.jsonNumIncrBy(key, path, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrAppend,"List<Long> jsonArrAppend(String,Path2)","[4419, 4422]","{'A1': [(4419, 4422)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonArrAppend(String key, Path2 path, Object... objects) {
    return executeCommand(commandObjects.jsonArrAppend(key, path, objects));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrAppendWithEscape,"List<Long> jsonArrAppendWithEscape(String,Path2)","[4424, 4427]","{'A1': [(4424, 4427)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonArrAppendWithEscape(String key, Path2 path, Object... objects) {
    return executeCommand(commandObjects.jsonArrAppendWithEscape(key, path, objects));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrAppend,"Long jsonArrAppend(String,Path)","[4429, 4433]","{'A1': [(4429, 4433)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Long jsonArrAppend(String key, Path path, Object... pojos) {
    return executeCommand(commandObjects.jsonArrAppend(key, path, pojos));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrIndex,"List<Long> jsonArrIndex(String,Path2,Object)","[4435, 4438]","{'A1': [(4435, 4438)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonArrIndex(String key, Path2 path, Object scalar) {
    return executeCommand(commandObjects.jsonArrIndex(key, path, scalar));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrIndexWithEscape,"List<Long> jsonArrIndexWithEscape(String,Path2,Object)","[4440, 4443]","{'A1': [(4440, 4443)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonArrIndexWithEscape(String key, Path2 path, Object scalar) {
    return executeCommand(commandObjects.jsonArrIndexWithEscape(key, path, scalar));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrIndex,"long jsonArrIndex(String,Path,Object)","[4445, 4449]","{'A1': [(4445, 4449)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long jsonArrIndex(String key, Path path, Object scalar) {
    return executeCommand(commandObjects.jsonArrIndex(key, path, scalar));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrInsert,"List<Long> jsonArrInsert(String,Path2,int)","[4451, 4454]","{'A1': [(4451, 4454)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonArrInsert(String key, Path2 path, int index, Object... objects) {
    return executeCommand(commandObjects.jsonArrInsert(key, path, index, objects));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrInsertWithEscape,"List<Long> jsonArrInsertWithEscape(String,Path2,int)","[4456, 4459]","{'A1': [(4456, 4459)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonArrInsertWithEscape(String key, Path2 path, int index, Object... objects) {
    return executeCommand(commandObjects.jsonArrInsertWithEscape(key, path, index, objects));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrInsert,"long jsonArrInsert(String,Path,int)","[4461, 4465]","{'A1': [(4461, 4465)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long jsonArrInsert(String key, Path path, int index, Object... pojos) {
    return executeCommand(commandObjects.jsonArrInsert(key, path, index, pojos));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrPop,Object jsonArrPop(String),"[4467, 4471]","{'A1': [(4467, 4471)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Object jsonArrPop(String key) {
    return executeCommand(commandObjects.jsonArrPop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrPop,"T jsonArrPop(String,Class<T>)","[4473, 4477]","{'A1': [(4473, 4477)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public <T> T jsonArrPop(String key, Class<T> clazz) {
    return executeCommand(commandObjects.jsonArrPop(key, clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrPop,"List<Object> jsonArrPop(String,Path2)","[4479, 4482]","{'A1': [(4479, 4482)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> jsonArrPop(String key, Path2 path) {
    return executeCommand(commandObjects.jsonArrPop(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrPop,"Object jsonArrPop(String,Path)","[4484, 4488]","{'A1': [(4484, 4488)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Object jsonArrPop(String key, Path path) {
    return executeCommand(commandObjects.jsonArrPop(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrPop,"T jsonArrPop(String,Class<T>,Path)","[4490, 4494]","{'A1': [(4490, 4494)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public <T> T jsonArrPop(String key, Class<T> clazz, Path path) {
    return executeCommand(commandObjects.jsonArrPop(key, clazz, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrPop,"List<Object> jsonArrPop(String,Path2,int)","[4496, 4499]","{'A1': [(4496, 4499)]}",{'A1': 1.0},A1,,"  @Override
  public List<Object> jsonArrPop(String key, Path2 path, int index) {
    return executeCommand(commandObjects.jsonArrPop(key, path, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrPop,"Object jsonArrPop(String,Path,int)","[4501, 4505]","{'A1': [(4501, 4505)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Object jsonArrPop(String key, Path path, int index) {
    return executeCommand(commandObjects.jsonArrPop(key, path, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrPop,"T jsonArrPop(String,Class<T>,Path,int)","[4507, 4511]","{'A1': [(4507, 4511)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public <T> T jsonArrPop(String key, Class<T> clazz, Path path, int index) {
    return executeCommand(commandObjects.jsonArrPop(key, clazz, path, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrLen,Long jsonArrLen(String),"[4513, 4517]","{'A1': [(4513, 4517)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Long jsonArrLen(String key) {
    return executeCommand(commandObjects.jsonArrLen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrLen,"List<Long> jsonArrLen(String,Path2)","[4519, 4522]","{'A1': [(4519, 4522)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonArrLen(String key, Path2 path) {
    return executeCommand(commandObjects.jsonArrLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrLen,"Long jsonArrLen(String,Path)","[4524, 4528]","{'A1': [(4524, 4528)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Long jsonArrLen(String key, Path path) {
    return executeCommand(commandObjects.jsonArrLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrTrim,"List<Long> jsonArrTrim(String,Path2,int,int)","[4530, 4533]","{'A1': [(4530, 4533)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonArrTrim(String key, Path2 path, int start, int stop) {
    return executeCommand(commandObjects.jsonArrTrim(key, path, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonArrTrim,"Long jsonArrTrim(String,Path,int,int)","[4535, 4539]","{'A1': [(4535, 4539)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Long jsonArrTrim(String key, Path path, int start, int stop) {
    return executeCommand(commandObjects.jsonArrTrim(key, path, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonObjLen,Long jsonObjLen(String),"[4541, 4545]","{'A1': [(4541, 4545)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Long jsonObjLen(String key) {
    return executeCommand(commandObjects.jsonObjLen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonObjLen,"Long jsonObjLen(String,Path)","[4547, 4551]","{'A1': [(4547, 4551)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public Long jsonObjLen(String key, Path path) {
    return executeCommand(commandObjects.jsonObjLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonObjLen,"List<Long> jsonObjLen(String,Path2)","[4553, 4556]","{'A1': [(4553, 4556)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonObjLen(String key, Path2 path) {
    return executeCommand(commandObjects.jsonObjLen(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonObjKeys,List<String> jsonObjKeys(String),"[4558, 4562]","{'A1': [(4558, 4562)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public List<String> jsonObjKeys(String key) {
    return executeCommand(commandObjects.jsonObjKeys(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonObjKeys,"List<String> jsonObjKeys(String,Path)","[4564, 4568]","{'A1': [(4564, 4568)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public List<String> jsonObjKeys(String key, Path path) {
    return executeCommand(commandObjects.jsonObjKeys(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonObjKeys,"List<List<String>> jsonObjKeys(String,Path2)","[4570, 4573]","{'A1': [(4570, 4573)]}",{'A1': 1.0},A1,,"  @Override
  public List<List<String>> jsonObjKeys(String key, Path2 path) {
    return executeCommand(commandObjects.jsonObjKeys(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonDebugMemory,long jsonDebugMemory(String),"[4575, 4579]","{'A1': [(4575, 4579)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long jsonDebugMemory(String key) {
    return executeCommand(commandObjects.jsonDebugMemory(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonDebugMemory,"long jsonDebugMemory(String,Path)","[4581, 4585]","{'A1': [(4581, 4585)]}",{'A1': 1.0},A1,,"  @Override
  @Deprecated
  public long jsonDebugMemory(String key, Path path) {
    return executeCommand(commandObjects.jsonDebugMemory(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,jsonDebugMemory,"List<Long> jsonDebugMemory(String,Path2)","[4587, 4590]","{'A1': [(4587, 4590)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> jsonDebugMemory(String key, Path2 path) {
    return executeCommand(commandObjects.jsonDebugMemory(key, path));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsCreate,String tsCreate(String),"[4594, 4597]","{'A1': [(4594, 4597)]}",{'A1': 1.0},A1,,"  @Override
  public String tsCreate(String key) {
    return executeCommand(commandObjects.tsCreate(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsCreate,"String tsCreate(String,TSCreateParams)","[4599, 4602]","{'A1': [(4599, 4602)]}",{'A1': 1.0},A1,,"  @Override
  public String tsCreate(String key, TSCreateParams createParams) {
    return executeCommand(commandObjects.tsCreate(key, createParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsDel,"long tsDel(String,long,long)","[4604, 4607]","{'A1': [(4604, 4607)]}",{'A1': 1.0},A1,,"  @Override
  public long tsDel(String key, long fromTimestamp, long toTimestamp) {
    return executeCommand(commandObjects.tsDel(key, fromTimestamp, toTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsAlter,"String tsAlter(String,TSAlterParams)","[4609, 4612]","{'A1': [(4609, 4612)]}",{'A1': 1.0},A1,,"  @Override
  public String tsAlter(String key, TSAlterParams alterParams) {
    return executeCommand(commandObjects.tsAlter(key, alterParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsAdd,"long tsAdd(String,double)","[4614, 4617]","{'A1': [(4614, 4617)]}",{'A1': 1.0},A1,,"  @Override
  public long tsAdd(String key, double value) {
    return executeCommand(commandObjects.tsAdd(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsAdd,"long tsAdd(String,long,double)","[4619, 4622]","{'A1': [(4619, 4622)]}",{'A1': 1.0},A1,,"  @Override
  public long tsAdd(String key, long timestamp, double value) {
    return executeCommand(commandObjects.tsAdd(key, timestamp, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsAdd,"long tsAdd(String,long,double,TSCreateParams)","[4624, 4627]","{'A1': [(4624, 4627)]}",{'A1': 1.0},A1,,"  @Override
  public long tsAdd(String key, long timestamp, double value, TSCreateParams createParams) {
    return executeCommand(commandObjects.tsAdd(key, timestamp, value, createParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsAdd,"long tsAdd(String,long,double,TSAddParams)","[4629, 4632]","{'A1': [(4629, 4632)]}",{'A1': 1.0},A1,,"  @Override
  public long tsAdd(String key, long timestamp, double value, TSAddParams addParams) {
    return executeCommand(commandObjects.tsAdd(key, timestamp, value, addParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsMAdd,List<Long> tsMAdd(),"[4634, 4637]","{'A1': [(4634, 4637)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> tsMAdd(Map.Entry<String, TSElement>... entries) {
    return executeCommand(commandObjects.tsMAdd(entries));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsIncrBy,"long tsIncrBy(String,double)","[4639, 4642]","{'A1': [(4639, 4642)]}",{'A1': 1.0},A1,,"  @Override
  public long tsIncrBy(String key, double value) {
    return executeCommand(commandObjects.tsIncrBy(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsIncrBy,"long tsIncrBy(String,double,long)","[4644, 4647]","{'A1': [(4644, 4647)]}",{'A1': 1.0},A1,,"  @Override
  public long tsIncrBy(String key, double value, long timestamp) {
    return executeCommand(commandObjects.tsIncrBy(key, value, timestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsIncrBy,"long tsIncrBy(String,double,TSIncrByParams)","[4649, 4652]","{'A1': [(4649, 4652)]}",{'A1': 1.0},A1,,"  @Override
  public long tsIncrBy(String key, double addend, TSIncrByParams incrByParams) {
    return executeCommand(commandObjects.tsIncrBy(key, addend, incrByParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsDecrBy,"long tsDecrBy(String,double)","[4654, 4657]","{'A1': [(4654, 4657)]}",{'A1': 1.0},A1,,"  @Override
  public long tsDecrBy(String key, double value) {
    return executeCommand(commandObjects.tsDecrBy(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsDecrBy,"long tsDecrBy(String,double,long)","[4659, 4662]","{'A1': [(4659, 4662)]}",{'A1': 1.0},A1,,"  @Override
  public long tsDecrBy(String key, double value, long timestamp) {
    return executeCommand(commandObjects.tsDecrBy(key, value, timestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsDecrBy,"long tsDecrBy(String,double,TSDecrByParams)","[4664, 4667]","{'A1': [(4664, 4667)]}",{'A1': 1.0},A1,,"  @Override
  public long tsDecrBy(String key, double subtrahend, TSDecrByParams decrByParams) {
    return executeCommand(commandObjects.tsDecrBy(key, subtrahend, decrByParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsRange,"List<TSElement> tsRange(String,long,long)","[4669, 4672]","{'A1': [(4669, 4672)]}",{'A1': 1.0},A1,,"  @Override
  public List<TSElement> tsRange(String key, long fromTimestamp, long toTimestamp) {
    return executeCommand(commandObjects.tsRange(key, fromTimestamp, toTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsRange,"List<TSElement> tsRange(String,TSRangeParams)","[4674, 4677]","{'A1': [(4674, 4677)]}",{'A1': 1.0},A1,,"  @Override
  public List<TSElement> tsRange(String key, TSRangeParams rangeParams) {
    return executeCommand(commandObjects.tsRange(key, rangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsRevRange,"List<TSElement> tsRevRange(String,long,long)","[4679, 4682]","{'A1': [(4679, 4682)]}",{'A1': 1.0},A1,,"  @Override
  public List<TSElement> tsRevRange(String key, long fromTimestamp, long toTimestamp) {
    return executeCommand(commandObjects.tsRevRange(key, fromTimestamp, toTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsRevRange,"List<TSElement> tsRevRange(String,TSRangeParams)","[4684, 4687]","{'A1': [(4684, 4687)]}",{'A1': 1.0},A1,,"  @Override
  public List<TSElement> tsRevRange(String key, TSRangeParams rangeParams) {
    return executeCommand(commandObjects.tsRevRange(key, rangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsMRange,"Map<String, TSMRangeElements> tsMRange(long,long)","[4689, 4692]","{'A1': [(4689, 4692)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, TSMRangeElements> tsMRange(long fromTimestamp, long toTimestamp, String... filters) {
    return executeCommand(commandObjects.tsMRange(fromTimestamp, toTimestamp, filters));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsMRange,"Map<String, TSMRangeElements> tsMRange(TSMRangeParams)","[4694, 4697]","{'A1': [(4694, 4697)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, TSMRangeElements> tsMRange(TSMRangeParams multiRangeParams) {
    return executeCommand(commandObjects.tsMRange(multiRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsMRevRange,"Map<String, TSMRangeElements> tsMRevRange(long,long)","[4699, 4702]","{'A1': [(4699, 4702)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, TSMRangeElements> tsMRevRange(long fromTimestamp, long toTimestamp, String... filters) {
    return executeCommand(commandObjects.tsMRevRange(fromTimestamp, toTimestamp, filters));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsMRevRange,"Map<String, TSMRangeElements> tsMRevRange(TSMRangeParams)","[4704, 4707]","{'A1': [(4704, 4707)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, TSMRangeElements> tsMRevRange(TSMRangeParams multiRangeParams) {
    return executeCommand(commandObjects.tsMRevRange(multiRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsGet,TSElement tsGet(String),"[4709, 4712]","{'A1': [(4709, 4712)]}",{'A1': 1.0},A1,,"  @Override
  public TSElement tsGet(String key) {
    return executeCommand(commandObjects.tsGet(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsGet,"TSElement tsGet(String,TSGetParams)","[4714, 4717]","{'A1': [(4714, 4717)]}",{'A1': 1.0},A1,,"  @Override
  public TSElement tsGet(String key, TSGetParams getParams) {
    return executeCommand(commandObjects.tsGet(key, getParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsMGet,"Map<String, TSMGetElement> tsMGet(TSMGetParams)","[4719, 4722]","{'A1': [(4719, 4722)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, TSMGetElement> tsMGet(TSMGetParams multiGetParams, String... filters) {
    return executeCommand(commandObjects.tsMGet(multiGetParams, filters));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsCreateRule,"String tsCreateRule(String,String,AggregationType,long)","[4724, 4727]","{'A1': [(4724, 4727)]}",{'A1': 1.0},A1,,"  @Override
  public String tsCreateRule(String sourceKey, String destKey, AggregationType aggregationType, long timeBucket) {
    return executeCommand(commandObjects.tsCreateRule(sourceKey, destKey, aggregationType, timeBucket));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsCreateRule,"String tsCreateRule(String,String,AggregationType,long,long)","[4729, 4733]","{'A1': [(4729, 4733)]}",{'A1': 1.0},A1,,"  @Override
  public String tsCreateRule(String sourceKey, String destKey, AggregationType aggregationType, long bucketDuration, long alignTimestamp) {
    return executeCommand(
        commandObjects.tsCreateRule(sourceKey, destKey, aggregationType, bucketDuration, alignTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsDeleteRule,"String tsDeleteRule(String,String)","[4735, 4738]","{'A1': [(4735, 4738)]}",{'A1': 1.0},A1,,"  @Override
  public String tsDeleteRule(String sourceKey, String destKey) {
    return executeCommand(commandObjects.tsDeleteRule(sourceKey, destKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsQueryIndex,List<String> tsQueryIndex(),"[4740, 4743]","{'A1': [(4740, 4743)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> tsQueryIndex(String... filters) {
    return executeCommand(commandObjects.tsQueryIndex(filters));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsInfo,TSInfo tsInfo(String),"[4745, 4748]","{'A1': [(4745, 4748)]}",{'A1': 1.0},A1,,"  @Override
  public TSInfo tsInfo(String key) {
    return executeCommand(commandObjects.tsInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tsInfoDebug,TSInfo tsInfoDebug(String),"[4750, 4753]","{'A1': [(4750, 4753)]}",{'A1': 1.0},A1,,"  @Override
  public TSInfo tsInfoDebug(String key) {
    return executeCommand(commandObjects.tsInfoDebug(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfReserve,"String bfReserve(String,double,long)","[4757, 4760]","{'A1': [(4757, 4760)]}",{'A1': 1.0},A1,,"  @Override
  public String bfReserve(String key, double errorRate, long capacity) {
    return executeCommand(commandObjects.bfReserve(key, errorRate, capacity));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfReserve,"String bfReserve(String,double,long,BFReserveParams)","[4762, 4765]","{'A1': [(4762, 4765)]}",{'A1': 1.0},A1,,"  @Override
  public String bfReserve(String key, double errorRate, long capacity, BFReserveParams reserveParams) {
    return executeCommand(commandObjects.bfReserve(key, errorRate, capacity, reserveParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfAdd,"boolean bfAdd(String,String)","[4767, 4770]","{'A1': [(4767, 4770)]}",{'A1': 1.0},A1,,"  @Override
  public boolean bfAdd(String key, String item) {
    return executeCommand(commandObjects.bfAdd(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfMAdd,List<Boolean> bfMAdd(String),"[4772, 4775]","{'A1': [(4772, 4775)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> bfMAdd(String key, String... items) {
    return executeCommand(commandObjects.bfMAdd(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfInsert,List<Boolean> bfInsert(String),"[4777, 4780]","{'A1': [(4777, 4780)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> bfInsert(String key, String... items) {
    return executeCommand(commandObjects.bfInsert(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfInsert,"List<Boolean> bfInsert(String,BFInsertParams)","[4782, 4785]","{'A1': [(4782, 4785)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> bfInsert(String key, BFInsertParams insertParams, String... items) {
    return executeCommand(commandObjects.bfInsert(key, insertParams, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfExists,"boolean bfExists(String,String)","[4787, 4790]","{'A1': [(4787, 4790)]}",{'A1': 1.0},A1,,"  @Override
  public boolean bfExists(String key, String item) {
    return executeCommand(commandObjects.bfExists(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfMExists,List<Boolean> bfMExists(String),"[4792, 4795]","{'A1': [(4792, 4795)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> bfMExists(String key, String... items) {
    return executeCommand(commandObjects.bfMExists(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfScanDump,"Map.Entry<Long, byte[]> bfScanDump(String,long)","[4797, 4800]","{'A1': [(4797, 4800)]}",{'A1': 1.0},A1,,"  @Override
  public Map.Entry<Long, byte[]> bfScanDump(String key, long iterator) {
    return executeCommand(commandObjects.bfScanDump(key, iterator));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfLoadChunk,"String bfLoadChunk(String,long,byte[])","[4802, 4805]","{'A1': [(4802, 4805)]}",{'A1': 1.0},A1,,"  @Override
  public String bfLoadChunk(String key, long iterator, byte[] data) {
    return executeCommand(commandObjects.bfLoadChunk(key, iterator, data));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfCard,long bfCard(String),"[4807, 4810]","{'A1': [(4807, 4810)]}",{'A1': 1.0},A1,,"  @Override
  public long bfCard(String key) {
    return executeCommand(commandObjects.bfCard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,bfInfo,"Map<String, Object> bfInfo(String)","[4812, 4815]","{'A1': [(4812, 4815)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, Object> bfInfo(String key) {
    return executeCommand(commandObjects.bfInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfReserve,"String cfReserve(String,long)","[4817, 4820]","{'A1': [(4817, 4820)]}",{'A1': 1.0},A1,,"  @Override
  public String cfReserve(String key, long capacity) {
    return executeCommand(commandObjects.cfReserve(key, capacity));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfReserve,"String cfReserve(String,long,CFReserveParams)","[4822, 4825]","{'A1': [(4822, 4825)]}",{'A1': 1.0},A1,,"  @Override
  public String cfReserve(String key, long capacity, CFReserveParams reserveParams) {
    return executeCommand(commandObjects.cfReserve(key, capacity, reserveParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfAdd,"boolean cfAdd(String,String)","[4827, 4830]","{'A1': [(4827, 4830)]}",{'A1': 1.0},A1,,"  @Override
  public boolean cfAdd(String key, String item) {
    return executeCommand(commandObjects.cfAdd(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfAddNx,"boolean cfAddNx(String,String)","[4832, 4835]","{'A1': [(4832, 4835)]}",{'A1': 1.0},A1,,"  @Override
  public boolean cfAddNx(String key, String item) {
    return executeCommand(commandObjects.cfAddNx(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfInsert,List<Boolean> cfInsert(String),"[4837, 4840]","{'A1': [(4837, 4840)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> cfInsert(String key, String... items) {
    return executeCommand(commandObjects.cfInsert(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfInsert,"List<Boolean> cfInsert(String,CFInsertParams)","[4842, 4845]","{'A1': [(4842, 4845)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> cfInsert(String key, CFInsertParams insertParams, String... items) {
    return executeCommand(commandObjects.cfInsert(key, insertParams, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfInsertNx,List<Boolean> cfInsertNx(String),"[4847, 4850]","{'A1': [(4847, 4850)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> cfInsertNx(String key, String... items) {
    return executeCommand(commandObjects.cfInsertNx(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfInsertNx,"List<Boolean> cfInsertNx(String,CFInsertParams)","[4852, 4855]","{'A1': [(4852, 4855)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> cfInsertNx(String key, CFInsertParams insertParams, String... items) {
    return executeCommand(commandObjects.cfInsertNx(key, insertParams, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfExists,"boolean cfExists(String,String)","[4857, 4860]","{'A1': [(4857, 4860)]}",{'A1': 1.0},A1,,"  @Override
  public boolean cfExists(String key, String item) {
    return executeCommand(commandObjects.cfExists(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfMExists,List<Boolean> cfMExists(String),"[4862, 4865]","{'A51': [(4862, 4865)]}",{'A51': 1.0},A51,,"  @Override
  public List<Boolean> cfMExists(String key, String... items) {
    return executeCommand(commandObjects.cfMExists(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfDel,"boolean cfDel(String,String)","[4867, 4870]","{'A1': [(4867, 4870)]}",{'A1': 1.0},A1,,"  @Override
  public boolean cfDel(String key, String item) {
    return executeCommand(commandObjects.cfDel(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfCount,"long cfCount(String,String)","[4872, 4875]","{'A1': [(4872, 4875)]}",{'A1': 1.0},A1,,"  @Override
  public long cfCount(String key, String item) {
    return executeCommand(commandObjects.cfCount(key, item));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfScanDump,"Map.Entry<Long, byte[]> cfScanDump(String,long)","[4877, 4880]","{'A1': [(4877, 4880)]}",{'A1': 1.0},A1,,"  @Override
  public Map.Entry<Long, byte[]> cfScanDump(String key, long iterator) {
    return executeCommand(commandObjects.cfScanDump(key, iterator));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfLoadChunk,"String cfLoadChunk(String,long,byte[])","[4882, 4885]","{'A1': [(4882, 4885)]}",{'A1': 1.0},A1,,"  @Override
  public String cfLoadChunk(String key, long iterator, byte[] data) {
    return executeCommand(commandObjects.cfLoadChunk(key, iterator, data));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cfInfo,"Map<String, Object> cfInfo(String)","[4887, 4890]","{'A1': [(4887, 4890)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, Object> cfInfo(String key) {
    return executeCommand(commandObjects.cfInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cmsInitByDim,"String cmsInitByDim(String,long,long)","[4892, 4895]","{'A1': [(4892, 4895)]}",{'A1': 1.0},A1,,"  @Override
  public String cmsInitByDim(String key, long width, long depth) {
    return executeCommand(commandObjects.cmsInitByDim(key, width, depth));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cmsInitByProb,"String cmsInitByProb(String,double,double)","[4897, 4900]","{'A1': [(4897, 4900)]}",{'A1': 1.0},A1,,"  @Override
  public String cmsInitByProb(String key, double error, double probability) {
    return executeCommand(commandObjects.cmsInitByProb(key, error, probability));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cmsIncrBy,"List<Long> cmsIncrBy(String,Map<String, Long>)","[4902, 4905]","{'A1': [(4902, 4905)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> cmsIncrBy(String key, Map<String, Long> itemIncrements) {
    return executeCommand(commandObjects.cmsIncrBy(key, itemIncrements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cmsQuery,List<Long> cmsQuery(String),"[4907, 4910]","{'A1': [(4907, 4910)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> cmsQuery(String key, String... items) {
    return executeCommand(commandObjects.cmsQuery(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cmsMerge,String cmsMerge(String),"[4912, 4915]","{'A1': [(4912, 4915)]}",{'A1': 1.0},A1,,"  @Override
  public String cmsMerge(String destKey, String... keys) {
    return executeCommand(commandObjects.cmsMerge(destKey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cmsMerge,"String cmsMerge(String,Map<String, Long>)","[4917, 4920]","{'A1': [(4917, 4920)]}",{'A1': 1.0},A1,,"  @Override
  public String cmsMerge(String destKey, Map<String, Long> keysAndWeights) {
    return executeCommand(commandObjects.cmsMerge(destKey, keysAndWeights));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,cmsInfo,"Map<String, Object> cmsInfo(String)","[4922, 4925]","{'A1': [(4922, 4925)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, Object> cmsInfo(String key) {
    return executeCommand(commandObjects.cmsInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,topkReserve,"String topkReserve(String,long)","[4927, 4930]","{'A1': [(4927, 4930)]}",{'A1': 1.0},A1,,"  @Override
  public String topkReserve(String key, long topk) {
    return executeCommand(commandObjects.topkReserve(key, topk));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,topkReserve,"String topkReserve(String,long,long,long,double)","[4932, 4935]","{'A1': [(4932, 4935)]}",{'A1': 1.0},A1,,"  @Override
  public String topkReserve(String key, long topk, long width, long depth, double decay) {
    return executeCommand(commandObjects.topkReserve(key, topk, width, depth, decay));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,topkAdd,List<String> topkAdd(String),"[4937, 4940]","{'A1': [(4937, 4940)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> topkAdd(String key, String... items) {
    return executeCommand(commandObjects.topkAdd(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,topkIncrBy,"List<String> topkIncrBy(String,Map<String, Long>)","[4942, 4945]","{'A1': [(4942, 4945)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> topkIncrBy(String key, Map<String, Long> itemIncrements) {
    return executeCommand(commandObjects.topkIncrBy(key, itemIncrements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,topkQuery,List<Boolean> topkQuery(String),"[4947, 4950]","{'A1': [(4947, 4950)]}",{'A1': 1.0},A1,,"  @Override
  public List<Boolean> topkQuery(String key, String... items) {
    return executeCommand(commandObjects.topkQuery(key, items));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,topkList,List<String> topkList(String),"[4952, 4955]","{'A1': [(4952, 4955)]}",{'A1': 1.0},A1,,"  @Override
  public List<String> topkList(String key) {
    return executeCommand(commandObjects.topkList(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,topkListWithCount,"Map<String, Long> topkListWithCount(String)","[4957, 4960]","{'A1': [(4957, 4960)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, Long> topkListWithCount(String key) {
    return executeCommand(commandObjects.topkListWithCount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,topkInfo,"Map<String, Object> topkInfo(String)","[4962, 4965]","{'A1': [(4962, 4965)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, Object> topkInfo(String key) {
    return executeCommand(commandObjects.topkInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestCreate,String tdigestCreate(String),"[4967, 4970]","{'A1': [(4967, 4970)]}",{'A1': 1.0},A1,,"  @Override
  public String tdigestCreate(String key) {
    return executeCommand(commandObjects.tdigestCreate(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestCreate,"String tdigestCreate(String,int)","[4972, 4975]","{'A1': [(4972, 4975)]}",{'A1': 1.0},A1,,"  @Override
  public String tdigestCreate(String key, int compression) {
    return executeCommand(commandObjects.tdigestCreate(key, compression));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestReset,String tdigestReset(String),"[4977, 4980]","{'A1': [(4977, 4980)]}",{'A1': 1.0},A1,,"  @Override
  public String tdigestReset(String key) {
    return executeCommand(commandObjects.tdigestReset(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestMerge,String tdigestMerge(String),"[4982, 4985]","{'A1': [(4982, 4985)]}",{'A1': 1.0},A1,,"  @Override
  public String tdigestMerge(String destinationKey, String... sourceKeys) {
    return executeCommand(commandObjects.tdigestMerge(destinationKey, sourceKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestMerge,"String tdigestMerge(TDigestMergeParams,String)","[4987, 4990]","{'A1': [(4987, 4990)]}",{'A1': 1.0},A1,,"  @Override
  public String tdigestMerge(TDigestMergeParams mergeParams, String destinationKey, String... sourceKeys) {
    return executeCommand(commandObjects.tdigestMerge(mergeParams, destinationKey, sourceKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestInfo,"Map<String, Object> tdigestInfo(String)","[4992, 4995]","{'A1': [(4992, 4995)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, Object> tdigestInfo(String key) {
    return executeCommand(commandObjects.tdigestInfo(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestAdd,String tdigestAdd(String),"[4997, 5000]","{'A1': [(4997, 5000)]}",{'A1': 1.0},A1,,"  @Override
  public String tdigestAdd(String key, double... values) {
    return executeCommand(commandObjects.tdigestAdd(key, values));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestCDF,List<Double> tdigestCDF(String),"[5002, 5005]","{'A1': [(5002, 5005)]}",{'A1': 1.0},A1,,"  @Override
  public List<Double> tdigestCDF(String key, double... values) {
    return executeCommand(commandObjects.tdigestCDF(key, values));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestQuantile,List<Double> tdigestQuantile(String),"[5007, 5010]","{'A1': [(5007, 5010)]}",{'A1': 1.0},A1,,"  @Override
  public List<Double> tdigestQuantile(String key, double... quantiles) {
    return executeCommand(commandObjects.tdigestQuantile(key, quantiles));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestMin,double tdigestMin(String),"[5012, 5015]","{'A1': [(5012, 5015)]}",{'A1': 1.0},A1,,"  @Override
  public double tdigestMin(String key) {
    return executeCommand(commandObjects.tdigestMin(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestMax,double tdigestMax(String),"[5017, 5020]","{'A1': [(5017, 5020)]}",{'A1': 1.0},A1,,"  @Override
  public double tdigestMax(String key) {
    return executeCommand(commandObjects.tdigestMax(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestTrimmedMean,"double tdigestTrimmedMean(String,double,double)","[5022, 5025]","{'A1': [(5022, 5025)]}",{'A1': 1.0},A1,,"  @Override
  public double tdigestTrimmedMean(String key, double lowCutQuantile, double highCutQuantile) {
    return executeCommand(commandObjects.tdigestTrimmedMean(key, lowCutQuantile, highCutQuantile));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestRank,List<Long> tdigestRank(String),"[5027, 5030]","{'A1': [(5027, 5030)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> tdigestRank(String key, double... values) {
    return executeCommand(commandObjects.tdigestRank(key, values));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestRevRank,List<Long> tdigestRevRank(String),"[5032, 5035]","{'A1': [(5032, 5035)]}",{'A1': 1.0},A1,,"  @Override
  public List<Long> tdigestRevRank(String key, double... values) {
    return executeCommand(commandObjects.tdigestRevRank(key, values));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestByRank,List<Double> tdigestByRank(String),"[5037, 5040]","{'A1': [(5037, 5040)]}",{'A1': 1.0},A1,,"  @Override
  public List<Double> tdigestByRank(String key, long... ranks) {
    return executeCommand(commandObjects.tdigestByRank(key, ranks));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,tdigestByRevRank,List<Double> tdigestByRevRank(String),"[5042, 5045]","{'A1': [(5042, 5045)]}",{'A1': 1.0},A1,,"  @Override
  public List<Double> tdigestByRevRank(String key, long... ranks) {
    return executeCommand(commandObjects.tdigestByRevRank(key, ranks));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,pipelined,PipelineBase pipelined(),"[5051, 5059]","{'A1': [(5051, 5059)]}",{'A1': 1.0},A1,,"  public PipelineBase pipelined() {
    if (provider == null) {
      throw new IllegalStateException(""It is not allowed to create Pipeline from this "" + getClass());
    } else if (provider instanceof MultiClusterPooledConnectionProvider) {
      return new MultiClusterPipeline((MultiClusterPooledConnectionProvider) provider, commandObjects);
    } else {
      return new Pipeline(provider.getConnection(), true, commandObjects);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,multi,AbstractTransaction multi(),"[5064, 5066]","{'A1': [(5064, 5066)]}",{'A1': 1.0},A1,,"  public AbstractTransaction multi() {
    return transaction(true);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,transaction,AbstractTransaction transaction(boolean),"[5072, 5080]","{'A1': [(5072, 5080)]}",{'A1': 1.0},A1,,"  public AbstractTransaction transaction(boolean doMulti) {
    if (provider == null) {
      throw new IllegalStateException(""It is not allowed to create Transaction from this "" + getClass());
    } else if (provider instanceof MultiClusterPooledConnectionProvider) {
      return new MultiClusterTransaction((MultiClusterPooledConnectionProvider) provider, doMulti, commandObjects);
    } else {
      return new Transaction(provider.getConnection(), doMulti, true, commandObjects);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sendCommand,Object sendCommand(ProtocolCommand),"[5082, 5084]","{'A1': [(5082, 5084)]}",{'A1': 1.0},A1,,"  public Object sendCommand(ProtocolCommand cmd) {
    return executeCommand(commandObjects.commandArguments(cmd));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sendCommand,Object sendCommand(ProtocolCommand),"[5086, 5088]","{'A1': [(5086, 5088)]}",{'A1': 1.0},A1,,"  public Object sendCommand(ProtocolCommand cmd, byte[]... args) {
    return executeCommand(commandObjects.commandArguments(cmd).addObjects((Object[]) args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sendBlockingCommand,Object sendBlockingCommand(ProtocolCommand),"[5090, 5092]","{'A1': [(5090, 5092)]}",{'A1': 1.0},A1,,"  public Object sendBlockingCommand(ProtocolCommand cmd, byte[]... args) {
    return executeCommand(commandObjects.commandArguments(cmd).addObjects((Object[]) args).blocking());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sendCommand,Object sendCommand(ProtocolCommand),"[5094, 5096]","{'A1': [(5094, 5096)]}",{'A1': 1.0},A1,,"  public Object sendCommand(ProtocolCommand cmd, String... args) {
    return executeCommand(commandObjects.commandArguments(cmd).addObjects((Object[]) args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sendBlockingCommand,Object sendBlockingCommand(ProtocolCommand),"[5098, 5100]","{'A1': [(5098, 5100)]}",{'A1': 1.0},A1,,"  public Object sendBlockingCommand(ProtocolCommand cmd, String... args) {
    return executeCommand(commandObjects.commandArguments(cmd).addObjects((Object[]) args).blocking());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sendCommand,"Object sendCommand(byte[],ProtocolCommand)","[5102, 5104]","{'A1': [(5102, 5104)]}",{'A1': 1.0},A1,,"  public Object sendCommand(byte[] sampleKey, ProtocolCommand cmd, byte[]... args) {
    return executeCommand(commandObjects.commandArguments(cmd).addObjects((Object[]) args).processKey(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sendBlockingCommand,"Object sendBlockingCommand(byte[],ProtocolCommand)","[5106, 5109]","{'A1': [(5106, 5109)]}",{'A1': 1.0},A1,,"  public Object sendBlockingCommand(byte[] sampleKey, ProtocolCommand cmd, byte[]... args) {
    return executeCommand(
        commandObjects.commandArguments(cmd).addObjects((Object[]) args).blocking().processKey(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sendCommand,"Object sendCommand(String,ProtocolCommand)","[5111, 5113]","{'A1': [(5111, 5113)]}",{'A1': 1.0},A1,,"  public Object sendCommand(String sampleKey, ProtocolCommand cmd, String... args) {
    return executeCommand(commandObjects.commandArguments(cmd).addObjects((Object[]) args).processKey(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,sendBlockingCommand,"Object sendBlockingCommand(String,ProtocolCommand)","[5115, 5118]","{'A1': [(5115, 5118)]}",{'A1': 1.0},A1,,"  public Object sendBlockingCommand(String sampleKey, ProtocolCommand cmd, String... args) {
    return executeCommand(
        commandObjects.commandArguments(cmd).addObjects((Object[]) args).blocking().processKey(sampleKey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,executeCommand,Object executeCommand(CommandArguments),"[5120, 5122]","{'A1': [(5120, 5122)]}",{'A1': 1.0},A1,,"  public Object executeCommand(CommandArguments args) {
    return executeCommand(new CommandObject<>(args, BuilderFactory.RAW_OBJECT));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setKeyArgumentPreProcessor,void setKeyArgumentPreProcessor(CommandKeyArgumentPreProcessor),"[5124, 5127]","{'A1': [(5124, 5127)]}",{'A1': 1.0},A1,,"  @Experimental
  public void setKeyArgumentPreProcessor(CommandKeyArgumentPreProcessor keyPreProcessor) {
    this.commandObjects.setKeyArgumentPreProcessor(keyPreProcessor);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setJsonObjectMapper,void setJsonObjectMapper(JsonObjectMapper),"[5129, 5131]","{'A39': [(5129, 5131)]}",{'A39': 1.0},A39,,"  public void setJsonObjectMapper(JsonObjectMapper jsonObjectMapper) {
    this.commandObjects.setJsonObjectMapper(jsonObjectMapper);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/UnifiedJedis.java,UnifiedJedis,setDefaultSearchDialect,void setDefaultSearchDialect(int),"[5133, 5135]","{'A1': [(5133, 5135)]}",{'A1': 1.0},A1,,"  public void setDefaultSearchDialect(int dialect) {
    this.commandObjects.setDefaultSearchDialect(dialect);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSub.java,JedisShardedPubSub,encode,String encode(byte[]),"[7, 10]","{'A1': [(7, 10)]}",{'A1': 1.0},A1,,"  @Override
  protected final String encode(byte[] raw) {
    return SafeEncoder.encode(raw);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadParams.java,XReadParams,xReadParams,XReadParams xReadParams(),"[13, 15]","{'A1': [(13, 15)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadParamsTest.java,"  public static XReadParams xReadParams() {
    return new XReadParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadParams.java,XReadParams,count,XReadParams count(int),"[17, 20]","{'A1': [(17, 20)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadParamsTest.java,"  public XReadParams count(int count) {
    this.count = count;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadParams.java,XReadParams,block,XReadParams block(int),"[22, 25]","{'A1': [(22, 25)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadParamsTest.java,"  public XReadParams block(int block) {
    this.block = block;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadParams.java,XReadParams,addParams,void addParams(CommandArguments),"[27, 35]","{'A1': [(27, 35)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (count != null) {
      args.add(Keyword.COUNT).add(count);
    }
    if (block != null) {
      args.add(Keyword.BLOCK).add(block).blocking();
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadParams.java,XReadParams,equals,boolean equals(Object),"[37, 43]","{'A17': [(37, 43)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    XReadParams that = (XReadParams) o;
    return Objects.equals(count, that.count) && Objects.equals(block, that.block);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadParams.java,XReadParams,hashCode,int hashCode(),"[45, 48]","{'A17': [(45, 48)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(count, block);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LolwutParams.java,LolwutParams,version,LolwutParams version(int),"[14, 17]","{'A12': [(14, 17)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/LolwutParamsTest.java,"  public LolwutParams version(int version) {
    this.version = version;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LolwutParams.java,LolwutParams,args,LolwutParams args(),"[19, 22]","{'A12': [(20, 20)], 'A1': [(19, 19), (21, 22)]}","{'A12': 0.25, 'A1': 0.75}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/LolwutParamsTest.java,"  @Deprecated
  public LolwutParams args(String... args) {
    return optionalArguments(args);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LolwutParams.java,LolwutParams,optionalArguments,LolwutParams optionalArguments(),"[24, 27]","{'A12': [(26, 27)], 'A1': [(24, 25)]}","{'A12': 0.5, 'A1': 0.5}",A12,../projects/jedis/src/test/java/redis/clients/jedis/params/LolwutParamsTest.java,"  public LolwutParams optionalArguments(String... args) {
    this.opargs = args;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LolwutParams.java,LolwutParams,addParams,void addParams(CommandArguments),"[29, 38]","{'A12': [(29, 30), (33, 33), (37, 38)], 'A1': [(31, 32), (34, 36)]}","{'A12': 0.5, 'A1': 0.5}",A12,../projects/jedis/src/test/java/redis/clients/jedis/params/LolwutParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (version != null) {
      args.add(Keyword.VERSION).add(version);

      if (opargs != null && opargs.length > 0) {
        args.addObjects((Object[]) opargs);
      }
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LolwutParams.java,LolwutParams,equals,boolean equals(Object),"[40, 46]","{'A17': [(40, 46)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/LolwutParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    LolwutParams that = (LolwutParams) o;
    return Objects.equals(version, that.version) && Arrays.equals(opargs, that.opargs);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LolwutParams.java,LolwutParams,hashCode,int hashCode(),"[48, 53]","{'A17': [(48, 53)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/LolwutParamsTest.java,"  @Override
  public int hashCode() {
    int result = Objects.hash(version);
    result = 31 * result + Arrays.hashCode(opargs);
    return result;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/RestoreParams.java,RestoreParams,restoreParams,RestoreParams restoreParams(),"[18, 20]","{'A14': [(18, 20)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java,"  public static RestoreParams restoreParams() {
    return new RestoreParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/RestoreParams.java,RestoreParams,replace,RestoreParams replace(),"[22, 25]","{'A14': [(22, 25)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java,"  public RestoreParams replace() {
    this.replace = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/RestoreParams.java,RestoreParams,absTtl,RestoreParams absTtl(),"[27, 30]","{'A14': [(27, 30)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java,"  public RestoreParams absTtl() {
    this.absTtl = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/RestoreParams.java,RestoreParams,idleTime,RestoreParams idleTime(long),"[32, 35]","{'A14': [(32, 35)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java,"  public RestoreParams idleTime(long idleTime) {
    this.idleTime = idleTime;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/RestoreParams.java,RestoreParams,frequency,RestoreParams frequency(long),"[37, 40]","{'A14': [(37, 40)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java,"  public RestoreParams frequency(long frequency) {
    this.frequency = frequency;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/RestoreParams.java,RestoreParams,addParams,void addParams(CommandArguments),"[42, 59]","{'A14': [(44, 44), (46, 48), (50, 52), (54, 56), (58, 59)], 'A1': [(42, 43), (45, 45), (49, 49), (53, 53), (57, 57)]}","{'A14': 0.6666666666666666, 'A1': 0.3333333333333333}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (replace) {
      args.add(Keyword.REPLACE);
    }

    if (absTtl) {
      args.add(Keyword.ABSTTL);
    }

    if (idleTime != null) {
      args.add(Keyword.IDLETIME).add(idleTime);
    }

    if (frequency != null) {
      args.add(Keyword.FREQ).add(frequency);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/RestoreParams.java,RestoreParams,equals,boolean equals(Object),"[61, 67]","{'A17': [(61, 67)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    RestoreParams that = (RestoreParams) o;
    return replace == that.replace && absTtl == that.absTtl && Objects.equals(idleTime, that.idleTime) && Objects.equals(frequency, that.frequency);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/RestoreParams.java,RestoreParams,hashCode,int hashCode(),"[69, 72]","{'A17': [(69, 72)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/RestoreParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(replace, absTtl, idleTime, frequency);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseGetExParams.java,BaseGetExParams,expiration,"T expiration(Keyword,Long)","[27, 31]","{'A35': [(27, 31)]}",{'A35': 1.0},A35,,"  private T expiration(Keyword type, Long value) {
    this.expiration = type;
    this.expirationValue = value;
    return (T) this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseGetExParams.java,BaseGetExParams,ex,T ex(long),"[37, 39]","{'A35': [(37, 39)]}",{'A35': 1.0},A35,,"  public T ex(long secondsToExpire) {
    return expiration(Keyword.EX, secondsToExpire);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseGetExParams.java,BaseGetExParams,px,T px(long),"[45, 47]","{'A35': [(45, 47)]}",{'A35': 1.0},A35,,"  public T px(long millisecondsToExpire) {
    return expiration(Keyword.PX, millisecondsToExpire);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseGetExParams.java,BaseGetExParams,exAt,T exAt(long),"[54, 56]","{'A35': [(54, 56)]}",{'A35': 1.0},A35,,"  public T exAt(long seconds) {
    return expiration(Keyword.EXAT, seconds);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseGetExParams.java,BaseGetExParams,pxAt,T pxAt(long),"[63, 65]","{'A35': [(63, 65)]}",{'A35': 1.0},A35,,"  public T pxAt(long milliseconds) {
    return expiration(Keyword.PXAT, milliseconds);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseGetExParams.java,BaseGetExParams,persist,T persist(),"[71, 73]","{'A35': [(71, 73)]}",{'A35': 1.0},A35,,"  public T persist() {
    return expiration(Keyword.PERSIST, null);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseGetExParams.java,BaseGetExParams,addParams,void addParams(CommandArguments),"[75, 83]","{'A35': [(75, 83)]}",{'A35': 1.0},A35,,"  @Override
  public void addParams(CommandArguments args) {
    if (expiration != null) {
      args.add(expiration);
      if (expirationValue != null) {
        args.add(expirationValue);
      }
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseGetExParams.java,BaseGetExParams,equals,boolean equals(Object),"[85, 91]","{'A35': [(85, 91)]}",{'A35': 1.0},A35,,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    BaseGetExParams that = (BaseGetExParams) o;
    return expiration == that.expiration && Objects.equals(expirationValue, that.expirationValue);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseGetExParams.java,BaseGetExParams,hashCode,int hashCode(),"[93, 96]","{'A35': [(93, 96)]}",{'A35': 1.0},A35,,"  @Override
  public int hashCode() {
    return Objects.hash(expiration, expirationValue);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/HGetExParams.java,HGetExParams,hGetExParams,HGetExParams hGetExParams(),"[29, 31]","{'A35': [(29, 31)]}",{'A35': 1.0},A35,,"  public static HGetExParams hGetExParams() {
    return new HGetExParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java,ZRangeParams,zrangeParams,"ZRangeParams zrangeParams(int,int)","[34, 36]","{'A1': [(34, 36)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java,"  public static ZRangeParams zrangeParams(int min, int max) {
    return new ZRangeParams(min, max);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java,ZRangeParams,zrangeByScoreParams,"ZRangeParams zrangeByScoreParams(double,double)","[44, 46]","{'A1': [(44, 46)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java,"  public static ZRangeParams zrangeByScoreParams(double min, double max) {
    return new ZRangeParams(min, max);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java,ZRangeParams,zrangeByLexParams,"ZRangeParams zrangeByLexParams(String,String)","[67, 69]","{'A1': [(67, 69)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java,"  public static ZRangeParams zrangeByLexParams(String min, String max) {
    return new ZRangeParams(BYLEX, min, max);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java,ZRangeParams,zrangeByLexParams,"ZRangeParams zrangeByLexParams(byte[],byte[])","[71, 73]","{'A1': [(71, 73)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java,"  public static ZRangeParams zrangeByLexParams(byte[] min, byte[] max) {
    return new ZRangeParams(BYLEX, min, max);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java,ZRangeParams,rev,ZRangeParams rev(),"[75, 78]","{'A1': [(75, 78)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java,"  public ZRangeParams rev() {
    this.rev = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java,ZRangeParams,limit,"ZRangeParams limit(int,int)","[80, 85]","{'A1': [(80, 85)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java,"  public ZRangeParams limit(int offset, int count) {
    this.limit = true;
    this.offset = offset;
    this.count = count;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java,ZRangeParams,addParams,void addParams(CommandArguments),"[87, 102]","{'A1': [(87, 102)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {

    args.add(min).add(max);
    if (by != null) {
      args.add(by);
    }

    if (rev) {
      args.add(Keyword.REV);
    }

    if (limit) {
      args.add(Keyword.LIMIT).add(offset).add(count);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java,ZRangeParams,equals,boolean equals(Object),"[104, 110]","{'A17': [(104, 110)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    ZRangeParams that = (ZRangeParams) o;
    return rev == that.rev && limit == that.limit && offset == that.offset && count == that.count && by == that.by && Objects.equals(min, that.min) && Objects.equals(max, that.max);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZRangeParams.java,ZRangeParams,hashCode,int hashCode(),"[112, 115]","{'A17': [(112, 115)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ZRangeParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(by, min, max, rev, limit, offset, count);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/CommandListFilterByParams.java,CommandListFilterByParams,commandListFilterByParams,CommandListFilterByParams commandListFilterByParams(),"[14, 16]","{'A12': [(14, 16)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java,"  public static CommandListFilterByParams commandListFilterByParams() {
    return new CommandListFilterByParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/CommandListFilterByParams.java,CommandListFilterByParams,filterByModule,CommandListFilterByParams filterByModule(String),"[18, 21]","{'A12': [(18, 21)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java,"  public CommandListFilterByParams filterByModule(String moduleName) {
    this.moduleName = moduleName;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/CommandListFilterByParams.java,CommandListFilterByParams,filterByAclCat,CommandListFilterByParams filterByAclCat(String),"[23, 26]","{'A12': [(23, 26)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java,"  public CommandListFilterByParams filterByAclCat(String category) {
    this.category = category;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/CommandListFilterByParams.java,CommandListFilterByParams,filterByPattern,CommandListFilterByParams filterByPattern(String),"[28, 31]","{'A12': [(28, 31)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java,"  public CommandListFilterByParams filterByPattern(String pattern) {
    this.pattern = pattern;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/CommandListFilterByParams.java,CommandListFilterByParams,addParams,void addParams(CommandArguments),"[33, 50]","{'A12': [(33, 34), (36, 37), (39, 40), (42, 43), (45, 46), (49, 50)], 'A1': [(35, 35), (38, 38), (41, 41), (44, 44), (47, 48)]}","{'A12': 0.6666666666666666, 'A1': 0.3333333333333333}",A12,../projects/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    args.add(Keyword.FILTERBY);

    if (moduleName != null && category == null && pattern == null) {
      args.add(Keyword.MODULE);
      args.add(moduleName);
    } else if (moduleName == null && category != null && pattern == null) {
      args.add(Keyword.ACLCAT);
      args.add(category);
    } else if (moduleName == null && category == null && pattern != null) {
      args.add(Keyword.PATTERN);
      args.add(pattern);
    } else {
      throw new IllegalArgumentException(""Must choose exactly one filter in ""
          + getClass().getSimpleName());
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/CommandListFilterByParams.java,CommandListFilterByParams,equals,boolean equals(Object),"[52, 58]","{'A17': [(52, 58)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    CommandListFilterByParams that = (CommandListFilterByParams) o;
    return Objects.equals(moduleName, that.moduleName) && Objects.equals(category, that.category) && Objects.equals(pattern, that.pattern);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/CommandListFilterByParams.java,CommandListFilterByParams,hashCode,int hashCode(),"[60, 63]","{'A17': [(60, 63)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/CommandListFilterByParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(moduleName, category, pattern);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LCSParams.java,LCSParams,LCSParams,LCSParams LCSParams(),"[15, 15]","{'A12': [(15, 15)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java,"  public static LCSParams LCSParams() { return new LCSParams(); }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LCSParams.java,LCSParams,len,LCSParams len(),"[21, 24]","{'A12': [(21, 24)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java,"  public LCSParams len() {
    this.len = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LCSParams.java,LCSParams,idx,LCSParams idx(),"[32, 35]","{'A12': [(32, 35)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java,"  public LCSParams idx() {
    this.idx = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LCSParams.java,LCSParams,minMatchLen,LCSParams minMatchLen(long),"[41, 44]","{'A12': [(41, 44)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java,"  public LCSParams minMatchLen(long minMatchLen) {
    this.minMatchLen = minMatchLen;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LCSParams.java,LCSParams,withMatchLen,LCSParams withMatchLen(),"[50, 53]","{'A12': [(50, 53)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java,"  public LCSParams withMatchLen() {
    this.withMatchLen = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LCSParams.java,LCSParams,addParams,void addParams(CommandArguments),"[55, 69]","{'A12': [(55, 57), (59, 60), (62, 63), (65, 66), (68, 69)], 'A1': [(58, 58), (61, 61), (64, 64), (67, 67)]}","{'A12': 0.7333333333333333, 'A1': 0.26666666666666666}",A12,../projects/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (len) {
      args.add(Keyword.LEN);
    }
    if (idx) {
      args.add(Keyword.IDX);
    }
    if (minMatchLen != null) {
      args.add(Keyword.MINMATCHLEN).add(minMatchLen);
    }
    if (withMatchLen) {
      args.add(Keyword.WITHMATCHLEN);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LCSParams.java,LCSParams,equals,boolean equals(Object),"[71, 77]","{'A17': [(71, 77)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    LCSParams lcsParams = (LCSParams) o;
    return len == lcsParams.len && idx == lcsParams.idx && withMatchLen == lcsParams.withMatchLen && Objects.equals(minMatchLen, lcsParams.minMatchLen);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LCSParams.java,LCSParams,hashCode,int hashCode(),"[79, 82]","{'A17': [(79, 82)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/LCSParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(len, idx, minMatchLen, withMatchLen);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BitPosParams.java,BitPosParams,bitPosParams,BitPosParams bitPosParams(),"[29, 31]","{'A1': [(29, 31)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/BitPosParamsTest.java,"  public static BitPosParams bitPosParams() {
    return new BitPosParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BitPosParams.java,BitPosParams,start,BitPosParams start(long),"[33, 36]","{'A1': [(33, 36)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/BitPosParamsTest.java,"  public BitPosParams start(long start) {
    this.start = start;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BitPosParams.java,BitPosParams,end,BitPosParams end(long),"[41, 44]","{'A1': [(41, 44)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/BitPosParamsTest.java,"  public BitPosParams end(long end) {
    this.end = end;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BitPosParams.java,BitPosParams,modifier,BitPosParams modifier(BitCountOption),"[50, 53]","{'A1': [(50, 53)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/BitPosParamsTest.java,"  public BitPosParams modifier(BitCountOption modifier) {
    this.modifier = modifier;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BitPosParams.java,BitPosParams,addParams,void addParams(CommandArguments),"[55, 66]","{'A1': [(55, 66)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/BitPosParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (start != null) {
      args.add(start);
      if (end != null) {
        args.add(end);
        if (modifier != null) {
          args.add(modifier);
        }
      }
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BitPosParams.java,BitPosParams,equals,boolean equals(Object),"[68, 74]","{'A17': [(68, 74)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/BitPosParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    BitPosParams that = (BitPosParams) o;
    return Objects.equals(start, that.start) && Objects.equals(end, that.end) && Objects.equals(modifier, that.modifier);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BitPosParams.java,BitPosParams,hashCode,int hashCode(),"[76, 79]","{'A17': [(76, 79)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/BitPosParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(start, end, modifier);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadGroupParams.java,XReadGroupParams,xReadGroupParams,XReadGroupParams xReadGroupParams(),"[14, 16]","{'A1': [(14, 16)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java,"  public static XReadGroupParams xReadGroupParams() {
    return new XReadGroupParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadGroupParams.java,XReadGroupParams,count,XReadGroupParams count(int),"[18, 21]","{'A1': [(18, 21)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java,"  public XReadGroupParams count(int count) {
    this.count = count;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadGroupParams.java,XReadGroupParams,block,XReadGroupParams block(int),"[23, 26]","{'A1': [(23, 26)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java,"  public XReadGroupParams block(int block) {
    this.block = block;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadGroupParams.java,XReadGroupParams,noAck,XReadGroupParams noAck(),"[28, 31]","{'A1': [(28, 31)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java,"  public XReadGroupParams noAck() {
    this.noack = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadGroupParams.java,XReadGroupParams,addParams,void addParams(CommandArguments),"[33, 44]","{'A1': [(33, 44)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (count != null) {
      args.add(Keyword.COUNT).add(count);
    }
    if (block != null) {
      args.add(Keyword.BLOCK).add(block).blocking();
    }
    if (noack) {
      args.add(Keyword.NOACK);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadGroupParams.java,XReadGroupParams,equals,boolean equals(Object),"[46, 52]","{'A17': [(46, 52)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    XReadGroupParams that = (XReadGroupParams) o;
    return noack == that.noack && Objects.equals(count, that.count) && Objects.equals(block, that.block);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XReadGroupParams.java,XReadGroupParams,hashCode,int hashCode(),"[54, 57]","{'A17': [(54, 57)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XReadGroupParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(count, block, noack);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/HSetExParams.java,HSetExParams,hSetExParams,HSetExParams hSetExParams(),"[40, 42]","{'A35': [(40, 42)]}",{'A35': 1.0},A35,,"    public static HSetExParams hSetExParams() {
        return new HSetExParams();
    }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/HSetExParams.java,HSetExParams,fnx,HSetExParams fnx(),"[48, 51]","{'A35': [(48, 51)]}",{'A35': 1.0},A35,,"    public HSetExParams fnx() {
        this.existance = Keyword.FNX;
        return this;
    }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/HSetExParams.java,HSetExParams,fxx,HSetExParams fxx(),"[57, 60]","{'A35': [(57, 60)]}",{'A35': 1.0},A35,,"    public HSetExParams fxx() {
        this.existance = Keyword.FXX;
        return this;
    }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/HSetExParams.java,HSetExParams,addParams,void addParams(CommandArguments),"[62, 69]","{'A35': [(62, 69)]}",{'A35': 1.0},A35,,"    @Override
    public void addParams(CommandArguments args) {
        if (existance != null) {
            args.add(existance);
        }

        super.addParams(args);
    }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/HSetExParams.java,HSetExParams,equals,boolean equals(Object),"[71, 77]","{'A35': [(71, 77)]}",{'A35': 1.0},A35,,"    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        HSetExParams setParams = (HSetExParams) o;
        return Objects.equals(existance, setParams.existance) && super.equals((BaseSetExParams) o);
    }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/HSetExParams.java,HSetExParams,hashCode,int hashCode(),"[79, 82]","{'A35': [(79, 82)]}",{'A35': 1.0},A35,,"    @Override
    public int hashCode() {
        return Objects.hash(existance, super.hashCode());
    }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LPosParams.java,LPosParams,lPosParams,LPosParams lPosParams(),"[13, 15]","{'A22': [(13, 15)]}",{'A22': 1.0},A22,../projects/jedis/src/test/java/redis/clients/jedis/params/LPosParamsTest.java,"  public static LPosParams lPosParams() {
    return new LPosParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LPosParams.java,LPosParams,rank,LPosParams rank(int),"[17, 20]","{'A22': [(17, 17), (19, 20)], 'A1': [(18, 18)]}","{'A22': 0.75, 'A1': 0.25}",A22,../projects/jedis/src/test/java/redis/clients/jedis/params/LPosParamsTest.java,"  public LPosParams rank(int rank) {
    this.rank = rank;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LPosParams.java,LPosParams,maxlen,LPosParams maxlen(int),"[22, 25]","{'A22': [(22, 22), (24, 25)], 'A1': [(23, 23)]}","{'A22': 0.75, 'A1': 0.25}",A22,../projects/jedis/src/test/java/redis/clients/jedis/params/LPosParamsTest.java,"  public LPosParams maxlen(int maxLen) {
    this.maxlen = maxLen;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LPosParams.java,LPosParams,addParams,void addParams(CommandArguments),"[27, 36]","{'A22': [(31, 32), (35, 36)], 'A1': [(27, 30), (33, 34)]}","{'A22': 0.4, 'A1': 0.6}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/LPosParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (rank != null) {
      args.add(Keyword.RANK).add(rank);
    }

    if (maxlen != null) {
      args.add(Keyword.MAXLEN).add(maxlen);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LPosParams.java,LPosParams,equals,boolean equals(Object),"[38, 44]","{'A17': [(38, 44)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/LPosParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    LPosParams that = (LPosParams) o;
    return Objects.equals(rank, that.rank) && Objects.equals(maxlen, that.maxlen);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/LPosParams.java,LPosParams,hashCode,int hashCode(),"[46, 49]","{'A17': [(46, 49)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/LPosParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(rank, maxlen);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,geoRadiusParam,GeoRadiusParam geoRadiusParam(),"[20, 22]","{'A7': [(20, 22)]}",{'A7': 1.0},A7,,"  public static GeoRadiusParam geoRadiusParam() {
    return new GeoRadiusParam();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,withCoord,GeoRadiusParam withCoord(),"[24, 27]","{'A1': [(25, 25)], 'A7': [(24, 24), (26, 27)]}","{'A1': 0.25, 'A7': 0.75}",A7,,"  public GeoRadiusParam withCoord() {
    withCoord = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,withDist,GeoRadiusParam withDist(),"[29, 32]","{'A1': [(30, 30)], 'A7': [(29, 29), (31, 32)]}","{'A1': 0.25, 'A7': 0.75}",A7,,"  public GeoRadiusParam withDist() {
    withDist = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,withHash,GeoRadiusParam withHash(),"[34, 37]","{'A1': [(35, 35)], 'A16': [(34, 34), (36, 37)]}","{'A1': 0.25, 'A16': 0.75}",A16,,"  public GeoRadiusParam withHash() {
    withHash = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,sortAscending,GeoRadiusParam sortAscending(),"[39, 41]","{'A1': [(40, 40)], 'A7': [(39, 39), (41, 41)]}","{'A1': 0.3333333333333333, 'A7': 0.6666666666666666}",A7,,"  public GeoRadiusParam sortAscending() {
    return sortingOrder(SortingOrder.ASC);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,sortDescending,GeoRadiusParam sortDescending(),"[43, 45]","{'A1': [(44, 45)], 'A7': [(43, 43)]}","{'A1': 0.6666666666666666, 'A7': 0.3333333333333333}",A1,,"  public GeoRadiusParam sortDescending() {
    return sortingOrder(SortingOrder.DESC);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,sortingOrder,GeoRadiusParam sortingOrder(SortingOrder),"[47, 50]","{'A1': [(47, 48)], 'A7': [(49, 50)]}","{'A1': 0.5, 'A7': 0.5}",A1,,"  public GeoRadiusParam sortingOrder(SortingOrder order) {
    this.sortingOrder = order;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,count,GeoRadiusParam count(int),"[52, 55]","{'A1': [(53, 53)], 'A7': [(52, 52), (54, 55)]}","{'A1': 0.25, 'A7': 0.75}",A7,,"  public GeoRadiusParam count(int count) {
    this.count = count;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,count,"GeoRadiusParam count(int,boolean)","[57, 61]","{'A1': [(58, 61)], 'A12': [(57, 57)]}","{'A1': 0.8, 'A12': 0.2}",A1,,"  public GeoRadiusParam count(int count, boolean any) {
    this.count = count;
    this.any = any;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,any,GeoRadiusParam any(),"[63, 69]","{'A1': [(63, 65), (67, 67)], 'A12': [(66, 66), (68, 69)]}","{'A1': 0.5714285714285714, 'A12': 0.42857142857142855}",A1,,"  public GeoRadiusParam any() {
    if (this.count == null) {
      throw new IllegalArgumentException(""COUNT must be set before ANY to be set"");
    }
    this.any = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusParam.java,GeoRadiusParam,addParams,void addParams(CommandArguments),"[71, 94]","{'A1': [(71, 72), (74, 75), (77, 78), (80, 81), (84, 85), (87, 87), (91, 92)], 'A7': [(73, 73), (76, 76), (79, 79), (83, 83), (89, 90), (93, 94)], 'A12': [(86, 86), (88, 88)], 'A16': [(82, 82)]}","{'A1': 0.5416666666666666, 'A7': 0.3333333333333333, 'A12': 0.08333333333333333, 'A16': 0.041666666666666664}",A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (withCoord) {
      args.add(Keyword.WITHCOORD);
    }
    if (withDist) {
      args.add(Keyword.WITHDIST);
    }
    if (withHash) {
      args.add(Keyword.WITHHASH);
    }

    if (count != null) {
      args.add(Keyword.COUNT).add(count);
      if (any) {
        args.add(Keyword.ANY);
      }
    }

    if (sortingOrder != null) {
      args.add(sortingOrder);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZParams.java,ZParams.Aggregate,getRaw,byte[] getRaw(),"[24, 27]","{'A1': [(24, 24)], 'A22': [(25, 27)]}","{'A1': 0.25, 'A22': 0.75}",A22,../projects/jedis/src/test/java/redis/clients/jedis/params/ZParamsTest.java,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZParams.java,ZParams,weights,ZParams weights(),"[32, 38]","{'A1': [(33, 33), (35, 35)], 'A2': [(36, 36)], 'A7': [(32, 32), (34, 34), (37, 38)]}","{'A1': 0.2857142857142857, 'A2': 0.14285714285714285, 'A7': 0.5714285714285714}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ZParamsTest.java,"  public ZParams weights(final double... weights) {
    params.add(Keyword.WEIGHTS);
    for (final double weight : weights) {
      params.add(weight);
    }
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZParams.java,ZParams,aggregate,ZParams aggregate(Aggregate),"[40, 44]","{'A1': [(41, 42)], 'A7': [(40, 40), (43, 44)]}","{'A1': 0.4, 'A7': 0.6}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ZParamsTest.java,"  public ZParams aggregate(final Aggregate aggregate) {
    params.add(Keyword.AGGREGATE);
    params.add(aggregate);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZParams.java,ZParams,addParams,void addParams(CommandArguments),"[46, 49]","{'A1': [(46, 49)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    args.addObjects(params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZParams.java,ZParams,equals,boolean equals(Object),"[51, 57]","{'A17': [(51, 57)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ZParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    ZParams zParams = (ZParams) o;
    return Objects.equals(params, zParams.params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZParams.java,ZParams,hashCode,int hashCode(),"[59, 62]","{'A17': [(59, 62)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ZParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusStoreParam.java,GeoRadiusStoreParam,geoRadiusStoreParam,GeoRadiusStoreParam geoRadiusStoreParam(),"[15, 17]","{'A1': [(15, 17)]}",{'A1': 1.0},A1,,"  public static GeoRadiusStoreParam geoRadiusStoreParam() {
    return new GeoRadiusStoreParam();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusStoreParam.java,GeoRadiusStoreParam,store,GeoRadiusStoreParam store(String),"[24, 30]","{'A16': [(28, 28)], 'A1': [(24, 27), (29, 30)]}","{'A16': 0.14285714285714285, 'A1': 0.8571428571428571}",A1,,"  public GeoRadiusStoreParam store(String key) {
    if (key != null) {
      this.store = true;
      this.key = key;
    }
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusStoreParam.java,GeoRadiusStoreParam,storeDist,GeoRadiusStoreParam storeDist(String),"[32, 38]","{'A16': [(36, 36)], 'A1': [(32, 35), (37, 38)]}","{'A16': 0.14285714285714285, 'A1': 0.8571428571428571}",A1,,"  public GeoRadiusStoreParam storeDist(String key) {
    if (key != null) {
      this.storeDist = true;
      this.key = key;
    }
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoRadiusStoreParam.java,GeoRadiusStoreParam,addParams,void addParams(CommandArguments),"[40, 50]","{'A16': [(49, 49)], 'A1': [(40, 48), (50, 50)]}","{'A16': 0.09090909090909091, 'A1': 0.9090909090909091}",A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (storeDist) {
      args.add(Keyword.STOREDIST).key(key);
    } else if (store) {
      args.add(Keyword.STORE).key(key);
    } else {
      throw new IllegalArgumentException(this.getClass().getSimpleName()
          + "" must has store or storedist option"");
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAutoClaimParams.java,XAutoClaimParams,xAutoClaimParams,XAutoClaimParams xAutoClaimParams(),"[15, 17]","{'A9': [(15, 17)]}",{'A9': 1.0},A9,../projects/jedis/src/test/java/redis/clients/jedis/params/XAutoClaimParamsTest.java,"  public static XAutoClaimParams xAutoClaimParams() {
    return new XAutoClaimParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAutoClaimParams.java,XAutoClaimParams,count,XAutoClaimParams count(int),"[24, 27]","{'A9': [(24, 27)]}",{'A9': 1.0},A9,../projects/jedis/src/test/java/redis/clients/jedis/params/XAutoClaimParamsTest.java,"  public XAutoClaimParams count(int count) {
    this.count = count;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAutoClaimParams.java,XAutoClaimParams,addParams,void addParams(CommandArguments),"[29, 34]","{'A9': [(29, 29), (31, 31), (33, 34)], 'A1': [(30, 30), (32, 32)]}","{'A9': 0.6666666666666666, 'A1': 0.3333333333333333}",A9,../projects/jedis/src/test/java/redis/clients/jedis/params/XAutoClaimParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (count != null) {
      args.add(Keyword.COUNT.getRaw()).add(count);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAutoClaimParams.java,XAutoClaimParams,equals,boolean equals(Object),"[36, 42]","{'A17': [(36, 42)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XAutoClaimParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    XAutoClaimParams that = (XAutoClaimParams) o;
    return Objects.equals(count, that.count);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAutoClaimParams.java,XAutoClaimParams,hashCode,int hashCode(),"[44, 47]","{'A17': [(44, 47)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XAutoClaimParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(count);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,clientKillParams,ClientKillParams clientKillParams(),"[22, 24]","{'A1': [(22, 24)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public static ClientKillParams clientKillParams() {
    return new ClientKillParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,addParam,"ClientKillParams addParam(Keyword,Object)","[26, 29]","{'A1': [(26, 29)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  private ClientKillParams addParam(Keyword key, Object value) {
    params.add(KeyValue.of(key, value));
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,id,ClientKillParams id(String),"[31, 33]","{'A1': [(31, 33)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams id(String clientId) {
    return addParam(Keyword.ID, clientId);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,id,ClientKillParams id(byte[]),"[35, 37]","{'A1': [(35, 37)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams id(byte[] clientId) {
    return addParam(Keyword.ID, clientId);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,type,ClientKillParams type(ClientType),"[39, 41]","{'A1': [(39, 41)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams type(ClientType type) {
    return addParam(Keyword.TYPE, type);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,addr,ClientKillParams addr(String),"[43, 45]","{'A1': [(43, 45)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams addr(String ipPort) {
    return addParam(Keyword.ADDR, ipPort);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,addr,ClientKillParams addr(byte[]),"[47, 49]","{'A1': [(47, 49)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams addr(byte[] ipPort) {
    return addParam(Keyword.ADDR, ipPort);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,addr,"ClientKillParams addr(String,int)","[51, 53]","{'A1': [(51, 53)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams addr(String ip, int port) {
    return addParam(Keyword.ADDR, ip + ':' + port);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,skipMe,ClientKillParams skipMe(SkipMe),"[55, 57]","{'A1': [(55, 57)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams skipMe(SkipMe skipMe) {
    return addParam(Keyword.SKIPME, skipMe);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,user,ClientKillParams user(String),"[59, 61]","{'A1': [(60, 60)], 'A14': [(59, 59), (61, 61)]}","{'A1': 0.3333333333333333, 'A14': 0.6666666666666666}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams user(String username) {
    return addParam(Keyword.USER, username);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,laddr,ClientKillParams laddr(String),"[63, 65]","{'A1': [(64, 64)], 'A14': [(63, 63), (65, 65)]}","{'A1': 0.3333333333333333, 'A14': 0.6666666666666666}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams laddr(String ipPort) {
    return addParam(Keyword.LADDR, ipPort);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,laddr,"ClientKillParams laddr(String,int)","[67, 69]","{'A1': [(68, 69)], 'A14': [(67, 67)]}","{'A1': 0.6666666666666666, 'A14': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams laddr(String ip, int port) {
    return addParam(Keyword.LADDR, ip + ':' + port);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,maxAge,ClientKillParams maxAge(long),"[77, 79]","{'A40': [(77, 79)]}",{'A40': 1.0},A40,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  public ClientKillParams maxAge(long maxAge) {
    return addParam(Keyword.MAXAGE, maxAge);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,addParams,void addParams(CommandArguments),"[81, 84]","{'A1': [(81, 83)], 'A14': [(84, 84)]}","{'A1': 0.75, 'A14': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    params.forEach(kv -> args.add(kv.getKey()).add(kv.getValue()));
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,equals,boolean equals(Object),"[86, 92]","{'A17': [(86, 92)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    ClientKillParams that = (ClientKillParams) o;
    return Objects.equals(params, that.params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ClientKillParams.java,ClientKillParams,hashCode,int hashCode(),"[94, 97]","{'A17': [(94, 97)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ClientKillParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,expiration,"T expiration(Keyword,Long)","[28, 32]","{'A35': [(28, 32)]}",{'A35': 1.0},A35,,"  private T expiration(Keyword type, Long value) {
    this.expiration = type;
    this.expirationValue = value;
    return (T) this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,ex,T ex(long),"[39, 41]","{'A35': [(39, 41)]}",{'A35': 1.0},A35,,"  public T ex(long remainingSeconds) {
    return expiration(Keyword.EX, remainingSeconds);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,px,T px(long),"[48, 50]","{'A35': [(48, 50)]}",{'A35': 1.0},A35,,"  public T px(long remainingMilliseconds) {
    return expiration(Keyword.PX, remainingMilliseconds);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,exAt,T exAt(long),"[57, 59]","{'A35': [(57, 59)]}",{'A35': 1.0},A35,,"  public T exAt(long timestampSeconds) {
    return expiration(Keyword.EXAT, timestampSeconds);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,pxAt,T pxAt(long),"[66, 68]","{'A35': [(66, 68)]}",{'A35': 1.0},A35,,"  public T pxAt(long timestampMilliseconds) {
    return expiration(Keyword.PXAT, timestampMilliseconds);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,keepttl,T keepttl(),"[74, 77]","{'A35': [(74, 77)]}",{'A35': 1.0},A35,,"  @Deprecated
  public T keepttl() {
    return keepTtl();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,keepTtl,T keepTtl(),"[83, 85]","{'A35': [(83, 85)]}",{'A35': 1.0},A35,,"  public T keepTtl() {
    return expiration(Keyword.KEEPTTL, null);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,addParams,void addParams(CommandArguments),"[87, 95]","{'A35': [(87, 95)]}",{'A35': 1.0},A35,,"  @Override
  public void addParams(CommandArguments args) {
    if (expiration != null) {
      args.add(expiration);
      if (expirationValue != null) {
        args.add(expirationValue);
      }
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,equals,boolean equals(Object),"[97, 104]","{'A35': [(97, 104)]}",{'A35': 1.0},A35,,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    BaseSetExParams setParams = (BaseSetExParams) o;
    return Objects.equals(expiration, setParams.expiration) 
      && Objects.equals(expirationValue, setParams.expirationValue);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/BaseSetExParams.java,BaseSetExParams,hashCode,int hashCode(),"[106, 109]","{'A35': [(106, 109)]}",{'A35': 1.0},A35,,"  @Override
  public int hashCode() {
    return Objects.hash(expiration, expirationValue);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GetExParams.java,GetExParams,getExParams,GetExParams getExParams(),"[5, 7]","{'A14': [(6, 7)], 'A35': [(5, 5)]}","{'A14': 0.6666666666666666, 'A35': 0.3333333333333333}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/GetExParamsTest.java,"  public static GetExParams getExParams() { 
    return new GetExParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/MigrateParams.java,MigrateParams,migrateParams,MigrateParams migrateParams(),"[18, 20]","{'A1': [(18, 20)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java,"  public static MigrateParams migrateParams() {
    return new MigrateParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/MigrateParams.java,MigrateParams,copy,MigrateParams copy(),"[22, 25]","{'A1': [(22, 25)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java,"  public MigrateParams copy() {
    this.copy = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/MigrateParams.java,MigrateParams,replace,MigrateParams replace(),"[27, 30]","{'A1': [(27, 30)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java,"  public MigrateParams replace() {
    this.replace = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/MigrateParams.java,MigrateParams,auth,MigrateParams auth(String),"[32, 35]","{'A1': [(32, 32), (34, 35)], 'A53': [(33, 33)]}","{'A1': 0.75, 'A53': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java,"  public MigrateParams auth(String password) {
    this.password = password;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/MigrateParams.java,MigrateParams,auth2,"MigrateParams auth2(String,String)","[37, 41]","{'A1': [(38, 38)], 'A14': [(37, 37), (40, 41)], 'A53': [(39, 39)]}","{'A1': 0.2, 'A14': 0.6, 'A53': 0.2}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java,"  public MigrateParams auth2(String username, String password) {
    this.username = username;
    this.password = password;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/MigrateParams.java,MigrateParams,addParams,void addParams(CommandArguments),"[43, 56]","{'A1': [(44, 46), (48, 49), (51, 51)], 'A14': [(43, 43), (47, 47), (50, 50), (55, 56)], 'A53': [(52, 54)]}","{'A1': 0.42857142857142855, 'A14': 0.35714285714285715, 'A53': 0.21428571428571427}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (copy) {
      args.add(Keyword.COPY);
    }
    if (replace) {
      args.add(Keyword.REPLACE);
    }
    if (username != null) {
      args.add(Keyword.AUTH2).add(username).add(password);
    } else if (password != null) {
      args.add(Keyword.AUTH).add(password);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/MigrateParams.java,MigrateParams,equals,boolean equals(Object),"[58, 64]","{'A17': [(58, 64)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    MigrateParams that = (MigrateParams) o;
    return copy == that.copy && replace == that.replace && Objects.equals(username, that.username) && Objects.equals(password, that.password);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/MigrateParams.java,MigrateParams,hashCode,int hashCode(),"[66, 69]","{'A17': [(66, 69)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/MigrateParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(copy, replace, username, password);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SetParams.java,SetParams,setParams,SetParams setParams(),"[12, 14]","{'A54': [(12, 14)]}",{'A54': 1.0},A54,../projects/jedis/src/test/java/redis/clients/jedis/params/SetParamsTest.java,"  public static SetParams setParams() {
    return new SetParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SetParams.java,SetParams,nx,SetParams nx(),"[20, 23]","{'A1': [(20, 21)], 'A54': [(22, 23)]}","{'A1': 0.5, 'A54': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/SetParamsTest.java,"  public SetParams nx() {
    this.existance = Keyword.NX;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SetParams.java,SetParams,xx,SetParams xx(),"[29, 32]","{'A1': [(29, 32)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/SetParamsTest.java,"  public SetParams xx() {
    this.existance = Keyword.XX;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SetParams.java,SetParams,addParams,void addParams(CommandArguments),"[34, 41]","{'A1': [(34, 37)], 'A54': [(38, 38), (41, 41)], 'A35': [(40, 40)], 'A7': [(39, 39)]}","{'A1': 0.5, 'A54': 0.25, 'A35': 0.125, 'A7': 0.125}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/SetParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (existance != null) {
      args.add(existance);
    }

    super.addParams(args);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SetParams.java,SetParams,equals,boolean equals(Object),"[43, 49]","{'A35': [(48, 48)], 'A17': [(43, 47), (49, 49)]}","{'A35': 0.14285714285714285, 'A17': 0.8571428571428571}",A17,../projects/jedis/src/test/java/redis/clients/jedis/params/SetParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    SetParams setParams = (SetParams) o;
    return Objects.equals(existance, setParams.existance) && super.equals((BaseSetExParams) o);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SetParams.java,SetParams,hashCode,int hashCode(),"[51, 54]","{'A35': [(53, 53)], 'A17': [(51, 52), (54, 54)]}","{'A35': 0.25, 'A17': 0.75}",A17,../projects/jedis/src/test/java/redis/clients/jedis/params/SetParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(existance, super.hashCode());
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,xPendingParams,"XPendingParams xPendingParams(StreamEntryID,StreamEntryID,int)","[44, 46]","{'A1': [(44, 46)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public static XPendingParams xPendingParams(StreamEntryID start, StreamEntryID end, int count) {
    return new XPendingParams(start, end, count);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,xPendingParams,"XPendingParams xPendingParams(String,String,int)","[48, 50]","{'A1': [(48, 50)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public static XPendingParams xPendingParams(String start, String end, int count) {
    return new XPendingParams(start, end, count);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,xPendingParams,"XPendingParams xPendingParams(byte[],byte[],int)","[52, 54]","{'A14': [(54, 54)], 'A1': [(52, 53)]}","{'A14': 0.3333333333333333, 'A1': 0.6666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public static XPendingParams xPendingParams(byte[] start, byte[] end, int count) {
    return new XPendingParams(start, end, count);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,xPendingParams,XPendingParams xPendingParams(),"[56, 58]","{'A1': [(56, 58)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public static XPendingParams xPendingParams() {
    return new XPendingParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,idle,XPendingParams idle(long),"[60, 63]","{'A14': [(60, 63)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public XPendingParams idle(long idle) {
    this.idle = idle;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,start,XPendingParams start(StreamEntryID),"[65, 68]","{'A14': [(65, 65), (67, 68)], 'A1': [(66, 66)]}","{'A14': 0.75, 'A1': 0.25}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public XPendingParams start(StreamEntryID start) {
    this.start = from(start.toString());
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,end,XPendingParams end(StreamEntryID),"[70, 73]","{'A14': [(70, 70), (72, 73)], 'A1': [(71, 71)]}","{'A14': 0.75, 'A1': 0.25}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public XPendingParams end(StreamEntryID end) {
    this.end = from(end.toString());
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,count,XPendingParams count(int),"[75, 78]","{'A14': [(75, 78)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public XPendingParams count(int count) {
    this.count = count;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,consumer,XPendingParams consumer(String),"[80, 83]","{'A14': [(80, 80)], 'A1': [(81, 83)]}","{'A14': 0.25, 'A1': 0.75}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public XPendingParams consumer(String consumer) {
    this.consumer = from(consumer);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,consumer,XPendingParams consumer(byte[]),"[85, 88]","{'A14': [(87, 88)], 'A1': [(85, 86)]}","{'A14': 0.5, 'A1': 0.5}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  public XPendingParams consumer(byte[] consumer) {
    this.consumer = from(consumer);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,addParams,void addParams(CommandArguments),"[90, 107]","{'A14': [(90, 90), (97, 98), (100, 101), (103, 104), (106, 107)], 'A1': [(91, 96), (99, 99), (102, 102), (105, 105)]}","{'A14': 0.5, 'A1': 0.5}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (count == null) {
      throw new IllegalArgumentException(""start, end and count must be set."");
    }
    if (start == null) start = from(""-"");
    if (end == null) end = from(""+"");

    if (idle != null) {
      args.add(Keyword.IDLE).add(idle);
    }

    args.add(start).add(end).add(count);

    if (consumer != null) {
      args.add(consumer);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,equals,boolean equals(Object),"[109, 115]","{'A17': [(109, 115)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    XPendingParams that = (XPendingParams) o;
    return Objects.equals(idle, that.idle) && Objects.equals(start, that.start) && Objects.equals(end, that.end) && Objects.equals(count, that.count) && Objects.equals(consumer, that.consumer);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XPendingParams.java,XPendingParams,hashCode,int hashCode(),"[117, 120]","{'A17': [(117, 120)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XPendingParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(idle, start, end, count, consumer);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,geoSearchParam,GeoSearchParam geoSearchParam(),"[33, 33]","{'A12': [(33, 33)]}",{'A12': 1.0},A12,,"  public static GeoSearchParam geoSearchParam() { return new GeoSearchParam(); }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,fromMember,GeoSearchParam fromMember(String),"[35, 39]","{'A12': [(35, 39)]}",{'A12': 1.0},A12,,"  public GeoSearchParam fromMember(String member) {
    this.fromMember = true;
    this.member = member;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,fromLonLat,"GeoSearchParam fromLonLat(double,double)","[41, 45]","{'A12': [(41, 45)]}",{'A12': 1.0},A12,,"  public GeoSearchParam fromLonLat(double longitude, double latitude) {
    this.fromLonLat = true;
    this.coord = new GeoCoordinate(longitude, latitude);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,fromLonLat,GeoSearchParam fromLonLat(GeoCoordinate),"[47, 51]","{'A12': [(47, 51)]}",{'A12': 1.0},A12,,"  public GeoSearchParam fromLonLat(GeoCoordinate coord) {
    this.fromLonLat = true;
    this.coord = coord;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,byRadius,"GeoSearchParam byRadius(double,GeoUnit)","[54, 59]","{'A12': [(54, 59)]}",{'A12': 1.0},A12,,"  public GeoSearchParam byRadius(double radius, GeoUnit unit){
    this.byRadius = true;
    this.radius = radius;
    this.unit = unit;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,byBox,"GeoSearchParam byBox(double,double,GeoUnit)","[61, 67]","{'A12': [(61, 67)]}",{'A12': 1.0},A12,,"  public GeoSearchParam byBox(double width, double height, GeoUnit unit){
    this.byBox = true;
    this.width = width;
    this.height = height;
    this.unit = unit;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,withCoord,GeoSearchParam withCoord(),"[69, 72]","{'A12': [(69, 72)]}",{'A12': 1.0},A12,,"  public GeoSearchParam withCoord() {
    withCoord = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,withDist,GeoSearchParam withDist(),"[74, 77]","{'A12': [(74, 77)]}",{'A12': 1.0},A12,,"  public GeoSearchParam withDist() {
    withDist = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,withHash,GeoSearchParam withHash(),"[79, 82]","{'A12': [(79, 82)]}",{'A12': 1.0},A12,,"  public GeoSearchParam withHash() {
    withHash = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,asc,GeoSearchParam asc(),"[84, 86]","{'A12': [(84, 84), (86, 86)], 'A1': [(85, 85)]}","{'A12': 0.6666666666666666, 'A1': 0.3333333333333333}",A12,,"  public GeoSearchParam asc() {
    return sortingOrder(SortingOrder.ASC);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,desc,GeoSearchParam desc(),"[88, 90]","{'A12': [(88, 88)], 'A1': [(89, 90)]}","{'A12': 0.3333333333333333, 'A1': 0.6666666666666666}",A1,,"  public GeoSearchParam desc() {
    return sortingOrder(SortingOrder.DESC);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,sortingOrder,GeoSearchParam sortingOrder(SortingOrder),"[92, 95]","{'A12': [(94, 95)], 'A1': [(92, 93)]}","{'A12': 0.5, 'A1': 0.5}",A12,,"  public GeoSearchParam sortingOrder(SortingOrder order) {
    sortingOrder = order;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,count,GeoSearchParam count(int),"[97, 100]","{'A12': [(97, 97), (100, 100)], 'A1': [(98, 99)]}","{'A12': 0.5, 'A1': 0.5}",A12,,"  public GeoSearchParam count(int count) {
    this.count = count;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,count,"GeoSearchParam count(int,boolean)","[102, 106]","{'A12': [(102, 102)], 'A1': [(103, 106)]}","{'A12': 0.2, 'A1': 0.8}",A1,,"  public GeoSearchParam count(int count, boolean any) {
    this.count = count;
    this.any = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,any,GeoSearchParam any(),"[108, 114]","{'A12': [(111, 111), (113, 114)], 'A1': [(108, 110), (112, 112)]}","{'A12': 0.42857142857142855, 'A1': 0.5714285714285714}",A1,,"  public GeoSearchParam any() {
    if (this.count == null) {
      throw new IllegalArgumentException(""COUNT must be set before ANY to be set"");
    }
    this.any = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoSearchParam.java,GeoSearchParam,addParams,void addParams(CommandArguments),"[116, 158]","{'A12': [(116, 117), (126, 127), (136, 138), (140, 141), (143, 144), (146, 148), (150, 150), (152, 154), (157, 158)], 'A1': [(118, 125), (128, 135), (139, 139), (142, 142), (145, 145), (149, 149), (151, 151), (155, 156)]}","{'A12': 0.46511627906976744, 'A1': 0.5348837209302325}",A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (fromMember && fromLonLat) {
      throw new IllegalArgumentException(""Both FROMMEMBER and FROMLONLAT cannot be used."");
    } else if (fromMember) {
      args.add(Keyword.FROMMEMBER).add(member);
    } else if (fromLonLat) {
      args.add(Keyword.FROMLONLAT).add(coord.getLongitude()).add(coord.getLatitude());
    } else {
      throw new IllegalArgumentException(""Either FROMMEMBER or FROMLONLAT must be used."");
    }

    if (byRadius && byBox) {
      throw new IllegalArgumentException(""Both BYRADIUS and BYBOX cannot be used."");
    } else if (byRadius) {
      args.add(Keyword.BYRADIUS).add(radius).add(unit);
    } else if (byBox) {
      args.add(Keyword.BYBOX).add(width).add(height).add(unit);
    } else {
      throw new IllegalArgumentException(""Either BYRADIUS or BYBOX must be used."");
    }

    if (withCoord) {
      args.add(Keyword.WITHCOORD);
    }
    if (withDist) {
      args.add(Keyword.WITHDIST);
    }
    if (withHash) {
      args.add(Keyword.WITHHASH);
    }

    if (count != null) {
      args.add(Keyword.COUNT).add(count);
      if (any) {
        args.add(Keyword.ANY);
      }
    }

    if (sortingOrder != null) {
      args.add(sortingOrder);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoAddParams.java,GeoAddParams,geoAddParams,GeoAddParams geoAddParams(),"[17, 19]","{'A14': [(17, 19)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java,"  public static GeoAddParams geoAddParams() {
    return new GeoAddParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoAddParams.java,GeoAddParams,nx,GeoAddParams nx(),"[25, 28]","{'A14': [(25, 25), (27, 28)], 'A1': [(26, 26)]}","{'A14': 0.75, 'A1': 0.25}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java,"  public GeoAddParams nx() {
    this.nx = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoAddParams.java,GeoAddParams,xx,GeoAddParams xx(),"[34, 37]","{'A14': [(34, 34), (36, 37)], 'A1': [(35, 35)]}","{'A14': 0.75, 'A1': 0.25}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java,"  public GeoAddParams xx() {
    this.xx = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoAddParams.java,GeoAddParams,ch,GeoAddParams ch(),"[44, 47]","{'A14': [(44, 44), (46, 47)], 'A1': [(45, 45)]}","{'A14': 0.75, 'A1': 0.25}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java,"  public GeoAddParams ch() {
    this.ch = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoAddParams.java,GeoAddParams,addParams,void addParams(CommandArguments),"[49, 60]","{'A14': [(55, 56), (59, 60)], 'A1': [(49, 54), (57, 58)]}","{'A14': 0.3333333333333333, 'A1': 0.6666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (nx) {
      args.add(Keyword.NX);
    } else if (xx) {
      args.add(Keyword.XX);
    }

    if (ch) {
      args.add(Keyword.CH);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoAddParams.java,GeoAddParams,equals,boolean equals(Object),"[62, 68]","{'A17': [(62, 68)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    GeoAddParams that = (GeoAddParams) o;
    return nx == that.nx && xx == that.xx && ch == that.ch;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/GeoAddParams.java,GeoAddParams,hashCode,int hashCode(),"[70, 73]","{'A17': [(70, 73)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/GeoAddParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(nx, xx, ch);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/FailoverParams.java,FailoverParams,failoverParams,FailoverParams failoverParams(),"[17, 19]","{'A1': [(17, 19)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java,"  public static FailoverParams failoverParams() {
    return new FailoverParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/FailoverParams.java,FailoverParams,to,"FailoverParams to(String,int)","[21, 23]","{'A1': [(21, 23)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java,"  public FailoverParams to(String host, int port) {
    return to(new HostAndPort(host, port));
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/FailoverParams.java,FailoverParams,to,FailoverParams to(HostAndPort),"[25, 28]","{'A1': [(25, 28)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java,"  public FailoverParams to(HostAndPort to) {
    this.to = to;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/FailoverParams.java,FailoverParams,force,FailoverParams force(),"[35, 38]","{'A1': [(35, 38)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java,"  public FailoverParams force() {
    this.force = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/FailoverParams.java,FailoverParams,timeout,FailoverParams timeout(long),"[40, 43]","{'A1': [(40, 43)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java,"  public FailoverParams timeout(long timeout) {
    this.timeout = timeout;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/FailoverParams.java,FailoverParams,addParams,void addParams(CommandArguments),"[45, 63]","{'A1': [(45, 63)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {

    if (to != null) {
      args.add(Keyword.TO).add(to.getHost()).add(to.getPort());
    }

    if (force) {
      if (to == null || timeout == null) {
        throw new IllegalArgumentException(""FAILOVER with force option requires both a timeout and target HOST and IP."");
      }
      args.add(Keyword.FORCE);
    }

    if (timeout != null) {
      args.add(Keyword.TIMEOUT).add(timeout);
    }

  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/FailoverParams.java,FailoverParams,equals,boolean equals(Object),"[65, 71]","{'A17': [(65, 71)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    FailoverParams that = (FailoverParams) o;
    return force == that.force && Objects.equals(to, that.to) && Objects.equals(timeout, that.timeout);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/FailoverParams.java,FailoverParams,hashCode,int hashCode(),"[73, 76]","{'A17': [(73, 76)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/FailoverParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(to, force, timeout);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,xAddParams,XAddParams xAddParams(),"[28, 30]","{'A14': [(28, 30)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public static XAddParams xAddParams() {
    return new XAddParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,noMkStream,XAddParams noMkStream(),"[32, 35]","{'A14': [(32, 35)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams noMkStream() {
    this.nomkstream = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,id,XAddParams id(byte[]),"[37, 40]","{'A14': [(39, 40)], 'A1': [(37, 38)]}","{'A14': 0.5, 'A1': 0.5}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams id(byte[] id) {
    this.id = RawableFactory.from(id);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,id,XAddParams id(String),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams id(String id) {
    this.id = RawableFactory.from(id);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,id,XAddParams id(StreamEntryID),"[47, 49]","{'A1': [(47, 49)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams id(StreamEntryID id) {
    return id(id.toString());
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,id,"XAddParams id(long,long)","[51, 53]","{'A1': [(51, 53)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams id(long time, long sequence) {
    return id(time + ""-"" + sequence);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,id,XAddParams id(long),"[55, 57]","{'A1': [(55, 57)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams id(long time) {
    return id(time + ""-*"");
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,maxLen,XAddParams maxLen(long),"[59, 62]","{'A14': [(59, 62)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams maxLen(long maxLen) {
    this.maxLen = maxLen;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,minId,XAddParams minId(String),"[64, 67]","{'A14': [(64, 67)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams minId(String minId) {
    this.minId = minId;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,approximateTrimming,XAddParams approximateTrimming(),"[69, 72]","{'A14': [(69, 72)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams approximateTrimming() {
    this.approximateTrimming = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,exactTrimming,XAddParams exactTrimming(),"[74, 77]","{'A14': [(74, 77)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams exactTrimming() {
    this.exactTrimming = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,limit,XAddParams limit(long),"[79, 82]","{'A14': [(79, 82)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  public XAddParams limit(long limit) {
    this.limit = limit;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,addParams,void addParams(CommandArguments),"[84, 118]","{'A14': [(87, 87), (89, 89), (91, 91), (93, 94), (96, 96), (98, 99), (101, 101), (103, 104), (106, 106), (108, 109), (111, 113), (115, 116), (118, 118)], 'A1': [(84, 86), (88, 88), (90, 90), (92, 92), (95, 95), (97, 97), (100, 100), (102, 102), (105, 105), (107, 107), (110, 110), (114, 114), (117, 117)]}","{'A14': 0.5714285714285714, 'A1': 0.42857142857142855}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {

    if (nomkstream) {
      args.add(Keyword.NOMKSTREAM);
    }

    if (maxLen != null) {
      args.add(Keyword.MAXLEN);

      if (approximateTrimming) {
        args.add(Protocol.BYTES_TILDE);
      } else if (exactTrimming) {
        args.add(Protocol.BYTES_EQUAL);
      }

      args.add(maxLen);
    } else if (minId != null) {
      args.add(Keyword.MINID);

      if (approximateTrimming) {
        args.add(Protocol.BYTES_TILDE);
      } else if (exactTrimming) {
        args.add(Protocol.BYTES_EQUAL);
      }

      args.add(minId);
    }

    if (limit != null) {
      args.add(Keyword.LIMIT).add(limit);
    }

    args.add(id != null ? id : StreamEntryID.NEW_ENTRY);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,equals,boolean equals(Object),"[120, 126]","{'A17': [(120, 126)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    XAddParams that = (XAddParams) o;
    return approximateTrimming == that.approximateTrimming && exactTrimming == that.exactTrimming && nomkstream == that.nomkstream && Objects.equals(id, that.id) && Objects.equals(maxLen, that.maxLen) && Objects.equals(minId, that.minId) && Objects.equals(limit, that.limit);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XAddParams.java,XAddParams,hashCode,int hashCode(),"[128, 131]","{'A17': [(128, 131)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XAddParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(id, maxLen, approximateTrimming, exactTrimming, nomkstream, minId, limit);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZIncrByParams.java,ZIncrByParams,zIncrByParams,ZIncrByParams zIncrByParams(),"[25, 27]","{'A7': [(25, 27)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ZIncrByParamsTest.java,"  public static ZIncrByParams zIncrByParams() {
    return new ZIncrByParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZIncrByParams.java,ZIncrByParams,nx,ZIncrByParams nx(),"[33, 36]","{'A1': [(34, 34)], 'A7': [(33, 33), (35, 36)]}","{'A1': 0.25, 'A7': 0.75}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ZIncrByParamsTest.java,"  public ZIncrByParams nx() {
    this.existance = Keyword.NX;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZIncrByParams.java,ZIncrByParams,xx,ZIncrByParams xx(),"[42, 45]","{'A1': [(43, 43)], 'A7': [(42, 42), (44, 45)]}","{'A1': 0.25, 'A7': 0.75}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ZIncrByParamsTest.java,"  public ZIncrByParams xx() {
    this.existance = Keyword.XX;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZIncrByParams.java,ZIncrByParams,addParams,void addParams(CommandArguments),"[47, 54]","{'A1': [(47, 50), (53, 53)], 'A7': [(51, 52), (54, 54)]}","{'A1': 0.625, 'A7': 0.375}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZIncrByParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (existance != null) {
      args.add(existance);
    }

    args.add(Keyword.INCR);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZIncrByParams.java,ZIncrByParams,equals,boolean equals(Object),"[56, 62]","{'A17': [(56, 62)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ZIncrByParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    ZIncrByParams that = (ZIncrByParams) o;
    return existance == that.existance;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZIncrByParams.java,ZIncrByParams,hashCode,int hashCode(),"[64, 67]","{'A17': [(64, 67)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ZIncrByParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(existance);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java,ShutdownParams,shutdownParams,ShutdownParams shutdownParams(),"[15, 17]","{'A12': [(15, 17)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java,"  public static ShutdownParams shutdownParams() {
    return new ShutdownParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java,ShutdownParams,saveMode,ShutdownParams saveMode(SaveMode),"[19, 22]","{'A12': [(19, 22)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java,"  public ShutdownParams saveMode(SaveMode saveMode) {
    this.saveMode = saveMode;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java,ShutdownParams,nosave,ShutdownParams nosave(),"[24, 26]","{'A12': [(24, 26)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java,"  public ShutdownParams nosave() {
    return this.saveMode(SaveMode.NOSAVE);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java,ShutdownParams,save,ShutdownParams save(),"[28, 30]","{'A12': [(28, 30)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java,"  public ShutdownParams save() {
    return this.saveMode(SaveMode.SAVE);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java,ShutdownParams,now,ShutdownParams now(),"[32, 35]","{'A12': [(32, 35)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java,"  public ShutdownParams now() {
    this.now = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java,ShutdownParams,force,ShutdownParams force(),"[37, 40]","{'A12': [(37, 40)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java,"  public ShutdownParams force() {
    this.force = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java,ShutdownParams,addParams,void addParams(CommandArguments),"[42, 53]","{'A12': [(42, 44), (46, 47), (49, 50), (52, 53)], 'A1': [(45, 45), (48, 48), (51, 51)]}","{'A12': 0.75, 'A1': 0.25}",A12,../projects/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (this.saveMode != null) {
      args.add(saveMode);
    }
    if (this.now) {
      args.add(Keyword.NOW);
    }
    if (this.force) {
      args.add(Keyword.FORCE);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java,ShutdownParams,equals,boolean equals(Object),"[55, 61]","{'A17': [(55, 61)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    ShutdownParams that = (ShutdownParams) o;
    return now == that.now && force == that.force && saveMode == that.saveMode;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ShutdownParams.java,ShutdownParams,hashCode,int hashCode(),"[63, 66]","{'A17': [(63, 66)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ShutdownParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(saveMode, now, force);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ScanParams.java,ScanParams,match,ScanParams match(byte[]),"[23, 26]","{'A55': [(24, 24)], 'A7': [(23, 23), (25, 26)]}","{'A55': 0.25, 'A7': 0.75}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java,"  public ScanParams match(final byte[] pattern) {
    params.put(MATCH, ByteBuffer.wrap(pattern));
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ScanParams.java,ScanParams,match,ScanParams match(String),"[31, 34]","{'A55': [(32, 32)], 'A7': [(31, 31), (33, 34)]}","{'A55': 0.25, 'A7': 0.75}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java,"  public ScanParams match(final String pattern) {
    params.put(MATCH, ByteBuffer.wrap(SafeEncoder.encode(pattern)));
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ScanParams.java,ScanParams,count,ScanParams count(Integer),"[39, 42]","{'A1': [(40, 40)], 'A55': [(39, 39)], 'A7': [(41, 42)]}","{'A1': 0.25, 'A55': 0.25, 'A7': 0.5}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java,"  public ScanParams count(final Integer count) {
    params.put(Keyword.COUNT, ByteBuffer.wrap(Protocol.toByteArray(count)));
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ScanParams.java,ScanParams,addParams,void addParams(CommandArguments),"[44, 50]","{'A1': [(44, 45), (47, 48)], 'A55': [(46, 46), (49, 50)]}","{'A1': 0.5714285714285714, 'A55': 0.42857142857142855}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    for (Map.Entry<Keyword, ByteBuffer> param : params.entrySet()) {
      args.add(param.getKey());
      args.add(param.getValue().array());
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ScanParams.java,ScanParams,binaryMatch,byte[] binaryMatch(),"[52, 58]","{'A1': [(52, 58)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java,"  public byte[] binaryMatch() {
    if (params.containsKey(MATCH)) {
      return params.get(MATCH).array();
    } else {
      return null;
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ScanParams.java,ScanParams,match,String match(),"[60, 66]","{'A1': [(60, 60)], 'A55': [(61, 66)]}","{'A1': 0.14285714285714285, 'A55': 0.8571428571428571}",A55,../projects/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java,"  public String match() {
    if (params.containsKey(MATCH)) {
      return new String(params.get(MATCH).array());
    } else {
      return null;
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ScanParams.java,ScanParams,equals,boolean equals(Object),"[68, 74]","{'A17': [(68, 74)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    ScanParams that = (ScanParams) o;
    return Objects.equals(params, that.params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ScanParams.java,ScanParams,hashCode,int hashCode(),"[76, 79]","{'A17': [(76, 79)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ScanParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ModuleLoadExParams.java,ModuleLoadExParams,moduleLoadexParams,ModuleLoadExParams moduleLoadexParams(),"[19, 21]","{'A1': [(19, 21)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ModuleLoadExParamsTest.java,"  public ModuleLoadExParams moduleLoadexParams() {
    return new ModuleLoadExParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ModuleLoadExParams.java,ModuleLoadExParams,config,"ModuleLoadExParams config(String,String)","[23, 26]","{'A1': [(23, 26)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ModuleLoadExParamsTest.java,"  public ModuleLoadExParams config(String name, String value) {
    this.configs.add(KeyValue.of(name, value));
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ModuleLoadExParams.java,ModuleLoadExParams,arg,ModuleLoadExParams arg(String),"[28, 31]","{'A1': [(28, 31)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ModuleLoadExParamsTest.java,"  public ModuleLoadExParams arg(String arg) {
    this.args.add(arg);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ModuleLoadExParams.java,ModuleLoadExParams,addParams,void addParams(CommandArguments),"[33, 41]","{'A1': [(33, 41)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ModuleLoadExParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {

    this.configs.forEach(kv -> args.add(Keyword.CONFIG).add(kv.getKey()).add(kv.getValue()));

    if (!this.args.isEmpty()) {
      args.add(Keyword.ARGS).addObjects(this.args);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ModuleLoadExParams.java,ModuleLoadExParams,equals,boolean equals(Object),"[43, 49]","{'A17': [(43, 49)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ModuleLoadExParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    ModuleLoadExParams that = (ModuleLoadExParams) o;
    return Objects.equals(configs, that.configs) && Objects.equals(args, that.args);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ModuleLoadExParams.java,ModuleLoadExParams,hashCode,int hashCode(),"[51, 54]","{'A17': [(51, 54)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ModuleLoadExParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(configs, args);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XClaimParams.java,XClaimParams,xClaimParams,XClaimParams xClaimParams(),"[18, 20]","{'A14': [(19, 20)], 'A1': [(18, 18)]}","{'A14': 0.6666666666666666, 'A1': 0.3333333333333333}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java,"  public static XClaimParams xClaimParams() {
    return new XClaimParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XClaimParams.java,XClaimParams,idle,XClaimParams idle(long),"[27, 30]","{'A14': [(27, 27), (29, 30)], 'A1': [(28, 28)]}","{'A14': 0.75, 'A1': 0.25}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java,"  public XClaimParams idle(long idleTime) {
    this.idleTime = idleTime;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XClaimParams.java,XClaimParams,time,XClaimParams time(long),"[37, 40]","{'A14': [(37, 37), (39, 40)], 'A1': [(38, 38)]}","{'A14': 0.75, 'A1': 0.25}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java,"  public XClaimParams time(long idleUnixTime) {
    this.idleUnixTime = idleUnixTime;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XClaimParams.java,XClaimParams,retryCount,XClaimParams retryCount(int),"[47, 50]","{'A14': [(47, 47), (49, 50)], 'A1': [(48, 48)]}","{'A14': 0.75, 'A1': 0.25}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java,"  public XClaimParams retryCount(int count) {
    this.retryCount = count;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XClaimParams.java,XClaimParams,force,XClaimParams force(),"[57, 60]","{'A14': [(57, 57), (59, 60)], 'A1': [(58, 58)]}","{'A14': 0.75, 'A1': 0.25}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java,"  public XClaimParams force() {
    this.force = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XClaimParams.java,XClaimParams,addParams,void addParams(CommandArguments),"[62, 76]","{'A1': [(62, 76)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (idleTime != null) {
      args.add(Keyword.IDLE).add(idleTime);
    }
    if (idleUnixTime != null) {
      args.add(Keyword.TIME).add(idleUnixTime);
    }
    if (retryCount != null) {
      args.add(Keyword.RETRYCOUNT).add(retryCount);
    }
    if (force) {
      args.add(Keyword.FORCE);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XClaimParams.java,XClaimParams,equals,boolean equals(Object),"[78, 84]","{'A17': [(78, 84)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    XClaimParams that = (XClaimParams) o;
    return force == that.force && Objects.equals(idleTime, that.idleTime) && Objects.equals(idleUnixTime, that.idleUnixTime) && Objects.equals(retryCount, that.retryCount);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XClaimParams.java,XClaimParams,hashCode,int hashCode(),"[86, 89]","{'A17': [(86, 89)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XClaimParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(idleTime, idleUnixTime, retryCount, force);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,by,SortingParams by(String),"[31, 33]","{'A7': [(31, 33)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams by(final String pattern) {
    return by(SafeEncoder.encode(pattern));
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,by,SortingParams by(byte[]),"[47, 51]","{'A1': [(48, 48)], 'A7': [(47, 47), (49, 51)]}","{'A1': 0.2, 'A7': 0.8}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams by(final byte[] pattern) {
    params.add(Keyword.BY);
    params.add(pattern);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,nosort,SortingParams nosort(),"[60, 64]","{'A1': [(61, 62)], 'A7': [(60, 60), (63, 64)]}","{'A1': 0.4, 'A7': 0.6}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams nosort() {
    params.add(Keyword.BY);
    params.add(Keyword.NOSORT);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,desc,SortingParams desc(),"[70, 72]","{'A1': [(71, 71)], 'A7': [(70, 70), (72, 72)]}","{'A1': 0.3333333333333333, 'A7': 0.6666666666666666}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams desc() {
    return sortingOrder(SortingOrder.DESC);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,asc,SortingParams asc(),"[78, 80]","{'A1': [(79, 80)], 'A7': [(78, 78)]}","{'A1': 0.6666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams asc() {
    return sortingOrder(SortingOrder.ASC);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,sortingOrder,SortingParams sortingOrder(SortingOrder),"[87, 90]","{'A1': [(87, 88)], 'A7': [(89, 90)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams sortingOrder(SortingOrder order) {
    params.add(order.getRaw());
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,limit,"SortingParams limit(int,int)","[98, 103]","{'A1': [(99, 101)], 'A7': [(98, 98), (102, 103)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams limit(final int start, final int count) {
    params.add(Keyword.LIMIT);
    params.add(start);
    params.add(count);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,alpha,SortingParams alpha(),"[110, 113]","{'A1': [(111, 111)], 'A7': [(110, 110), (112, 113)]}","{'A1': 0.25, 'A7': 0.75}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams alpha() {
    params.add(Keyword.ALPHA);
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,get,SortingParams get(),"[129, 135]","{'A1': [(131, 132)], 'A57': [(133, 133)], 'A7': [(129, 130), (134, 135)]}","{'A1': 0.2857142857142857, 'A57': 0.14285714285714285, 'A7': 0.5714285714285714}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams get(String... patterns) {
    for (final String pattern : patterns) {
      params.add(Keyword.GET);
      params.add(pattern);
    }
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,get,SortingParams get(),"[151, 157]","{'A1': [(153, 153)], 'A7': [(151, 152), (154, 154), (156, 157)], 'A52': [(155, 155)]}","{'A1': 0.14285714285714285, 'A7': 0.7142857142857143, 'A52': 0.14285714285714285}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  public SortingParams get(byte[]... patterns) {
    for (final byte[] pattern : patterns) {
      params.add(Keyword.GET);
      params.add(pattern);
    }
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,addParams,void addParams(CommandArguments),"[159, 162]","{'A1': [(159, 162)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    args.addObjects(params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,equals,boolean equals(Object),"[164, 170]","{'A17': [(164, 170)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    SortingParams that = (SortingParams) o;
    return Objects.equals(params, that.params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/SortingParams.java,SortingParams,hashCode,int hashCode(),"[172, 175]","{'A17': [(172, 175)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/SortingParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(params);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java,ZAddParams,zAddParams,ZAddParams zAddParams(),"[17, 19]","{'A7': [(17, 19)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java,"  public static ZAddParams zAddParams() {
    return new ZAddParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java,ZAddParams,nx,ZAddParams nx(),"[25, 28]","{'A7': [(25, 25), (27, 28)], 'A53': [(26, 26)]}","{'A7': 0.75, 'A53': 0.25}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java,"  public ZAddParams nx() {
    this.existence = Keyword.NX;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java,ZAddParams,xx,ZAddParams xx(),"[34, 37]","{'A7': [(34, 34), (36, 37)], 'A53': [(35, 35)]}","{'A7': 0.75, 'A53': 0.25}",A7,../projects/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java,"  public ZAddParams xx() {
    this.existence = Keyword.XX;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java,ZAddParams,gt,ZAddParams gt(),"[43, 46]","{'A1': [(43, 44)], 'A7': [(45, 46)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java,"  public ZAddParams gt() {
    this.comparison = Keyword.GT;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java,ZAddParams,lt,ZAddParams lt(),"[52, 55]","{'A1': [(52, 53)], 'A14': [(54, 55)]}","{'A1': 0.5, 'A14': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java,"  public ZAddParams lt() {
    this.comparison = Keyword.LT;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java,ZAddParams,ch,ZAddParams ch(),"[62, 65]","{'A1': [(62, 63)], 'A14': [(64, 65)]}","{'A1': 0.5, 'A14': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java,"  public ZAddParams ch() {
    this.change = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java,ZAddParams,addParams,void addParams(CommandArguments),"[67, 78]","{'A1': [(67, 68), (72, 73), (75, 76)], 'A7': [(71, 71), (78, 78)], 'A53': [(69, 70)], 'A14': [(74, 74), (77, 77)]}","{'A1': 0.5, 'A7': 0.16666666666666666, 'A53': 0.16666666666666666, 'A14': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (existence != null) {
      args.add(existence);
    }
    if (comparison != null) {
      args.add(comparison);
    }
    if (change) {
      args.add(Keyword.CH);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java,ZAddParams,equals,boolean equals(Object),"[80, 86]","{'A17': [(80, 86)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    ZAddParams that = (ZAddParams) o;
    return change == that.change && existence == that.existence && comparison == that.comparison;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/ZAddParams.java,ZAddParams,hashCode,int hashCode(),"[88, 91]","{'A17': [(88, 91)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/ZAddParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(existence, comparison, change);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java,XTrimParams,xTrimParams,XTrimParams xTrimParams(),"[21, 23]","{'A14': [(21, 23)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java,"  public static XTrimParams xTrimParams() {
    return new XTrimParams();
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java,XTrimParams,maxLen,XTrimParams maxLen(long),"[26, 29]","{'A14': [(26, 29)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java,"  public XTrimParams maxLen(long maxLen) {
    this.maxLen = maxLen;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java,XTrimParams,minId,XTrimParams minId(String),"[31, 34]","{'A14': [(31, 34)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java,"  public XTrimParams minId(String minId) {
    this.minId = minId;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java,XTrimParams,approximateTrimming,XTrimParams approximateTrimming(),"[36, 39]","{'A14': [(36, 39)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java,"  public XTrimParams approximateTrimming() {
    this.approximateTrimming = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java,XTrimParams,exactTrimming,XTrimParams exactTrimming(),"[41, 44]","{'A14': [(41, 44)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java,"  public XTrimParams exactTrimming() {
    this.exactTrimming = true;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java,XTrimParams,limit,XTrimParams limit(long),"[46, 49]","{'A14': [(46, 49)]}",{'A14': 1.0},A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java,"  public XTrimParams limit(long limit) {
    this.limit = limit;
    return this;
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java,XTrimParams,addParams,void addParams(CommandArguments),"[51, 78]","{'A14': [(53, 53), (55, 56), (58, 58), (60, 61), (63, 63), (65, 66), (68, 68), (70, 71), (73, 75), (77, 78)], 'A1': [(51, 52), (54, 54), (57, 57), (59, 59), (62, 62), (64, 64), (67, 67), (69, 69), (72, 72), (76, 76)]}","{'A14': 0.6071428571428571, 'A1': 0.39285714285714285}",A14,../projects/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java,"  @Override
  public void addParams(CommandArguments args) {
    if (maxLen != null) {
      args.add(Keyword.MAXLEN);

      if (approximateTrimming) {
        args.add(Protocol.BYTES_TILDE);
      } else if (exactTrimming) {
        args.add(Protocol.BYTES_EQUAL);
      }

      args.add(Protocol.toByteArray(maxLen));
    } else if (minId != null) {
      args.add(Keyword.MINID);

      if (approximateTrimming) {
        args.add(Protocol.BYTES_TILDE);
      } else if (exactTrimming) {
        args.add(Protocol.BYTES_EQUAL);
      }

      args.add(minId);
    }

    if (limit != null) {
      args.add(Keyword.LIMIT).add(limit);
    }
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java,XTrimParams,equals,boolean equals(Object),"[80, 86]","{'A17': [(80, 86)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java,"  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    XTrimParams that = (XTrimParams) o;
    return approximateTrimming == that.approximateTrimming && exactTrimming == that.exactTrimming && Objects.equals(maxLen, that.maxLen) && Objects.equals(minId, that.minId) && Objects.equals(limit, that.limit);
  }
"
redis.clients.jedis.params,../projects/jedis/src/main/java/redis/clients/jedis/params/XTrimParams.java,XTrimParams,hashCode,int hashCode(),"[88, 91]","{'A17': [(88, 91)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/params/XTrimParamsTest.java,"  @Override
  public int hashCode() {
    return Objects.hash(maxLen, approximateTrimming, exactTrimming, minId, limit);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getClusterConfigs,ClusterConfig[] getClusterConfigs(),"[116, 118]","{'A49': [(116, 118)]}",{'A49': 1.0},A49,,"    public ClusterConfig[] getClusterConfigs() {
        return clusterConfigs;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getRetryMaxAttempts,int getRetryMaxAttempts(),"[120, 122]","{'A49': [(120, 122)]}",{'A49': 1.0},A49,,"    public int getRetryMaxAttempts() {
        return retryMaxAttempts;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getRetryWaitDuration,Duration getRetryWaitDuration(),"[124, 126]","{'A49': [(124, 126)]}",{'A49': 1.0},A49,,"    public Duration getRetryWaitDuration() {
        return retryWaitDuration;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getRetryWaitDurationExponentialBackoffMultiplier,int getRetryWaitDurationExponentialBackoffMultiplier(),"[128, 130]","{'A49': [(128, 130)]}",{'A49': 1.0},A49,,"    public int getRetryWaitDurationExponentialBackoffMultiplier() {
        return retryWaitDurationExponentialBackoffMultiplier;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getCircuitBreakerFailureRateThreshold,float getCircuitBreakerFailureRateThreshold(),"[132, 134]","{'A49': [(132, 134)]}",{'A49': 1.0},A49,,"    public float getCircuitBreakerFailureRateThreshold() {
        return circuitBreakerFailureRateThreshold;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getCircuitBreakerSlidingWindowMinCalls,int getCircuitBreakerSlidingWindowMinCalls(),"[136, 138]","{'A49': [(136, 138)]}",{'A49': 1.0},A49,,"    public int getCircuitBreakerSlidingWindowMinCalls() {
        return circuitBreakerSlidingWindowMinCalls;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getCircuitBreakerSlidingWindowSize,int getCircuitBreakerSlidingWindowSize(),"[140, 142]","{'A49': [(140, 142)]}",{'A49': 1.0},A49,,"    public int getCircuitBreakerSlidingWindowSize() {
        return circuitBreakerSlidingWindowSize;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getCircuitBreakerSlowCallDurationThreshold,Duration getCircuitBreakerSlowCallDurationThreshold(),"[144, 146]","{'A49': [(144, 146)]}",{'A49': 1.0},A49,,"    public Duration getCircuitBreakerSlowCallDurationThreshold() {
        return circuitBreakerSlowCallDurationThreshold;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getCircuitBreakerSlowCallRateThreshold,float getCircuitBreakerSlowCallRateThreshold(),"[148, 150]","{'A49': [(148, 150)]}",{'A49': 1.0},A49,,"    public float getCircuitBreakerSlowCallRateThreshold() {
        return circuitBreakerSlowCallRateThreshold;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getRetryIncludedExceptionList,List<Class> getRetryIncludedExceptionList(),"[152, 154]","{'A49': [(152, 154)]}",{'A49': 1.0},A49,,"    public List<Class> getRetryIncludedExceptionList() {
        return retryIncludedExceptionList;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getRetryIgnoreExceptionList,List<Class> getRetryIgnoreExceptionList(),"[156, 158]","{'A49': [(156, 158)]}",{'A49': 1.0},A49,,"    public List<Class> getRetryIgnoreExceptionList() {
        return retryIgnoreExceptionList;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getCircuitBreakerIncludedExceptionList,List<Class> getCircuitBreakerIncludedExceptionList(),"[160, 162]","{'A49': [(160, 162)]}",{'A49': 1.0},A49,,"    public List<Class> getCircuitBreakerIncludedExceptionList() {
        return circuitBreakerIncludedExceptionList;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getCircuitBreakerIgnoreExceptionList,List<Class> getCircuitBreakerIgnoreExceptionList(),"[164, 166]","{'A49': [(164, 166)]}",{'A49': 1.0},A49,,"    public List<Class> getCircuitBreakerIgnoreExceptionList() {
        return circuitBreakerIgnoreExceptionList;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getCircuitBreakerSlidingWindowType,SlidingWindowType getCircuitBreakerSlidingWindowType(),"[168, 170]","{'A49': [(168, 170)]}",{'A49': 1.0},A49,,"    public SlidingWindowType getCircuitBreakerSlidingWindowType() {
        return circuitBreakerSlidingWindowType;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig,getFallbackExceptionList,List<Class<? extends Throwable>> getFallbackExceptionList(),"[172, 174]","{'A1': [(172, 174)]}",{'A1': 1.0},A1,,"    public List<Class<? extends Throwable>> getFallbackExceptionList() {
        return fallbackExceptionList;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.ClusterConfig,getPriority,int getPriority(),"[195, 197]","{'A49': [(195, 197)]}",{'A49': 1.0},A49,,"        public int getPriority() {
            return priority;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.ClusterConfig,setPriority,void setPriority(int),"[199, 201]","{'A49': [(199, 201)]}",{'A49': 1.0},A49,,"        private void setPriority(int priority) {
            this.priority = priority;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.ClusterConfig,getHostAndPort,HostAndPort getHostAndPort(),"[203, 205]","{'A49': [(203, 205)]}",{'A49': 1.0},A49,,"        public HostAndPort getHostAndPort() {
            return hostAndPort;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.ClusterConfig,getJedisClientConfig,JedisClientConfig getJedisClientConfig(),"[207, 209]","{'A49': [(207, 209)]}",{'A49': 1.0},A49,,"        public JedisClientConfig getJedisClientConfig() {
            return clientConfig;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.ClusterConfig,getConnectionPoolConfig,GenericObjectPoolConfig<Connection> getConnectionPoolConfig(),"[211, 213]","{'A60': [(211, 213)]}",{'A60': 1.0},A60,,"        public GenericObjectPoolConfig<Connection> getConnectionPoolConfig() {
            return connectionPoolConfig;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,retryMaxAttempts,Builder retryMaxAttempts(int),"[251, 254]","{'A49': [(251, 254)]}",{'A49': 1.0},A49,,"        public Builder retryMaxAttempts(int retryMaxAttempts) {
            this.retryMaxAttempts = retryMaxAttempts;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,retryWaitDuration,Builder retryWaitDuration(int),"[256, 259]","{'A49': [(256, 259)]}",{'A49': 1.0},A49,,"        public Builder retryWaitDuration(int retryWaitDuration) {
            this.retryWaitDuration = retryWaitDuration;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,retryWaitDurationExponentialBackoffMultiplier,Builder retryWaitDurationExponentialBackoffMultiplier(int),"[261, 264]","{'A49': [(261, 264)]}",{'A49': 1.0},A49,,"        public Builder retryWaitDurationExponentialBackoffMultiplier(int retryWaitDurationExponentialBackoffMultiplier) {
            this.retryWaitDurationExponentialBackoffMultiplier = retryWaitDurationExponentialBackoffMultiplier;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,retryIncludedExceptionList,Builder retryIncludedExceptionList(List<Class>),"[266, 269]","{'A49': [(266, 269)]}",{'A49': 1.0},A49,,"        public Builder retryIncludedExceptionList(List<Class> retryIncludedExceptionList) {
            this.retryIncludedExceptionList = retryIncludedExceptionList;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,retryIgnoreExceptionList,Builder retryIgnoreExceptionList(List<Class>),"[271, 274]","{'A49': [(271, 274)]}",{'A49': 1.0},A49,,"        public Builder retryIgnoreExceptionList(List<Class> retryIgnoreExceptionList) {
            this.retryIgnoreExceptionList = retryIgnoreExceptionList;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,circuitBreakerFailureRateThreshold,Builder circuitBreakerFailureRateThreshold(float),"[276, 279]","{'A49': [(276, 279)]}",{'A49': 1.0},A49,,"        public Builder circuitBreakerFailureRateThreshold(float circuitBreakerFailureRateThreshold) {
            this.circuitBreakerFailureRateThreshold = circuitBreakerFailureRateThreshold;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,circuitBreakerSlidingWindowMinCalls,Builder circuitBreakerSlidingWindowMinCalls(int),"[281, 284]","{'A49': [(281, 284)]}",{'A49': 1.0},A49,,"        public Builder circuitBreakerSlidingWindowMinCalls(int circuitBreakerSlidingWindowMinCalls) {
            this.circuitBreakerSlidingWindowMinCalls = circuitBreakerSlidingWindowMinCalls;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,circuitBreakerSlidingWindowType,Builder circuitBreakerSlidingWindowType(SlidingWindowType),"[286, 289]","{'A49': [(286, 289)]}",{'A49': 1.0},A49,,"        public Builder circuitBreakerSlidingWindowType(SlidingWindowType circuitBreakerSlidingWindowType) {
            this.circuitBreakerSlidingWindowType = circuitBreakerSlidingWindowType;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,circuitBreakerSlidingWindowSize,Builder circuitBreakerSlidingWindowSize(int),"[291, 294]","{'A49': [(291, 294)]}",{'A49': 1.0},A49,,"        public Builder circuitBreakerSlidingWindowSize(int circuitBreakerSlidingWindowSize) {
            this.circuitBreakerSlidingWindowSize = circuitBreakerSlidingWindowSize;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,circuitBreakerSlowCallDurationThreshold,Builder circuitBreakerSlowCallDurationThreshold(int),"[296, 299]","{'A49': [(296, 299)]}",{'A49': 1.0},A49,,"        public Builder circuitBreakerSlowCallDurationThreshold(int circuitBreakerSlowCallDurationThreshold) {
            this.circuitBreakerSlowCallDurationThreshold = circuitBreakerSlowCallDurationThreshold;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,circuitBreakerSlowCallRateThreshold,Builder circuitBreakerSlowCallRateThreshold(float),"[301, 304]","{'A49': [(301, 304)]}",{'A49': 1.0},A49,,"        public Builder circuitBreakerSlowCallRateThreshold(float circuitBreakerSlowCallRateThreshold) {
            this.circuitBreakerSlowCallRateThreshold = circuitBreakerSlowCallRateThreshold;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,circuitBreakerIncludedExceptionList,Builder circuitBreakerIncludedExceptionList(List<Class>),"[306, 309]","{'A49': [(306, 309)]}",{'A49': 1.0},A49,,"        public Builder circuitBreakerIncludedExceptionList(List<Class> circuitBreakerIncludedExceptionList) {
            this.circuitBreakerIncludedExceptionList = circuitBreakerIncludedExceptionList;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,circuitBreakerIgnoreExceptionList,Builder circuitBreakerIgnoreExceptionList(List<Class>),"[311, 314]","{'A49': [(311, 314)]}",{'A49': 1.0},A49,,"        public Builder circuitBreakerIgnoreExceptionList(List<Class> circuitBreakerIgnoreExceptionList) {
            this.circuitBreakerIgnoreExceptionList = circuitBreakerIgnoreExceptionList;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,circuitBreakerFallbackExceptionList,Builder circuitBreakerFallbackExceptionList(List<Class<? extends Throwable>>),"[319, 322]","{'A49': [(320, 320)], 'A1': [(319, 319), (321, 322)]}","{'A49': 0.25, 'A1': 0.75}",A1,,"        @Deprecated
        public Builder circuitBreakerFallbackExceptionList(List<Class<? extends Throwable>> circuitBreakerFallbackExceptionList) {
            return fallbackExceptionList(circuitBreakerFallbackExceptionList);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,fallbackExceptionList,Builder fallbackExceptionList(List<Class<? extends Throwable>>),"[324, 327]","{'A49': [(326, 327)], 'A1': [(324, 325)]}","{'A49': 0.5, 'A1': 0.5}",A49,,"        public Builder fallbackExceptionList(List<Class<? extends Throwable>> fallbackExceptionList) {
            this.fallbackExceptionList = fallbackExceptionList;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/MultiClusterClientConfig.java,MultiClusterClientConfig.Builder,build,MultiClusterClientConfig build(),"[329, 354]","{'A49': [(329, 335), (337, 337), (339, 346), (348, 348), (350, 350), (352, 354)], 'A1': [(336, 336), (338, 338), (347, 347), (349, 349), (351, 351)]}","{'A49': 0.8076923076923077, 'A1': 0.19230769230769232}",A49,,"        public MultiClusterClientConfig build() {
            MultiClusterClientConfig config = new MultiClusterClientConfig(this.clusterConfigs);

            config.retryMaxAttempts = this.retryMaxAttempts;
            config.retryWaitDuration = Duration.ofMillis(this.retryWaitDuration);
            config.retryWaitDurationExponentialBackoffMultiplier = this.retryWaitDurationExponentialBackoffMultiplier;

            config.retryIncludedExceptionList = this.retryIncludedExceptionList;

            config.retryIgnoreExceptionList = this.retryIgnoreExceptionList;

            config.circuitBreakerFailureRateThreshold = this.circuitBreakerFailureRateThreshold;
            config.circuitBreakerSlidingWindowMinCalls = this.circuitBreakerSlidingWindowMinCalls;
            config.circuitBreakerSlidingWindowType = this.circuitBreakerSlidingWindowType;
            config.circuitBreakerSlidingWindowSize = this.circuitBreakerSlidingWindowSize;
            config.circuitBreakerSlowCallDurationThreshold = Duration.ofMillis(this.circuitBreakerSlowCallDurationThreshold);
            config.circuitBreakerSlowCallRateThreshold = this.circuitBreakerSlowCallRateThreshold;

            config.circuitBreakerIncludedExceptionList = this.circuitBreakerIncludedExceptionList;

            config.circuitBreakerIgnoreExceptionList = this.circuitBreakerIgnoreExceptionList;

            config.fallbackExceptionList = this.fallbackExceptionList;

            return config;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,toString,String toString(),"[242, 245]","{'A1': [(242, 245)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String toString() {
    return ""Jedis{"" + connection + '}';
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getClient,Connection getClient(),"[248, 250]","{'A1': [(248, 250)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Connection getClient() {
    return getConnection();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getConnection,Connection getConnection(),"[252, 254]","{'A1': [(252, 254)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Connection getConnection() {
    return connection;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,connect,void connect(),"[257, 259]","{'A1': [(257, 259)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public void connect() {
    connection.connect();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,disconnect,void disconnect(),"[264, 266]","{'A1': [(264, 266)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public void disconnect() {
    connection.disconnect();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,isConnected,boolean isConnected(),"[268, 270]","{'A1': [(268, 270)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public boolean isConnected() {
    return connection.isConnected();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,isBroken,boolean isBroken(),"[272, 274]","{'A1': [(272, 274)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public boolean isBroken() {
    return connection.isBroken();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,resetState,void resetState(),"[276, 296]","{'A1': [(276, 296)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public void resetState() {
    if (isConnected()) {
      if (transaction != null) {
        transaction.close();
      }

      if (pipeline != null) {
        pipeline.close();
      }

//      connection.resetState();
      if (isInWatch) {
        connection.sendCommand(UNWATCH);
        connection.getStatusCodeReply();
        isInWatch = false;
      }
    }

    transaction = null;
    pipeline = null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setDataSource,void setDataSource(Pool<Jedis>),"[298, 300]","{'A1': [(298, 300)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  protected void setDataSource(Pool<Jedis> jedisPool) {
    this.dataSource = jedisPool;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,close,void close(),"[302, 315]","{'A1': [(302, 315)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public void close() {
    if (dataSource != null) {
      Pool<Jedis> pool = this.dataSource;
      this.dataSource = null;
      if (isBroken()) {
        pool.returnBrokenResource(this);
      } else {
        pool.returnResource(this);
      }
    } else {
      connection.close();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,multi,Transaction multi(),"[318, 321]","{'A1': [(318, 321)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Transaction multi() {
    transaction = new Transaction(this);
    return transaction;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pipelined,Pipeline pipelined(),"[324, 327]","{'A1': [(324, 327)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Pipeline pipelined() {
    pipeline = new Pipeline(this);
    return pipeline;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,checkIsInMultiOrPipeline,void checkIsInMultiOrPipeline(),"[330, 339]","{'A1': [(330, 339)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  protected void checkIsInMultiOrPipeline() {
//    if (connection.isInMulti()) {
    if (transaction != null) {
      throw new IllegalStateException(
          ""Cannot use Jedis when in Multi. Please use Transaction or reset jedis state."");
    } else if (pipeline != null && pipeline.hasPipelinedResponse()) {
      throw new IllegalStateException(
          ""Cannot use Jedis when in Pipeline. Please use Pipeline or reset jedis state."");
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getDB,int getDB(),"[341, 343]","{'A1': [(341, 342)], 'A21': [(343, 343)]}","{'A1': 0.6666666666666666, 'A21': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public int getDB() {
    return this.db;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,ping,String ping(),"[348, 353]","{'A1': [(348, 353)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String ping() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.PING);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,ping,byte[] ping(byte[]),"[360, 364]","{'A1': [(360, 364)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public byte[] ping(final byte[] message) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.PING, message);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,select,String select(int),"[372, 379]","{'A1': [(372, 379)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String select(final int index) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(SELECT, toByteArray(index));
    String statusCodeReply = connection.getStatusCodeReply();
    this.db = index;
    return statusCodeReply;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,swapDB,"String swapDB(int,int)","[381, 386]","{'A1': [(381, 386)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String swapDB(final int index1, final int index2) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(SWAPDB, toByteArray(index1), toByteArray(index2));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,flushDB,String flushDB(),"[392, 396]","{'A1': [(392, 396)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String flushDB() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.flushDB());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,flushDB,String flushDB(FlushMode),"[403, 408]","{'A1': [(403, 408)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String flushDB(FlushMode flushMode) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(FLUSHDB, flushMode.getRaw());
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,flushAll,String flushAll(),"[415, 419]","{'A1': [(415, 419)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String flushAll() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.flushAll());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,flushAll,String flushAll(FlushMode),"[427, 432]","{'A1': [(427, 432)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String flushAll(FlushMode flushMode) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(FLUSHALL, flushMode.getRaw());
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,copy,"boolean copy(byte[],byte[],int,boolean)","[442, 446]","{'A1': [(443, 443), (445, 445)], 'A14': [(442, 442), (444, 444), (446, 446)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean copy(byte[] srcKey, byte[] dstKey, int db, boolean replace) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.copy(srcKey, dstKey, db, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,copy,"boolean copy(byte[],byte[],boolean)","[455, 459]","{'A1': [(456, 456), (458, 458)], 'A14': [(455, 455), (457, 457), (459, 459)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean copy(byte[] srcKey, byte[] dstKey, boolean replace) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.copy(srcKey, dstKey, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,set,"String set(byte[],byte[])","[470, 474]","{'A1': [(471, 471), (473, 473)], 'A8': [(470, 470), (472, 472)], 'A7': [(474, 474)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String set(final byte[] key, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.set(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,set,"String set(byte[],byte[],SetParams)","[487, 491]","{'A1': [(487, 488), (490, 490)], 'A8': [(489, 489)], 'A7': [(491, 491)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String set(final byte[] key, final byte[] value, final SetParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.set(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,get,byte[] get(byte[]),"[502, 506]","{'A1': [(503, 503), (505, 505)], 'A8': [(502, 502), (504, 504)], 'A7': [(506, 506)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] get(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.get(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setGet,"byte[] setGet(byte[],byte[])","[508, 512]","{'A1': [(508, 512)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] setGet(final byte[] key, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setGet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setGet,"byte[] setGet(byte[],byte[],SetParams)","[514, 518]","{'A1': [(514, 518)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] setGet(final byte[] key, final byte[] value, final SetParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setGet(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getDel,byte[] getDel(byte[]),"[528, 532]","{'A1': [(529, 529), (531, 531)], 'A22': [(528, 528), (530, 530), (532, 532)]}","{'A1': 0.4, 'A22': 0.6}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] getDel(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getDel(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getEx,"byte[] getEx(byte[],GetExParams)","[534, 538]","{'A1': [(535, 538)], 'A14': [(534, 534)]}","{'A1': 0.8, 'A14': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] getEx(final byte[] key, final GetExParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getEx(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,exists,long exists(),"[546, 550]","{'A1': [(546, 547), (549, 549)], 'A63': [(548, 548), (550, 550)]}","{'A1': 0.6, 'A63': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long exists(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.exists(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,exists,boolean exists(byte[]),"[559, 563]","{'A1': [(560, 560), (562, 562)], 'A8': [(559, 559), (561, 561)], 'A7': [(563, 563)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean exists(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.exists(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,del,long del(),"[571, 575]","{'A1': [(572, 572), (574, 574)], 'A8': [(571, 571), (573, 573)], 'A7': [(575, 575)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long del(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.del(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,del,long del(byte[]),"[577, 581]","{'A1': [(578, 580)], 'A8': [(577, 577)], 'A7': [(581, 581)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long del(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.del(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,unlink,long unlink(),"[596, 600]","{'A1': [(596, 600)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long unlink(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.unlink(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,unlink,long unlink(byte[]),"[602, 606]","{'A1': [(602, 606)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long unlink(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.unlink(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,type,String type(byte[]),"[616, 620]","{'A1': [(617, 617), (619, 619)], 'A8': [(616, 616), (618, 618)], 'A7': [(620, 620)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String type(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.type(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,keys,Set<byte[]> keys(byte[]),"[650, 654]","{'A1': [(650, 651), (653, 653)], 'A8': [(652, 652)], 'A7': [(654, 654)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<byte[]> keys(final byte[] pattern) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.keys(pattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,randomBinaryKey,byte[] randomBinaryKey(),"[662, 666]","{'A1': [(663, 663), (665, 665)], 'A8': [(662, 662), (664, 664)], 'A7': [(666, 666)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] randomBinaryKey() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.randomBinaryKey());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rename,"String rename(byte[],byte[])","[677, 681]","{'A1': [(678, 678), (680, 680)], 'A8': [(677, 677), (679, 679)], 'A7': [(681, 681)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String rename(final byte[] oldkey, final byte[] newkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rename(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,renamenx,"long renamenx(byte[],byte[])","[691, 695]","{'A1': [(692, 692), (694, 695)], 'A8': [(691, 691), (693, 693)]}","{'A1': 0.6, 'A8': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long renamenx(final byte[] oldkey, final byte[] newkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.renamenx(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,dbSize,long dbSize(),"[701, 706]","{'A1': [(701, 705)], 'A7': [(706, 706)]}","{'A1': 0.8333333333333334, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long dbSize() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(DBSIZE);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expire,"long expire(byte[],long)","[727, 731]","{'A1': [(728, 728), (730, 730)], 'A8': [(727, 727), (729, 729)], 'A7': [(731, 731)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expire(final byte[] key, final long seconds) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.expire(key, seconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expire,"long expire(byte[],long,ExpiryOption)","[733, 737]","{'A12': [(733, 737)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expire(final byte[] key, final long seconds, final ExpiryOption expiryOption) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand((commandObjects.expire(key, seconds, expiryOption)));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpire,"long pexpire(byte[],long)","[758, 762]","{'A12': [(758, 762)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpire(final byte[] key, final long milliseconds) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpire(key, milliseconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpire,"long pexpire(byte[],long,ExpiryOption)","[764, 768]","{'A12': [(764, 768)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpire(final byte[] key, final long milliseconds, final ExpiryOption expiryOption) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expireTime,long expireTime(byte[]),"[770, 774]","{'A12': [(770, 774)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expireTime(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand((commandObjects.expireTime(key)));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpireTime,long pexpireTime(byte[]),"[776, 780]","{'A12': [(776, 780)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpireTime(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expireAt,"long expireAt(byte[],long)","[805, 809]","{'A1': [(806, 806), (808, 808)], 'A8': [(805, 805), (807, 807)], 'A7': [(809, 809)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expireAt(final byte[] key, final long unixTime) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.expireAt(key, unixTime));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expireAt,"long expireAt(byte[],long,ExpiryOption)","[811, 815]","{'A12': [(811, 815)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpireAt,"long pexpireAt(byte[],long)","[817, 821]","{'A12': [(817, 821)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpireAt(final byte[] key, final long millisecondsTimestamp) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpireAt(key, millisecondsTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpireAt,"long pexpireAt(byte[],long,ExpiryOption)","[823, 827]","{'A12': [(823, 827)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpireAt(byte[] key, long millisecondsTimestamp, ExpiryOption expiryOption) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpireAt(key, millisecondsTimestamp, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,ttl,long ttl(byte[]),"[836, 840]","{'A1': [(837, 837), (839, 839)], 'A8': [(836, 836), (838, 838)], 'A7': [(840, 840)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long ttl(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.ttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,touch,long touch(),"[848, 852]","{'A1': [(848, 852)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long touch(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.touch(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,touch,long touch(byte[]),"[854, 858]","{'A1': [(854, 858)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long touch(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.touch(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,move,"long move(byte[],int)","[870, 875]","{'A1': [(871, 875)], 'A8': [(870, 870)]}","{'A1': 0.8333333333333334, 'A8': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long move(final byte[] key, final int dbIndex) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MOVE, key, toByteArray(dbIndex));
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getSet,"byte[] getSet(byte[],byte[])","[888, 893]","{'A1': [(888, 888), (890, 890), (892, 892)], 'A8': [(889, 889), (891, 891)], 'A7': [(893, 893)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Deprecated
  @Override
  public byte[] getSet(final byte[] key, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getSet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,mget,List<byte[]> mget(),"[904, 908]","{'A1': [(905, 905), (907, 907)], 'A8': [(904, 904), (906, 906)], 'A7': [(908, 908)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> mget(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.mget(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setnx,"long setnx(byte[],byte[])","[919, 923]","{'A1': [(920, 920), (922, 922)], 'A8': [(919, 919), (921, 921)], 'A7': [(923, 923)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long setnx(final byte[] key, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setnx(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setex,"String setex(byte[],long,byte[])","[936, 940]","{'A1': [(937, 937), (939, 939)], 'A8': [(936, 936), (938, 938)], 'A7': [(940, 940)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String setex(final byte[] key, final long seconds, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setex(key, seconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,mset,String mset(),"[958, 962]","{'A1': [(959, 959), (961, 961)], 'A8': [(958, 958), (960, 960)], 'A7': [(962, 962)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String mset(final byte[]... keysvalues) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.mset(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,msetnx,long msetnx(),"[981, 985]","{'A1': [(982, 982), (984, 984)], 'A8': [(981, 981), (983, 983)], 'A7': [(985, 985)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long msetnx(final byte[]... keysvalues) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.msetnx(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,decrBy,"long decrBy(byte[],long)","[1005, 1009]","{'A1': [(1006, 1006), (1008, 1008)], 'A8': [(1005, 1005), (1007, 1007)], 'A7': [(1009, 1009)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long decrBy(final byte[] key, final long decrement) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.decrBy(key, decrement));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,decr,long decr(byte[]),"[1028, 1032]","{'A1': [(1029, 1029), (1031, 1031)], 'A8': [(1028, 1028), (1030, 1030)], 'A7': [(1032, 1032)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long decr(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.decr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,incrBy,"long incrBy(byte[],long)","[1052, 1056]","{'A1': [(1053, 1053), (1055, 1055)], 'A8': [(1052, 1052), (1054, 1054)], 'A7': [(1056, 1056)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long incrBy(final byte[] key, final long increment) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.incrBy(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,incrByFloat,"double incrByFloat(byte[],double)","[1077, 1081]","{'A1': [(1078, 1078), (1080, 1080)], 'A8': [(1077, 1077), (1079, 1079)], 'A7': [(1081, 1081)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public double incrByFloat(final byte[] key, final double increment) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.incrByFloat(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,incr,long incr(byte[]),"[1100, 1104]","{'A1': [(1101, 1101), (1103, 1103)], 'A8': [(1100, 1100), (1102, 1102)], 'A7': [(1104, 1104)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long incr(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.incr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,append,"long append(byte[],byte[])","[1118, 1122]","{'A1': [(1119, 1119), (1121, 1121)], 'A8': [(1118, 1118), (1120, 1120)], 'A7': [(1122, 1122)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long append(final byte[] key, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.append(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,substr,"byte[] substr(byte[],int,int)","[1140, 1144]","{'A1': [(1141, 1141), (1143, 1143)], 'A8': [(1140, 1140), (1142, 1142)], 'A7': [(1144, 1144)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] substr(final byte[] key, final int start, final int end) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.substr(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hset,"long hset(byte[],byte[],byte[])","[1158, 1162]","{'A1': [(1159, 1159), (1161, 1161)], 'A8': [(1158, 1158), (1160, 1160)], 'A7': [(1162, 1162)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hset(final byte[] key, final byte[] field, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hset(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hset,"long hset(byte[],Map<byte[], byte[]>)","[1164, 1168]","{'A1': [(1164, 1168)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hset(final byte[] key, final Map<byte[], byte[]> hash) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hsetex,"long hsetex(byte[],HSetExParams,byte[],byte[])","[1170, 1174]","{'A35': [(1170, 1174)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hsetex(byte[] key, HSetExParams params, byte[] field, byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hsetex(key, params, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hsetex,"long hsetex(byte[],HSetExParams,Map<byte[], byte[]>)","[1176, 1180]","{'A35': [(1176, 1180)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hsetex(byte[] key, HSetExParams params, Map<byte[], byte[]> hash){
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hsetex(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hget,"byte[] hget(byte[],byte[])","[1192, 1196]","{'A1': [(1193, 1193), (1195, 1195)], 'A8': [(1192, 1192), (1194, 1194)], 'A7': [(1196, 1196)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] hget(final byte[] key, final byte[] field) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hget(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hgetex,"List<byte[]> hgetex(byte[],HGetExParams)","[1198, 1202]","{'A35': [(1198, 1202)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> hgetex(byte[] key, HGetExParams params, byte[]... fields){
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hgetex(key, params, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hgetdel,List<byte[]> hgetdel(byte[]),"[1204, 1208]","{'A35': [(1204, 1208)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> hgetdel(byte[] key, byte[]... fields){
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hgetdel(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hsetnx,"long hsetnx(byte[],byte[],byte[])","[1219, 1223]","{'A1': [(1220, 1220), (1222, 1222)], 'A8': [(1219, 1219), (1221, 1221)], 'A7': [(1223, 1223)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hsetnx(final byte[] key, final byte[] field, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hsetnx(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hmset,"String hmset(byte[],Map<byte[], byte[]>)","[1235, 1239]","{'A1': [(1236, 1236), (1238, 1238)], 'A8': [(1235, 1235), (1237, 1237)], 'A7': [(1239, 1239)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String hmset(final byte[] key, final Map<byte[], byte[]> hash) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hmset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hmget,List<byte[]> hmget(byte[]),"[1252, 1256]","{'A1': [(1253, 1253), (1255, 1255)], 'A8': [(1252, 1252), (1254, 1254)], 'A7': [(1256, 1256)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> hmget(final byte[] key, final byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hmget(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hincrBy,"long hincrBy(byte[],byte[],long)","[1272, 1276]","{'A1': [(1273, 1273), (1275, 1275)], 'A8': [(1272, 1272), (1274, 1274)], 'A7': [(1276, 1276)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hincrBy(final byte[] key, final byte[] field, final long value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hincrBy(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hincrByFloat,"double hincrByFloat(byte[],byte[],double)","[1293, 1297]","{'A1': [(1294, 1294), (1296, 1296)], 'A8': [(1293, 1293), (1295, 1295)], 'A7': [(1297, 1297)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public double hincrByFloat(final byte[] key, final byte[] field, final double value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hincrByFloat(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexists,"boolean hexists(byte[],byte[])","[1306, 1310]","{'A1': [(1307, 1307), (1309, 1309)], 'A8': [(1306, 1306), (1308, 1308)], 'A7': [(1310, 1310)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean hexists(final byte[] key, final byte[] field) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexists(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hdel,long hdel(byte[]),"[1321, 1325]","{'A1': [(1322, 1322), (1324, 1324)], 'A8': [(1321, 1321), (1323, 1323)], 'A7': [(1325, 1325)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hdel(final byte[] key, final byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hdel(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hlen,long hlen(byte[]),"[1335, 1339]","{'A1': [(1336, 1336), (1338, 1338)], 'A8': [(1335, 1335), (1337, 1337)], 'A7': [(1339, 1339)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hlen(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hkeys,Set<byte[]> hkeys(byte[]),"[1348, 1352]","{'A1': [(1349, 1349), (1351, 1351)], 'A8': [(1348, 1348), (1350, 1350)], 'A7': [(1352, 1352)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<byte[]> hkeys(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hkeys(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hvals,List<byte[]> hvals(byte[]),"[1361, 1365]","{'A1': [(1362, 1362), (1364, 1364)], 'A8': [(1361, 1361), (1363, 1363)], 'A7': [(1365, 1365)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> hvals(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hvals(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hgetAll,"Map<byte[], byte[]> hgetAll(byte[])","[1374, 1378]","{'A1': [(1375, 1375), (1377, 1377)], 'A8': [(1374, 1374), (1376, 1376)], 'A7': [(1378, 1378)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<byte[], byte[]> hgetAll(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hgetAll(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hrandfield,byte[] hrandfield(byte[]),"[1387, 1391]","{'A1': [(1388, 1388), (1390, 1390)], 'A14': [(1387, 1387), (1389, 1389), (1391, 1391)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] hrandfield(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hrandfield(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hrandfield,"List<byte[]> hrandfield(byte[],long)","[1400, 1404]","{'A1': [(1401, 1401), (1403, 1403)], 'A14': [(1400, 1400), (1402, 1402), (1404, 1404)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> hrandfield(final byte[] key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hrandfield(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hrandfieldWithValues,"List<Map.Entry<byte[], byte[]>> hrandfieldWithValues(byte[],long)","[1413, 1417]","{'A1': [(1416, 1416)], 'A14': [(1413, 1413), (1415, 1415), (1417, 1417)], 'A9': [(1414, 1414)]}","{'A1': 0.2, 'A14': 0.6, 'A9': 0.2}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map.Entry<byte[], byte[]>> hrandfieldWithValues(final byte[] key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hrandfieldWithValues(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpush,long rpush(byte[]),"[1429, 1433]","{'A1': [(1430, 1430), (1432, 1432)], 'A8': [(1429, 1429), (1431, 1431)], 'A7': [(1433, 1433)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long rpush(final byte[] key, final byte[]... strings) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpush(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpush,long lpush(byte[]),"[1445, 1449]","{'A1': [(1446, 1446), (1448, 1448)], 'A8': [(1445, 1445), (1447, 1447)], 'A7': [(1449, 1449)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long lpush(final byte[] key, final byte[]... strings) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpush(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,llen,long llen(byte[]),"[1460, 1464]","{'A1': [(1461, 1461), (1463, 1463)], 'A8': [(1460, 1460), (1462, 1462)], 'A7': [(1464, 1464)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long llen(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.llen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lrange,"List<byte[]> lrange(byte[],long,long)","[1498, 1502]","{'A1': [(1499, 1499), (1501, 1501)], 'A8': [(1498, 1498), (1500, 1500)], 'A7': [(1502, 1502)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> lrange(final byte[] key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,ltrim,"String ltrim(byte[],long,long)","[1534, 1538]","{'A1': [(1535, 1535), (1537, 1537)], 'A8': [(1534, 1534), (1536, 1536)], 'A7': [(1538, 1538)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String ltrim(final byte[] key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.ltrim(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lindex,"byte[] lindex(byte[],long)","[1556, 1560]","{'A1': [(1557, 1557), (1559, 1559)], 'A8': [(1556, 1556), (1558, 1558)], 'A7': [(1560, 1560)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] lindex(final byte[] key, final long index) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lindex(key, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lset,"String lset(byte[],long,byte[])","[1581, 1585]","{'A1': [(1582, 1582), (1584, 1584)], 'A8': [(1581, 1581), (1583, 1583)], 'A7': [(1585, 1585)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String lset(final byte[] key, final long index, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lset(key, index, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lrem,"long lrem(byte[],long,byte[])","[1602, 1606]","{'A1': [(1603, 1603), (1605, 1605)], 'A8': [(1602, 1602), (1604, 1604)], 'A7': [(1606, 1606)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long lrem(final byte[] key, final long count, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lrem(key, count, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpop,byte[] lpop(byte[]),"[1618, 1622]","{'A1': [(1619, 1619), (1621, 1621)], 'A8': [(1618, 1618), (1620, 1620)], 'A7': [(1622, 1622)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] lpop(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpop,"List<byte[]> lpop(byte[],int)","[1624, 1628]","{'A1': [(1624, 1628)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> lpop(final byte[] key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpos,"Long lpos(byte[],byte[])","[1642, 1646]","{'A1': [(1643, 1643), (1645, 1645)], 'A66': [(1642, 1642), (1644, 1644), (1646, 1646)]}","{'A1': 0.4, 'A66': 0.6}",A66,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long lpos(final byte[] key, final byte[] element) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpos(key, element));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpos,"Long lpos(byte[],byte[],LPosParams)","[1666, 1670]","{'A1': [(1667, 1667), (1669, 1669)], 'A66': [(1666, 1666), (1668, 1668), (1670, 1670)]}","{'A1': 0.4, 'A66': 0.6}",A66,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long lpos(final byte[] key, final byte[] element, final LPosParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpos(key, element, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpos,"List<Long> lpos(byte[],byte[],LPosParams,long)","[1686, 1691]","{'A1': [(1687, 1688), (1690, 1690)], 'A66': [(1686, 1686), (1689, 1689), (1691, 1691)]}","{'A1': 0.5, 'A66': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> lpos(final byte[] key, final byte[] element, final LPosParams params,
      final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpos(key, element, params, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpop,byte[] rpop(byte[]),"[1703, 1707]","{'A1': [(1704, 1704), (1706, 1706)], 'A8': [(1703, 1703), (1705, 1705)], 'A7': [(1707, 1707)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] rpop(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpop,"List<byte[]> rpop(byte[],int)","[1709, 1713]","{'A1': [(1709, 1713)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> rpop(final byte[] key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpoplpush,"byte[] rpoplpush(byte[],byte[])","[1730, 1734]","{'A1': [(1731, 1731), (1733, 1733)], 'A8': [(1730, 1730), (1732, 1732)], 'A7': [(1734, 1734)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] rpoplpush(final byte[] srckey, final byte[] dstkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpoplpush(srckey, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sadd,long sadd(byte[]),"[1747, 1751]","{'A1': [(1748, 1748), (1750, 1750)], 'A8': [(1747, 1747), (1749, 1749)], 'A7': [(1751, 1751)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sadd(final byte[] key, final byte[]... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sadd(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,smembers,Set<byte[]> smembers(byte[]),"[1761, 1765]","{'A1': [(1762, 1762), (1764, 1764)], 'A8': [(1761, 1761), (1763, 1763)], 'A7': [(1765, 1765)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<byte[]> smembers(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.smembers(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,srem,long srem(byte[]),"[1776, 1780]","{'A8': [(1776, 1776), (1778, 1778)], 'A7': [(1780, 1780)], 'A12': [(1777, 1777), (1779, 1779)]}","{'A8': 0.4, 'A7': 0.2, 'A12': 0.4}",A8,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long srem(final byte[] key, final byte[]... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.srem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,spop,byte[] spop(byte[]),"[1793, 1797]","{'A1': [(1794, 1794), (1796, 1796)], 'A8': [(1793, 1793), (1795, 1795)], 'A7': [(1797, 1797)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] spop(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.spop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,spop,"Set<byte[]> spop(byte[],long)","[1799, 1803]","{'A1': [(1800, 1800), (1802, 1802)], 'A8': [(1799, 1799), (1801, 1801)], 'A67': [(1803, 1803)]}","{'A1': 0.4, 'A8': 0.4, 'A67': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<byte[]> spop(final byte[] key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.spop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,smove,"long smove(byte[],byte[],byte[])","[1823, 1827]","{'A1': [(1824, 1824), (1826, 1826)], 'A8': [(1823, 1823), (1825, 1825)], 'A7': [(1827, 1827)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long smove(final byte[] srckey, final byte[] dstkey, final byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.smove(srckey, dstkey, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scard,long scard(byte[]),"[1835, 1839]","{'A1': [(1836, 1836), (1838, 1838)], 'A8': [(1835, 1835), (1837, 1837)], 'A7': [(1839, 1839)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long scard(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.scard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sismember,"boolean sismember(byte[],byte[])","[1849, 1853]","{'A1': [(1850, 1850), (1852, 1852)], 'A8': [(1849, 1849), (1851, 1851)], 'A7': [(1853, 1853)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean sismember(final byte[] key, final byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sismember(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,smismember,List<Boolean> smismember(byte[]),"[1863, 1867]","{'A1': [(1864, 1864), (1866, 1866)], 'A21': [(1863, 1863), (1865, 1865), (1867, 1867)]}","{'A1': 0.4, 'A21': 0.6}",A21,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Boolean> smismember(final byte[] key, final byte[]... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.smismember(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sinter,Set<byte[]> sinter(),"[1884, 1888]","{'A1': [(1885, 1885), (1887, 1887)], 'A8': [(1884, 1884), (1886, 1886)], 'A7': [(1888, 1888)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<byte[]> sinter(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sinter(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sinterstore,long sinterstore(byte[]),"[1900, 1904]","{'A1': [(1901, 1901), (1903, 1903)], 'A8': [(1900, 1900), (1902, 1902)], 'A7': [(1904, 1904)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sinterstore(final byte[] dstkey, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sinterstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sintercard,long sintercard(),"[1914, 1918]","{'A12': [(1914, 1918)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sintercard(byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sintercard,long sintercard(int),"[1930, 1934]","{'A12': [(1930, 1934)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sintercard(int limit, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sunion,Set<byte[]> sunion(),"[1949, 1953]","{'A1': [(1950, 1950), (1952, 1952)], 'A8': [(1949, 1949), (1951, 1951)], 'A7': [(1953, 1953)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<byte[]> sunion(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sunion(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sunionstore,long sunionstore(byte[]),"[1965, 1969]","{'A1': [(1966, 1966), (1968, 1968)], 'A8': [(1965, 1965), (1967, 1967)], 'A7': [(1969, 1969)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sunionstore(final byte[] dstkey, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sunionstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sdiff,Set<byte[]> sdiff(),"[1991, 1995]","{'A1': [(1992, 1992), (1994, 1994)], 'A8': [(1991, 1991), (1993, 1993)], 'A7': [(1995, 1995)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<byte[]> sdiff(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sdiffstore,long sdiffstore(byte[]),"[2004, 2008]","{'A1': [(2005, 2005), (2007, 2007)], 'A8': [(2004, 2004), (2006, 2006)], 'A7': [(2008, 2008)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sdiffstore(final byte[] dstkey, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,srandmember,byte[] srandmember(byte[]),"[2020, 2024]","{'A1': [(2021, 2021), (2023, 2023)], 'A8': [(2020, 2020), (2022, 2022)], 'A7': [(2024, 2024)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] srandmember(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.srandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,srandmember,"List<byte[]> srandmember(byte[],int)","[2026, 2030]","{'A1': [(2027, 2027), (2029, 2029)], 'A8': [(2026, 2026), (2028, 2028)], 'A7': [(2030, 2030)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> srandmember(final byte[] key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.srandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zadd,"long zadd(byte[],double,byte[])","[2048, 2052]","{'A1': [(2049, 2049), (2051, 2051)], 'A8': [(2048, 2048), (2050, 2050)], 'A7': [(2052, 2052)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zadd(final byte[] key, final double score, final byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zadd(key, score, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zadd,"long zadd(byte[],double,byte[],ZAddParams)","[2054, 2059]","{'A1': [(2055, 2055), (2058, 2058)], 'A7': [(2054, 2054), (2056, 2057)], 'A14': [(2059, 2059)]}","{'A1': 0.3333333333333333, 'A7': 0.5, 'A14': 0.16666666666666666}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zadd(final byte[] key, final double score, final byte[] member,
      final ZAddParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zadd(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zadd,"long zadd(byte[],Map<byte[], Double>)","[2061, 2065]","{'A1': [(2062, 2062), (2064, 2064)], 'A14': [(2061, 2061), (2063, 2063), (2065, 2065)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zadd(final byte[] key, final Map<byte[], Double> scoreMembers) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zadd(key, scoreMembers));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zadd,"long zadd(byte[],Map<byte[], Double>,ZAddParams)","[2067, 2071]","{'A1': [(2068, 2068), (2070, 2070)], 'A14': [(2067, 2067), (2069, 2069), (2071, 2071)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zadd(final byte[] key, final Map<byte[], Double> scoreMembers, final ZAddParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zadd(key, scoreMembers, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zaddIncr,"Double zaddIncr(byte[],double,byte[],ZAddParams)","[2073, 2077]","{'A1': [(2074, 2074), (2076, 2076)], 'A14': [(2073, 2073), (2075, 2075), (2077, 2077)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double zaddIncr(final byte[] key, final double score, final byte[] member, final ZAddParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zaddIncr(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrange,"List<byte[]> zrange(byte[],long,long)","[2079, 2083]","{'A1': [(2080, 2080), (2082, 2082)], 'A8': [(2079, 2079), (2081, 2081)], 'A7': [(2083, 2083)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrange(final byte[] key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrem,long zrem(byte[]),"[2095, 2099]","{'A1': [(2096, 2096), (2098, 2098)], 'A8': [(2095, 2095), (2097, 2097)], 'A7': [(2099, 2099)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zrem(final byte[] key, final byte[]... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zincrby,"double zincrby(byte[],double,byte[])","[2119, 2123]","{'A1': [(2120, 2120), (2122, 2122)], 'A8': [(2119, 2119), (2121, 2121)], 'A7': [(2123, 2123)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public double zincrby(final byte[] key, final double increment, final byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zincrby(key, increment, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zincrby,"Double zincrby(byte[],double,byte[],ZIncrByParams)","[2125, 2130]","{'A1': [(2126, 2127), (2129, 2129)], 'A7': [(2125, 2125), (2128, 2128), (2130, 2130)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double zincrby(final byte[] key, final double increment, final byte[] member,
      final ZIncrByParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zincrby(key, increment, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrank,"Long zrank(byte[],byte[])","[2147, 2151]","{'A1': [(2148, 2148), (2150, 2150)], 'A8': [(2147, 2147), (2149, 2149)], 'A7': [(2151, 2151)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long zrank(final byte[] key, final byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrank,"Long zrevrank(byte[],byte[])","[2168, 2172]","{'A1': [(2169, 2169), (2171, 2171)], 'A8': [(2168, 2168), (2170, 2170)], 'A7': [(2172, 2172)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long zrevrank(final byte[] key, final byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrankWithScore,"KeyValue<Long, Double> zrankWithScore(byte[],byte[])","[2181, 2185]","{'A10': [(2181, 2185)]}",{'A10': 1.0},A10,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<Long, Double> zrankWithScore(byte[] key, byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrankWithScore,"KeyValue<Long, Double> zrevrankWithScore(byte[],byte[])","[2194, 2198]","{'A10': [(2194, 2198)]}",{'A10': 1.0},A10,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<Long, Double> zrevrankWithScore(byte[] key, byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrange,"List<byte[]> zrevrange(byte[],long,long)","[2200, 2204]","{'A1': [(2201, 2201), (2203, 2203)], 'A8': [(2200, 2200), (2202, 2202)], 'A7': [(2204, 2204)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrevrange(final byte[] key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeWithScores,"List<Tuple> zrangeWithScores(byte[],long,long)","[2206, 2210]","{'A1': [(2207, 2207), (2209, 2209)], 'A8': [(2206, 2206), (2208, 2208)], 'A7': [(2210, 2210)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeWithScores(final byte[] key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeWithScores,"List<Tuple> zrevrangeWithScores(byte[],long,long)","[2212, 2216]","{'A1': [(2213, 2213), (2215, 2215)], 'A8': [(2212, 2212), (2214, 2214)], 'A7': [(2216, 2216)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeWithScores(final byte[] key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrange,"List<byte[]> zrange(byte[],ZRangeParams)","[2218, 2222]","{'A1': [(2218, 2222)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrange(byte[] key, ZRangeParams zRangeParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrange(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeWithScores,"List<Tuple> zrangeWithScores(byte[],ZRangeParams)","[2224, 2228]","{'A1': [(2224, 2228)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeWithScores(byte[] key, ZRangeParams zRangeParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeWithScores(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangestore,"long zrangestore(byte[],byte[],ZRangeParams)","[2230, 2234]","{'A1': [(2230, 2234)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zrangestore(byte[] dest, byte[] src, ZRangeParams zRangeParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangestore(dest, src, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrandmember,byte[] zrandmember(byte[]),"[2236, 2240]","{'A1': [(2237, 2237), (2239, 2239)], 'A14': [(2236, 2236), (2238, 2238), (2240, 2240)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] zrandmember(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrandmember,"List<byte[]> zrandmember(byte[],long)","[2242, 2246]","{'A1': [(2243, 2243), (2245, 2245)], 'A14': [(2242, 2242), (2244, 2244), (2246, 2246)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrandmember(final byte[] key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrandmemberWithScores,"List<Tuple> zrandmemberWithScores(byte[],long)","[2248, 2252]","{'A1': [(2249, 2249), (2251, 2251)], 'A14': [(2248, 2248), (2250, 2250), (2252, 2252)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrandmemberWithScores(final byte[] key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrandmemberWithScores(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zcard,long zcard(byte[]),"[2262, 2266]","{'A1': [(2263, 2263), (2265, 2265)], 'A8': [(2262, 2262), (2264, 2264)], 'A7': [(2266, 2266)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zcard(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zcard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zscore,"Double zscore(byte[],byte[])","[2278, 2282]","{'A1': [(2279, 2279), (2281, 2281)], 'A8': [(2278, 2278), (2280, 2280)], 'A7': [(2282, 2282)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double zscore(final byte[] key, final byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zscore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zmscore,List<Double> zmscore(byte[]),"[2293, 2297]","{'A1': [(2294, 2294), (2296, 2296)], 'A21': [(2293, 2293), (2295, 2295), (2297, 2297)]}","{'A1': 0.4, 'A21': 0.6}",A21,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Double> zmscore(final byte[] key, final byte[]... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zmscore(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zpopmax,Tuple zpopmax(byte[]),"[2299, 2303]","{'A1': [(2300, 2300), (2302, 2302)], 'A68': [(2299, 2299), (2301, 2301)], 'A13': [(2303, 2303)]}","{'A1': 0.4, 'A68': 0.4, 'A13': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Tuple zpopmax(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zpopmax(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zpopmax,"List<Tuple> zpopmax(byte[],int)","[2305, 2309]","{'A1': [(2306, 2306), (2308, 2308)], 'A68': [(2309, 2309)], 'A13': [(2305, 2305), (2307, 2307)]}","{'A1': 0.4, 'A68': 0.2, 'A13': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zpopmax(final byte[] key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zpopmax(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zpopmin,Tuple zpopmin(byte[]),"[2311, 2315]","{'A1': [(2312, 2312), (2314, 2314)], 'A68': [(2311, 2311)], 'A13': [(2313, 2313), (2315, 2315)]}","{'A1': 0.4, 'A68': 0.2, 'A13': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Tuple zpopmin(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zpopmin(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zpopmin,"List<Tuple> zpopmin(byte[],int)","[2317, 2321]","{'A1': [(2318, 2318), (2320, 2320)], 'A68': [(2319, 2319), (2321, 2321)], 'A13': [(2317, 2317)]}","{'A1': 0.4, 'A68': 0.4, 'A13': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zpopmin(final byte[] key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zpopmin(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,watch,String watch(),"[2323, 2330]","{'A1': [(2323, 2330)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public String watch(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(WATCH, keys);
//    return connection.getStatusCodeReply();
    String status = connection.getStatusCodeReply();
    isInWatch = true;
    return status;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,unwatch,String unwatch(),"[2332, 2336]","{'A1': [(2332, 2335)], 'A7': [(2336, 2336)]}","{'A1': 0.8, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public String unwatch() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(UNWATCH);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sort,List<byte[]> sort(byte[]),"[2351, 2355]","{'A1': [(2352, 2352), (2354, 2354)], 'A8': [(2351, 2351), (2353, 2353)], 'A7': [(2355, 2355)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> sort(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sort(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sort,"List<byte[]> sort(byte[],SortingParams)","[2431, 2435]","{'A8': [(2431, 2431), (2433, 2433)], 'A7': [(2435, 2435)], 'A12': [(2432, 2432), (2434, 2434)]}","{'A8': 0.4, 'A7': 0.2, 'A12': 0.4}",A8,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> sort(final byte[] key, final SortingParams sortingParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sort(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sort,"long sort(byte[],SortingParams,byte[])","[2447, 2451]","{'A1': [(2447, 2447), (2449, 2449), (2451, 2451)], 'A12': [(2448, 2448), (2450, 2450)]}","{'A1': 0.6, 'A12': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sort(final byte[] key, final SortingParams sortingParams, final byte[] dstkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sort(key, sortingParams, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sort,"long sort(byte[],byte[])","[2466, 2470]","{'A1': [(2466, 2470)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sort(final byte[] key, final byte[] dstkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sort(key, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sortReadonly,"List<byte[]> sortReadonly(byte[],SortingParams)","[2472, 2476]","{'A12': [(2472, 2476)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> sortReadonly(byte[] key, SortingParams sortingParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sortReadonly(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lmove,"byte[] lmove(byte[],byte[],ListDirection,ListDirection)","[2486, 2490]","{'A1': [(2486, 2490)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] lmove(byte[] srcKey, byte[] dstKey, ListDirection from, ListDirection to) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lmove(srcKey, dstKey, from, to));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blmove,"byte[] blmove(byte[],byte[],ListDirection,ListDirection,double)","[2501, 2505]","{'A1': [(2501, 2505)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] blmove(byte[] srcKey, byte[] dstKey, ListDirection from, ListDirection to, double timeout) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blmove(srcKey, dstKey, from, to, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blpop,List<byte[]> blpop(int),"[2568, 2571]","{'A1': [(2569, 2570)], 'A8': [(2568, 2568)], 'A7': [(2571, 2571)]}","{'A1': 0.5, 'A8': 0.25, 'A7': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> blpop(final int timeout, final byte[]... keys) {
    return connection.executeCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blpop,"KeyValue<byte[], byte[]> blpop(double)","[2573, 2576]","{'A1': [(2573, 2576)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], byte[]> blpop(final double timeout, final byte[]... keys) {
    return connection.executeCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,brpop,List<byte[]> brpop(int),"[2639, 2642]","{'A1': [(2640, 2642)], 'A8': [(2639, 2639)]}","{'A1': 0.75, 'A8': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> brpop(final int timeout, final byte[]... keys) {
    return connection.executeCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,brpop,"KeyValue<byte[], byte[]> brpop(double)","[2644, 2647]","{'A1': [(2644, 2647)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], byte[]> brpop(final double timeout, final byte[]... keys) {
    return connection.executeCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lmpop,"KeyValue<byte[], List<byte[]>> lmpop(ListDirection)","[2649, 2653]","{'A1': [(2649, 2653)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], List<byte[]>> lmpop(ListDirection direction, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lmpop(direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lmpop,"KeyValue<byte[], List<byte[]>> lmpop(ListDirection,int)","[2655, 2659]","{'A1': [(2655, 2659)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], List<byte[]>> lmpop(ListDirection direction, int count, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lmpop(direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blmpop,"KeyValue<byte[], List<byte[]>> blmpop(double,ListDirection)","[2661, 2665]","{'A1': [(2661, 2665)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], List<byte[]>> blmpop(double timeout, ListDirection direction, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blmpop(timeout, direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blmpop,"KeyValue<byte[], List<byte[]>> blmpop(double,ListDirection,int)","[2667, 2671]","{'A1': [(2667, 2671)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], List<byte[]>> blmpop(double timeout, ListDirection direction, int count, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blmpop(timeout, direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bzpopmax,"KeyValue<byte[], Tuple> bzpopmax(double)","[2673, 2676]","{'A1': [(2673, 2676)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], Tuple> bzpopmax(final double timeout, final byte[]... keys) {
    return connection.executeCommand(commandObjects.bzpopmax(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bzpopmin,"KeyValue<byte[], Tuple> bzpopmin(double)","[2678, 2681]","{'A1': [(2678, 2681)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], Tuple> bzpopmin(final double timeout, final byte[]... keys) {
    return connection.executeCommand(commandObjects.bzpopmin(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,auth,String auth(String),"[2695, 2700]","{'A1': [(2695, 2700)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String auth(final String password) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.AUTH, password);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,auth,"String auth(String,String)","[2710, 2715]","{'A1': [(2710, 2714)], 'A7': [(2715, 2715)]}","{'A1': 0.8333333333333334, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String auth(final String user, final String password) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.AUTH, user, password);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zcount,"long zcount(byte[],double,double)","[2717, 2721]","{'A1': [(2717, 2721)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zcount(final byte[] key, final double min, final double max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zcount,"long zcount(byte[],byte[],byte[])","[2723, 2727]","{'A1': [(2723, 2727)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zcount(final byte[] key, final byte[] min, final byte[] max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zdiff,List<byte[]> zdiff(),"[2729, 2733]","{'A1': [(2729, 2733)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zdiff(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zdiffWithScores,List<Tuple> zdiffWithScores(),"[2735, 2739]","{'A1': [(2736, 2736), (2738, 2738)], 'A8': [(2735, 2735), (2737, 2737)], 'A7': [(2739, 2739)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zdiffWithScores(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zdiffWithScores(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zdiffStore,long zdiffStore(byte[]),"[2741, 2746]","{'A1': [(2742, 2743), (2745, 2745)], 'A8': [(2741, 2741), (2744, 2744)], 'A7': [(2746, 2746)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  @Deprecated
  public long zdiffStore(final byte[] dstkey, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zdiffStore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zdiffstore,long zdiffstore(byte[]),"[2748, 2752]","{'A1': [(2748, 2752)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zdiffstore(final byte[] dstkey, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScore,"List<byte[]> zrangeByScore(byte[],double,double)","[2801, 2805]","{'A1': [(2802, 2802), (2804, 2804)], 'A8': [(2801, 2801), (2803, 2803)], 'A7': [(2805, 2805)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrangeByScore(final byte[] key, final double min, final double max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScore,"List<byte[]> zrangeByScore(byte[],byte[],byte[])","[2807, 2811]","{'A1': [(2808, 2808), (2810, 2810)], 'A8': [(2807, 2807), (2809, 2809)], 'A7': [(2811, 2811)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrangeByScore(final byte[] key, final byte[] min, final byte[] max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScore,"List<byte[]> zrangeByScore(byte[],double,double,int,int)","[2862, 2867]","{'A1': [(2863, 2863), (2866, 2866)], 'A8': [(2862, 2862), (2865, 2865)], 'A7': [(2864, 2864), (2867, 2867)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrangeByScore(final byte[] key, final double min, final double max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScore,"List<byte[]> zrangeByScore(byte[],byte[],byte[],int,int)","[2869, 2874]","{'A1': [(2870, 2870), (2873, 2873)], 'A8': [(2869, 2869), (2872, 2872)], 'A7': [(2871, 2871), (2874, 2874)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrangeByScore(final byte[] key, final byte[] min, final byte[] max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(byte[],double,double)","[2923, 2927]","{'A1': [(2924, 2924), (2926, 2926)], 'A8': [(2923, 2923), (2925, 2925)], 'A7': [(2927, 2927)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(byte[],byte[],byte[])","[2929, 2933]","{'A1': [(2930, 2930), (2932, 2932)], 'A8': [(2929, 2929), (2931, 2931)], 'A7': [(2933, 2933)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeByScoreWithScores(final byte[] key, final byte[] min, final byte[] max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(byte[],double,double,int,int)","[2984, 2989]","{'A1': [(2985, 2985), (2988, 2988)], 'A8': [(2984, 2984), (2987, 2987)], 'A7': [(2986, 2986), (2989, 2989)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeByScoreWithScores(final byte[] key, final double min, final double max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(byte[],byte[],byte[],int,int)","[2991, 2996]","{'A1': [(2992, 2992), (2995, 2995)], 'A8': [(2991, 2991), (2994, 2994)], 'A7': [(2993, 2993), (2996, 2996)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeByScoreWithScores(final byte[] key, final byte[] min, final byte[] max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScore,"List<byte[]> zrevrangeByScore(byte[],double,double)","[2998, 3002]","{'A1': [(2999, 2999), (3001, 3001)], 'A8': [(2998, 2998), (3000, 3000)], 'A7': [(3002, 3002)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrevrangeByScore(final byte[] key, final double max, final double min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScore,"List<byte[]> zrevrangeByScore(byte[],byte[],byte[])","[3004, 3008]","{'A1': [(3005, 3005), (3007, 3007)], 'A8': [(3004, 3004), (3006, 3006)], 'A7': [(3008, 3008)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrevrangeByScore(final byte[] key, final byte[] max, final byte[] min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScore,"List<byte[]> zrevrangeByScore(byte[],double,double,int,int)","[3010, 3015]","{'A1': [(3011, 3011), (3014, 3014)], 'A8': [(3010, 3010), (3013, 3013)], 'A7': [(3012, 3012), (3015, 3015)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrevrangeByScore(final byte[] key, final double max, final double min,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScore,"List<byte[]> zrevrangeByScore(byte[],byte[],byte[],int,int)","[3017, 3022]","{'A1': [(3018, 3019), (3021, 3021)], 'A8': [(3017, 3017), (3020, 3020)], 'A7': [(3022, 3022)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrevrangeByScore(final byte[] key, final byte[] max, final byte[] min,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(byte[],double,double)","[3024, 3028]","{'A1': [(3025, 3025), (3027, 3027)], 'A8': [(3024, 3024), (3026, 3026)], 'A7': [(3028, 3028)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(final byte[] key, final double max, final double min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(byte[],double,double,int,int)","[3030, 3035]","{'A1': [(3031, 3032), (3034, 3034)], 'A8': [(3030, 3030), (3033, 3033)], 'A7': [(3035, 3035)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(final byte[] key, final double max,
      final double min, final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(byte[],byte[],byte[])","[3037, 3041]","{'A1': [(3038, 3038), (3040, 3040)], 'A8': [(3037, 3037), (3039, 3039)], 'A7': [(3041, 3041)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(final byte[] key, final byte[] max, final byte[] min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(byte[],byte[],byte[],int,int)","[3043, 3048]","{'A1': [(3044, 3045), (3047, 3047)], 'A8': [(3043, 3043), (3046, 3046)], 'A7': [(3048, 3048)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(final byte[] key, final byte[] max,
      final byte[] min, final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zremrangeByRank,"long zremrangeByRank(byte[],long,long)","[3064, 3068]","{'A1': [(3065, 3065), (3067, 3067)], 'A8': [(3064, 3064), (3066, 3066)], 'A7': [(3068, 3068)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zremrangeByRank(final byte[] key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zremrangeByRank(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zremrangeByScore,"long zremrangeByScore(byte[],double,double)","[3083, 3087]","{'A1': [(3084, 3084), (3086, 3086)], 'A8': [(3083, 3083), (3085, 3085)], 'A7': [(3087, 3087)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zremrangeByScore(final byte[] key, final double min, final double max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zremrangeByScore,"long zremrangeByScore(byte[],byte[],byte[])","[3089, 3093]","{'A1': [(3090, 3090), (3092, 3092)], 'A8': [(3089, 3089), (3091, 3091)], 'A7': [(3093, 3093)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zremrangeByScore(final byte[] key, final byte[] min, final byte[] max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zunion,List<byte[]> zunion(ZParams),"[3102, 3106]","{'A1': [(3103, 3103), (3105, 3105)], 'A14': [(3102, 3102), (3104, 3104), (3106, 3106)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zunion(final ZParams params, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zunion(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zunionWithScores,List<Tuple> zunionWithScores(ZParams),"[3115, 3119]","{'A1': [(3116, 3116), (3118, 3118)], 'A14': [(3115, 3115), (3117, 3117), (3119, 3119)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zunionWithScores(final ZParams params, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zunionWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zunionstore,long zunionstore(byte[]),"[3146, 3150]","{'A1': [(3147, 3147), (3149, 3149)], 'A8': [(3146, 3146), (3148, 3148)], 'A7': [(3150, 3150)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zunionstore(final byte[] dstkey, final byte[]... sets) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zunionstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zunionstore,"long zunionstore(byte[],ZParams)","[3179, 3183]","{'A1': [(3179, 3183)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zunionstore(final byte[] dstkey, final ZParams params, final byte[]... sets) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zunionstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zinter,List<byte[]> zinter(ZParams),"[3192, 3196]","{'A1': [(3192, 3196)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zinter(final ZParams params, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zinter(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zinterWithScores,List<Tuple> zinterWithScores(ZParams),"[3205, 3209]","{'A1': [(3205, 3209)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zinterWithScores(final ZParams params, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zinterWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zinterstore,long zinterstore(byte[]),"[3237, 3241]","{'A1': [(3237, 3241)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zinterstore(final byte[] dstkey, final byte[]... sets) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zinterstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zinterstore,"long zinterstore(byte[],ZParams)","[3270, 3274]","{'A1': [(3270, 3274)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zinterstore(final byte[] dstkey, final ZParams params, final byte[]... sets) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zinterstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zintercard,long zintercard(),"[3276, 3280]","{'A12': [(3276, 3280)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zintercard(byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zintercard,long zintercard(long),"[3282, 3286]","{'A12': [(3282, 3286)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zintercard(long limit, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zlexcount,"long zlexcount(byte[],byte[],byte[])","[3288, 3292]","{'A1': [(3288, 3292)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zlexcount(final byte[] key, final byte[] min, final byte[] max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zlexcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByLex,"List<byte[]> zrangeByLex(byte[],byte[],byte[])","[3294, 3298]","{'A1': [(3294, 3298)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrangeByLex(final byte[] key, final byte[] min, final byte[] max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByLex,"List<byte[]> zrangeByLex(byte[],byte[],byte[],int,int)","[3300, 3305]","{'A1': [(3300, 3305)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrangeByLex(final byte[] key, final byte[] min, final byte[] max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByLex(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByLex,"List<byte[]> zrevrangeByLex(byte[],byte[],byte[])","[3307, 3311]","{'A1': [(3307, 3311)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrevrangeByLex(final byte[] key, final byte[] max, final byte[] min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByLex(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByLex,"List<byte[]> zrevrangeByLex(byte[],byte[],byte[],int,int)","[3313, 3318]","{'A1': [(3313, 3318)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> zrevrangeByLex(final byte[] key, final byte[] max, final byte[] min,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByLex(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zremrangeByLex,"long zremrangeByLex(byte[],byte[],byte[])","[3320, 3324]","{'A1': [(3320, 3324)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zremrangeByLex(final byte[] key, final byte[] min, final byte[] max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zremrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zmpop,"KeyValue<byte[], List<Tuple>> zmpop(SortedSetOption)","[3326, 3330]","{'A1': [(3326, 3330)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], List<Tuple>> zmpop(SortedSetOption option, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zmpop(option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zmpop,"KeyValue<byte[], List<Tuple>> zmpop(SortedSetOption,int)","[3332, 3336]","{'A1': [(3332, 3336)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], List<Tuple>> zmpop(SortedSetOption option, int count, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zmpop(option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bzmpop,"KeyValue<byte[], List<Tuple>> bzmpop(double,SortedSetOption)","[3338, 3342]","{'A1': [(3338, 3342)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], List<Tuple>> bzmpop(double timeout, SortedSetOption option, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bzmpop(timeout, option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bzmpop,"KeyValue<byte[], List<Tuple>> bzmpop(double,SortedSetOption,int)","[3344, 3348]","{'A1': [(3344, 3348)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<byte[], List<Tuple>> bzmpop(double timeout, SortedSetOption option, int count, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bzmpop(timeout, option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,save,String save(),"[3363, 3367]","{'A1': [(3363, 3367)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String save() {
    connection.sendCommand(Command.SAVE);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bgsave,String bgsave(),"[3377, 3381]","{'A1': [(3377, 3381)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String bgsave() {
    connection.sendCommand(BGSAVE);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bgsaveSchedule,String bgsaveSchedule(),"[3383, 3387]","{'A1': [(3383, 3387)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String bgsaveSchedule() {
    connection.sendCommand(BGSAVE, SCHEDULE);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bgrewriteaof,String bgrewriteaof(),"[3403, 3407]","{'A1': [(3403, 3407)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String bgrewriteaof() {
    connection.sendCommand(BGREWRITEAOF);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lastsave,long lastsave(),"[3417, 3421]","{'A1': [(3417, 3421)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long lastsave() {
    connection.sendCommand(LASTSAVE);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,shutdown,void shutdown(),"[3431, 3440]","{'A1': [(3431, 3440)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public void shutdown() throws JedisException {
    connection.sendCommand(SHUTDOWN);
    try {
      throw new JedisException(connection.getStatusCodeReply());
    } catch (JedisConnectionException jce) {
      // expected
      connection.setBroken();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,shutdown,void shutdown(ShutdownParams),"[3442, 3451]","{'A12': [(3442, 3451)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public void shutdown(ShutdownParams shutdownParams) throws JedisException {
    connection.sendCommand(new CommandArguments(SHUTDOWN).addParams(shutdownParams));
    try {
      throw new JedisException(connection.getStatusCodeReply());
    } catch (JedisConnectionException jce) {
      // expected
      connection.setBroken();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,shutdownAbort,String shutdownAbort(),"[3453, 3457]","{'A12': [(3453, 3457)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String shutdownAbort() {
    connection.sendCommand(SHUTDOWN, ABORT);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,info,String info(),"[3495, 3499]","{'A1': [(3495, 3499)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String info() {
    connection.sendCommand(Command.INFO);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,info,String info(String),"[3501, 3505]","{'A1': [(3501, 3505)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String info(final String section) {
    connection.sendCommand(Command.INFO, section);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,monitor,void monitor(JedisMonitor),"[3515, 3520]","{'A1': [(3515, 3520)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public void monitor(final JedisMonitor jedisMonitor) {
//    connection.monitor();
    connection.sendCommand(Command.MONITOR);
    connection.getStatusCodeReply();
    jedisMonitor.proceed(connection);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,slaveof,"String slaveof(String,int)","[3543, 3548]","{'A1': [(3543, 3543), (3545, 3548)], 'A12': [(3544, 3544)]}","{'A1': 0.8333333333333334, 'A12': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  @Deprecated
  public String slaveof(final String host, final int port) {
    connection.sendCommand(SLAVEOF, encode(host), toByteArray(port));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,slaveofNoOne,String slaveofNoOne(),"[3553, 3558]","{'A1': [(3553, 3553), (3555, 3558)], 'A12': [(3554, 3554)]}","{'A1': 0.8333333333333334, 'A12': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  @Deprecated
  public String slaveofNoOne() {
    connection.sendCommand(SLAVEOF, NO.getRaw(), ONE.getRaw());
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,replicaof,"String replicaof(String,int)","[3560, 3564]","{'A12': [(3560, 3564)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String replicaof(final String host, final int port) {
    connection.sendCommand(REPLICAOF, encode(host), toByteArray(port));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,replicaofNoOne,String replicaofNoOne(),"[3566, 3570]","{'A12': [(3566, 3570)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String replicaofNoOne() {
    connection.sendCommand(REPLICAOF, NO.getRaw(), ONE.getRaw());
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,roleBinary,List<Object> roleBinary(),"[3572, 3577]","{'A1': [(3572, 3577)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> roleBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ROLE);
    return BuilderFactory.RAW_OBJECT_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configGet,"Map<byte[], byte[]> configGet(byte[])","[3613, 3618]","{'A1': [(3613, 3618)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<byte[], byte[]> configGet(final byte[] pattern) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, Keyword.GET.getRaw(), pattern);
    return BuilderFactory.BINARY_MAP.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configGet,"Map<byte[], byte[]> configGet()","[3620, 3625]","{'A1': [(3621, 3621), (3623, 3624)], 'A26': [(3620, 3620), (3622, 3622), (3625, 3625)]}","{'A1': 0.5, 'A26': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<byte[], byte[]> configGet(byte[]... patterns) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, joinParameters(Keyword.GET.getRaw(), patterns));
    return BuilderFactory.BINARY_MAP.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configResetStat,String configResetStat(),"[3630, 3635]","{'A1': [(3630, 3635)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String configResetStat() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, Keyword.RESETSTAT);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configRewrite,String configRewrite(),"[3663, 3668]","{'A1': [(3663, 3668)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String configRewrite() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, Keyword.REWRITE);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configSet,"String configSet(byte[],byte[])","[3699, 3704]","{'A1': [(3699, 3704)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String configSet(final byte[] parameter, final byte[] value) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, Keyword.SET.getRaw(), parameter, value);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configSet,String configSet(),"[3706, 3711]","{'A1': [(3706, 3711)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String configSet(final byte[]... parameterValues) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, joinParameters(Keyword.SET.getRaw(), parameterValues));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configSetBinary,"String configSetBinary(Map<byte[], byte[]>)","[3713, 3720]","{'A1': [(3713, 3720)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String configSetBinary(Map<byte[], byte[]> parameterValues) {
    checkIsInMultiOrPipeline();
    CommandArguments args = new CommandArguments(Command.CONFIG).add(Keyword.SET);
    parameterValues.forEach((k, v) -> args.add(k).add(v));
    connection.sendCommand(args);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,strlen,long strlen(byte[]),"[3722, 3726]","{'A1': [(3722, 3726)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long strlen(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.strlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lcs,"LCSMatchResult lcs(byte[],byte[],LCSParams)","[3728, 3732]","{'A12': [(3728, 3732)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public LCSMatchResult lcs(final byte[] keyA, final byte[] keyB, final LCSParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpushx,long lpushx(byte[]),"[3734, 3738]","{'A1': [(3734, 3734), (3736, 3736), (3738, 3738)], 'A12': [(3735, 3735), (3737, 3737)]}","{'A1': 0.6, 'A12': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long lpushx(final byte[] key, final byte[]... strings) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpushx(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,persist,long persist(byte[]),"[3747, 3751]","{'A1': [(3747, 3751)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long persist(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.persist(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpushx,long rpushx(byte[]),"[3753, 3757]","{'A1': [(3753, 3753), (3755, 3755), (3757, 3757)], 'A12': [(3754, 3754), (3756, 3756)]}","{'A1': 0.6, 'A12': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long rpushx(final byte[] key, final byte[]... strings) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpushx(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,echo,byte[] echo(byte[]),"[3759, 3764]","{'A1': [(3759, 3764)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] echo(final byte[] string) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ECHO, string);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,linsert,"long linsert(byte[],ListPosition,byte[],byte[])","[3766, 3771]","{'A1': [(3766, 3771)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long linsert(final byte[] key, final ListPosition where, final byte[] pivot,
      final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.linsert(key, where, pivot, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,brpoplpush,"byte[] brpoplpush(byte[],byte[],int)","[3776, 3780]","{'A1': [(3776, 3780)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] brpoplpush(final byte[] source, final byte[] destination, final int timeout) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.brpoplpush(source, destination, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setbit,"boolean setbit(byte[],long,boolean)","[3785, 3789]","{'A1': [(3785, 3789)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean setbit(final byte[] key, final long offset, final boolean value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setbit(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getbit,"boolean getbit(byte[],long)","[3794, 3798]","{'A1': [(3794, 3798)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean getbit(final byte[] key, final long offset) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getbit(key, offset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitpos,"long bitpos(byte[],boolean)","[3800, 3803]","{'A1': [(3800, 3803)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitpos(final byte[] key, final boolean value) {
    return bitpos(key, value, new BitPosParams());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitpos,"long bitpos(byte[],boolean,BitPosParams)","[3805, 3809]","{'A1': [(3805, 3809)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitpos(final byte[] key, final boolean value, final BitPosParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitpos(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setrange,"long setrange(byte[],long,byte[])","[3811, 3815]","{'A1': [(3811, 3815)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long setrange(final byte[] key, final long offset, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setrange(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getrange,"byte[] getrange(byte[],long,long)","[3817, 3821]","{'A1': [(3817, 3821)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] getrange(final byte[] key, final long startOffset, final long endOffset) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getrange(key, startOffset, endOffset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,publish,"long publish(byte[],byte[])","[3823, 3826]","{'A1': [(3823, 3826)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public long publish(final byte[] channel, final byte[] message) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.publish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,subscribe,void subscribe(BinaryJedisPubSub),"[3828, 3830]","{'A1': [(3828, 3830)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public void subscribe(BinaryJedisPubSub jedisPubSub, final byte[]... channels) {
    jedisPubSub.proceed(connection, channels);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,psubscribe,void psubscribe(BinaryJedisPubSub),"[3832, 3834]","{'A1': [(3832, 3834)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public void psubscribe(BinaryJedisPubSub jedisPubSub, final byte[]... patterns) {
    jedisPubSub.proceedWithPatterns(connection, patterns);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,eval,"Object eval(byte[],List<byte[]>,List<byte[]>)","[3843, 3847]","{'A1': [(3843, 3847)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object eval(final byte[] script, final List<byte[]> keys, final List<byte[]> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.eval(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalReadonly,"Object evalReadonly(byte[],List<byte[]>,List<byte[]>)","[3849, 3853]","{'A12': [(3849, 3853)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalReadonly(byte[] script, List<byte[]> keys, List<byte[]> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalReadonly(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getParamsWithBinary,"byte[][] getParamsWithBinary(List<byte[]>,List<byte[]>)","[3855, 3867]","{'A1': [(3855, 3867)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  protected static byte[][] getParamsWithBinary(List<byte[]> keys, List<byte[]> args) {
    final int keyCount = keys.size();
    final int argCount = args.size();
    byte[][] params = new byte[keyCount + argCount][];

    for (int i = 0; i < keyCount; i++)
      params[i] = keys.get(i);

    for (int i = 0; i < argCount; i++)
      params[keyCount + i] = args.get(i);

    return params;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,eval,"Object eval(byte[],int)","[3869, 3873]","{'A1': [(3869, 3873)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object eval(final byte[] script, final int keyCount, final byte[]... params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.eval(script, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,eval,Object eval(byte[]),"[3875, 3879]","{'A1': [(3875, 3879)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object eval(final byte[] script) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.eval(script));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalsha,Object evalsha(byte[]),"[3881, 3885]","{'A1': [(3881, 3885)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalsha(final byte[] sha1) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalsha(sha1));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalsha,"Object evalsha(byte[],List<byte[]>,List<byte[]>)","[3887, 3891]","{'A1': [(3887, 3891)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalsha(final byte[] sha1, final List<byte[]> keys, final List<byte[]> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalsha(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalshaReadonly,"Object evalshaReadonly(byte[],List<byte[]>,List<byte[]>)","[3893, 3897]","{'A12': [(3893, 3897)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalshaReadonly(byte[] sha1, List<byte[]> keys, List<byte[]> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalshaReadonly(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalsha,"Object evalsha(byte[],int)","[3899, 3903]","{'A1': [(3899, 3903)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalsha(final byte[] sha1, final int keyCount, final byte[]... params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalsha(sha1, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scriptFlush,String scriptFlush(),"[3905, 3909]","{'A1': [(3905, 3909)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String scriptFlush() {
    connection.sendCommand(SCRIPT, FLUSH);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scriptFlush,String scriptFlush(FlushMode),"[3911, 3915]","{'A1': [(3911, 3915)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String scriptFlush(final FlushMode flushMode) {
    connection.sendCommand(SCRIPT, FLUSH.getRaw(), flushMode.getRaw());
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scriptExists,Boolean scriptExists(byte[]),"[3917, 3922]","{'A1': [(3917, 3922)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Boolean scriptExists(final byte[] sha1) {
    byte[][] a = new byte[1][];
    a[0] = sha1;
    return scriptExists(a).get(0);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scriptExists,List<Boolean> scriptExists(),"[3924, 3928]","{'A1': [(3924, 3928)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Boolean> scriptExists(final byte[]... sha1) {
    connection.sendCommand(SCRIPT, joinParameters(Keyword.EXISTS.getRaw(), sha1));
    return BuilderFactory.BOOLEAN_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scriptLoad,byte[] scriptLoad(byte[]),"[3930, 3934]","{'A1': [(3930, 3934)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] scriptLoad(final byte[] script) {
    connection.sendCommand(SCRIPT, LOAD.getRaw(), script);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scriptKill,String scriptKill(),"[3936, 3939]","{'A1': [(3936, 3939)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String scriptKill() {
    return connection.executeCommand(commandObjects.scriptKill());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,slowlogReset,String slowlogReset(),"[3941, 3944]","{'A1': [(3941, 3944)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String slowlogReset() {
    return connection.executeCommand(commandObjects.slowlogReset());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,slowlogLen,long slowlogLen(),"[3946, 3950]","{'A1': [(3946, 3950)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long slowlogLen() {
    connection.sendCommand(SLOWLOG, LEN);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,slowlogGetBinary,List<Object> slowlogGetBinary(),"[3952, 3956]","{'A1': [(3952, 3956)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> slowlogGetBinary() {
    connection.sendCommand(SLOWLOG, Keyword.GET);
    return connection.getObjectMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,slowlogGetBinary,List<Object> slowlogGetBinary(long),"[3958, 3962]","{'A1': [(3958, 3962)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> slowlogGetBinary(final long entries) {
    connection.sendCommand(SLOWLOG, Keyword.GET.getRaw(), toByteArray(entries));
    return connection.getObjectMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectRefcount,Long objectRefcount(byte[]),"[3964, 3968]","{'A1': [(3964, 3968)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long objectRefcount(final byte[] key) {
    connection.sendCommand(OBJECT, REFCOUNT.getRaw(), key);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectEncoding,byte[] objectEncoding(byte[]),"[3970, 3974]","{'A1': [(3970, 3974)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] objectEncoding(final byte[] key) {
    connection.sendCommand(OBJECT, ENCODING.getRaw(), key);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectIdletime,Long objectIdletime(byte[]),"[3976, 3980]","{'A1': [(3976, 3980)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long objectIdletime(final byte[] key) {
    connection.sendCommand(OBJECT, IDLETIME.getRaw(), key);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectHelpBinary,List<byte[]> objectHelpBinary(),"[3982, 3986]","{'A1': [(3982, 3986)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> objectHelpBinary() {
    connection.sendCommand(OBJECT, HELP);
    return connection.getBinaryMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectFreq,Long objectFreq(byte[]),"[3988, 3992]","{'A1': [(3988, 3992)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long objectFreq(final byte[] key) {
    connection.sendCommand(OBJECT, FREQ.getRaw(), key);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitcount,long bitcount(byte[]),"[3994, 3998]","{'A1': [(3994, 3998)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitcount(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitcount,"long bitcount(byte[],long,long)","[4000, 4004]","{'A1': [(4000, 4004)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitcount(final byte[] key, final long start, final long end) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitcount(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitcount,"long bitcount(byte[],long,long,BitCountOption)","[4006, 4010]","{'A1': [(4007, 4007)], 'A26': [(4006, 4006), (4008, 4010)]}","{'A1': 0.2, 'A26': 0.8}",A26,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitcount(final byte[] key, final long start, final long end, final BitCountOption option) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitcount(key, start, end, option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitop,"long bitop(BitOP,byte[])","[4012, 4016]","{'A1': [(4012, 4016)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitop(final BitOP op, final byte[] destKey, final byte[]... srcKeys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitop(op, destKey, srcKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,dump,byte[] dump(byte[]),"[4018, 4022]","{'A1': [(4018, 4022)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] dump(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.dump(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,restore,"String restore(byte[],long,byte[])","[4024, 4028]","{'A1': [(4024, 4028)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String restore(final byte[] key, final long ttl, final byte[] serializedValue) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.restore(key, ttl, serializedValue));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,restore,"String restore(byte[],long,byte[],RestoreParams)","[4030, 4035]","{'A1': [(4030, 4035)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String restore(final byte[] key, final long ttl, final byte[] serializedValue,
      final RestoreParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.restore(key, ttl, serializedValue, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pttl,long pttl(byte[]),"[4037, 4041]","{'A1': [(4037, 4041)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pttl(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,psetex,"String psetex(byte[],long,byte[])","[4051, 4055]","{'A1': [(4051, 4055)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String psetex(final byte[] key, final long milliseconds, final byte[] value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.psetex(key, milliseconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,memoryDoctorBinary,byte[] memoryDoctorBinary(),"[4057, 4062]","{'A1': [(4057, 4062)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] memoryDoctorBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MEMORY, DOCTOR);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,memoryUsage,Long memoryUsage(byte[]),"[4064, 4069]","{'A1': [(4064, 4069)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long memoryUsage(final byte[] key) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MEMORY, USAGE.getRaw(), key);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,memoryUsage,"Long memoryUsage(byte[],int)","[4071, 4076]","{'A1': [(4071, 4076)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long memoryUsage(final byte[] key, final int samples) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MEMORY, USAGE.getRaw(), key, SAMPLES.getRaw(), toByteArray(samples));
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,failover,String failover(),"[4078, 4088]","{'A1': [(4078, 4088)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String failover() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.FAILOVER);
    connection.setTimeoutInfinite();
    try {
      return connection.getStatusCodeReply();
    } finally {
      connection.rollbackTimeout();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,failover,String failover(FailoverParams),"[4090, 4101]","{'A1': [(4090, 4101)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String failover(FailoverParams failoverParams) {
    checkIsInMultiOrPipeline();
    CommandArguments args = new ClusterCommandArguments(Command.FAILOVER).addParams(failoverParams);
    connection.sendCommand(args);
    connection.setTimeoutInfinite();
    try {
      return connection.getStatusCodeReply();
    } finally {
      connection.rollbackTimeout();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,failoverAbort,String failoverAbort(),"[4103, 4108]","{'A1': [(4103, 4108)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String failoverAbort() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.FAILOVER, ABORT);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclWhoAmIBinary,byte[] aclWhoAmIBinary(),"[4110, 4115]","{'A1': [(4110, 4115)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] aclWhoAmIBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, WHOAMI);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclGenPassBinary,byte[] aclGenPassBinary(),"[4117, 4122]","{'A1': [(4117, 4122)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] aclGenPassBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, GENPASS);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclGenPassBinary,byte[] aclGenPassBinary(int),"[4124, 4129]","{'A1': [(4124, 4129)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] aclGenPassBinary(int bits) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, GENPASS.getRaw(), toByteArray(bits));
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclListBinary,List<byte[]> aclListBinary(),"[4131, 4136]","{'A1': [(4131, 4136)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> aclListBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, LIST);
    return connection.getBinaryMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclUsersBinary,List<byte[]> aclUsersBinary(),"[4138, 4143]","{'A1': [(4138, 4143)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> aclUsersBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, USERS);
    return connection.getBinaryMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclGetUser,AccessControlUser aclGetUser(byte[]),"[4145, 4150]","{'A1': [(4145, 4150)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public AccessControlUser aclGetUser(byte[] name) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, GETUSER.getRaw(), name);
    return BuilderFactory.ACCESS_CONTROL_USER.build(connection.getObjectMultiBulkReply());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclSetUser,String aclSetUser(byte[]),"[4152, 4157]","{'A1': [(4152, 4157)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclSetUser(byte[] name) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, SETUSER.getRaw(), name);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclSetUser,String aclSetUser(byte[]),"[4159, 4164]","{'A1': [(4159, 4164)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclSetUser(byte[] name, byte[]... rules) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, joinParameters(SETUSER.getRaw(), name, rules));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclDelUser,long aclDelUser(),"[4166, 4171]","{'A1': [(4166, 4171)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long aclDelUser(byte[]... names) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, joinParameters(DELUSER.getRaw(), names));
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclCatBinary,List<byte[]> aclCatBinary(),"[4173, 4178]","{'A1': [(4173, 4178)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> aclCatBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, CAT);
    return connection.getBinaryMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclCat,List<byte[]> aclCat(byte[]),"[4180, 4185]","{'A1': [(4180, 4185)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> aclCat(byte[] category) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, CAT.getRaw(), category);
    return connection.getBinaryMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclLogBinary,List<byte[]> aclLogBinary(),"[4187, 4192]","{'A1': [(4187, 4192)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> aclLogBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, LOG);
    return connection.getBinaryMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclLogBinary,List<byte[]> aclLogBinary(int),"[4194, 4199]","{'A1': [(4194, 4199)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> aclLogBinary(int limit) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, LOG.getRaw(), toByteArray(limit));
    return connection.getBinaryMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclLogReset,String aclLogReset(),"[4201, 4206]","{'A1': [(4201, 4206)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclLogReset() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, LOG.getRaw(), Keyword.RESET.getRaw());
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientKill,String clientKill(byte[]),"[4208, 4213]","{'A1': [(4208, 4213)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientKill(final byte[] ipPort) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, KILL.getRaw(), ipPort);
    return this.connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientKill,"String clientKill(String,int)","[4215, 4218]","{'A1': [(4215, 4218)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientKill(final String ip, final int port) {
    return clientKill(ip + ':' + port);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientKill,long clientKill(ClientKillParams),"[4220, 4225]","{'A1': [(4220, 4225)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long clientKill(ClientKillParams params) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(new CommandArguments(CLIENT).add(KILL).addParams(params));
    return this.connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientGetnameBinary,byte[] clientGetnameBinary(),"[4227, 4232]","{'A1': [(4227, 4232)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] clientGetnameBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, GETNAME);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientListBinary,byte[] clientListBinary(),"[4234, 4239]","{'A1': [(4234, 4239)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] clientListBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, LIST);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientListBinary,byte[] clientListBinary(ClientType),"[4241, 4246]","{'A1': [(4241, 4246)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] clientListBinary(ClientType type) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, LIST.getRaw(), type.getRaw());
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientListBinary,byte[] clientListBinary(),"[4248, 4253]","{'A1': [(4248, 4253)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] clientListBinary(final long... clientIds) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, clientListParams(clientIds));
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientListParams,byte[][] clientListParams(),"[4255, 4264]","{'A1': [(4255, 4264)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  private byte[][] clientListParams(final long... clientIds) {
    final byte[][] params = new byte[2 + clientIds.length][];
    int index = 0;
    params[index++] = Keyword.LIST.getRaw();
    params[index++] = ID.getRaw();
    for (final long clientId : clientIds) {
      params[index++] = toByteArray(clientId);
    }
    return params;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientInfoBinary,byte[] clientInfoBinary(),"[4266, 4271]","{'A1': [(4266, 4271)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] clientInfoBinary() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, Keyword.INFO);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientSetInfo,"String clientSetInfo(ClientAttributeOption,byte[])","[4273, 4278]","{'A10': [(4273, 4278)]}",{'A10': 1.0},A10,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientSetInfo(ClientAttributeOption attr, byte[] value) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, SETINFO.getRaw(), attr.getRaw(), value);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientSetname,String clientSetname(byte[]),"[4280, 4285]","{'A1': [(4280, 4285)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientSetname(final byte[] name) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, SETNAME.getRaw(), name);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientId,long clientId(),"[4287, 4292]","{'A1': [(4287, 4292)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long clientId() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, ID);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientUnblock,long clientUnblock(long),"[4298, 4303]","{'A1': [(4298, 4303)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long clientUnblock(final long clientId) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, UNBLOCK.getRaw(), toByteArray(clientId));
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientUnblock,"long clientUnblock(long,UnblockType)","[4310, 4315]","{'A1': [(4310, 4315)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long clientUnblock(final long clientId, final UnblockType unblockType) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, UNBLOCK.getRaw(), toByteArray(clientId), unblockType.getRaw());
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientPause,String clientPause(long),"[4317, 4322]","{'A1': [(4317, 4322)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientPause(final long timeout) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, PAUSE.getRaw(), toByteArray(timeout));
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientPause,"String clientPause(long,ClientPauseMode)","[4324, 4329]","{'A1': [(4324, 4329)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientPause(final long timeout, final ClientPauseMode mode) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, PAUSE.getRaw(), toByteArray(timeout), mode.getRaw());
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientUnpause,String clientUnpause(),"[4331, 4336]","{'A1': [(4331, 4336)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientUnpause() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, UNPAUSE);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientNoEvictOn,String clientNoEvictOn(),"[4338, 4343]","{'A1': [(4341, 4341)], 'A12': [(4338, 4340), (4342, 4343)]}","{'A1': 0.16666666666666666, 'A12': 0.8333333333333334}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientNoEvictOn() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, ""NO-EVICT"", ""ON"");
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientNoEvictOff,String clientNoEvictOff(),"[4345, 4350]","{'A1': [(4348, 4348)], 'A12': [(4345, 4347), (4349, 4350)]}","{'A1': 0.16666666666666666, 'A12': 0.8333333333333334}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientNoEvictOff() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, ""NO-EVICT"", ""OFF"");
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientNoTouchOn,String clientNoTouchOn(),"[4352, 4357]","{'A10': [(4352, 4357)]}",{'A10': 1.0},A10,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientNoTouchOn() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, ""NO-TOUCH"", ""ON"");
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientNoTouchOff,String clientNoTouchOff(),"[4359, 4364]","{'A10': [(4359, 4364)]}",{'A10': 1.0},A10,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientNoTouchOff() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, ""NO-TOUCH"", ""OFF"");
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientTrackingInfo,TrackingInfo clientTrackingInfo(),"[4366, 4371]","{'A70': [(4366, 4371)]}",{'A70': 1.0},A70,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public TrackingInfo clientTrackingInfo() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, ""TRACKINGINFO"");
    return TrackingInfo.TRACKING_INFO_BUILDER.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,time,List<String> time(),"[4373, 4377]","{'A1': [(4373, 4377)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public List<String> time() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.TIME);
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,migrate,"String migrate(String,int,byte[],int,int)","[4379, 4384]","{'A1': [(4379, 4384)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String migrate(final String host, final int port, final byte[] key,
      final int destinationDb, final int timeout) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.migrate(host, port, key, destinationDb, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,migrate,"String migrate(String,int,int,int,MigrateParams)","[4386, 4391]","{'A1': [(4386, 4391)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String migrate(final String host, final int port, final int destinationDB,
      final int timeout, final MigrateParams params, final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.migrate(host, port, destinationDB, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,migrate,"String migrate(String,int,byte[],int)","[4393, 4397]","{'A1': [(4393, 4397)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String migrate(String host, int port, byte[] key, int timeout) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.migrate(host, port, key, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,migrate,"String migrate(String,int,int,MigrateParams)","[4399, 4403]","{'A1': [(4399, 4403)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String migrate(String host, int port, int timeout, MigrateParams params, byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.migrate(host, port, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,waitReplicas,"long waitReplicas(int,long)","[4405, 4410]","{'A1': [(4405, 4410)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long waitReplicas(final int replicas, final long timeout) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(WAIT, toByteArray(replicas), toByteArray(timeout));
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,waitAOF,"KeyValue<Long, Long> waitAOF(long,long,long)","[4412, 4417]","{'A11': [(4412, 4417)]}",{'A11': 1.0},A11,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<Long, Long> waitAOF(long numLocal, long numReplicas, long timeout) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(WAITAOF, toByteArray(numLocal), toByteArray(numReplicas), toByteArray(timeout));
    return BuilderFactory.LONG_LONG_PAIR.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pfadd,long pfadd(byte[]),"[4419, 4423]","{'A1': [(4419, 4423)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pfadd(final byte[] key, final byte[]... elements) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pfadd(key, elements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pfcount,long pfcount(byte[]),"[4425, 4429]","{'A1': [(4425, 4429)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pfcount(final byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pfcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pfmerge,String pfmerge(byte[]),"[4431, 4435]","{'A1': [(4431, 4435)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String pfmerge(final byte[] destkey, final byte[]... sourcekeys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pfmerge(destkey, sourcekeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pfcount,long pfcount(),"[4437, 4441]","{'A1': [(4437, 4441)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pfcount(final byte[]... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pfcount(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scan,ScanResult<byte[]> scan(byte[]),"[4443, 4447]","{'A1': [(4443, 4447)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<byte[]> scan(final byte[] cursor) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.scan(cursor));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scan,"ScanResult<byte[]> scan(byte[],ScanParams)","[4449, 4453]","{'A1': [(4449, 4453)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<byte[]> scan(final byte[] cursor, final ScanParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.scan(cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scan,"ScanResult<byte[]> scan(byte[],ScanParams,byte[])","[4455, 4459]","{'A1': [(4455, 4459)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<byte[]> scan(final byte[] cursor, final ScanParams params, final byte[] type) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.scan(cursor, params, type));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hscan,"ScanResult<Map.Entry<byte[], byte[]>> hscan(byte[],byte[],ScanParams)","[4461, 4466]","{'A1': [(4461, 4466)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<Map.Entry<byte[], byte[]>> hscan(final byte[] key, final byte[] cursor,
      final ScanParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hscanNoValues,"ScanResult<byte[]> hscanNoValues(byte[],byte[],ScanParams)","[4468, 4472]","{'A40': [(4468, 4472)]}",{'A40': 1.0},A40,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<byte[]> hscanNoValues(final byte[] key, final byte[] cursor, final ScanParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hscanNoValues(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sscan,"ScanResult<byte[]> sscan(byte[],byte[])","[4474, 4477]","{'A1': [(4474, 4477)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<byte[]> sscan(final byte[] key, final byte[] cursor) {
    return sscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sscan,"ScanResult<byte[]> sscan(byte[],byte[],ScanParams)","[4479, 4483]","{'A1': [(4479, 4483)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<byte[]> sscan(final byte[] key, final byte[] cursor, final ScanParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zscan,"ScanResult<Tuple> zscan(byte[],byte[])","[4485, 4488]","{'A1': [(4485, 4488)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<Tuple> zscan(final byte[] key, final byte[] cursor) {
    return zscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zscan,"ScanResult<Tuple> zscan(byte[],byte[],ScanParams)","[4490, 4494]","{'A1': [(4490, 4494)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<Tuple> zscan(final byte[] key, final byte[] cursor, final ScanParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geoadd,"long geoadd(byte[],double,double,byte[])","[4496, 4501]","{'A1': [(4496, 4501)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geoadd(final byte[] key, final double longitude, final double latitude,
      final byte[] member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geoadd(key, longitude, latitude, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geoadd,"long geoadd(byte[],Map<byte[], GeoCoordinate>)","[4503, 4507]","{'A1': [(4503, 4507)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geoadd(final byte[] key, final Map<byte[], GeoCoordinate> memberCoordinateMap) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geoadd(key, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geoadd,"long geoadd(byte[],GeoAddParams,Map<byte[], GeoCoordinate>)","[4509, 4513]","{'A1': [(4509, 4513)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geoadd(final byte[] key, final GeoAddParams params, final Map<byte[], GeoCoordinate> memberCoordinateMap) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geoadd(key, params, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geodist,"Double geodist(byte[],byte[],byte[])","[4515, 4519]","{'A1': [(4515, 4519)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double geodist(final byte[] key, final byte[] member1, final byte[] member2) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geodist(key, member1, member2));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geodist,"Double geodist(byte[],byte[],byte[],GeoUnit)","[4521, 4526]","{'A1': [(4521, 4526)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double geodist(final byte[] key, final byte[] member1, final byte[] member2,
      final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geodist(key, member1, member2, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geohash,List<byte[]> geohash(byte[]),"[4528, 4532]","{'A1': [(4528, 4532)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> geohash(final byte[] key, final byte[]... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geohash(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geopos,List<GeoCoordinate> geopos(byte[]),"[4534, 4538]","{'A1': [(4534, 4538)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoCoordinate> geopos(final byte[] key, final byte[]... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geopos(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadius,"List<GeoRadiusResponse> georadius(byte[],double,double,double,GeoUnit)","[4540, 4545]","{'A1': [(4540, 4545)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadius(final byte[] key, final double longitude,
      final double latitude, final double radius, final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadius(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusReadonly,"List<GeoRadiusResponse> georadiusReadonly(byte[],double,double,double,GeoUnit)","[4547, 4552]","{'A1': [(4547, 4552)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusReadonly(final byte[] key, final double longitude,
      final double latitude, final double radius, final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadius,"List<GeoRadiusResponse> georadius(byte[],double,double,double,GeoUnit,GeoRadiusParam)","[4554, 4559]","{'A1': [(4554, 4559)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadius(final byte[] key, final double longitude,
      final double latitude, final double radius, final GeoUnit unit, final GeoRadiusParam param) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadius(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusStore,"long georadiusStore(byte[],double,double,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[4561, 4567]","{'A1': [(4561, 4567)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long georadiusStore(final byte[] key, final double longitude, final double latitude,
      final double radius, final GeoUnit unit, final GeoRadiusParam param,
      final GeoRadiusStoreParam storeParam) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusStore(key, longitude, latitude, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusReadonly,"List<GeoRadiusResponse> georadiusReadonly(byte[],double,double,double,GeoUnit,GeoRadiusParam)","[4569, 4574]","{'A1': [(4569, 4574)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusReadonly(final byte[] key, final double longitude,
      final double latitude, final double radius, final GeoUnit unit, final GeoRadiusParam param) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMember,"List<GeoRadiusResponse> georadiusByMember(byte[],byte[],double,GeoUnit)","[4576, 4581]","{'A1': [(4576, 4581)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusByMember(final byte[] key, final byte[] member,
      final double radius, final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMember(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMemberReadonly,"List<GeoRadiusResponse> georadiusByMemberReadonly(byte[],byte[],double,GeoUnit)","[4583, 4588]","{'A1': [(4583, 4588)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusByMemberReadonly(final byte[] key, final byte[] member,
      final double radius, final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMember,"List<GeoRadiusResponse> georadiusByMember(byte[],byte[],double,GeoUnit,GeoRadiusParam)","[4590, 4595]","{'A1': [(4590, 4595)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusByMember(final byte[] key, final byte[] member,
      final double radius, final GeoUnit unit, final GeoRadiusParam param) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMember(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMemberStore,"long georadiusByMemberStore(byte[],byte[],double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[4597, 4602]","{'A1': [(4597, 4602)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long georadiusByMemberStore(final byte[] key, final byte[] member, final double radius,
      final GeoUnit unit, final GeoRadiusParam param, final GeoRadiusStoreParam storeParam) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMemberStore(key, member, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],byte[],double,GeoUnit)","[4604, 4608]","{'A12': [(4604, 4608)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, byte[] member, double radius, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],GeoCoordinate,double,GeoUnit)","[4610, 4614]","{'A12': [(4610, 4614)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, GeoCoordinate coord, double radius, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],byte[],double,double,GeoUnit)","[4616, 4620]","{'A12': [(4616, 4620)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, byte[] member, double width, double height, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],GeoCoordinate,double,double,GeoUnit)","[4622, 4626]","{'A12': [(4622, 4626)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(byte[],GeoSearchParam)","[4628, 4632]","{'A12': [(4628, 4632)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(byte[] key, GeoSearchParam params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(byte[],byte[],byte[],double,GeoUnit)","[4634, 4638]","{'A12': [(4634, 4638)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, byte[] member, double radius, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(byte[],byte[],GeoCoordinate,double,GeoUnit)","[4640, 4644]","{'A12': [(4640, 4644)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, GeoCoordinate coord, double radius, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(byte[],byte[],byte[],double,double,GeoUnit)","[4646, 4650]","{'A12': [(4646, 4650)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, byte[] member, double width, double height, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(byte[],byte[],GeoCoordinate,double,double,GeoUnit)","[4652, 4656]","{'A12': [(4652, 4656)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(byte[],byte[],GeoSearchParam)","[4658, 4662]","{'A12': [(4658, 4662)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(byte[] dest, byte[] src, GeoSearchParam params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStoreStoreDist,"long geosearchStoreStoreDist(byte[],byte[],GeoSearchParam)","[4664, 4668]","{'A12': [(4664, 4668)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStoreStoreDist(byte[] dest, byte[] src, GeoSearchParam params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStoreStoreDist(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMemberReadonly,"List<GeoRadiusResponse> georadiusByMemberReadonly(byte[],byte[],double,GeoUnit,GeoRadiusParam)","[4670, 4675]","{'A1': [(4670, 4675)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusByMemberReadonly(final byte[] key, final byte[] member,
      final double radius, final GeoUnit unit, final GeoRadiusParam param) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitfield,List<Long> bitfield(byte[]),"[4677, 4681]","{'A1': [(4677, 4681)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> bitfield(final byte[] key, final byte[]... arguments) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitfield(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitfieldReadonly,List<Long> bitfieldReadonly(byte[]),"[4683, 4687]","{'A1': [(4683, 4687)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> bitfieldReadonly(byte[] key, final byte[]... arguments) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitfieldReadonly(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hstrlen,"long hstrlen(byte[],byte[])","[4689, 4693]","{'A1': [(4689, 4693)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hstrlen(final byte[] key, final byte[] field) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hstrlen(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpire,"List<Long> hexpire(byte[],long)","[4695, 4699]","{'A1': [(4695, 4699)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpire(byte[] key, long seconds, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpire(key, seconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpire,"List<Long> hexpire(byte[],long,ExpiryOption)","[4701, 4705]","{'A1': [(4701, 4705)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpire(byte[] key, long seconds, ExpiryOption condition, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpire(key, seconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpire,"List<Long> hpexpire(byte[],long)","[4707, 4711]","{'A1': [(4707, 4711)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpire(byte[] key, long milliseconds, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpire(key, milliseconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpire,"List<Long> hpexpire(byte[],long,ExpiryOption)","[4713, 4717]","{'A1': [(4713, 4717)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpire(byte[] key, long milliseconds, ExpiryOption condition, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpire(key, milliseconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpireAt,"List<Long> hexpireAt(byte[],long)","[4719, 4723]","{'A1': [(4719, 4723)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpireAt(byte[] key, long unixTimeSeconds, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpireAt(key, unixTimeSeconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpireAt,"List<Long> hexpireAt(byte[],long,ExpiryOption)","[4725, 4729]","{'A1': [(4725, 4729)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpireAt(byte[] key, long unixTimeSeconds, ExpiryOption condition, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpireAt(key, unixTimeSeconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpireAt,"List<Long> hpexpireAt(byte[],long)","[4731, 4735]","{'A1': [(4731, 4735)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpireAt(byte[] key, long unixTimeMillis, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpireAt(key, unixTimeMillis, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpireAt,"List<Long> hpexpireAt(byte[],long,ExpiryOption)","[4737, 4741]","{'A1': [(4737, 4741)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpireAt(byte[] key, long unixTimeMillis, ExpiryOption condition, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpireAt(key, unixTimeMillis, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpireTime,List<Long> hexpireTime(byte[]),"[4743, 4747]","{'A1': [(4743, 4747)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpireTime(byte[] key, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpireTime,List<Long> hpexpireTime(byte[]),"[4749, 4753]","{'A1': [(4749, 4753)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpireTime(byte[] key, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,httl,List<Long> httl(byte[]),"[4755, 4759]","{'A1': [(4755, 4759)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> httl(byte[] key, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.httl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpttl,List<Long> hpttl(byte[]),"[4761, 4765]","{'A1': [(4761, 4765)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpttl(byte[] key, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpttl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpersist,List<Long> hpersist(byte[]),"[4767, 4771]","{'A1': [(4767, 4771)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpersist(byte[] key, byte[]... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpersist(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xread,List<Object> xread(XReadParams),"[4779, 4784]","{'A1': [(4780, 4784)], 'A4': [(4779, 4779)]}","{'A1': 0.8333333333333334, 'A4': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Deprecated
  @Override
  public List<Object> xread(XReadParams xReadParams, Entry<byte[], byte[]>... streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xread(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xreadGroup,"List<Object> xreadGroup(byte[],byte[],XReadGroupParams)","[4791, 4797]","{'A1': [(4792, 4795), (4797, 4797)], 'A12': [(4796, 4796)], 'A4': [(4791, 4791)]}","{'A1': 0.7142857142857143, 'A12': 0.14285714285714285, 'A4': 0.14285714285714285}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Deprecated
  @Override
  public List<Object> xreadGroup(byte[] groupName, byte[] consumer,
      XReadGroupParams xReadGroupParams, Entry<byte[], byte[]>... streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xreadBinary,"List<Map.Entry<byte[], List<StreamEntryBinary>>> xreadBinary(XReadParams,Map<byte[], StreamEntryID>)","[4799, 4804]","{'A4': [(4799, 4804)]}",{'A4': 1.0},A4,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map.Entry<byte[], List<StreamEntryBinary>>> xreadBinary(XReadParams xReadParams,
      Map<byte[], StreamEntryID> streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xreadBinary(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xreadBinaryAsMap,"Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams,Map<byte[], StreamEntryID>)","[4806, 4811]","{'A4': [(4806, 4811)]}",{'A4': 1.0},A4,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams,
      Map<byte[], StreamEntryID> streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xreadGroupBinary,"List<Map.Entry<byte[], List<StreamEntryBinary>>> xreadGroupBinary(byte[],byte[],XReadGroupParams,Map<byte[], StreamEntryID>)","[4813, 4818]","{'A4': [(4813, 4818)]}",{'A4': 1.0},A4,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map.Entry<byte[], List<StreamEntryBinary>>> xreadGroupBinary(byte[] groupName, byte[] consumer,
      XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xreadGroupBinary(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xreadGroupBinaryAsMap,"Map<byte[], List<StreamEntryBinary>> xreadGroupBinaryAsMap(byte[],byte[],XReadGroupParams,Map<byte[], StreamEntryID>)","[4820, 4825]","{'A4': [(4820, 4825)]}",{'A4': 1.0},A4,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<byte[], List<StreamEntryBinary>> xreadGroupBinaryAsMap(byte[] groupName, byte[] consumer,
      XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xreadGroupBinaryAsMap(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xadd,"byte[] xadd(byte[],XAddParams,Map<byte[], byte[]>)","[4827, 4831]","{'A1': [(4827, 4831)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] xadd(final byte[] key, final XAddParams params, final Map<byte[], byte[]> hash) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xadd(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xlen,long xlen(byte[]),"[4833, 4837]","{'A1': [(4833, 4837)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xlen(byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrange,"List<Object> xrange(byte[],byte[],byte[])","[4839, 4843]","{'A1': [(4839, 4843)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> xrange(byte[] key, byte[] start, byte[] end) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrange(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrange,"List<Object> xrange(byte[],byte[],byte[],int)","[4845, 4849]","{'A1': [(4845, 4849)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> xrange(byte[] key, byte[] start, byte[] end, int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrange(key, start, end, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrevrange,"List<Object> xrevrange(byte[],byte[],byte[])","[4851, 4855]","{'A1': [(4851, 4855)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> xrevrange(byte[] key, byte[] end, byte[] start) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrevrange(key, end, start));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrevrange,"List<Object> xrevrange(byte[],byte[],byte[],int)","[4857, 4861]","{'A1': [(4857, 4861)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> xrevrange(byte[] key, byte[] end, byte[] start, int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrevrange(key, end, start, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xack,"long xack(byte[],byte[])","[4863, 4867]","{'A1': [(4863, 4867)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xack(byte[] key, byte[] group, byte[]... ids) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xack(key, group, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupCreate,"String xgroupCreate(byte[],byte[],byte[],boolean)","[4869, 4873]","{'A1': [(4869, 4873)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String xgroupCreate(byte[] key, byte[] consumer, byte[] id, boolean makeStream) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupCreate(key, consumer, id, makeStream));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupSetID,"String xgroupSetID(byte[],byte[],byte[])","[4875, 4879]","{'A1': [(4875, 4879)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String xgroupSetID(byte[] key, byte[] consumer, byte[] id) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupSetID(key, consumer, id));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupDestroy,"long xgroupDestroy(byte[],byte[])","[4881, 4885]","{'A1': [(4881, 4885)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xgroupDestroy(byte[] key, byte[] consumer) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupDestroy(key, consumer));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupCreateConsumer,"boolean xgroupCreateConsumer(byte[],byte[],byte[])","[4887, 4891]","{'A1': [(4887, 4887), (4889, 4889)], 'A12': [(4888, 4888), (4890, 4891)]}","{'A1': 0.4, 'A12': 0.6}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean xgroupCreateConsumer(byte[] key, byte[] groupName, byte[] consumerName) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupCreateConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupDelConsumer,"long xgroupDelConsumer(byte[],byte[],byte[])","[4893, 4897]","{'A1': [(4897, 4897)], 'A12': [(4893, 4896)]}","{'A1': 0.2, 'A12': 0.8}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xgroupDelConsumer(byte[] key, byte[] groupName, byte[] consumerName) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupDelConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xdel,long xdel(byte[]),"[4899, 4903]","{'A1': [(4899, 4903)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xdel(byte[] key, byte[]... ids) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xdel(key, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xtrim,"long xtrim(byte[],long,boolean)","[4905, 4909]","{'A1': [(4905, 4909)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xtrim(byte[] key, long maxLen, boolean approximateLength) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xtrim(key, maxLen, approximateLength));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xtrim,"long xtrim(byte[],XTrimParams)","[4911, 4915]","{'A1': [(4911, 4915)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xtrim(byte[] key, XTrimParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xtrim(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xpending,"Object xpending(byte[],byte[])","[4917, 4921]","{'A1': [(4917, 4917), (4919, 4919), (4921, 4921)], 'A12': [(4918, 4918), (4920, 4920)]}","{'A1': 0.6, 'A12': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object xpending(final byte[] key, final byte[] groupName) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xpending(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xpending,"List<Object> xpending(byte[],byte[],XPendingParams)","[4923, 4927]","{'A1': [(4923, 4923), (4925, 4925), (4927, 4927)], 'A12': [(4924, 4924), (4926, 4926)]}","{'A1': 0.6, 'A12': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> xpending(final byte[] key, final byte[] groupName, final XPendingParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xpending(key, groupName, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xclaim,"List<byte[]> xclaim(byte[],byte[],byte[],long,XClaimParams)","[4929, 4934]","{'A1': [(4929, 4929), (4931, 4932), (4934, 4934)], 'A12': [(4930, 4930), (4933, 4933)]}","{'A1': 0.6666666666666666, 'A12': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> xclaim(byte[] key, byte[] group, byte[] consumerName, long minIdleTime,
      XClaimParams params, byte[]... ids) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xclaim(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xclaimJustId,"List<byte[]> xclaimJustId(byte[],byte[],byte[],long,XClaimParams)","[4936, 4941]","{'A1': [(4936, 4936), (4938, 4939), (4941, 4941)], 'A12': [(4937, 4937), (4940, 4940)]}","{'A1': 0.6666666666666666, 'A12': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> xclaimJustId(byte[] key, byte[] group, byte[] consumerName, long minIdleTime,
      XClaimParams params, byte[]... ids) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xclaimJustId(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xautoclaim,"List<Object> xautoclaim(byte[],byte[],byte[],long,byte[],XAutoClaimParams)","[4943, 4948]","{'A1': [(4943, 4948)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> xautoclaim(byte[] key, byte[] groupName, byte[] consumerName,
      long minIdleTime, byte[] start, XAutoClaimParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xautoclaim(key, groupName, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xautoclaimJustId,"List<Object> xautoclaimJustId(byte[],byte[],byte[],long,byte[],XAutoClaimParams)","[4950, 4955]","{'A1': [(4950, 4955)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> xautoclaimJustId(byte[] key, byte[] groupName, byte[] consumerName,
      long minIdleTime, byte[] start, XAutoClaimParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xautoclaimJustId(key, groupName, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoStream,Object xinfoStream(byte[]),"[4957, 4961]","{'A1': [(4957, 4961)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object xinfoStream(byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xinfoStream(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoStreamFull,Object xinfoStreamFull(byte[]),"[4963, 4967]","{'A1': [(4964, 4964)], 'A26': [(4963, 4963), (4965, 4967)]}","{'A1': 0.2, 'A26': 0.8}",A26,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object xinfoStreamFull(byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xinfoStreamFull(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoStreamFull,"Object xinfoStreamFull(byte[],int)","[4969, 4973]","{'A1': [(4970, 4970)], 'A26': [(4969, 4969), (4971, 4973)]}","{'A1': 0.2, 'A26': 0.8}",A26,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object xinfoStreamFull(byte[] key, int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xinfoStreamFull(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoGroups,List<Object> xinfoGroups(byte[]),"[4975, 4979]","{'A1': [(4975, 4979)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> xinfoGroups(byte[] key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xinfoGroups(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoConsumers,"List<Object> xinfoConsumers(byte[],byte[])","[4981, 4985]","{'A1': [(4981, 4985)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> xinfoConsumers(byte[] key, byte[] group) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xinfoConsumers(key, group));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sendCommand,Object sendCommand(ProtocolCommand),"[4987, 4991]","{'A1': [(4987, 4991)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Object sendCommand(ProtocolCommand cmd, byte[]... args) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(cmd, args);
    return connection.getOne();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sendBlockingCommand,Object sendBlockingCommand(ProtocolCommand),"[4993, 5002]","{'A1': [(4993, 5002)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Object sendBlockingCommand(ProtocolCommand cmd, byte[]... args) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(cmd, args);
    connection.setTimeoutInfinite();
    try {
      return connection.getOne();
    } finally {
      connection.rollbackTimeout();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sendCommand,Object sendCommand(ProtocolCommand),"[5004, 5006]","{'A1': [(5004, 5006)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Object sendCommand(ProtocolCommand cmd) {
    return sendCommand(cmd, DUMMY_ARRAY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,copy,"boolean copy(String,String,int,boolean)","[5016, 5020]","{'A1': [(5016, 5020)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean copy(String srcKey, String dstKey, int db, boolean replace) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.copy(srcKey, dstKey, db, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,copy,"boolean copy(String,String,boolean)","[5029, 5033]","{'A1': [(5029, 5033)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean copy(String srcKey, String dstKey, boolean replace) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.copy(srcKey, dstKey, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,ping,String ping(String),"[5040, 5045]","{'A1': [(5040, 5045)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String ping(final String message) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.PING, message);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,set,"String set(String,String)","[5056, 5060]","{'A1': [(5056, 5060)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String set(final String key, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.set(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,set,"String set(String,String,SetParams)","[5073, 5077]","{'A1': [(5073, 5077)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String set(final String key, final String value, final SetParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.set(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,get,String get(String),"[5088, 5092]","{'A1': [(5088, 5092)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String get(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.get(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setGet,"String setGet(String,String)","[5094, 5098]","{'A1': [(5094, 5098)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String setGet(final String key, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setGet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setGet,"String setGet(String,String,SetParams)","[5100, 5104]","{'A1': [(5100, 5104)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String setGet(final String key, final String value, final SetParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setGet(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getDel,String getDel(String),"[5114, 5118]","{'A1': [(5114, 5118)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String getDel(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getDel(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getEx,"String getEx(String,GetExParams)","[5120, 5124]","{'A1': [(5120, 5124)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String getEx(String key, GetExParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getEx(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,exists,long exists(),"[5132, 5136]","{'A1': [(5132, 5136)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long exists(final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.exists(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,exists,boolean exists(String),"[5145, 5149]","{'A1': [(5145, 5149)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean exists(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.exists(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,del,long del(),"[5157, 5161]","{'A1': [(5157, 5161)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long del(final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.del(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,del,long del(String),"[5163, 5167]","{'A1': [(5163, 5167)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long del(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.del(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,unlink,long unlink(),"[5182, 5186]","{'A1': [(5182, 5186)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long unlink(final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.unlink(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,unlink,long unlink(String),"[5188, 5192]","{'A1': [(5188, 5192)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long unlink(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.unlink(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,type,String type(String),"[5202, 5206]","{'A1': [(5202, 5206)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String type(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.type(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,keys,Set<String> keys(String),"[5208, 5212]","{'A1': [(5208, 5212)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<String> keys(final String pattern) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.keys(pattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,randomKey,String randomKey(),"[5220, 5224]","{'A1': [(5220, 5224)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String randomKey() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.randomKey());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rename,"String rename(String,String)","[5235, 5239]","{'A1': [(5235, 5239)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String rename(final String oldkey, final String newkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rename(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,renamenx,"long renamenx(String,String)","[5249, 5253]","{'A1': [(5249, 5253)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long renamenx(final String oldkey, final String newkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.renamenx(oldkey, newkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expire,"long expire(String,long)","[5276, 5280]","{'A1': [(5276, 5280)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expire(final String key, final long seconds) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.expire(key, seconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expire,"long expire(String,long,ExpiryOption)","[5292, 5296]","{'A12': [(5292, 5296)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expire(final String key, final long seconds, final ExpiryOption expiryOption) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.expire(key, seconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpire,"long pexpire(String,long)","[5298, 5302]","{'A12': [(5298, 5302)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpire(final String key, final long milliseconds) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpire(key, milliseconds));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpire,"long pexpire(String,long,ExpiryOption)","[5304, 5308]","{'A12': [(5304, 5308)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpire(final String key, final long milliseconds, final ExpiryOption expiryOption) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expireTime,long expireTime(String),"[5320, 5324]","{'A12': [(5320, 5324)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expireTime(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.expireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpireTime,long pexpireTime(String),"[5336, 5340]","{'A12': [(5336, 5340)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpireTime(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpireTime(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expireAt,"long expireAt(String,long)","[5365, 5369]","{'A1': [(5365, 5369)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expireAt(final String key, final long unixTime) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.expireAt(key, unixTime));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,expireAt,"long expireAt(String,long,ExpiryOption)","[5380, 5384]","{'A12': [(5380, 5384)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long expireAt(String key, long unixTime, ExpiryOption expiryOption) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpireAt,"long pexpireAt(String,long)","[5396, 5400]","{'A12': [(5396, 5400)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpireAt(final String key, final long millisecondsTimestamp) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpireAt(key, millisecondsTimestamp));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pexpireAt,"long pexpireAt(String,long,ExpiryOption)","[5412, 5416]","{'A12': [(5412, 5416)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pexpireAt(String key, long millisecondsTimestamp, ExpiryOption expiryOption) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pexpireAt(key, millisecondsTimestamp, expiryOption));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,ttl,long ttl(String),"[5426, 5430]","{'A1': [(5426, 5430)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long ttl(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.ttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,touch,long touch(),"[5438, 5442]","{'A1': [(5438, 5442)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long touch(final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.touch(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,touch,long touch(String),"[5444, 5448]","{'A1': [(5444, 5448)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long touch(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.touch(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,move,"long move(String,int)","[5460, 5465]","{'A1': [(5460, 5465)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long move(final String key, final int dbIndex) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MOVE, encode(key), toByteArray(dbIndex));
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getSet,"String getSet(String,String)","[5478, 5483]","{'A1': [(5478, 5483)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Deprecated
  @Override
  public String getSet(final String key, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getSet(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,mget,List<String> mget(),"[5494, 5498]","{'A1': [(5494, 5498)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> mget(final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.mget(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setnx,"long setnx(String,String)","[5509, 5513]","{'A1': [(5509, 5513)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long setnx(final String key, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setnx(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setex,"String setex(String,long,String)","[5526, 5530]","{'A1': [(5526, 5530)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String setex(final String key, final long seconds, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setex(key, seconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,mset,String mset(),"[5548, 5552]","{'A1': [(5548, 5552)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String mset(final String... keysvalues) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.mset(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,msetnx,long msetnx(),"[5570, 5574]","{'A1': [(5570, 5574)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long msetnx(final String... keysvalues) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.msetnx(keysvalues));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,decrBy,"long decrBy(String,long)","[5594, 5598]","{'A1': [(5594, 5598)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long decrBy(final String key, final long decrement) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.decrBy(key, decrement));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,decr,long decr(String),"[5617, 5621]","{'A1': [(5617, 5621)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long decr(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.decr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,incrBy,"long incrBy(String,long)","[5641, 5645]","{'A1': [(5641, 5645)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long incrBy(final String key, final long increment) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.incrBy(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,incrByFloat,"double incrByFloat(String,double)","[5662, 5666]","{'A1': [(5662, 5666)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public double incrByFloat(final String key, final double increment) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.incrByFloat(key, increment));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,incr,long incr(String),"[5685, 5689]","{'A1': [(5685, 5689)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long incr(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.incr(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,append,"long append(String,String)","[5703, 5707]","{'A1': [(5703, 5707)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long append(final String key, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.append(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,substr,"String substr(String,int,int)","[5725, 5729]","{'A1': [(5725, 5729)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String substr(final String key, final int start, final int end) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.substr(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hset,"long hset(String,String,String)","[5743, 5747]","{'A1': [(5743, 5747)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hset(final String key, final String field, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hset(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hset,"long hset(String,Map<String, String>)","[5749, 5753]","{'A1': [(5749, 5753)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hset(final String key, final Map<String, String> hash) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hsetex,"long hsetex(String,HSetExParams,String,String)","[5755, 5759]","{'A35': [(5755, 5759)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hsetex(String key, HSetExParams params, String field, String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hsetex(key, params, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hsetex,"long hsetex(String,HSetExParams,Map<String, String>)","[5761, 5765]","{'A35': [(5761, 5765)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hsetex(String key, HSetExParams params, Map<String, String> hash) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hsetex(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hget,"String hget(String,String)","[5777, 5781]","{'A1': [(5777, 5781)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String hget(final String key, final String field) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hget(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hgetex,"List<String> hgetex(String,HGetExParams)","[5783, 5787]","{'A35': [(5783, 5787)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> hgetex(String key, HGetExParams params, String... fields) {    
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hgetex(key, params, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hgetdel,List<String> hgetdel(String),"[5789, 5793]","{'A35': [(5789, 5793)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> hgetdel(String key, String... fields) {    
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hgetdel(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hsetnx,"long hsetnx(String,String,String)","[5804, 5808]","{'A1': [(5804, 5808)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hsetnx(final String key, final String field, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hsetnx(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hmset,"String hmset(String,Map<String, String>)","[5820, 5824]","{'A1': [(5820, 5824)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String hmset(final String key, final Map<String, String> hash) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hmset(key, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hmget,List<String> hmget(String),"[5837, 5841]","{'A1': [(5837, 5841)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> hmget(final String key, final String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hmget(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hincrBy,"long hincrBy(String,String,long)","[5857, 5861]","{'A1': [(5857, 5861)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hincrBy(final String key, final String field, final long value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hincrBy(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hincrByFloat,"double hincrByFloat(String,String,double)","[5878, 5882]","{'A1': [(5878, 5882)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public double hincrByFloat(final String key, final String field, final double value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hincrByFloat(key, field, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexists,"boolean hexists(String,String)","[5891, 5895]","{'A1': [(5891, 5895)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean hexists(final String key, final String field) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexists(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hdel,long hdel(String),"[5908, 5912]","{'A1': [(5908, 5912)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hdel(final String key, final String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hdel(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hlen,long hlen(String),"[5922, 5926]","{'A1': [(5922, 5926)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hlen(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hkeys,Set<String> hkeys(String),"[5935, 5939]","{'A1': [(5935, 5939)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<String> hkeys(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hkeys(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hvals,List<String> hvals(String),"[5948, 5952]","{'A1': [(5948, 5952)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> hvals(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hvals(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hgetAll,"Map<String, String> hgetAll(String)","[5961, 5965]","{'A1': [(5961, 5965)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, String> hgetAll(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hgetAll(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hrandfield,String hrandfield(String),"[5974, 5978]","{'A1': [(5974, 5978)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String hrandfield(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hrandfield(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hrandfield,"List<String> hrandfield(String,long)","[5988, 5992]","{'A1': [(5988, 5992)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> hrandfield(final String key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hrandfield(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hrandfieldWithValues,"List<Map.Entry<String, String>> hrandfieldWithValues(String,long)","[6002, 6006]","{'A1': [(6002, 6002), (6004, 6006)], 'A9': [(6003, 6003)]}","{'A1': 0.8, 'A9': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map.Entry<String, String>> hrandfieldWithValues(final String key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hrandfieldWithValues(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpush,long rpush(String),"[6018, 6022]","{'A1': [(6018, 6022)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long rpush(final String key, final String... strings) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpush(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpush,long lpush(String),"[6034, 6038]","{'A1': [(6034, 6038)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long lpush(final String key, final String... strings) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpush(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,llen,long llen(String),"[6049, 6053]","{'A1': [(6049, 6053)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long llen(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.llen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lrange,"List<String> lrange(String,long,long)","[6087, 6091]","{'A1': [(6087, 6091)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> lrange(final String key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,ltrim,"String ltrim(String,long,long)","[6123, 6127]","{'A1': [(6123, 6127)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String ltrim(final String key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.ltrim(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lindex,"String lindex(String,long)","[6145, 6149]","{'A1': [(6145, 6149)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String lindex(final String key, final long index) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lindex(key, index));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lset,"String lset(String,long,String)","[6170, 6174]","{'A1': [(6170, 6174)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String lset(final String key, final long index, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lset(key, index, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lrem,"long lrem(String,long,String)","[6191, 6195]","{'A1': [(6191, 6195)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long lrem(final String key, final long count, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lrem(key, count, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpop,String lpop(String),"[6207, 6211]","{'A1': [(6207, 6211)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String lpop(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpop,"List<String> lpop(String,int)","[6213, 6217]","{'A1': [(6213, 6217)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> lpop(final String key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpos,"Long lpos(String,String)","[6219, 6223]","{'A1': [(6219, 6223)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long lpos(final String key, final String element) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpos(key, element));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpos,"Long lpos(String,String,LPosParams)","[6225, 6229]","{'A1': [(6225, 6229)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long lpos(final String key, final String element, final LPosParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpos(key, element, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpos,"List<Long> lpos(String,String,LPosParams,long)","[6231, 6236]","{'A1': [(6231, 6236)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> lpos(final String key, final String element, final LPosParams params,
      final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpos(key, element, params, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpop,String rpop(String),"[6248, 6252]","{'A1': [(6248, 6252)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String rpop(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpop,"List<String> rpop(String,int)","[6254, 6258]","{'A1': [(6254, 6258)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> rpop(final String key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpoplpush,"String rpoplpush(String,String)","[6275, 6279]","{'A1': [(6275, 6279)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String rpoplpush(final String srckey, final String dstkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpoplpush(srckey, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sadd,long sadd(String),"[6291, 6295]","{'A1': [(6291, 6295)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sadd(final String key, final String... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sadd(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,smembers,Set<String> smembers(String),"[6305, 6309]","{'A1': [(6305, 6309)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<String> smembers(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.smembers(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,srem,long srem(String),"[6320, 6324]","{'A1': [(6320, 6324)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long srem(final String key, final String... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.srem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,spop,String spop(String),"[6337, 6341]","{'A1': [(6337, 6341)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String spop(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.spop(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,spop,"Set<String> spop(String,long)","[6343, 6347]","{'A1': [(6343, 6347)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<String> spop(final String key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.spop(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,smove,"long smove(String,String,String)","[6368, 6372]","{'A1': [(6368, 6372)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long smove(final String srckey, final String dstkey, final String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.smove(srckey, dstkey, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scard,long scard(String),"[6380, 6384]","{'A1': [(6380, 6384)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long scard(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.scard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sismember,"boolean sismember(String,String)","[6394, 6398]","{'A1': [(6394, 6398)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean sismember(final String key, final String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sismember(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,smismember,List<Boolean> smismember(String),"[6408, 6412]","{'A1': [(6408, 6412)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Boolean> smismember(final String key, final String... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.smismember(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sinter,Set<String> sinter(),"[6429, 6433]","{'A1': [(6429, 6433)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<String> sinter(final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sinter(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sinterstore,long sinterstore(String),"[6445, 6449]","{'A1': [(6445, 6449)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sinterstore(final String dstkey, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sinterstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sintercard,long sintercard(),"[6459, 6463]","{'A12': [(6459, 6463)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sintercard(String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sintercard,long sintercard(int),"[6475, 6479]","{'A12': [(6475, 6479)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sintercard(int limit, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sunion,Set<String> sunion(),"[6494, 6498]","{'A1': [(6494, 6498)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<String> sunion(final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sunion(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sunionstore,long sunionstore(String),"[6510, 6514]","{'A1': [(6510, 6514)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sunionstore(final String dstkey, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sunionstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sdiff,Set<String> sdiff(),"[6536, 6540]","{'A1': [(6536, 6540)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Set<String> sdiff(final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sdiffstore,long sdiffstore(String),"[6549, 6553]","{'A1': [(6549, 6553)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sdiffstore(final String dstkey, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,srandmember,String srandmember(String),"[6565, 6569]","{'A1': [(6565, 6569)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String srandmember(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.srandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,srandmember,"List<String> srandmember(String,int)","[6584, 6588]","{'A1': [(6584, 6588)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> srandmember(final String key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.srandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zadd,"long zadd(String,double,String)","[6606, 6610]","{'A1': [(6606, 6610)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zadd(final String key, final double score, final String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zadd(key, score, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zadd,"long zadd(String,double,String,ZAddParams)","[6612, 6617]","{'A1': [(6612, 6617)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zadd(final String key, final double score, final String member,
      final ZAddParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zadd(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zadd,"long zadd(String,Map<String, Double>)","[6619, 6623]","{'A1': [(6619, 6623)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zadd(final String key, final Map<String, Double> scoreMembers) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zadd(key, scoreMembers));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zadd,"long zadd(String,Map<String, Double>,ZAddParams)","[6625, 6629]","{'A1': [(6625, 6629)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zadd(final String key, final Map<String, Double> scoreMembers, final ZAddParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zadd(key, scoreMembers, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zaddIncr,"Double zaddIncr(String,double,String,ZAddParams)","[6631, 6635]","{'A1': [(6631, 6635)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double zaddIncr(final String key, final double score, final String member, final ZAddParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zaddIncr(key, score, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zdiff,List<String> zdiff(),"[6637, 6641]","{'A1': [(6637, 6641)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zdiff(String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zdiff(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zdiffWithScores,List<Tuple> zdiffWithScores(),"[6643, 6647]","{'A1': [(6643, 6647)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zdiffWithScores(String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zdiffWithScores(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zdiffStore,long zdiffStore(String),"[6649, 6654]","{'A1': [(6649, 6654)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  @Deprecated
  public long zdiffStore(final String dstkey, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zdiffStore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zdiffstore,long zdiffstore(String),"[6656, 6660]","{'A1': [(6656, 6660)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zdiffstore(final String dstkey, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zdiffstore(dstkey, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrange,"List<String> zrange(String,long,long)","[6662, 6666]","{'A1': [(6662, 6666)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrange(final String key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrem,long zrem(String),"[6677, 6681]","{'A1': [(6677, 6681)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zrem(final String key, final String... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrem(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zincrby,"double zincrby(String,double,String)","[6701, 6705]","{'A1': [(6701, 6705)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public double zincrby(final String key, final double increment, final String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zincrby(key, increment, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zincrby,"Double zincrby(String,double,String,ZIncrByParams)","[6707, 6712]","{'A1': [(6707, 6712)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double zincrby(final String key, final double increment, final String member,
      final ZIncrByParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zincrby(key, increment, member, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrank,"Long zrank(String,String)","[6729, 6733]","{'A1': [(6729, 6733)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long zrank(final String key, final String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrank,"Long zrevrank(String,String)","[6750, 6754]","{'A1': [(6750, 6754)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long zrevrank(final String key, final String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrank(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrankWithScore,"KeyValue<Long, Double> zrankWithScore(String,String)","[6763, 6767]","{'A10': [(6763, 6767)]}",{'A10': 1.0},A10,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<Long, Double> zrankWithScore(String key, String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrankWithScore,"KeyValue<Long, Double> zrevrankWithScore(String,String)","[6776, 6780]","{'A10': [(6776, 6780)]}",{'A10': 1.0},A10,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<Long, Double> zrevrankWithScore(String key, String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrankWithScore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrange,"List<String> zrevrange(String,long,long)","[6782, 6786]","{'A1': [(6782, 6786)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrevrange(final String key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrange(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeWithScores,"List<Tuple> zrangeWithScores(String,long,long)","[6788, 6792]","{'A1': [(6788, 6792)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeWithScores(final String key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeWithScores,"List<Tuple> zrevrangeWithScores(String,long,long)","[6794, 6798]","{'A1': [(6794, 6798)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeWithScores(final String key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeWithScores(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrange,"List<String> zrange(String,ZRangeParams)","[6800, 6804]","{'A1': [(6800, 6804)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrange(String key, ZRangeParams zRangeParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrange(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeWithScores,"List<Tuple> zrangeWithScores(String,ZRangeParams)","[6806, 6810]","{'A1': [(6806, 6810)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeWithScores(String key, ZRangeParams zRangeParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeWithScores(key, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangestore,"long zrangestore(String,String,ZRangeParams)","[6812, 6816]","{'A1': [(6812, 6816)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zrangestore(String dest, String src, ZRangeParams zRangeParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangestore(dest, src, zRangeParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrandmember,String zrandmember(String),"[6818, 6822]","{'A1': [(6818, 6822)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String zrandmember(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrandmember(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrandmember,"List<String> zrandmember(String,long)","[6824, 6828]","{'A1': [(6824, 6828)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrandmember(final String key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrandmember(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrandmemberWithScores,"List<Tuple> zrandmemberWithScores(String,long)","[6830, 6834]","{'A1': [(6830, 6834)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrandmemberWithScores(final String key, final long count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrandmemberWithScores(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zcard,long zcard(String),"[6844, 6848]","{'A1': [(6844, 6848)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zcard(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zcard(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zscore,"Double zscore(String,String)","[6860, 6864]","{'A1': [(6860, 6864)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double zscore(final String key, final String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zscore(key, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zmscore,List<Double> zmscore(String),"[6875, 6879]","{'A1': [(6875, 6879)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Double> zmscore(final String key, final String... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zmscore(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zpopmax,Tuple zpopmax(String),"[6881, 6885]","{'A1': [(6881, 6885)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Tuple zpopmax(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zpopmax(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zpopmax,"List<Tuple> zpopmax(String,int)","[6887, 6891]","{'A1': [(6887, 6891)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zpopmax(final String key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zpopmax(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zpopmin,Tuple zpopmin(String),"[6893, 6897]","{'A1': [(6893, 6897)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Tuple zpopmin(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zpopmin(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zpopmin,"List<Tuple> zpopmin(String,int)","[6899, 6903]","{'A1': [(6899, 6903)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zpopmin(final String key, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zpopmin(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,watch,String watch(),"[6905, 6912]","{'A1': [(6905, 6912)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public String watch(final String... keys) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(WATCH, keys);
//    return connection.getStatusCodeReply();
    String status = connection.getStatusCodeReply();
    isInWatch = true;
    return status;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sort,List<String> sort(String),"[6927, 6931]","{'A1': [(6927, 6931)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> sort(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sort(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sort,"List<String> sort(String,SortingParams)","[7007, 7011]","{'A1': [(7007, 7007), (7009, 7009), (7011, 7011)], 'A12': [(7008, 7008), (7010, 7010)]}","{'A1': 0.6, 'A12': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> sort(final String key, final SortingParams sortingParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sort(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sort,"long sort(String,SortingParams,String)","[7023, 7027]","{'A1': [(7023, 7023)], 'A12': [(7024, 7027)]}","{'A1': 0.2, 'A12': 0.8}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sort(final String key, final SortingParams sortingParams, final String dstkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sort(key, sortingParams, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sortReadonly,"List<String> sortReadonly(String,SortingParams)","[7029, 7033]","{'A1': [(7031, 7031), (7033, 7033)], 'A12': [(7029, 7030), (7032, 7032)]}","{'A1': 0.4, 'A12': 0.6}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> sortReadonly(String key, SortingParams sortingParams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sortReadonly(key, sortingParams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sort,"long sort(String,String)","[7048, 7052]","{'A1': [(7048, 7052)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long sort(final String key, final String dstkey) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sort(key, dstkey));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lmove,"String lmove(String,String,ListDirection,ListDirection)","[7054, 7059]","{'A1': [(7054, 7059)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String lmove(final String srcKey, final String dstKey, final ListDirection from,
      final ListDirection to) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lmove(srcKey, dstKey, from, to));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blmove,"String blmove(String,String,ListDirection,ListDirection,double)","[7061, 7066]","{'A1': [(7061, 7066)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String blmove(final String srcKey, final String dstKey, final ListDirection from,
      final ListDirection to, final double timeout) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blmove(srcKey, dstKey, from, to, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blpop,List<String> blpop(int),"[7130, 7134]","{'A1': [(7130, 7134)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> blpop(final int timeout, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blpop,"KeyValue<String, String> blpop(double)","[7136, 7140]","{'A1': [(7136, 7140)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, String> blpop(final double timeout, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,brpop,List<String> brpop(int),"[7204, 7208]","{'A1': [(7204, 7208)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> brpop(final int timeout, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,brpop,"KeyValue<String, String> brpop(double)","[7210, 7214]","{'A1': [(7210, 7214)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, String> brpop(final double timeout, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.brpop(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lmpop,"KeyValue<String, List<String>> lmpop(ListDirection)","[7216, 7220]","{'A1': [(7216, 7220)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, List<String>> lmpop(ListDirection direction, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lmpop(direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lmpop,"KeyValue<String, List<String>> lmpop(ListDirection,int)","[7222, 7226]","{'A1': [(7222, 7226)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, List<String>> lmpop(ListDirection direction, int count, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lmpop(direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blmpop,"KeyValue<String, List<String>> blmpop(double,ListDirection)","[7228, 7232]","{'A1': [(7228, 7232)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, List<String>> blmpop(double timeout, ListDirection direction, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blmpop(timeout, direction, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blmpop,"KeyValue<String, List<String>> blmpop(double,ListDirection,int)","[7234, 7238]","{'A1': [(7234, 7238)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, List<String>> blmpop(double timeout, ListDirection direction, int count, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blmpop(timeout, direction, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bzpopmax,"KeyValue<String, Tuple> bzpopmax(double)","[7240, 7244]","{'A1': [(7240, 7244)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, Tuple> bzpopmax(double timeout, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bzpopmax(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bzpopmin,"KeyValue<String, Tuple> bzpopmin(double)","[7246, 7250]","{'A1': [(7246, 7250)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, Tuple> bzpopmin(double timeout, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bzpopmin(timeout, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blpop,"List<String> blpop(int,String)","[7252, 7256]","{'A1': [(7252, 7256)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> blpop(final int timeout, final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,blpop,"KeyValue<String, String> blpop(double,String)","[7258, 7262]","{'A1': [(7258, 7262)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, String> blpop(double timeout, String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.blpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,brpop,"List<String> brpop(int,String)","[7264, 7268]","{'A1': [(7264, 7268)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> brpop(final int timeout, final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.brpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,brpop,"KeyValue<String, String> brpop(double,String)","[7270, 7274]","{'A1': [(7270, 7274)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, String> brpop(double timeout, String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.brpop(timeout, key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zcount,"long zcount(String,double,double)","[7276, 7280]","{'A1': [(7276, 7280)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zcount(final String key, final double min, final double max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zcount,"long zcount(String,String,String)","[7282, 7286]","{'A1': [(7282, 7286)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zcount(final String key, final String min, final String max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScore,"List<String> zrangeByScore(String,double,double)","[7336, 7340]","{'A1': [(7336, 7340)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrangeByScore(final String key, final double min, final double max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScore,"List<String> zrangeByScore(String,String,String)","[7342, 7346]","{'A1': [(7342, 7346)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrangeByScore(final String key, final String min, final String max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScore,"List<String> zrangeByScore(String,double,double,int,int)","[7397, 7402]","{'A1': [(7397, 7402)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrangeByScore(final String key, final double min, final double max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScore,"List<String> zrangeByScore(String,String,String,int,int)","[7404, 7409]","{'A1': [(7404, 7409)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrangeByScore(final String key, final String min, final String max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScore(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(String,double,double)","[7458, 7462]","{'A1': [(7458, 7462)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeByScoreWithScores(final String key, final double min, final double max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(String,String,String)","[7464, 7468]","{'A1': [(7464, 7468)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeByScoreWithScores(final String key, final String min, final String max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(String,double,double,int,int)","[7519, 7524]","{'A1': [(7519, 7524)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeByScoreWithScores(final String key, final double min, final double max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByScoreWithScores,"List<Tuple> zrangeByScoreWithScores(String,String,String,int,int)","[7526, 7531]","{'A1': [(7526, 7531)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrangeByScoreWithScores(final String key, final String min, final String max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByScoreWithScores(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScore,"List<String> zrevrangeByScore(String,double,double)","[7533, 7537]","{'A1': [(7533, 7537)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrevrangeByScore(final String key, final double max, final double min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScore,"List<String> zrevrangeByScore(String,String,String)","[7539, 7543]","{'A1': [(7539, 7543)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrevrangeByScore(final String key, final String max, final String min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScore(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScore,"List<String> zrevrangeByScore(String,double,double,int,int)","[7545, 7550]","{'A1': [(7545, 7550)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrevrangeByScore(final String key, final double max, final double min,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(String,double,double)","[7552, 7556]","{'A1': [(7552, 7556)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(final String key, final double max, final double min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(String,double,double,int,int)","[7558, 7563]","{'A1': [(7558, 7563)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(final String key, final double max,
      final double min, final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(String,String,String,int,int)","[7565, 7570]","{'A1': [(7565, 7570)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(final String key, final String max,
      final String min, final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScore,"List<String> zrevrangeByScore(String,String,String,int,int)","[7572, 7577]","{'A1': [(7572, 7577)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrevrangeByScore(final String key, final String max, final String min,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScore(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByScoreWithScores,"List<Tuple> zrevrangeByScoreWithScores(String,String,String)","[7579, 7583]","{'A1': [(7579, 7583)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zrevrangeByScoreWithScores(final String key, final String max, final String min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByScoreWithScores(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zremrangeByRank,"long zremrangeByRank(String,long,long)","[7598, 7602]","{'A1': [(7598, 7602)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zremrangeByRank(final String key, final long start, final long stop) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zremrangeByRank(key, start, stop));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zremrangeByScore,"long zremrangeByScore(String,double,double)","[7617, 7621]","{'A1': [(7617, 7621)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zremrangeByScore(final String key, final double min, final double max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zremrangeByScore,"long zremrangeByScore(String,String,String)","[7623, 7627]","{'A1': [(7623, 7627)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zremrangeByScore(final String key, final String min, final String max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zremrangeByScore(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zunion,List<String> zunion(ZParams),"[7636, 7640]","{'A1': [(7636, 7640)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zunion(ZParams params, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zunion(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zunionWithScores,List<Tuple> zunionWithScores(ZParams),"[7649, 7653]","{'A1': [(7649, 7653)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zunionWithScores(ZParams params, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zunionWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zunionstore,long zunionstore(String),"[7685, 7689]","{'A1': [(7685, 7689)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zunionstore(final String dstkey, final String... sets) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zunionstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zunionstore,"long zunionstore(String,ZParams)","[7722, 7726]","{'A1': [(7723, 7723), (7725, 7725)], 'A8': [(7722, 7722), (7724, 7724)], 'A7': [(7726, 7726)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zunionstore(final String dstkey, final ZParams params, final String... sets) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zunionstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zinter,List<String> zinter(ZParams),"[7735, 7739]","{'A1': [(7736, 7736), (7738, 7738)], 'A14': [(7735, 7735), (7737, 7737), (7739, 7739)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zinter(final ZParams params, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zinter(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zinterWithScores,List<Tuple> zinterWithScores(ZParams),"[7748, 7752]","{'A1': [(7749, 7749), (7751, 7751)], 'A14': [(7748, 7748), (7750, 7750), (7752, 7752)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Tuple> zinterWithScores(final ZParams params, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zinterWithScores(params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zintercard,long zintercard(),"[7754, 7758]","{'A12': [(7754, 7758)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zintercard(String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zintercard(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zintercard,long zintercard(long),"[7760, 7764]","{'A12': [(7760, 7764)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zintercard(long limit, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zintercard(limit, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zinterstore,long zinterstore(String),"[7796, 7800]","{'A1': [(7797, 7797), (7799, 7799)], 'A8': [(7796, 7796), (7798, 7798)], 'A7': [(7800, 7800)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zinterstore(final String dstkey, final String... sets) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zinterstore(dstkey, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zinterstore,"long zinterstore(String,ZParams)","[7833, 7837]","{'A1': [(7834, 7834), (7836, 7836)], 'A8': [(7833, 7833), (7835, 7835)], 'A7': [(7837, 7837)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zinterstore(final String dstkey, final ZParams params, final String... sets) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zinterstore(dstkey, params, sets));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zlexcount,"long zlexcount(String,String,String)","[7839, 7843]","{'A1': [(7840, 7840), (7842, 7842)], 'A8': [(7841, 7841)], 'A7': [(7839, 7839), (7843, 7843)]}","{'A1': 0.4, 'A8': 0.2, 'A7': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zlexcount(final String key, final String min, final String max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zlexcount(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByLex,"List<String> zrangeByLex(String,String,String)","[7845, 7849]","{'A1': [(7846, 7846), (7848, 7848)], 'A8': [(7847, 7847)], 'A7': [(7845, 7845), (7849, 7849)]}","{'A1': 0.4, 'A8': 0.2, 'A7': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrangeByLex(final String key, final String min, final String max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrangeByLex,"List<String> zrangeByLex(String,String,String,int,int)","[7851, 7856]","{'A1': [(7852, 7852), (7855, 7855)], 'A8': [(7854, 7854)], 'A7': [(7851, 7851), (7853, 7853), (7856, 7856)]}","{'A1': 0.3333333333333333, 'A8': 0.16666666666666666, 'A7': 0.5}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrangeByLex(final String key, final String min, final String max,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrangeByLex(key, min, max, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByLex,"List<String> zrevrangeByLex(String,String,String)","[7858, 7862]","{'A1': [(7859, 7859), (7861, 7861)], 'A8': [(7860, 7860)], 'A7': [(7858, 7858), (7862, 7862)]}","{'A1': 0.4, 'A8': 0.2, 'A7': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrevrangeByLex(final String key, final String max, final String min) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByLex(key, max, min));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zrevrangeByLex,"List<String> zrevrangeByLex(String,String,String,int,int)","[7864, 7869]","{'A1': [(7865, 7866), (7868, 7868)], 'A8': [(7867, 7867)], 'A7': [(7864, 7864), (7869, 7869)]}","{'A1': 0.5, 'A8': 0.16666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> zrevrangeByLex(final String key, final String max, final String min,
      final int offset, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zrevrangeByLex(key, max, min, offset, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zremrangeByLex,"long zremrangeByLex(String,String,String)","[7871, 7875]","{'A1': [(7872, 7872), (7874, 7874)], 'A8': [(7873, 7873)], 'A7': [(7871, 7871), (7875, 7875)]}","{'A1': 0.4, 'A8': 0.2, 'A7': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long zremrangeByLex(final String key, final String min, final String max) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zremrangeByLex(key, min, max));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zmpop,"KeyValue<String, List<Tuple>> zmpop(SortedSetOption)","[7877, 7881]","{'A1': [(7877, 7881)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, List<Tuple>> zmpop(SortedSetOption option, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zmpop(option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zmpop,"KeyValue<String, List<Tuple>> zmpop(SortedSetOption,int)","[7883, 7887]","{'A1': [(7883, 7887)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, List<Tuple>> zmpop(SortedSetOption option, int count, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zmpop(option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bzmpop,"KeyValue<String, List<Tuple>> bzmpop(double,SortedSetOption)","[7889, 7893]","{'A1': [(7889, 7893)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, List<Tuple>> bzmpop(double timeout, SortedSetOption option, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bzmpop(timeout, option, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bzmpop,"KeyValue<String, List<Tuple>> bzmpop(double,SortedSetOption,int)","[7895, 7899]","{'A1': [(7895, 7899)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public KeyValue<String, List<Tuple>> bzmpop(double timeout, SortedSetOption option, int count, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bzmpop(timeout, option, count, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,strlen,long strlen(String),"[7901, 7905]","{'A1': [(7902, 7904)], 'A8': [(7901, 7901)], 'A7': [(7905, 7905)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long strlen(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.strlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lcs,"LCSMatchResult lcs(String,String,LCSParams)","[7914, 7918]","{'A12': [(7914, 7918)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public LCSMatchResult lcs(final String keyA, final String keyB, final LCSParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lpushx,long lpushx(String),"[7920, 7924]","{'A1': [(7922, 7922)], 'A8': [(7920, 7920)], 'A7': [(7924, 7924)], 'A12': [(7921, 7921), (7923, 7923)]}","{'A1': 0.2, 'A8': 0.2, 'A7': 0.2, 'A12': 0.4}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long lpushx(final String key, final String... strings) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.lpushx(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,persist,long persist(String),"[7933, 7937]","{'A1': [(7934, 7936)], 'A8': [(7933, 7933)], 'A7': [(7937, 7937)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long persist(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.persist(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,rpushx,long rpushx(String),"[7939, 7943]","{'A1': [(7941, 7941)], 'A8': [(7939, 7939)], 'A7': [(7943, 7943)], 'A12': [(7940, 7940), (7942, 7942)]}","{'A1': 0.2, 'A8': 0.2, 'A7': 0.2, 'A12': 0.4}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long rpushx(final String key, final String... strings) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.rpushx(key, strings));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,echo,String echo(String),"[7945, 7950]","{'A1': [(7947, 7949)], 'A8': [(7945, 7945)], 'A7': [(7946, 7946), (7950, 7950)]}","{'A1': 0.5, 'A8': 0.16666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String echo(final String string) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ECHO, string);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,linsert,"long linsert(String,ListPosition,String,String)","[7952, 7957]","{'A1': [(7953, 7953), (7955, 7956)], 'A8': [(7952, 7952)], 'A7': [(7954, 7954), (7957, 7957)]}","{'A1': 0.5, 'A8': 0.16666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long linsert(final String key, final ListPosition where, final String pivot,
      final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.linsert(key, where, pivot, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,brpoplpush,"String brpoplpush(String,String,int)","[7966, 7970]","{'A1': [(7967, 7969)], 'A8': [(7966, 7966)], 'A7': [(7970, 7970)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String brpoplpush(final String source, final String destination, final int timeout) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.brpoplpush(source, destination, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setbit,"boolean setbit(String,long,boolean)","[7978, 7982]","{'A1': [(7979, 7981)], 'A8': [(7978, 7978)], 'A7': [(7982, 7982)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean setbit(final String key, final long offset, final boolean value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setbit(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getbit,"boolean getbit(String,long)","[7989, 7993]","{'A1': [(7990, 7992)], 'A8': [(7989, 7989)], 'A7': [(7993, 7993)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean getbit(final String key, final long offset) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getbit(key, offset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,setrange,"long setrange(String,long,String)","[7995, 7999]","{'A1': [(7996, 7998)], 'A8': [(7995, 7995)], 'A7': [(7999, 7999)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long setrange(final String key, final long offset, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.setrange(key, offset, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,getrange,"String getrange(String,long,long)","[8001, 8005]","{'A1': [(8002, 8004)], 'A8': [(8001, 8001)], 'A7': [(8005, 8005)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String getrange(final String key, final long startOffset, final long endOffset) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.getrange(key, startOffset, endOffset));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitpos,"long bitpos(String,boolean)","[8007, 8011]","{'A1': [(8008, 8010)], 'A8': [(8007, 8007)], 'A7': [(8011, 8011)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitpos(final String key, final boolean value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitpos(key, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitpos,"long bitpos(String,boolean,BitPosParams)","[8013, 8017]","{'A1': [(8014, 8016)], 'A8': [(8013, 8013)], 'A7': [(8017, 8017)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitpos(final String key, final boolean value, final BitPosParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitpos(key, value, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,role,List<Object> role(),"[8019, 8024]","{'A1': [(8019, 8024)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> role() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ROLE);
    return BuilderFactory.ENCODED_OBJECT_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configGet,"Map<String, String> configGet(String)","[8060, 8065]","{'A1': [(8061, 8064)], 'A8': [(8060, 8060)], 'A7': [(8065, 8065)]}","{'A1': 0.6666666666666666, 'A8': 0.16666666666666666, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, String> configGet(final String pattern) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, Keyword.GET.name(), pattern);
    return BuilderFactory.STRING_MAP.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configGet,"Map<String, String> configGet()","[8067, 8072]","{'A1': [(8068, 8068), (8070, 8071)], 'A26': [(8067, 8067), (8069, 8069), (8072, 8072)]}","{'A1': 0.5, 'A26': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, String> configGet(String... patterns) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, joinParameters(Keyword.GET.name(), patterns));
    return BuilderFactory.STRING_MAP.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configSet,"String configSet(String,String)","[8103, 8108]","{'A1': [(8105, 8108)], 'A8': [(8103, 8103)], 'A7': [(8104, 8104)]}","{'A1': 0.6666666666666666, 'A8': 0.16666666666666666, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String configSet(final String parameter, final String value) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, Keyword.SET.name(), parameter, value);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configSet,String configSet(),"[8110, 8115]","{'A1': [(8110, 8115)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String configSet(final String... parameterValues) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.CONFIG, joinParameters(Keyword.SET.name(), parameterValues));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,configSet,"String configSet(Map<String, String>)","[8117, 8124]","{'A1': [(8117, 8124)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String configSet(Map<String, String> parameterValues) {
    checkIsInMultiOrPipeline();
    CommandArguments args = new CommandArguments(Command.CONFIG).add(Keyword.SET);
    parameterValues.forEach((k, v) -> args.add(k).add(v));
    connection.sendCommand(args);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,publish,"long publish(String,String)","[8126, 8130]","{'A1': [(8126, 8129)], 'A7': [(8130, 8130)]}","{'A1': 0.8, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public long publish(final String channel, final String message) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(PUBLISH, channel, message);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,subscribe,void subscribe(JedisPubSub),"[8132, 8134]","{'A1': [(8133, 8133)], 'A7': [(8132, 8132), (8134, 8134)]}","{'A1': 0.3333333333333333, 'A7': 0.6666666666666666}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public void subscribe(final JedisPubSub jedisPubSub, final String... channels) {
    jedisPubSub.proceed(connection, channels);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,psubscribe,void psubscribe(JedisPubSub),"[8136, 8138]","{'A1': [(8137, 8137)], 'A7': [(8136, 8136), (8138, 8138)]}","{'A1': 0.3333333333333333, 'A7': 0.6666666666666666}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public void psubscribe(final JedisPubSub jedisPubSub, final String... patterns) {
    jedisPubSub.proceedWithPatterns(connection, patterns);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pubsubChannels,List<String> pubsubChannels(),"[8140, 8144]","{'A1': [(8140, 8144)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public List<String> pubsubChannels() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(PUBSUB, CHANNELS);
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pubsubChannels,List<String> pubsubChannels(String),"[8146, 8150]","{'A1': [(8146, 8150)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public List<String> pubsubChannels(final String pattern) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(PUBSUB, CHANNELS.name(), pattern);
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pubsubNumPat,Long pubsubNumPat(),"[8152, 8156]","{'A1': [(8152, 8156)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Long pubsubNumPat() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(PUBSUB, NUMPAT);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pubsubNumSub,"Map<String, Long> pubsubNumSub()","[8158, 8162]","{'A1': [(8158, 8161)], 'A7': [(8162, 8162)]}","{'A1': 0.8, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Map<String, Long> pubsubNumSub(String... channels) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(PUBSUB, joinParameters(NUMSUB.name(), channels));
    return BuilderFactory.PUBSUB_NUMSUB_MAP.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pubsubShardChannels,List<String> pubsubShardChannels(),"[8164, 8168]","{'A1': [(8164, 8168)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public List<String> pubsubShardChannels() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(PUBSUB, SHARDCHANNELS);
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pubsubShardChannels,List<String> pubsubShardChannels(String),"[8170, 8174]","{'A1': [(8170, 8174)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public List<String> pubsubShardChannels(final String pattern) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(PUBSUB, SHARDCHANNELS.name(), pattern);
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pubsubShardNumSub,"Map<String, Long> pubsubShardNumSub()","[8176, 8180]","{'A1': [(8176, 8180)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Map<String, Long> pubsubShardNumSub(String... channels) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(PUBSUB, joinParameters(SHARDNUMSUB.name(), channels));
    return BuilderFactory.PUBSUB_NUMSUB_MAP.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,eval,"Object eval(String,int)","[8182, 8186]","{'A1': [(8182, 8186)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object eval(final String script, final int keyCount, final String... params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.eval(script, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,eval,"Object eval(String,List<String>,List<String>)","[8188, 8192]","{'A1': [(8189, 8191)], 'A8': [(8188, 8188)], 'A7': [(8192, 8192)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object eval(final String script, final List<String> keys, final List<String> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.eval(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalReadonly,"Object evalReadonly(String,List<String>,List<String>)","[8194, 8198]","{'A12': [(8194, 8198)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalReadonly(String script, List<String> keys, List<String> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalReadonly(script, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,eval,Object eval(String),"[8200, 8204]","{'A1': [(8201, 8203)], 'A8': [(8200, 8200)], 'A7': [(8204, 8204)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object eval(final String script) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.eval(script));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalsha,Object evalsha(String),"[8206, 8210]","{'A1': [(8207, 8209)], 'A8': [(8206, 8206)], 'A7': [(8210, 8210)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalsha(final String sha1) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalsha(sha1));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalsha,"Object evalsha(String,List<String>,List<String>)","[8212, 8216]","{'A1': [(8213, 8215)], 'A8': [(8212, 8212)], 'A7': [(8216, 8216)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalsha(final String sha1, final List<String> keys, final List<String> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalsha(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalshaReadonly,"Object evalshaReadonly(String,List<String>,List<String>)","[8218, 8222]","{'A12': [(8218, 8222)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalshaReadonly(String sha1, List<String> keys, List<String> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalshaReadonly(sha1, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,evalsha,"Object evalsha(String,int)","[8224, 8228]","{'A1': [(8225, 8225), (8227, 8227)], 'A8': [(8224, 8224), (8226, 8226)], 'A7': [(8228, 8228)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object evalsha(final String sha1, final int keyCount, final String... params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.evalsha(sha1, keyCount, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scriptExists,Boolean scriptExists(String),"[8230, 8235]","{'A1': [(8231, 8231)], 'A8': [(8230, 8230)], 'A7': [(8232, 8235)]}","{'A1': 0.16666666666666666, 'A8': 0.16666666666666666, 'A7': 0.6666666666666666}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Boolean scriptExists(final String sha1) {
    String[] a = new String[1];
    a[0] = sha1;
    return scriptExists(a).get(0);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scriptExists,List<Boolean> scriptExists(),"[8237, 8241]","{'A1': [(8238, 8240)], 'A8': [(8237, 8237)], 'A7': [(8241, 8241)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Boolean> scriptExists(final String... sha1) {
    connection.sendCommand(SCRIPT, joinParameters(Keyword.EXISTS.name(), sha1));
    return BuilderFactory.BOOLEAN_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scriptLoad,String scriptLoad(String),"[8243, 8247]","{'A1': [(8244, 8246)], 'A8': [(8243, 8243)], 'A7': [(8247, 8247)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String scriptLoad(final String script) {
    connection.sendCommand(SCRIPT, LOAD.name(), script);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,slowlogGet,List<Slowlog> slowlogGet(),"[8249, 8253]","{'A1': [(8251, 8252)], 'A8': [(8249, 8249)], 'A7': [(8250, 8250), (8253, 8253)]}","{'A1': 0.4, 'A8': 0.2, 'A7': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Slowlog> slowlogGet() {
    connection.sendCommand(SLOWLOG, Keyword.GET);
    return Slowlog.from(connection.getObjectMultiBulkReply());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,slowlogGet,List<Slowlog> slowlogGet(long),"[8255, 8259]","{'A1': [(8256, 8258)], 'A8': [(8255, 8255)], 'A7': [(8259, 8259)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Slowlog> slowlogGet(final long entries) {
    connection.sendCommand(SLOWLOG, Keyword.GET.getRaw(), toByteArray(entries));
    return Slowlog.from(connection.getObjectMultiBulkReply());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectRefcount,Long objectRefcount(String),"[8261, 8265]","{'A1': [(8262, 8264)], 'A8': [(8261, 8261)], 'A7': [(8265, 8265)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long objectRefcount(final String key) {
    connection.sendCommand(OBJECT, REFCOUNT.name(), key);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectEncoding,String objectEncoding(String),"[8267, 8271]","{'A1': [(8268, 8270)], 'A8': [(8267, 8267)], 'A7': [(8271, 8271)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String objectEncoding(final String key) {
    connection.sendCommand(OBJECT, ENCODING.name(), key);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectIdletime,Long objectIdletime(String),"[8273, 8277]","{'A1': [(8274, 8276)], 'A8': [(8273, 8273)], 'A7': [(8277, 8277)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long objectIdletime(final String key) {
    connection.sendCommand(OBJECT, IDLETIME.name(), key);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectHelp,List<String> objectHelp(),"[8279, 8283]","{'A1': [(8281, 8282)], 'A14': [(8279, 8280), (8283, 8283)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> objectHelp() {
    connection.sendCommand(OBJECT, HELP);
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,objectFreq,Long objectFreq(String),"[8285, 8289]","{'A1': [(8287, 8288)], 'A14': [(8285, 8286), (8289, 8289)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long objectFreq(final String key) {
    connection.sendCommand(OBJECT, FREQ.name(), key);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitcount,long bitcount(String),"[8291, 8295]","{'A1': [(8292, 8294)], 'A8': [(8291, 8291)], 'A7': [(8295, 8295)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitcount(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitcount,"long bitcount(String,long,long)","[8297, 8301]","{'A1': [(8298, 8300)], 'A8': [(8297, 8297)], 'A7': [(8301, 8301)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitcount(final String key, final long start, final long end) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitcount(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitcount,"long bitcount(String,long,long,BitCountOption)","[8303, 8307]","{'A1': [(8303, 8307)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitcount(final String key, final long start, final long end, final BitCountOption option) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitcount(key, start, end, option));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitop,"long bitop(BitOP,String)","[8309, 8313]","{'A1': [(8310, 8312)], 'A8': [(8309, 8309)], 'A7': [(8313, 8313)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long bitop(final BitOP op, final String destKey, final String... srcKeys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitop(op, destKey, srcKeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,commandCount,long commandCount(),"[8315, 8320]","{'A61': [(8315, 8315)], 'A12': [(8316, 8320)]}","{'A61': 0.16666666666666666, 'A12': 0.8333333333333334}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long commandCount() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(COMMAND, COUNT);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,commandDocs,"Map<String, CommandDocument> commandDocs()","[8322, 8327]","{'A61': [(8322, 8322)], 'A12': [(8323, 8327)]}","{'A61': 0.16666666666666666, 'A12': 0.8333333333333334}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, CommandDocument> commandDocs(String... commands) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));
    return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,commandGetKeys,List<String> commandGetKeys(),"[8329, 8334]","{'A61': [(8329, 8329)], 'A12': [(8330, 8334)]}","{'A61': 0.16666666666666666, 'A12': 0.8333333333333334}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> commandGetKeys(String... command) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));
    return BuilderFactory.STRING_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,commandGetKeysAndFlags,"List<KeyValue<String, List<String>>> commandGetKeysAndFlags()","[8336, 8341]","{'A61': [(8336, 8336)], 'A12': [(8337, 8341)]}","{'A61': 0.16666666666666666, 'A12': 0.8333333333333334}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<KeyValue<String, List<String>>> commandGetKeysAndFlags(String... command) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(COMMAND, joinParameters(GETKEYSANDFLAGS.name(), command));
    return BuilderFactory.KEYED_STRING_LIST_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,commandInfo,"Map<String, CommandInfo> commandInfo()","[8343, 8348]","{'A1': [(8347, 8347)], 'A61': [(8343, 8343), (8348, 8348)], 'A12': [(8344, 8346)]}","{'A1': 0.16666666666666666, 'A61': 0.3333333333333333, 'A12': 0.5}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, CommandInfo> commandInfo(String... commands) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(COMMAND, joinParameters(Keyword.INFO.name(), commands));
    return CommandInfo.COMMAND_INFO_RESPONSE.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,command,"Map<String, CommandInfo> command()","[8350, 8355]","{'A61': [(8350, 8354)], 'A12': [(8355, 8355)]}","{'A61': 0.8333333333333334, 'A12': 0.16666666666666666}",A61,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, CommandInfo> command() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(COMMAND);
    return CommandInfo.COMMAND_INFO_RESPONSE.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,commandList,List<String> commandList(),"[8357, 8362]","{'A61': [(8357, 8357)], 'A12': [(8358, 8362)]}","{'A61': 0.16666666666666666, 'A12': 0.8333333333333334}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> commandList() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(COMMAND, LIST);
    return BuilderFactory.STRING_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,commandListFilterBy,List<String> commandListFilterBy(CommandListFilterByParams),"[8364, 8370]","{'A61': [(8364, 8364)], 'A12': [(8365, 8370)]}","{'A61': 0.14285714285714285, 'A12': 0.8571428571428571}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {
    checkIsInMultiOrPipeline();
    CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);
    connection.sendCommand(args);
    return BuilderFactory.STRING_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelMyId,String sentinelMyId(),"[8372, 8376]","{'A1': [(8372, 8376)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String sentinelMyId() {
    connection.sendCommand(SENTINEL, MYID);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelMasters,"List<Map<String, String>> sentinelMasters()","[8408, 8413]","{'A1': [(8408, 8413)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map<String, String>> sentinelMasters() {
    connection.sendCommand(SENTINEL, MASTERS);
    return connection.getObjectMultiBulkReply().stream()
        .map(BuilderFactory.STRING_MAP::build).collect(Collectors.toList());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelMaster,"Map<String, String> sentinelMaster(String)","[8415, 8419]","{'A1': [(8415, 8419)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, String> sentinelMaster(String masterName) {
    connection.sendCommand(SENTINEL, MASTER.name(), masterName);
    return BuilderFactory.STRING_MAP.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelSentinels,"List<Map<String, String>> sentinelSentinels(String)","[8421, 8426]","{'A1': [(8421, 8426)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map<String, String>> sentinelSentinels(String masterName) {
    connection.sendCommand(SENTINEL, SENTINELS.name(), masterName);
    return connection.getObjectMultiBulkReply().stream()
        .map(BuilderFactory.STRING_MAP::build).collect(Collectors.toList());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelGetMasterAddrByName,List<String> sentinelGetMasterAddrByName(String),"[8437, 8441]","{'A1': [(8437, 8441)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> sentinelGetMasterAddrByName(String masterName) {
    connection.sendCommand(SENTINEL, GET_MASTER_ADDR_BY_NAME.getRaw(), encode(masterName));
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelReset,Long sentinelReset(String),"[8450, 8454]","{'A1': [(8450, 8454)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long sentinelReset(String pattern) {
    connection.sendCommand(SENTINEL, SentinelKeyword.RESET.name(), pattern);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelSlaves,"List<Map<String, String>> sentinelSlaves(String)","[8490, 8496]","{'A1': [(8490, 8490), (8492, 8496)], 'A26': [(8491, 8491)]}","{'A1': 0.8571428571428571, 'A26': 0.14285714285714285}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  @Deprecated
  public List<Map<String, String>> sentinelSlaves(String masterName) {
    connection.sendCommand(SENTINEL, SLAVES.name(), masterName);
    return connection.getObjectMultiBulkReply().stream()
        .map(BuilderFactory.STRING_MAP::build).collect(Collectors.toList());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelReplicas,"List<Map<String, String>> sentinelReplicas(String)","[8498, 8503]","{'A1': [(8498, 8503)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map<String, String>> sentinelReplicas(String masterName) {
    connection.sendCommand(SENTINEL, REPLICAS.name(), masterName);
    return connection.getObjectMultiBulkReply().stream()
        .map(BuilderFactory.STRING_MAP::build).collect(Collectors.toList());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelFailover,String sentinelFailover(String),"[8505, 8509]","{'A1': [(8505, 8509)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String sentinelFailover(String masterName) {
    connection.sendCommand(SENTINEL, SentinelKeyword.FAILOVER.name(), masterName);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelMonitor,"String sentinelMonitor(String,String,int,int)","[8511, 8517]","{'A1': [(8511, 8517)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String sentinelMonitor(String masterName, String ip, int port, int quorum) {
    CommandArguments args = new CommandArguments(SENTINEL).add(SentinelKeyword.MONITOR)
        .add(masterName).add(ip).add(port).add(quorum);
    connection.sendCommand(args);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelRemove,String sentinelRemove(String),"[8519, 8523]","{'A1': [(8519, 8523)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String sentinelRemove(String masterName) {
    connection.sendCommand(SENTINEL, REMOVE.name(), masterName);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sentinelSet,"String sentinelSet(String,Map<String, String>)","[8525, 8531]","{'A1': [(8525, 8531)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String sentinelSet(String masterName, Map<String, String> parameterMap) {
    CommandArguments args = new CommandArguments(SENTINEL).add(SentinelKeyword.SET).add(masterName);
    parameterMap.entrySet().forEach(entry -> args.add(entry.getKey()).add(entry.getValue()));
    connection.sendCommand(args);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,dump,byte[] dump(String),"[8533, 8537]","{'A1': [(8533, 8537)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] dump(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.dump(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,restore,"String restore(String,long,byte[])","[8539, 8543]","{'A1': [(8540, 8542)], 'A8': [(8539, 8539)], 'A7': [(8543, 8543)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String restore(final String key, final long ttl, final byte[] serializedValue) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.restore(key, ttl, serializedValue));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,restore,"String restore(String,long,byte[],RestoreParams)","[8545, 8550]","{'A1': [(8545, 8550)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String restore(final String key, final long ttl, final byte[] serializedValue,
      final RestoreParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.restore(key, ttl, serializedValue, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pttl,long pttl(String),"[8552, 8556]","{'A1': [(8553, 8555)], 'A8': [(8552, 8552)], 'A7': [(8556, 8556)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pttl(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pttl(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,psetex,"String psetex(String,long,String)","[8566, 8570]","{'A1': [(8566, 8570)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String psetex(final String key, final long milliseconds, final String value) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.psetex(key, milliseconds, value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclSetUser,String aclSetUser(String),"[8572, 8577]","{'A1': [(8572, 8577)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclSetUser(final String name) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, SETUSER.name(), name);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclSetUser,String aclSetUser(String),"[8579, 8584]","{'A1': [(8579, 8584)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclSetUser(String name, String... rules) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, joinParameters(SETUSER.name(), name, rules));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclDelUser,long aclDelUser(),"[8586, 8591]","{'A1': [(8587, 8590)], 'A8': [(8586, 8586)], 'A7': [(8591, 8591)]}","{'A1': 0.6666666666666666, 'A8': 0.16666666666666666, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long aclDelUser(final String... names) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, joinParameters(DELUSER.name(), names));
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclGetUser,AccessControlUser aclGetUser(String),"[8593, 8598]","{'A1': [(8594, 8597)], 'A8': [(8593, 8593)], 'A7': [(8598, 8598)]}","{'A1': 0.6666666666666666, 'A8': 0.16666666666666666, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public AccessControlUser aclGetUser(final String name) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, GETUSER.name(), name);
    return BuilderFactory.ACCESS_CONTROL_USER.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclUsers,List<String> aclUsers(),"[8600, 8605]","{'A1': [(8601, 8605)], 'A8': [(8600, 8600)]}","{'A1': 0.8333333333333334, 'A8': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> aclUsers() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, USERS);
    return BuilderFactory.STRING_LIST.build(connection.getObjectMultiBulkReply());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclList,List<String> aclList(),"[8607, 8612]","{'A1': [(8607, 8611)], 'A7': [(8612, 8612)]}","{'A1': 0.8333333333333334, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> aclList() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, LIST);
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclWhoAmI,String aclWhoAmI(),"[8614, 8619]","{'A1': [(8615, 8615), (8617, 8618)], 'A8': [(8616, 8616)], 'A7': [(8619, 8619)], 'A72': [(8614, 8614)]}","{'A1': 0.5, 'A8': 0.16666666666666666, 'A7': 0.16666666666666666, 'A72': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclWhoAmI() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, WHOAMI);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclCat,List<String> aclCat(),"[8621, 8626]","{'A1': [(8622, 8622), (8624, 8625)], 'A8': [(8623, 8623)], 'A7': [(8626, 8626)], 'A72': [(8621, 8621)]}","{'A1': 0.5, 'A8': 0.16666666666666666, 'A7': 0.16666666666666666, 'A72': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> aclCat() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, CAT);
    return BuilderFactory.STRING_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclCat,List<String> aclCat(String),"[8628, 8633]","{'A1': [(8628, 8633)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> aclCat(String category) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, CAT.name(), category);
    return BuilderFactory.STRING_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclLog,List<AccessControlLogEntry> aclLog(),"[8635, 8640]","{'A1': [(8636, 8636), (8638, 8639)], 'A14': [(8635, 8635), (8637, 8637), (8640, 8640)]}","{'A1': 0.5, 'A14': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<AccessControlLogEntry> aclLog() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, LOG);
    return BuilderFactory.ACCESS_CONTROL_LOG_ENTRY_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclLog,List<AccessControlLogEntry> aclLog(int),"[8642, 8647]","{'A1': [(8643, 8643), (8645, 8646)], 'A8': [(8642, 8642), (8644, 8644)], 'A7': [(8647, 8647)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<AccessControlLogEntry> aclLog(int limit) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, LOG.getRaw(), toByteArray(limit));
    return BuilderFactory.ACCESS_CONTROL_LOG_ENTRY_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclLoad,String aclLoad(),"[8649, 8654]","{'A1': [(8650, 8650), (8652, 8653)], 'A8': [(8649, 8649), (8651, 8651)], 'A7': [(8654, 8654)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclLoad() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, LOAD);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclSave,String aclSave(),"[8656, 8661]","{'A1': [(8657, 8657), (8659, 8660)], 'A8': [(8656, 8656), (8658, 8658)], 'A7': [(8661, 8661)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclSave() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, Keyword.SAVE);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclGenPass,String aclGenPass(),"[8663, 8667]","{'A1': [(8663, 8667)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclGenPass() {
    connection.sendCommand(ACL, GENPASS);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclGenPass,String aclGenPass(int),"[8669, 8674]","{'A1': [(8670, 8670), (8672, 8673)], 'A8': [(8669, 8669), (8671, 8671)], 'A7': [(8674, 8674)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclGenPass(int bits) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ACL, GENPASS.getRaw(), toByteArray(bits));
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclDryRun,"String aclDryRun(String,String)","[8676, 8686]","{'A1': [(8676, 8686)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclDryRun(String username, String command, String... args) {
    checkIsInMultiOrPipeline();
    String[] allArgs = new String[3 + args.length];
    allArgs[0] = DRYRUN.name();
    allArgs[1] = username;
    allArgs[2] = command;
    System.arraycopy(args, 0, allArgs, 3, args.length);
    connection.sendCommand(ACL, allArgs);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclDryRun,"String aclDryRun(String,CommandArguments)","[8688, 8696]","{'A1': [(8688, 8696)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String aclDryRun(String username, CommandArguments commandArgs) {
    checkIsInMultiOrPipeline();
    CommandArguments allArgs = new CommandArguments(ACL).add(DRYRUN).add(username);
    Iterator<Rawable> it = commandArgs.iterator();
    while (it.hasNext()) allArgs.add(it.next());
    connection.sendCommand(allArgs);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclDryRunBinary,"byte[] aclDryRunBinary(byte[],byte[])","[8698, 8708]","{'A1': [(8698, 8708)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] aclDryRunBinary(byte[] username, byte[] command, byte[]... args) {
    checkIsInMultiOrPipeline();
    byte[][] allArgs = new byte[3 + args.length][];
    allArgs[0] = DRYRUN.getRaw();
    allArgs[1] = username;
    allArgs[2] = command;
    System.arraycopy(args, 0, allArgs, 3, args.length);
    connection.sendCommand(ACL, allArgs);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,aclDryRunBinary,"byte[] aclDryRunBinary(byte[],CommandArguments)","[8710, 8718]","{'A1': [(8710, 8718)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] aclDryRunBinary(byte[] username, CommandArguments commandArgs) {
    checkIsInMultiOrPipeline();
    CommandArguments allArgs = new CommandArguments(ACL).add(DRYRUN).add(username);
    Iterator<Rawable> it = commandArgs.iterator();
    while (it.hasNext()) allArgs.add(it.next());
    connection.sendCommand(allArgs);
    return connection.getBinaryBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientKill,String clientKill(String),"[8720, 8725]","{'A1': [(8720, 8721), (8723, 8724)], 'A8': [(8722, 8722)], 'A7': [(8725, 8725)]}","{'A1': 0.6666666666666666, 'A8': 0.16666666666666666, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientKill(final String ipPort) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, KILL.name(), ipPort);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientGetname,String clientGetname(),"[8727, 8732]","{'A1': [(8727, 8732)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientGetname() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, GETNAME);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientList,String clientList(),"[8734, 8739]","{'A1': [(8734, 8739)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientList() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, LIST);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientList,String clientList(ClientType),"[8741, 8746]","{'A1': [(8741, 8746)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientList(ClientType type) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, LIST.getRaw(), Keyword.TYPE.getRaw(), type.getRaw());
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientList,String clientList(),"[8748, 8753]","{'A1': [(8751, 8752)], 'A14': [(8748, 8750), (8753, 8753)]}","{'A1': 0.3333333333333333, 'A14': 0.6666666666666666}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientList(final long... clientIds) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, clientListParams(clientIds));
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientInfo,String clientInfo(),"[8755, 8760]","{'A1': [(8758, 8759)], 'A14': [(8755, 8757), (8760, 8760)]}","{'A1': 0.3333333333333333, 'A14': 0.6666666666666666}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientInfo() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, Keyword.INFO);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientSetInfo,"String clientSetInfo(ClientAttributeOption,String)","[8762, 8767]","{'A10': [(8762, 8767)]}",{'A10': 1.0},A10,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientSetInfo(ClientAttributeOption attr, String value) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, SETINFO.getRaw(), attr.getRaw(), encode(value));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clientSetname,String clientSetname(String),"[8769, 8774]","{'A1': [(8769, 8769), (8772, 8773)], 'A8': [(8771, 8771)], 'A7': [(8770, 8770), (8774, 8774)]}","{'A1': 0.5, 'A8': 0.16666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clientSetname(final String name) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLIENT, SETNAME.name(), name);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,migrate,"String migrate(String,int,String,int,int)","[8776, 8781]","{'A1': [(8776, 8776), (8780, 8780)], 'A8': [(8779, 8779)], 'A7': [(8777, 8778), (8781, 8781)]}","{'A1': 0.3333333333333333, 'A8': 0.16666666666666666, 'A7': 0.5}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String migrate(final String host, final int port, final String key,
      final int destinationDb, final int timeout) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.migrate(host, port, key, destinationDb, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,migrate,"String migrate(String,int,int,int,MigrateParams)","[8783, 8788]","{'A1': [(8783, 8788)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String migrate(final String host, final int port, final int destinationDB,
      final int timeout, final MigrateParams params, final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.migrate(host, port, destinationDB, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,migrate,"String migrate(String,int,String,int)","[8790, 8794]","{'A1': [(8790, 8794)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String migrate(String host, int port, String key, int timeout) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.migrate(host, port, key, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,migrate,"String migrate(String,int,int,MigrateParams)","[8796, 8800]","{'A1': [(8796, 8800)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String migrate(String host, int port, int timeout, MigrateParams params, String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.migrate(host, port, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scan,ScanResult<String> scan(String),"[8802, 8805]","{'A1': [(8804, 8804)], 'A8': [(8802, 8802)], 'A7': [(8803, 8803), (8805, 8805)]}","{'A1': 0.25, 'A8': 0.25, 'A7': 0.5}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<String> scan(final String cursor) {
    return connection.executeCommand(commandObjects.scan(cursor));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scan,"ScanResult<String> scan(String,ScanParams)","[8807, 8810]","{'A1': [(8809, 8810)], 'A8': [(8807, 8807)], 'A7': [(8808, 8808)]}","{'A1': 0.5, 'A8': 0.25, 'A7': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<String> scan(final String cursor, final ScanParams params) {
    return connection.executeCommand(commandObjects.scan(cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,scan,"ScanResult<String> scan(String,ScanParams,String)","[8812, 8816]","{'A1': [(8812, 8813), (8815, 8815)], 'A8': [(8814, 8814)], 'A7': [(8816, 8816)]}","{'A1': 0.6, 'A8': 0.2, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<String> scan(final String cursor, final ScanParams params, final String type) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.scan(cursor, params, type));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hscan,"ScanResult<Map.Entry<String, String>> hscan(String,String,ScanParams)","[8818, 8823]","{'A1': [(8822, 8822)], 'A8': [(8818, 8818), (8821, 8821)], 'A7': [(8819, 8820), (8823, 8823)]}","{'A1': 0.16666666666666666, 'A8': 0.3333333333333333, 'A7': 0.5}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<Map.Entry<String, String>> hscan(final String key, final String cursor,
      final ScanParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hscanNoValues,"ScanResult<String> hscanNoValues(String,String,ScanParams)","[8825, 8829]","{'A40': [(8825, 8829)]}",{'A40': 1.0},A40,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<String> hscanNoValues(final String key, final String cursor, final ScanParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hscanNoValues(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sscan,"ScanResult<String> sscan(String,String,ScanParams)","[8831, 8835]","{'A1': [(8834, 8834)], 'A8': [(8831, 8831), (8833, 8833)], 'A7': [(8832, 8832), (8835, 8835)]}","{'A1': 0.2, 'A8': 0.4, 'A7': 0.4}",A8,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<String> sscan(final String key, final String cursor, final ScanParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.sscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,zscan,"ScanResult<Tuple> zscan(String,String,ScanParams)","[8837, 8841]","{'A1': [(8840, 8840)], 'A8': [(8837, 8837), (8839, 8839)], 'A7': [(8838, 8838), (8841, 8841)]}","{'A1': 0.2, 'A8': 0.4, 'A7': 0.4}",A8,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public ScanResult<Tuple> zscan(final String key, final String cursor, final ScanParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.zscan(key, cursor, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,readonly,String readonly(),"[8843, 8848]","{'A1': [(8843, 8848)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String readonly() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(READONLY);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,readwrite,String readwrite(),"[8850, 8855]","{'A1': [(8850, 8855)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String readwrite() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(READWRITE);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterNodes,String clusterNodes(),"[8857, 8862]","{'A1': [(8860, 8861)], 'A8': [(8857, 8857), (8859, 8859)], 'A7': [(8858, 8858), (8862, 8862)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterNodes() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.NODES);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterMeet,"String clusterMeet(String,int)","[8864, 8869]","{'A1': [(8867, 8868)], 'A8': [(8864, 8864), (8866, 8866)], 'A7': [(8865, 8865), (8869, 8869)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterMeet(final String ip, final int port) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.MEET.name(), ip, Integer.toString(port));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterReset,String clusterReset(),"[8871, 8876]","{'A1': [(8872, 8872), (8874, 8875)], 'A8': [(8871, 8871), (8873, 8873)], 'A7': [(8876, 8876)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterReset() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.RESET);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterReset,String clusterReset(ClusterResetType),"[8878, 8883]","{'A1': [(8878, 8883)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterReset(final ClusterResetType resetType) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.RESET.getRaw(), resetType.getRaw());
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterAddSlots,String clusterAddSlots(),"[8885, 8890]","{'A1': [(8888, 8889)], 'A8': [(8885, 8885), (8887, 8887)], 'A7': [(8886, 8886), (8890, 8890)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterAddSlots(final int... slots) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, joinParameters(ClusterKeyword.ADDSLOTS.getRaw(), joinParameters(slots)));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterDelSlots,String clusterDelSlots(),"[8892, 8897]","{'A1': [(8895, 8896)], 'A8': [(8892, 8892), (8894, 8894)], 'A7': [(8893, 8893), (8897, 8897)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterDelSlots(final int... slots) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, joinParameters(ClusterKeyword.DELSLOTS.getRaw(), joinParameters(slots)));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterInfo,String clusterInfo(),"[8899, 8904]","{'A1': [(8902, 8903)], 'A8': [(8899, 8899), (8901, 8901)], 'A7': [(8900, 8900), (8904, 8904)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterInfo() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.INFO);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterGetKeysInSlot,"List<String> clusterGetKeysInSlot(int,int)","[8906, 8911]","{'A1': [(8909, 8910)], 'A8': [(8906, 8906), (8908, 8908)], 'A7': [(8907, 8907), (8911, 8911)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> clusterGetKeysInSlot(final int slot, final int count) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.GETKEYSINSLOT.getRaw(), toByteArray(slot), toByteArray(count));
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterGetKeysInSlotBinary,"List<byte[]> clusterGetKeysInSlotBinary(int,int)","[8913, 8918]","{'A1': [(8916, 8917)], 'A73': [(8913, 8915), (8918, 8918)]}","{'A1': 0.3333333333333333, 'A73': 0.6666666666666666}",A73,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<byte[]> clusterGetKeysInSlotBinary(final int slot, final int count) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.GETKEYSINSLOT.getRaw(), toByteArray(slot), toByteArray(count));
    return connection.getBinaryMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterSetSlotNode,"String clusterSetSlotNode(int,String)","[8920, 8925]","{'A1': [(8923, 8924)], 'A8': [(8920, 8920), (8922, 8922)], 'A7': [(8921, 8921), (8925, 8925)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterSetSlotNode(final int slot, final String nodeId) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.SETSLOT.getRaw(), toByteArray(slot), ClusterKeyword.NODE.getRaw(), encode(nodeId));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterSetSlotMigrating,"String clusterSetSlotMigrating(int,String)","[8927, 8932]","{'A1': [(8930, 8931)], 'A8': [(8927, 8927), (8929, 8929)], 'A7': [(8928, 8928), (8932, 8932)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterSetSlotMigrating(final int slot, final String nodeId) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.SETSLOT.getRaw(), toByteArray(slot), ClusterKeyword.MIGRATING.getRaw(), encode(nodeId));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterSetSlotImporting,"String clusterSetSlotImporting(int,String)","[8934, 8939]","{'A1': [(8937, 8938)], 'A8': [(8934, 8934), (8936, 8936)], 'A7': [(8935, 8935), (8939, 8939)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterSetSlotImporting(final int slot, final String nodeId) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.SETSLOT.getRaw(), toByteArray(slot), ClusterKeyword.IMPORTING.getRaw(), encode(nodeId));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterSetSlotStable,String clusterSetSlotStable(int),"[8941, 8946]","{'A1': [(8944, 8945)], 'A8': [(8941, 8941), (8943, 8943)], 'A7': [(8942, 8942), (8946, 8946)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterSetSlotStable(final int slot) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.SETSLOT.getRaw(), toByteArray(slot), ClusterKeyword.STABLE.getRaw());
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterForget,String clusterForget(String),"[8948, 8953]","{'A1': [(8951, 8952)], 'A8': [(8948, 8948), (8950, 8950)], 'A7': [(8949, 8949), (8953, 8953)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterForget(final String nodeId) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.FORGET.name(), nodeId);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterFlushSlots,String clusterFlushSlots(),"[8955, 8960]","{'A1': [(8958, 8959)], 'A8': [(8955, 8955), (8957, 8957)], 'A7': [(8956, 8956), (8960, 8960)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterFlushSlots() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.FLUSHSLOTS);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterKeySlot,long clusterKeySlot(String),"[8962, 8967]","{'A1': [(8963, 8963), (8965, 8966)], 'A8': [(8962, 8962), (8964, 8964)], 'A7': [(8967, 8967)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long clusterKeySlot(final String key) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.KEYSLOT.name(), key);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterCountFailureReports,long clusterCountFailureReports(String),"[8969, 8974]","{'A12': [(8969, 8972), (8974, 8974)], 'A18': [(8973, 8973)]}","{'A12': 0.8333333333333334, 'A18': 0.16666666666666666}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long clusterCountFailureReports(final String nodeId) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ""COUNT-FAILURE-REPORTS"",  nodeId);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterCountKeysInSlot,long clusterCountKeysInSlot(int),"[8976, 8981]","{'A1': [(8977, 8977), (8979, 8980)], 'A8': [(8976, 8976), (8978, 8978)], 'A7': [(8981, 8981)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long clusterCountKeysInSlot(final int slot) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.COUNTKEYSINSLOT.getRaw(), toByteArray(slot));
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterSaveConfig,String clusterSaveConfig(),"[8983, 8988]","{'A1': [(8986, 8987)], 'A8': [(8983, 8983), (8985, 8985)], 'A7': [(8984, 8984), (8988, 8988)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterSaveConfig() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.SAVECONFIG);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterSetConfigEpoch,String clusterSetConfigEpoch(long),"[8990, 8995]","{'A1': [(8990, 8995)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterSetConfigEpoch(long configEpoch) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ""SET-CONFIG-EPOCH"", Long.toString(configEpoch));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterBumpEpoch,String clusterBumpEpoch(),"[8997, 9002]","{'A1': [(8997, 9002)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterBumpEpoch() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.BUMPEPOCH);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterReplicate,String clusterReplicate(String),"[9004, 9009]","{'A1': [(9007, 9008)], 'A8': [(9004, 9004), (9006, 9006)], 'A7': [(9005, 9005), (9009, 9009)]}","{'A1': 0.3333333333333333, 'A8': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterReplicate(final String nodeId) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.REPLICATE.name(), nodeId);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterSlaves,List<String> clusterSlaves(String),"[9011, 9017]","{'A1': [(9015, 9017)], 'A8': [(9011, 9011), (9014, 9014)], 'A7': [(9013, 9013)], 'A26': [(9012, 9012)]}","{'A1': 0.42857142857142855, 'A8': 0.2857142857142857, 'A7': 0.14285714285714285, 'A26': 0.14285714285714285}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  @Deprecated
  public List<String> clusterSlaves(final String nodeId) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.SLAVES.name(), nodeId);
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterReplicas,List<String> clusterReplicas(String),"[9019, 9024]","{'A1': [(9019, 9024)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> clusterReplicas(final String nodeId) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.REPLICAS.name(), nodeId);
    return connection.getMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterFailover,String clusterFailover(),"[9026, 9031]","{'A1': [(9026, 9030)], 'A7': [(9031, 9031)]}","{'A1': 0.8333333333333334, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterFailover() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.FAILOVER);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterFailover,String clusterFailover(ClusterFailoverOption),"[9033, 9038]","{'A1': [(9034, 9034), (9036, 9037)], 'A8': [(9033, 9033), (9035, 9035)], 'A7': [(9038, 9038)]}","{'A1': 0.5, 'A8': 0.3333333333333333, 'A7': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterFailover(ClusterFailoverOption failoverOption) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.FAILOVER.getRaw(), failoverOption.getRaw());
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterSlots,List<Object> clusterSlots(),"[9040, 9046]","{'A1': [(9044, 9045)], 'A8': [(9043, 9043)], 'A7': [(9040, 9040), (9042, 9042), (9046, 9046)], 'A18': [(9041, 9041)]}","{'A1': 0.2857142857142857, 'A8': 0.14285714285714285, 'A7': 0.42857142857142855, 'A18': 0.14285714285714285}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  @Deprecated
  public List<Object> clusterSlots() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.SLOTS);
    return connection.getObjectMultiBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterShards,List<ClusterShardInfo> clusterShards(),"[9048, 9053]","{'A18': [(9048, 9053)]}",{'A18': 1.0},A18,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<ClusterShardInfo> clusterShards() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.SHARDS);
    return BuilderFactory.CLUSTER_SHARD_INFO_LIST.build(connection.getObjectMultiBulkReply());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterMyId,String clusterMyId(),"[9055, 9060]","{'A1': [(9055, 9060)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterMyId() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.MYID);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterMyShardId,String clusterMyShardId(),"[9062, 9067]","{'A1': [(9062, 9067)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterMyShardId() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.MYSHARDID);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterLinks,"List<Map<String, Object>> clusterLinks()","[9069, 9075]","{'A26': [(9069, 9075)]}",{'A26': 1.0},A26,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map<String, Object>> clusterLinks() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER, ClusterKeyword.LINKS);
    return connection.getObjectMultiBulkReply().stream()
            .map(BuilderFactory.ENCODED_OBJECT_MAP::build).collect(Collectors.toList());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterAddSlotsRange,String clusterAddSlotsRange(),"[9077, 9083]","{'A26': [(9077, 9083)]}",{'A26': 1.0},A26,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterAddSlotsRange(int... ranges) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER,
        joinParameters(ClusterKeyword.ADDSLOTSRANGE.getRaw(), joinParameters(ranges)));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,clusterDelSlotsRange,String clusterDelSlotsRange(),"[9085, 9091]","{'A26': [(9085, 9091)]}",{'A26': 1.0},A26,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String clusterDelSlotsRange(int... ranges) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(CLUSTER,
        joinParameters(ClusterKeyword.DELSLOTSRANGE.getRaw(), joinParameters(ranges)));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,asking,String asking(),"[9093, 9098]","{'A1': [(9093, 9093), (9096, 9097)], 'A8': [(9095, 9095)], 'A7': [(9094, 9094), (9098, 9098)]}","{'A1': 0.5, 'A8': 0.16666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String asking() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(ASKING);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pfadd,long pfadd(String),"[9100, 9104]","{'A1': [(9101, 9101), (9103, 9103)], 'A8': [(9100, 9100), (9102, 9102)], 'A7': [(9104, 9104)]}","{'A1': 0.4, 'A8': 0.4, 'A7': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pfadd(final String key, final String... elements) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pfadd(key, elements));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pfcount,long pfcount(String),"[9106, 9110]","{'A1': [(9109, 9109)], 'A8': [(9106, 9106), (9108, 9108)], 'A7': [(9107, 9107), (9110, 9110)]}","{'A1': 0.2, 'A8': 0.4, 'A7': 0.4}",A8,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pfcount(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pfcount(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pfcount,long pfcount(),"[9112, 9116]","{'A1': [(9113, 9113), (9115, 9115)], 'A8': [(9114, 9114)], 'A7': [(9112, 9112), (9116, 9116)]}","{'A1': 0.4, 'A8': 0.2, 'A7': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long pfcount(final String... keys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pfcount(keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,pfmerge,String pfmerge(String),"[9118, 9122]","{'A1': [(9121, 9121)], 'A8': [(9118, 9118), (9120, 9120)], 'A7': [(9119, 9119), (9122, 9122)]}","{'A1': 0.2, 'A8': 0.4, 'A7': 0.4}",A8,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String pfmerge(final String destkey, final String... sourcekeys) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.pfmerge(destkey, sourcekeys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,fcall,"Object fcall(String,List<String>,List<String>)","[9124, 9127]","{'A12': [(9124, 9127)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object fcall(final String name, final List<String> keys, final List<String> args) {
    return connection.executeCommand(commandObjects.fcall(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,fcallReadonly,"Object fcallReadonly(String,List<String>,List<String>)","[9129, 9132]","{'A12': [(9129, 9132)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object fcallReadonly(final String name, final List<String> keys, final List<String> args) {
    return connection.executeCommand(commandObjects.fcallReadonly(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionDelete,String functionDelete(String),"[9134, 9138]","{'A12': [(9134, 9138)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionDelete(final String libraryName) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionDelete(libraryName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionLoad,String functionLoad(String),"[9140, 9144]","{'A12': [(9140, 9144)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionLoad(final String functionCode) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionLoad(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionLoadReplace,String functionLoadReplace(String),"[9146, 9150]","{'A12': [(9146, 9150)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionLoadReplace(final String functionCode) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionLoadReplace(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionStats,FunctionStats functionStats(),"[9152, 9156]","{'A12': [(9152, 9156)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public FunctionStats functionStats() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionStats());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionFlush,String functionFlush(),"[9158, 9162]","{'A12': [(9158, 9162)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionFlush() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionFlush());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionFlush,String functionFlush(FlushMode),"[9164, 9168]","{'A12': [(9164, 9168)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionFlush(final FlushMode mode) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionFlush(mode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionKill,String functionKill(),"[9170, 9174]","{'A12': [(9170, 9174)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionKill() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionKill());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionList,List<LibraryInfo> functionList(),"[9176, 9180]","{'A12': [(9176, 9180)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<LibraryInfo> functionList() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionList());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionList,List<LibraryInfo> functionList(String),"[9182, 9186]","{'A12': [(9182, 9186)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<LibraryInfo> functionList(final String libraryNamePattern) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionList(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionListWithCode,List<LibraryInfo> functionListWithCode(),"[9188, 9191]","{'A12': [(9188, 9191)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<LibraryInfo> functionListWithCode() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionListWithCode());  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionListWithCode,List<LibraryInfo> functionListWithCode(String),"[9193, 9197]","{'A12': [(9193, 9197)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<LibraryInfo> functionListWithCode(String libraryNamePattern) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionListWithCode(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geoadd,"long geoadd(String,double,double,String)","[9199, 9204]","{'A1': [(9200, 9201), (9203, 9203)], 'A7': [(9199, 9199), (9202, 9202), (9204, 9204)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geoadd(final String key, final double longitude, final double latitude,
      final String member) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geoadd(key, longitude, latitude, member));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geoadd,"long geoadd(String,Map<String, GeoCoordinate>)","[9206, 9210]","{'A1': [(9207, 9207), (9209, 9209)], 'A7': [(9206, 9206), (9208, 9208), (9210, 9210)]}","{'A1': 0.4, 'A7': 0.6}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geoadd(final String key, final Map<String, GeoCoordinate> memberCoordinateMap) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geoadd(key, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geoadd,"long geoadd(String,GeoAddParams,Map<String, GeoCoordinate>)","[9212, 9216]","{'A1': [(9213, 9213), (9215, 9215)], 'A14': [(9212, 9212), (9214, 9214), (9216, 9216)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geoadd(final String key, final GeoAddParams params, final Map<String, GeoCoordinate> memberCoordinateMap) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geoadd(key, params, memberCoordinateMap));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geodist,"Double geodist(String,String,String)","[9218, 9222]","{'A1': [(9219, 9219), (9221, 9221)], 'A7': [(9218, 9218), (9220, 9220), (9222, 9222)]}","{'A1': 0.4, 'A7': 0.6}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double geodist(final String key, final String member1, final String member2) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geodist(key, member1, member2));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geodist,"Double geodist(String,String,String,GeoUnit)","[9224, 9229]","{'A1': [(9225, 9226), (9228, 9228)], 'A7': [(9224, 9224), (9227, 9227), (9229, 9229)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Double geodist(final String key, final String member1, final String member2,
      final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geodist(key, member1, member2, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geohash,List<String> geohash(String),"[9231, 9235]","{'A1': [(9232, 9232), (9234, 9234)], 'A7': [(9231, 9231), (9233, 9233), (9235, 9235)]}","{'A1': 0.4, 'A7': 0.6}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<String> geohash(final String key, String... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geohash(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geopos,List<GeoCoordinate> geopos(String),"[9237, 9241]","{'A1': [(9238, 9238), (9240, 9240)], 'A7': [(9237, 9237), (9239, 9239), (9241, 9241)]}","{'A1': 0.4, 'A7': 0.6}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoCoordinate> geopos(final String key, String... members) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geopos(key, members));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadius,"List<GeoRadiusResponse> georadius(String,double,double,double,GeoUnit)","[9243, 9248]","{'A1': [(9244, 9245), (9247, 9247)], 'A7': [(9243, 9243), (9246, 9246), (9248, 9248)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadius(final String key, final double longitude,
      final double latitude, final double radius, final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadius(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusReadonly,"List<GeoRadiusResponse> georadiusReadonly(String,double,double,double,GeoUnit)","[9250, 9255]","{'A1': [(9251, 9252), (9254, 9254)], 'A9': [(9250, 9250), (9253, 9253), (9255, 9255)]}","{'A1': 0.5, 'A9': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusReadonly(final String key, final double longitude,
      final double latitude, final double radius, final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadius,"List<GeoRadiusResponse> georadius(String,double,double,double,GeoUnit,GeoRadiusParam)","[9257, 9262]","{'A1': [(9258, 9259), (9261, 9261)], 'A7': [(9257, 9257), (9260, 9260), (9262, 9262)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadius(final String key, final double longitude,
      final double latitude, final double radius, final GeoUnit unit, final GeoRadiusParam param) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadius(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusStore,"long georadiusStore(String,double,double,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[9264, 9269]","{'A1': [(9265, 9266), (9268, 9268)], 'A16': [(9264, 9264), (9267, 9267), (9269, 9269)]}","{'A1': 0.5, 'A16': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long georadiusStore(final String key, double longitude, double latitude, double radius,
      GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusStore(key, longitude, latitude, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusReadonly,"List<GeoRadiusResponse> georadiusReadonly(String,double,double,double,GeoUnit,GeoRadiusParam)","[9271, 9276]","{'A1': [(9272, 9273), (9275, 9275)], 'A9': [(9271, 9271), (9274, 9274), (9276, 9276)]}","{'A1': 0.5, 'A9': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusReadonly(final String key, final double longitude,
      final double latitude, final double radius, final GeoUnit unit, final GeoRadiusParam param) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusReadonly(key, longitude, latitude, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMember,"List<GeoRadiusResponse> georadiusByMember(String,String,double,GeoUnit)","[9278, 9283]","{'A1': [(9279, 9280), (9282, 9282)], 'A7': [(9278, 9278), (9281, 9281), (9283, 9283)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusByMember(final String key, final String member,
      final double radius, final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMember(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMemberReadonly,"List<GeoRadiusResponse> georadiusByMemberReadonly(String,String,double,GeoUnit)","[9285, 9290]","{'A1': [(9286, 9287), (9289, 9289)], 'A9': [(9285, 9285), (9288, 9288), (9290, 9290)]}","{'A1': 0.5, 'A9': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusByMemberReadonly(final String key, final String member,
      final double radius, final GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMember,"List<GeoRadiusResponse> georadiusByMember(String,String,double,GeoUnit,GeoRadiusParam)","[9292, 9297]","{'A1': [(9293, 9294), (9296, 9296)], 'A7': [(9292, 9292), (9295, 9295), (9297, 9297)]}","{'A1': 0.5, 'A7': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusByMember(final String key, final String member,
      final double radius, final GeoUnit unit, final GeoRadiusParam param) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMember(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMemberStore,"long georadiusByMemberStore(String,String,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[9299, 9304]","{'A1': [(9300, 9300), (9303, 9303)], 'A16': [(9299, 9299), (9301, 9302), (9304, 9304)]}","{'A1': 0.3333333333333333, 'A16': 0.6666666666666666}",A16,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long georadiusByMemberStore(final String key, String member, double radius, GeoUnit unit,
      GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMemberStore(key, member, radius, unit, param, storeParam));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,georadiusByMemberReadonly,"List<GeoRadiusResponse> georadiusByMemberReadonly(String,String,double,GeoUnit,GeoRadiusParam)","[9306, 9311]","{'A1': [(9307, 9308), (9310, 9310)], 'A9': [(9306, 9306), (9309, 9309), (9311, 9311)]}","{'A1': 0.5, 'A9': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> georadiusByMemberReadonly(final String key, final String member,
      final double radius, final GeoUnit unit, final GeoRadiusParam param) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.georadiusByMemberReadonly(key, member, radius, unit, param));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(String,String,double,GeoUnit)","[9313, 9317]","{'A12': [(9313, 9317)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, String member, double radius, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(String,GeoCoordinate,double,GeoUnit)","[9319, 9323]","{'A12': [(9319, 9323)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, GeoCoordinate coord, double radius, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(String,String,double,double,GeoUnit)","[9325, 9329]","{'A12': [(9325, 9329)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, String member, double width, double height, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(String,GeoCoordinate,double,double,GeoUnit)","[9331, 9335]","{'A12': [(9331, 9335)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearch,"List<GeoRadiusResponse> geosearch(String,GeoSearchParam)","[9337, 9341]","{'A12': [(9337, 9341)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<GeoRadiusResponse> geosearch(String key, GeoSearchParam params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearch(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(String,String,String,double,GeoUnit)","[9343, 9347]","{'A12': [(9343, 9347)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(String dest, String src, String member, double radius, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, member, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(String,String,GeoCoordinate,double,GeoUnit)","[9349, 9353]","{'A12': [(9349, 9353)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(String dest, String src, GeoCoordinate coord, double radius, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, coord, radius, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(String,String,String,double,double,GeoUnit)","[9355, 9359]","{'A12': [(9355, 9359)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(String dest, String src, String member, double width, double height, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, member, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(String,String,GeoCoordinate,double,double,GeoUnit)","[9361, 9365]","{'A12': [(9361, 9365)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(String dest, String src, GeoCoordinate coord, double width, double height, GeoUnit unit) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, coord, width, height, unit));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStore,"long geosearchStore(String,String,GeoSearchParam)","[9367, 9371]","{'A12': [(9367, 9371)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStore(String dest, String src, GeoSearchParam params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStore(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,geosearchStoreStoreDist,"long geosearchStoreStoreDist(String,String,GeoSearchParam)","[9373, 9377]","{'A12': [(9373, 9377)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long geosearchStoreStoreDist(String dest, String src, GeoSearchParam params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.geosearchStoreStoreDist(dest, src, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,moduleLoad,String moduleLoad(String),"[9379, 9384]","{'A1': [(9380, 9381), (9383, 9383)], 'A12': [(9382, 9382)], 'A19': [(9379, 9379), (9384, 9384)]}","{'A1': 0.5, 'A12': 0.16666666666666666, 'A19': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String moduleLoad(final String path) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.MODULE, LOAD.name(), path);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,moduleLoad,String moduleLoad(String),"[9386, 9391]","{'A1': [(9391, 9391)], 'A12': [(9386, 9390)]}","{'A1': 0.16666666666666666, 'A12': 0.8333333333333334}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String moduleLoad(String path, String... args) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.MODULE, joinParameters(LOAD.name(), path, args));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,moduleLoadEx,"String moduleLoadEx(String,ModuleLoadExParams)","[9393, 9399]","{'A1': [(9393, 9398)], 'A12': [(9399, 9399)]}","{'A1': 0.8571428571428571, 'A12': 0.14285714285714285}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String moduleLoadEx(String path, ModuleLoadExParams params) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(new CommandArguments(Command.MODULE).add(LOADEX).add(path)
        .addParams(params));
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,moduleUnload,String moduleUnload(String),"[9401, 9406]","{'A1': [(9402, 9403), (9405, 9405)], 'A12': [(9404, 9404)], 'A19': [(9401, 9401), (9406, 9406)]}","{'A1': 0.5, 'A12': 0.16666666666666666, 'A19': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String moduleUnload(final String name) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.MODULE, UNLOAD.name(), name);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,moduleList,List<Module> moduleList(),"[9408, 9413]","{'A1': [(9410, 9410), (9412, 9412)], 'A14': [(9413, 9413)], 'A12': [(9411, 9411)], 'A19': [(9408, 9409)]}","{'A1': 0.3333333333333333, 'A14': 0.16666666666666666, 'A12': 0.16666666666666666, 'A19': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Module> moduleList() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(Command.MODULE, LIST);
    return BuilderFactory.MODULE_LIST.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitfield,List<Long> bitfield(String),"[9415, 9419]","{'A1': [(9416, 9416), (9418, 9418)], 'A58': [(9415, 9415), (9417, 9417), (9419, 9419)]}","{'A1': 0.4, 'A58': 0.6}",A58,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> bitfield(final String key, final String... arguments) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitfield(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,bitfieldReadonly,List<Long> bitfieldReadonly(String),"[9421, 9425]","{'A1': [(9424, 9424)], 'A16': [(9421, 9423), (9425, 9425)]}","{'A1': 0.2, 'A16': 0.8}",A16,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> bitfieldReadonly(final String key, final String... arguments) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.bitfieldReadonly(key, arguments));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hstrlen,"long hstrlen(String,String)","[9427, 9431]","{'A1': [(9428, 9428), (9430, 9431)], 'A58': [(9427, 9427), (9429, 9429)]}","{'A1': 0.6, 'A58': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long hstrlen(final String key, final String field) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hstrlen(key, field));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpire,"List<Long> hexpire(String,long)","[9433, 9437]","{'A1': [(9433, 9437)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpire(String key, long seconds, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpire(key, seconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpire,"List<Long> hexpire(String,long,ExpiryOption)","[9439, 9443]","{'A1': [(9439, 9443)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpire(String key, long seconds, ExpiryOption condition, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpire(key, seconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpire,"List<Long> hpexpire(String,long)","[9445, 9449]","{'A1': [(9445, 9449)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpire(String key, long milliseconds, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpire(key, milliseconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpire,"List<Long> hpexpire(String,long,ExpiryOption)","[9451, 9455]","{'A1': [(9451, 9455)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpire(String key, long milliseconds, ExpiryOption condition, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpire(key, milliseconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpireAt,"List<Long> hexpireAt(String,long)","[9457, 9461]","{'A1': [(9457, 9461)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpireAt(String key, long unixTimeSeconds, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpireAt(key, unixTimeSeconds, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpireAt,"List<Long> hexpireAt(String,long,ExpiryOption)","[9463, 9467]","{'A1': [(9463, 9467)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpireAt(String key, long unixTimeSeconds, ExpiryOption condition, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpireAt(key, unixTimeSeconds, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpireAt,"List<Long> hpexpireAt(String,long)","[9469, 9473]","{'A1': [(9469, 9473)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpireAt(String key, long unixTimeMillis, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpireAt(key, unixTimeMillis, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpireAt,"List<Long> hpexpireAt(String,long,ExpiryOption)","[9475, 9479]","{'A1': [(9475, 9479)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpireAt(String key, long unixTimeMillis, ExpiryOption condition, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpireAt(key, unixTimeMillis, condition, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hexpireTime,List<Long> hexpireTime(String),"[9481, 9485]","{'A1': [(9481, 9485)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hexpireTime(String key, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpexpireTime,List<Long> hpexpireTime(String),"[9487, 9491]","{'A1': [(9487, 9491)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpexpireTime(String key, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpexpireTime(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,httl,List<Long> httl(String),"[9493, 9497]","{'A1': [(9493, 9497)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> httl(String key, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.httl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpttl,List<Long> hpttl(String),"[9499, 9503]","{'A1': [(9499, 9503)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpttl(String key, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpttl(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,hpersist,List<Long> hpersist(String),"[9505, 9509]","{'A1': [(9505, 9508)], 'A58': [(9509, 9509)]}","{'A1': 0.8, 'A58': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Long> hpersist(String key, String... fields) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.hpersist(key, fields));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,memoryDoctor,String memoryDoctor(),"[9511, 9516]","{'A1': [(9514, 9515)], 'A74': [(9511, 9513), (9516, 9516)]}","{'A1': 0.3333333333333333, 'A74': 0.6666666666666666}",A74,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String memoryDoctor() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MEMORY, DOCTOR);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,memoryUsage,Long memoryUsage(String),"[9518, 9523]","{'A1': [(9518, 9523)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long memoryUsage(final String key) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MEMORY, USAGE.name(), key);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,memoryUsage,"Long memoryUsage(String,int)","[9525, 9530]","{'A1': [(9525, 9530)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Long memoryUsage(final String key, final int samples) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MEMORY, USAGE.getRaw(), encode(key), SAMPLES.getRaw(), toByteArray(samples));
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,memoryPurge,String memoryPurge(),"[9532, 9537]","{'A26': [(9532, 9537)]}",{'A26': 1.0},A26,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String memoryPurge() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MEMORY, PURGE);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,memoryStats,"Map<String, Object> memoryStats()","[9539, 9544]","{'A26': [(9539, 9544)]}",{'A26': 1.0},A26,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, Object> memoryStats() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(MEMORY, STATS);
    return BuilderFactory.ENCODED_OBJECT_MAP.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lolwut,String lolwut(),"[9546, 9551]","{'A12': [(9546, 9551)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String lolwut() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(LOLWUT);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,lolwut,String lolwut(LolwutParams),"[9553, 9558]","{'A12': [(9553, 9558)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String lolwut(LolwutParams lolwutParams) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(new CommandArguments(LOLWUT).addParams(lolwutParams));
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,reset,String reset(),"[9560, 9564]","{'A75': [(9560, 9564)]}",{'A75': 1.0},A75,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String reset() {
    connection.sendCommand(Command.RESET);
    return connection.getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,latencyDoctor,String latencyDoctor(),"[9566, 9571]","{'A1': [(9566, 9571)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String latencyDoctor() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(LATENCY, DOCTOR);
    return connection.getBulkReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,latencyLatest,"Map<String, LatencyLatestInfo> latencyLatest()","[9573, 9577]","{'A17': [(9573, 9577)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Map<String, LatencyLatestInfo> latencyLatest() {
    checkIsInMultiOrPipeline();
    connection.sendCommand(LATENCY, LATEST);
    return BuilderFactory.LATENCY_LATEST_RESPONSE.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,latencyHistory,List<LatencyHistoryInfo> latencyHistory(LatencyEvent),"[9579, 9583]","{'A17': [(9579, 9583)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public List<LatencyHistoryInfo> latencyHistory(LatencyEvent event) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(new CommandArguments(LATENCY).add(HISTORY).add(event));
    return BuilderFactory.LATENCY_HISTORY_RESPONSE.build(connection.getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,latencyReset,long latencyReset(),"[9585, 9591]","{'A17': [(9585, 9591)]}",{'A17': 1.0},A17,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public long latencyReset(LatencyEvent... events) {
    checkIsInMultiOrPipeline();
    CommandArguments arguments = new CommandArguments(LATENCY).add(Keyword.RESET);
    Arrays.stream(events).forEach(arguments::add);
    connection.sendCommand(arguments);
    return connection.getIntegerReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xadd,"StreamEntryID xadd(String,StreamEntryID,Map<String, String>)","[9593, 9597]","{'A1': [(9596, 9596)], 'A22': [(9593, 9595), (9597, 9597)]}","{'A1': 0.2, 'A22': 0.8}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public StreamEntryID xadd(final String key, final StreamEntryID id, final Map<String, String> hash) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xadd(key, id, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xadd,"StreamEntryID xadd(String,XAddParams,Map<String, String>)","[9599, 9603]","{'A1': [(9600, 9600), (9602, 9602)], 'A14': [(9599, 9599), (9601, 9601), (9603, 9603)]}","{'A1': 0.4, 'A14': 0.6}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public StreamEntryID xadd(final String key, final XAddParams params, final Map<String, String> hash) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xadd(key, params, hash));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xlen,long xlen(String),"[9605, 9609]","{'A1': [(9606, 9606), (9608, 9608)], 'A22': [(9605, 9605), (9607, 9607), (9609, 9609)]}","{'A1': 0.4, 'A22': 0.6}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xlen(final String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xlen(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrange,"List<StreamEntry> xrange(String,StreamEntryID,StreamEntryID)","[9611, 9615]","{'A1': [(9611, 9615)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntry> xrange(final String key, final StreamEntryID start, final StreamEntryID end) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrange(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrange,"List<StreamEntry> xrange(String,StreamEntryID,StreamEntryID,int)","[9617, 9622]","{'A1': [(9618, 9619), (9621, 9622)], 'A22': [(9617, 9617), (9620, 9620)]}","{'A1': 0.6666666666666666, 'A22': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntry> xrange(final String key, final StreamEntryID start,
      final StreamEntryID end, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrange(key, start, end, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrevrange,"List<StreamEntry> xrevrange(String,StreamEntryID,StreamEntryID)","[9624, 9629]","{'A1': [(9624, 9628)], 'A22': [(9629, 9629)]}","{'A1': 0.8333333333333334, 'A22': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntry> xrevrange(final String key, final StreamEntryID end,
      final StreamEntryID start) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrevrange(key, end, start));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrevrange,"List<StreamEntry> xrevrange(String,StreamEntryID,StreamEntryID,int)","[9631, 9636]","{'A1': [(9632, 9633), (9635, 9635)], 'A22': [(9631, 9631), (9634, 9634), (9636, 9636)]}","{'A1': 0.5, 'A22': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntry> xrevrange(final String key, final StreamEntryID end,
      final StreamEntryID start, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrevrange(key, end, start, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrange,"List<StreamEntry> xrange(String,String,String)","[9638, 9642]","{'A1': [(9638, 9642)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntry> xrange(final String key, final String start, final String end) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrange(key, start, end));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrange,"List<StreamEntry> xrange(String,String,String,int)","[9644, 9648]","{'A1': [(9644, 9648)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntry> xrange(final String key, final String start, final String end, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrange(key, start, end, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrevrange,"List<StreamEntry> xrevrange(String,String,String)","[9650, 9654]","{'A1': [(9650, 9654)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntry> xrevrange(final String key, final String end, final String start) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrevrange(key, end, start));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xrevrange,"List<StreamEntry> xrevrange(String,String,String,int)","[9656, 9660]","{'A1': [(9656, 9660)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntry> xrevrange(final String key, final String end, final String start, final int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xrevrange(key, end, start, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xread,"List<Map.Entry<String, List<StreamEntry>>> xread(XReadParams,Map<String, StreamEntryID>)","[9662, 9666]","{'A1': [(9662, 9666)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map.Entry<String, List<StreamEntry>>> xread(final XReadParams xReadParams, final Map<String, StreamEntryID> streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xread(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xreadAsMap,"Map<String, List<StreamEntry>> xreadAsMap(XReadParams,Map<String, StreamEntryID>)","[9668, 9672]","{'A1': [(9668, 9672)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, List<StreamEntry>> xreadAsMap(final XReadParams xReadParams, final Map<String, StreamEntryID> streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xreadAsMap(xReadParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xack,"long xack(String,String)","[9674, 9678]","{'A1': [(9675, 9675), (9677, 9677)], 'A22': [(9674, 9674), (9676, 9676), (9678, 9678)]}","{'A1': 0.4, 'A22': 0.6}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xack(final String key, final String group, final StreamEntryID... ids) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xack(key, group, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupCreate,"String xgroupCreate(String,String,StreamEntryID,boolean)","[9680, 9685]","{'A1': [(9682, 9682)], 'A12': [(9681, 9681), (9684, 9685)], 'A22': [(9680, 9680), (9683, 9683)]}","{'A1': 0.16666666666666666, 'A12': 0.5, 'A22': 0.3333333333333333}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String xgroupCreate(final String key, final String groupName, final StreamEntryID id,
      final boolean makeStream) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupCreate(key, groupName, id, makeStream));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupSetID,"String xgroupSetID(String,String,StreamEntryID)","[9687, 9691]","{'A12': [(9687, 9690)], 'A22': [(9691, 9691)]}","{'A12': 0.8, 'A22': 0.2}",A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String xgroupSetID(final String key, final String groupName, final StreamEntryID id) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupSetID(key, groupName, id));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupDestroy,"long xgroupDestroy(String,String)","[9693, 9697]","{'A12': [(9694, 9694), (9696, 9696)], 'A22': [(9693, 9693), (9695, 9695), (9697, 9697)]}","{'A12': 0.4, 'A22': 0.6}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xgroupDestroy(final String key, final String groupName) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupDestroy(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupCreateConsumer,"boolean xgroupCreateConsumer(String,String,String)","[9699, 9703]","{'A12': [(9700, 9700), (9702, 9702)], 'A22': [(9699, 9699), (9701, 9701), (9703, 9703)]}","{'A12': 0.4, 'A22': 0.6}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public boolean xgroupCreateConsumer(String key, String groupName, String consumerName) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupCreateConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xgroupDelConsumer,"long xgroupDelConsumer(String,String,String)","[9705, 9709]","{'A12': [(9706, 9706), (9708, 9708)], 'A22': [(9705, 9705), (9707, 9707), (9709, 9709)]}","{'A12': 0.4, 'A22': 0.6}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xgroupDelConsumer(final String key, final String groupName, final String consumerName) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xgroupDelConsumer(key, groupName, consumerName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xdel,long xdel(String),"[9711, 9715]","{'A1': [(9712, 9712), (9714, 9714)], 'A22': [(9711, 9711), (9713, 9713), (9715, 9715)]}","{'A1': 0.4, 'A22': 0.6}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xdel(final String key, final StreamEntryID... ids) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xdel(key, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xtrim,"long xtrim(String,long,boolean)","[9717, 9721]","{'A1': [(9718, 9718), (9720, 9720)], 'A22': [(9717, 9717), (9719, 9719), (9721, 9721)]}","{'A1': 0.4, 'A22': 0.6}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xtrim(final String key, final long maxLen, final boolean approximateLength) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xtrim(key, maxLen, approximateLength));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xtrim,"long xtrim(String,XTrimParams)","[9723, 9727]","{'A1': [(9724, 9724), (9726, 9726)], 'A14': [(9723, 9723), (9725, 9725)], 'A22': [(9727, 9727)]}","{'A1': 0.4, 'A14': 0.4, 'A22': 0.2}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public long xtrim(final String key, final XTrimParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xtrim(key, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xreadGroup,"List<Map.Entry<String, List<StreamEntry>>> xreadGroup(String,String,XReadGroupParams,Map<String, StreamEntryID>)","[9729, 9734]","{'A1': [(9729, 9732), (9734, 9734)], 'A12': [(9733, 9733)]}","{'A1': 0.8333333333333334, 'A12': 0.16666666666666666}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Map.Entry<String, List<StreamEntry>>> xreadGroup(final String groupName, final String consumer,
      final XReadGroupParams xReadGroupParams, final Map<String, StreamEntryID> streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xreadGroupAsMap,"Map<String, List<StreamEntry>> xreadGroupAsMap(String,String,XReadGroupParams,Map<String, StreamEntryID>)","[9736, 9741]","{'A1': [(9736, 9741)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map<String, List<StreamEntry>> xreadGroupAsMap(final String groupName, final String consumer,
      final XReadGroupParams xReadGroupParams, final Map<String, StreamEntryID> streams) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xreadGroupAsMap(groupName, consumer, xReadGroupParams, streams));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xpending,"StreamPendingSummary xpending(String,String)","[9743, 9747]","{'A12': [(9744, 9744), (9746, 9746)], 'A22': [(9743, 9743), (9745, 9745), (9747, 9747)]}","{'A12': 0.4, 'A22': 0.6}",A22,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public StreamPendingSummary xpending(final String key, final String groupName) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xpending(key, groupName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xpending,"List<StreamPendingEntry> xpending(String,String,XPendingParams)","[9749, 9753]","{'A14': [(9749, 9749), (9751, 9751)], 'A12': [(9750, 9750), (9752, 9752)], 'A22': [(9753, 9753)]}","{'A14': 0.4, 'A12': 0.4, 'A22': 0.2}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamPendingEntry> xpending(final String key, final String groupName, final XPendingParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xpending(key, groupName, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xclaim,"List<StreamEntry> xclaim(String,String,String,long,XClaimParams)","[9755, 9760]","{'A14': [(9755, 9755), (9757, 9758), (9760, 9760)], 'A12': [(9756, 9756), (9759, 9759)]}","{'A14': 0.6666666666666666, 'A12': 0.3333333333333333}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntry> xclaim(String key, String group, String consumerName, long minIdleTime,
      XClaimParams params, StreamEntryID... ids) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xclaim(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xclaimJustId,"List<StreamEntryID> xclaimJustId(String,String,String,long,XClaimParams)","[9762, 9767]","{'A14': [(9762, 9762), (9764, 9765), (9767, 9767)], 'A12': [(9763, 9763), (9766, 9766)]}","{'A14': 0.6666666666666666, 'A12': 0.3333333333333333}",A14,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamEntryID> xclaimJustId(String key, String group, String consumerName,
      long minIdleTime, XClaimParams params, StreamEntryID... ids) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xclaimJustId(key, group, consumerName, minIdleTime, params, ids));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xautoclaim,"Map.Entry<StreamEntryID, List<StreamEntry>> xautoclaim(String,String,String,long,StreamEntryID,XAutoClaimParams)","[9769, 9774]","{'A1': [(9773, 9773)], 'A9': [(9769, 9772), (9774, 9774)]}","{'A1': 0.16666666666666666, 'A9': 0.8333333333333334}",A9,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map.Entry<StreamEntryID, List<StreamEntry>> xautoclaim(String key, String group, String consumerName,
      long minIdleTime, StreamEntryID start, XAutoClaimParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xautoclaim(key, group, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xautoclaimJustId,"Map.Entry<StreamEntryID, List<StreamEntryID>> xautoclaimJustId(String,String,String,long,StreamEntryID,XAutoClaimParams)","[9776, 9781]","{'A1': [(9780, 9780)], 'A9': [(9776, 9779), (9781, 9781)]}","{'A1': 0.16666666666666666, 'A9': 0.8333333333333334}",A9,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Map.Entry<StreamEntryID, List<StreamEntryID>> xautoclaimJustId(String key, String group, String consumerName,
      long minIdleTime, StreamEntryID start, XAutoClaimParams params) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xautoclaimJustId(key, group, consumerName, minIdleTime, start, params));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoStream,StreamInfo xinfoStream(String),"[9783, 9786]","{'A1': [(9785, 9785)], 'A25': [(9783, 9784), (9786, 9786)]}","{'A1': 0.25, 'A25': 0.75}",A25,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public StreamInfo xinfoStream(String key) {
    return connection.executeCommand(commandObjects.xinfoStream(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoStreamFull,StreamFullInfo xinfoStreamFull(String),"[9788, 9792]","{'A1': [(9788, 9792)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public StreamFullInfo xinfoStreamFull(String key) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xinfoStreamFull(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoStreamFull,"StreamFullInfo xinfoStreamFull(String,int)","[9794, 9798]","{'A1': [(9794, 9798)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public StreamFullInfo xinfoStreamFull(String key, int count) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.xinfoStreamFull(key, count));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoGroups,List<StreamGroupInfo> xinfoGroups(String),"[9800, 9803]","{'A1': [(9800, 9803)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamGroupInfo> xinfoGroups(String key) {
    return connection.executeCommand(commandObjects.xinfoGroups(key));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoConsumers,"List<StreamConsumersInfo> xinfoConsumers(String,String)","[9805, 9808]","{'A1': [(9806, 9807)], 'A25': [(9805, 9805), (9808, 9808)]}","{'A1': 0.5, 'A25': 0.5}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamConsumersInfo> xinfoConsumers(String key, String group) {
    return connection.executeCommand(commandObjects.xinfoConsumers(key, group));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,xinfoConsumers2,"List<StreamConsumerInfo> xinfoConsumers2(String,String)","[9810, 9813]","{'A1': [(9810, 9813)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<StreamConsumerInfo> xinfoConsumers2(String key, String group) {
    return connection.executeCommand(commandObjects.xinfoConsumers2(key, group));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,fcall,"Object fcall(byte[],List<byte[]>,List<byte[]>)","[9815, 9819]","{'A12': [(9815, 9819)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object fcall(final byte[] name, final List<byte[]> keys, final List<byte[]> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.fcall(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,fcallReadonly,"Object fcallReadonly(byte[],List<byte[]>,List<byte[]>)","[9821, 9825]","{'A12': [(9821, 9825)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object fcallReadonly(final byte[] name, final List<byte[]> keys, final List<byte[]> args) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.fcallReadonly(name, keys, args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionDelete,String functionDelete(byte[]),"[9827, 9831]","{'A12': [(9827, 9831)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionDelete(final byte[] libraryName) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionDelete(libraryName));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionDump,byte[] functionDump(),"[9833, 9837]","{'A12': [(9833, 9837)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public byte[] functionDump() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionDump());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionListBinary,List<Object> functionListBinary(),"[9839, 9843]","{'A12': [(9839, 9843)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> functionListBinary() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionListBinary());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionList,List<Object> functionList(byte[]),"[9845, 9849]","{'A12': [(9845, 9849)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> functionList(final byte[] libraryNamePattern) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionList(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionListWithCodeBinary,List<Object> functionListWithCodeBinary(),"[9851, 9855]","{'A12': [(9851, 9855)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> functionListWithCodeBinary() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionListWithCodeBinary());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionListWithCode,List<Object> functionListWithCode(byte[]),"[9857, 9861]","{'A12': [(9857, 9861)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public List<Object> functionListWithCode(final byte[] libraryNamePattern) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionListWithCode(libraryNamePattern));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionLoad,String functionLoad(byte[]),"[9863, 9867]","{'A12': [(9863, 9867)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionLoad(final byte[] functionCode) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionLoad(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionLoadReplace,String functionLoadReplace(byte[]),"[9869, 9873]","{'A12': [(9869, 9873)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionLoadReplace(final byte[] functionCode) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionLoadReplace(functionCode));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionRestore,String functionRestore(byte[]),"[9875, 9879]","{'A12': [(9875, 9879)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionRestore(final byte[] serializedValue) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionRestore(serializedValue));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionRestore,"String functionRestore(byte[],FunctionRestorePolicy)","[9881, 9885]","{'A12': [(9881, 9885)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public String functionRestore(final byte[] serializedValue, final FunctionRestorePolicy policy) {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionRestore(serializedValue, policy));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,functionStatsBinary,Object functionStatsBinary(),"[9887, 9891]","{'A12': [(9887, 9891)]}",{'A12': 1.0},A12,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  @Override
  public Object functionStatsBinary() {
    checkIsInMultiOrPipeline();
    return connection.executeCommand(commandObjects.functionStatsBinary());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sendCommand,Object sendCommand(ProtocolCommand),"[9893, 9897]","{'A1': [(9894, 9896)], 'A76': [(9893, 9893), (9897, 9897)]}","{'A1': 0.6, 'A76': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Object sendCommand(ProtocolCommand cmd, String... args) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(cmd, args);
    return connection.getOne();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,sendBlockingCommand,Object sendBlockingCommand(ProtocolCommand),"[9899, 9908]","{'A1': [(9899, 9908)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  public Object sendBlockingCommand(ProtocolCommand cmd, String... args) {
    checkIsInMultiOrPipeline();
    connection.sendCommand(cmd, args);
    connection.setTimeoutInfinite();
    try {
      return connection.getOne();
    } finally {
      connection.rollbackTimeout();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,joinParameters,byte[][] joinParameters(),"[9910, 9916]","{'A1': [(9910, 9916)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  private static byte[][] joinParameters(int... params) {
    byte[][] result = new byte[params.length][];
    for (int i = 0; i < params.length; i++) {
      result[i] = toByteArray(params[i]);
    }
    return result;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,joinParameters,"byte[][] joinParameters(byte[],byte[][])","[9918, 9923]","{'A1': [(9918, 9923)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  private static byte[][] joinParameters(byte[] first, byte[][] rest) {
    byte[][] result = new byte[rest.length + 1][];
    result[0] = first;
    System.arraycopy(rest, 0, result, 1, rest.length);
    return result;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,joinParameters,"byte[][] joinParameters(byte[],byte[],byte[][])","[9925, 9931]","{'A1': [(9925, 9931)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  private static byte[][] joinParameters(byte[] first, byte[] second, byte[][] rest) {
    byte[][] result = new byte[rest.length + 2][];
    result[0] = first;
    result[1] = second;
    System.arraycopy(rest, 0, result, 2, rest.length);
    return result;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,joinParameters,"String[] joinParameters(String,String[])","[9933, 9938]","{'A1': [(9933, 9938)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  private static String[] joinParameters(String first, String[] rest) {
    String[] result = new String[rest.length + 1];
    result[0] = first;
    System.arraycopy(rest, 0, result, 1, rest.length);
    return result;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Jedis.java,Jedis,joinParameters,"String[] joinParameters(String,String,String[])","[9940, 9946]","{'A1': [(9940, 9946)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisTest.java,"  private static String[] joinParameters(String first, String second, String[] rest) {
    String[] result = new String[rest.length + 2];
    result[0] = first;
    result[1] = second;
    System.arraycopy(rest, 0, result, 2, rest.length);
    return result;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterPipeline.java,ClusterPipeline,createClusterCommandObjects,ClusterCommandObjects createClusterCommandObjects(RedisProtocol),"[43, 47]","{'A1': [(43, 47)]}",{'A1': 1.0},A1,,"  private static ClusterCommandObjects createClusterCommandObjects(RedisProtocol protocol) {
    ClusterCommandObjects cco = new ClusterCommandObjects();
    if (protocol == RedisProtocol.RESP3) cco.setProtocol(protocol);
    return cco;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterPipeline.java,ClusterPipeline,close,void close(),"[49, 56]","{'A1': [(49, 56)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    try {
      super.close();
    } finally {
      IOUtils.closeQuietly(closeable);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterPipeline.java,ClusterPipeline,getNodeKey,HostAndPort getNodeKey(CommandArguments),"[58, 61]","{'A1': [(58, 61)]}",{'A1': 1.0},A1,,"  @Override
  protected HostAndPort getNodeKey(CommandArguments args) {
    return provider.getNode(((ClusterCommandArguments) args).getCommandHashSlot());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterPipeline.java,ClusterPipeline,getConnection,Connection getConnection(HostAndPort),"[63, 66]","{'A1': [(63, 66)]}",{'A1': 1.0},A1,,"  @Override
  protected Connection getConnection(HostAndPort nodeKey) {
    return provider.getConnection(nodeKey);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterPipeline.java,ClusterPipeline,spublish,"Response<Long> spublish(String,String)","[68, 70]","{'A1': [(68, 70)]}",{'A1': 1.0},A1,,"  public Response<Long> spublish(String channel, String message) {
    return appendCommand(commandObjects.spublish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterPipeline.java,ClusterPipeline,spublish,"Response<Long> spublish(byte[],byte[])","[72, 74]","{'A1': [(72, 74)]}",{'A1': 1.0},A1,,"  public Response<Long> spublish(byte[] channel, byte[] message) {
    return appendCommand(commandObjects.spublish(channel, message));
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/CFReserveParams.java,CFReserveParams,reserveParams,CFReserveParams reserveParams(),"[18, 20]","{'A1': [(18, 20)]}",{'A1': 1.0},A1,,"  public static CFReserveParams reserveParams() {
    return new CFReserveParams();
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/CFReserveParams.java,CFReserveParams,bucketSize,CFReserveParams bucketSize(long),"[22, 25]","{'A1': [(22, 25)]}",{'A1': 1.0},A1,,"  public CFReserveParams bucketSize(long bucketSize) {
    this.bucketSize = bucketSize;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/CFReserveParams.java,CFReserveParams,maxIterations,CFReserveParams maxIterations(int),"[27, 30]","{'A1': [(27, 30)]}",{'A1': 1.0},A1,,"  public CFReserveParams maxIterations(int maxIterations) {
    this.maxIterations = maxIterations;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/CFReserveParams.java,CFReserveParams,expansion,CFReserveParams expansion(int),"[32, 35]","{'A1': [(32, 35)]}",{'A1': 1.0},A1,,"  public CFReserveParams expansion(int expansion) {
    this.expansion = expansion;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/CFReserveParams.java,CFReserveParams,addParams,void addParams(CommandArguments),"[37, 48]","{'A1': [(37, 48)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (bucketSize != null) {
      args.add(BUCKETSIZE).add(toByteArray(bucketSize));
    }
    if (maxIterations != null) {
      args.add(MAXITERATIONS).add(toByteArray(maxIterations));
    }
    if (expansion != null) {
      args.add(EXPANSION).add(toByteArray(expansion));
    }
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/TDigestMergeParams.java,TDigestMergeParams,mergeParams,TDigestMergeParams mergeParams(),"[15, 17]","{'A1': [(15, 17)]}",{'A1': 1.0},A1,,"  public static TDigestMergeParams mergeParams() {
    return new TDigestMergeParams();
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/TDigestMergeParams.java,TDigestMergeParams,compression,TDigestMergeParams compression(int),"[19, 22]","{'A1': [(19, 22)]}",{'A1': 1.0},A1,,"  public TDigestMergeParams compression(int compression) {
    this.compression = compression;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/TDigestMergeParams.java,TDigestMergeParams,override,TDigestMergeParams override(),"[24, 27]","{'A1': [(24, 27)]}",{'A1': 1.0},A1,,"  public TDigestMergeParams override() {
    this.override = true;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/TDigestMergeParams.java,TDigestMergeParams,addParams,void addParams(CommandArguments),"[29, 37]","{'A1': [(29, 37)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (compression != null) {
      args.add(COMPRESSION).add(toByteArray(compression));
    }
    if (override) {
      args.add(OVERRIDE);
    }
  }
"
redis.clients.jedis.bloom.commands,../projects/jedis/src/main/java/redis/clients/jedis/bloom/commands/CountMinSketchCommands.java,,cmsIncrBy,"long cmsIncrBy(String,String,long)","[51, 53]","{'A1': [(51, 53)]}",{'A1': 1.0},A1,,"  default long cmsIncrBy(String key, String item, long increment) {
    return cmsIncrBy(key, java.util.Collections.singletonMap(item, increment)).get(0);
  }
"
redis.clients.jedis.bloom.commands,../projects/jedis/src/main/java/redis/clients/jedis/bloom/commands/TopKFilterCommands.java,,topkIncrBy,"String topkIncrBy(String,String,long)","[47, 49]","{'A1': [(47, 49)]}",{'A1': 1.0},A1,,"  default String topkIncrBy(String key, String item, long increment) {
    return topkIncrBy(key, Collections.singletonMap(item, increment)).get(0);
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFReserveParams.java,BFReserveParams,reserveParams,BFReserveParams reserveParams(),"[15, 17]","{'A1': [(15, 17)]}",{'A1': 1.0},A1,,"  public static BFReserveParams reserveParams() {
    return new BFReserveParams();
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFReserveParams.java,BFReserveParams,expansion,BFReserveParams expansion(int),"[19, 22]","{'A1': [(19, 22)]}",{'A1': 1.0},A1,,"  public BFReserveParams expansion(int expansion) {
    this.expansion = expansion;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFReserveParams.java,BFReserveParams,nonScaling,BFReserveParams nonScaling(),"[24, 27]","{'A1': [(24, 27)]}",{'A1': 1.0},A1,,"  public BFReserveParams nonScaling() {
    this.nonScaling = true;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFReserveParams.java,BFReserveParams,addParams,void addParams(CommandArguments),"[29, 37]","{'A1': [(29, 37)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (expansion != null) {
      args.add(EXPANSION).add(toByteArray(expansion));
    }
    if (nonScaling) {
      args.add(NONSCALING);
    }
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/RedisBloomProtocol.java,RedisBloomProtocol.BloomFilterCommand,getRaw,byte[] getRaw(),"[28, 31]","{'A1': [(28, 31)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/RedisBloomProtocol.java,RedisBloomProtocol.CuckooFilterCommand,getRaw,byte[] getRaw(),"[55, 58]","{'A1': [(55, 58)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/RedisBloomProtocol.java,RedisBloomProtocol.CountMinSketchCommand,getRaw,byte[] getRaw(),"[76, 79]","{'A1': [(76, 79)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/RedisBloomProtocol.java,RedisBloomProtocol.TopKCommand,getRaw,byte[] getRaw(),"[97, 100]","{'A1': [(97, 100)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/RedisBloomProtocol.java,RedisBloomProtocol.TDigestCommand,getRaw,byte[] getRaw(),"[114, 117]","{'A1': [(114, 117)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/RedisBloomProtocol.java,RedisBloomProtocol.RedisBloomKeyword,getRaw,byte[] getRaw(),"[131, 134]","{'A1': [(131, 134)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFInsertParams.java,BFInsertParams,insertParams,BFInsertParams insertParams(),"[22, 24]","{'A1': [(22, 24)]}",{'A1': 1.0},A1,,"  public static BFInsertParams insertParams() {
    return new BFInsertParams();
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFInsertParams.java,BFInsertParams,capacity,BFInsertParams capacity(long),"[26, 29]","{'A1': [(26, 29)]}",{'A1': 1.0},A1,,"  public BFInsertParams capacity(long capacity) {
    this.capacity = capacity;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFInsertParams.java,BFInsertParams,error,BFInsertParams error(double),"[31, 34]","{'A1': [(31, 34)]}",{'A1': 1.0},A1,,"  public BFInsertParams error(double errorRate) {
    this.errorRate = errorRate;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFInsertParams.java,BFInsertParams,expansion,BFInsertParams expansion(int),"[36, 39]","{'A1': [(36, 39)]}",{'A1': 1.0},A1,,"  public BFInsertParams expansion(int expansion) {
    this.expansion = expansion;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFInsertParams.java,BFInsertParams,noCreate,BFInsertParams noCreate(),"[41, 44]","{'A1': [(41, 44)]}",{'A1': 1.0},A1,,"  public BFInsertParams noCreate() {
    this.noCreate = true;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFInsertParams.java,BFInsertParams,nonScaling,BFInsertParams nonScaling(),"[46, 49]","{'A1': [(46, 49)]}",{'A1': 1.0},A1,,"  public BFInsertParams nonScaling() {
    this.nonScaling = true;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/BFInsertParams.java,BFInsertParams,addParams,void addParams(CommandArguments),"[51, 68]","{'A1': [(51, 68)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (capacity != null) {
      args.add(CAPACITY).add(toByteArray(capacity));
    }
    if (errorRate != null) {
      args.add(ERROR).add(toByteArray(errorRate));
    }
    if (expansion != null) {
      args.add(EXPANSION).add(toByteArray(expansion));
    }
    if (noCreate) {
      args.add(NOCREATE);
    }
    if (nonScaling) {
      args.add(NONSCALING);
    }
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/CFInsertParams.java,CFInsertParams,insertParams,CFInsertParams insertParams(),"[16, 18]","{'A1': [(16, 18)]}",{'A1': 1.0},A1,,"  public static CFInsertParams insertParams() {
    return new CFInsertParams();
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/CFInsertParams.java,CFInsertParams,capacity,CFInsertParams capacity(long),"[20, 23]","{'A1': [(20, 23)]}",{'A1': 1.0},A1,,"  public CFInsertParams capacity(long capacity) {
    this.capacity = capacity;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/CFInsertParams.java,CFInsertParams,noCreate,CFInsertParams noCreate(),"[25, 28]","{'A1': [(25, 28)]}",{'A1': 1.0},A1,,"  public CFInsertParams noCreate() {
    this.noCreate = true;
    return this;
  }
"
redis.clients.jedis.bloom,../projects/jedis/src/main/java/redis/clients/jedis/bloom/CFInsertParams.java,CFInsertParams,addParams,void addParams(CommandArguments),"[30, 38]","{'A1': [(30, 38)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (capacity != null) {
      args.add(CAPACITY).add(toByteArray(capacity));
    }
    if (noCreate) {
      args.add(NOCREATE);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSafeAuthenticator.java,JedisSafeAuthenticator,sendAndFlushCommand,void sendAndFlushCommand(Command),"[32, 58]","{'A35': [(32, 58)]}",{'A35': 1.0},A35,,"  protected void sendAndFlushCommand(Command command, Object... args) {
    if (client == null) {
      throw new JedisException(getClass() + "" is not connected to a Connection."");
    }
    CommandArguments cargs = new CommandArguments(command).addObjects(args);

    Token newToken = pendingTokenRef.getAndSet(PLACEHOLDER_TOKEN);

    // lets send the command without locking !!IF!! we know that pendingTokenRef is null replaced with PLACEHOLDER_TOKEN and no re-auth will go into action
    // !!ELSE!! we are locking since we already know a re-auth is still in progress in another thread and we need to wait for it to complete, we do nothing but wait on it!
    if (newToken != null) {
      commandSync.lock();
    }
    try {
      client.sendCommand(cargs);
      client.flush();
    } finally {
      Token newerToken = pendingTokenRef.getAndSet(null);
      // lets check if a newer token received since the beginning of this sendAndFlushCommand call
      if (newerToken != null && newerToken != PLACEHOLDER_TOKEN) {
        safeReAuthenticate(newerToken);
      }
      if (newToken != null) {
        commandSync.unlock();
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSafeAuthenticator.java,JedisSafeAuthenticator,registerForAuthentication,void registerForAuthentication(Connection),"[60, 70]","{'A35': [(60, 70)]}",{'A35': 1.0},A35,,"  protected void registerForAuthentication(Connection newClient) {
    Connection oldClient = this.client;
    if (oldClient == newClient) return;
    if (oldClient != null && oldClient.getAuthXManager() != null) {
      oldClient.getAuthXManager().removePostAuthenticationHook(authenticationHandler);
    }
    if (newClient != null && newClient.getAuthXManager() != null) {
      newClient.getAuthXManager().addPostAuthenticationHook(authenticationHandler);
    }
    this.client = newClient;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSafeAuthenticator.java,JedisSafeAuthenticator,safeReAuthenticate,void safeReAuthenticate(Token),"[72, 92]","{'A35': [(72, 92)]}",{'A35': 1.0},A35,,"  private void safeReAuthenticate(Token token) {
    try {
      byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());
      byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());

      Token newToken = pendingTokenRef.getAndSet(token);
      if (newToken == null) {
        commandSync.lock();
        try {
          sendAndFlushCommand(Command.AUTH, rawUser, rawPass);
          resultHandler.add(this.authResultHandler);
        } finally {
          pendingTokenRef.set(null);
          commandSync.unlock();
        }
      }
    } catch (Exception e) {
      logger.error(""Error while re-authenticating connection"", e);
      client.getAuthXManager().getListener().onConnectionAuthenticationError(e);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSafeAuthenticator.java,JedisSafeAuthenticator,processAuthReply,void processAuthReply(Object),"[94, 103]","{'A35': [(94, 103)]}",{'A35': 1.0},A35,,"  protected void processAuthReply(Object reply) {
    byte[] resp = (byte[]) reply;
    String response = SafeEncoder.encode(resp);
    if (!""OK"".equals(response)) {
      String msg = ""Re-authentication failed with server response: "" + response;
      Exception failedAuth = new JedisAuthenticationException(msg);
      logger.error(failedAuth.getMessage(), failedAuth);
      client.getAuthXManager().getListener().onConnectionAuthenticationError(failedAuth);
    }
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/ServerCommands.java,,shutdown,void shutdown(SaveMode),"[125, 127]","{'A1': [(125, 127)]}",{'A1': 1.0},A1,,"  default void shutdown(SaveMode saveMode) throws JedisException {
    shutdown(ShutdownParams.shutdownParams().saveMode(saveMode));
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/StreamPipelineBinaryCommands.java,,xadd,"Response<byte[]> xadd(byte[],Map<byte[], byte[]>,XAddParams)","[13, 15]","{'A1': [(13, 15)]}",{'A1': 1.0},A1,,"  default Response<byte[]> xadd(byte[] key, Map<byte[], byte[]> hash, XAddParams params) {
    return xadd(key, params, hash);
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/StreamBinaryCommands.java,,xadd,"byte[] xadd(byte[],Map<byte[], byte[]>,XAddParams)","[12, 14]","{'A1': [(12, 14)]}",{'A1': 1.0},A1,,"  default byte[] xadd(byte[] key, Map<byte[], byte[]> hash, XAddParams params) {
    return xadd(key, params, hash);
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/StreamCommands.java,,xadd,"StreamEntryID xadd(String,Map<String, String>,XAddParams)","[25, 27]","{'A1': [(25, 27)]}",{'A1': 1.0},A1,,"  default StreamEntryID xadd(String key, Map<String, String> hash, XAddParams params) {
    return xadd(key, params, hash);
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/SortedSetPipelineBinaryCommands.java,,zscan,"Response<ScanResult<Tuple>> zscan(byte[],byte[])","[127, 129]","{'A1': [(127, 129)]}",{'A1': 1.0},A1,,"  default Response<ScanResult<Tuple>> zscan(byte[] key, byte[] cursor) {
    return zscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/HashCommands.java,,hscan,"ScanResult<Map.Entry<String, String>> hscan(String,String)","[103, 105]","{'A1': [(103, 105)]}",{'A1': 1.0},A1,,"  default ScanResult<Map.Entry<String, String>> hscan(String key, String cursor) {
    return hscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/HashCommands.java,,hscanNoValues,"ScanResult<String> hscanNoValues(String,String)","[109, 111]","{'A40': [(109, 111)]}",{'A40': 1.0},A40,,"  default ScanResult<String> hscanNoValues(String key, String cursor) {
    return hscanNoValues(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/SetCommands.java,,sscan,"ScanResult<String> sscan(String,String)","[129, 131]","{'A1': [(129, 131)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/commands/../projects/jedis/src/test/java/redis/clients/jedis/commands/jedis/SetCommandsTest.java,"  default ScanResult<String> sscan(String key, String cursor) {
    return sscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/HashPipelineBinaryCommands.java,,hscan,"Response<ScanResult<Map.Entry<byte[], byte[]>>> hscan(byte[],byte[])","[58, 60]","{'A1': [(58, 60)]}",{'A1': 1.0},A1,,"  default Response<ScanResult<Map.Entry<byte[], byte[]>>> hscan(byte[] key, byte[] cursor) {
    return hscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/HashPipelineBinaryCommands.java,,hscanNoValues,"Response<ScanResult<byte[]>> hscanNoValues(byte[],byte[])","[64, 66]","{'A1': [(64, 66)]}",{'A1': 1.0},A1,,"  default Response<ScanResult<byte[]>> hscanNoValues(byte[] key, byte[] cursor) {
    return hscanNoValues(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/StreamPipelineCommands.java,,xadd,"Response<StreamEntryID> xadd(String,Map<String, String>,XAddParams)","[26, 28]","{'A1': [(26, 28)]}",{'A1': 1.0},A1,,"  default Response<StreamEntryID> xadd(String key, Map<String, String> hash, XAddParams params) {
    return xadd(key, params, hash);
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/SortedSetCommands.java,,zscan,"ScanResult<Tuple> zscan(String,String)","[658, 660]","{'A1': [(658, 660)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/commands/../projects/jedis/src/test/java/redis/clients/jedis/commands/jedis/SortedSetCommandsTest.java,"  default ScanResult<Tuple> zscan(String key, String cursor) {
    return zscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/HashBinaryCommands.java,,hscan,"ScanResult<Map.Entry<byte[], byte[]>> hscan(byte[],byte[])","[103, 105]","{'A1': [(103, 105)]}",{'A1': 1.0},A1,,"  default ScanResult<Map.Entry<byte[], byte[]>> hscan(byte[] key, byte[] cursor) {
    return hscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/HashBinaryCommands.java,,hscanNoValues,"ScanResult<byte[]> hscanNoValues(byte[],byte[])","[109, 111]","{'A40': [(109, 111)]}",{'A40': 1.0},A40,,"  default ScanResult<byte[]> hscanNoValues(byte[] key, byte[] cursor) {
    return hscanNoValues(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/SortedSetBinaryCommands.java,,zscan,"ScanResult<Tuple> zscan(byte[],byte[])","[126, 128]","{'A1': [(126, 128)]}",{'A1': 1.0},A1,,"  default ScanResult<Tuple> zscan(byte[] key, byte[] cursor) {
    return zscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/SetPipelineCommands.java,,sscan,"Response<ScanResult<String>> sscan(String,String)","[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/commands/../projects/jedis/src/test/java/redis/clients/jedis/commands/unified/../projects/jedis/src/test/java/redis/clients/jedis/commands/unified/pipeline/SetPipelineCommandsTest.java,"  default Response<ScanResult<String>> sscan(String key, String cursor) {
    return sscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/SetPipelineCommands.java,,sdiffStore,Response<Long> sdiffStore(String),"[45, 48]","{'A40': [(45, 48)]}",{'A40': 1.0},A40,../projects/jedis/src/test/java/redis/clients/jedis/commands/../projects/jedis/src/test/java/redis/clients/jedis/commands/unified/../projects/jedis/src/test/java/redis/clients/jedis/commands/unified/pipeline/SetPipelineCommandsTest.java,"  @Deprecated
  default Response<Long> sdiffStore(String dstKey, String... keys) {
    return sdiffstore(dstKey, keys);
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/SetPipelineBinaryCommands.java,,sscan,"Response<ScanResult<byte[]>> sscan(byte[],byte[])","[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"  default Response<ScanResult<byte[]>> sscan(byte[] key, byte[] cursor) {
    return sscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/HashPipelineCommands.java,,hscan,"Response<ScanResult<Map.Entry<String, String>>> hscan(String,String)","[58, 60]","{'A1': [(58, 60)]}",{'A1': 1.0},A1,,"  default Response<ScanResult<Map.Entry<String, String>>> hscan(String key, String cursor) {
    return hscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/HashPipelineCommands.java,,hscanNoValues,"Response<ScanResult<String>> hscanNoValues(String,String)","[64, 66]","{'A1': [(64, 66)]}",{'A1': 1.0},A1,,"  default Response<ScanResult<String>> hscanNoValues(String key, String cursor) {
    return hscanNoValues(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/SetBinaryCommands.java,,sscan,"ScanResult<byte[]> sscan(byte[],byte[])","[31, 33]","{'A1': [(31, 33)]}",{'A1': 1.0},A1,,"  default ScanResult<byte[]> sscan(byte[] key, byte[] cursor) {
    return sscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis.commands,../projects/jedis/src/main/java/redis/clients/jedis/commands/SortedSetPipelineCommands.java,,zscan,"Response<ScanResult<Tuple>> zscan(String,String)","[128, 130]","{'A1': [(128, 130)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/commands/../projects/jedis/src/test/java/redis/clients/jedis/commands/unified/../projects/jedis/src/test/java/redis/clients/jedis/commands/unified/pipeline/SortedSetPipelineCommandsTest.java,"  default Response<ScanResult<Tuple>> zscan(String key, String cursor) {
    return zscan(key, cursor, new ScanParams());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionFactory.java,ConnectionFactory,connectionSupplier,Supplier<Connection> connectionSupplier(),"[71, 74]","{'A1': [(74, 74)], 'A35': [(71, 73)]}","{'A1': 0.25, 'A35': 0.75}",A35,,"  private Supplier<Connection> connectionSupplier() {
    return clientSideCache == null ? () -> new Connection(jedisSocketFactory, clientConfig)
        : () -> new CacheConnection(jedisSocketFactory, clientConfig, clientSideCache);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionFactory.java,ConnectionFactory,activateObject,void activateObject(PooledObject<Connection>),"[76, 79]","{'A1': [(76, 79)]}",{'A1': 1.0},A1,,"  @Override
  public void activateObject(PooledObject<Connection> pooledConnection) throws Exception {
    // what to do ??
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionFactory.java,ConnectionFactory,destroyObject,void destroyObject(PooledObject<Connection>),"[81, 91]","{'A1': [(81, 91)]}",{'A1': 1.0},A1,,"  @Override
  public void destroyObject(PooledObject<Connection> pooledConnection) throws Exception {
    final Connection jedis = pooledConnection.getObject();
    if (jedis.isConnected()) {
      try {
        jedis.close();
      } catch (RuntimeException e) {
        logger.debug(""Error while close"", e);
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionFactory.java,ConnectionFactory,makeObject,PooledObject<Connection> makeObject(),"[93, 102]","{'A1': [(93, 95), (97, 98), (100, 102)], 'A35': [(96, 96)], 'A10': [(99, 99)]}","{'A1': 0.8, 'A35': 0.1, 'A10': 0.1}",A1,,"  @Override
  public PooledObject<Connection> makeObject() throws Exception {
    try {
      Connection jedis = objectMaker.get();
      return new DefaultPooledObject<>(jedis);
    } catch (JedisException je) {
      logger.debug(""Error while makeObject"", je);
      throw je;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionFactory.java,ConnectionFactory,passivateObject,void passivateObject(PooledObject<Connection>),"[104, 109]","{'A1': [(104, 106), (109, 109)], 'A35': [(107, 108)]}","{'A1': 0.6666666666666666, 'A35': 0.3333333333333333}",A1,,"  @Override
  public void passivateObject(PooledObject<Connection> pooledConnection) throws Exception {
    // TODO maybe should select db 0? Not sure right now.
    Connection jedis = pooledConnection.getObject();
    reAuthenticate(jedis);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionFactory.java,ConnectionFactory,validateObject,boolean validateObject(PooledObject<Connection>),"[111, 125]","{'A1': [(111, 115), (121, 125)], 'A35': [(116, 120)]}","{'A1': 0.6666666666666666, 'A35': 0.3333333333333333}",A1,,"  @Override
  public boolean validateObject(PooledObject<Connection> pooledConnection) {
    final Connection jedis = pooledConnection.getObject();
    try {
      // check HostAndPort ??
      if (!jedis.isConnected()) {
        return false;
      }
      reAuthenticate(jedis);
      return jedis.ping();
    } catch (final Exception e) {
      logger.warn(""Error while validating pooled Connection object."", e);
      return false;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionFactory.java,ConnectionFactory,reAuthenticate,void reAuthenticate(Connection),"[127, 142]","{'A35': [(127, 142)]}",{'A35': 1.0},A35,,"  private void reAuthenticate(Connection jedis) throws Exception {
    try {
      String result = jedis.reAuthenticate();
      if (result != null && !result.equals(""OK"")) {
        String msg = ""Re-authentication failed with server response: "" + result;
        Exception failedAuth = new JedisAuthenticationException(msg);
        logger.error(failedAuth.getMessage(), failedAuth);
        authXEventListener.onConnectionAuthenticationError(failedAuth);
        return;
      }
    } catch (Exception e) {
      logger.error(""Error while re-authenticating connection"", e);
      authXEventListener.onConnectionAuthenticationError(e);
      throw e;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentineled.java,JedisSentineled,getCurrentMaster,HostAndPort getCurrentMaster(),"[52, 54]","{'A1': [(52, 54)]}",{'A1': 1.0},A1,,"  public HostAndPort getCurrentMaster() {
    return ((SentineledConnectionProvider) provider).getCurrentMaster();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentineled.java,JedisSentineled,pipelined,Pipeline pipelined(),"[56, 59]","{'A1': [(56, 59)]}",{'A1': 1.0},A1,,"  @Override
  public Pipeline pipelined() {
    return (Pipeline) super.pipelined();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSDecrByParams.java,TSDecrByParams,decrByParams,TSDecrByParams decrByParams(),"[11, 13]","{'A1': [(11, 13)]}",{'A1': 1.0},A1,,"  public static TSDecrByParams decrByParams() {
    return new TSDecrByParams();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/EncodingFormat.java,EncodingFormat,getRaw,byte[] getRaw(),"[20, 23]","{'A1': [(20, 23)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,rangeParams,"TSRangeParams rangeParams(long,long)","[43, 45]","{'A1': [(43, 45)]}",{'A1': 1.0},A1,,"  public static TSRangeParams rangeParams(long fromTimestamp, long toTimestamp) {
    return new TSRangeParams(fromTimestamp, toTimestamp);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,rangeParams,TSRangeParams rangeParams(),"[50, 52]","{'A1': [(50, 52)]}",{'A1': 1.0},A1,,"  public static TSRangeParams rangeParams() {
    return new TSRangeParams();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,fromTimestamp,TSRangeParams fromTimestamp(long),"[54, 57]","{'A1': [(54, 57)]}",{'A1': 1.0},A1,,"  public TSRangeParams fromTimestamp(long fromTimestamp) {
    this.fromTimestamp = fromTimestamp;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,toTimestamp,TSRangeParams toTimestamp(long),"[59, 62]","{'A1': [(59, 62)]}",{'A1': 1.0},A1,,"  public TSRangeParams toTimestamp(long toTimestamp) {
    this.toTimestamp = toTimestamp;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,latest,TSRangeParams latest(),"[64, 67]","{'A1': [(64, 67)]}",{'A1': 1.0},A1,,"  public TSRangeParams latest() {
    this.latest = true;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,filterByTS,TSRangeParams filterByTS(),"[69, 72]","{'A1': [(69, 72)]}",{'A1': 1.0},A1,,"  public TSRangeParams filterByTS(long... timestamps) {
    this.filterByTimestamps = timestamps;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,filterByValues,"TSRangeParams filterByValues(double,double)","[74, 77]","{'A1': [(74, 77)]}",{'A1': 1.0},A1,,"  public TSRangeParams filterByValues(double min, double max) {
    this.filterByValues = new double[]{min, max};
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,count,TSRangeParams count(int),"[79, 82]","{'A1': [(79, 82)]}",{'A1': 1.0},A1,,"  public TSRangeParams count(int count) {
    this.count = count;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,align,TSRangeParams align(byte[]),"[84, 87]","{'A1': [(84, 87)]}",{'A1': 1.0},A1,,"  private TSRangeParams align(byte[] raw) {
    this.align = raw;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,align,TSRangeParams align(long),"[92, 94]","{'A1': [(92, 94)]}",{'A1': 1.0},A1,,"  public TSRangeParams align(long timestamp) {
    return align(toByteArray(timestamp));
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,alignStart,TSRangeParams alignStart(),"[99, 101]","{'A1': [(99, 101)]}",{'A1': 1.0},A1,,"  public TSRangeParams alignStart() {
    return align(MINUS);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,alignEnd,TSRangeParams alignEnd(),"[106, 108]","{'A1': [(106, 108)]}",{'A1': 1.0},A1,,"  public TSRangeParams alignEnd() {
    return align(PLUS);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,aggregation,"TSRangeParams aggregation(AggregationType,long)","[110, 114]","{'A1': [(110, 114)]}",{'A1': 1.0},A1,,"  public TSRangeParams aggregation(AggregationType aggregationType, long bucketDuration) {
    this.aggregationType = aggregationType;
    this.bucketDuration = bucketDuration;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,bucketTimestamp,TSRangeParams bucketTimestamp(String),"[119, 122]","{'A1': [(119, 122)]}",{'A1': 1.0},A1,,"  public TSRangeParams bucketTimestamp(String bucketTimestamp) {
    this.bucketTimestamp = encode(bucketTimestamp);
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,bucketTimestampLow,TSRangeParams bucketTimestampLow(),"[127, 130]","{'A1': [(127, 130)]}",{'A1': 1.0},A1,,"  public TSRangeParams bucketTimestampLow() {
    this.bucketTimestamp = MINUS;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,bucketTimestampHigh,TSRangeParams bucketTimestampHigh(),"[135, 138]","{'A1': [(135, 138)]}",{'A1': 1.0},A1,,"  public TSRangeParams bucketTimestampHigh() {
    this.bucketTimestamp = PLUS;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,bucketTimestampMid,TSRangeParams bucketTimestampMid(),"[143, 146]","{'A1': [(143, 146)]}",{'A1': 1.0},A1,,"  public TSRangeParams bucketTimestampMid() {
    this.bucketTimestamp = BYTES_TILDE;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,empty,TSRangeParams empty(),"[151, 154]","{'A1': [(151, 154)]}",{'A1': 1.0},A1,,"  public TSRangeParams empty() {
    this.empty = true;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,addParams,void addParams(CommandArguments),"[156, 209]","{'A1': [(156, 209)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (fromTimestamp == null) {
      args.add(MINUS);
    } else {
      args.add(toByteArray(fromTimestamp));
    }

    if (toTimestamp == null) {
      args.add(PLUS);
    } else {
      args.add(toByteArray(toTimestamp));
    }

    if (latest) {
      args.add(LATEST);
    }

    if (filterByTimestamps != null) {
      args.add(FILTER_BY_TS);
      for (long ts : filterByTimestamps) {
        args.add(toByteArray(ts));
      }
    }

    if (filterByValues != null) {
      args.add(FILTER_BY_VALUE);
      for (double value : filterByValues) {
        args.add(toByteArray(value));
      }
    }

    if (count != null) {
      args.add(COUNT).add(toByteArray(count));
    }

    if (aggregationType != null) {

      if (align != null) {
        args.add(ALIGN).add(align);
      }

      args.add(AGGREGATION).add(aggregationType).add(toByteArray(bucketDuration));

      if (bucketTimestamp != null) {
        args.add(BUCKETTIMESTAMP).add(bucketTimestamp);
      }

      if (empty) {
        args.add(EMPTY);
      }
    }
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,equals,boolean equals(Object),"[211, 229]","{'A84': [(211, 229)]}",{'A84': 1.0},A84,,"  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    TSRangeParams that = (TSRangeParams) o;
    return latest == that.latest && bucketDuration == that.bucketDuration && empty == that.empty &&
        Objects.equals(fromTimestamp, that.fromTimestamp) &&
        Objects.equals(toTimestamp, that.toTimestamp) &&
        Arrays.equals(filterByTimestamps, that.filterByTimestamps) &&
        Arrays.equals(filterByValues, that.filterByValues) &&
        Objects.equals(count, that.count) && Arrays.equals(align, that.align) &&
        aggregationType == that.aggregationType &&
        Arrays.equals(bucketTimestamp, that.bucketTimestamp);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSRangeParams.java,TSRangeParams,hashCode,int hashCode(),"[231, 245]","{'A84': [(231, 245)]}",{'A84': 1.0},A84,,"  @Override
  public int hashCode() {
    int result = Objects.hashCode(fromTimestamp);
    result = 31 * result + Objects.hashCode(toTimestamp);
    result = 31 * result + Boolean.hashCode(latest);
    result = 31 * result + Arrays.hashCode(filterByTimestamps);
    result = 31 * result + Arrays.hashCode(filterByValues);
    result = 31 * result + Objects.hashCode(count);
    result = 31 * result + Arrays.hashCode(align);
    result = 31 * result + Objects.hashCode(aggregationType);
    result = 31 * result + Long.hashCode(bucketDuration);
    result = 31 * result + Arrays.hashCode(bucketTimestamp);
    result = 31 * result + Boolean.hashCode(empty);
    return result;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TimeSeriesProtocol.java,TimeSeriesProtocol.TimeSeriesCommand,getRaw,byte[] getRaw(),"[38, 41]","{'A1': [(38, 41)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TimeSeriesProtocol.java,TimeSeriesProtocol.TimeSeriesKeyword,getRaw,byte[] getRaw(),"[78, 81]","{'A1': [(78, 81)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeElements.java,TSMRangeElements,getLabels,"Map<String, String> getLabels()","[38, 40]","{'A1': [(38, 40)]}",{'A1': 1.0},A1,,"  public Map<String, String> getLabels() {
    return labels;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeElements.java,TSMRangeElements,getAggregators,List<AggregationType> getAggregators(),"[42, 44]","{'A1': [(42, 44)]}",{'A1': 1.0},A1,,"  public List<AggregationType> getAggregators() {
    return aggregators;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeElements.java,TSMRangeElements,getReducers,List<String> getReducers(),"[46, 48]","{'A1': [(46, 48)]}",{'A1': 1.0},A1,,"  public List<String> getReducers() {
    return reducers;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeElements.java,TSMRangeElements,getSources,List<String> getSources(),"[50, 52]","{'A1': [(50, 52)]}",{'A1': 1.0},A1,,"  public List<String> getSources() {
    return sources;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeElements.java,TSMRangeElements,getElements,List<TSElement> getElements(),"[54, 56]","{'A1': [(54, 56)]}",{'A1': 1.0},A1,,"  public List<TSElement> getElements() {
    return getValue();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeElements.java,TSMRangeElements,toString,String toString(),"[58, 69]","{'A1': [(58, 69)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder().append(getClass().getSimpleName())
        .append(""{key="").append(getKey()).append("", labels="").append(labels);
    if (aggregators != null) {
      sb.append("", aggregators="").append(aggregators);
    }
    if (reducers != null && sources != null) {
      sb.append("", reducers"").append(reducers).append("", sources"").append(sources);
    }
    return sb.append("", elements="").append(getElements()).append('}').toString();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,alterParams,TSAlterParams alterParams(),"[31, 33]","{'A1': [(31, 33)]}",{'A1': 1.0},A1,,"  public static TSAlterParams alterParams() {
    return new TSAlterParams();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,retention,TSAlterParams retention(long),"[35, 38]","{'A1': [(35, 38)]}",{'A1': 1.0},A1,,"  public TSAlterParams retention(long retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,chunkSize,TSAlterParams chunkSize(long),"[40, 43]","{'A1': [(40, 43)]}",{'A1': 1.0},A1,,"  public TSAlterParams chunkSize(long chunkSize) {
    this.chunkSize = chunkSize;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,duplicatePolicy,TSAlterParams duplicatePolicy(DuplicatePolicy),"[45, 48]","{'A1': [(45, 48)]}",{'A1': 1.0},A1,,"  public TSAlterParams duplicatePolicy(DuplicatePolicy duplicatePolicy) {
    this.duplicatePolicy = duplicatePolicy;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,ignore,"TSAlterParams ignore(long,double)","[50, 55]","{'A1': [(50, 55)]}",{'A1': 1.0},A1,,"  public TSAlterParams ignore(long maxTimediff, double maxValDiff) {
    this.ignore = true;
    this.ignoreMaxTimediff = maxTimediff;
    this.ignoreMaxValDiff = maxValDiff;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,labels,"TSAlterParams labels(Map<String, String>)","[63, 66]","{'A1': [(63, 66)]}",{'A1': 1.0},A1,,"  public TSAlterParams labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,label,"TSAlterParams label(String,String)","[74, 80]","{'A1': [(74, 80)]}",{'A1': 1.0},A1,,"  public TSAlterParams label(String label, String value) {
    if (this.labels == null) {
      this.labels = new LinkedHashMap<>();
    }
    this.labels.put(label, value);
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,labelsReset,TSAlterParams labelsReset(),"[82, 84]","{'A1': [(82, 84)]}",{'A1': 1.0},A1,,"  public TSAlterParams labelsReset() {
    return this.labels(Collections.emptyMap());
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,addParams,void addParams(CommandArguments),"[86, 109]","{'A1': [(86, 109)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (retentionPeriod != null) {
      args.add(RETENTION).add(toByteArray(retentionPeriod));
    }

    if (chunkSize != null) {
      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));
    }

    if (duplicatePolicy != null) {
      args.add(DUPLICATE_POLICY).add(duplicatePolicy);
    }

    if (ignore) {
      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);
    }

    if (labels != null) {
      args.add(LABELS);
      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));
    }
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,equals,boolean equals(Object),"[111, 126]","{'A84': [(111, 126)]}",{'A84': 1.0},A84,,"  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    TSAlterParams that = (TSAlterParams) o;
    return ignore == that.ignore && ignoreMaxTimediff == that.ignoreMaxTimediff &&
        Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 &&
        Objects.equals(retentionPeriod, that.retentionPeriod) &&
        Objects.equals(chunkSize, that.chunkSize) &&
        duplicatePolicy == that.duplicatePolicy && Objects.equals(labels, that.labels);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAlterParams.java,TSAlterParams,hashCode,int hashCode(),"[128, 138]","{'A84': [(128, 138)]}",{'A84': 1.0},A84,,"  @Override
  public int hashCode() {
    int result = Objects.hashCode(retentionPeriod);
    result = 31 * result + Objects.hashCode(chunkSize);
    result = 31 * result + Objects.hashCode(duplicatePolicy);
    result = 31 * result + Boolean.hashCode(ignore);
    result = 31 * result + Long.hashCode(ignoreMaxTimediff);
    result = 31 * result + Double.hashCode(ignoreMaxValDiff);
    result = 31 * result + Objects.hashCode(labels);
    return result;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,multiRangeParams,"TSMRangeParams multiRangeParams(long,long)","[51, 53]","{'A1': [(51, 53)]}",{'A1': 1.0},A1,,"  public static TSMRangeParams multiRangeParams(long fromTimestamp, long toTimestamp) {
    return new TSMRangeParams(fromTimestamp, toTimestamp);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,multiRangeParams,TSMRangeParams multiRangeParams(),"[58, 60]","{'A1': [(58, 60)]}",{'A1': 1.0},A1,,"  public static TSMRangeParams multiRangeParams() {
    return new TSMRangeParams();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,fromTimestamp,TSMRangeParams fromTimestamp(long),"[62, 65]","{'A1': [(62, 65)]}",{'A1': 1.0},A1,,"  public TSMRangeParams fromTimestamp(long fromTimestamp) {
    this.fromTimestamp = fromTimestamp;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,toTimestamp,TSMRangeParams toTimestamp(long),"[67, 70]","{'A1': [(67, 70)]}",{'A1': 1.0},A1,,"  public TSMRangeParams toTimestamp(long toTimestamp) {
    this.toTimestamp = toTimestamp;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,latest,TSMRangeParams latest(),"[72, 75]","{'A1': [(72, 75)]}",{'A1': 1.0},A1,,"  public TSMRangeParams latest() {
    this.latest = true;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,filterByTS,TSMRangeParams filterByTS(),"[77, 80]","{'A1': [(77, 80)]}",{'A1': 1.0},A1,,"  public TSMRangeParams filterByTS(long... timestamps) {
    this.filterByTimestamps = timestamps;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,filterByValues,"TSMRangeParams filterByValues(double,double)","[82, 85]","{'A1': [(82, 85)]}",{'A1': 1.0},A1,,"  public TSMRangeParams filterByValues(double min, double max) {
    this.filterByValues = new double[] {min, max};
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,withLabels,TSMRangeParams withLabels(boolean),"[87, 90]","{'A1': [(87, 90)]}",{'A1': 1.0},A1,,"  public TSMRangeParams withLabels(boolean withLabels) {
    this.withLabels = withLabels;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,withLabels,TSMRangeParams withLabels(),"[92, 94]","{'A1': [(92, 94)]}",{'A1': 1.0},A1,,"  public TSMRangeParams withLabels() {
    return withLabels(true);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,selectedLabels,TSMRangeParams selectedLabels(),"[96, 99]","{'A1': [(96, 99)]}",{'A1': 1.0},A1,,"  public TSMRangeParams selectedLabels(String... labels) {
    this.selectedLabels = labels;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,count,TSMRangeParams count(int),"[101, 104]","{'A1': [(101, 104)]}",{'A1': 1.0},A1,,"  public TSMRangeParams count(int count) {
    this.count = count;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,align,TSMRangeParams align(byte[]),"[106, 109]","{'A1': [(106, 109)]}",{'A1': 1.0},A1,,"  private TSMRangeParams align(byte[] raw) {
    this.align = raw;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,align,TSMRangeParams align(long),"[114, 116]","{'A1': [(114, 116)]}",{'A1': 1.0},A1,,"  public TSMRangeParams align(long timestamp) {
    return align(toByteArray(timestamp));
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,alignStart,TSMRangeParams alignStart(),"[121, 123]","{'A1': [(121, 123)]}",{'A1': 1.0},A1,,"  public TSMRangeParams alignStart() {
    return align(MINUS);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,alignEnd,TSMRangeParams alignEnd(),"[128, 130]","{'A1': [(128, 130)]}",{'A1': 1.0},A1,,"  public TSMRangeParams alignEnd() {
    return align(PLUS);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,aggregation,"TSMRangeParams aggregation(AggregationType,long)","[132, 136]","{'A1': [(132, 136)]}",{'A1': 1.0},A1,,"  public TSMRangeParams aggregation(AggregationType aggregationType, long bucketDuration) {
    this.aggregationType = aggregationType;
    this.bucketDuration = bucketDuration;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,bucketTimestamp,TSMRangeParams bucketTimestamp(String),"[141, 144]","{'A1': [(141, 144)]}",{'A1': 1.0},A1,,"  public TSMRangeParams bucketTimestamp(String bucketTimestamp) {
    this.bucketTimestamp = encode(bucketTimestamp);
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,bucketTimestampLow,TSMRangeParams bucketTimestampLow(),"[149, 152]","{'A1': [(149, 152)]}",{'A1': 1.0},A1,,"  public TSMRangeParams bucketTimestampLow() {
    this.bucketTimestamp = MINUS;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,bucketTimestampHigh,TSMRangeParams bucketTimestampHigh(),"[157, 160]","{'A1': [(157, 160)]}",{'A1': 1.0},A1,,"  public TSMRangeParams bucketTimestampHigh() {
    this.bucketTimestamp = PLUS;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,bucketTimestampMid,TSMRangeParams bucketTimestampMid(),"[165, 168]","{'A1': [(165, 168)]}",{'A1': 1.0},A1,,"  public TSMRangeParams bucketTimestampMid() {
    this.bucketTimestamp = BYTES_TILDE;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,empty,TSMRangeParams empty(),"[173, 176]","{'A1': [(173, 176)]}",{'A1': 1.0},A1,,"  public TSMRangeParams empty() {
    this.empty = true;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,filter,TSMRangeParams filter(),"[178, 181]","{'A1': [(178, 181)]}",{'A1': 1.0},A1,,"  public TSMRangeParams filter(String... filters) {
    this.filters = filters;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,groupBy,"TSMRangeParams groupBy(String,String)","[183, 187]","{'A1': [(183, 187)]}",{'A1': 1.0},A1,,"  public TSMRangeParams groupBy(String label, String reduce) {
    this.groupByLabel = label;
    this.groupByReduce = reduce;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,addParams,void addParams(CommandArguments),"[189, 264]","{'A1': [(189, 264)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (filters == null) {
      throw new IllegalArgumentException(""FILTER arguments must be set."");
    }

    if (fromTimestamp == null) {
      args.add(MINUS);
    } else {
      args.add(toByteArray(fromTimestamp));
    }

    if (toTimestamp == null) {
      args.add(PLUS);
    } else {
      args.add(toByteArray(toTimestamp));
    }

    if (latest) {
      args.add(LATEST);
    }

    if (filterByTimestamps != null) {
      args.add(FILTER_BY_TS);
      for (long ts : filterByTimestamps) {
        args.add(toByteArray(ts));
      }
    }

    if (filterByValues != null) {
      args.add(FILTER_BY_VALUE);
      for (double value : filterByValues) {
        args.add(toByteArray(value));
      }
    }

    if (withLabels) {
      args.add(WITHLABELS);
    } else if (selectedLabels != null) {
      args.add(SELECTED_LABELS);
      for (String label : selectedLabels) {
        args.add(label);
      }
    }

    if (count != null) {
      args.add(COUNT).add(toByteArray(count));
    }

    if (aggregationType != null) {

      if (align != null) {
        args.add(ALIGN).add(align);
      }

      args.add(AGGREGATION).add(aggregationType).add(toByteArray(bucketDuration));

      if (bucketTimestamp != null) {
        args.add(BUCKETTIMESTAMP).add(bucketTimestamp);
      }

      if (empty) {
        args.add(EMPTY);
      }
    }

    args.add(FILTER);
    for (String filter : filters) {
      args.add(filter);
    }

    if (groupByLabel != null && groupByReduce != null) {
      args.add(GROUPBY).add(groupByLabel).add(REDUCE).add(groupByReduce);
    }
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,equals,boolean equals(Object),"[266, 289]","{'A84': [(266, 289)]}",{'A84': 1.0},A84,,"  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    TSMRangeParams that = (TSMRangeParams) o;
    return latest == that.latest && withLabels == that.withLabels &&
        bucketDuration == that.bucketDuration && empty == that.empty &&
        Objects.equals(fromTimestamp, that.fromTimestamp) &&
        Objects.equals(toTimestamp, that.toTimestamp) &&
        Arrays.equals(filterByTimestamps, that.filterByTimestamps) &&
        Arrays.equals(filterByValues, that.filterByValues) &&
        Arrays.equals(selectedLabels, that.selectedLabels) &&
        Objects.equals(count, that.count) && Arrays.equals(align, that.align) &&
        aggregationType == that.aggregationType &&
        Arrays.equals(bucketTimestamp, that.bucketTimestamp) &&
        Arrays.equals(filters, that.filters) &&
        Objects.equals(groupByLabel, that.groupByLabel) &&
        Objects.equals(groupByReduce, that.groupByReduce);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMRangeParams.java,TSMRangeParams,hashCode,int hashCode(),"[291, 310]","{'A84': [(291, 310)]}",{'A84': 1.0},A84,,"  @Override
  public int hashCode() {
    int result = Objects.hashCode(fromTimestamp);
    result = 31 * result + Objects.hashCode(toTimestamp);
    result = 31 * result + Boolean.hashCode(latest);
    result = 31 * result + Arrays.hashCode(filterByTimestamps);
    result = 31 * result + Arrays.hashCode(filterByValues);
    result = 31 * result + Boolean.hashCode(withLabels);
    result = 31 * result + Arrays.hashCode(selectedLabels);
    result = 31 * result + Objects.hashCode(count);
    result = 31 * result + Arrays.hashCode(align);
    result = 31 * result + Objects.hashCode(aggregationType);
    result = 31 * result + Long.hashCode(bucketDuration);
    result = 31 * result + Arrays.hashCode(bucketTimestamp);
    result = 31 * result + Boolean.hashCode(empty);
    result = 31 * result + Arrays.hashCode(filters);
    result = 31 * result + Objects.hashCode(groupByLabel);
    result = 31 * result + Objects.hashCode(groupByReduce);
    return result;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,timestamp,T timestamp(long),"[32, 35]","{'A1': [(32, 35)]}",{'A1': 1.0},A1,,"  public T timestamp(long timestamp) {
    this.timestamp = timestamp;
    return (T) this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,retention,T retention(long),"[37, 40]","{'A1': [(37, 40)]}",{'A1': 1.0},A1,,"  public T retention(long retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
    return (T) this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,encoding,T encoding(EncodingFormat),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"  public T encoding(EncodingFormat encoding) {
    this.encoding = encoding;
    return (T) this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,chunkSize,T chunkSize(long),"[47, 50]","{'A1': [(47, 50)]}",{'A1': 1.0},A1,,"  public T chunkSize(long chunkSize) {
    this.chunkSize = chunkSize;
    return (T) this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,duplicatePolicy,T duplicatePolicy(DuplicatePolicy),"[52, 55]","{'A1': [(52, 55)]}",{'A1': 1.0},A1,,"  public T duplicatePolicy(DuplicatePolicy duplicatePolicy) {
    this.duplicatePolicy = duplicatePolicy;
    return (T) this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,ignore,"T ignore(long,double)","[57, 62]","{'A1': [(57, 62)]}",{'A1': 1.0},A1,,"  public T ignore(long maxTimediff, double maxValDiff) {
    this.ignore = true;
    this.ignoreMaxTimediff = maxTimediff;
    this.ignoreMaxValDiff = maxValDiff;
    return (T) this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,labels,"T labels(Map<String, String>)","[70, 73]","{'A1': [(70, 73)]}",{'A1': 1.0},A1,,"  public T labels(Map<String, String> labels) {
    this.labels = labels;
    return (T) this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,label,"T label(String,String)","[81, 87]","{'A1': [(81, 87)]}",{'A1': 1.0},A1,,"  public T label(String label, String value) {
    if (this.labels == null) {
      this.labels = new LinkedHashMap<>();
    }
    this.labels.put(label, value);
    return (T) this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,addParams,void addParams(CommandArguments),"[89, 120]","{'A1': [(89, 120)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (timestamp != null) {
      args.add(TIMESTAMP).add(timestamp);
    }

    if (retentionPeriod != null) {
      args.add(RETENTION).add(toByteArray(retentionPeriod));
    }

    if (encoding != null) {
      args.add(ENCODING).add(encoding);
    }

    if (chunkSize != null) {
      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));
    }

    if (duplicatePolicy != null) {
      args.add(DUPLICATE_POLICY).add(duplicatePolicy);
    }

    if (ignore) {
      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);
    }

    if (labels != null) {
      args.add(LABELS);
      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));
    }
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,equals,boolean equals(Object),"[122, 138]","{'A84': [(122, 138)]}",{'A84': 1.0},A84,,"  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    TSArithByParams<?> that = (TSArithByParams<?>) o;
    return ignore == that.ignore && ignoreMaxTimediff == that.ignoreMaxTimediff &&
        Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 &&
        Objects.equals(timestamp, that.timestamp) &&
        Objects.equals(retentionPeriod, that.retentionPeriod) &&
        encoding == that.encoding && Objects.equals(chunkSize, that.chunkSize) &&
        duplicatePolicy == that.duplicatePolicy && Objects.equals(labels, that.labels);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSArithByParams.java,TSArithByParams,hashCode,int hashCode(),"[140, 152]","{'A84': [(140, 152)]}",{'A84': 1.0},A84,,"  @Override
  public int hashCode() {
    int result = Objects.hashCode(timestamp);
    result = 31 * result + Objects.hashCode(retentionPeriod);
    result = 31 * result + Objects.hashCode(encoding);
    result = 31 * result + Objects.hashCode(chunkSize);
    result = 31 * result + Objects.hashCode(duplicatePolicy);
    result = 31 * result + Boolean.hashCode(ignore);
    result = 31 * result + Long.hashCode(ignoreMaxTimediff);
    result = 31 * result + Double.hashCode(ignoreMaxValDiff);
    result = 31 * result + Objects.hashCode(labels);
    return result;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/AggregationType.java,AggregationType,getRaw,byte[] getRaw(),"[25, 28]","{'A1': [(25, 28)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/AggregationType.java,AggregationType,safeValueOf,AggregationType safeValueOf(String),"[30, 36]","{'A1': [(30, 36)]}",{'A1': 1.0},A1,,"  public static AggregationType safeValueOf(String str) {
    try {
      return AggregationType.valueOf(str.replace('.', '_').toUpperCase(Locale.ENGLISH));
    } catch (IllegalArgumentException iae) {
      return null;
    }
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,getProperties,"Map<String, Object> getProperties()","[35, 37]","{'A1': [(35, 37)]}",{'A1': 1.0},A1,,"  public Map<String, Object> getProperties() {
    return properties;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,getProperty,Object getProperty(String),"[39, 41]","{'A1': [(39, 41)]}",{'A1': 1.0},A1,,"  public Object getProperty(String property) {
    return properties.get(property);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,getIntegerProperty,Long getIntegerProperty(String),"[43, 45]","{'A1': [(43, 45)]}",{'A1': 1.0},A1,,"  public Long getIntegerProperty(String property) {
    return (Long) properties.get(property);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,getLabels,"Map<String, String> getLabels()","[47, 49]","{'A1': [(47, 49)]}",{'A1': 1.0},A1,,"  public Map<String, String> getLabels() {
    return labels;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,getLabel,String getLabel(String),"[51, 53]","{'A1': [(51, 53)]}",{'A1': 1.0},A1,,"  public String getLabel(String label) {
    return labels.get(label);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,getRules,"Map<String, Rule> getRules()","[55, 57]","{'A1': [(55, 57)]}",{'A1': 1.0},A1,,"  public Map<String, Rule> getRules() {
    return rules;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,getRule,Rule getRule(String),"[59, 61]","{'A1': [(59, 61)]}",{'A1': 1.0},A1,,"  public Rule getRule(String rule) {
    return rules.get(rule);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,getChunks,"List<Map<String, Object>> getChunks()","[63, 65]","{'A1': [(63, 65)]}",{'A1': 1.0},A1,,"  public List<Map<String, Object>> getChunks() {
    return chunks;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,build,TSInfo build(Object),"[68, 128]","{'A1': [(68, 128)]}",{'A1': 1.0},A1,,"    @Override
    public TSInfo build(Object data) {
      List<Object> list = (List<Object>) data;
      Map<String, Object> properties = new HashMap<>();
      Map<String, String> labels = null;
      Map<String, Rule> rules = null;
      List<Map<String, Object>> chunks = null;

      for (int i = 0; i < list.size(); i += 2) {
        String prop = SafeEncoder.encode((byte[]) list.get(i));
        Object value = list.get(i + 1);
        if (value instanceof List) {
          switch (prop) {
            case LABELS_PROPERTY:
              labels = BuilderFactory.STRING_MAP_FROM_PAIRS.build(value);
              value = labels;
              break;
            case RULES_PROPERTY:
              List<Object> rulesDataList = (List<Object>) value;
              List<List<Object>> rulesValueList = new ArrayList<>(rulesDataList.size());
              rules = new HashMap<>(rulesDataList.size());
              for (Object ruleData : rulesDataList) {
                List<Object> encodedRule = (List<Object>) SafeEncoder.encodeObject(ruleData);
                rulesValueList.add(encodedRule);
                rules.put((String) encodedRule.get(0), new Rule((String) encodedRule.get(0), (Long) encodedRule.get(1),
                    AggregationType.safeValueOf((String) encodedRule.get(2)), (Long) encodedRule.get(3)));
              }
              value = rulesValueList;
              break;
            case CHUNKS_PROPERTY:
              List<Object> chunksDataList = (List<Object>) value;
              List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());
              chunks = new ArrayList<>(chunksDataList.size());
              for (Object chunkData : chunksDataList) {
                Map<String, Object> chunk = BuilderFactory.ENCODED_OBJECT_MAP.build(chunkData);
                chunksValueList.add(new HashMap<>(chunk));
                if (chunk.containsKey(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)) {
                  chunk.put(CHUNKS_BYTES_PER_SAMPLE_PROPERTY,
                      DoublePrecision.parseEncodedFloatingPointNumber(chunk.get(CHUNKS_BYTES_PER_SAMPLE_PROPERTY)));
                }
                chunks.add(chunk);
              }
              value = chunksValueList;
              break;
            default:
              value = SafeEncoder.encodeObject(value);
              break;
          }
        } else if (value instanceof byte[]) {
          value = SafeEncoder.encode((byte[]) value);
          if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {
            try {
              value = DuplicatePolicy.valueOf(((String) value).toUpperCase());
            } catch (Exception e) { }
          }
        }
        properties.put(prop, value);
      }

      return new TSInfo(properties, labels, rules, chunks);
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo,build,TSInfo build(Object),"[132, 190]","{'A1': [(132, 190)]}",{'A1': 1.0},A1,,"    @Override
    public TSInfo build(Object data) {
      List<KeyValue> list = (List<KeyValue>) data;
      Map<String, Object> properties = new HashMap<>();
      Map<String, String> labels = null;
      Map<String, Rule> rules = null;
      List<Map<String, Object>> chunks = null;

      for (KeyValue propertyValue : list) {
        String prop = BuilderFactory.STRING.build(propertyValue.getKey());
        Object value = propertyValue.getValue();
        if (value instanceof List) {
          switch (prop) {
            case LABELS_PROPERTY:
              labels = BuilderFactory.STRING_MAP.build(value);
              value = labels;
              break;
            case RULES_PROPERTY:
              List<KeyValue> rulesDataList = (List<KeyValue>) value;
              Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);
              rules = new HashMap<>(rulesDataList.size());
              for (KeyValue rkv : rulesDataList) {
                String ruleName = BuilderFactory.STRING.build(rkv.getKey());
                List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());
                rulesValueMap.put(ruleName, ruleValueList);
                rules.put(ruleName, new Rule(ruleName, ruleValueList));
              }
              value = rulesValueMap;
              break;
            case CHUNKS_PROPERTY:
              List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;
              List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());
              chunks = new ArrayList<>(chunksDataList.size());
              for (List<KeyValue> chunkDataAsList : chunksDataList) {
                Map<String, Object> chunk = chunkDataAsList.stream()
                    .collect(Collectors.toMap(kv -> BuilderFactory.STRING.build(kv.getKey()),
                        kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));
                chunksValueList.add(chunk);
                chunks.add(chunk);
              }
              value = chunksValueList;
              break;
            default:
              value = SafeEncoder.encodeObject(value);
              break;
          }
        } else if (value instanceof byte[]) {
          value = BuilderFactory.STRING.build(value);
          if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {
            try {
              value = DuplicatePolicy.valueOf(((String) value).toUpperCase());
            } catch (Exception e) { }
          }
        }
        properties.put(prop, value);
      }

      return new TSInfo(properties, labels, rules, chunks);
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo.Rule,getCompactionKey,String getCompactionKey(),"[213, 215]","{'A1': [(213, 215)]}",{'A1': 1.0},A1,,"    public String getCompactionKey() {
      return compactionKey;
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo.Rule,getBucketDuration,long getBucketDuration(),"[217, 219]","{'A1': [(217, 219)]}",{'A1': 1.0},A1,,"    public long getBucketDuration() {
      return bucketDuration;
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo.Rule,getAggregator,AggregationType getAggregator(),"[221, 223]","{'A1': [(221, 223)]}",{'A1': 1.0},A1,,"    public AggregationType getAggregator() {
      return aggregator;
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSInfo.java,TSInfo.Rule,getAlignmentTimestamp,long getAlignmentTimestamp(),"[225, 227]","{'A1': [(225, 227)]}",{'A1': 1.0},A1,,"    public long getAlignmentTimestamp() {
      return alignmentTimestamp;
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,addParams,TSAddParams addParams(),"[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"  public static TSAddParams addParams() {
    return new TSAddParams();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,retention,TSAddParams retention(long),"[36, 39]","{'A1': [(36, 39)]}",{'A1': 1.0},A1,,"  public TSAddParams retention(long retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,encoding,TSAddParams encoding(EncodingFormat),"[41, 44]","{'A1': [(41, 44)]}",{'A1': 1.0},A1,,"  public TSAddParams encoding(EncodingFormat encoding) {
    this.encoding = encoding;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,chunkSize,TSAddParams chunkSize(long),"[46, 49]","{'A1': [(46, 49)]}",{'A1': 1.0},A1,,"  public TSAddParams chunkSize(long chunkSize) {
    this.chunkSize = chunkSize;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,duplicatePolicy,TSAddParams duplicatePolicy(DuplicatePolicy),"[51, 54]","{'A1': [(51, 54)]}",{'A1': 1.0},A1,,"  public TSAddParams duplicatePolicy(DuplicatePolicy duplicatePolicy) {
    this.duplicatePolicy = duplicatePolicy;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,onDuplicate,TSAddParams onDuplicate(DuplicatePolicy),"[56, 59]","{'A1': [(56, 59)]}",{'A1': 1.0},A1,,"  public TSAddParams onDuplicate(DuplicatePolicy onDuplicate) {
    this.onDuplicate = onDuplicate;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,ignore,"TSAddParams ignore(long,double)","[61, 66]","{'A1': [(61, 66)]}",{'A1': 1.0},A1,,"  public TSAddParams ignore(long maxTimediff, double maxValDiff) {
    this.ignore = true;
    this.ignoreMaxTimediff = maxTimediff;
    this.ignoreMaxValDiff = maxValDiff;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,labels,"TSAddParams labels(Map<String, String>)","[74, 77]","{'A1': [(74, 77)]}",{'A1': 1.0},A1,,"  public TSAddParams labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,label,"TSAddParams label(String,String)","[85, 91]","{'A1': [(85, 91)]}",{'A1': 1.0},A1,,"  public TSAddParams label(String label, String value) {
    if (this.labels == null) {
      this.labels = new LinkedHashMap<>();
    }
    this.labels.put(label, value);
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,addParams,void addParams(CommandArguments),"[93, 128]","{'A1': [(93, 128)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (retentionPeriod != null) {
      args.add(RETENTION).add(toByteArray(retentionPeriod));
    }

    if (encoding != null) {
      args.add(ENCODING).add(encoding);
    }

    if (chunkSize != null) {
      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));
    }

    if (duplicatePolicy != null) {
      args.add(DUPLICATE_POLICY).add(duplicatePolicy);
    }

    if (duplicatePolicy != null) {
      args.add(DUPLICATE_POLICY).add(duplicatePolicy);
    }

    if (onDuplicate != null) {
      args.add(ON_DUPLICATE).add(onDuplicate);
    }

    if (ignore) {
      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);
    }

    if (labels != null) {
      args.add(LABELS);
      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));
    }
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,equals,boolean equals(Object),"[130, 146]","{'A84': [(130, 146)]}",{'A84': 1.0},A84,,"  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    TSAddParams that = (TSAddParams) o;
    return ignore == that.ignore && ignoreMaxTimediff == that.ignoreMaxTimediff &&
        Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 &&
        Objects.equals(retentionPeriod, that.retentionPeriod) &&
        encoding == that.encoding && Objects.equals(chunkSize, that.chunkSize) &&
        duplicatePolicy == that.duplicatePolicy && onDuplicate == that.onDuplicate &&
        Objects.equals(labels, that.labels);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSAddParams.java,TSAddParams,hashCode,int hashCode(),"[148, 160]","{'A84': [(148, 160)]}",{'A84': 1.0},A84,,"  @Override
  public int hashCode() {
    int result = Objects.hashCode(retentionPeriod);
    result = 31 * result + Objects.hashCode(encoding);
    result = 31 * result + Objects.hashCode(chunkSize);
    result = 31 * result + Objects.hashCode(duplicatePolicy);
    result = 31 * result + Objects.hashCode(onDuplicate);
    result = 31 * result + Boolean.hashCode(ignore);
    result = 31 * result + Long.hashCode(ignoreMaxTimediff);
    result = 31 * result + Double.hashCode(ignoreMaxValDiff);
    result = 31 * result + Objects.hashCode(labels);
    return result;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,createParams,TSCreateParams createParams(),"[31, 33]","{'A1': [(31, 33)]}",{'A1': 1.0},A1,,"  public static TSCreateParams createParams() {
    return new TSCreateParams();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,retention,TSCreateParams retention(long),"[35, 38]","{'A1': [(35, 38)]}",{'A1': 1.0},A1,,"  public TSCreateParams retention(long retentionPeriod) {
    this.retentionPeriod = retentionPeriod;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,uncompressed,TSCreateParams uncompressed(),"[41, 43]","{'A1': [(41, 43)]}",{'A1': 1.0},A1,,"  public TSCreateParams uncompressed() {
    return encoding(EncodingFormat.UNCOMPRESSED);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,compressed,TSCreateParams compressed(),"[46, 48]","{'A1': [(46, 48)]}",{'A1': 1.0},A1,,"  public TSCreateParams compressed() {
    return encoding(EncodingFormat.COMPRESSED);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,encoding,TSCreateParams encoding(EncodingFormat),"[50, 53]","{'A1': [(50, 53)]}",{'A1': 1.0},A1,,"  public TSCreateParams encoding(EncodingFormat encoding) {
    this.encoding = encoding;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,chunkSize,TSCreateParams chunkSize(long),"[55, 58]","{'A1': [(55, 58)]}",{'A1': 1.0},A1,,"  public TSCreateParams chunkSize(long chunkSize) {
    this.chunkSize = chunkSize;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,duplicatePolicy,TSCreateParams duplicatePolicy(DuplicatePolicy),"[60, 63]","{'A1': [(60, 63)]}",{'A1': 1.0},A1,,"  public TSCreateParams duplicatePolicy(DuplicatePolicy duplicatePolicy) {
    this.duplicatePolicy = duplicatePolicy;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,ignore,"TSCreateParams ignore(long,double)","[65, 70]","{'A1': [(65, 70)]}",{'A1': 1.0},A1,,"  public TSCreateParams ignore(long maxTimediff, double maxValDiff) {
    this.ignore = true;
    this.ignoreMaxTimediff = maxTimediff;
    this.ignoreMaxValDiff = maxValDiff;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,labels,"TSCreateParams labels(Map<String, String>)","[78, 81]","{'A1': [(78, 81)]}",{'A1': 1.0},A1,,"  public TSCreateParams labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,label,"TSCreateParams label(String,String)","[89, 95]","{'A1': [(89, 95)]}",{'A1': 1.0},A1,,"  public TSCreateParams label(String label, String value) {
    if (this.labels == null) {
      this.labels = new LinkedHashMap<>();
    }
    this.labels.put(label, value);
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,addParams,void addParams(CommandArguments),"[97, 124]","{'A1': [(97, 124)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (retentionPeriod != null) {
      args.add(RETENTION).add(toByteArray(retentionPeriod));
    }

    if (encoding != null) {
      args.add(ENCODING).add(encoding);
    }

    if (chunkSize != null) {
      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));
    }

    if (duplicatePolicy != null) {
      args.add(DUPLICATE_POLICY).add(duplicatePolicy);
    }

    if (ignore) {
      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);
    }

    if (labels != null) {
      args.add(LABELS);
      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));
    }
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,equals,boolean equals(Object),"[126, 141]","{'A84': [(126, 141)]}",{'A84': 1.0},A84,,"  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    TSCreateParams that = (TSCreateParams) o;
    return ignore == that.ignore && ignoreMaxTimediff == that.ignoreMaxTimediff &&
        Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 &&
        Objects.equals(retentionPeriod, that.retentionPeriod) &&
        encoding == that.encoding && Objects.equals(chunkSize, that.chunkSize) &&
        duplicatePolicy == that.duplicatePolicy && Objects.equals(labels, that.labels);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSCreateParams.java,TSCreateParams,hashCode,int hashCode(),"[143, 154]","{'A84': [(143, 154)]}",{'A84': 1.0},A84,,"  @Override
  public int hashCode() {
    int result = Objects.hashCode(retentionPeriod);
    result = 31 * result + Objects.hashCode(encoding);
    result = 31 * result + Objects.hashCode(chunkSize);
    result = 31 * result + Objects.hashCode(duplicatePolicy);
    result = 31 * result + Boolean.hashCode(ignore);
    result = 31 * result + Long.hashCode(ignoreMaxTimediff);
    result = 31 * result + Double.hashCode(ignoreMaxValDiff);
    result = 31 * result + Objects.hashCode(labels);
    return result;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSIncrByParams.java,TSIncrByParams,incrByParams,TSIncrByParams incrByParams(),"[11, 13]","{'A1': [(11, 13)]}",{'A1': 1.0},A1,,"  public static TSIncrByParams incrByParams() {
    return new TSIncrByParams();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetParams.java,TSMGetParams,multiGetParams,TSMGetParams multiGetParams(),"[21, 23]","{'A1': [(21, 23)]}",{'A1': 1.0},A1,,"  public static TSMGetParams multiGetParams() {
    return new TSMGetParams();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetParams.java,TSMGetParams,latest,TSMGetParams latest(),"[25, 28]","{'A1': [(25, 28)]}",{'A1': 1.0},A1,,"  public TSMGetParams latest() {
    this.latest = true;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetParams.java,TSMGetParams,withLabels,TSMGetParams withLabels(boolean),"[30, 33]","{'A1': [(30, 33)]}",{'A1': 1.0},A1,,"  public TSMGetParams withLabels(boolean withLabels) {
    this.withLabels = withLabels;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetParams.java,TSMGetParams,withLabels,TSMGetParams withLabels(),"[35, 37]","{'A1': [(35, 37)]}",{'A1': 1.0},A1,,"  public TSMGetParams withLabels() {
    return withLabels(true);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetParams.java,TSMGetParams,selectedLabels,TSMGetParams selectedLabels(),"[39, 42]","{'A1': [(39, 42)]}",{'A1': 1.0},A1,,"  public TSMGetParams selectedLabels(String... labels) {
    this.selectedLabels = labels;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetParams.java,TSMGetParams,addParams,void addParams(CommandArguments),"[44, 58]","{'A1': [(44, 58)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (latest) {
      args.add(LATEST);
    }

    if (withLabels) {
      args.add(WITHLABELS);
    } else if (selectedLabels != null) {
      args.add(SELECTED_LABELS);
      for (String label : selectedLabels) {
        args.add(label);
      }
    }
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetParams.java,TSMGetParams,equals,boolean equals(Object),"[60, 72]","{'A84': [(60, 72)]}",{'A84': 1.0},A84,,"  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    TSMGetParams that = (TSMGetParams) o;
    return latest == that.latest && withLabels == that.withLabels &&
        Arrays.equals(selectedLabels, that.selectedLabels);
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetParams.java,TSMGetParams,hashCode,int hashCode(),"[74, 80]","{'A84': [(74, 80)]}",{'A84': 1.0},A84,,"  @Override
  public int hashCode() {
    int result = Boolean.hashCode(latest);
    result = 31 * result + Boolean.hashCode(withLabels);
    result = 31 * result + Arrays.hashCode(selectedLabels);
    return result;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSElement.java,TSElement,getTimestamp,long getTimestamp(),"[13, 15]","{'A1': [(13, 15)]}",{'A1': 1.0},A1,,"  public long getTimestamp() {
    return timestamp;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSElement.java,TSElement,getValue,double getValue(),"[17, 19]","{'A1': [(17, 19)]}",{'A1': 1.0},A1,,"  public double getValue() {
    return value;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSElement.java,TSElement,hashCode,int hashCode(),"[21, 24]","{'A1': [(21, 24)]}",{'A1': 1.0},A1,,"  @Override
  public int hashCode() {
    return 31 * Long.hashCode(timestamp) + Long.hashCode(Double.doubleToLongBits(value));
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSElement.java,TSElement,equals,boolean equals(Object),"[26, 35]","{'A1': [(26, 35)]}",{'A1': 1.0},A1,,"  @Override
  public boolean equals(Object obj) {
    if (obj == null) return false;
    if (obj == this) return true;
    if (!(obj instanceof TSElement)) return false;

    TSElement other = (TSElement) obj;
    return this.timestamp == other.timestamp
        && this.value == other.value;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSElement.java,TSElement,toString,String toString(),"[37, 40]","{'A1': [(37, 40)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return ""("" + timestamp + "":"" + value + "")"";
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/DuplicatePolicy.java,DuplicatePolicy,getRaw,byte[] getRaw(),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetElement.java,TSMGetElement,getLabels,"Map<String, String> getLabels()","[15, 17]","{'A1': [(15, 17)]}",{'A1': 1.0},A1,,"  public Map<String, String> getLabels() {
    return labels;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetElement.java,TSMGetElement,getElement,TSElement getElement(),"[19, 21]","{'A1': [(19, 21)]}",{'A1': 1.0},A1,,"  public TSElement getElement() {
    return getValue();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSMGetElement.java,TSMGetElement,toString,String toString(),"[23, 30]","{'A1': [(23, 30)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return new StringBuilder().append(getClass().getSimpleName())
        .append(""{key="").append(getKey())
        .append("", labels="").append(labels)
        .append("", element="").append(getElement())
        .append('}').toString();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TimeSeriesBuilderFactory.java,TimeSeriesBuilderFactory,build,TSElement build(Object),"[16, 21]","{'A1': [(16, 21)]}",{'A1': 1.0},A1,,"    @Override
    public TSElement build(Object data) {
      List<Object> list = (List<Object>) data;
      if (list == null || list.isEmpty()) return null;
      return new TSElement(BuilderFactory.LONG.build(list.get(0)), BuilderFactory.DOUBLE.build(list.get(1)));
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TimeSeriesBuilderFactory.java,TimeSeriesBuilderFactory,build,List<TSElement> build(Object),"[25, 31]","{'A1': [(25, 31)]}",{'A1': 1.0},A1,,"    @Override
    public List<TSElement> build(Object data) {
      return ((List<Object>) data).stream().map((pairObject) -> (List<Object>) pairObject)
          .map((pairList) -> new TSElement(BuilderFactory.LONG.build(pairList.get(0)),
              BuilderFactory.DOUBLE.build(pairList.get(1))))
          .collect(Collectors.toList());
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TimeSeriesBuilderFactory.java,TimeSeriesBuilderFactory,build,"Map<String, TSMRangeElements> build(Object)","[36, 44]","{'A1': [(36, 44)]}",{'A1': 1.0},A1,,"    @Override
    public Map<String, TSMRangeElements> build(Object data) {
      return ((List<Object>) data).stream().map((tsObject) -> (List<Object>) tsObject)
          .map((tsList) -> new TSMRangeElements(BuilderFactory.STRING.build(tsList.get(0)),
              BuilderFactory.STRING_MAP_FROM_PAIRS.build(tsList.get(1)),
              TIMESERIES_ELEMENT_LIST.build(tsList.get(2))))
          .collect(Collectors.toMap(TSMRangeElements::getKey, Function.identity(),
              (x, y) -> x, LinkedHashMap::new));
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TimeSeriesBuilderFactory.java,TimeSeriesBuilderFactory,build,"Map<String, TSMRangeElements> build(Object)","[49, 85]","{'A1': [(49, 85)]}",{'A1': 1.0},A1,,"    @Override
    public Map<String, TSMRangeElements> build(Object data) {
      List<KeyValue> dataList = (List<KeyValue>) data;
      Map<String, TSMRangeElements> map = new LinkedHashMap<>(dataList.size() / 2, 1f);
      for (KeyValue kv : dataList) {
        String key = BuilderFactory.STRING.build(kv.getKey());
        List<Object> valueList = (List<Object>) kv.getValue();
        TSMRangeElements elements;
        switch (valueList.size()) {
          case 3:
            List<Object> aggrMapObj = (List<Object>) valueList.get(1);
            KeyValue aggKV = (KeyValue) aggrMapObj.get(0);
            assert ""aggregators"".equalsIgnoreCase(BuilderFactory.STRING.build(aggKV.getKey()));
            elements = new TSMRangeElements(key,
                BuilderFactory.STRING_MAP.build(valueList.get(0)),
                ((List<Object>) aggKV.getValue()).stream().map(BuilderFactory.STRING::build)
                    .map(AggregationType::safeValueOf).collect(Collectors.toList()),
                TIMESERIES_ELEMENT_LIST.build(valueList.get(2)));
            break;
          case 4:
            List<KeyValue> rdcMapObj = (List<KeyValue>) valueList.get(1);
            assert ""reducers"".equalsIgnoreCase(BuilderFactory.STRING.build(rdcMapObj.get(0).getKey()));
            List<KeyValue> srcMapObj = (List<KeyValue>) valueList.get(2);
            assert ""sources"".equalsIgnoreCase(BuilderFactory.STRING.build(srcMapObj.get(0).getKey()));
            elements = new TSMRangeElements(key,
                BuilderFactory.STRING_MAP.build(valueList.get(0)),
                BuilderFactory.STRING_LIST.build(rdcMapObj.get(0).getValue()),
                BuilderFactory.STRING_LIST.build(srcMapObj.get(0).getValue()),
                TIMESERIES_ELEMENT_LIST.build(valueList.get(3)));
            break;
          default:
            throw new IllegalStateException();
        }
        map.put(key, elements);
      }
      return map;
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TimeSeriesBuilderFactory.java,TimeSeriesBuilderFactory,build,"Map<String, TSMGetElement> build(Object)","[90, 97]","{'A1': [(90, 97)]}",{'A1': 1.0},A1,,"    @Override
    public Map<String, TSMGetElement> build(Object data) {
      return ((List<Object>) data).stream().map((tsObject) -> (List<Object>) tsObject)
          .map((tsList) -> new TSMGetElement(BuilderFactory.STRING.build(tsList.get(0)),
              BuilderFactory.STRING_MAP_FROM_PAIRS.build(tsList.get(1)),
              TIMESERIES_ELEMENT.build(tsList.get(2))))
          .collect(Collectors.toMap(TSMGetElement::getKey, Function.identity()));
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TimeSeriesBuilderFactory.java,TimeSeriesBuilderFactory,build,"Map<String, TSMGetElement> build(Object)","[102, 115]","{'A1': [(102, 115)]}",{'A1': 1.0},A1,,"    @Override
    public Map<String, TSMGetElement> build(Object data) {
      List<KeyValue> dataList = (List<KeyValue>) data;
      Map<String, TSMGetElement> map = new LinkedHashMap<>(dataList.size());
      for (KeyValue kv : dataList) {
        String key = BuilderFactory.STRING.build(kv.getKey());
        List<Object> valueList = (List<Object>) kv.getValue();
        TSMGetElement value = new TSMGetElement(key,
            BuilderFactory.STRING_MAP.build(valueList.get(0)),
            TIMESERIES_ELEMENT.build(valueList.get(1)));
        map.put(key, value);
      }
      return map;
    }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSGetParams.java,TSGetParams,getParams,TSGetParams getParams(),"[15, 17]","{'A1': [(15, 17)]}",{'A1': 1.0},A1,,"  public static TSGetParams getParams() {
    return new TSGetParams();
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSGetParams.java,TSGetParams,latest,TSGetParams latest(),"[19, 22]","{'A1': [(19, 22)]}",{'A1': 1.0},A1,,"  public TSGetParams latest() {
    this.latest = true;
    return this;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSGetParams.java,TSGetParams,addParams,void addParams(CommandArguments),"[24, 29]","{'A1': [(24, 29)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (latest) {
      args.add(LATEST);
    }
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSGetParams.java,TSGetParams,equals,boolean equals(Object),"[31, 42]","{'A84': [(31, 42)]}",{'A84': 1.0},A84,,"  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    TSGetParams that = (TSGetParams) o;
    return latest == that.latest;
  }
"
redis.clients.jedis.timeseries,../projects/jedis/src/main/java/redis/clients/jedis/timeseries/TSGetParams.java,TSGetParams,hashCode,int hashCode(),"[44, 47]","{'A84': [(44, 47)]}",{'A84': 1.0},A84,,"  @Override
  public int hashCode() {
    return Boolean.hashCode(latest);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,getCommand,ProtocolCommand getCommand(),"[38, 40]","{'A1': [(38, 40)]}",{'A1': 1.0},A1,,"  public ProtocolCommand getCommand() {
    return (ProtocolCommand) args.get(0);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,setKeyArgumentPreProcessor,void setKeyArgumentPreProcessor(CommandKeyArgumentPreProcessor),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"  @Experimental
  void setKeyArgumentPreProcessor(CommandKeyArgumentPreProcessor keyPreProcessor) {
    this.keyPreProc = keyPreProcessor;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,add,CommandArguments add(Rawable),"[47, 50]","{'A1': [(47, 50)]}",{'A1': 1.0},A1,,"  public CommandArguments add(Rawable arg) {
    args.add(arg);
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,add,CommandArguments add(byte[]),"[52, 54]","{'A1': [(52, 54)]}",{'A1': 1.0},A1,,"  public CommandArguments add(byte[] arg) {
    return add(RawableFactory.from(arg));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,add,CommandArguments add(boolean),"[56, 58]","{'A1': [(56, 58)]}",{'A1': 1.0},A1,,"  public CommandArguments add(boolean arg) {
    return add(RawableFactory.from(arg));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,add,CommandArguments add(int),"[60, 62]","{'A1': [(60, 62)]}",{'A1': 1.0},A1,,"  public CommandArguments add(int arg) {
    return add(RawableFactory.from(arg));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,add,CommandArguments add(long),"[64, 66]","{'A1': [(64, 66)]}",{'A1': 1.0},A1,,"  public CommandArguments add(long arg) {
    return add(RawableFactory.from(arg));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,add,CommandArguments add(double),"[68, 70]","{'A1': [(68, 70)]}",{'A1': 1.0},A1,,"  public CommandArguments add(double arg) {
    return add(RawableFactory.from(arg));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,add,CommandArguments add(String),"[72, 74]","{'A1': [(72, 74)]}",{'A1': 1.0},A1,,"  public CommandArguments add(String arg) {
    return add(RawableFactory.from(arg));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,add,CommandArguments add(Object),"[76, 102]","{'A1': [(76, 102)]}",{'A1': 1.0},A1,,"  public CommandArguments add(Object arg) {
    if (arg == null) {
      throw new IllegalArgumentException(""null is not a valid argument."");
    } else if (arg instanceof Rawable) {
      args.add((Rawable) arg);
    } else if (arg instanceof byte[]) {
      args.add(RawableFactory.from((byte[]) arg));
    } else if (arg instanceof Boolean) {
      args.add(RawableFactory.from((Boolean) arg));
    } else if (arg instanceof Integer) {
      args.add(RawableFactory.from((Integer) arg));
    } else if (arg instanceof Long) {
      args.add(RawableFactory.from((Long) arg));
    } else if (arg instanceof Double) {
      args.add(RawableFactory.from((Double) arg));
    } else if (arg instanceof float[]) {
      args.add(RawableFactory.from(RediSearchUtil.toByteArray((float[]) arg)));
    } else if (arg instanceof String) {
      args.add(RawableFactory.from((String) arg));
    } else if (arg instanceof GeoCoordinate) {
      GeoCoordinate geo = (GeoCoordinate) arg;
      args.add(RawableFactory.from(geo.getLongitude() + "","" + geo.getLatitude()));
    } else {
      args.add(RawableFactory.from(String.valueOf(arg)));
    }
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,addObjects,CommandArguments addObjects(),"[104, 109]","{'A1': [(104, 109)]}",{'A1': 1.0},A1,,"  public CommandArguments addObjects(Object... args) {
    for (Object arg : args) {
      add(arg);
    }
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,addObjects,CommandArguments addObjects(Collection),"[111, 114]","{'A1': [(111, 114)]}",{'A1': 1.0},A1,,"  public CommandArguments addObjects(Collection args) {
    args.forEach(arg -> add(arg));
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,key,CommandArguments key(Object),"[116, 140]","{'A1': [(116, 140)]}",{'A1': 1.0},A1,,"  public CommandArguments key(Object key) {
    if (keyPreProc != null) {
      key = keyPreProc.actualKey(key);
    }

    if (key instanceof Rawable) {
      Rawable raw = (Rawable) key;
      processKey(raw.getRaw());
      args.add(raw);
    } else if (key instanceof byte[]) {
      byte[] raw = (byte[]) key;
      processKey(raw);
      args.add(RawableFactory.from(raw));
    } else if (key instanceof String) {
      String raw = (String) key;
      processKey(raw);
      args.add(RawableFactory.from(raw));
    } else {
      throw new IllegalArgumentException(""\"""" + key.toString() + ""\"" is not a valid argument."");
    }

    addKeyInKeys(key);

    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,addKeyInKeys,void addKeyInKeys(Object),"[142, 153]","{'A1': [(142, 153)]}",{'A1': 1.0},A1,,"  private void addKeyInKeys(Object key) {
    if (keys.isEmpty()) {
      keys = Collections.singletonList(key);
    } else if (keys.size() == 1) {
      List oldKeys = keys;
      keys = new ArrayList();
      keys.addAll(oldKeys);
      keys.add(key);
    } else {
      keys.add(key);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,keys,CommandArguments keys(),"[155, 158]","{'A1': [(155, 158)]}",{'A1': 1.0},A1,,"  public final CommandArguments keys(Object... keys) {
    Arrays.stream(keys).forEach(this::key);
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,keys,CommandArguments keys(Collection),"[160, 163]","{'A1': [(160, 163)]}",{'A1': 1.0},A1,,"  public final CommandArguments keys(Collection keys) {
    keys.forEach(this::key);
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,addParams,CommandArguments addParams(IParams),"[165, 168]","{'A1': [(165, 168)]}",{'A1': 1.0},A1,,"  public final CommandArguments addParams(IParams params) {
    params.addParams(this);
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,processKey,CommandArguments processKey(byte[]),"[170, 173]","{'A1': [(170, 173)]}",{'A1': 1.0},A1,,"  protected CommandArguments processKey(byte[] key) {
    // do nothing
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,processKeys,CommandArguments processKeys(),"[175, 180]","{'A1': [(175, 180)]}",{'A1': 1.0},A1,,"  protected final CommandArguments processKeys(byte[]... keys) {
    for (byte[] key : keys) {
      processKey(key);
    }
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,processKey,CommandArguments processKey(String),"[182, 185]","{'A1': [(182, 185)]}",{'A1': 1.0},A1,,"  protected CommandArguments processKey(String key) {
    // do nothing
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,processKeys,CommandArguments processKeys(),"[187, 192]","{'A1': [(187, 192)]}",{'A1': 1.0},A1,,"  protected final CommandArguments processKeys(String... keys) {
    for (String key : keys) {
      processKey(key);
    }
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,size,int size(),"[194, 196]","{'A1': [(194, 196)]}",{'A1': 1.0},A1,,"  public int size() {
    return args.size();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,iterator,Iterator<Rawable> iterator(),"[198, 201]","{'A1': [(198, 201)]}",{'A1': 1.0},A1,,"  @Override
  public Iterator<Rawable> iterator() {
    return args.iterator();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,getKeys,List<Object> getKeys(),"[203, 206]","{'A1': [(203, 206)]}",{'A1': 1.0},A1,,"  @Internal
  public List<Object> getKeys() {
    return keys;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,isBlocking,boolean isBlocking(),"[208, 210]","{'A1': [(208, 210)]}",{'A1': 1.0},A1,,"  public boolean isBlocking() {
    return blocking;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandArguments.java,CommandArguments,blocking,CommandArguments blocking(),"[212, 215]","{'A1': [(212, 215)]}",{'A1': 1.0},A1,,"  public CommandArguments blocking() {
    this.blocking = true;
    return this;
  }
"
redis.clients.jedis.exceptions,../projects/jedis/src/main/java/redis/clients/jedis/exceptions/JedisRedirectionException.java,JedisRedirectionException,getTargetNode,HostAndPort getTargetNode(),"[36, 38]","{'A1': [(36, 36)], 'A7': [(37, 38)]}","{'A1': 0.3333333333333333, 'A7': 0.6666666666666666}",A7,,"  public final HostAndPort getTargetNode() {
    return targetNode;
  }
"
redis.clients.jedis.exceptions,../projects/jedis/src/main/java/redis/clients/jedis/exceptions/JedisRedirectionException.java,JedisRedirectionException,getSlot,int getSlot(),"[40, 42]","{'A1': [(40, 40)], 'A7': [(41, 42)]}","{'A1': 0.3333333333333333, 'A7': 0.6666666666666666}",A7,,"  public final int getSlot() {
    return slot;
  }
"
redis.clients.jedis.exceptions,../projects/jedis/src/main/java/redis/clients/jedis/exceptions/JedisBroadcastException.java,JedisBroadcastException,addReply,"void addReply(HostAndPort,Object)","[23, 25]","{'A1': [(23, 25)]}",{'A1': 1.0},A1,,"  public void addReply(HostAndPort node, Object reply) {
    replies.put(node, reply);
  }
"
redis.clients.jedis.exceptions,../projects/jedis/src/main/java/redis/clients/jedis/exceptions/JedisBroadcastException.java,JedisBroadcastException,getReplies,"Map<HostAndPort, Object> getReplies()","[27, 29]","{'A1': [(27, 29)]}",{'A1': 1.0},A1,,"  public Map<HostAndPort, Object> getReplies() {
    return Collections.unmodifiableMap(replies);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSub.java,JedisPubSub,encode,String encode(byte[]),"[7, 10]","{'A1': [(7, 9)], 'A7': [(10, 10)]}","{'A1': 0.75, 'A7': 0.25}",A1,,"  @Override
  protected final String encode(byte[] raw) {
    return SafeEncoder.encode(raw);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,onSMessage,"void onSMessage(T,T)","[18, 19]","{'A1': [(18, 19)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  public void onSMessage(T channel, T message) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,onSSubscribe,"void onSSubscribe(T,int)","[21, 22]","{'A1': [(21, 22)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  public void onSSubscribe(T channel, int subscribedChannels) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,onSUnsubscribe,"void onSUnsubscribe(T,int)","[24, 25]","{'A1': [(24, 25)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  public void onSUnsubscribe(T channel, int subscribedChannels) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,sendAndFlushCommand,void sendAndFlushCommand(Command),"[27, 29]","{'A1': [(27, 27), (29, 29)], 'A35': [(28, 28)]}","{'A1': 0.6666666666666666, 'A35': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  private void sendAndFlushCommand(Command command, T... args) {
    authenticator.sendAndFlushCommand(command, args);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,sunsubscribe,void sunsubscribe(),"[31, 33]","{'A1': [(31, 33)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  public final void sunsubscribe() {
    sendAndFlushCommand(Command.SUNSUBSCRIBE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,sunsubscribe,void sunsubscribe(),"[35, 37]","{'A1': [(35, 37)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  public final void sunsubscribe(T... channels) {
    sendAndFlushCommand(Command.SUNSUBSCRIBE, channels);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,ssubscribe,void ssubscribe(),"[39, 42]","{'A1': [(39, 39), (41, 42)], 'A35': [(40, 40)]}","{'A1': 0.75, 'A35': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  public final void ssubscribe(T... channels) {
    checkConnectionSuitableForPubSub();
    sendAndFlushCommand(Command.SSUBSCRIBE, channels);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,checkConnectionSuitableForPubSub,void checkConnectionSuitableForPubSub(),"[44, 50]","{'A35': [(44, 50)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  private void checkConnectionSuitableForPubSub() {
    if (authenticator.client.protocol != RedisProtocol.RESP3
        && authenticator.client.isTokenBasedAuthenticationEnabled()) {
      throw new JedisException(
          ""Blocking pub/sub operations are not supported on token-based authentication enabled connections with RESP2 protocol!"");
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,isSubscribed,boolean isSubscribed(),"[52, 54]","{'A1': [(52, 54)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  public final boolean isSubscribed() {
    return subscribedChannels > 0;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,getSubscribedChannels,int getSubscribedChannels(),"[56, 58]","{'A1': [(56, 58)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  public final int getSubscribedChannels() {
    return subscribedChannels;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,proceed,void proceed(Connection),"[60, 69]","{'A1': [(60, 60), (63, 66), (68, 69)], 'A35': [(61, 62), (67, 67)]}","{'A1': 0.7, 'A35': 0.3}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  public final void proceed(Connection client, T... channels) {
    authenticator.registerForAuthentication(client);
    authenticator.client.setTimeoutInfinite();
    try {
      ssubscribe(channels);
      process();
    } finally {
      authenticator.client.rollbackTimeout();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisShardedPubSubBase.java,JedisShardedPubSubBase,process,void process(),"[73, 117]","{'A1': [(73, 75), (77, 103), (110, 112), (114, 117)], 'A35': [(76, 76), (104, 109)], 'A88': [(113, 113)]}","{'A1': 0.8222222222222222, 'A35': 0.15555555555555556, 'A88': 0.022222222222222223}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisShardedPubSubBaseTest.java,"  private void process() {

    do {
      Object reply = authenticator.client.getUnflushedObject();

      if (reply instanceof List) {
        List<Object> listReply = (List<Object>) reply;
        final Object firstObj = listReply.get(0);
        if (!(firstObj instanceof byte[])) {
          throw new JedisException(""Unknown message type: "" + firstObj);
        }
        final byte[] resp = (byte[]) firstObj;
        if (Arrays.equals(SSUBSCRIBE.getRaw(), resp)) {
          subscribedChannels = ((Long) listReply.get(2)).intValue();
          final byte[] bchannel = (byte[]) listReply.get(1);
          final T enchannel = (bchannel == null) ? null : encode(bchannel);
          onSSubscribe(enchannel, subscribedChannels);
        } else if (Arrays.equals(SUNSUBSCRIBE.getRaw(), resp)) {
          subscribedChannels = ((Long) listReply.get(2)).intValue();
          final byte[] bchannel = (byte[]) listReply.get(1);
          final T enchannel = (bchannel == null) ? null : encode(bchannel);
          onSUnsubscribe(enchannel, subscribedChannels);
        } else if (Arrays.equals(SMESSAGE.getRaw(), resp)) {
          final byte[] bchannel = (byte[]) listReply.get(1);
          final byte[] bmesg = (byte[]) listReply.get(2);
          final T enchannel = (bchannel == null) ? null : encode(bchannel);
          final T enmesg = (bmesg == null) ? null : encode(bmesg);
          onSMessage(enchannel, enmesg);
        } else {
          throw new JedisException(""Unknown message type: "" + firstObj);
        }
      } else if (reply instanceof byte[]) {
        Consumer<Object> resultHandler = authenticator.resultHandler.poll();
        if (resultHandler == null) {
          throw new JedisException(""Unexpected message : "" + SafeEncoder.encode((byte[]) reply));
        }
        resultHandler.accept(reply);
      } else {
        throw new JedisException(""Unknown message type: "" + reply);
      }
    } while (!Thread.currentThread().isInterrupted() && isSubscribed());

//    /* Invalidate instance since this thread is no longer listening */
//    this.client = null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/HostAndPort.java,HostAndPort,getHost,String getHost(),"[17, 19]","{'A7': [(17, 19)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/HostAndPortTest.java,"  public String getHost() {
    return host;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/HostAndPort.java,HostAndPort,getPort,int getPort(),"[21, 23]","{'A7': [(21, 23)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/HostAndPortTest.java,"  public int getPort() {
    return port;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/HostAndPort.java,HostAndPort,equals,boolean equals(Object),"[25, 32]","{'A7': [(25, 26), (32, 32)], 'A1': [(30, 31)], 'A74': [(27, 29)]}","{'A7': 0.375, 'A1': 0.25, 'A74': 0.375}",A7,../projects/jedis/src/test/java/redis/clients/jedis/HostAndPortTest.java,"  @Override
  public boolean equals(Object obj) {
    if (obj == null) return false;
    if (obj == this) return true;
    if (!(obj instanceof HostAndPort)) return false;
    HostAndPort other = (HostAndPort) obj;
    return this.port == other.port && this.host.equals(other.host);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/HostAndPort.java,HostAndPort,hashCode,int hashCode(),"[34, 37]","{'A7': [(34, 35), (37, 37)], 'A1': [(36, 36)]}","{'A7': 0.75, 'A1': 0.25}",A7,../projects/jedis/src/test/java/redis/clients/jedis/HostAndPortTest.java,"  @Override
  public int hashCode() {
    return 31 * host.hashCode() + port;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/HostAndPort.java,HostAndPort,toString,String toString(),"[39, 42]","{'A7': [(39, 42)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/HostAndPortTest.java,"  @Override
  public String toString() {
    return host + "":"" + port;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/HostAndPort.java,HostAndPort,from,HostAndPort from(String),"[49, 54]","{'A1': [(49, 54)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/HostAndPortTest.java,"  public static HostAndPort from(String string) {
    int lastColon = string.lastIndexOf("":"");
    String host = string.substring(0, lastColon);
    int port = Integer.parseInt(string.substring(lastColon + 1));
    return new HostAndPort(host, port);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisFactory.java,JedisFactory,setHostAndPort,void setHostAndPort(HostAndPort),"[139, 144]","{'A1': [(139, 143)], 'A7': [(144, 144)]}","{'A1': 0.8333333333333334, 'A7': 0.16666666666666666}",A1,,"  void setHostAndPort(final HostAndPort hostAndPort) {
    if (!(jedisSocketFactory instanceof DefaultJedisSocketFactory)) {
      throw new IllegalStateException(""setHostAndPort method has limited capability."");
    }
    ((DefaultJedisSocketFactory) jedisSocketFactory).updateHostAndPort(hostAndPort);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisFactory.java,JedisFactory,activateObject,void activateObject(PooledObject<Jedis>),"[146, 152]","{'A92': [(151, 151)], 'A1': [(148, 150)], 'A7': [(146, 147), (152, 152)]}","{'A92': 0.14285714285714285, 'A1': 0.42857142857142855, 'A7': 0.42857142857142855}",A1,,"  @Override
  public void activateObject(PooledObject<Jedis> pooledJedis) throws Exception {
    final Jedis jedis = pooledJedis.getObject();
    if (jedis.getDB() != clientConfig.getDatabase()) {
      jedis.select(clientConfig.getDatabase());
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisFactory.java,JedisFactory,destroyObject,void destroyObject(PooledObject<Jedis>),"[154, 164]","{'A2': [(163, 163)], 'A1': [(156, 156), (158, 159), (161, 161)], 'A7': [(154, 155), (157, 157), (162, 162), (164, 164)], 'A37': [(160, 160)]}","{'A2': 0.09090909090909091, 'A1': 0.36363636363636365, 'A7': 0.45454545454545453, 'A37': 0.09090909090909091}",A7,,"  @Override
  public void destroyObject(PooledObject<Jedis> pooledJedis) throws Exception {
    final Jedis jedis = pooledJedis.getObject();
    if (jedis.isConnected()) {
      try {
        jedis.close();
      } catch (RuntimeException e) {
        logger.debug(""Error while close"", e);
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisFactory.java,JedisFactory,makeObject,PooledObject<Jedis> makeObject(),"[166, 176]","{'A92': [(175, 175)], 'A1': [(168, 168), (171, 171)], 'A8': [(169, 169), (172, 172), (174, 174)], 'A21': [(170, 170)], 'A7': [(166, 167), (176, 176)], 'A10': [(173, 173)]}","{'A92': 0.09090909090909091, 'A1': 0.18181818181818182, 'A8': 0.2727272727272727, 'A21': 0.09090909090909091, 'A7': 0.2727272727272727, 'A10': 0.09090909090909091}",A8,,"  @Override
  public PooledObject<Jedis> makeObject() throws Exception {
    Jedis jedis = null;
    try {
      jedis = new Jedis(jedisSocketFactory, clientConfig);
      return new DefaultPooledObject<>(jedis);
    } catch (JedisException je) {
      logger.debug(""Error while makeObject"", je);
      throw je;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisFactory.java,JedisFactory,passivateObject,void passivateObject(PooledObject<Jedis>),"[178, 181]","{'A7': [(178, 181)]}",{'A7': 1.0},A7,,"  @Override
  public void passivateObject(PooledObject<Jedis> pooledJedis) throws Exception {
    // TODO maybe should select db 0? Not sure right now.
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisFactory.java,JedisFactory,validateObject,boolean validateObject(PooledObject<Jedis>),"[183, 203]","{'A92': [(202, 202)], 'A1': [(185, 185), (200, 200)], 'A7': [(183, 184), (186, 186), (199, 199), (201, 201), (203, 203)], 'A94': [(187, 198)]}","{'A92': 0.047619047619047616, 'A1': 0.09523809523809523, 'A7': 0.2857142857142857, 'A94': 0.5714285714285714}",A94,,"  @Override
  public boolean validateObject(PooledObject<Jedis> pooledJedis) {
    final Jedis jedis = pooledJedis.getObject();
    try {
      boolean targetHasNotChanged = true;
      if (jedisSocketFactory instanceof DefaultJedisSocketFactory) {
        HostAndPort targetAddress = ((DefaultJedisSocketFactory) jedisSocketFactory).getHostAndPort();
        HostAndPort objectAddress = jedis.getConnection().getHostAndPort();

        targetHasNotChanged = targetAddress.getHost().equals(objectAddress.getHost())
            && targetAddress.getPort() == objectAddress.getPort();
      }

      return targetHasNotChanged
          && jedis.getConnection().isConnected()
          && jedis.ping().equals(""PONG"");
    } catch (final Exception e) {
      logger.warn(""Error while validating pooled Jedis object."", e);
      return false;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getRedisProtocol,RedisProtocol getRedisProtocol(),"[12, 14]","{'A1': [(12, 14)]}",{'A1': 1.0},A1,,"  default RedisProtocol getRedisProtocol() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getConnectionTimeoutMillis,int getConnectionTimeoutMillis(),"[19, 21]","{'A1': [(19, 21)]}",{'A1': 1.0},A1,,"  default int getConnectionTimeoutMillis() {
    return Protocol.DEFAULT_TIMEOUT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getSocketTimeoutMillis,int getSocketTimeoutMillis(),"[26, 28]","{'A1': [(26, 28)]}",{'A1': 1.0},A1,,"  default int getSocketTimeoutMillis() {
    return Protocol.DEFAULT_TIMEOUT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getBlockingSocketTimeoutMillis,int getBlockingSocketTimeoutMillis(),"[34, 36]","{'A1': [(34, 36)]}",{'A1': 1.0},A1,,"  default int getBlockingSocketTimeoutMillis() {
    return 0;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getUser,String getUser(),"[41, 43]","{'A1': [(41, 43)]}",{'A1': 1.0},A1,,"  default String getUser() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getPassword,String getPassword(),"[45, 47]","{'A1': [(45, 47)]}",{'A1': 1.0},A1,,"  default String getPassword() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getCredentialsProvider,Supplier<RedisCredentials> getCredentialsProvider(),"[50, 53]","{'A1': [(50, 53)]}",{'A1': 1.0},A1,,"  default Supplier<RedisCredentials> getCredentialsProvider() {
    return new DefaultRedisCredentialsProvider(
        new DefaultRedisCredentials(getUser(), getPassword()));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getAuthXManager,AuthXManager getAuthXManager(),"[55, 57]","{'A35': [(55, 57)]}",{'A35': 1.0},A35,,"  default AuthXManager getAuthXManager() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getDatabase,int getDatabase(),"[59, 61]","{'A1': [(59, 61)]}",{'A1': 1.0},A1,,"  default int getDatabase() {
    return Protocol.DEFAULT_DATABASE;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getClientName,String getClientName(),"[63, 65]","{'A1': [(63, 65)]}",{'A1': 1.0},A1,,"  default String getClientName() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,isSsl,boolean isSsl(),"[70, 72]","{'A1': [(70, 72)]}",{'A1': 1.0},A1,,"  default boolean isSsl() {
    return false;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getSslSocketFactory,SSLSocketFactory getSslSocketFactory(),"[74, 76]","{'A1': [(74, 76)]}",{'A1': 1.0},A1,,"  default SSLSocketFactory getSslSocketFactory() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getSslParameters,SSLParameters getSslParameters(),"[78, 80]","{'A1': [(78, 80)]}",{'A1': 1.0},A1,,"  default SSLParameters getSslParameters() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getSslOptions,SslOptions getSslOptions(),"[88, 90]","{'A1': [(88, 90)]}",{'A1': 1.0},A1,,"  default SslOptions getSslOptions() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getHostnameVerifier,HostnameVerifier getHostnameVerifier(),"[92, 94]","{'A1': [(92, 94)]}",{'A1': 1.0},A1,,"  default HostnameVerifier getHostnameVerifier() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getHostAndPortMapper,HostAndPortMapper getHostAndPortMapper(),"[96, 98]","{'A1': [(96, 98)]}",{'A1': 1.0},A1,,"  default HostAndPortMapper getHostAndPortMapper() {
    return null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,isReadOnlyForRedisClusterReplicas,boolean isReadOnlyForRedisClusterReplicas(),"[107, 109]","{'A1': [(107, 107)], 'A33': [(108, 109)]}","{'A1': 0.3333333333333333, 'A33': 0.6666666666666666}",A33,,"  default boolean isReadOnlyForRedisClusterReplicas() {
    return false;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisClientConfig.java,,getClientSetInfoConfig,ClientSetInfoConfig getClientSetInfoConfig(),"[115, 117]","{'A1': [(115, 117)]}",{'A1': 1.0},A1,,"  default ClientSetInfoConfig getClientSetInfoConfig() {
    return ClientSetInfoConfig.DEFAULT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/AbstractTransaction.java,AbstractTransaction,waitReplicas,"Response<Long> waitReplicas(int,long)","[37, 39]","{'A1': [(37, 39)]}",{'A1': 1.0},A1,,"  public Response<Long> waitReplicas(int replicas, long timeout) {
    return appendCommand(commandObjects.waitReplicas(replicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/AbstractTransaction.java,AbstractTransaction,publish,"Response<Long> publish(String,String)","[41, 43]","{'A1': [(41, 43)]}",{'A1': 1.0},A1,,"  public Response<Long> publish(String channel, String message) {
    return appendCommand(commandObjects.publish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/AbstractTransaction.java,AbstractTransaction,publish,"Response<Long> publish(byte[],byte[])","[45, 47]","{'A1': [(45, 47)]}",{'A1': 1.0},A1,,"  public Response<Long> publish(byte[] channel, byte[] message) {
    return appendCommand(commandObjects.publish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getRedisProtocol,RedisProtocol getRedisProtocol(),"[55, 58]","{'A1': [(55, 58)]}",{'A1': 1.0},A1,,"  @Override
  public RedisProtocol getRedisProtocol() {
    return redisProtocol;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getConnectionTimeoutMillis,int getConnectionTimeoutMillis(),"[60, 63]","{'A1': [(60, 63)]}",{'A1': 1.0},A1,,"  @Override
  public int getConnectionTimeoutMillis() {
    return connectionTimeoutMillis;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getSocketTimeoutMillis,int getSocketTimeoutMillis(),"[65, 68]","{'A1': [(65, 68)]}",{'A1': 1.0},A1,,"  @Override
  public int getSocketTimeoutMillis() {
    return socketTimeoutMillis;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getBlockingSocketTimeoutMillis,int getBlockingSocketTimeoutMillis(),"[70, 73]","{'A1': [(70, 73)]}",{'A1': 1.0},A1,,"  @Override
  public int getBlockingSocketTimeoutMillis() {
    return blockingSocketTimeoutMillis;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getUser,String getUser(),"[75, 78]","{'A1': [(75, 78)]}",{'A1': 1.0},A1,,"  @Override
  public String getUser() {
    return credentialsProvider.get().getUser();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getPassword,String getPassword(),"[80, 84]","{'A1': [(80, 84)]}",{'A1': 1.0},A1,,"  @Override
  public String getPassword() {
    char[] password = credentialsProvider.get().getPassword();
    return password == null ? null : new String(password);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getCredentialsProvider,Supplier<RedisCredentials> getCredentialsProvider(),"[86, 89]","{'A1': [(86, 89)]}",{'A1': 1.0},A1,,"  @Override
  public Supplier<RedisCredentials> getCredentialsProvider() {
    return credentialsProvider;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getAuthXManager,AuthXManager getAuthXManager(),"[91, 94]","{'A35': [(91, 94)]}",{'A35': 1.0},A35,,"  @Override
  public AuthXManager getAuthXManager() {
    return authXManager;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getDatabase,int getDatabase(),"[96, 99]","{'A1': [(96, 99)]}",{'A1': 1.0},A1,,"  @Override
  public int getDatabase() {
    return database;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getClientName,String getClientName(),"[101, 104]","{'A1': [(101, 104)]}",{'A1': 1.0},A1,,"  @Override
  public String getClientName() {
    return clientName;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,isSsl,boolean isSsl(),"[106, 109]","{'A1': [(106, 109)]}",{'A1': 1.0},A1,,"  @Override
  public boolean isSsl() {
    return ssl;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getSslSocketFactory,SSLSocketFactory getSslSocketFactory(),"[111, 114]","{'A1': [(111, 114)]}",{'A1': 1.0},A1,,"  @Override
  public SSLSocketFactory getSslSocketFactory() {
    return sslSocketFactory;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getSslParameters,SSLParameters getSslParameters(),"[116, 119]","{'A1': [(116, 119)]}",{'A1': 1.0},A1,,"  @Override
  public SSLParameters getSslParameters() {
    return sslParameters;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getSslOptions,SslOptions getSslOptions(),"[121, 124]","{'A1': [(121, 124)]}",{'A1': 1.0},A1,,"  @Override
  public SslOptions getSslOptions() {
    return sslOptions;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getHostnameVerifier,HostnameVerifier getHostnameVerifier(),"[126, 129]","{'A1': [(126, 129)]}",{'A1': 1.0},A1,,"  @Override
  public HostnameVerifier getHostnameVerifier() {
    return hostnameVerifier;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getHostAndPortMapper,HostAndPortMapper getHostAndPortMapper(),"[131, 134]","{'A1': [(131, 134)]}",{'A1': 1.0},A1,,"  @Override
  public HostAndPortMapper getHostAndPortMapper() {
    return hostAndPortMapper;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,getClientSetInfoConfig,ClientSetInfoConfig getClientSetInfoConfig(),"[136, 139]","{'A1': [(136, 139)]}",{'A1': 1.0},A1,,"  @Override
  public ClientSetInfoConfig getClientSetInfoConfig() {
    return clientSetInfoConfig;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,isReadOnlyForRedisClusterReplicas,boolean isReadOnlyForRedisClusterReplicas(),"[141, 144]","{'A1': [(142, 143)], 'A33': [(141, 141), (144, 144)]}","{'A1': 0.5, 'A33': 0.5}",A1,,"  @Override
  public boolean isReadOnlyForRedisClusterReplicas() {
    return readOnlyForRedisClusterReplicas;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,builder,Builder builder(),"[146, 148]","{'A1': [(146, 148)]}",{'A1': 1.0},A1,,"  public static Builder builder() {
    return new Builder();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,build,DefaultJedisClientConfig build(),"[181, 188]","{'A1': [(181, 188)]}",{'A1': 1.0},A1,,"    public DefaultJedisClientConfig build() {
      if (credentialsProvider == null) {
        credentialsProvider = new DefaultRedisCredentialsProvider(
            new DefaultRedisCredentials(user, password));
      }

      return new DefaultJedisClientConfig(this);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,resp3,Builder resp3(),"[195, 197]","{'A1': [(195, 197)]}",{'A1': 1.0},A1,,"    public Builder resp3() {
      return protocol(RedisProtocol.RESP3);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,protocol,Builder protocol(RedisProtocol),"[199, 202]","{'A1': [(199, 202)]}",{'A1': 1.0},A1,,"    public Builder protocol(RedisProtocol protocol) {
      this.redisProtocol = protocol;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,timeoutMillis,Builder timeoutMillis(int),"[204, 208]","{'A1': [(204, 208)]}",{'A1': 1.0},A1,,"    public Builder timeoutMillis(int timeoutMillis) {
      this.connectionTimeoutMillis = timeoutMillis;
      this.socketTimeoutMillis = timeoutMillis;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,connectionTimeoutMillis,Builder connectionTimeoutMillis(int),"[210, 213]","{'A1': [(210, 213)]}",{'A1': 1.0},A1,,"    public Builder connectionTimeoutMillis(int connectionTimeoutMillis) {
      this.connectionTimeoutMillis = connectionTimeoutMillis;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,socketTimeoutMillis,Builder socketTimeoutMillis(int),"[215, 218]","{'A1': [(215, 218)]}",{'A1': 1.0},A1,,"    public Builder socketTimeoutMillis(int socketTimeoutMillis) {
      this.socketTimeoutMillis = socketTimeoutMillis;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,blockingSocketTimeoutMillis,Builder blockingSocketTimeoutMillis(int),"[220, 223]","{'A1': [(220, 223)]}",{'A1': 1.0},A1,,"    public Builder blockingSocketTimeoutMillis(int blockingSocketTimeoutMillis) {
      this.blockingSocketTimeoutMillis = blockingSocketTimeoutMillis;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,user,Builder user(String),"[225, 228]","{'A1': [(225, 228)]}",{'A1': 1.0},A1,,"    public Builder user(String user) {
      this.user = user;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,password,Builder password(String),"[230, 233]","{'A1': [(230, 233)]}",{'A1': 1.0},A1,,"    public Builder password(String password) {
      this.password = password;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,credentials,Builder credentials(RedisCredentials),"[235, 238]","{'A1': [(235, 238)]}",{'A1': 1.0},A1,,"    public Builder credentials(RedisCredentials credentials) {
      this.credentialsProvider = new DefaultRedisCredentialsProvider(credentials);
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,credentialsProvider,Builder credentialsProvider(Supplier<RedisCredentials>),"[240, 243]","{'A1': [(240, 243)]}",{'A1': 1.0},A1,,"    public Builder credentialsProvider(Supplier<RedisCredentials> credentials) {
      this.credentialsProvider = credentials;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,database,Builder database(int),"[245, 248]","{'A1': [(245, 248)]}",{'A1': 1.0},A1,,"    public Builder database(int database) {
      this.database = database;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,clientName,Builder clientName(String),"[250, 253]","{'A1': [(250, 253)]}",{'A1': 1.0},A1,,"    public Builder clientName(String clientName) {
      this.clientName = clientName;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,ssl,Builder ssl(boolean),"[255, 258]","{'A1': [(255, 258)]}",{'A1': 1.0},A1,,"    public Builder ssl(boolean ssl) {
      this.ssl = ssl;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,sslSocketFactory,Builder sslSocketFactory(SSLSocketFactory),"[260, 263]","{'A1': [(260, 263)]}",{'A1': 1.0},A1,,"    public Builder sslSocketFactory(SSLSocketFactory sslSocketFactory) {
      this.sslSocketFactory = sslSocketFactory;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,sslParameters,Builder sslParameters(SSLParameters),"[265, 268]","{'A1': [(265, 268)]}",{'A1': 1.0},A1,,"    public Builder sslParameters(SSLParameters sslParameters) {
      this.sslParameters = sslParameters;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,sslOptions,Builder sslOptions(SslOptions),"[270, 273]","{'A1': [(270, 273)]}",{'A1': 1.0},A1,,"    public Builder sslOptions(SslOptions sslOptions) {
      this.sslOptions = sslOptions;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,hostnameVerifier,Builder hostnameVerifier(HostnameVerifier),"[275, 278]","{'A1': [(275, 278)]}",{'A1': 1.0},A1,,"    public Builder hostnameVerifier(HostnameVerifier hostnameVerifier) {
      this.hostnameVerifier = hostnameVerifier;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,hostAndPortMapper,Builder hostAndPortMapper(HostAndPortMapper),"[280, 283]","{'A1': [(280, 283)]}",{'A1': 1.0},A1,,"    public Builder hostAndPortMapper(HostAndPortMapper hostAndPortMapper) {
      this.hostAndPortMapper = hostAndPortMapper;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,clientSetInfoConfig,Builder clientSetInfoConfig(ClientSetInfoConfig),"[285, 288]","{'A1': [(285, 288)]}",{'A1': 1.0},A1,,"    public Builder clientSetInfoConfig(ClientSetInfoConfig setInfoConfig) {
      this.clientSetInfoConfig = setInfoConfig;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,readOnlyForRedisClusterReplicas,Builder readOnlyForRedisClusterReplicas(),"[290, 293]","{'A1': [(290, 291)], 'A33': [(292, 293)]}","{'A1': 0.5, 'A33': 0.5}",A1,,"    public Builder readOnlyForRedisClusterReplicas() {
      this.readOnlyForRedisClusterReplicas = true;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,authXManager,Builder authXManager(AuthXManager),"[295, 298]","{'A35': [(295, 298)]}",{'A35': 1.0},A35,,"    public Builder authXManager(AuthXManager authXManager) {
      this.authXManager = authXManager;
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig.Builder,from,Builder from(JedisClientConfig),"[300, 318]","{'A1': [(311, 311)], 'A35': [(300, 310), (312, 318)]}","{'A1': 0.05263157894736842, 'A35': 0.9473684210526315}",A35,,"    public Builder from(JedisClientConfig instance) {
      this.redisProtocol = instance.getRedisProtocol();
      this.connectionTimeoutMillis = instance.getConnectionTimeoutMillis();
      this.socketTimeoutMillis = instance.getSocketTimeoutMillis();
      this.blockingSocketTimeoutMillis = instance.getBlockingSocketTimeoutMillis();
      this.credentialsProvider = instance.getCredentialsProvider();
      this.database = instance.getDatabase();
      this.clientName = instance.getClientName();
      this.ssl = instance.isSsl();
      this.sslSocketFactory = instance.getSslSocketFactory();
      this.sslParameters = instance.getSslParameters();
      this.sslOptions = instance.getSslOptions();
      this.hostnameVerifier = instance.getHostnameVerifier();
      this.hostAndPortMapper = instance.getHostAndPortMapper();
      this.clientSetInfoConfig = instance.getClientSetInfoConfig();
      this.readOnlyForRedisClusterReplicas = instance.isReadOnlyForRedisClusterReplicas();
      this.authXManager = instance.getAuthXManager();
      return this;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,create,"DefaultJedisClientConfig create(int,int,int,String,String,int,String,boolean,SSLSocketFactory,SSLParameters,HostnameVerifier,HostAndPortMapper)","[324, 340]","{'A1': [(324, 340)]}",{'A1': 1.0},A1,,"  @Deprecated
  public static DefaultJedisClientConfig create(int connectionTimeoutMillis, int soTimeoutMillis,
      int blockingSocketTimeoutMillis, String user, String password, int database, String clientName,
      boolean ssl, SSLSocketFactory sslSocketFactory, SSLParameters sslParameters,
      HostnameVerifier hostnameVerifier, HostAndPortMapper hostAndPortMapper) {
    Builder builder = builder();
    builder.connectionTimeoutMillis(connectionTimeoutMillis).socketTimeoutMillis(soTimeoutMillis)
        .blockingSocketTimeoutMillis(blockingSocketTimeoutMillis);
    if (user != null || password != null) {
      // deliberately not handling 'user != null && password == null' here
      builder.credentials(new DefaultRedisCredentials(user, password));
    }
    builder.database(database).clientName(clientName);
    builder.ssl(ssl).sslSocketFactory(sslSocketFactory).sslParameters(sslParameters).hostnameVerifier(hostnameVerifier);
    builder.hostAndPortMapper(hostAndPortMapper);
    return builder.build();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisClientConfig.java,DefaultJedisClientConfig,copyConfig,DefaultJedisClientConfig copyConfig(JedisClientConfig),"[346, 380]","{'A1': [(346, 380)]}",{'A1': 1.0},A1,,"  @Deprecated
  public static DefaultJedisClientConfig copyConfig(JedisClientConfig copy) {
    Builder builder = builder();
    builder.protocol(copy.getRedisProtocol());
    builder.connectionTimeoutMillis(copy.getConnectionTimeoutMillis());
    builder.socketTimeoutMillis(copy.getSocketTimeoutMillis());
    builder.blockingSocketTimeoutMillis(copy.getBlockingSocketTimeoutMillis());

    Supplier<RedisCredentials> credentialsProvider = copy.getCredentialsProvider();
    if (credentialsProvider != null) {
      builder.credentialsProvider(credentialsProvider);
    } else {
      builder.user(copy.getUser());
      builder.password(copy.getPassword());
    }

    builder.database(copy.getDatabase());
    builder.clientName(copy.getClientName());

    builder.ssl(copy.isSsl());
    builder.sslSocketFactory(copy.getSslSocketFactory());
    builder.sslParameters(copy.getSslParameters());
    builder.hostnameVerifier(copy.getHostnameVerifier());
    builder.sslOptions(copy.getSslOptions());
    builder.hostAndPortMapper(copy.getHostAndPortMapper());

    builder.clientSetInfoConfig(copy.getClientSetInfoConfig());
    if (copy.isReadOnlyForRedisClusterReplicas()) {
      builder.readOnlyForRedisClusterReplicas();
    }

    builder.authXManager(copy.getAuthXManager());

    return builder.build();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/RedisCredentialsProvider.java,,prepare,void prepare(),"[19, 19]","{'A1': [(19, 19)]}",{'A1': 1.0},A1,,"  default void prepare() { }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/RedisCredentialsProvider.java,,cleanUp,void cleanUp(),"[26, 26]","{'A1': [(26, 26)]}",{'A1': 1.0},A1,,"  default void cleanUp() { }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java,DefaultJedisSocketFactory,connectToFirstSuccessfulHost,Socket connectToFirstSuccessfulHost(HostAndPort),"[62, 87]","{'A1': [(68, 68)], 'A95': [(63, 66), (69, 70), (82, 87)], 'A96': [(62, 62)], 'A10': [(67, 67), (71, 81)]}","{'A1': 0.038461538461538464, 'A95': 0.46153846153846156, 'A96': 0.038461538461538464, 'A10': 0.46153846153846156}",A95,,"  private Socket connectToFirstSuccessfulHost(HostAndPort hostAndPort) throws Exception {
    List<InetAddress> hosts = Arrays.asList(InetAddress.getAllByName(hostAndPort.getHost()));
    if (hosts.size() > 1) {
      Collections.shuffle(hosts);
    }

    JedisConnectionException jce = new JedisConnectionException(""Failed to connect to "" + hostAndPort + ""."");
    for (InetAddress host : hosts) {
      try {
        Socket socket = new Socket();

        socket.setReuseAddress(true);
        socket.setKeepAlive(true); // Will monitor the TCP connection is valid
        socket.setTcpNoDelay(true); // Socket buffer Whetherclosed, to ensure timely delivery of data
        socket.setSoLinger(true, 0); // Control calls close () method, the underlying socket is closed immediately

        // Passing 'host' directly will avoid another call to InetAddress.getByName() inside the InetSocketAddress constructor.
        // For machines with ipv4 and ipv6, but the startNode uses ipv4 to connect, the ipv6 connection may fail.
        socket.connect(new InetSocketAddress(host, hostAndPort.getPort()), connectionTimeout);
        return socket;
      } catch (Exception e) {
        jce.addSuppressed(e);
      }
    }
    throw jce;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java,DefaultJedisSocketFactory,createSocket,Socket createSocket(),"[89, 111]","{'A21': [(89, 89), (91, 92), (96, 96), (99, 99), (101, 101)], 'A1': [(90, 90), (93, 93), (95, 95), (97, 98), (100, 100), (102, 102), (104, 104), (110, 111)], 'A95': [(103, 103), (105, 109)], 'A96': [(94, 94)]}","{'A21': 0.2608695652173913, 'A1': 0.43478260869565216, 'A95': 0.2608695652173913, 'A96': 0.043478260869565216}",A1,,"  @Override
  public Socket createSocket() throws JedisConnectionException {
    Socket socket = null;
    try {
      HostAndPort _hostAndPort = getSocketHostAndPort();
      socket = connectToFirstSuccessfulHost(_hostAndPort);
      socket.setSoTimeout(socketTimeout);

      if (ssl || sslOptions != null) {
        socket = createSslSocket(_hostAndPort, socket);
      }

      return socket;

    } catch (Exception ex) {
      IOUtils.closeQuietly(socket);
      if (ex instanceof JedisConnectionException) {
        throw (JedisConnectionException) ex;
      } else {
        throw new JedisConnectionException(""Failed to create socket."", ex);
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java,DefaultJedisSocketFactory,createSslSocket,"Socket createSslSocket(HostAndPort,Socket)","[116, 155]","{'A1': [(116, 155)]}",{'A1': 1.0},A1,,"  private Socket createSslSocket(HostAndPort _hostAndPort, Socket socket) throws IOException, GeneralSecurityException {

    Socket plainSocket = socket;

    SSLSocketFactory _sslSocketFactory;
    SSLParameters _sslParameters;

    if (sslOptions != null) {

      SSLContext _sslContext = sslOptions.createSslContext();
      _sslSocketFactory = _sslContext.getSocketFactory();

      _sslParameters = sslOptions.getSslParameters();

    } else {

      _sslSocketFactory = this.sslSocketFactory;
      _sslParameters = this.sslParameters;
    }

    if (_sslSocketFactory == null) {
      _sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
    }

    SSLSocket sslSocket = (SSLSocket) _sslSocketFactory.createSocket(socket,
        _hostAndPort.getHost(), _hostAndPort.getPort(), true);

    if (_sslParameters != null) {
      sslSocket.setSSLParameters(_sslParameters);
    }

    // allowing HostnameVerifier for both SslOptions and legacy ssl config
    if (hostnameVerifier != null && !hostnameVerifier.verify(_hostAndPort.getHost(), sslSocket.getSession())) {
      String message = String.format(""The connection to '%s' failed ssl/tls hostname verification."",
          _hostAndPort.getHost());
      throw new JedisConnectionException(message);
    }

    return new SSLSocketWrapper(sslSocket, plainSocket);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java,DefaultJedisSocketFactory,updateHostAndPort,void updateHostAndPort(HostAndPort),"[157, 159]","{'A21': [(157, 159)]}",{'A21': 1.0},A21,,"  public void updateHostAndPort(HostAndPort hostAndPort) {
    this.hostAndPort = hostAndPort;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java,DefaultJedisSocketFactory,getHostAndPort,HostAndPort getHostAndPort(),"[161, 163]","{'A1': [(161, 163)]}",{'A1': 1.0},A1,,"  public HostAndPort getHostAndPort() {
    return this.hostAndPort;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java,DefaultJedisSocketFactory,getSocketHostAndPort,HostAndPort getSocketHostAndPort(),"[165, 175]","{'A21': [(172, 173)], 'A1': [(165, 171), (174, 175)]}","{'A21': 0.18181818181818182, 'A1': 0.8181818181818182}",A1,,"  protected HostAndPort getSocketHostAndPort() {
    HostAndPortMapper mapper = hostAndPortMapper;
    HostAndPort hap = this.hostAndPort;
    if (mapper != null) {
      HostAndPort mapped = mapper.getHostAndPort(hap);
      if (mapped != null) {
        return mapped;
      }
    }
    return hap;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultJedisSocketFactory.java,DefaultJedisSocketFactory,toString,String toString(),"[177, 180]","{'A97': [(177, 180)]}",{'A97': 1.0},A97,,"  @Override
  public String toString() {
    return ""DefaultJedisSocketFactory{"" + hostAndPort.toString() + ""}"";
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedPipeline.java,ShardedPipeline,close,void close(),"[42, 49]","{'A1': [(42, 49)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ShardedPipelineTest.java,"  @Override
  public void close() {
    try {
      super.close();
    } finally {
      IOUtils.closeQuietly(closeable);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedPipeline.java,ShardedPipeline,getNodeKey,HostAndPort getNodeKey(CommandArguments),"[51, 54]","{'A1': [(51, 54)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ShardedPipelineTest.java,"  @Override
  protected HostAndPort getNodeKey(CommandArguments args) {
    return provider.getNode(((ShardedCommandArguments) args).getKeyHash());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedPipeline.java,ShardedPipeline,getConnection,Connection getConnection(HostAndPort),"[56, 59]","{'A1': [(56, 59)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ShardedPipelineTest.java,"  @Override
  protected Connection getConnection(HostAndPort nodeKey) {
    return provider.getConnection(nodeKey);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultRedisCredentialsProvider.java,DefaultRedisCredentialsProvider,setCredentials,void setCredentials(RedisCredentials),"[11, 13]","{'A1': [(11, 13)]}",{'A1': 1.0},A1,,"  public void setCredentials(RedisCredentials credentials) {
    this.credentials = credentials;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/DefaultRedisCredentialsProvider.java,DefaultRedisCredentialsProvider,get,RedisCredentials get(),"[15, 18]","{'A1': [(15, 18)]}",{'A1': 1.0},A1,,"  @Override
  public RedisCredentials get() {
    return this.credentials;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/GeoCoordinate.java,GeoCoordinate,getLongitude,double getLongitude(),"[13, 15]","{'A7': [(13, 15)]}",{'A7': 1.0},A7,,"  public double getLongitude() {
    return longitude;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/GeoCoordinate.java,GeoCoordinate,getLatitude,double getLatitude(),"[17, 19]","{'A7': [(17, 19)]}",{'A7': 1.0},A7,,"  public double getLatitude() {
    return latitude;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/GeoCoordinate.java,GeoCoordinate,equals,boolean equals(Object),"[21, 31]","{'A7': [(21, 22), (25, 31)], 'A74': [(23, 24)]}","{'A7': 0.8181818181818182, 'A74': 0.18181818181818182}",A7,,"  @Override
  public boolean equals(Object o) {
    if (o == null) return false;
    if (o == this) return true;
    if (!(o instanceof GeoCoordinate)) return false;

    GeoCoordinate that = (GeoCoordinate) o;

    if (Double.compare(that.longitude, longitude) != 0) return false;
    return Double.compare(that.latitude, latitude) == 0;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/GeoCoordinate.java,GeoCoordinate,hashCode,int hashCode(),"[33, 43]","{'A7': [(33, 43)]}",{'A7': 1.0},A7,,"  @Override
  public int hashCode() {
    // follows IntelliJ default hashCode implementation
    int result;
    long temp;
    temp = Double.doubleToLongBits(longitude);
    result = (int) (temp ^ (temp >>> 32));
    temp = Double.doubleToLongBits(latitude);
    result = 31 * result + (int) (temp ^ (temp >>> 32));
    return result;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/GeoCoordinate.java,GeoCoordinate,toString,String toString(),"[45, 48]","{'A7': [(45, 48)]}",{'A7': 1.0},A7,,"  @Override
  public String toString() {
    return ""("" + longitude + "","" + latitude + "")"";
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,commandArguments,ShardedCommandArguments commandArguments(ProtocolCommand),"[35, 40]","{'A1': [(35, 40)]}",{'A1': 1.0},A1,,"  @Override
  protected ShardedCommandArguments commandArguments(ProtocolCommand command) {
    ShardedCommandArguments comArgs = new ShardedCommandArguments(algo, tagPattern, command);
    if (keyPreProcessor != null) comArgs.setKeyArgumentPreProcessor(keyPreProcessor);
    return comArgs;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,dbSize,CommandObject<Long> dbSize(),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"  @Override
  public CommandObject<Long> dbSize() {
    throw new UnsupportedOperationException();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,keys,CommandObject<Set<String>> keys(String),"[53, 59]","{'A1': [(53, 59)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<Set<String>> keys(String pattern) {
    if (!JedisClusterHashTag.isClusterCompliantMatchPattern(pattern)) {
      throw new IllegalArgumentException(KEYS_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(KEYS).key(pattern).processKey(pattern), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,keys,CommandObject<Set<byte[]>> keys(byte[]),"[61, 67]","{'A1': [(61, 67)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<Set<byte[]>> keys(byte[] pattern) {
    if (!JedisClusterHashTag.isClusterCompliantMatchPattern(pattern)) {
      throw new IllegalArgumentException(KEYS_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(KEYS).key(pattern).processKey(pattern), BuilderFactory.BINARY_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,scan,CommandObject<ScanResult<String>> scan(String),"[69, 72]","{'A1': [(69, 72)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<String>> scan(String cursor) {
    throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,scan,"CommandObject<ScanResult<String>> scan(String,ScanParams)","[74, 81]","{'A1': [(74, 81)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<String>> scan(String cursor, ScanParams params) {
    String match = params.match();
    if (match == null || !JedisClusterHashTag.isClusterCompliantMatchPattern(match)) {
      throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).processKey(match), BuilderFactory.SCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,scan,"CommandObject<ScanResult<String>> scan(String,ScanParams,String)","[83, 90]","{'A1': [(83, 90)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<String>> scan(String cursor, ScanParams params, String type) {
    String match = params.match();
    if (match == null || !JedisClusterHashTag.isClusterCompliantMatchPattern(match)) {
      throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).processKey(match).add(TYPE).add(type), BuilderFactory.SCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,scan,CommandObject<ScanResult<byte[]>> scan(byte[]),"[92, 95]","{'A1': [(92, 95)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<byte[]>> scan(byte[] cursor) {
    throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,scan,"CommandObject<ScanResult<byte[]>> scan(byte[],ScanParams)","[97, 104]","{'A1': [(97, 104)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<byte[]>> scan(byte[] cursor, ScanParams params) {
    byte[] match = params.binaryMatch();
    if (match == null || !JedisClusterHashTag.isClusterCompliantMatchPattern(match)) {
      throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).processKey(match), BuilderFactory.SCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,scan,"CommandObject<ScanResult<byte[]>> scan(byte[],ScanParams,byte[])","[106, 113]","{'A1': [(106, 113)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<byte[]>> scan(byte[] cursor, ScanParams params, byte[] type) {
    byte[] match = params.binaryMatch();
    if (match == null || !JedisClusterHashTag.isClusterCompliantMatchPattern(match)) {
      throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).processKey(match).add(TYPE).add(type), BuilderFactory.SCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,waitReplicas,"CommandObject<Long> waitReplicas(int,long)","[115, 118]","{'A1': [(115, 118)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<Long> waitReplicas(int replicas, long timeout) {
    throw new UnsupportedOperationException();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandObjects.java,ShardedCommandObjects,waitAOF,"CommandObject<KeyValue<Long, Long>> waitAOF(long,long,long)","[120, 123]","{'A11': [(120, 123)]}",{'A11': 1.0},A11,,"  @Override
  public CommandObject<KeyValue<Long, Long>> waitAOF(long numLocal, long numReplicas, long timeout) {
    throw new UnsupportedOperationException();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/BinaryJedisShardedPubSub.java,BinaryJedisShardedPubSub,encode,byte[] encode(byte[]),"[5, 8]","{'A1': [(5, 8)]}",{'A1': 1.0},A1,,"  @Override
  protected final byte[] encode(byte[] raw) {
    return raw;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionPool.java,ConnectionPool,getResource,Connection getResource(),"[50, 55]","{'A1': [(50, 55)]}",{'A1': 1.0},A1,,"  @Override
  public Connection getResource() {
    Connection conn = super.getResource();
    conn.setHandlingPool(this);
    return conn;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionPool.java,ConnectionPool,close,void close(),"[57, 66]","{'A35': [(57, 66)]}",{'A35': 1.0},A35,,"  @Override
  public void close() {
    try {
      if (authXManager != null) {
        authXManager.stop();
      }
    } finally {
      super.close();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ConnectionPool.java,ConnectionPool,attachAuthenticationListener,void attachAuthenticationListener(AuthXManager),"[68, 80]","{'A35': [(68, 80)]}",{'A35': 1.0},A35,,"  private void attachAuthenticationListener(AuthXManager authXManager) {
    this.authXManager = authXManager;
    if (authXManager != null) {
      authXManager.addPostAuthenticationHook(token -> {
        try {
          // this is to trigger validations on each connection via ConnectionFactory
          evict();
        } catch (Exception e) {
          throw new JedisException(""Failed to evict connections from pool"", e);
        }
      });
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClientSetInfoConfig.java,ClientSetInfoConfig,validateLibNameSuffix,String validateLibNameSuffix(String),"[35, 49]","{'A1': [(35, 49)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/../projects/jedis/src/test/java/redis/clients/jedis/misc/ClientSetInfoConfigTest.java,"  private static String validateLibNameSuffix(String suffix) {
    if (suffix == null || suffix.trim().isEmpty()) {
      return null;
    }

    for (int i = 0; i < suffix.length(); i++) {
      char c = suffix.charAt(i);
      if (c < ' ' || c > '~' || BRACES.contains(c)) {
        throw new JedisValidationException(""lib-name suffix cannot contain braces, newlines or ""
            + ""special characters."");
      }
    }

    return suffix.replaceAll(""\\s"", ""-"");
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClientSetInfoConfig.java,ClientSetInfoConfig,isDisabled,boolean isDisabled(),"[51, 53]","{'A1': [(51, 53)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/../projects/jedis/src/test/java/redis/clients/jedis/misc/ClientSetInfoConfigTest.java,"  public final boolean isDisabled() {
    return disabled;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClientSetInfoConfig.java,ClientSetInfoConfig,getLibNameSuffix,String getLibNameSuffix(),"[55, 57]","{'A1': [(55, 57)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/../projects/jedis/src/test/java/redis/clients/jedis/misc/ClientSetInfoConfigTest.java,"  public final String getLibNameSuffix() {
    return libNameSuffix;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClientSetInfoConfig.java,ClientSetInfoConfig,withLibNameSuffix,ClientSetInfoConfig withLibNameSuffix(String),"[67, 69]","{'A1': [(67, 69)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/../projects/jedis/src/test/java/redis/clients/jedis/misc/ClientSetInfoConfigTest.java,"  public static ClientSetInfoConfig withLibNameSuffix(String suffix) {
    return new ClientSetInfoConfig(suffix);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Module.java,Module,getName,String getName(),"[15, 17]","{'A19': [(15, 17)]}",{'A19': 1.0},A19,../projects/jedis/src/test/java/redis/clients/jedis/../projects/jedis/src/test/java/redis/clients/jedis/commands/../projects/jedis/src/test/java/redis/clients/jedis/commands/jedis/ModuleTest.java,"  public String getName() {
    return name;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Module.java,Module,getVersion,int getVersion(),"[19, 21]","{'A19': [(19, 21)]}",{'A19': 1.0},A19,../projects/jedis/src/test/java/redis/clients/jedis/../projects/jedis/src/test/java/redis/clients/jedis/commands/../projects/jedis/src/test/java/redis/clients/jedis/commands/jedis/ModuleTest.java,"  public int getVersion() {
    return version;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Module.java,Module,equals,boolean equals(Object),"[23, 34]","{'A19': [(23, 24), (28, 34)], 'A74': [(25, 27)]}","{'A19': 0.75, 'A74': 0.25}",A19,../projects/jedis/src/test/java/redis/clients/jedis/../projects/jedis/src/test/java/redis/clients/jedis/commands/../projects/jedis/src/test/java/redis/clients/jedis/commands/jedis/ModuleTest.java,"  @Override
  public boolean equals(Object o) {
    if (o == null) return false;
    if (o == this) return true;
    if (!(o instanceof Module)) return false;

    Module module = (Module) o;

    if (version != module.version) return false;
    return !(name != null ? !name.equals(module.name) : module.name != null);

  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Module.java,Module,hashCode,int hashCode(),"[36, 41]","{'A19': [(36, 41)]}",{'A19': 1.0},A19,../projects/jedis/src/test/java/redis/clients/jedis/../projects/jedis/src/test/java/redis/clients/jedis/commands/../projects/jedis/src/test/java/redis/clients/jedis/commands/jedis/ModuleTest.java,"  @Override
  public int hashCode() {
    int result = name != null ? name.hashCode() : 0;
    result = 31 * result + version;
    return result;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandArguments.java,ClusterCommandArguments,getCommandHashSlot,int getCommandHashSlot(),"[15, 17]","{'A1': [(15, 17)]}",{'A1': 1.0},A1,,"  public int getCommandHashSlot() {
    return commandHashSlot;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandArguments.java,ClusterCommandArguments,processKey,CommandArguments processKey(byte[]),"[19, 28]","{'A1': [(19, 28)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments processKey(byte[] key) {
    final int hashSlot = JedisClusterCRC16.getSlot(key);
    if (commandHashSlot < 0) {
      commandHashSlot = hashSlot;
    } else if (commandHashSlot != hashSlot) {
      throw new JedisClusterOperationException(""Keys must belong to same hashslot."");
    }
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandArguments.java,ClusterCommandArguments,processKey,CommandArguments processKey(String),"[30, 39]","{'A1': [(30, 39)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments processKey(String key) {
    final int hashSlot = JedisClusterCRC16.getSlot(key);
    if (commandHashSlot < 0) {
      commandHashSlot = hashSlot;
    } else if (commandHashSlot != hashSlot) {
      throw new JedisClusterOperationException(""Keys must belong to same hashslot."");
    }
    return this;
  }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXEventListener.java,,onIdentityProviderError,void onIdentityProviderError(Exception),"[7, 9]","{'A35': [(7, 9)]}",{'A35': 1.0},A35,,"        @Override
        public void onIdentityProviderError(Exception reason) {
        }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXEventListener.java,,onConnectionAuthenticationError,void onConnectionAuthenticationError(Exception),"[11, 13]","{'A35': [(11, 13)]}",{'A35': 1.0},A35,,"        @Override
        public void onConnectionAuthenticationError(Exception reason) {
        }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,start,void start(),"[45, 54]","{'A35': [(45, 54)]}",{'A35': 1.0},A35,,"    public void start() {
        Future<Void> safeStarter = safeStart(this::tokenManagerStart);
        try {
            safeStarter.get();
        } catch (InterruptedException | ExecutionException e) {
            log.error(""AuthXManager failed to start!"", e);
            throw new JedisAuthenticationException(""AuthXManager failed to start!"",
                    (e instanceof ExecutionException) ? e.getCause() : e);
        }
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,safeStart,Future<Void> safeStart(Runnable),"[56, 66]","{'A35': [(56, 66)]}",{'A35': 1.0},A35,,"    private Future<Void> safeStart(Runnable starter) {
        if (uniqueStarterTask.compareAndSet(null, new CompletableFuture<Void>())) {
            try {
                starter.run();
                uniqueStarterTask.get().complete(null);
            } catch (Exception e) {
                uniqueStarterTask.get().completeExceptionally(e);
            }
        }
        return uniqueStarterTask.get();
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,tokenManagerStart,void tokenManagerStart(),"[68, 81]","{'A35': [(68, 81)]}",{'A35': 1.0},A35,,"    private void tokenManagerStart() {
        tokenManager.start(new TokenListener() {
            @Override
            public void onTokenRenewed(Token token) {
                currentToken = token;
                authenticateConnections(token);
            }

            @Override
            public void onError(Exception reason) {
                listener.onIdentityProviderError(reason);
            }
        }, true);
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,onTokenRenewed,void onTokenRenewed(Token),"[70, 74]","{'A35': [(70, 74)]}",{'A35': 1.0},A35,,"            @Override
            public void onTokenRenewed(Token token) {
                currentToken = token;
                authenticateConnections(token);
            }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,onError,void onError(Exception),"[76, 79]","{'A35': [(76, 79)]}",{'A35': 1.0},A35,,"            @Override
            public void onError(Exception reason) {
                listener.onIdentityProviderError(reason);
            }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,authenticateConnections,void authenticateConnections(Token),"[83, 94]","{'A35': [(83, 94)]}",{'A35': 1.0},A35,,"    public void authenticateConnections(Token token) {
        RedisCredentials credentialsFromToken = new TokenCredentials(token);
        for (WeakReference<Connection> connectionRef : connections) {
            Connection connection = connectionRef.get();
            if (connection != null) {
                connection.setCredentials(credentialsFromToken);
            } else {
                connections.remove(connectionRef);
            }
        }
        postAuthenticateHooks.forEach(hook -> hook.accept(token));
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,addConnection,Connection addConnection(Connection),"[96, 99]","{'A35': [(96, 99)]}",{'A35': 1.0},A35,,"    public Connection addConnection(Connection connection) {
        connections.add(new WeakReference<>(connection));
        return connection;
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,stop,void stop(),"[101, 103]","{'A35': [(101, 103)]}",{'A35': 1.0},A35,,"    public void stop() {
        tokenManager.stop();
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,setListener,void setListener(AuthXEventListener),"[105, 109]","{'A35': [(105, 109)]}",{'A35': 1.0},A35,,"    public void setListener(AuthXEventListener listener) {
        if (listener != null) {
            this.listener = listener;
        }
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,addPostAuthenticationHook,void addPostAuthenticationHook(Consumer<Token>),"[111, 113]","{'A35': [(111, 113)]}",{'A35': 1.0},A35,,"    public void addPostAuthenticationHook(Consumer<Token> postAuthenticateHook) {
        postAuthenticateHooks.add(postAuthenticateHook);
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,removePostAuthenticationHook,void removePostAuthenticationHook(Consumer<Token>),"[115, 117]","{'A35': [(115, 117)]}",{'A35': 1.0},A35,,"    public void removePostAuthenticationHook(Consumer<Token> postAuthenticateHook) {
        postAuthenticateHooks.remove(postAuthenticateHook);
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,getListener,AuthXEventListener getListener(),"[119, 121]","{'A35': [(119, 121)]}",{'A35': 1.0},A35,,"    public AuthXEventListener getListener() {
        return listener;
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/AuthXManager.java,AuthXManager,get,RedisCredentials get(),"[123, 126]","{'A35': [(123, 126)]}",{'A35': 1.0},A35,,"    @Override
    public RedisCredentials get() {
        return new TokenCredentials(this.currentToken);
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/TokenCredentials.java,TokenCredentials,getUser,String getUser(),"[15, 18]","{'A35': [(15, 18)]}",{'A35': 1.0},A35,,"    @Override
    public String getUser() {
        return user;
    }
"
redis.clients.jedis.authentication,../projects/jedis/src/main/java/redis/clients/jedis/authentication/TokenCredentials.java,TokenCredentials,getPassword,char[] getPassword(),"[20, 23]","{'A35': [(20, 23)]}",{'A35': 1.0},A35,,"    @Override
    public char[] getPassword() {
        return password;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,onMessage,"void onMessage(T,T)","[19, 20]","{'A1': [(19, 20)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public void onMessage(T channel, T message) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,onPMessage,"void onPMessage(T,T,T)","[22, 23]","{'A1': [(22, 23)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public void onPMessage(T pattern, T channel, T message) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,onSubscribe,"void onSubscribe(T,int)","[25, 26]","{'A1': [(25, 26)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public void onSubscribe(T channel, int subscribedChannels) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,onUnsubscribe,"void onUnsubscribe(T,int)","[28, 29]","{'A1': [(28, 29)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public void onUnsubscribe(T channel, int subscribedChannels) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,onPUnsubscribe,"void onPUnsubscribe(T,int)","[31, 32]","{'A1': [(31, 32)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public void onPUnsubscribe(T pattern, int subscribedChannels) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,onPSubscribe,"void onPSubscribe(T,int)","[34, 35]","{'A1': [(34, 35)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public void onPSubscribe(T pattern, int subscribedChannels) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,onPong,void onPong(T),"[37, 38]","{'A1': [(37, 38)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public void onPong(T pattern) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,sendAndFlushCommand,void sendAndFlushCommand(Command),"[40, 42]","{'A1': [(40, 40), (42, 42)], 'A35': [(41, 41)]}","{'A1': 0.6666666666666666, 'A35': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  private void sendAndFlushCommand(Command command, T... args) {
    authenticator.sendAndFlushCommand(command, args);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,unsubscribe,void unsubscribe(),"[44, 46]","{'A1': [(44, 46)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void unsubscribe() {
    sendAndFlushCommand(Command.UNSUBSCRIBE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,unsubscribe,void unsubscribe(),"[48, 50]","{'A1': [(48, 50)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void unsubscribe(T... channels) {
    sendAndFlushCommand(Command.UNSUBSCRIBE, channels);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,subscribe,void subscribe(),"[52, 55]","{'A1': [(52, 52), (54, 55)], 'A35': [(53, 53)]}","{'A1': 0.75, 'A35': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void subscribe(T... channels) {
    checkConnectionSuitableForPubSub();
    sendAndFlushCommand(Command.SUBSCRIBE, channels);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,psubscribe,void psubscribe(),"[57, 60]","{'A1': [(57, 57), (59, 60)], 'A35': [(58, 58)]}","{'A1': 0.75, 'A35': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void psubscribe(T... patterns) {
    checkConnectionSuitableForPubSub();
    sendAndFlushCommand(Command.PSUBSCRIBE, patterns);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,checkConnectionSuitableForPubSub,void checkConnectionSuitableForPubSub(),"[62, 68]","{'A35': [(62, 68)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  private void checkConnectionSuitableForPubSub() {
    if (authenticator.client.protocol != RedisProtocol.RESP3
        && authenticator.client.isTokenBasedAuthenticationEnabled()) {
      throw new JedisException(
          ""Blocking pub/sub operations are not supported on token-based authentication enabled connections with RESP2 protocol!"");
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,punsubscribe,void punsubscribe(),"[70, 72]","{'A1': [(70, 72)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void punsubscribe() {
    sendAndFlushCommand(Command.PUNSUBSCRIBE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,punsubscribe,void punsubscribe(),"[74, 76]","{'A1': [(74, 76)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void punsubscribe(T... patterns) {
    sendAndFlushCommand(Command.PUNSUBSCRIBE, patterns);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,ping,void ping(),"[78, 86]","{'A1': [(78, 78), (86, 86)], 'A35': [(79, 85)]}","{'A1': 0.2222222222222222, 'A35': 0.7777777777777778}",A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void ping() {
    authenticator.commandSync.lock();
    try {
      sendAndFlushCommand(Command.PING);
      authenticator.resultHandler.add(pingResultHandler);
    } finally {
      authenticator.commandSync.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,ping,void ping(T),"[88, 96]","{'A1': [(88, 88), (96, 96)], 'A35': [(89, 95)]}","{'A1': 0.2222222222222222, 'A35': 0.7777777777777778}",A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void ping(T argument) {
    authenticator.commandSync.lock();
    try {
      sendAndFlushCommand(Command.PING, argument);
      authenticator.resultHandler.add(pingResultHandler);
    } finally {
      authenticator.commandSync.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,isSubscribed,boolean isSubscribed(),"[98, 100]","{'A1': [(98, 100)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final boolean isSubscribed() {
    return subscribedChannels > 0;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,getSubscribedChannels,int getSubscribedChannels(),"[102, 104]","{'A1': [(102, 104)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final int getSubscribedChannels() {
    return subscribedChannels;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,proceed,void proceed(Connection),"[106, 115]","{'A1': [(106, 106), (109, 112), (114, 115)], 'A35': [(107, 108), (113, 113)]}","{'A1': 0.7, 'A35': 0.3}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void proceed(Connection client, T... channels) {
    authenticator.registerForAuthentication(client);
    authenticator.client.setTimeoutInfinite();
    try {
      subscribe(channels);
      process();
    } finally {
      authenticator.client.rollbackTimeout();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,proceedWithPatterns,void proceedWithPatterns(Connection),"[117, 126]","{'A1': [(117, 117), (120, 123), (125, 126)], 'A35': [(118, 119), (124, 124)]}","{'A1': 0.7, 'A35': 0.3}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  public final void proceedWithPatterns(Connection client, T... patterns) {
    authenticator.registerForAuthentication(client);
    authenticator.client.setTimeoutInfinite();
    try {
      psubscribe(patterns);
      process();
    } finally {
      authenticator.client.rollbackTimeout();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,process,void process(),"[131, 200]","{'A1': [(131, 133), (135, 187), (191, 191), (193, 195), (197, 197)], 'A35': [(134, 134), (188, 190), (192, 192), (198, 200)], 'A88': [(196, 196)]}","{'A1': 0.8714285714285714, 'A35': 0.11428571428571428, 'A88': 0.014285714285714285}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  private void process() {

    do {
      Object reply = authenticator.client.getUnflushedObject();

      if (reply instanceof List) {
        List<Object> listReply = (List<Object>) reply;
        final Object firstObj = listReply.get(0);
        if (!(firstObj instanceof byte[])) {
          throw new JedisException(""Unknown message type: "" + firstObj);
        }
        final byte[] resp = (byte[]) firstObj;
        if (Arrays.equals(SUBSCRIBE.getRaw(), resp)) {
          subscribedChannels = ((Long) listReply.get(2)).intValue();
          final byte[] bchannel = (byte[]) listReply.get(1);
          final T enchannel = (bchannel == null) ? null : encode(bchannel);
          onSubscribe(enchannel, subscribedChannels);
        } else if (Arrays.equals(UNSUBSCRIBE.getRaw(), resp)) {
          subscribedChannels = ((Long) listReply.get(2)).intValue();
          final byte[] bchannel = (byte[]) listReply.get(1);
          final T enchannel = (bchannel == null) ? null : encode(bchannel);
          onUnsubscribe(enchannel, subscribedChannels);
        } else if (Arrays.equals(MESSAGE.getRaw(), resp)) {
          final byte[] bchannel = (byte[]) listReply.get(1);
          final Object mesg = listReply.get(2);
          final T enchannel = (bchannel == null) ? null : encode(bchannel);
          if (mesg instanceof List) {
            ((List<byte[]>) mesg).forEach(bmesg -> onMessage(enchannel, encode(bmesg)));
          } else {
            onMessage(enchannel, (mesg == null) ? null : encode((byte[]) mesg));
          }
        } else if (Arrays.equals(PMESSAGE.getRaw(), resp)) {
          final byte[] bpattern = (byte[]) listReply.get(1);
          final byte[] bchannel = (byte[]) listReply.get(2);
          final byte[] bmesg = (byte[]) listReply.get(3);
          final T enpattern = (bpattern == null) ? null : encode(bpattern);
          final T enchannel = (bchannel == null) ? null : encode(bchannel);
          final T enmesg = (bmesg == null) ? null : encode(bmesg);
          onPMessage(enpattern, enchannel, enmesg);
        } else if (Arrays.equals(PSUBSCRIBE.getRaw(), resp)) {
          subscribedChannels = ((Long) listReply.get(2)).intValue();
          final byte[] bpattern = (byte[]) listReply.get(1);
          final T enpattern = (bpattern == null) ? null : encode(bpattern);
          onPSubscribe(enpattern, subscribedChannels);
        } else if (Arrays.equals(PUNSUBSCRIBE.getRaw(), resp)) {
          subscribedChannels = ((Long) listReply.get(2)).intValue();
          final byte[] bpattern = (byte[]) listReply.get(1);
          final T enpattern = (bpattern == null) ? null : encode(bpattern);
          onPUnsubscribe(enpattern, subscribedChannels);
        } else if (Arrays.equals(PONG.getRaw(), resp)) {
          final byte[] bpattern = (byte[]) listReply.get(1);
          final T enpattern = (bpattern == null) ? null : encode(bpattern);
          onPong(enpattern);
        } else {
          throw new JedisException(""Unknown message type: "" + firstObj);
        }
      } else if (reply instanceof byte[]) {
        Consumer<Object> resultHandler = authenticator.resultHandler.poll();
        if (resultHandler == null) {
          throw new JedisException(""Unexpected message : "" + SafeEncoder.encode((byte[]) reply));
        }
        resultHandler.accept(reply);
      } else {
        throw new JedisException(""Unknown message type: "" + reply);
      }
    } while (!Thread.currentThread().isInterrupted() && isSubscribed());

    //    /* Invalidate instance since this thread is no longer listening */
    //    this.client = null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisPubSubBase.java,JedisPubSubBase,processPingReply,void processPingReply(Object),"[202, 209]","{'A1': [(209, 209)], 'A35': [(202, 208)]}","{'A1': 0.125, 'A35': 0.875}",A35,../projects/jedis/src/test/java/redis/clients/jedis/JedisPubSubBaseTest.java,"  private void processPingReply(Object reply) {
    byte[] resp = (byte[]) reply;
    if (""PONG"".equals(SafeEncoder.encode(resp))) {
      onPong(null);
    } else {
      onPong(encode(resp));
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setProtocol,void setProtocol(RedisProtocol),"[41, 43]","{'A1': [(41, 43)]}",{'A1': 1.0},A1,,"  public final void setProtocol(RedisProtocol proto) {
    this.protocol = proto;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getProtocol,RedisProtocol getProtocol(),"[46, 48]","{'A1': [(46, 48)]}",{'A1': 1.0},A1,,"  protected RedisProtocol getProtocol() {
    return protocol;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setKeyArgumentPreProcessor,void setKeyArgumentPreProcessor(CommandKeyArgumentPreProcessor),"[56, 59]","{'A1': [(56, 59)]}",{'A1': 1.0},A1,,"  @Experimental
  void setKeyArgumentPreProcessor(CommandKeyArgumentPreProcessor keyPreProcessor) {
    this.keyPreProcessor = keyPreProcessor;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setBroadcastAndRoundRobinConfig,void setBroadcastAndRoundRobinConfig(JedisBroadcastAndRoundRobinConfig),"[61, 63]","{'A1': [(61, 63)]}",{'A1': 1.0},A1,,"  void setBroadcastAndRoundRobinConfig(JedisBroadcastAndRoundRobinConfig config) {
    this.broadcastAndRoundRobinConfig = config;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,commandArguments,CommandArguments commandArguments(ProtocolCommand),"[65, 69]","{'A1': [(65, 69)]}",{'A1': 1.0},A1,,"  protected CommandArguments commandArguments(ProtocolCommand command) {
    CommandArguments comArgs = new CommandArguments(command);
    if (keyPreProcessor != null) comArgs.setKeyArgumentPreProcessor(keyPreProcessor);
    return comArgs;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ping,CommandObject<String> ping(),"[73, 75]","{'A1': [(73, 75)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ping() {
    return PING_COMMAND_OBJECT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,flushAll,CommandObject<String> flushAll(),"[79, 81]","{'A1': [(79, 81)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> flushAll() {
    return FLUSHALL_COMMAND_OBJECT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,flushDB,CommandObject<String> flushDB(),"[85, 87]","{'A1': [(85, 87)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> flushDB() {
    return FLUSHDB_COMMAND_OBJECT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,configSet,"CommandObject<String> configSet(String,String)","[89, 91]","{'A1': [(89, 91)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> configSet(String parameter, String value) {
    return new CommandObject<>(commandArguments(Command.CONFIG).add(Keyword.SET).add(parameter).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,info,CommandObject<String> info(),"[96, 98]","{'A1': [(96, 98)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> info() {
    return INFO_COMMAND_OBJECT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,info,CommandObject<String> info(String),"[100, 102]","{'A1': [(100, 102)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> info(String section) {
    return new CommandObject<>(commandArguments(Command.INFO).add(section), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,exists,CommandObject<Boolean> exists(String),"[105, 107]","{'A1': [(105, 107)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> exists(String key) {
    return new CommandObject<>(commandArguments(Command.EXISTS).key(key), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,exists,CommandObject<Long> exists(),"[109, 111]","{'A1': [(109, 111)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> exists(String... keys) {
    return new CommandObject<>(commandArguments(Command.EXISTS).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,exists,CommandObject<Boolean> exists(byte[]),"[113, 115]","{'A1': [(113, 115)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> exists(byte[] key) {
    return new CommandObject<>(commandArguments(Command.EXISTS).key(key), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,exists,CommandObject<Long> exists(),"[117, 119]","{'A1': [(117, 119)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> exists(byte[]... keys) {
    return new CommandObject<>(commandArguments(Command.EXISTS).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,persist,CommandObject<Long> persist(String),"[121, 123]","{'A1': [(121, 123)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> persist(String key) {
    return new CommandObject<>(commandArguments(Command.PERSIST).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,persist,CommandObject<Long> persist(byte[]),"[125, 127]","{'A1': [(125, 127)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> persist(byte[] key) {
    return new CommandObject<>(commandArguments(Command.PERSIST).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,type,CommandObject<String> type(String),"[129, 131]","{'A1': [(129, 131)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> type(String key) {
    return new CommandObject<>(commandArguments(Command.TYPE).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,type,CommandObject<String> type(byte[]),"[133, 135]","{'A1': [(133, 135)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> type(byte[] key) {
    return new CommandObject<>(commandArguments(Command.TYPE).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,dump,CommandObject<byte[]> dump(String),"[137, 139]","{'A1': [(137, 139)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> dump(String key) {
    return new CommandObject<>(commandArguments(Command.DUMP).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,dump,CommandObject<byte[]> dump(byte[]),"[141, 143]","{'A1': [(141, 143)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> dump(byte[] key) {
    return new CommandObject<>(commandArguments(Command.DUMP).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,restore,"CommandObject<String> restore(String,long,byte[])","[145, 148]","{'A1': [(145, 148)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> restore(String key, long ttl, byte[] serializedValue) {
    return new CommandObject<>(commandArguments(RESTORE).key(key).add(ttl)
        .add(serializedValue), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,restore,"CommandObject<String> restore(String,long,byte[],RestoreParams)","[150, 153]","{'A1': [(150, 153)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> restore(String key, long ttl, byte[] serializedValue, RestoreParams params) {
    return new CommandObject<>(commandArguments(RESTORE).key(key).add(ttl)
        .add(serializedValue).addParams(params), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,restore,"CommandObject<String> restore(byte[],long,byte[])","[155, 158]","{'A1': [(155, 158)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> restore(byte[] key, long ttl, byte[] serializedValue) {
    return new CommandObject<>(commandArguments(RESTORE).key(key).add(ttl)
        .add(serializedValue), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,restore,"CommandObject<String> restore(byte[],long,byte[],RestoreParams)","[160, 163]","{'A1': [(160, 163)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> restore(byte[] key, long ttl, byte[] serializedValue, RestoreParams params) {
    return new CommandObject<>(commandArguments(RESTORE).key(key).add(ttl)
        .add(serializedValue).addParams(params), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expire,"CommandObject<Long> expire(String,long)","[165, 167]","{'A1': [(165, 167)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> expire(String key, long seconds) {
    return new CommandObject<>(commandArguments(EXPIRE).key(key).add(seconds), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expire,"CommandObject<Long> expire(byte[],long)","[169, 171]","{'A1': [(169, 171)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> expire(byte[] key, long seconds) {
    return new CommandObject<>(commandArguments(EXPIRE).key(key).add(seconds), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expire,"CommandObject<Long> expire(String,long,ExpiryOption)","[173, 176]","{'A12': [(173, 176)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> expire(String key, long seconds, ExpiryOption expiryOption) {
    return new CommandObject<>(commandArguments(EXPIRE).key(key).add(seconds).add(expiryOption),
        BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expire,"CommandObject<Long> expire(byte[],long,ExpiryOption)","[178, 181]","{'A12': [(178, 181)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> expire(byte[] key, long seconds, ExpiryOption expiryOption) {
    return new CommandObject<>(commandArguments(EXPIRE).key(key).add(seconds).add(expiryOption),
        BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpire,"CommandObject<Long> pexpire(String,long)","[183, 185]","{'A1': [(183, 185)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pexpire(String key, long milliseconds) {
    return new CommandObject<>(commandArguments(PEXPIRE).key(key).add(milliseconds), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpire,"CommandObject<Long> pexpire(byte[],long)","[187, 189]","{'A1': [(187, 189)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pexpire(byte[] key, long milliseconds) {
    return new CommandObject<>(commandArguments(PEXPIRE).key(key).add(milliseconds), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpire,"CommandObject<Long> pexpire(String,long,ExpiryOption)","[191, 194]","{'A12': [(191, 194)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> pexpire(String key, long milliseconds, ExpiryOption expiryOption) {
    return new CommandObject<>(commandArguments(PEXPIRE).key(key).add(milliseconds).add(expiryOption),
        BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpire,"CommandObject<Long> pexpire(byte[],long,ExpiryOption)","[196, 199]","{'A12': [(196, 199)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> pexpire(byte[] key, long milliseconds, ExpiryOption expiryOption) {
    return new CommandObject<>(commandArguments(PEXPIRE).key(key).add(milliseconds).add(expiryOption),
        BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expireTime,CommandObject<Long> expireTime(String),"[201, 203]","{'A12': [(201, 203)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> expireTime(String key) {
    return new CommandObject<>(commandArguments(EXPIRETIME).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expireTime,CommandObject<Long> expireTime(byte[]),"[205, 207]","{'A12': [(205, 207)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> expireTime(byte[] key) {
    return new CommandObject<>(commandArguments(EXPIRETIME).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpireTime,CommandObject<Long> pexpireTime(String),"[209, 211]","{'A12': [(209, 211)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> pexpireTime(String key) {
    return new CommandObject<>(commandArguments(PEXPIRETIME).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpireTime,CommandObject<Long> pexpireTime(byte[]),"[213, 215]","{'A12': [(213, 215)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> pexpireTime(byte[] key) {
    return new CommandObject<>(commandArguments(PEXPIRETIME).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expireAt,"CommandObject<Long> expireAt(String,long)","[217, 219]","{'A1': [(217, 219)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> expireAt(String key, long unixTime) {
    return new CommandObject<>(commandArguments(EXPIREAT).key(key).add(unixTime), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expireAt,"CommandObject<Long> expireAt(byte[],long)","[221, 223]","{'A1': [(221, 223)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> expireAt(byte[] key, long unixTime) {
    return new CommandObject<>(commandArguments(EXPIREAT).key(key).add(unixTime), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expireAt,"CommandObject<Long> expireAt(String,long,ExpiryOption)","[225, 227]","{'A12': [(225, 227)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> expireAt(String key, long unixTime, ExpiryOption expiryOption) {
    return new CommandObject<>(commandArguments(EXPIREAT).key(key).add(unixTime).add(expiryOption), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,expireAt,"CommandObject<Long> expireAt(byte[],long,ExpiryOption)","[229, 231]","{'A12': [(229, 231)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {
    return new CommandObject<>(commandArguments(EXPIREAT).key(key).add(unixTime).add(expiryOption), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpireAt,"CommandObject<Long> pexpireAt(String,long)","[233, 235]","{'A1': [(233, 235)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pexpireAt(String key, long millisecondsTimestamp) {
    return new CommandObject<>(commandArguments(PEXPIREAT).key(key).add(millisecondsTimestamp), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpireAt,"CommandObject<Long> pexpireAt(byte[],long)","[237, 239]","{'A1': [(237, 239)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pexpireAt(byte[] key, long millisecondsTimestamp) {
    return new CommandObject<>(commandArguments(PEXPIREAT).key(key).add(millisecondsTimestamp), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpireAt,"CommandObject<Long> pexpireAt(String,long,ExpiryOption)","[241, 244]","{'A12': [(241, 244)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> pexpireAt(String key, long millisecondsTimestamp, ExpiryOption expiryOption) {
    return new CommandObject<>(commandArguments(PEXPIREAT).key(key).add(millisecondsTimestamp).add(expiryOption),
        BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pexpireAt,"CommandObject<Long> pexpireAt(byte[],long,ExpiryOption)","[246, 249]","{'A12': [(246, 249)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> pexpireAt(byte[] key, long millisecondsTimestamp, ExpiryOption expiryOption) {
    return new CommandObject<>(commandArguments(PEXPIREAT).key(key).add(millisecondsTimestamp).add(expiryOption),
        BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ttl,CommandObject<Long> ttl(String),"[251, 253]","{'A1': [(251, 253)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> ttl(String key) {
    return new CommandObject<>(commandArguments(TTL).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ttl,CommandObject<Long> ttl(byte[]),"[255, 257]","{'A1': [(255, 257)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> ttl(byte[] key) {
    return new CommandObject<>(commandArguments(TTL).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pttl,CommandObject<Long> pttl(String),"[259, 261]","{'A1': [(259, 261)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pttl(String key) {
    return new CommandObject<>(commandArguments(PTTL).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pttl,CommandObject<Long> pttl(byte[]),"[263, 265]","{'A1': [(263, 265)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pttl(byte[] key) {
    return new CommandObject<>(commandArguments(PTTL).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,touch,CommandObject<Long> touch(String),"[267, 269]","{'A1': [(267, 269)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> touch(String key) {
    return new CommandObject<>(commandArguments(TOUCH).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,touch,CommandObject<Long> touch(),"[271, 273]","{'A1': [(271, 273)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> touch(String... keys) {
    return new CommandObject<>(commandArguments(TOUCH).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,touch,CommandObject<Long> touch(byte[]),"[275, 277]","{'A1': [(275, 277)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> touch(byte[] key) {
    return new CommandObject<>(commandArguments(TOUCH).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,touch,CommandObject<Long> touch(),"[279, 281]","{'A1': [(279, 281)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> touch(byte[]... keys) {
    return new CommandObject<>(commandArguments(TOUCH).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sort,CommandObject<List<String>> sort(String),"[283, 285]","{'A1': [(283, 285)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> sort(String key) {
    return new CommandObject<>(commandArguments(SORT).key(key), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sort,"CommandObject<List<String>> sort(String,SortingParams)","[287, 289]","{'A1': [(289, 289)], 'A12': [(287, 288)]}","{'A1': 0.3333333333333333, 'A12': 0.6666666666666666}",A12,,"  public final CommandObject<List<String>> sort(String key, SortingParams sortingParams) {
    return new CommandObject<>(commandArguments(SORT).key(key).addParams(sortingParams), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sort,CommandObject<List<byte[]>> sort(byte[]),"[291, 293]","{'A1': [(291, 293)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> sort(byte[] key) {
    return new CommandObject<>(commandArguments(SORT).key(key), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sort,"CommandObject<List<byte[]>> sort(byte[],SortingParams)","[295, 297]","{'A1': [(297, 297)], 'A12': [(295, 296)]}","{'A1': 0.3333333333333333, 'A12': 0.6666666666666666}",A12,,"  public final CommandObject<List<byte[]>> sort(byte[] key, SortingParams sortingParams) {
    return new CommandObject<>(commandArguments(SORT).key(key).addParams(sortingParams), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sort,"CommandObject<Long> sort(String,String)","[299, 302]","{'A1': [(299, 302)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sort(String key, String dstkey) {
    return new CommandObject<>(commandArguments(SORT).key(key)
        .add(STORE).key(dstkey), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sort,"CommandObject<Long> sort(String,SortingParams,String)","[304, 307]","{'A1': [(306, 307)], 'A12': [(304, 305)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Long> sort(String key, SortingParams sortingParams, String dstkey) {
    return new CommandObject<>(commandArguments(SORT).key(key).addParams(sortingParams)
        .add(STORE).key(dstkey), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sort,"CommandObject<Long> sort(byte[],byte[])","[309, 312]","{'A1': [(309, 312)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sort(byte[] key, byte[] dstkey) {
    return new CommandObject<>(commandArguments(SORT).key(key)
        .add(STORE).key(dstkey), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sort,"CommandObject<Long> sort(byte[],SortingParams,byte[])","[314, 317]","{'A1': [(316, 317)], 'A12': [(314, 315)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Long> sort(byte[] key, SortingParams sortingParams, byte[] dstkey) {
    return new CommandObject<>(commandArguments(SORT).key(key).addParams(sortingParams)
        .add(STORE).key(dstkey), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sortReadonly,"CommandObject<List<byte[]>> sortReadonly(byte[],SortingParams)","[319, 322]","{'A12': [(319, 322)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<byte[]>> sortReadonly(byte[] key, SortingParams sortingParams) {
    return new CommandObject<>(commandArguments(SORT_RO).key(key).addParams(sortingParams),
        BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sortReadonly,"CommandObject<List<String>> sortReadonly(String,SortingParams)","[324, 327]","{'A12': [(324, 327)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<String>> sortReadonly(String key, SortingParams sortingParams) {
    return new CommandObject<>(commandArguments(SORT_RO).key(key).addParams(sortingParams),
        BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,del,CommandObject<Long> del(String),"[329, 331]","{'A1': [(329, 331)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> del(String key) {
    return new CommandObject<>(commandArguments(DEL).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,del,CommandObject<Long> del(),"[333, 335]","{'A1': [(333, 335)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> del(String... keys) {
    return new CommandObject<>(commandArguments(DEL).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,del,CommandObject<Long> del(byte[]),"[337, 339]","{'A1': [(337, 339)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> del(byte[] key) {
    return new CommandObject<>(commandArguments(DEL).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,del,CommandObject<Long> del(),"[341, 343]","{'A1': [(341, 343)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> del(byte[]... keys) {
    return new CommandObject<>(commandArguments(DEL).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,unlink,CommandObject<Long> unlink(String),"[345, 347]","{'A1': [(345, 347)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> unlink(String key) {
    return new CommandObject<>(commandArguments(UNLINK).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,unlink,CommandObject<Long> unlink(),"[349, 351]","{'A1': [(349, 351)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> unlink(String... keys) {
    return new CommandObject<>(commandArguments(UNLINK).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,unlink,CommandObject<Long> unlink(byte[]),"[353, 355]","{'A1': [(353, 355)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> unlink(byte[] key) {
    return new CommandObject<>(commandArguments(UNLINK).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,unlink,CommandObject<Long> unlink(),"[357, 359]","{'A1': [(357, 359)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> unlink(byte[]... keys) {
    return new CommandObject<>(commandArguments(UNLINK).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,copy,"CommandObject<Boolean> copy(String,String,boolean)","[361, 367]","{'A1': [(361, 367)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> copy(String srcKey, String dstKey, boolean replace) {
    CommandArguments args = commandArguments(Command.COPY).key(srcKey).key(dstKey);
    if (replace) {
      args.add(REPLACE);
    }
    return new CommandObject<>(args, BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,copy,"CommandObject<Boolean> copy(byte[],byte[],boolean)","[369, 375]","{'A1': [(369, 375)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> copy(byte[] srcKey, byte[] dstKey, boolean replace) {
    CommandArguments args = commandArguments(Command.COPY).key(srcKey).key(dstKey);
    if (replace) {
      args.add(REPLACE);
    }
    return new CommandObject<>(args, BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rename,"CommandObject<String> rename(String,String)","[377, 379]","{'A1': [(377, 379)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> rename(String oldkey, String newkey) {
    return new CommandObject<>(commandArguments(RENAME).key(oldkey).key(newkey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,renamenx,"CommandObject<Long> renamenx(String,String)","[381, 383]","{'A1': [(381, 383)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> renamenx(String oldkey, String newkey) {
    return new CommandObject<>(commandArguments(RENAMENX).key(oldkey).key(newkey), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rename,"CommandObject<String> rename(byte[],byte[])","[385, 387]","{'A1': [(385, 387)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> rename(byte[] oldkey, byte[] newkey) {
    return new CommandObject<>(commandArguments(RENAME).key(oldkey).key(newkey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,renamenx,"CommandObject<Long> renamenx(byte[],byte[])","[389, 391]","{'A1': [(389, 391)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> renamenx(byte[] oldkey, byte[] newkey) {
    return new CommandObject<>(commandArguments(RENAMENX).key(oldkey).key(newkey), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,dbSize,CommandObject<Long> dbSize(),"[393, 395]","{'A1': [(393, 395)]}",{'A1': 1.0},A1,,"  public CommandObject<Long> dbSize() {
    return new CommandObject<>(commandArguments(DBSIZE), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,keys,CommandObject<Set<String>> keys(String),"[397, 400]","{'A1': [(397, 400)]}",{'A1': 1.0},A1,,"  public CommandObject<Set<String>> keys(String pattern) {
    CommandArguments args = commandArguments(Command.KEYS).key(pattern);
    return new CommandObject<>(args, BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,keys,CommandObject<Set<byte[]>> keys(byte[]),"[402, 405]","{'A1': [(402, 405)]}",{'A1': 1.0},A1,,"  public CommandObject<Set<byte[]>> keys(byte[] pattern) {
    CommandArguments args = commandArguments(Command.KEYS).key(pattern);
    return new CommandObject<>(args, BuilderFactory.BINARY_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scan,CommandObject<ScanResult<String>> scan(String),"[407, 409]","{'A1': [(407, 409)]}",{'A1': 1.0},A1,,"  public CommandObject<ScanResult<String>> scan(String cursor) {
    return new CommandObject<>(commandArguments(SCAN).add(cursor), BuilderFactory.SCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scan,"CommandObject<ScanResult<String>> scan(String,ScanParams)","[411, 413]","{'A1': [(411, 413)]}",{'A1': 1.0},A1,,"  public CommandObject<ScanResult<String>> scan(String cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params), BuilderFactory.SCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scan,"CommandObject<ScanResult<String>> scan(String,ScanParams,String)","[415, 417]","{'A1': [(415, 417)]}",{'A1': 1.0},A1,,"  public CommandObject<ScanResult<String>> scan(String cursor, ScanParams params, String type) {
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).add(Keyword.TYPE).add(type), BuilderFactory.SCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scan,CommandObject<ScanResult<byte[]>> scan(byte[]),"[419, 421]","{'A1': [(419, 421)]}",{'A1': 1.0},A1,,"  public CommandObject<ScanResult<byte[]>> scan(byte[] cursor) {
    return new CommandObject<>(commandArguments(SCAN).add(cursor), BuilderFactory.SCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scan,"CommandObject<ScanResult<byte[]>> scan(byte[],ScanParams)","[423, 425]","{'A1': [(423, 425)]}",{'A1': 1.0},A1,,"  public CommandObject<ScanResult<byte[]>> scan(byte[] cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params), BuilderFactory.SCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scan,"CommandObject<ScanResult<byte[]>> scan(byte[],ScanParams,byte[])","[427, 429]","{'A1': [(427, 429)]}",{'A1': 1.0},A1,,"  public CommandObject<ScanResult<byte[]>> scan(byte[] cursor, ScanParams params, byte[] type) {
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).add(Keyword.TYPE).add(type), BuilderFactory.SCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,randomKey,CommandObject<String> randomKey(),"[431, 433]","{'A1': [(431, 433)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> randomKey() {
    return new CommandObject<>(commandArguments(RANDOMKEY), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,randomBinaryKey,CommandObject<byte[]> randomBinaryKey(),"[435, 437]","{'A1': [(435, 437)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> randomBinaryKey() {
    return new CommandObject<>(commandArguments(RANDOMKEY), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,set,"CommandObject<String> set(String,String)","[441, 443]","{'A1': [(441, 443)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> set(String key, String value) {
    return new CommandObject<>(commandArguments(Command.SET).key(key).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,set,"CommandObject<String> set(String,String,SetParams)","[445, 447]","{'A1': [(445, 447)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> set(String key, String value, SetParams params) {
    return new CommandObject<>(commandArguments(Command.SET).key(key).add(value).addParams(params), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,set,"CommandObject<String> set(byte[],byte[])","[449, 451]","{'A1': [(449, 451)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> set(byte[] key, byte[] value) {
    return new CommandObject<>(commandArguments(Command.SET).key(key).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,set,"CommandObject<String> set(byte[],byte[],SetParams)","[453, 455]","{'A1': [(453, 455)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> set(byte[] key, byte[] value, SetParams params) {
    return new CommandObject<>(commandArguments(Command.SET).key(key).add(value).addParams(params), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,get,CommandObject<String> get(String),"[457, 459]","{'A1': [(457, 459)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> get(String key) {
    return new CommandObject<>(commandArguments(Command.GET).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setGet,"CommandObject<String> setGet(String,String)","[461, 463]","{'A1': [(461, 463)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> setGet(String key, String value) {
    return new CommandObject<>(commandArguments(Command.SET).key(key).add(value).add(Keyword.GET), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setGet,"CommandObject<String> setGet(String,String,SetParams)","[465, 468]","{'A1': [(465, 468)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> setGet(String key, String value, SetParams params) {
    return new CommandObject<>(commandArguments(Command.SET).key(key).add(value).addParams(params).add(Keyword.GET),
        BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getDel,CommandObject<String> getDel(String),"[470, 472]","{'A1': [(470, 472)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> getDel(String key) {
    return new CommandObject<>(commandArguments(Command.GETDEL).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getEx,"CommandObject<String> getEx(String,GetExParams)","[474, 476]","{'A1': [(474, 476)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> getEx(String key, GetExParams params) {
    return new CommandObject<>(commandArguments(Command.GETEX).key(key).addParams(params), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,get,CommandObject<byte[]> get(byte[]),"[478, 480]","{'A1': [(478, 480)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> get(byte[] key) {
    return new CommandObject<>(commandArguments(Command.GET).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setGet,"CommandObject<byte[]> setGet(byte[],byte[])","[482, 484]","{'A1': [(482, 484)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> setGet(byte[] key, byte[] value) {
    return new CommandObject<>(commandArguments(Command.SET).key(key).add(value).add(Keyword.GET), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setGet,"CommandObject<byte[]> setGet(byte[],byte[],SetParams)","[486, 489]","{'A1': [(486, 489)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> setGet(byte[] key, byte[] value, SetParams params) {
    return new CommandObject<>(commandArguments(Command.SET).key(key).add(value).addParams(params).add(Keyword.GET),
        BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getDel,CommandObject<byte[]> getDel(byte[]),"[491, 493]","{'A1': [(491, 493)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> getDel(byte[] key) {
    return new CommandObject<>(commandArguments(Command.GETDEL).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getEx,"CommandObject<byte[]> getEx(byte[],GetExParams)","[495, 497]","{'A1': [(495, 497)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> getEx(byte[] key, GetExParams params) {
    return new CommandObject<>(commandArguments(Command.GETEX).key(key).addParams(params), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getSet,"CommandObject<String> getSet(String,String)","[502, 505]","{'A1': [(502, 505)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<String> getSet(String key, String value) {
    return new CommandObject<>(commandArguments(Command.GETSET).key(key).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getSet,"CommandObject<byte[]> getSet(byte[],byte[])","[510, 513]","{'A1': [(510, 513)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<byte[]> getSet(byte[] key, byte[] value) {
    return new CommandObject<>(commandArguments(Command.GETSET).key(key).add(value), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setnx,"CommandObject<Long> setnx(String,String)","[515, 517]","{'A1': [(515, 517)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> setnx(String key, String value) {
    return new CommandObject<>(commandArguments(SETNX).key(key).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setex,"CommandObject<String> setex(String,long,String)","[519, 521]","{'A1': [(519, 521)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> setex(String key, long seconds, String value) {
    return new CommandObject<>(commandArguments(SETEX).key(key).add(seconds).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,psetex,"CommandObject<String> psetex(String,long,String)","[523, 525]","{'A1': [(523, 525)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> psetex(String key, long milliseconds, String value) {
    return new CommandObject<>(commandArguments(PSETEX).key(key).add(milliseconds).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setnx,"CommandObject<Long> setnx(byte[],byte[])","[527, 529]","{'A1': [(527, 529)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> setnx(byte[] key, byte[] value) {
    return new CommandObject<>(commandArguments(SETNX).key(key).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setex,"CommandObject<String> setex(byte[],long,byte[])","[531, 533]","{'A1': [(531, 533)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> setex(byte[] key, long seconds, byte[] value) {
    return new CommandObject<>(commandArguments(SETEX).key(key).add(seconds).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,psetex,"CommandObject<String> psetex(byte[],long,byte[])","[535, 537]","{'A1': [(535, 537)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> psetex(byte[] key, long milliseconds, byte[] value) {
    return new CommandObject<>(commandArguments(PSETEX).key(key).add(milliseconds).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setbit,"CommandObject<Boolean> setbit(String,long,boolean)","[539, 541]","{'A1': [(539, 541)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> setbit(String key, long offset, boolean value) {
    return new CommandObject<>(commandArguments(SETBIT).key(key).add(offset).add(value), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setbit,"CommandObject<Boolean> setbit(byte[],long,boolean)","[543, 545]","{'A1': [(543, 545)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> setbit(byte[] key, long offset, boolean value) {
    return new CommandObject<>(commandArguments(SETBIT).key(key).add(offset).add(value), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getbit,"CommandObject<Boolean> getbit(String,long)","[547, 549]","{'A1': [(547, 549)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> getbit(String key, long offset) {
    return new CommandObject<>(commandArguments(GETBIT).key(key).add(offset), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getbit,"CommandObject<Boolean> getbit(byte[],long)","[551, 553]","{'A1': [(551, 553)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> getbit(byte[] key, long offset) {
    return new CommandObject<>(commandArguments(GETBIT).key(key).add(offset), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setrange,"CommandObject<Long> setrange(String,long,String)","[555, 557]","{'A1': [(555, 557)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> setrange(String key, long offset, String value) {
    return new CommandObject<>(commandArguments(SETRANGE).key(key).add(offset).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setrange,"CommandObject<Long> setrange(byte[],long,byte[])","[559, 561]","{'A1': [(559, 561)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> setrange(byte[] key, long offset, byte[] value) {
    return new CommandObject<>(commandArguments(SETRANGE).key(key).add(offset).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getrange,"CommandObject<String> getrange(String,long,long)","[563, 565]","{'A1': [(563, 565)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> getrange(String key, long startOffset, long endOffset) {
    return new CommandObject<>(commandArguments(GETRANGE).key(key).add(startOffset).add(endOffset), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getrange,"CommandObject<byte[]> getrange(byte[],long,long)","[567, 569]","{'A1': [(567, 569)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> getrange(byte[] key, long startOffset, long endOffset) {
    return new CommandObject<>(commandArguments(GETRANGE).key(key).add(startOffset).add(endOffset), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,mget,CommandObject<List<String>> mget(),"[571, 573]","{'A1': [(571, 573)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> mget(String... keys) {
    return new CommandObject<>(commandArguments(MGET).keys((Object[]) keys), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,mget,CommandObject<List<byte[]>> mget(),"[575, 577]","{'A1': [(575, 577)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> mget(byte[]... keys) {
    return new CommandObject<>(commandArguments(MGET).keys((Object[]) keys), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,mset,CommandObject<String> mset(),"[579, 581]","{'A1': [(579, 581)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> mset(String... keysvalues) {
    return new CommandObject<>(addFlatKeyValueArgs(commandArguments(MSET), keysvalues), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,msetnx,CommandObject<Long> msetnx(),"[583, 585]","{'A1': [(583, 585)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> msetnx(String... keysvalues) {
    return new CommandObject<>(addFlatKeyValueArgs(commandArguments(MSETNX), keysvalues), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,mset,CommandObject<String> mset(),"[587, 589]","{'A1': [(587, 589)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> mset(byte[]... keysvalues) {
    return new CommandObject<>(addFlatKeyValueArgs(commandArguments(MSET), keysvalues), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,msetnx,CommandObject<Long> msetnx(),"[591, 593]","{'A1': [(591, 593)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> msetnx(byte[]... keysvalues) {
    return new CommandObject<>(addFlatKeyValueArgs(commandArguments(MSETNX), keysvalues), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,incr,CommandObject<Long> incr(String),"[595, 597]","{'A1': [(595, 597)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> incr(String key) {
    return new CommandObject<>(commandArguments(Command.INCR).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,incrBy,"CommandObject<Long> incrBy(String,long)","[599, 601]","{'A1': [(599, 601)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> incrBy(String key, long increment) {
    return new CommandObject<>(commandArguments(INCRBY).key(key).add(increment), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,incrByFloat,"CommandObject<Double> incrByFloat(String,double)","[603, 605]","{'A1': [(603, 605)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> incrByFloat(String key, double increment) {
    return new CommandObject<>(commandArguments(INCRBYFLOAT).key(key).add(increment), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,incr,CommandObject<Long> incr(byte[]),"[607, 609]","{'A1': [(607, 609)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> incr(byte[] key) {
    return new CommandObject<>(commandArguments(Command.INCR).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,incrBy,"CommandObject<Long> incrBy(byte[],long)","[611, 613]","{'A1': [(611, 613)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> incrBy(byte[] key, long increment) {
    return new CommandObject<>(commandArguments(INCRBY).key(key).add(increment), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,incrByFloat,"CommandObject<Double> incrByFloat(byte[],double)","[615, 617]","{'A1': [(615, 617)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> incrByFloat(byte[] key, double increment) {
    return new CommandObject<>(commandArguments(INCRBYFLOAT).key(key).add(increment), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,decr,CommandObject<Long> decr(String),"[619, 621]","{'A1': [(619, 621)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> decr(String key) {
    return new CommandObject<>(commandArguments(DECR).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,decrBy,"CommandObject<Long> decrBy(String,long)","[623, 625]","{'A1': [(623, 625)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> decrBy(String key, long decrement) {
    return new CommandObject<>(commandArguments(DECRBY).key(key).add(decrement), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,decr,CommandObject<Long> decr(byte[]),"[627, 629]","{'A1': [(627, 629)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> decr(byte[] key) {
    return new CommandObject<>(commandArguments(DECR).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,decrBy,"CommandObject<Long> decrBy(byte[],long)","[631, 633]","{'A1': [(631, 633)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> decrBy(byte[] key, long decrement) {
    return new CommandObject<>(commandArguments(DECRBY).key(key).add(decrement), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,append,"CommandObject<Long> append(String,String)","[635, 637]","{'A1': [(635, 637)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> append(String key, String value) {
    return new CommandObject<>(commandArguments(APPEND).key(key).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,append,"CommandObject<Long> append(byte[],byte[])","[639, 641]","{'A1': [(639, 641)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> append(byte[] key, byte[] value) {
    return new CommandObject<>(commandArguments(APPEND).key(key).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,substr,"CommandObject<String> substr(String,int,int)","[643, 645]","{'A1': [(643, 645)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> substr(String key, int start, int end) {
    return new CommandObject<>(commandArguments(SUBSTR).key(key).add(start).add(end), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,substr,"CommandObject<byte[]> substr(byte[],int,int)","[647, 649]","{'A1': [(647, 649)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> substr(byte[] key, int start, int end) {
    return new CommandObject<>(commandArguments(SUBSTR).key(key).add(start).add(end), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,strlen,CommandObject<Long> strlen(String),"[651, 653]","{'A1': [(651, 653)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> strlen(String key) {
    return new CommandObject<>(commandArguments(STRLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,strlen,CommandObject<Long> strlen(byte[]),"[655, 657]","{'A1': [(655, 657)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> strlen(byte[] key) {
    return new CommandObject<>(commandArguments(STRLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitcount,CommandObject<Long> bitcount(String),"[659, 661]","{'A1': [(659, 661)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitcount(String key) {
    return new CommandObject<>(commandArguments(BITCOUNT).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitcount,"CommandObject<Long> bitcount(String,long,long)","[663, 665]","{'A1': [(663, 665)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitcount(String key, long start, long end) {
    return new CommandObject<>(commandArguments(BITCOUNT).key(key).add(start).add(end), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitcount,"CommandObject<Long> bitcount(String,long,long,BitCountOption)","[667, 669]","{'A1': [(667, 669)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitcount(String key, long start, long end, BitCountOption option) {
    return new CommandObject<>(commandArguments(BITCOUNT).key(key).add(start).add(end).add(option), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitcount,CommandObject<Long> bitcount(byte[]),"[671, 673]","{'A1': [(671, 673)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitcount(byte[] key) {
    return new CommandObject<>(commandArguments(BITCOUNT).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitcount,"CommandObject<Long> bitcount(byte[],long,long)","[675, 677]","{'A1': [(675, 677)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitcount(byte[] key, long start, long end) {
    return new CommandObject<>(commandArguments(BITCOUNT).key(key).add(start).add(end), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitcount,"CommandObject<Long> bitcount(byte[],long,long,BitCountOption)","[679, 681]","{'A26': [(679, 681)]}",{'A26': 1.0},A26,,"  public final CommandObject<Long> bitcount(byte[] key, long start, long end, BitCountOption option) {
    return new CommandObject<>(commandArguments(BITCOUNT).key(key).add(start).add(end).add(option), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitpos,"CommandObject<Long> bitpos(String,boolean)","[683, 685]","{'A1': [(683, 685)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitpos(String key, boolean value) {
    return new CommandObject<>(commandArguments(BITPOS).key(key).add(value ? 1 : 0), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitpos,"CommandObject<Long> bitpos(String,boolean,BitPosParams)","[687, 689]","{'A1': [(687, 689)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitpos(String key, boolean value, BitPosParams params) {
    return new CommandObject<>(commandArguments(BITPOS).key(key).add(value ? 1 : 0).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitpos,"CommandObject<Long> bitpos(byte[],boolean)","[691, 693]","{'A1': [(691, 693)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitpos(byte[] key, boolean value) {
    return new CommandObject<>(commandArguments(BITPOS).key(key).add(value ? 1 : 0), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitpos,"CommandObject<Long> bitpos(byte[],boolean,BitPosParams)","[695, 697]","{'A1': [(695, 697)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitpos(byte[] key, boolean value, BitPosParams params) {
    return new CommandObject<>(commandArguments(BITPOS).key(key).add(value ? 1 : 0).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitfield,CommandObject<List<Long>> bitfield(String),"[699, 701]","{'A1': [(699, 701)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> bitfield(String key, String... arguments) {
    return new CommandObject<>(commandArguments(BITFIELD).key(key).addObjects((Object[]) arguments), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitfieldReadonly,CommandObject<List<Long>> bitfieldReadonly(String),"[703, 705]","{'A1': [(703, 705)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> bitfieldReadonly(String key, String... arguments) {
    return new CommandObject<>(commandArguments(BITFIELD_RO).key(key).addObjects((Object[]) arguments), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitfield,CommandObject<List<Long>> bitfield(byte[]),"[707, 709]","{'A1': [(707, 709)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> bitfield(byte[] key, byte[]... arguments) {
    return new CommandObject<>(commandArguments(BITFIELD).key(key).addObjects((Object[]) arguments), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitfieldReadonly,CommandObject<List<Long>> bitfieldReadonly(byte[]),"[711, 713]","{'A1': [(711, 713)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> bitfieldReadonly(byte[] key, byte[]... arguments) {
    return new CommandObject<>(commandArguments(BITFIELD_RO).key(key).addObjects((Object[]) arguments), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitop,"CommandObject<Long> bitop(BitOP,String)","[715, 717]","{'A1': [(715, 717)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitop(BitOP op, String destKey, String... srcKeys) {
    return new CommandObject<>(commandArguments(BITOP).add(op).key(destKey).keys((Object[]) srcKeys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bitop,"CommandObject<Long> bitop(BitOP,byte[])","[719, 721]","{'A1': [(719, 721)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bitop(BitOP op, byte[] destKey, byte[]... srcKeys) {
    return new CommandObject<>(commandArguments(BITOP).add(op).key(destKey).keys((Object[]) srcKeys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lcs,"CommandObject<LCSMatchResult> lcs(String,String,LCSParams)","[723, 726]","{'A12': [(723, 726)]}",{'A12': 1.0},A12,,"  public final CommandObject<LCSMatchResult> lcs(String keyA, String keyB, LCSParams params) {
    return new CommandObject<>(commandArguments(Command.LCS).key(keyA).key(keyB)
        .addParams(params), BuilderFactory.STR_ALGO_LCS_RESULT_BUILDER);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lcs,"CommandObject<LCSMatchResult> lcs(byte[],byte[],LCSParams)","[728, 731]","{'A12': [(728, 731)]}",{'A12': 1.0},A12,,"  public final CommandObject<LCSMatchResult> lcs(byte[] keyA, byte[] keyB, LCSParams params) {
    return new CommandObject<>(commandArguments(Command.LCS).key(keyA).key(keyB)
        .addParams(params), BuilderFactory.STR_ALGO_LCS_RESULT_BUILDER);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpush,CommandObject<Long> rpush(String),"[735, 737]","{'A1': [(735, 737)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> rpush(String key, String... strings) {
    return new CommandObject<>(commandArguments(RPUSH).key(key).addObjects((Object[]) strings), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpush,CommandObject<Long> rpush(byte[]),"[739, 741]","{'A1': [(739, 741)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> rpush(byte[] key, byte[]... strings) {
    return new CommandObject<>(commandArguments(RPUSH).key(key).addObjects((Object[]) strings), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpush,CommandObject<Long> lpush(String),"[743, 745]","{'A1': [(743, 745)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> lpush(String key, String... strings) {
    return new CommandObject<>(commandArguments(LPUSH).key(key).addObjects((Object[]) strings), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpush,CommandObject<Long> lpush(byte[]),"[747, 749]","{'A1': [(747, 749)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> lpush(byte[] key, byte[]... strings) {
    return new CommandObject<>(commandArguments(LPUSH).key(key).addObjects((Object[]) strings), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,llen,CommandObject<Long> llen(String),"[751, 753]","{'A1': [(751, 753)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> llen(String key) {
    return new CommandObject<>(commandArguments(LLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,llen,CommandObject<Long> llen(byte[]),"[755, 757]","{'A1': [(755, 757)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> llen(byte[] key) {
    return new CommandObject<>(commandArguments(LLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lrange,"CommandObject<List<String>> lrange(String,long,long)","[759, 761]","{'A1': [(759, 761)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> lrange(String key, long start, long stop) {
    return new CommandObject<>(commandArguments(LRANGE).key(key).add(start).add(stop), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lrange,"CommandObject<List<byte[]>> lrange(byte[],long,long)","[763, 765]","{'A1': [(763, 765)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> lrange(byte[] key, long start, long stop) {
    return new CommandObject<>(commandArguments(LRANGE).key(key).add(start).add(stop), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ltrim,"CommandObject<String> ltrim(String,long,long)","[767, 769]","{'A1': [(767, 769)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ltrim(String key, long start, long stop) {
    return new CommandObject<>(commandArguments(LTRIM).key(key).add(start).add(stop), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ltrim,"CommandObject<String> ltrim(byte[],long,long)","[771, 773]","{'A1': [(771, 773)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ltrim(byte[] key, long start, long stop) {
    return new CommandObject<>(commandArguments(LTRIM).key(key).add(start).add(stop), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lindex,"CommandObject<String> lindex(String,long)","[775, 777]","{'A1': [(775, 777)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> lindex(String key, long index) {
    return new CommandObject<>(commandArguments(LINDEX).key(key).add(index), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lindex,"CommandObject<byte[]> lindex(byte[],long)","[779, 781]","{'A1': [(779, 781)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> lindex(byte[] key, long index) {
    return new CommandObject<>(commandArguments(LINDEX).key(key).add(index), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lset,"CommandObject<String> lset(String,long,String)","[783, 785]","{'A1': [(783, 785)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> lset(String key, long index, String value) {
    return new CommandObject<>(commandArguments(LSET).key(key).add(index).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lset,"CommandObject<String> lset(byte[],long,byte[])","[787, 789]","{'A1': [(787, 789)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> lset(byte[] key, long index, byte[] value) {
    return new CommandObject<>(commandArguments(LSET).key(key).add(index).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lrem,"CommandObject<Long> lrem(String,long,String)","[791, 793]","{'A1': [(791, 793)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> lrem(String key, long count, String value) {
    return new CommandObject<>(commandArguments(LREM).key(key).add(count).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lrem,"CommandObject<Long> lrem(byte[],long,byte[])","[795, 797]","{'A1': [(795, 797)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> lrem(byte[] key, long count, byte[] value) {
    return new CommandObject<>(commandArguments(LREM).key(key).add(count).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpop,CommandObject<String> lpop(String),"[799, 801]","{'A1': [(799, 801)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> lpop(String key) {
    return new CommandObject<>(commandArguments(LPOP).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpop,"CommandObject<List<String>> lpop(String,int)","[803, 805]","{'A1': [(803, 805)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> lpop(String key, int count) {
    return new CommandObject<>(commandArguments(LPOP).key(key).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpop,CommandObject<byte[]> lpop(byte[]),"[807, 809]","{'A1': [(807, 809)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> lpop(byte[] key) {
    return new CommandObject<>(commandArguments(LPOP).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpop,"CommandObject<List<byte[]>> lpop(byte[],int)","[811, 813]","{'A1': [(811, 813)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> lpop(byte[] key, int count) {
    return new CommandObject<>(commandArguments(LPOP).key(key).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpop,CommandObject<String> rpop(String),"[815, 817]","{'A1': [(815, 817)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> rpop(String key) {
    return new CommandObject<>(commandArguments(RPOP).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpop,"CommandObject<List<String>> rpop(String,int)","[819, 821]","{'A1': [(819, 821)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> rpop(String key, int count) {
    return new CommandObject<>(commandArguments(RPOP).key(key).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpop,CommandObject<byte[]> rpop(byte[]),"[823, 825]","{'A1': [(823, 825)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> rpop(byte[] key) {
    return new CommandObject<>(commandArguments(RPOP).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpop,"CommandObject<List<byte[]>> rpop(byte[],int)","[827, 829]","{'A1': [(827, 829)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> rpop(byte[] key, int count) {
    return new CommandObject<>(commandArguments(RPOP).key(key).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpos,"CommandObject<Long> lpos(String,String)","[831, 833]","{'A1': [(831, 833)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> lpos(String key, String element) {
    return new CommandObject<>(commandArguments(LPOS).key(key).add(element), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpos,"CommandObject<Long> lpos(String,String,LPosParams)","[835, 837]","{'A1': [(835, 837)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> lpos(String key, String element, LPosParams params) {
    return new CommandObject<>(commandArguments(LPOS).key(key).add(element).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpos,"CommandObject<List<Long>> lpos(String,String,LPosParams,long)","[839, 842]","{'A1': [(839, 842)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> lpos(String key, String element, LPosParams params, long count) {
    return new CommandObject<>(commandArguments(LPOS).key(key).add(element)
        .addParams(params).add(COUNT).add(count), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpos,"CommandObject<Long> lpos(byte[],byte[])","[844, 846]","{'A1': [(844, 846)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> lpos(byte[] key, byte[] element) {
    return new CommandObject<>(commandArguments(LPOS).key(key).add(element), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpos,"CommandObject<Long> lpos(byte[],byte[],LPosParams)","[848, 850]","{'A1': [(848, 850)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> lpos(byte[] key, byte[] element, LPosParams params) {
    return new CommandObject<>(commandArguments(LPOS).key(key).add(element).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpos,"CommandObject<List<Long>> lpos(byte[],byte[],LPosParams,long)","[852, 855]","{'A1': [(852, 855)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> lpos(byte[] key, byte[] element, LPosParams params, long count) {
    return new CommandObject<>(commandArguments(LPOS).key(key).add(element)
        .addParams(params).add(COUNT).add(count), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,linsert,"CommandObject<Long> linsert(String,ListPosition,String,String)","[857, 860]","{'A1': [(857, 860)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> linsert(String key, ListPosition where, String pivot, String value) {
    return new CommandObject<>(commandArguments(LINSERT).key(key).add(where)
        .add(pivot).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,linsert,"CommandObject<Long> linsert(byte[],ListPosition,byte[],byte[])","[862, 865]","{'A1': [(862, 865)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> linsert(byte[] key, ListPosition where, byte[] pivot, byte[] value) {
    return new CommandObject<>(commandArguments(LINSERT).key(key).add(where)
        .add(pivot).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpushx,CommandObject<Long> lpushx(String),"[867, 869]","{'A1': [(869, 869)], 'A12': [(867, 868)]}","{'A1': 0.3333333333333333, 'A12': 0.6666666666666666}",A12,,"  public final CommandObject<Long> lpushx(String key, String... strings) {
    return new CommandObject<>(commandArguments(LPUSHX).key(key).addObjects((Object[]) strings), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpushx,CommandObject<Long> rpushx(String),"[871, 873]","{'A1': [(873, 873)], 'A12': [(871, 872)]}","{'A1': 0.3333333333333333, 'A12': 0.6666666666666666}",A12,,"  public final CommandObject<Long> rpushx(String key, String... strings) {
    return new CommandObject<>(commandArguments(RPUSHX).key(key).addObjects((Object[]) strings), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lpushx,CommandObject<Long> lpushx(byte[]),"[875, 877]","{'A1': [(877, 877)], 'A12': [(875, 876)]}","{'A1': 0.3333333333333333, 'A12': 0.6666666666666666}",A12,,"  public final CommandObject<Long> lpushx(byte[] key, byte[]... args) {
    return new CommandObject<>(commandArguments(LPUSHX).key(key).addObjects((Object[]) args), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpushx,CommandObject<Long> rpushx(byte[]),"[879, 881]","{'A1': [(881, 881)], 'A12': [(879, 880)]}","{'A1': 0.3333333333333333, 'A12': 0.6666666666666666}",A12,,"  public final CommandObject<Long> rpushx(byte[] key, byte[]... args) {
    return new CommandObject<>(commandArguments(RPUSHX).key(key).addObjects((Object[]) args), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blpop,"CommandObject<List<String>> blpop(int,String)","[883, 885]","{'A1': [(883, 885)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> blpop(int timeout, String key) {
    return new CommandObject<>(commandArguments(BLPOP).blocking().key(key).add(timeout), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blpop,CommandObject<List<String>> blpop(int),"[887, 889]","{'A1': [(887, 889)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> blpop(int timeout, String... keys) {
    return new CommandObject<>(commandArguments(BLPOP).blocking().keys((Object[]) keys).add(timeout), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blpop,"CommandObject<KeyValue<String, String>> blpop(double,String)","[891, 893]","{'A1': [(891, 893)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, String>> blpop(double timeout, String key) {
    return new CommandObject<>(commandArguments(BLPOP).blocking().key(key).add(timeout), BuilderFactory.KEYED_ELEMENT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blpop,"CommandObject<KeyValue<String, String>> blpop(double)","[895, 897]","{'A1': [(895, 897)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, String>> blpop(double timeout, String... keys) {
    return new CommandObject<>(commandArguments(BLPOP).blocking().keys((Object[]) keys).add(timeout), BuilderFactory.KEYED_ELEMENT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blpop,CommandObject<List<byte[]>> blpop(int),"[899, 901]","{'A1': [(899, 901)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> blpop(int timeout, byte[]... keys) {
    return new CommandObject<>(commandArguments(BLPOP).blocking().keys((Object[]) keys).add(timeout), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blpop,"CommandObject<KeyValue<byte[], byte[]>> blpop(double)","[903, 905]","{'A1': [(903, 905)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], byte[]>> blpop(double timeout, byte[]... keys) {
    return new CommandObject<>(commandArguments(BLPOP).blocking().keys((Object[]) keys).add(timeout), BuilderFactory.BINARY_KEYED_ELEMENT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,brpop,"CommandObject<List<String>> brpop(int,String)","[907, 909]","{'A1': [(907, 909)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> brpop(int timeout, String key) {
    return new CommandObject<>(commandArguments(BRPOP).blocking().key(key).add(timeout), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,brpop,CommandObject<List<String>> brpop(int),"[911, 913]","{'A1': [(911, 913)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> brpop(int timeout, String... keys) {
    return new CommandObject<>(commandArguments(BRPOP).blocking().keys((Object[]) keys).add(timeout), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,brpop,"CommandObject<KeyValue<String, String>> brpop(double,String)","[915, 917]","{'A1': [(915, 917)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, String>> brpop(double timeout, String key) {
    return new CommandObject<>(commandArguments(BRPOP).blocking().key(key).add(timeout), BuilderFactory.KEYED_ELEMENT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,brpop,"CommandObject<KeyValue<String, String>> brpop(double)","[919, 921]","{'A1': [(919, 921)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, String>> brpop(double timeout, String... keys) {
    return new CommandObject<>(commandArguments(BRPOP).blocking().keys((Object[]) keys).add(timeout), BuilderFactory.KEYED_ELEMENT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,brpop,CommandObject<List<byte[]>> brpop(int),"[923, 925]","{'A1': [(923, 925)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> brpop(int timeout, byte[]... keys) {
    return new CommandObject<>(commandArguments(BRPOP).blocking().keys((Object[]) keys).add(timeout), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,brpop,"CommandObject<KeyValue<byte[], byte[]>> brpop(double)","[927, 929]","{'A1': [(927, 929)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], byte[]>> brpop(double timeout, byte[]... keys) {
    return new CommandObject<>(commandArguments(BRPOP).blocking().keys((Object[]) keys).add(timeout), BuilderFactory.BINARY_KEYED_ELEMENT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpoplpush,"CommandObject<String> rpoplpush(String,String)","[931, 933]","{'A1': [(931, 933)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> rpoplpush(String srckey, String dstkey) {
    return new CommandObject<>(commandArguments(RPOPLPUSH).key(srckey).key(dstkey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,brpoplpush,"CommandObject<String> brpoplpush(String,String,int)","[935, 938]","{'A1': [(935, 938)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> brpoplpush(String source, String destination, int timeout) {
    return new CommandObject<>(commandArguments(BRPOPLPUSH).blocking().key(source)
        .key(destination).add(timeout), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,rpoplpush,"CommandObject<byte[]> rpoplpush(byte[],byte[])","[940, 942]","{'A1': [(940, 942)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> rpoplpush(byte[] srckey, byte[] dstkey) {
    return new CommandObject<>(commandArguments(RPOPLPUSH).key(srckey).key(dstkey), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,brpoplpush,"CommandObject<byte[]> brpoplpush(byte[],byte[],int)","[944, 947]","{'A1': [(944, 947)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> brpoplpush(byte[] source, byte[] destination, int timeout) {
    return new CommandObject<>(commandArguments(BRPOPLPUSH).blocking().key(source)
        .key(destination).add(timeout), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lmove,"CommandObject<String> lmove(String,String,ListDirection,ListDirection)","[949, 952]","{'A1': [(949, 952)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> lmove(String srcKey, String dstKey, ListDirection from, ListDirection to) {
    return new CommandObject<>(commandArguments(LMOVE).key(srcKey).key(dstKey)
        .add(from).add(to), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blmove,"CommandObject<String> blmove(String,String,ListDirection,ListDirection,double)","[954, 957]","{'A1': [(954, 957)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> blmove(String srcKey, String dstKey, ListDirection from, ListDirection to, double timeout) {
    return new CommandObject<>(commandArguments(BLMOVE).blocking().key(srcKey)
        .key(dstKey).add(from).add(to).add(timeout), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lmove,"CommandObject<byte[]> lmove(byte[],byte[],ListDirection,ListDirection)","[959, 962]","{'A1': [(959, 962)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> lmove(byte[] srcKey, byte[] dstKey, ListDirection from, ListDirection to) {
    return new CommandObject<>(commandArguments(LMOVE).key(srcKey).key(dstKey)
        .add(from).add(to), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blmove,"CommandObject<byte[]> blmove(byte[],byte[],ListDirection,ListDirection,double)","[964, 967]","{'A1': [(964, 967)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> blmove(byte[] srcKey, byte[] dstKey, ListDirection from, ListDirection to, double timeout) {
    return new CommandObject<>(commandArguments(BLMOVE).blocking().key(srcKey)
        .key(dstKey).add(from).add(to).add(timeout), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lmpop,"CommandObject<KeyValue<String, List<String>>> lmpop(ListDirection)","[969, 972]","{'A1': [(969, 972)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, List<String>>> lmpop(ListDirection direction, String... keys) {
    return new CommandObject<>(commandArguments(LMPOP).add(keys.length).keys((Object[]) keys)
        .add(direction), BuilderFactory.KEYED_STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lmpop,"CommandObject<KeyValue<String, List<String>>> lmpop(ListDirection,int)","[974, 977]","{'A1': [(974, 977)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, List<String>>> lmpop(ListDirection direction, int count, String... keys) {
    return new CommandObject<>(commandArguments(LMPOP).add(keys.length).keys((Object[]) keys)
        .add(direction).add(COUNT).add(count), BuilderFactory.KEYED_STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blmpop,"CommandObject<KeyValue<String, List<String>>> blmpop(double,ListDirection)","[979, 982]","{'A1': [(979, 982)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, List<String>>> blmpop(double timeout, ListDirection direction, String... keys) {
    return new CommandObject<>(commandArguments(BLMPOP).blocking().add(timeout)
        .add(keys.length).keys((Object[]) keys).add(direction), BuilderFactory.KEYED_STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blmpop,"CommandObject<KeyValue<String, List<String>>> blmpop(double,ListDirection,int)","[984, 988]","{'A1': [(984, 988)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, List<String>>> blmpop(double timeout, ListDirection direction, int count, String... keys) {
    return new CommandObject<>(commandArguments(BLMPOP).blocking().add(timeout)
        .add(keys.length).keys((Object[]) keys).add(direction).add(COUNT).add(count),
        BuilderFactory.KEYED_STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lmpop,"CommandObject<KeyValue<byte[], List<byte[]>>> lmpop(ListDirection)","[990, 993]","{'A1': [(990, 993)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], List<byte[]>>> lmpop(ListDirection direction, byte[]... keys) {
    return new CommandObject<>(commandArguments(LMPOP).add(keys.length).keys((Object[]) keys)
        .add(direction), BuilderFactory.KEYED_BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,lmpop,"CommandObject<KeyValue<byte[], List<byte[]>>> lmpop(ListDirection,int)","[995, 998]","{'A1': [(995, 998)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], List<byte[]>>> lmpop(ListDirection direction, int count, byte[]... keys) {
    return new CommandObject<>(commandArguments(LMPOP).add(keys.length).keys((Object[]) keys)
        .add(direction).add(COUNT).add(count), BuilderFactory.KEYED_BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blmpop,"CommandObject<KeyValue<byte[], List<byte[]>>> blmpop(double,ListDirection)","[1000, 1003]","{'A1': [(1000, 1003)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], List<byte[]>>> blmpop(double timeout, ListDirection direction, byte[]... keys) {
    return new CommandObject<>(commandArguments(BLMPOP).blocking().add(timeout)
        .add(keys.length).keys((Object[]) keys).add(direction), BuilderFactory.KEYED_BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,blmpop,"CommandObject<KeyValue<byte[], List<byte[]>>> blmpop(double,ListDirection,int)","[1005, 1009]","{'A1': [(1005, 1009)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], List<byte[]>>> blmpop(double timeout, ListDirection direction, int count, byte[]... keys) {
    return new CommandObject<>(commandArguments(BLMPOP).blocking().add(timeout)
        .add(keys.length).keys((Object[]) keys).add(direction).add(COUNT).add(count),
        BuilderFactory.KEYED_BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hset,"CommandObject<Long> hset(String,String,String)","[1013, 1015]","{'A1': [(1013, 1015)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hset(String key, String field, String value) {
    return new CommandObject<>(commandArguments(HSET).key(key).add(field).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hset,"CommandObject<Long> hset(String,Map<String, String>)","[1017, 1019]","{'A1': [(1017, 1019)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hset(String key, Map<String, String> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(HSET).key(key), hash), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hsetex,"CommandObject<Long> hsetex(String,HSetExParams,String,String)","[1021, 1024]","{'A35': [(1021, 1024)]}",{'A35': 1.0},A35,,"  public final CommandObject<Long> hsetex(String key, HSetExParams params, String field, String value) {
    return new CommandObject<>(commandArguments(HSETEX).key(key)
      .addParams(params).add(FIELDS).add(1).add(field).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hsetex,"CommandObject<Long> hsetex(String,HSetExParams,Map<String, String>)","[1026, 1029]","{'A35': [(1026, 1029)]}",{'A35': 1.0},A35,,"  public final CommandObject<Long> hsetex(String key, HSetExParams params, Map<String, String> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(HSETEX).key(key)
      .addParams(params).add(FIELDS).add(hash.size()), hash), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hget,"CommandObject<String> hget(String,String)","[1031, 1033]","{'A1': [(1031, 1033)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> hget(String key, String field) {
    return new CommandObject<>(commandArguments(HGET).key(key).add(field), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hgetex,"CommandObject<List<String>> hgetex(String,HGetExParams)","[1035, 1038]","{'A35': [(1035, 1038)]}",{'A35': 1.0},A35,,"  public final CommandObject<List<String>> hgetex(String key, HGetExParams params, String... fields) {
    return new CommandObject<>(commandArguments(Command.HGETEX).key(key)
      .addParams(params).add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hgetdel,CommandObject<List<String>> hgetdel(String),"[1040, 1043]","{'A35': [(1040, 1043)]}",{'A35': 1.0},A35,,"  public final CommandObject<List<String>> hgetdel(String key, String... fields) {
    return new CommandObject<>(commandArguments(HGETDEL).key(key)
      .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hsetnx,"CommandObject<Long> hsetnx(String,String,String)","[1045, 1047]","{'A1': [(1045, 1047)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hsetnx(String key, String field, String value) {
    return new CommandObject<>(commandArguments(HSETNX).key(key).add(field).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hmset,"CommandObject<String> hmset(String,Map<String, String>)","[1049, 1051]","{'A1': [(1049, 1051)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> hmset(String key, Map<String, String> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(HMSET).key(key), hash), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hmget,CommandObject<List<String>> hmget(String),"[1053, 1055]","{'A1': [(1053, 1055)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> hmget(String key, String... fields) {
    return new CommandObject<>(commandArguments(HMGET).key(key).addObjects((Object[]) fields), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hset,"CommandObject<Long> hset(byte[],byte[],byte[])","[1057, 1059]","{'A1': [(1057, 1059)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hset(byte[] key, byte[] field, byte[] value) {
    return new CommandObject<>(commandArguments(HSET).key(key).add(field).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hset,"CommandObject<Long> hset(byte[],Map<byte[], byte[]>)","[1061, 1063]","{'A1': [(1061, 1063)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hset(byte[] key, Map<byte[], byte[]> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(HSET).key(key), hash), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hsetex,"CommandObject<Long> hsetex(byte[],HSetExParams,byte[],byte[])","[1065, 1068]","{'A35': [(1065, 1068)]}",{'A35': 1.0},A35,,"  public final CommandObject<Long> hsetex(byte[] key, HSetExParams params, byte[] field, byte[] value) {
    return new CommandObject<>(commandArguments(HSETEX).key(key)
      .addParams(params).add(FIELDS).add(1).add(field).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hsetex,"CommandObject<Long> hsetex(byte[],HSetExParams,Map<byte[], byte[]>)","[1070, 1073]","{'A35': [(1070, 1073)]}",{'A35': 1.0},A35,,"  public final CommandObject<Long> hsetex(byte[] key, HSetExParams params, Map<byte[], byte[]> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(HSETEX).key(key)
      .addParams(params).add(FIELDS).add(hash.size()), hash), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hget,"CommandObject<byte[]> hget(byte[],byte[])","[1075, 1077]","{'A1': [(1075, 1077)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> hget(byte[] key, byte[] field) {
    return new CommandObject<>(commandArguments(HGET).key(key).add(field), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hgetex,"CommandObject<List<byte[]>> hgetex(byte[],HGetExParams)","[1079, 1082]","{'A35': [(1079, 1082)]}",{'A35': 1.0},A35,,"  public final CommandObject<List<byte[]>> hgetex(byte[] key, HGetExParams params, byte[]... fields) {
    return new CommandObject<>(commandArguments(Command.HGETEX).key(key)
      .addParams(params).add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hgetdel,CommandObject<List<byte[]>> hgetdel(byte[]),"[1084, 1087]","{'A35': [(1084, 1087)]}",{'A35': 1.0},A35,,"  public final CommandObject<List<byte[]>> hgetdel(byte[] key, byte[]... fields) {
    return new CommandObject<>(commandArguments(HGETDEL).key(key).add(FIELDS)
      .add(fields.length).addObjects((Object[]) fields), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hsetnx,"CommandObject<Long> hsetnx(byte[],byte[],byte[])","[1089, 1091]","{'A1': [(1089, 1091)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hsetnx(byte[] key, byte[] field, byte[] value) {
    return new CommandObject<>(commandArguments(HSETNX).key(key).add(field).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hmset,"CommandObject<String> hmset(byte[],Map<byte[], byte[]>)","[1093, 1095]","{'A1': [(1093, 1095)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> hmset(byte[] key, Map<byte[], byte[]> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(HMSET).key(key), hash), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hmget,CommandObject<List<byte[]>> hmget(byte[]),"[1097, 1099]","{'A1': [(1097, 1099)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> hmget(byte[] key, byte[]... fields) {
    return new CommandObject<>(commandArguments(HMGET).key(key).addObjects((Object[]) fields), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hincrBy,"CommandObject<Long> hincrBy(String,String,long)","[1101, 1103]","{'A1': [(1101, 1103)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hincrBy(String key, String field, long value) {
    return new CommandObject<>(commandArguments(HINCRBY).key(key).add(field).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hincrByFloat,"CommandObject<Double> hincrByFloat(String,String,double)","[1105, 1107]","{'A1': [(1105, 1107)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> hincrByFloat(String key, String field, double value) {
    return new CommandObject<>(commandArguments(HINCRBYFLOAT).key(key).add(field).add(value), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexists,"CommandObject<Boolean> hexists(String,String)","[1109, 1111]","{'A1': [(1109, 1111)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> hexists(String key, String field) {
    return new CommandObject<>(commandArguments(HEXISTS).key(key).add(field), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hdel,CommandObject<Long> hdel(String),"[1113, 1115]","{'A1': [(1113, 1115)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hdel(String key, String... field) {
    return new CommandObject<>(commandArguments(HDEL).key(key).addObjects((Object[]) field), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hlen,CommandObject<Long> hlen(String),"[1117, 1119]","{'A1': [(1117, 1119)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hlen(String key) {
    return new CommandObject<>(commandArguments(HLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hincrBy,"CommandObject<Long> hincrBy(byte[],byte[],long)","[1121, 1123]","{'A1': [(1121, 1123)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hincrBy(byte[] key, byte[] field, long value) {
    return new CommandObject<>(commandArguments(HINCRBY).key(key).add(field).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hincrByFloat,"CommandObject<Double> hincrByFloat(byte[],byte[],double)","[1125, 1127]","{'A1': [(1125, 1127)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> hincrByFloat(byte[] key, byte[] field, double value) {
    return new CommandObject<>(commandArguments(HINCRBYFLOAT).key(key).add(field).add(value), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexists,"CommandObject<Boolean> hexists(byte[],byte[])","[1129, 1131]","{'A1': [(1129, 1131)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> hexists(byte[] key, byte[] field) {
    return new CommandObject<>(commandArguments(HEXISTS).key(key).add(field), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hdel,CommandObject<Long> hdel(byte[]),"[1133, 1135]","{'A1': [(1133, 1135)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hdel(byte[] key, byte[]... field) {
    return new CommandObject<>(commandArguments(HDEL).key(key).addObjects((Object[]) field), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hlen,CommandObject<Long> hlen(byte[]),"[1137, 1139]","{'A1': [(1137, 1139)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hlen(byte[] key) {
    return new CommandObject<>(commandArguments(HLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hkeys,CommandObject<Set<String>> hkeys(String),"[1141, 1143]","{'A1': [(1141, 1143)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> hkeys(String key) {
    return new CommandObject<>(commandArguments(HKEYS).key(key), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hvals,CommandObject<List<String>> hvals(String),"[1145, 1147]","{'A1': [(1145, 1147)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> hvals(String key) {
    return new CommandObject<>(commandArguments(HVALS).key(key), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hkeys,CommandObject<Set<byte[]>> hkeys(byte[]),"[1149, 1151]","{'A1': [(1149, 1151)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<byte[]>> hkeys(byte[] key) {
    return new CommandObject<>(commandArguments(HKEYS).key(key), BuilderFactory.BINARY_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hvals,CommandObject<List<byte[]>> hvals(byte[]),"[1153, 1155]","{'A1': [(1153, 1155)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> hvals(byte[] key) {
    return new CommandObject<>(commandArguments(HVALS).key(key), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hgetAll,"CommandObject<Map<String, String>> hgetAll(String)","[1157, 1159]","{'A1': [(1157, 1159)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, String>> hgetAll(String key) {
    return new CommandObject<>(commandArguments(HGETALL).key(key), BuilderFactory.STRING_MAP);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hrandfield,CommandObject<String> hrandfield(String),"[1161, 1163]","{'A1': [(1161, 1163)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> hrandfield(String key) {
    return new CommandObject<>(commandArguments(HRANDFIELD).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hrandfield,"CommandObject<List<String>> hrandfield(String,long)","[1165, 1167]","{'A1': [(1165, 1167)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> hrandfield(String key, long count) {
    return new CommandObject<>(commandArguments(HRANDFIELD).key(key).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hrandfieldWithValues,"CommandObject<List<Map.Entry<String, String>>> hrandfieldWithValues(String,long)","[1169, 1172]","{'A1': [(1170, 1172)], 'A9': [(1169, 1169)]}","{'A1': 0.75, 'A9': 0.25}",A1,,"  public final CommandObject<List<Map.Entry<String, String>>> hrandfieldWithValues(String key, long count) {
    return new CommandObject<>(commandArguments(HRANDFIELD).key(key).add(count).add(WITHVALUES),
        protocol != RedisProtocol.RESP3 ? BuilderFactory.STRING_PAIR_LIST : BuilderFactory.STRING_PAIR_LIST_FROM_PAIRS);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hgetAll,"CommandObject<Map<byte[], byte[]>> hgetAll(byte[])","[1174, 1176]","{'A1': [(1174, 1176)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<byte[], byte[]>> hgetAll(byte[] key) {
    return new CommandObject<>(commandArguments(HGETALL).key(key), BuilderFactory.BINARY_MAP);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hrandfield,CommandObject<byte[]> hrandfield(byte[]),"[1178, 1180]","{'A1': [(1178, 1180)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> hrandfield(byte[] key) {
    return new CommandObject<>(commandArguments(HRANDFIELD).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hrandfield,"CommandObject<List<byte[]>> hrandfield(byte[],long)","[1182, 1184]","{'A1': [(1182, 1184)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> hrandfield(byte[] key, long count) {
    return new CommandObject<>(commandArguments(HRANDFIELD).key(key).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hrandfieldWithValues,"CommandObject<List<Map.Entry<byte[], byte[]>>> hrandfieldWithValues(byte[],long)","[1186, 1189]","{'A1': [(1187, 1189)], 'A9': [(1186, 1186)]}","{'A1': 0.75, 'A9': 0.25}",A1,,"  public final CommandObject<List<Map.Entry<byte[], byte[]>>> hrandfieldWithValues(byte[] key, long count) {
    return new CommandObject<>(commandArguments(HRANDFIELD).key(key).add(count).add(WITHVALUES),
        protocol != RedisProtocol.RESP3 ? BuilderFactory.BINARY_PAIR_LIST : BuilderFactory.BINARY_PAIR_LIST_FROM_PAIRS);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hscan,"CommandObject<ScanResult<Map.Entry<String, String>>> hscan(String,String,ScanParams)","[1191, 1193]","{'A1': [(1191, 1193)]}",{'A1': 1.0},A1,,"  public final CommandObject<ScanResult<Map.Entry<String, String>>> hscan(String key, String cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(HSCAN).key(key).add(cursor).addParams(params), BuilderFactory.HSCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hscanNoValues,"CommandObject<ScanResult<String>> hscanNoValues(String,String,ScanParams)","[1195, 1197]","{'A40': [(1195, 1197)]}",{'A40': 1.0},A40,,"  public final CommandObject<ScanResult<String>> hscanNoValues(String key, String cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(HSCAN).key(key).add(cursor).addParams(params).add(NOVALUES), BuilderFactory.SCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hscan,"CommandObject<ScanResult<Map.Entry<byte[], byte[]>>> hscan(byte[],byte[],ScanParams)","[1199, 1201]","{'A1': [(1199, 1201)]}",{'A1': 1.0},A1,,"  public final CommandObject<ScanResult<Map.Entry<byte[], byte[]>>> hscan(byte[] key, byte[] cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(HSCAN).key(key).add(cursor).addParams(params), BuilderFactory.HSCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hscanNoValues,"CommandObject<ScanResult<byte[]>> hscanNoValues(byte[],byte[],ScanParams)","[1203, 1205]","{'A40': [(1203, 1205)]}",{'A40': 1.0},A40,,"  public final CommandObject<ScanResult<byte[]>> hscanNoValues(byte[] key, byte[] cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(HSCAN).key(key).add(cursor).addParams(params).add(NOVALUES), BuilderFactory.SCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hstrlen,"CommandObject<Long> hstrlen(String,String)","[1207, 1209]","{'A1': [(1207, 1209)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hstrlen(String key, String field) {
    return new CommandObject<>(commandArguments(HSTRLEN).key(key).add(field), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hstrlen,"CommandObject<Long> hstrlen(byte[],byte[])","[1211, 1213]","{'A1': [(1211, 1213)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hstrlen(byte[] key, byte[] field) {
    return new CommandObject<>(commandArguments(HSTRLEN).key(key).add(field), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpire,"CommandObject<List<Long>> hexpire(String,long)","[1215, 1218]","{'A1': [(1215, 1218)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpire(String key, long seconds, String... fields) {
    return new CommandObject<>(commandArguments(HEXPIRE).key(key).add(seconds)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpire,"CommandObject<List<Long>> hexpire(String,long,ExpiryOption)","[1220, 1223]","{'A1': [(1220, 1223)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpire(String key, long seconds, ExpiryOption condition, String... fields) {
    return new CommandObject<>(commandArguments(HEXPIRE).key(key).add(seconds).add(condition)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpire,"CommandObject<List<Long>> hpexpire(String,long)","[1225, 1228]","{'A1': [(1225, 1228)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpire(String key, long milliseconds, String... fields) {
    return new CommandObject<>(commandArguments(HPEXPIRE).key(key).add(milliseconds)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpire,"CommandObject<List<Long>> hpexpire(String,long,ExpiryOption)","[1230, 1233]","{'A1': [(1230, 1233)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpire(String key, long milliseconds, ExpiryOption condition, String... fields) {
    return new CommandObject<>(commandArguments(HPEXPIRE).key(key).add(milliseconds).add(condition)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpireAt,"CommandObject<List<Long>> hexpireAt(String,long)","[1235, 1238]","{'A1': [(1235, 1238)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpireAt(String key, long unixTimeSeconds, String... fields) {
    return new CommandObject<>(commandArguments(HEXPIREAT).key(key).add(unixTimeSeconds)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpireAt,"CommandObject<List<Long>> hexpireAt(String,long,ExpiryOption)","[1240, 1243]","{'A1': [(1240, 1243)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpireAt(String key, long unixTimeSeconds, ExpiryOption condition, String... fields) {
    return new CommandObject<>(commandArguments(HEXPIREAT).key(key).add(unixTimeSeconds).add(condition)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpireAt,"CommandObject<List<Long>> hpexpireAt(String,long)","[1245, 1248]","{'A1': [(1245, 1248)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpireAt(String key, long unixTimeMillis, String... fields) {
    return new CommandObject<>(commandArguments(HPEXPIREAT).key(key).add(unixTimeMillis)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpireAt,"CommandObject<List<Long>> hpexpireAt(String,long,ExpiryOption)","[1250, 1253]","{'A1': [(1250, 1253)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpireAt(String key, long unixTimeMillis, ExpiryOption condition, String... fields) {
    return new CommandObject<>(commandArguments(HPEXPIREAT).key(key).add(unixTimeMillis).add(condition)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpire,"CommandObject<List<Long>> hexpire(byte[],long)","[1255, 1258]","{'A1': [(1255, 1258)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpire(byte[] key, long seconds, byte[]... fields) {
    return new CommandObject<>(commandArguments(HEXPIRE).key(key).add(seconds)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpire,"CommandObject<List<Long>> hexpire(byte[],long,ExpiryOption)","[1260, 1263]","{'A1': [(1260, 1263)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpire(byte[] key, long seconds, ExpiryOption condition, byte[]... fields) {
    return new CommandObject<>(commandArguments(HEXPIRE).key(key).add(seconds).add(condition)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpire,"CommandObject<List<Long>> hpexpire(byte[],long)","[1265, 1268]","{'A1': [(1265, 1268)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpire(byte[] key, long milliseconds, byte[]... fields) {
    return new CommandObject<>(commandArguments(HPEXPIRE).key(key).add(milliseconds)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpire,"CommandObject<List<Long>> hpexpire(byte[],long,ExpiryOption)","[1270, 1273]","{'A1': [(1270, 1273)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpire(byte[] key, long milliseconds, ExpiryOption condition, byte[]... fields) {
    return new CommandObject<>(commandArguments(HPEXPIRE).key(key).add(milliseconds).add(condition)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpireAt,"CommandObject<List<Long>> hexpireAt(byte[],long)","[1275, 1278]","{'A1': [(1275, 1278)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpireAt(byte[] key, long unixTimeSeconds, byte[]... fields) {
    return new CommandObject<>(commandArguments(HEXPIREAT).key(key).add(unixTimeSeconds)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpireAt,"CommandObject<List<Long>> hexpireAt(byte[],long,ExpiryOption)","[1280, 1283]","{'A1': [(1280, 1283)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpireAt(byte[] key, long unixTimeSeconds, ExpiryOption condition, byte[]... fields) {
    return new CommandObject<>(commandArguments(HEXPIREAT).key(key).add(unixTimeSeconds).add(condition)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpireAt,"CommandObject<List<Long>> hpexpireAt(byte[],long)","[1285, 1288]","{'A1': [(1285, 1288)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpireAt(byte[] key, long unixTimeMillis, byte[]... fields) {
    return new CommandObject<>(commandArguments(HPEXPIREAT).key(key).add(unixTimeMillis)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpireAt,"CommandObject<List<Long>> hpexpireAt(byte[],long,ExpiryOption)","[1290, 1293]","{'A1': [(1290, 1293)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpireAt(byte[] key, long unixTimeMillis, ExpiryOption condition, byte[]... fields) {
    return new CommandObject<>(commandArguments(HPEXPIREAT).key(key).add(unixTimeMillis).add(condition)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpireTime,CommandObject<List<Long>> hexpireTime(String),"[1295, 1298]","{'A1': [(1295, 1298)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpireTime(String key, String... fields) {
    return new CommandObject<>(commandArguments(HEXPIRETIME).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpireTime,CommandObject<List<Long>> hpexpireTime(String),"[1300, 1303]","{'A1': [(1300, 1303)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpireTime(String key, String... fields) {
    return new CommandObject<>(commandArguments(HPEXPIRETIME).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,httl,CommandObject<List<Long>> httl(String),"[1305, 1308]","{'A1': [(1305, 1308)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> httl(String key, String... fields) {
    return new CommandObject<>(commandArguments(HTTL).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpttl,CommandObject<List<Long>> hpttl(String),"[1310, 1313]","{'A1': [(1310, 1313)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpttl(String key, String... fields) {
    return new CommandObject<>(commandArguments(HPTTL).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hexpireTime,CommandObject<List<Long>> hexpireTime(byte[]),"[1315, 1318]","{'A1': [(1315, 1318)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hexpireTime(byte[] key, byte[]... fields) {
    return new CommandObject<>(commandArguments(HEXPIRETIME).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpexpireTime,CommandObject<List<Long>> hpexpireTime(byte[]),"[1320, 1323]","{'A1': [(1320, 1323)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpexpireTime(byte[] key, byte[]... fields) {
    return new CommandObject<>(commandArguments(HPEXPIRETIME).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,httl,CommandObject<List<Long>> httl(byte[]),"[1325, 1328]","{'A1': [(1325, 1328)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> httl(byte[] key, byte[]... fields) {
    return new CommandObject<>(commandArguments(HTTL).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpttl,CommandObject<List<Long>> hpttl(byte[]),"[1330, 1333]","{'A1': [(1330, 1333)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpttl(byte[] key, byte[]... fields) {
    return new CommandObject<>(commandArguments(HPTTL).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpersist,CommandObject<List<Long>> hpersist(String),"[1335, 1338]","{'A1': [(1335, 1338)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpersist(String key, String... fields) {
    return new CommandObject<>(commandArguments(HPERSIST).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hpersist,CommandObject<List<Long>> hpersist(byte[]),"[1340, 1343]","{'A1': [(1340, 1343)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> hpersist(byte[] key, byte[]... fields) {
    return new CommandObject<>(commandArguments(HPERSIST).key(key)
        .add(FIELDS).add(fields.length).addObjects((Object[]) fields), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sadd,CommandObject<Long> sadd(String),"[1347, 1349]","{'A1': [(1347, 1349)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sadd(String key, String... members) {
    return new CommandObject<>(commandArguments(SADD).key(key).addObjects((Object[]) members), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sadd,CommandObject<Long> sadd(byte[]),"[1351, 1353]","{'A1': [(1351, 1353)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sadd(byte[] key, byte[]... members) {
    return new CommandObject<>(commandArguments(SADD).key(key).addObjects((Object[]) members), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,smembers,CommandObject<Set<String>> smembers(String),"[1355, 1357]","{'A1': [(1355, 1357)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> smembers(String key) {
    return new CommandObject<>(commandArguments(SMEMBERS).key(key), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,smembers,CommandObject<Set<byte[]>> smembers(byte[]),"[1359, 1361]","{'A1': [(1359, 1361)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<byte[]>> smembers(byte[] key) {
    return new CommandObject<>(commandArguments(SMEMBERS).key(key), BuilderFactory.BINARY_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,srem,CommandObject<Long> srem(String),"[1363, 1365]","{'A1': [(1363, 1365)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> srem(String key, String... members) {
    return new CommandObject<>(commandArguments(SREM).key(key).addObjects((Object[]) members), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,srem,CommandObject<Long> srem(byte[]),"[1367, 1369]","{'A1': [(1367, 1369)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> srem(byte[] key, byte[]... members) {
    return new CommandObject<>(commandArguments(SREM).key(key).addObjects((Object[]) members), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,spop,CommandObject<String> spop(String),"[1371, 1373]","{'A1': [(1371, 1373)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> spop(String key) {
    return new CommandObject<>(commandArguments(SPOP).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,spop,CommandObject<byte[]> spop(byte[]),"[1375, 1377]","{'A1': [(1375, 1377)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> spop(byte[] key) {
    return new CommandObject<>(commandArguments(SPOP).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,spop,"CommandObject<Set<String>> spop(String,long)","[1379, 1381]","{'A1': [(1379, 1381)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> spop(String key, long count) {
    return new CommandObject<>(commandArguments(SPOP).key(key).add(count), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,spop,"CommandObject<Set<byte[]>> spop(byte[],long)","[1383, 1385]","{'A1': [(1383, 1385)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<byte[]>> spop(byte[] key, long count) {
    return new CommandObject<>(commandArguments(SPOP).key(key).add(count), BuilderFactory.BINARY_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scard,CommandObject<Long> scard(String),"[1387, 1389]","{'A1': [(1387, 1389)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> scard(String key) {
    return new CommandObject<>(commandArguments(SCARD).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scard,CommandObject<Long> scard(byte[]),"[1391, 1393]","{'A1': [(1391, 1393)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> scard(byte[] key) {
    return new CommandObject<>(commandArguments(SCARD).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sismember,"CommandObject<Boolean> sismember(String,String)","[1395, 1397]","{'A1': [(1395, 1397)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> sismember(String key, String member) {
    return new CommandObject<>(commandArguments(SISMEMBER).key(key).add(member), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sismember,"CommandObject<Boolean> sismember(byte[],byte[])","[1399, 1401]","{'A1': [(1399, 1401)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> sismember(byte[] key, byte[] member) {
    return new CommandObject<>(commandArguments(SISMEMBER).key(key).add(member), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,smismember,CommandObject<List<Boolean>> smismember(String),"[1403, 1405]","{'A1': [(1403, 1405)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> smismember(String key, String... members) {
    return new CommandObject<>(commandArguments(SMISMEMBER).key(key).addObjects((Object[]) members), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,smismember,CommandObject<List<Boolean>> smismember(byte[]),"[1407, 1409]","{'A1': [(1407, 1409)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> smismember(byte[] key, byte[]... members) {
    return new CommandObject<>(commandArguments(SMISMEMBER).key(key).addObjects((Object[]) members), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,srandmember,CommandObject<String> srandmember(String),"[1411, 1413]","{'A1': [(1411, 1413)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> srandmember(String key) {
    return new CommandObject<>(commandArguments(SRANDMEMBER).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,srandmember,CommandObject<byte[]> srandmember(byte[]),"[1415, 1417]","{'A1': [(1415, 1417)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> srandmember(byte[] key) {
    return new CommandObject<>(commandArguments(SRANDMEMBER).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,srandmember,"CommandObject<List<String>> srandmember(String,int)","[1419, 1421]","{'A1': [(1419, 1421)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> srandmember(String key, int count) {
    return new CommandObject<>(commandArguments(SRANDMEMBER).key(key).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,srandmember,"CommandObject<List<byte[]>> srandmember(byte[],int)","[1423, 1425]","{'A1': [(1423, 1425)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> srandmember(byte[] key, int count) {
    return new CommandObject<>(commandArguments(SRANDMEMBER).key(key).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sscan,"CommandObject<ScanResult<String>> sscan(String,String,ScanParams)","[1427, 1429]","{'A1': [(1427, 1429)]}",{'A1': 1.0},A1,,"  public final CommandObject<ScanResult<String>> sscan(String key, String cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(SSCAN).key(key).add(cursor).addParams(params), BuilderFactory.SSCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sscan,"CommandObject<ScanResult<byte[]>> sscan(byte[],byte[],ScanParams)","[1431, 1433]","{'A1': [(1431, 1433)]}",{'A1': 1.0},A1,,"  public final CommandObject<ScanResult<byte[]>> sscan(byte[] key, byte[] cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(SSCAN).key(key).add(cursor).addParams(params), BuilderFactory.SSCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sdiff,CommandObject<Set<String>> sdiff(),"[1435, 1437]","{'A1': [(1435, 1437)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> sdiff(String... keys) {
    return new CommandObject<>(commandArguments(SDIFF).keys((Object[]) keys), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sdiffstore,CommandObject<Long> sdiffstore(String),"[1439, 1441]","{'A1': [(1439, 1441)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sdiffstore(String dstkey, String... keys) {
    return new CommandObject<>(commandArguments(SDIFFSTORE).key(dstkey).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sdiff,CommandObject<Set<byte[]>> sdiff(),"[1443, 1445]","{'A1': [(1443, 1445)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<byte[]>> sdiff(byte[]... keys) {
    return new CommandObject<>(commandArguments(SDIFF).keys((Object[]) keys), BuilderFactory.BINARY_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sdiffstore,CommandObject<Long> sdiffstore(byte[]),"[1447, 1449]","{'A1': [(1447, 1449)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sdiffstore(byte[] dstkey, byte[]... keys) {
    return new CommandObject<>(commandArguments(SDIFFSTORE).key(dstkey).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sinter,CommandObject<Set<String>> sinter(),"[1451, 1453]","{'A1': [(1451, 1453)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> sinter(String... keys) {
    return new CommandObject<>(commandArguments(SINTER).keys((Object[]) keys), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sinterstore,CommandObject<Long> sinterstore(String),"[1455, 1457]","{'A1': [(1455, 1457)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sinterstore(String dstkey, String... keys) {
    return new CommandObject<>(commandArguments(SINTERSTORE).key(dstkey).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sintercard,CommandObject<Long> sintercard(),"[1459, 1461]","{'A12': [(1459, 1461)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> sintercard(String... keys) {
    return new CommandObject<>(commandArguments(SINTERCARD).add(keys.length).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sintercard,CommandObject<Long> sintercard(int),"[1463, 1465]","{'A12': [(1463, 1465)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> sintercard(int limit, String... keys) {
    return new CommandObject<>(commandArguments(SINTERCARD).add(keys.length).keys((Object[]) keys).add(LIMIT).add(limit),BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sinter,CommandObject<Set<byte[]>> sinter(),"[1467, 1469]","{'A1': [(1467, 1469)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<byte[]>> sinter(byte[]... keys) {
    return new CommandObject<>(commandArguments(SINTER).keys((Object[]) keys), BuilderFactory.BINARY_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sinterstore,CommandObject<Long> sinterstore(byte[]),"[1471, 1473]","{'A1': [(1471, 1473)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sinterstore(byte[] dstkey, byte[]... keys) {
    return new CommandObject<>(commandArguments(SINTERSTORE).key(dstkey).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sintercard,CommandObject<Long> sintercard(),"[1475, 1477]","{'A12': [(1475, 1477)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> sintercard(byte[]... keys) {
    return new CommandObject<>(commandArguments(SINTERCARD).add(keys.length).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sintercard,CommandObject<Long> sintercard(int),"[1479, 1481]","{'A12': [(1479, 1481)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> sintercard(int limit, byte[]... keys) {
    return new CommandObject<>(commandArguments(SINTERCARD).add(keys.length).keys((Object[]) keys).add(LIMIT).add(limit),BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sunion,CommandObject<Set<String>> sunion(),"[1483, 1485]","{'A1': [(1483, 1485)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> sunion(String... keys) {
    return new CommandObject<>(commandArguments(SUNION).keys((Object[]) keys), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sunionstore,CommandObject<Long> sunionstore(String),"[1487, 1489]","{'A1': [(1487, 1489)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sunionstore(String dstkey, String... keys) {
    return new CommandObject<>(commandArguments(SUNIONSTORE).key(dstkey).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sunion,CommandObject<Set<byte[]>> sunion(),"[1491, 1493]","{'A1': [(1491, 1493)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<byte[]>> sunion(byte[]... keys) {
    return new CommandObject<>(commandArguments(SUNION).keys((Object[]) keys), BuilderFactory.BINARY_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,sunionstore,CommandObject<Long> sunionstore(byte[]),"[1495, 1497]","{'A1': [(1495, 1497)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> sunionstore(byte[] dstkey, byte[]... keys) {
    return new CommandObject<>(commandArguments(SUNIONSTORE).key(dstkey).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,smove,"CommandObject<Long> smove(String,String,String)","[1499, 1501]","{'A1': [(1499, 1501)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> smove(String srckey, String dstkey, String member) {
    return new CommandObject<>(commandArguments(SMOVE).key(srckey).key(dstkey).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,smove,"CommandObject<Long> smove(byte[],byte[],byte[])","[1503, 1505]","{'A1': [(1503, 1505)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> smove(byte[] srckey, byte[] dstkey, byte[] member) {
    return new CommandObject<>(commandArguments(SMOVE).key(srckey).key(dstkey).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zadd,"CommandObject<Long> zadd(String,double,String)","[1509, 1511]","{'A1': [(1509, 1511)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zadd(String key, double score, String member) {
    return new CommandObject<>(commandArguments(ZADD).key(key).add(score).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zadd,"CommandObject<Long> zadd(String,double,String,ZAddParams)","[1513, 1516]","{'A1': [(1513, 1516)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zadd(String key, double score, String member, ZAddParams params) {
    return new CommandObject<>(commandArguments(ZADD).key(key).addParams(params)
        .add(score).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zadd,"CommandObject<Long> zadd(String,Map<String, Double>)","[1518, 1520]","{'A1': [(1518, 1520)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zadd(String key, Map<String, Double> scoreMembers) {
    return new CommandObject<>(addSortedSetFlatMapArgs(commandArguments(ZADD).key(key), scoreMembers), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zadd,"CommandObject<Long> zadd(String,Map<String, Double>,ZAddParams)","[1522, 1524]","{'A1': [(1522, 1524)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zadd(String key, Map<String, Double> scoreMembers, ZAddParams params) {
    return new CommandObject<>(addSortedSetFlatMapArgs(commandArguments(ZADD).key(key).addParams(params), scoreMembers), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zaddIncr,"CommandObject<Double> zaddIncr(String,double,String,ZAddParams)","[1526, 1529]","{'A1': [(1526, 1529)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> zaddIncr(String key, double score, String member, ZAddParams params) {
    return new CommandObject<>(commandArguments(ZADD).key(key).add(Keyword.INCR)
        .addParams(params).add(score).add(member), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zadd,"CommandObject<Long> zadd(byte[],double,byte[])","[1531, 1533]","{'A1': [(1531, 1533)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zadd(byte[] key, double score, byte[] member) {
    return new CommandObject<>(commandArguments(ZADD).key(key).add(score).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zadd,"CommandObject<Long> zadd(byte[],double,byte[],ZAddParams)","[1535, 1538]","{'A1': [(1535, 1538)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zadd(byte[] key, double score, byte[] member, ZAddParams params) {
    return new CommandObject<>(commandArguments(ZADD).key(key).addParams(params)
        .add(score).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zadd,"CommandObject<Long> zadd(byte[],Map<byte[], Double>)","[1540, 1542]","{'A1': [(1540, 1542)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zadd(byte[] key, Map<byte[], Double> scoreMembers) {
    return new CommandObject<>(addSortedSetFlatMapArgs(commandArguments(ZADD).key(key), scoreMembers), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zadd,"CommandObject<Long> zadd(byte[],Map<byte[], Double>,ZAddParams)","[1544, 1546]","{'A1': [(1544, 1546)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zadd(byte[] key, Map<byte[], Double> scoreMembers, ZAddParams params) {
    return new CommandObject<>(addSortedSetFlatMapArgs(commandArguments(ZADD).key(key).addParams(params), scoreMembers), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zaddIncr,"CommandObject<Double> zaddIncr(byte[],double,byte[],ZAddParams)","[1548, 1551]","{'A1': [(1548, 1551)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> zaddIncr(byte[] key, double score, byte[] member, ZAddParams params) {
    return new CommandObject<>(commandArguments(ZADD).key(key).add(Keyword.INCR)
        .addParams(params).add(score).add(member), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zincrby,"CommandObject<Double> zincrby(String,double,String)","[1553, 1555]","{'A1': [(1553, 1555)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> zincrby(String key, double increment, String member) {
    return new CommandObject<>(commandArguments(ZINCRBY).key(key).add(increment).add(member), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zincrby,"CommandObject<Double> zincrby(String,double,String,ZIncrByParams)","[1557, 1559]","{'A1': [(1557, 1559)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> zincrby(String key, double increment, String member, ZIncrByParams params) {
    return new CommandObject<>(commandArguments(ZADD).key(key).addParams(params).add(increment).add(member), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zincrby,"CommandObject<Double> zincrby(byte[],double,byte[])","[1561, 1563]","{'A1': [(1561, 1563)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> zincrby(byte[] key, double increment, byte[] member) {
    return new CommandObject<>(commandArguments(ZINCRBY).key(key).add(increment).add(member), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zincrby,"CommandObject<Double> zincrby(byte[],double,byte[],ZIncrByParams)","[1565, 1567]","{'A1': [(1565, 1567)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> zincrby(byte[] key, double increment, byte[] member, ZIncrByParams params) {
    return new CommandObject<>(commandArguments(ZADD).key(key).addParams(params).add(increment).add(member), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrem,CommandObject<Long> zrem(String),"[1569, 1571]","{'A1': [(1569, 1571)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zrem(String key, String... members) {
    return new CommandObject<>(commandArguments(ZREM).key(key).addObjects((Object[]) members), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrem,CommandObject<Long> zrem(byte[]),"[1573, 1575]","{'A1': [(1573, 1575)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zrem(byte[] key, byte[]... members) {
    return new CommandObject<>(commandArguments(ZREM).key(key).addObjects((Object[]) members), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrank,"CommandObject<Long> zrank(String,String)","[1577, 1579]","{'A1': [(1577, 1579)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zrank(String key, String member) {
    return new CommandObject<>(commandArguments(ZRANK).key(key).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrank,"CommandObject<Long> zrevrank(String,String)","[1581, 1583]","{'A1': [(1581, 1583)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zrevrank(String key, String member) {
    return new CommandObject<>(commandArguments(ZREVRANK).key(key).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrankWithScore,"CommandObject<KeyValue<Long, Double>> zrankWithScore(String,String)","[1585, 1587]","{'A10': [(1585, 1587)]}",{'A10': 1.0},A10,,"  public final CommandObject<KeyValue<Long, Double>> zrankWithScore(String key, String member) {
    return new CommandObject<>(commandArguments(ZRANK).key(key).add(member).add(WITHSCORE), BuilderFactory.ZRANK_WITHSCORE_PAIR);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrankWithScore,"CommandObject<KeyValue<Long, Double>> zrevrankWithScore(String,String)","[1589, 1591]","{'A10': [(1589, 1591)]}",{'A10': 1.0},A10,,"  public final CommandObject<KeyValue<Long, Double>> zrevrankWithScore(String key, String member) {
    return new CommandObject<>(commandArguments(ZREVRANK).key(key).add(member).add(WITHSCORE), BuilderFactory.ZRANK_WITHSCORE_PAIR);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrank,"CommandObject<Long> zrank(byte[],byte[])","[1593, 1595]","{'A1': [(1593, 1595)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zrank(byte[] key, byte[] member) {
    return new CommandObject<>(commandArguments(ZRANK).key(key).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrank,"CommandObject<Long> zrevrank(byte[],byte[])","[1597, 1599]","{'A1': [(1597, 1599)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zrevrank(byte[] key, byte[] member) {
    return new CommandObject<>(commandArguments(ZREVRANK).key(key).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrankWithScore,"CommandObject<KeyValue<Long, Double>> zrankWithScore(byte[],byte[])","[1601, 1603]","{'A10': [(1601, 1603)]}",{'A10': 1.0},A10,,"  public final CommandObject<KeyValue<Long, Double>> zrankWithScore(byte[] key, byte[] member) {
    return new CommandObject<>(commandArguments(ZRANK).key(key).add(member).add(WITHSCORE), BuilderFactory.ZRANK_WITHSCORE_PAIR);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrankWithScore,"CommandObject<KeyValue<Long, Double>> zrevrankWithScore(byte[],byte[])","[1605, 1607]","{'A10': [(1605, 1607)]}",{'A10': 1.0},A10,,"  public final CommandObject<KeyValue<Long, Double>> zrevrankWithScore(byte[] key, byte[] member) {
    return new CommandObject<>(commandArguments(ZREVRANK).key(key).add(member).add(WITHSCORE), BuilderFactory.ZRANK_WITHSCORE_PAIR);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrandmember,CommandObject<String> zrandmember(String),"[1609, 1611]","{'A1': [(1609, 1611)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> zrandmember(String key) {
    return new CommandObject<>(commandArguments(ZRANDMEMBER).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrandmember,"CommandObject<List<String>> zrandmember(String,long)","[1613, 1615]","{'A1': [(1613, 1615)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrandmember(String key, long count) {
    return new CommandObject<>(commandArguments(ZRANDMEMBER).key(key).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrandmemberWithScores,"CommandObject<List<Tuple>> zrandmemberWithScores(String,long)","[1617, 1619]","{'A1': [(1617, 1619)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrandmemberWithScores(String key, long count) {
    return new CommandObject<>(commandArguments(ZRANDMEMBER).key(key).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrandmember,CommandObject<byte[]> zrandmember(byte[]),"[1621, 1623]","{'A1': [(1621, 1623)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> zrandmember(byte[] key) {
    return new CommandObject<>(commandArguments(ZRANDMEMBER).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrandmember,"CommandObject<List<byte[]>> zrandmember(byte[],long)","[1625, 1627]","{'A1': [(1625, 1627)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrandmember(byte[] key, long count) {
    return new CommandObject<>(commandArguments(ZRANDMEMBER).key(key).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrandmemberWithScores,"CommandObject<List<Tuple>> zrandmemberWithScores(byte[],long)","[1629, 1631]","{'A1': [(1629, 1631)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrandmemberWithScores(byte[] key, long count) {
    return new CommandObject<>(commandArguments(ZRANDMEMBER).key(key).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zcard,CommandObject<Long> zcard(String),"[1633, 1635]","{'A1': [(1633, 1635)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zcard(String key) {
    return new CommandObject<>(commandArguments(ZCARD).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zscore,"CommandObject<Double> zscore(String,String)","[1637, 1639]","{'A1': [(1637, 1639)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> zscore(String key, String member) {
    return new CommandObject<>(commandArguments(ZSCORE).key(key).add(member), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zmscore,CommandObject<List<Double>> zmscore(String),"[1641, 1643]","{'A1': [(1641, 1643)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Double>> zmscore(String key, String... members) {
    return new CommandObject<>(commandArguments(ZMSCORE).key(key).addObjects((Object[]) members), BuilderFactory.DOUBLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zcard,CommandObject<Long> zcard(byte[]),"[1645, 1647]","{'A1': [(1645, 1647)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zcard(byte[] key) {
    return new CommandObject<>(commandArguments(ZCARD).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zscore,"CommandObject<Double> zscore(byte[],byte[])","[1649, 1651]","{'A1': [(1649, 1651)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> zscore(byte[] key, byte[] member) {
    return new CommandObject<>(commandArguments(ZSCORE).key(key).add(member), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zmscore,CommandObject<List<Double>> zmscore(byte[]),"[1653, 1655]","{'A1': [(1653, 1655)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Double>> zmscore(byte[] key, byte[]... members) {
    return new CommandObject<>(commandArguments(ZMSCORE).key(key).addObjects((Object[]) members), BuilderFactory.DOUBLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zpopmax,CommandObject<Tuple> zpopmax(String),"[1657, 1659]","{'A1': [(1657, 1659)]}",{'A1': 1.0},A1,,"  public final CommandObject<Tuple> zpopmax(String key) {
    return new CommandObject<>(commandArguments(ZPOPMAX).key(key), BuilderFactory.TUPLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zpopmax,"CommandObject<List<Tuple>> zpopmax(String,int)","[1661, 1663]","{'A1': [(1661, 1663)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zpopmax(String key, int count) {
    return new CommandObject<>(commandArguments(ZPOPMAX).key(key).add(count), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zpopmin,CommandObject<Tuple> zpopmin(String),"[1665, 1667]","{'A1': [(1665, 1667)]}",{'A1': 1.0},A1,,"  public final CommandObject<Tuple> zpopmin(String key) {
    return new CommandObject<>(commandArguments(ZPOPMIN).key(key), BuilderFactory.TUPLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zpopmin,"CommandObject<List<Tuple>> zpopmin(String,int)","[1669, 1671]","{'A1': [(1669, 1671)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zpopmin(String key, int count) {
    return new CommandObject<>(commandArguments(ZPOPMIN).key(key).add(count), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zpopmax,CommandObject<Tuple> zpopmax(byte[]),"[1673, 1675]","{'A1': [(1673, 1675)]}",{'A1': 1.0},A1,,"  public final CommandObject<Tuple> zpopmax(byte[] key) {
    return new CommandObject<>(commandArguments(ZPOPMAX).key(key), BuilderFactory.TUPLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zpopmax,"CommandObject<List<Tuple>> zpopmax(byte[],int)","[1677, 1679]","{'A1': [(1677, 1679)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zpopmax(byte[] key, int count) {
    return new CommandObject<>(commandArguments(ZPOPMAX).key(key).add(count), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zpopmin,CommandObject<Tuple> zpopmin(byte[]),"[1681, 1683]","{'A1': [(1681, 1683)]}",{'A1': 1.0},A1,,"  public final CommandObject<Tuple> zpopmin(byte[] key) {
    return new CommandObject<>(commandArguments(ZPOPMIN).key(key), BuilderFactory.TUPLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zpopmin,"CommandObject<List<Tuple>> zpopmin(byte[],int)","[1685, 1687]","{'A1': [(1685, 1687)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zpopmin(byte[] key, int count) {
    return new CommandObject<>(commandArguments(ZPOPMIN).key(key).add(count), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bzpopmax,"CommandObject<KeyValue<String, Tuple>> bzpopmax(double)","[1689, 1692]","{'A1': [(1689, 1692)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, Tuple>> bzpopmax(double timeout, String... keys) {
    return new CommandObject<>(commandArguments(BZPOPMAX).blocking().keys((Object[]) keys).add(timeout),
        BuilderFactory.KEYED_TUPLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bzpopmin,"CommandObject<KeyValue<String, Tuple>> bzpopmin(double)","[1694, 1697]","{'A1': [(1694, 1697)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, Tuple>> bzpopmin(double timeout, String... keys) {
    return new CommandObject<>(commandArguments(BZPOPMIN).blocking().keys((Object[]) keys).add(timeout),
        BuilderFactory.KEYED_TUPLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bzpopmax,"CommandObject<KeyValue<byte[], Tuple>> bzpopmax(double)","[1699, 1702]","{'A1': [(1699, 1702)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], Tuple>> bzpopmax(double timeout, byte[]... keys) {
    return new CommandObject<>(commandArguments(BZPOPMAX).blocking().keys((Object[]) keys)
        .add(timeout), BuilderFactory.BINARY_KEYED_TUPLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bzpopmin,"CommandObject<KeyValue<byte[], Tuple>> bzpopmin(double)","[1704, 1707]","{'A1': [(1704, 1707)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], Tuple>> bzpopmin(double timeout, byte[]... keys) {
    return new CommandObject<>(commandArguments(BZPOPMIN).blocking().keys((Object[]) keys)
        .add(timeout), BuilderFactory.BINARY_KEYED_TUPLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zcount,"CommandObject<Long> zcount(String,double,double)","[1709, 1711]","{'A1': [(1709, 1711)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zcount(String key, double min, double max) {
    return new CommandObject<>(commandArguments(ZCOUNT).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zcount,"CommandObject<Long> zcount(String,String,String)","[1713, 1715]","{'A1': [(1713, 1715)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zcount(String key, String min, String max) {
    return new CommandObject<>(commandArguments(ZCOUNT).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zcount,"CommandObject<Long> zcount(byte[],double,double)","[1717, 1719]","{'A1': [(1717, 1719)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zcount(byte[] key, double min, double max) {
    return new CommandObject<>(commandArguments(ZCOUNT).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zcount,"CommandObject<Long> zcount(byte[],byte[],byte[])","[1721, 1723]","{'A1': [(1721, 1723)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zcount(byte[] key, byte[] min, byte[] max) {
    return new CommandObject<>(commandArguments(ZCOUNT).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrange,"CommandObject<List<String>> zrange(String,long,long)","[1725, 1727]","{'A1': [(1725, 1727)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrange(String key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZRANGE).key(key).add(start).add(stop), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrange,"CommandObject<List<String>> zrevrange(String,long,long)","[1729, 1731]","{'A1': [(1729, 1731)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrevrange(String key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZREVRANGE).key(key).add(start).add(stop), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeWithScores,"CommandObject<List<Tuple>> zrangeWithScores(String,long,long)","[1733, 1736]","{'A1': [(1733, 1736)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeWithScores(String key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZRANGE).key(key)
        .add(start).add(stop).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeWithScores,"CommandObject<List<Tuple>> zrevrangeWithScores(String,long,long)","[1738, 1741]","{'A1': [(1738, 1741)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeWithScores(String key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZREVRANGE).key(key)
        .add(start).add(stop).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrange,"CommandObject<List<String>> zrange(String,ZRangeParams)","[1743, 1745]","{'A1': [(1743, 1745)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrange(String key, ZRangeParams zRangeParams) {
    return new CommandObject<>(commandArguments(ZRANGE).key(key).addParams(zRangeParams), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeWithScores,"CommandObject<List<Tuple>> zrangeWithScores(String,ZRangeParams)","[1747, 1749]","{'A1': [(1747, 1749)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeWithScores(String key, ZRangeParams zRangeParams) {
    return new CommandObject<>(commandArguments(ZRANGE).key(key).addParams(zRangeParams).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangestore,"CommandObject<Long> zrangestore(String,String,ZRangeParams)","[1751, 1753]","{'A1': [(1751, 1753)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zrangestore(String dest, String src, ZRangeParams zRangeParams) {
    return new CommandObject<>(commandArguments(ZRANGESTORE).key(dest).add(src).addParams(zRangeParams), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScore,"CommandObject<List<String>> zrangeByScore(String,double,double)","[1755, 1757]","{'A1': [(1755, 1757)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrangeByScore(String key, double min, double max) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScore,"CommandObject<List<String>> zrangeByScore(String,String,String)","[1759, 1761]","{'A1': [(1759, 1761)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrangeByScore(String key, String min, String max) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScore,"CommandObject<List<String>> zrevrangeByScore(String,double,double)","[1763, 1765]","{'A1': [(1763, 1765)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrevrangeByScore(String key, double max, double min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScore,"CommandObject<List<String>> zrevrangeByScore(String,String,String)","[1767, 1769]","{'A1': [(1767, 1769)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrevrangeByScore(String key, String max, String min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScore,"CommandObject<List<String>> zrangeByScore(String,double,double,int,int)","[1771, 1774]","{'A1': [(1771, 1774)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrangeByScore(String key, double min, double max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScore,"CommandObject<List<String>> zrangeByScore(String,String,String,int,int)","[1776, 1779]","{'A1': [(1776, 1779)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrangeByScore(String key, String min, String max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScore,"CommandObject<List<String>> zrevrangeByScore(String,double,double,int,int)","[1781, 1784]","{'A1': [(1781, 1784)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrevrangeByScore(String key, double max, double min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScore,"CommandObject<List<String>> zrevrangeByScore(String,String,String,int,int)","[1786, 1789]","{'A1': [(1786, 1786), (1788, 1789)], 'A99': [(1787, 1787)]}","{'A1': 0.75, 'A99': 0.25}",A1,,"  public final CommandObject<List<String>> zrevrangeByScore(String key, String max, String min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScoreWithScores,"CommandObject<List<Tuple>> zrangeByScoreWithScores(String,double,double)","[1791, 1794]","{'A1': [(1791, 1794)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeByScoreWithScores(String key, double min, double max) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScoreWithScores,"CommandObject<List<Tuple>> zrangeByScoreWithScores(String,String,String)","[1796, 1799]","{'A1': [(1796, 1799)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeByScoreWithScores(String key, String min, String max) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScoreWithScores,"CommandObject<List<Tuple>> zrevrangeByScoreWithScores(String,double,double)","[1801, 1804]","{'A1': [(1801, 1804)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeByScoreWithScores(String key, double max, double min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScoreWithScores,"CommandObject<List<Tuple>> zrevrangeByScoreWithScores(String,String,String)","[1806, 1809]","{'A1': [(1806, 1809)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeByScoreWithScores(String key, String max, String min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScoreWithScores,"CommandObject<List<Tuple>> zrangeByScoreWithScores(String,double,double,int,int)","[1811, 1814]","{'A1': [(1811, 1814)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeByScoreWithScores(String key, double min, double max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScoreWithScores,"CommandObject<List<Tuple>> zrangeByScoreWithScores(String,String,String,int,int)","[1816, 1819]","{'A1': [(1816, 1819)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeByScoreWithScores(String key, String min, String max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScoreWithScores,"CommandObject<List<Tuple>> zrevrangeByScoreWithScores(String,double,double,int,int)","[1821, 1824]","{'A1': [(1821, 1824)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeByScoreWithScores(String key, double max, double min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScoreWithScores,"CommandObject<List<Tuple>> zrevrangeByScoreWithScores(String,String,String,int,int)","[1826, 1829]","{'A1': [(1826, 1829)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeByScoreWithScores(String key, String max, String min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrange,"CommandObject<List<byte[]>> zrange(byte[],long,long)","[1831, 1833]","{'A1': [(1831, 1833)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrange(byte[] key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZRANGE).key(key).add(start).add(stop), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrange,"CommandObject<List<byte[]>> zrevrange(byte[],long,long)","[1835, 1837]","{'A1': [(1835, 1837)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrevrange(byte[] key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZREVRANGE).key(key).add(start).add(stop), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeWithScores,"CommandObject<List<Tuple>> zrangeWithScores(byte[],long,long)","[1839, 1842]","{'A1': [(1839, 1842)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeWithScores(byte[] key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZRANGE).key(key)
        .add(start).add(stop).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeWithScores,"CommandObject<List<Tuple>> zrevrangeWithScores(byte[],long,long)","[1844, 1847]","{'A1': [(1844, 1847)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeWithScores(byte[] key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZREVRANGE).key(key)
        .add(start).add(stop).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrange,"CommandObject<List<byte[]>> zrange(byte[],ZRangeParams)","[1849, 1851]","{'A1': [(1849, 1851)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrange(byte[] key, ZRangeParams zRangeParams) {
    return new CommandObject<>(commandArguments(ZRANGE).key(key).addParams(zRangeParams), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeWithScores,"CommandObject<List<Tuple>> zrangeWithScores(byte[],ZRangeParams)","[1853, 1855]","{'A1': [(1853, 1855)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeWithScores(byte[] key, ZRangeParams zRangeParams) {
    return new CommandObject<>(commandArguments(ZRANGE).key(key).addParams(zRangeParams).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangestore,"CommandObject<Long> zrangestore(byte[],byte[],ZRangeParams)","[1857, 1859]","{'A1': [(1857, 1859)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zrangestore(byte[] dest, byte[] src, ZRangeParams zRangeParams) {
    return new CommandObject<>(commandArguments(ZRANGESTORE).key(dest).add(src).addParams(zRangeParams), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScore,"CommandObject<List<byte[]>> zrangeByScore(byte[],double,double)","[1861, 1863]","{'A1': [(1861, 1863)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrangeByScore(byte[] key, double min, double max) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScore,"CommandObject<List<byte[]>> zrangeByScore(byte[],byte[],byte[])","[1865, 1867]","{'A1': [(1865, 1867)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrangeByScore(byte[] key, byte[] min, byte[] max) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScore,"CommandObject<List<byte[]>> zrevrangeByScore(byte[],double,double)","[1869, 1871]","{'A1': [(1869, 1871)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrevrangeByScore(byte[] key, double max, double min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScore,"CommandObject<List<byte[]>> zrevrangeByScore(byte[],byte[],byte[])","[1873, 1875]","{'A1': [(1873, 1875)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrevrangeByScore(byte[] key, byte[] max, byte[] min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScore,"CommandObject<List<byte[]>> zrangeByScore(byte[],double,double,int,int)","[1877, 1880]","{'A1': [(1877, 1880)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrangeByScore(byte[] key, double min, double max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScore,"CommandObject<List<byte[]>> zrangeByScore(byte[],byte[],byte[],int,int)","[1882, 1885]","{'A1': [(1882, 1885)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrangeByScore(byte[] key, byte[] min, byte[] max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScore,"CommandObject<List<byte[]>> zrevrangeByScore(byte[],double,double,int,int)","[1887, 1890]","{'A1': [(1887, 1890)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrevrangeByScore(byte[] key, double max, double min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScore,"CommandObject<List<byte[]>> zrevrangeByScore(byte[],byte[],byte[],int,int)","[1892, 1895]","{'A1': [(1892, 1895)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrevrangeByScore(byte[] key, byte[] max, byte[] min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScoreWithScores,"CommandObject<List<Tuple>> zrangeByScoreWithScores(byte[],double,double)","[1897, 1900]","{'A1': [(1897, 1900)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeByScoreWithScores(byte[] key, double min, double max) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScoreWithScores,"CommandObject<List<Tuple>> zrangeByScoreWithScores(byte[],byte[],byte[])","[1902, 1905]","{'A1': [(1902, 1905)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeByScoreWithScores(byte[] key, byte[] min, byte[] max) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScoreWithScores,"CommandObject<List<Tuple>> zrevrangeByScoreWithScores(byte[],double,double)","[1907, 1910]","{'A1': [(1907, 1910)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeByScoreWithScores(byte[] key, double max, double min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScoreWithScores,"CommandObject<List<Tuple>> zrevrangeByScoreWithScores(byte[],byte[],byte[])","[1912, 1915]","{'A1': [(1912, 1915)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeByScoreWithScores(byte[] key, byte[] max, byte[] min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScoreWithScores,"CommandObject<List<Tuple>> zrangeByScoreWithScores(byte[],double,double,int,int)","[1917, 1920]","{'A1': [(1917, 1920)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeByScoreWithScores(byte[] key, double min, double max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByScoreWithScores,"CommandObject<List<Tuple>> zrangeByScoreWithScores(byte[],byte[],byte[],int,int)","[1922, 1925]","{'A1': [(1922, 1925)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrangeByScoreWithScores(byte[] key, byte[] min, byte[] max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYSCORE).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScoreWithScores,"CommandObject<List<Tuple>> zrevrangeByScoreWithScores(byte[],double,double,int,int)","[1927, 1930]","{'A1': [(1927, 1930)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeByScoreWithScores(byte[] key, double max, double min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByScoreWithScores,"CommandObject<List<Tuple>> zrevrangeByScoreWithScores(byte[],byte[],byte[],int,int)","[1932, 1935]","{'A1': [(1932, 1935)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zrevrangeByScoreWithScores(byte[] key, byte[] max, byte[] min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYSCORE).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zremrangeByRank,"CommandObject<Long> zremrangeByRank(String,long,long)","[1937, 1939]","{'A1': [(1937, 1939)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zremrangeByRank(String key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZREMRANGEBYRANK).key(key).add(start).add(stop), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zremrangeByScore,"CommandObject<Long> zremrangeByScore(String,double,double)","[1941, 1943]","{'A1': [(1941, 1943)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zremrangeByScore(String key, double min, double max) {
    return new CommandObject<>(commandArguments(ZREMRANGEBYSCORE).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zremrangeByScore,"CommandObject<Long> zremrangeByScore(String,String,String)","[1945, 1947]","{'A1': [(1945, 1947)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zremrangeByScore(String key, String min, String max) {
    return new CommandObject<>(commandArguments(ZREMRANGEBYSCORE).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zremrangeByRank,"CommandObject<Long> zremrangeByRank(byte[],long,long)","[1949, 1951]","{'A1': [(1949, 1951)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zremrangeByRank(byte[] key, long start, long stop) {
    return new CommandObject<>(commandArguments(ZREMRANGEBYRANK).key(key).add(start).add(stop), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zremrangeByScore,"CommandObject<Long> zremrangeByScore(byte[],double,double)","[1953, 1955]","{'A1': [(1953, 1955)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zremrangeByScore(byte[] key, double min, double max) {
    return new CommandObject<>(commandArguments(ZREMRANGEBYSCORE).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zremrangeByScore,"CommandObject<Long> zremrangeByScore(byte[],byte[],byte[])","[1957, 1959]","{'A1': [(1957, 1959)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zremrangeByScore(byte[] key, byte[] min, byte[] max) {
    return new CommandObject<>(commandArguments(ZREMRANGEBYSCORE).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zlexcount,"CommandObject<Long> zlexcount(String,String,String)","[1961, 1963]","{'A1': [(1961, 1963)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zlexcount(String key, String min, String max) {
    return new CommandObject<>(commandArguments(ZLEXCOUNT).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByLex,"CommandObject<List<String>> zrangeByLex(String,String,String)","[1965, 1967]","{'A1': [(1965, 1967)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrangeByLex(String key, String min, String max) {
    return new CommandObject<>(commandArguments(ZRANGEBYLEX).key(key).add(min).add(max), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByLex,"CommandObject<List<String>> zrangeByLex(String,String,String,int,int)","[1969, 1972]","{'A1': [(1969, 1972)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrangeByLex(String key, String min, String max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYLEX).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByLex,"CommandObject<List<String>> zrevrangeByLex(String,String,String)","[1974, 1976]","{'A1': [(1974, 1976)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrevrangeByLex(String key, String max, String min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYLEX).key(key).add(max).add(min), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByLex,"CommandObject<List<String>> zrevrangeByLex(String,String,String,int,int)","[1978, 1981]","{'A1': [(1978, 1981)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zrevrangeByLex(String key, String max, String min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYLEX).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zremrangeByLex,"CommandObject<Long> zremrangeByLex(String,String,String)","[1983, 1985]","{'A1': [(1983, 1985)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zremrangeByLex(String key, String min, String max) {
    return new CommandObject<>(commandArguments(ZREMRANGEBYLEX).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zlexcount,"CommandObject<Long> zlexcount(byte[],byte[],byte[])","[1987, 1989]","{'A1': [(1987, 1989)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zlexcount(byte[] key, byte[] min, byte[] max) {
    return new CommandObject<>(commandArguments(ZLEXCOUNT).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByLex,"CommandObject<List<byte[]>> zrangeByLex(byte[],byte[],byte[])","[1991, 1993]","{'A1': [(1991, 1993)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrangeByLex(byte[] key, byte[] min, byte[] max) {
    return new CommandObject<>(commandArguments(ZRANGEBYLEX).key(key).add(min).add(max), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrangeByLex,"CommandObject<List<byte[]>> zrangeByLex(byte[],byte[],byte[],int,int)","[1995, 1998]","{'A1': [(1995, 1998)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrangeByLex(byte[] key, byte[] min, byte[] max, int offset, int count) {
    return new CommandObject<>(commandArguments(ZRANGEBYLEX).key(key).add(min).add(max)
        .add(LIMIT).add(offset).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByLex,"CommandObject<List<byte[]>> zrevrangeByLex(byte[],byte[],byte[])","[2000, 2002]","{'A1': [(2000, 2002)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrevrangeByLex(byte[] key, byte[] max, byte[] min) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYLEX).key(key).add(max).add(min), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zrevrangeByLex,"CommandObject<List<byte[]>> zrevrangeByLex(byte[],byte[],byte[],int,int)","[2004, 2007]","{'A1': [(2004, 2007)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zrevrangeByLex(byte[] key, byte[] max, byte[] min, int offset, int count) {
    return new CommandObject<>(commandArguments(ZREVRANGEBYLEX).key(key).add(max).add(min)
        .add(LIMIT).add(offset).add(count), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zremrangeByLex,"CommandObject<Long> zremrangeByLex(byte[],byte[],byte[])","[2009, 2011]","{'A1': [(2009, 2011)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zremrangeByLex(byte[] key, byte[] min, byte[] max) {
    return new CommandObject<>(commandArguments(ZREMRANGEBYLEX).key(key).add(min).add(max), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zscan,"CommandObject<ScanResult<Tuple>> zscan(String,String,ScanParams)","[2013, 2015]","{'A1': [(2013, 2015)]}",{'A1': 1.0},A1,,"  public final CommandObject<ScanResult<Tuple>> zscan(String key, String cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(ZSCAN).key(key).add(cursor).addParams(params), BuilderFactory.ZSCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zscan,"CommandObject<ScanResult<Tuple>> zscan(byte[],byte[],ScanParams)","[2017, 2019]","{'A1': [(2017, 2019)]}",{'A1': 1.0},A1,,"  public final CommandObject<ScanResult<Tuple>> zscan(byte[] key, byte[] cursor, ScanParams params) {
    return new CommandObject<>(commandArguments(ZSCAN).key(key).add(cursor).addParams(params), BuilderFactory.ZSCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zdiff,CommandObject<List<String>> zdiff(),"[2021, 2024]","{'A1': [(2021, 2024)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zdiff(String... keys) {
    return new CommandObject<>(commandArguments(ZDIFF).add(keys.length).keys((Object[]) keys),
        BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zdiffWithScores,CommandObject<List<Tuple>> zdiffWithScores(),"[2026, 2029]","{'A1': [(2026, 2029)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zdiffWithScores(String... keys) {
    return new CommandObject<>(commandArguments(ZDIFF).add(keys.length).keys((Object[]) keys)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zdiffStore,CommandObject<Long> zdiffStore(String),"[2034, 2037]","{'A1': [(2034, 2037)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> zdiffStore(String dstkey, String... keys) {
    return zdiffstore(dstkey, keys);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zdiffstore,CommandObject<Long> zdiffstore(String),"[2039, 2042]","{'A1': [(2039, 2042)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zdiffstore(String dstkey, String... keys) {
    return new CommandObject<>(commandArguments(ZDIFFSTORE).key(dstkey)
        .add(keys.length).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zdiff,CommandObject<List<byte[]>> zdiff(),"[2044, 2046]","{'A1': [(2044, 2046)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zdiff(byte[]... keys) {
    return new CommandObject<>(commandArguments(ZDIFF).add(keys.length).keys((Object[]) keys), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zdiffWithScores,CommandObject<List<Tuple>> zdiffWithScores(),"[2048, 2051]","{'A1': [(2048, 2051)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zdiffWithScores(byte[]... keys) {
    return new CommandObject<>(commandArguments(ZDIFF).add(keys.length).keys((Object[]) keys)
        .add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zdiffStore,CommandObject<Long> zdiffStore(byte[]),"[2056, 2059]","{'A1': [(2056, 2059)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> zdiffStore(byte[] dstkey, byte[]... keys) {
    return zdiffstore(dstkey, keys);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zdiffstore,CommandObject<Long> zdiffstore(byte[]),"[2061, 2064]","{'A1': [(2061, 2064)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zdiffstore(byte[] dstkey, byte[]... keys) {
    return new CommandObject<>(commandArguments(ZDIFFSTORE).key(dstkey)
        .add(keys.length).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zinter,CommandObject<List<String>> zinter(ZParams),"[2066, 2069]","{'A1': [(2066, 2069)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zinter(ZParams params, String... keys) {
    return new CommandObject<>(commandArguments(ZINTER).add(keys.length).keys((Object[]) keys)
        .addParams(params), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zinterWithScores,CommandObject<List<Tuple>> zinterWithScores(ZParams),"[2071, 2074]","{'A1': [(2071, 2074)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zinterWithScores(ZParams params, String... keys) {
    return new CommandObject<>(commandArguments(ZINTER).add(keys.length).keys((Object[]) keys)
        .addParams(params).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zinterstore,CommandObject<Long> zinterstore(String),"[2076, 2079]","{'A1': [(2076, 2079)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zinterstore(String dstkey, String... keys) {
    return new CommandObject<>(commandArguments(ZINTERSTORE).key(dstkey)
        .add(keys.length).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zinterstore,"CommandObject<Long> zinterstore(String,ZParams)","[2081, 2084]","{'A1': [(2081, 2084)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zinterstore(String dstkey, ZParams params, String... keys) {
    return new CommandObject<>(commandArguments(ZINTERSTORE).key(dstkey)
        .add(keys.length).keys((Object[]) keys).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zintercard,CommandObject<Long> zintercard(),"[2086, 2089]","{'A12': [(2086, 2089)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> zintercard(String... keys) {
    return new CommandObject<>(commandArguments(ZINTERCARD).add(keys.length)
        .keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zintercard,CommandObject<Long> zintercard(long),"[2091, 2094]","{'A12': [(2091, 2094)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> zintercard(long limit, String... keys) {
    return new CommandObject<>(commandArguments(ZINTERCARD).add(keys.length)
        .keys((Object[]) keys).add(LIMIT).add(limit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zinterstore,CommandObject<Long> zinterstore(byte[]),"[2096, 2099]","{'A1': [(2096, 2099)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zinterstore(byte[] dstkey, byte[]... sets) {
    return new CommandObject<>(commandArguments(ZINTERSTORE).key(dstkey)
        .add(sets.length).keys((Object[]) sets), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zinterstore,"CommandObject<Long> zinterstore(byte[],ZParams)","[2101, 2104]","{'A1': [(2101, 2104)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zinterstore(byte[] dstkey, ZParams params, byte[]... sets) {
    return new CommandObject<>(commandArguments(ZINTERSTORE).key(dstkey)
        .add(sets.length).keys((Object[]) sets).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zintercard,CommandObject<Long> zintercard(),"[2106, 2109]","{'A12': [(2106, 2109)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> zintercard(byte[]... keys) {
    return new CommandObject<>(commandArguments(ZINTERCARD).add(keys.length)
        .keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zintercard,CommandObject<Long> zintercard(long),"[2111, 2114]","{'A12': [(2111, 2114)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> zintercard(long limit, byte[]... keys) {
    return new CommandObject<>(commandArguments(ZINTERCARD).add(keys.length)
        .keys((Object[]) keys).add(LIMIT).add(limit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zinter,CommandObject<List<byte[]>> zinter(ZParams),"[2116, 2119]","{'A1': [(2116, 2119)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zinter(ZParams params, byte[]... keys) {
    return new CommandObject<>(commandArguments(ZINTER).add(keys.length).keys((Object[]) keys)
        .addParams(params), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zinterWithScores,CommandObject<List<Tuple>> zinterWithScores(ZParams),"[2121, 2124]","{'A1': [(2121, 2124)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zinterWithScores(ZParams params, byte[]... keys) {
    return new CommandObject<>(commandArguments(ZINTER).add(keys.length).keys((Object[]) keys)
        .addParams(params).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zunionstore,CommandObject<Long> zunionstore(String),"[2126, 2129]","{'A1': [(2126, 2129)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zunionstore(String dstkey, String... sets) {
    return new CommandObject<>(commandArguments(ZUNIONSTORE).key(dstkey)
        .add(sets.length).keys((Object[]) sets), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zunionstore,"CommandObject<Long> zunionstore(String,ZParams)","[2131, 2134]","{'A1': [(2131, 2134)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zunionstore(String dstkey, ZParams params, String... sets) {
    return new CommandObject<>(commandArguments(ZUNIONSTORE).key(dstkey)
        .add(sets.length).keys((Object[]) sets).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zunion,CommandObject<List<String>> zunion(ZParams),"[2136, 2139]","{'A1': [(2136, 2139)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> zunion(ZParams params, String... keys) {
    return new CommandObject<>(commandArguments(ZUNION).add(keys.length).keys((Object[]) keys)
        .addParams(params), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zunionWithScores,CommandObject<List<Tuple>> zunionWithScores(ZParams),"[2141, 2144]","{'A1': [(2141, 2144)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zunionWithScores(ZParams params, String... keys) {
    return new CommandObject<>(commandArguments(ZUNION).add(keys.length).keys((Object[]) keys)
        .addParams(params).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zunionstore,CommandObject<Long> zunionstore(byte[]),"[2146, 2149]","{'A1': [(2146, 2149)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zunionstore(byte[] dstkey, byte[]... sets) {
    return new CommandObject<>(commandArguments(ZUNIONSTORE).key(dstkey)
        .add(sets.length).keys((Object[]) sets), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zunionstore,"CommandObject<Long> zunionstore(byte[],ZParams)","[2151, 2154]","{'A1': [(2151, 2154)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> zunionstore(byte[] dstkey, ZParams params, byte[]... sets) {
    return new CommandObject<>(commandArguments(ZUNIONSTORE).key(dstkey)
        .add(sets.length).keys((Object[]) sets).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zunion,CommandObject<List<byte[]>> zunion(ZParams),"[2156, 2159]","{'A1': [(2156, 2159)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> zunion(ZParams params, byte[]... keys) {
    return new CommandObject<>(commandArguments(ZUNION).add(keys.length).keys((Object[]) keys)
        .addParams(params), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zunionWithScores,CommandObject<List<Tuple>> zunionWithScores(ZParams),"[2161, 2164]","{'A1': [(2161, 2164)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> zunionWithScores(ZParams params, byte[]... keys) {
    return new CommandObject<>(commandArguments(ZUNION).add(keys.length).keys((Object[]) keys)
        .addParams(params).add(WITHSCORES), getTupleListBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zmpop,"CommandObject<KeyValue<String, List<Tuple>>> zmpop(SortedSetOption)","[2166, 2169]","{'A1': [(2166, 2169)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, List<Tuple>>> zmpop(SortedSetOption option, String... keys) {
    return new CommandObject<>(commandArguments(ZMPOP).add(keys.length).keys((Object[]) keys)
        .add(option), BuilderFactory.KEYED_TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zmpop,"CommandObject<KeyValue<String, List<Tuple>>> zmpop(SortedSetOption,int)","[2171, 2174]","{'A1': [(2171, 2174)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, List<Tuple>>> zmpop(SortedSetOption option, int count, String... keys) {
    return new CommandObject<>(commandArguments(ZMPOP).add(keys.length).keys((Object[]) keys)
        .add(option).add(COUNT).add(count), BuilderFactory.KEYED_TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bzmpop,"CommandObject<KeyValue<String, List<Tuple>>> bzmpop(double,SortedSetOption)","[2176, 2179]","{'A1': [(2176, 2179)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, List<Tuple>>> bzmpop(double timeout, SortedSetOption option, String... keys) {
    return new CommandObject<>(commandArguments(BZMPOP).blocking().add(timeout).add(keys.length)
        .keys((Object[]) keys).add(option), BuilderFactory.KEYED_TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bzmpop,"CommandObject<KeyValue<String, List<Tuple>>> bzmpop(double,SortedSetOption,int)","[2181, 2184]","{'A1': [(2181, 2184)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<String, List<Tuple>>> bzmpop(double timeout, SortedSetOption option, int count, String... keys) {
    return new CommandObject<>(commandArguments(BZMPOP).blocking().add(timeout).add(keys.length)
        .keys((Object[]) keys).add(option).add(COUNT).add(count), BuilderFactory.KEYED_TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zmpop,"CommandObject<KeyValue<byte[], List<Tuple>>> zmpop(SortedSetOption)","[2186, 2189]","{'A1': [(2186, 2189)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], List<Tuple>>> zmpop(SortedSetOption option, byte[]... keys) {
    return new CommandObject<>(commandArguments(ZMPOP).add(keys.length).keys((Object[]) keys)
        .add(option), BuilderFactory.BINARY_KEYED_TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,zmpop,"CommandObject<KeyValue<byte[], List<Tuple>>> zmpop(SortedSetOption,int)","[2191, 2194]","{'A1': [(2191, 2194)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], List<Tuple>>> zmpop(SortedSetOption option, int count, byte[]... keys) {
    return new CommandObject<>(commandArguments(ZMPOP).add(keys.length).keys((Object[]) keys)
        .add(option).add(COUNT).add(count), BuilderFactory.BINARY_KEYED_TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bzmpop,"CommandObject<KeyValue<byte[], List<Tuple>>> bzmpop(double,SortedSetOption)","[2196, 2199]","{'A1': [(2196, 2199)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], List<Tuple>>> bzmpop(double timeout, SortedSetOption option, byte[]... keys) {
    return new CommandObject<>(commandArguments(BZMPOP).blocking().add(timeout).add(keys.length)
        .keys((Object[]) keys).add(option), BuilderFactory.BINARY_KEYED_TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bzmpop,"CommandObject<KeyValue<byte[], List<Tuple>>> bzmpop(double,SortedSetOption,int)","[2201, 2204]","{'A1': [(2201, 2204)]}",{'A1': 1.0},A1,,"  public final CommandObject<KeyValue<byte[], List<Tuple>>> bzmpop(double timeout, SortedSetOption option, int count, byte[]... keys) {
    return new CommandObject<>(commandArguments(BZMPOP).blocking().add(timeout).add(keys.length)
        .keys((Object[]) keys).add(option).add(COUNT).add(count), BuilderFactory.BINARY_KEYED_TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getTupleListBuilder,Builder<List<Tuple>> getTupleListBuilder(),"[2206, 2208]","{'A1': [(2206, 2208)]}",{'A1': 1.0},A1,,"  private Builder<List<Tuple>> getTupleListBuilder() {
    return protocol == RedisProtocol.RESP3 ? BuilderFactory.TUPLE_LIST_RESP3 : BuilderFactory.TUPLE_LIST;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geoadd,"CommandObject<Long> geoadd(String,double,double,String)","[2212, 2214]","{'A1': [(2212, 2214)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> geoadd(String key, double longitude, double latitude, String member) {
    return new CommandObject<>(commandArguments(GEOADD).key(key).add(longitude).add(latitude).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geoadd,"CommandObject<Long> geoadd(String,Map<String, GeoCoordinate>)","[2216, 2218]","{'A1': [(2216, 2218)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> geoadd(String key, Map<String, GeoCoordinate> memberCoordinateMap) {
    return new CommandObject<>(addGeoCoordinateFlatMapArgs(commandArguments(GEOADD).key(key), memberCoordinateMap), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geoadd,"CommandObject<Long> geoadd(String,GeoAddParams,Map<String, GeoCoordinate>)","[2220, 2222]","{'A1': [(2220, 2222)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> geoadd(String key, GeoAddParams params, Map<String, GeoCoordinate> memberCoordinateMap) {
    return new CommandObject<>(addGeoCoordinateFlatMapArgs(commandArguments(GEOADD).key(key).addParams(params), memberCoordinateMap), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geodist,"CommandObject<Double> geodist(String,String,String)","[2224, 2226]","{'A1': [(2224, 2226)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> geodist(String key, String member1, String member2) {
    return new CommandObject<>(commandArguments(GEODIST).key(key).add(member1).add(member2), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geodist,"CommandObject<Double> geodist(String,String,String,GeoUnit)","[2228, 2230]","{'A1': [(2228, 2230)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> geodist(String key, String member1, String member2, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEODIST).key(key).add(member1).add(member2).add(unit), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geohash,CommandObject<List<String>> geohash(String),"[2232, 2234]","{'A1': [(2232, 2234)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> geohash(String key, String... members) {
    return new CommandObject<>(commandArguments(GEOHASH).key(key).addObjects((Object[]) members), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geopos,CommandObject<List<GeoCoordinate>> geopos(String),"[2236, 2239]","{'A1': [(2236, 2239)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoCoordinate>> geopos(String key, String... members) {
    return new CommandObject<>(commandArguments(GEOPOS).key(key).addObjects((Object[]) members),
        BuilderFactory.GEO_COORDINATE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geoadd,"CommandObject<Long> geoadd(byte[],double,double,byte[])","[2241, 2243]","{'A1': [(2241, 2243)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> geoadd(byte[] key, double longitude, double latitude, byte[] member) {
    return new CommandObject<>(commandArguments(GEOADD).key(key).add(longitude).add(latitude).add(member), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geoadd,"CommandObject<Long> geoadd(byte[],Map<byte[], GeoCoordinate>)","[2245, 2247]","{'A1': [(2245, 2247)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> geoadd(byte[] key, Map<byte[], GeoCoordinate> memberCoordinateMap) {
    return new CommandObject<>(addGeoCoordinateFlatMapArgs(commandArguments(GEOADD).key(key), memberCoordinateMap), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geoadd,"CommandObject<Long> geoadd(byte[],GeoAddParams,Map<byte[], GeoCoordinate>)","[2249, 2251]","{'A1': [(2249, 2251)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> geoadd(byte[] key, GeoAddParams params, Map<byte[], GeoCoordinate> memberCoordinateMap) {
    return new CommandObject<>(addGeoCoordinateFlatMapArgs(commandArguments(GEOADD).key(key).addParams(params), memberCoordinateMap), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geodist,"CommandObject<Double> geodist(byte[],byte[],byte[])","[2253, 2255]","{'A1': [(2253, 2255)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> geodist(byte[] key, byte[] member1, byte[] member2) {
    return new CommandObject<>(commandArguments(GEODIST).key(key).add(member1).add(member2), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geodist,"CommandObject<Double> geodist(byte[],byte[],byte[],GeoUnit)","[2257, 2259]","{'A1': [(2257, 2259)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> geodist(byte[] key, byte[] member1, byte[] member2, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEODIST).key(key).add(member1).add(member2).add(unit), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geohash,CommandObject<List<byte[]>> geohash(byte[]),"[2261, 2263]","{'A1': [(2261, 2263)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<byte[]>> geohash(byte[] key, byte[]... members) {
    return new CommandObject<>(commandArguments(GEOHASH).key(key).addObjects((Object[]) members), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geopos,CommandObject<List<GeoCoordinate>> geopos(byte[]),"[2265, 2268]","{'A1': [(2265, 2268)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoCoordinate>> geopos(byte[] key, byte[]... members) {
    return new CommandObject<>(commandArguments(GEOPOS).key(key).addObjects((Object[]) members),
        BuilderFactory.GEO_COORDINATE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadius,"CommandObject<List<GeoRadiusResponse>> georadius(String,double,double,double,GeoUnit)","[2270, 2273]","{'A1': [(2270, 2273)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadius(String key, double longitude, double latitude, double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEORADIUS).key(key).add(longitude).add(latitude)
        .add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadius,"CommandObject<List<GeoRadiusResponse>> georadius(String,double,double,double,GeoUnit,GeoRadiusParam)","[2275, 2279]","{'A1': [(2275, 2279)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadius(String key,
      double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return new CommandObject<>(commandArguments(GEORADIUS).key(key).add(longitude).add(latitude)
        .add(radius).add(unit).addParams(param), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusReadonly,"CommandObject<List<GeoRadiusResponse>> georadiusReadonly(String,double,double,double,GeoUnit)","[2281, 2284]","{'A1': [(2281, 2284)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusReadonly(String key, double longitude, double latitude, double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEORADIUS_RO).key(key).add(longitude).add(latitude)
        .add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusReadonly,"CommandObject<List<GeoRadiusResponse>> georadiusReadonly(String,double,double,double,GeoUnit,GeoRadiusParam)","[2286, 2290]","{'A1': [(2286, 2290)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusReadonly(String key,
      double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return new CommandObject<>(commandArguments(GEORADIUS_RO).key(key).add(longitude).add(latitude)
        .add(radius).add(unit).addParams(param), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusStore,"CommandObject<Long> georadiusStore(String,double,double,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[2292, 2296]","{'A1': [(2292, 2296)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> georadiusStore(String key, double longitude, double latitude,
      double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return new CommandObject<>(commandArguments(GEORADIUS).key(key).add(longitude).add(latitude)
        .add(radius).add(unit).addParams(param).addParams(storeParam), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMember,"CommandObject<List<GeoRadiusResponse>> georadiusByMember(String,String,double,GeoUnit)","[2298, 2301]","{'A1': [(2298, 2301)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusByMember(String key, String member, double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER).key(key).add(member)
        .add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMember,"CommandObject<List<GeoRadiusResponse>> georadiusByMember(String,String,double,GeoUnit,GeoRadiusParam)","[2303, 2307]","{'A1': [(2303, 2307)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusByMember(String key,
      String member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER).key(key).add(member)
        .add(radius).add(unit).addParams(param), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMemberReadonly,"CommandObject<List<GeoRadiusResponse>> georadiusByMemberReadonly(String,String,double,GeoUnit)","[2309, 2312]","{'A1': [(2309, 2312)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusByMemberReadonly(String key, String member, double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER_RO).key(key).add(member)
        .add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMemberReadonly,"CommandObject<List<GeoRadiusResponse>> georadiusByMemberReadonly(String,String,double,GeoUnit,GeoRadiusParam)","[2314, 2318]","{'A1': [(2314, 2318)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusByMemberReadonly(String key,
      String member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER_RO).key(key).add(member)
        .add(radius).add(unit).addParams(param), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMemberStore,"CommandObject<Long> georadiusByMemberStore(String,String,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[2320, 2324]","{'A1': [(2320, 2324)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> georadiusByMemberStore(String key, String member,
      double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER).key(key).add(member)
        .add(radius).add(unit).addParams(param).addParams(storeParam), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadius,"CommandObject<List<GeoRadiusResponse>> georadius(byte[],double,double,double,GeoUnit)","[2326, 2329]","{'A1': [(2326, 2329)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadius(byte[] key, double longitude, double latitude, double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEORADIUS).key(key).add(longitude).add(latitude)
        .add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadius,"CommandObject<List<GeoRadiusResponse>> georadius(byte[],double,double,double,GeoUnit,GeoRadiusParam)","[2331, 2335]","{'A1': [(2331, 2335)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadius(byte[] key,
      double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return new CommandObject<>(commandArguments(GEORADIUS).key(key).add(longitude).add(latitude)
        .add(radius).add(unit).addParams(param), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusReadonly,"CommandObject<List<GeoRadiusResponse>> georadiusReadonly(byte[],double,double,double,GeoUnit)","[2337, 2341]","{'A1': [(2337, 2341)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusReadonly(byte[] key,
      double longitude, double latitude, double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEORADIUS_RO).key(key).add(longitude).add(latitude)
        .add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusReadonly,"CommandObject<List<GeoRadiusResponse>> georadiusReadonly(byte[],double,double,double,GeoUnit,GeoRadiusParam)","[2343, 2347]","{'A1': [(2343, 2347)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusReadonly(byte[] key,
      double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusParam param) {
    return new CommandObject<>(commandArguments(GEORADIUS_RO).key(key).add(longitude).add(latitude)
        .add(radius).add(unit).addParams(param), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusStore,"CommandObject<Long> georadiusStore(byte[],double,double,double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[2349, 2353]","{'A1': [(2349, 2353)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> georadiusStore(byte[] key, double longitude, double latitude,
      double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return new CommandObject<>(commandArguments(GEORADIUS).key(key).add(longitude).add(latitude)
        .add(radius).add(unit).addParams(param).addParams(storeParam), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMember,"CommandObject<List<GeoRadiusResponse>> georadiusByMember(byte[],byte[],double,GeoUnit)","[2355, 2358]","{'A1': [(2355, 2358)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusByMember(byte[] key, byte[] member, double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER).key(key).add(member)
        .add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMember,"CommandObject<List<GeoRadiusResponse>> georadiusByMember(byte[],byte[],double,GeoUnit,GeoRadiusParam)","[2360, 2363]","{'A1': [(2360, 2363)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusByMember(byte[] key, byte[] member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER).key(key).add(member)
        .add(radius).add(unit).addParams(param), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMemberReadonly,"CommandObject<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[],byte[],double,GeoUnit)","[2365, 2368]","{'A1': [(2365, 2368)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[] key, byte[] member, double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER_RO).key(key).add(member)
        .add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMemberReadonly,"CommandObject<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[],byte[],double,GeoUnit,GeoRadiusParam)","[2370, 2373]","{'A1': [(2370, 2373)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<GeoRadiusResponse>> georadiusByMemberReadonly(byte[] key, byte[] member, double radius, GeoUnit unit, GeoRadiusParam param) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER_RO).key(key).add(member)
        .add(radius).add(unit).addParams(param), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,georadiusByMemberStore,"CommandObject<Long> georadiusByMemberStore(byte[],byte[],double,GeoUnit,GeoRadiusParam,GeoRadiusStoreParam)","[2375, 2379]","{'A1': [(2375, 2379)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> georadiusByMemberStore(byte[] key, byte[] member,
      double radius, GeoUnit unit, GeoRadiusParam param, GeoRadiusStoreParam storeParam) {
    return new CommandObject<>(commandArguments(GEORADIUSBYMEMBER).key(key).add(member)
        .add(radius).add(unit).addParams(param).addParams(storeParam), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(String,String,double,GeoUnit)","[2381, 2385]","{'A12': [(2381, 2385)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(String key, String member,
      double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key).add(FROMMEMBER).add(member)
        .add(BYRADIUS).add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(String,GeoCoordinate,double,GeoUnit)","[2387, 2392]","{'A12': [(2387, 2392)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(String key, GeoCoordinate coord,
      double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key)
        .add(FROMLONLAT).add(coord.getLongitude()).add(coord.getLatitude())
        .add(BYRADIUS).add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(String,String,double,double,GeoUnit)","[2394, 2398]","{'A12': [(2394, 2398)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(String key, String member,
      double width, double height, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key).add(FROMMEMBER).add(member)
        .add(BYBOX).add(width).add(height).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(String,GeoCoordinate,double,double,GeoUnit)","[2400, 2405]","{'A12': [(2400, 2405)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(String key, GeoCoordinate coord,
      double width, double height, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key)
        .add(FROMLONLAT).add(coord.getLongitude()).add(coord.getLatitude())
        .add(BYBOX).add(width).add(height).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(String,GeoSearchParam)","[2407, 2410]","{'A12': [(2407, 2410)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(String key, GeoSearchParam params) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key).addParams(params),
        BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(String,String,String,double,GeoUnit)","[2412, 2416]","{'A12': [(2412, 2416)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(String dest, String src, String member,
      double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src).add(FROMMEMBER).add(member)
        .add(BYRADIUS).add(radius).add(unit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(String,String,GeoCoordinate,double,GeoUnit)","[2418, 2422]","{'A12': [(2418, 2422)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(String dest, String src, GeoCoordinate coord,
      double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src).add(FROMLONLAT).add(coord.getLongitude())
        .add(coord.getLatitude()).add(BYRADIUS).add(radius).add(unit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(String,String,String,double,double,GeoUnit)","[2424, 2428]","{'A12': [(2424, 2428)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(String dest, String src, String member,
      double width, double height, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src).add(FROMMEMBER).add(member)
        .add(BYBOX).add(width).add(height).add(unit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(String,String,GeoCoordinate,double,double,GeoUnit)","[2430, 2435]","{'A12': [(2430, 2435)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(String dest, String src, GeoCoordinate coord,
      double width, double height, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src)
        .add(FROMLONLAT).add(coord.getLongitude()).add(coord.getLatitude())
        .add(BYBOX).add(width).add(height).add(unit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(String,String,GeoSearchParam)","[2437, 2439]","{'A12': [(2437, 2439)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(String dest, String src, GeoSearchParam params) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStoreStoreDist,"CommandObject<Long> geosearchStoreStoreDist(String,String,GeoSearchParam)","[2441, 2443]","{'A12': [(2441, 2443)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStoreStoreDist(String dest, String src, GeoSearchParam params) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src).addParams(params).add(STOREDIST), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(byte[],byte[],double,GeoUnit)","[2445, 2449]","{'A12': [(2445, 2449)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(byte[] key, byte[] member,
      double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key).add(FROMMEMBER).add(member)
        .add(BYRADIUS).add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(byte[],GeoCoordinate,double,GeoUnit)","[2451, 2456]","{'A12': [(2451, 2456)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(byte[] key, GeoCoordinate coord,
      double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key)
        .add(FROMLONLAT).add(coord.getLongitude()).add(coord.getLatitude())
        .add(BYRADIUS).add(radius).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(byte[],byte[],double,double,GeoUnit)","[2458, 2462]","{'A12': [(2458, 2462)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(byte[] key, byte[] member,
      double width, double height, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key).add(FROMMEMBER).add(member)
        .add(BYBOX).add(width).add(height).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(byte[],GeoCoordinate,double,double,GeoUnit)","[2464, 2469]","{'A12': [(2464, 2469)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(byte[] key, GeoCoordinate coord,
      double width, double height, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key)
        .add(FROMLONLAT).add(coord.getLongitude()).add(coord.getLatitude())
        .add(BYBOX).add(width).add(height).add(unit), BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearch,"CommandObject<List<GeoRadiusResponse>> geosearch(byte[],GeoSearchParam)","[2471, 2474]","{'A12': [(2471, 2474)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<GeoRadiusResponse>> geosearch(byte[] key, GeoSearchParam params) {
    return new CommandObject<>(commandArguments(GEOSEARCH).key(key).addParams(params),
        BuilderFactory.GEORADIUS_WITH_PARAMS_RESULT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(byte[],byte[],byte[],double,GeoUnit)","[2476, 2480]","{'A12': [(2476, 2480)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(byte[] dest, byte[] src, byte[] member,
      double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src).add(FROMMEMBER).add(member)
        .add(BYRADIUS).add(radius).add(unit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(byte[],byte[],GeoCoordinate,double,GeoUnit)","[2482, 2487]","{'A12': [(2482, 2487)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(byte[] dest, byte[] src, GeoCoordinate coord,
      double radius, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src)
        .add(FROMLONLAT).add(coord.getLongitude()).add(coord.getLatitude())
        .add(BYRADIUS).add(radius).add(unit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(byte[],byte[],byte[],double,double,GeoUnit)","[2489, 2493]","{'A12': [(2489, 2493)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(byte[] dest, byte[] src, byte[] member,
      double width, double height, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src).add(FROMMEMBER).add(member)
        .add(BYBOX).add(width).add(height).add(unit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(byte[],byte[],GeoCoordinate,double,double,GeoUnit)","[2495, 2500]","{'A12': [(2495, 2500)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(byte[] dest, byte[] src, GeoCoordinate coord,
      double width, double height, GeoUnit unit) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src)
        .add(FROMLONLAT).add(coord.getLongitude()).add(coord.getLatitude())
        .add(BYBOX).add(width).add(height).add(unit), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStore,"CommandObject<Long> geosearchStore(byte[],byte[],GeoSearchParam)","[2502, 2504]","{'A12': [(2502, 2504)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStore(byte[] dest, byte[] src, GeoSearchParam params) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,geosearchStoreStoreDist,"CommandObject<Long> geosearchStoreStoreDist(byte[],byte[],GeoSearchParam)","[2506, 2508]","{'A12': [(2506, 2508)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> geosearchStoreStoreDist(byte[] dest, byte[] src, GeoSearchParam params) {
    return new CommandObject<>(commandArguments(GEOSEARCHSTORE).key(dest).add(src).addParams(params).add(STOREDIST), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pfadd,CommandObject<Long> pfadd(String),"[2512, 2514]","{'A1': [(2512, 2514)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pfadd(String key, String... elements) {
    return new CommandObject<>(commandArguments(PFADD).key(key).addObjects((Object[]) elements), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pfmerge,CommandObject<String> pfmerge(String),"[2516, 2518]","{'A1': [(2516, 2518)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> pfmerge(String destkey, String... sourcekeys) {
    return new CommandObject<>(commandArguments(PFMERGE).key(destkey).keys((Object[]) sourcekeys), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pfadd,CommandObject<Long> pfadd(byte[]),"[2520, 2522]","{'A1': [(2520, 2522)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pfadd(byte[] key, byte[]... elements) {
    return new CommandObject<>(commandArguments(PFADD).key(key).addObjects((Object[]) elements), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pfmerge,CommandObject<String> pfmerge(byte[]),"[2524, 2526]","{'A1': [(2524, 2526)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> pfmerge(byte[] destkey, byte[]... sourcekeys) {
    return new CommandObject<>(commandArguments(PFMERGE).key(destkey).keys((Object[]) sourcekeys), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pfcount,CommandObject<Long> pfcount(String),"[2528, 2530]","{'A1': [(2528, 2530)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pfcount(String key) {
    return new CommandObject<>(commandArguments(PFCOUNT).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pfcount,CommandObject<Long> pfcount(),"[2532, 2534]","{'A1': [(2532, 2534)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pfcount(String... keys) {
    return new CommandObject<>(commandArguments(PFCOUNT).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pfcount,CommandObject<Long> pfcount(byte[]),"[2536, 2538]","{'A1': [(2536, 2538)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pfcount(byte[] key) {
    return new CommandObject<>(commandArguments(PFCOUNT).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,pfcount,CommandObject<Long> pfcount(),"[2540, 2542]","{'A1': [(2540, 2542)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> pfcount(byte[]... keys) {
    return new CommandObject<>(commandArguments(PFCOUNT).keys((Object[]) keys), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xadd,"CommandObject<StreamEntryID> xadd(String,StreamEntryID,Map<String, String>)","[2546, 2549]","{'A1': [(2546, 2549)]}",{'A1': 1.0},A1,,"  public final CommandObject<StreamEntryID> xadd(String key, StreamEntryID id, Map<String, String> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(XADD).key(key).add(id == null ? StreamEntryID.NEW_ENTRY : id), hash),
        BuilderFactory.STREAM_ENTRY_ID);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xadd,"CommandObject<StreamEntryID> xadd(String,XAddParams,Map<String, String>)","[2551, 2554]","{'A1': [(2551, 2554)]}",{'A1': 1.0},A1,,"  public final CommandObject<StreamEntryID> xadd(String key, XAddParams params, Map<String, String> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(XADD).key(key).addParams(params), hash),
        BuilderFactory.STREAM_ENTRY_ID);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xlen,CommandObject<Long> xlen(String),"[2556, 2558]","{'A1': [(2556, 2558)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xlen(String key) {
    return new CommandObject<>(commandArguments(XLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xadd,"CommandObject<byte[]> xadd(byte[],XAddParams,Map<byte[], byte[]>)","[2560, 2563]","{'A1': [(2560, 2563)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> xadd(byte[] key, XAddParams params, Map<byte[], byte[]> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(XADD).key(key).addParams(params), hash),
        BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xlen,CommandObject<Long> xlen(byte[]),"[2565, 2567]","{'A1': [(2565, 2567)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xlen(byte[] key) {
    return new CommandObject<>(commandArguments(XLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrange,"CommandObject<List<StreamEntry>> xrange(String,StreamEntryID,StreamEntryID)","[2569, 2572]","{'A1': [(2569, 2572)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamEntry>> xrange(String key, StreamEntryID start, StreamEntryID end) {
    return new CommandObject<>(commandArguments(XRANGE).key(key).add(start == null ? ""-"" : start).add(end == null ? ""+"" : end),
        BuilderFactory.STREAM_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrange,"CommandObject<List<StreamEntry>> xrange(String,StreamEntryID,StreamEntryID,int)","[2574, 2577]","{'A1': [(2574, 2577)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamEntry>> xrange(String key, StreamEntryID start, StreamEntryID end, int count) {
    return new CommandObject<>(commandArguments(XRANGE).key(key).add(start == null ? ""-"" : start).add(end == null ? ""+"" : end)
        .add(COUNT).add(count), BuilderFactory.STREAM_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrevrange,"CommandObject<List<StreamEntry>> xrevrange(String,StreamEntryID,StreamEntryID)","[2579, 2582]","{'A1': [(2579, 2582)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamEntry>> xrevrange(String key, StreamEntryID end, StreamEntryID start) {
    return new CommandObject<>(commandArguments(XREVRANGE).key(key).add(end == null ? ""+"" : end).add(start == null ? ""-"" : start),
        BuilderFactory.STREAM_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrevrange,"CommandObject<List<StreamEntry>> xrevrange(String,StreamEntryID,StreamEntryID,int)","[2584, 2587]","{'A1': [(2584, 2587)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamEntry>> xrevrange(String key, StreamEntryID end, StreamEntryID start, int count) {
    return new CommandObject<>(commandArguments(XREVRANGE).key(key).add(end == null ? ""+"" : end).add(start == null ? ""-"" : start)
        .add(COUNT).add(count), BuilderFactory.STREAM_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrange,"CommandObject<List<StreamEntry>> xrange(String,String,String)","[2589, 2591]","{'A1': [(2589, 2591)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamEntry>> xrange(String key, String start, String end) {
    return new CommandObject<>(commandArguments(XRANGE).key(key).add(start).add(end), BuilderFactory.STREAM_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrange,"CommandObject<List<StreamEntry>> xrange(String,String,String,int)","[2593, 2595]","{'A1': [(2593, 2595)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamEntry>> xrange(String key, String start, String end, int count) {
    return new CommandObject<>(commandArguments(XRANGE).key(key).add(start).add(end).add(COUNT).add(count), BuilderFactory.STREAM_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrevrange,"CommandObject<List<StreamEntry>> xrevrange(String,String,String)","[2597, 2599]","{'A1': [(2597, 2599)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamEntry>> xrevrange(String key, String end, String start) {
    return new CommandObject<>(commandArguments(XREVRANGE).key(key).add(end).add(start), BuilderFactory.STREAM_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrevrange,"CommandObject<List<StreamEntry>> xrevrange(String,String,String,int)","[2601, 2603]","{'A1': [(2601, 2603)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamEntry>> xrevrange(String key, String end, String start, int count) {
    return new CommandObject<>(commandArguments(XREVRANGE).key(key).add(end).add(start).add(COUNT).add(count), BuilderFactory.STREAM_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrange,"CommandObject<List<Object>> xrange(byte[],byte[],byte[])","[2605, 2608]","{'A1': [(2605, 2608)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Object>> xrange(byte[] key, byte[] start, byte[] end) {
    return new CommandObject<>(commandArguments(XRANGE).key(key).add(start == null ? ""-"" : start).add(end == null ? ""+"" : end),
        BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrange,"CommandObject<List<Object>> xrange(byte[],byte[],byte[],int)","[2610, 2613]","{'A1': [(2610, 2613)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Object>> xrange(byte[] key, byte[] start, byte[] end, int count) {
    return new CommandObject<>(commandArguments(XRANGE).key(key).add(start == null ? ""-"" : start).add(end == null ? ""+"" : end)
        .add(COUNT).add(count), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrevrange,"CommandObject<List<Object>> xrevrange(byte[],byte[],byte[])","[2615, 2618]","{'A1': [(2615, 2618)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Object>> xrevrange(byte[] key, byte[] end, byte[] start) {
    return new CommandObject<>(commandArguments(XREVRANGE).key(key).add(end == null ? ""+"" : end).add(start == null ? ""-"" : start),
        BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xrevrange,"CommandObject<List<Object>> xrevrange(byte[],byte[],byte[],int)","[2620, 2623]","{'A1': [(2620, 2623)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Object>> xrevrange(byte[] key, byte[] end, byte[] start, int count) {
    return new CommandObject<>(commandArguments(XREVRANGE).key(key).add(end == null ? ""+"" : end).add(start == null ? ""-"" : start)
        .add(COUNT).add(count), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xack,"CommandObject<Long> xack(String,String)","[2625, 2627]","{'A1': [(2625, 2627)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xack(String key, String group, StreamEntryID... ids) {
    return new CommandObject<>(commandArguments(XACK).key(key).add(group).addObjects((Object[]) ids), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xack,"CommandObject<Long> xack(byte[],byte[])","[2629, 2631]","{'A1': [(2629, 2631)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xack(byte[] key, byte[] group, byte[]... ids) {
    return new CommandObject<>(commandArguments(XACK).key(key).add(group).addObjects((Object[]) ids), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupCreate,"CommandObject<String> xgroupCreate(String,String,StreamEntryID,boolean)","[2633, 2638]","{'A1': [(2634, 2634), (2636, 2638)], 'A12': [(2633, 2633), (2635, 2635)]}","{'A1': 0.6666666666666666, 'A12': 0.3333333333333333}",A1,,"  public final CommandObject<String> xgroupCreate(String key, String groupName, StreamEntryID id, boolean makeStream) {
    CommandArguments args = commandArguments(XGROUP).add(CREATE).key(key)
        .add(groupName).add(id == null ? ""0-0"" : id);
    if (makeStream) args.add(MKSTREAM);
    return new CommandObject<>(args, BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupSetID,"CommandObject<String> xgroupSetID(String,String,StreamEntryID)","[2640, 2643]","{'A1': [(2641, 2641), (2643, 2643)], 'A12': [(2640, 2640), (2642, 2642)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<String> xgroupSetID(String key, String groupName, StreamEntryID id) {
    return new CommandObject<>(commandArguments(XGROUP).add(SETID)
        .key(key).add(groupName).add(id), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupDestroy,"CommandObject<Long> xgroupDestroy(String,String)","[2645, 2648]","{'A1': [(2646, 2646), (2648, 2648)], 'A12': [(2645, 2645), (2647, 2647)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Long> xgroupDestroy(String key, String groupName) {
    return new CommandObject<>(commandArguments(XGROUP).add(DESTROY)
        .key(key).add(groupName), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupCreateConsumer,"CommandObject<Boolean> xgroupCreateConsumer(String,String,String)","[2650, 2653]","{'A12': [(2650, 2653)]}",{'A12': 1.0},A12,,"  public final CommandObject<Boolean> xgroupCreateConsumer(String key, String groupName, String consumerName) {
    return new CommandObject<>(commandArguments(XGROUP).add(CREATECONSUMER)
        .key(key).add(groupName).add(consumerName), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupDelConsumer,"CommandObject<Long> xgroupDelConsumer(String,String,String)","[2655, 2658]","{'A1': [(2656, 2656), (2658, 2658)], 'A12': [(2655, 2655), (2657, 2657)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Long> xgroupDelConsumer(String key, String groupName, String consumerName) {
    return new CommandObject<>(commandArguments(XGROUP).add(DELCONSUMER)
        .key(key).add(groupName).add(consumerName), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupCreate,"CommandObject<String> xgroupCreate(byte[],byte[],byte[],boolean)","[2660, 2665]","{'A1': [(2661, 2661), (2663, 2665)], 'A12': [(2660, 2660), (2662, 2662)]}","{'A1': 0.6666666666666666, 'A12': 0.3333333333333333}",A1,,"  public final CommandObject<String> xgroupCreate(byte[] key, byte[] groupName, byte[] id, boolean makeStream) {
    CommandArguments args = commandArguments(XGROUP).add(CREATE).key(key)
        .add(groupName).add(id);
    if (makeStream) args.add(MKSTREAM);
    return new CommandObject<>(args, BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupSetID,"CommandObject<String> xgroupSetID(byte[],byte[],byte[])","[2667, 2670]","{'A1': [(2668, 2668), (2670, 2670)], 'A12': [(2667, 2667), (2669, 2669)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<String> xgroupSetID(byte[] key, byte[] groupName, byte[] id) {
    return new CommandObject<>(commandArguments(XGROUP).add(SETID)
        .key(key).add(groupName).add(id), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupDestroy,"CommandObject<Long> xgroupDestroy(byte[],byte[])","[2672, 2675]","{'A1': [(2673, 2673), (2675, 2675)], 'A12': [(2672, 2672), (2674, 2674)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Long> xgroupDestroy(byte[] key, byte[] groupName) {
    return new CommandObject<>(commandArguments(XGROUP).add(DESTROY)
        .key(key).add(groupName), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupCreateConsumer,"CommandObject<Boolean> xgroupCreateConsumer(byte[],byte[],byte[])","[2677, 2680]","{'A1': [(2680, 2680)], 'A12': [(2677, 2679)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  public final CommandObject<Boolean> xgroupCreateConsumer(byte[] key, byte[] groupName, byte[] consumerName) {
    return new CommandObject<>(commandArguments(XGROUP).add(CREATECONSUMER)
        .key(key).add(groupName).add(consumerName), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xgroupDelConsumer,"CommandObject<Long> xgroupDelConsumer(byte[],byte[],byte[])","[2682, 2685]","{'A12': [(2682, 2685)]}",{'A12': 1.0},A12,,"  public final CommandObject<Long> xgroupDelConsumer(byte[] key, byte[] groupName, byte[] consumerName) {
    return new CommandObject<>(commandArguments(XGROUP).add(DELCONSUMER)
        .key(key).add(groupName).add(consumerName), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xdel,CommandObject<Long> xdel(String),"[2686, 2688]","{'A1': [(2686, 2688)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xdel(String key, StreamEntryID... ids) {
    return new CommandObject<>(commandArguments(XDEL).key(key).addObjects((Object[]) ids), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xtrim,"CommandObject<Long> xtrim(String,long,boolean)","[2690, 2695]","{'A1': [(2690, 2695)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xtrim(String key, long maxLen, boolean approximate) {
    CommandArguments args = commandArguments(XTRIM).key(key).add(MAXLEN);
    if (approximate) args.add(Protocol.BYTES_TILDE);
    args.add(maxLen);
    return new CommandObject<>(args, BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xtrim,"CommandObject<Long> xtrim(String,XTrimParams)","[2697, 2699]","{'A1': [(2697, 2699)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xtrim(String key, XTrimParams params) {
    return new CommandObject<>(commandArguments(XTRIM).key(key).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xdel,CommandObject<Long> xdel(byte[]),"[2701, 2703]","{'A1': [(2701, 2703)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xdel(byte[] key, byte[]... ids) {
    return new CommandObject<>(commandArguments(XDEL).key(key).addObjects((Object[]) ids), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xtrim,"CommandObject<Long> xtrim(byte[],long,boolean)","[2705, 2710]","{'A1': [(2705, 2710)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xtrim(byte[] key, long maxLen, boolean approximateLength) {
    CommandArguments args = commandArguments(XTRIM).key(key).add(MAXLEN);
    if (approximateLength) args.add(Protocol.BYTES_TILDE);
    args.add(maxLen);
    return new CommandObject<>(args, BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xtrim,"CommandObject<Long> xtrim(byte[],XTrimParams)","[2712, 2714]","{'A1': [(2712, 2714)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> xtrim(byte[] key, XTrimParams params) {
    return new CommandObject<>(commandArguments(XTRIM).key(key).addParams(params), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xpending,"CommandObject<StreamPendingSummary> xpending(String,String)","[2716, 2719]","{'A1': [(2718, 2719)], 'A12': [(2716, 2717)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<StreamPendingSummary> xpending(String key, String groupName) {
    return new CommandObject<>(commandArguments(XPENDING).key(key).add(groupName),
        BuilderFactory.STREAM_PENDING_SUMMARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xpending,"CommandObject<List<StreamPendingEntry>> xpending(String,String,XPendingParams)","[2721, 2724]","{'A1': [(2723, 2724)], 'A12': [(2721, 2722)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<List<StreamPendingEntry>> xpending(String key, String groupName, XPendingParams params) {
    return new CommandObject<>(commandArguments(XPENDING).key(key).add(groupName)
        .addParams(params), BuilderFactory.STREAM_PENDING_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xpending,"CommandObject<Object> xpending(byte[],byte[])","[2726, 2729]","{'A1': [(2728, 2729)], 'A12': [(2726, 2727)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Object> xpending(byte[] key, byte[] groupName) {
    return new CommandObject<>(commandArguments(XPENDING).key(key).add(groupName),
        BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xpending,"CommandObject<List<Object>> xpending(byte[],byte[],XPendingParams)","[2731, 2734]","{'A1': [(2733, 2734)], 'A12': [(2731, 2732)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<List<Object>> xpending(byte[] key, byte[] groupName, XPendingParams params) {
    return new CommandObject<>(commandArguments(XPENDING).key(key).add(groupName)
        .addParams(params), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xclaim,"CommandObject<List<StreamEntry>> xclaim(String,String,String,long,XClaimParams)","[2736, 2741]","{'A1': [(2736, 2736), (2738, 2738), (2740, 2741)], 'A12': [(2737, 2737), (2739, 2739)]}","{'A1': 0.6666666666666666, 'A12': 0.3333333333333333}",A1,,"  public final CommandObject<List<StreamEntry>> xclaim(String key, String group,
      String consumerName, long minIdleTime, XClaimParams params, StreamEntryID... ids) {
    return new CommandObject<>(commandArguments(XCLAIM).key(key).add(group)
        .add(consumerName).add(minIdleTime).addObjects((Object[]) ids).addParams(params),
        BuilderFactory.STREAM_ENTRY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xclaimJustId,"CommandObject<List<StreamEntryID>> xclaimJustId(String,String,String,long,XClaimParams)","[2743, 2748]","{'A1': [(2743, 2743), (2745, 2745), (2747, 2748)], 'A12': [(2744, 2744), (2746, 2746)]}","{'A1': 0.6666666666666666, 'A12': 0.3333333333333333}",A1,,"  public final CommandObject<List<StreamEntryID>> xclaimJustId(String key, String group,
      String consumerName, long minIdleTime, XClaimParams params, StreamEntryID... ids) {
    return new CommandObject<>(commandArguments(XCLAIM).key(key).add(group)
        .add(consumerName).add(minIdleTime).addObjects((Object[]) ids).addParams(params)
        .add(JUSTID), BuilderFactory.STREAM_ENTRY_ID_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xautoclaim,"CommandObject<Map.Entry<StreamEntryID, List<StreamEntry>>> xautoclaim(String,String,String,long,StreamEntryID,XAutoClaimParams)","[2750, 2756]","{'A1': [(2750, 2756)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map.Entry<StreamEntryID, List<StreamEntry>>> xautoclaim(String key,
      String group, String consumerName, long minIdleTime, StreamEntryID start,
      XAutoClaimParams params) {
    return new CommandObject<>(commandArguments(XAUTOCLAIM).key(key).add(group)
        .add(consumerName).add(minIdleTime).add(start).addParams(params),
        BuilderFactory.STREAM_AUTO_CLAIM_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xautoclaimJustId,"CommandObject<Map.Entry<StreamEntryID, List<StreamEntryID>>> xautoclaimJustId(String,String,String,long,StreamEntryID,XAutoClaimParams)","[2758, 2764]","{'A1': [(2758, 2764)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map.Entry<StreamEntryID, List<StreamEntryID>>> xautoclaimJustId(
      String key, String group, String consumerName, long minIdleTime, StreamEntryID start,
      XAutoClaimParams params) {
    return new CommandObject<>(commandArguments(XAUTOCLAIM).key(key).add(group)
        .add(consumerName).add(minIdleTime).add(start).addParams(params)
        .add(JUSTID), BuilderFactory.STREAM_AUTO_CLAIM_JUSTID_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xclaim,"CommandObject<List<byte[]>> xclaim(byte[],byte[],byte[],long,XClaimParams)","[2766, 2771]","{'A1': [(2766, 2766), (2768, 2768), (2770, 2771)], 'A12': [(2767, 2767), (2769, 2769)]}","{'A1': 0.6666666666666666, 'A12': 0.3333333333333333}",A1,,"  public final CommandObject<List<byte[]>> xclaim(byte[] key, byte[] group,
      byte[] consumerName, long minIdleTime, XClaimParams params, byte[]... ids) {
    return new CommandObject<>(commandArguments(XCLAIM).key(key).add(group)
        .add(consumerName).add(minIdleTime).addObjects((Object[]) ids).addParams(params),
        BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xclaimJustId,"CommandObject<List<byte[]>> xclaimJustId(byte[],byte[],byte[],long,XClaimParams)","[2773, 2778]","{'A1': [(2773, 2773), (2775, 2775), (2777, 2778)], 'A12': [(2774, 2774), (2776, 2776)]}","{'A1': 0.6666666666666666, 'A12': 0.3333333333333333}",A1,,"  public final CommandObject<List<byte[]>> xclaimJustId(byte[] key, byte[] group,
      byte[] consumerName, long minIdleTime, XClaimParams params, byte[]... ids) {
    return new CommandObject<>(commandArguments(XCLAIM).key(key).add(group)
        .add(consumerName).add(minIdleTime).addObjects((Object[]) ids).addParams(params)
        .add(JUSTID), BuilderFactory.BINARY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xautoclaim,"CommandObject<List<Object>> xautoclaim(byte[],byte[],byte[],long,byte[],XAutoClaimParams)","[2780, 2785]","{'A1': [(2780, 2785)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Object>> xautoclaim(byte[] key, byte[] groupName,
      byte[] consumerName, long minIdleTime, byte[] start, XAutoClaimParams params) {
    return new CommandObject<>(commandArguments(XAUTOCLAIM).key(key).add(groupName)
        .add(consumerName).add(minIdleTime).add(start).addParams(params),
        BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xautoclaimJustId,"CommandObject<List<Object>> xautoclaimJustId(byte[],byte[],byte[],long,byte[],XAutoClaimParams)","[2787, 2792]","{'A1': [(2787, 2792)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Object>> xautoclaimJustId(byte[] key, byte[] groupName,
      byte[] consumerName, long minIdleTime, byte[] start, XAutoClaimParams params) {
    return new CommandObject<>(commandArguments(XAUTOCLAIM).key(key).add(groupName)
        .add(consumerName).add(minIdleTime).add(start).addParams(params)
        .add(JUSTID), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoStream,CommandObject<StreamInfo> xinfoStream(String),"[2794, 2796]","{'A1': [(2794, 2796)]}",{'A1': 1.0},A1,,"  public final CommandObject<StreamInfo> xinfoStream(String key) {
    return new CommandObject<>(commandArguments(XINFO).add(STREAM).key(key), BuilderFactory.STREAM_INFO);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoStream,CommandObject<Object> xinfoStream(byte[]),"[2798, 2800]","{'A1': [(2798, 2800)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> xinfoStream(byte[] key) {
    return new CommandObject<>(commandArguments(XINFO).add(STREAM).key(key), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoStreamFull,CommandObject<StreamFullInfo> xinfoStreamFull(String),"[2802, 2804]","{'A1': [(2802, 2803)], 'A26': [(2804, 2804)]}","{'A1': 0.6666666666666666, 'A26': 0.3333333333333333}",A1,,"  public final CommandObject<StreamFullInfo> xinfoStreamFull(String key) {
    return new CommandObject<>(commandArguments(XINFO).add(STREAM).key(key).add(FULL), BuilderFactory.STREAM_FULL_INFO);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoStreamFull,"CommandObject<StreamFullInfo> xinfoStreamFull(String,int)","[2806, 2808]","{'A1': [(2807, 2807)], 'A26': [(2806, 2806), (2808, 2808)]}","{'A1': 0.3333333333333333, 'A26': 0.6666666666666666}",A26,,"  public final CommandObject<StreamFullInfo> xinfoStreamFull(String key, int count) {
    return new CommandObject<>(commandArguments(XINFO).add(STREAM).key(key).add(FULL).add(COUNT).add(count), BuilderFactory.STREAM_FULL_INFO);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoStreamFull,"CommandObject<Object> xinfoStreamFull(byte[],int)","[2810, 2812]","{'A1': [(2810, 2812)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> xinfoStreamFull(byte[] key, int count) {
    return new CommandObject<>(commandArguments(XINFO).add(STREAM).key(key).add(FULL).add(COUNT).add(count), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoStreamFull,CommandObject<Object> xinfoStreamFull(byte[]),"[2814, 2816]","{'A1': [(2814, 2816)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> xinfoStreamFull(byte[] key) {
    return new CommandObject<>(commandArguments(XINFO).add(STREAM).key(key).add(FULL), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoGroups,CommandObject<List<StreamGroupInfo>> xinfoGroups(String),"[2818, 2820]","{'A1': [(2818, 2820)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamGroupInfo>> xinfoGroups(String key) {
    return new CommandObject<>(commandArguments(XINFO).add(GROUPS).key(key), BuilderFactory.STREAM_GROUP_INFO_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoGroups,CommandObject<List<Object>> xinfoGroups(byte[]),"[2822, 2824]","{'A1': [(2822, 2824)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Object>> xinfoGroups(byte[] key) {
    return new CommandObject<>(commandArguments(XINFO).add(GROUPS).key(key), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoConsumers,"CommandObject<List<StreamConsumersInfo>> xinfoConsumers(String,String)","[2829, 2832]","{'A1': [(2829, 2832)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<List<StreamConsumersInfo>> xinfoConsumers(String key, String group) {
    return new CommandObject<>(commandArguments(XINFO).add(CONSUMERS).key(key).add(group), BuilderFactory.STREAM_CONSUMERS_INFO_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoConsumers2,"CommandObject<List<StreamConsumerInfo>> xinfoConsumers2(String,String)","[2834, 2836]","{'A1': [(2834, 2836)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<StreamConsumerInfo>> xinfoConsumers2(String key, String group) {
    return new CommandObject<>(commandArguments(XINFO).add(CONSUMERS).key(key).add(group), BuilderFactory.STREAM_CONSUMER_INFO_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xinfoConsumers,"CommandObject<List<Object>> xinfoConsumers(byte[],byte[])","[2838, 2840]","{'A1': [(2838, 2840)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Object>> xinfoConsumers(byte[] key, byte[] group) {
    return new CommandObject<>(commandArguments(XINFO).add(CONSUMERS).key(key).add(group), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xread,"CommandObject<List<Map.Entry<String, List<StreamEntry>>>> xread(XReadParams,Map<String, StreamEntryID>)","[2842, 2849]","{'A1': [(2842, 2849)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Map.Entry<String, List<StreamEntry>>>> xread(
      XReadParams xReadParams, Map<String, StreamEntryID> streams) {
    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);
    Set<Map.Entry<String, StreamEntryID>> entrySet = streams.entrySet();
    entrySet.forEach(entry -> args.key(entry.getKey()));
    entrySet.forEach(entry -> args.add(entry.getValue()));
    return new CommandObject<>(args, BuilderFactory.STREAM_READ_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadAsMap,"CommandObject<Map<String, List<StreamEntry>>> xreadAsMap(XReadParams,Map<String, StreamEntryID>)","[2851, 2858]","{'A1': [(2851, 2858)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, List<StreamEntry>>> xreadAsMap(
      XReadParams xReadParams, Map<String, StreamEntryID> streams) {
    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);
    Set<Map.Entry<String, StreamEntryID>> entrySet = streams.entrySet();
    entrySet.forEach(entry -> args.key(entry.getKey()));
    entrySet.forEach(entry -> args.add(entry.getValue()));
    return new CommandObject<>(args, BuilderFactory.STREAM_READ_MAP_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadGroup,"CommandObject<List<Map.Entry<String, List<StreamEntry>>>> xreadGroup(String,String,XReadGroupParams,Map<String, StreamEntryID>)","[2860, 2870]","{'A1': [(2860, 2860), (2862, 2863), (2865, 2870)], 'A12': [(2861, 2861), (2864, 2864)]}","{'A1': 0.8181818181818182, 'A12': 0.18181818181818182}",A1,,"  public final CommandObject<List<Map.Entry<String, List<StreamEntry>>>> xreadGroup(
      String groupName, String consumer, XReadGroupParams xReadGroupParams,
      Map<String, StreamEntryID> streams) {
    CommandArguments args = commandArguments(XREADGROUP)
        .add(GROUP).add(groupName).add(consumer)
        .addParams(xReadGroupParams).add(STREAMS);
    Set<Map.Entry<String, StreamEntryID>> entrySet = streams.entrySet();
    entrySet.forEach(entry -> args.key(entry.getKey()));
    entrySet.forEach(entry -> args.add(entry.getValue()));
    return new CommandObject<>(args, BuilderFactory.STREAM_READ_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadGroupAsMap,"CommandObject<Map<String, List<StreamEntry>>> xreadGroupAsMap(String,String,XReadGroupParams,Map<String, StreamEntryID>)","[2872, 2882]","{'A1': [(2872, 2882)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, List<StreamEntry>>> xreadGroupAsMap(
      String groupName, String consumer, XReadGroupParams xReadGroupParams,
      Map<String, StreamEntryID> streams) {
    CommandArguments args = commandArguments(XREADGROUP)
        .add(GROUP).add(groupName).add(consumer)
        .addParams(xReadGroupParams).add(STREAMS);
    Set<Map.Entry<String, StreamEntryID>> entrySet = streams.entrySet();
    entrySet.forEach(entry -> args.key(entry.getKey()));
    entrySet.forEach(entry -> args.add(entry.getValue()));
    return new CommandObject<>(args, BuilderFactory.STREAM_READ_MAP_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xread,CommandObject<List<Object>> xread(XReadParams),"[2888, 2898]","{'A1': [(2889, 2898)], 'A4': [(2888, 2888)]}","{'A1': 0.9090909090909091, 'A4': 0.09090909090909091}",A1,,"  @Deprecated
  public final CommandObject<List<Object>> xread(XReadParams xReadParams, Map.Entry<byte[], byte[]>... streams) {
    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);
    for (Map.Entry<byte[], byte[]> entry : streams) {
      args.key(entry.getKey());
    }
    for (Map.Entry<byte[], byte[]> entry : streams) {
      args.add(entry.getValue());
    }
    return new CommandObject<>(args, BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadBinary,"CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(XReadParams)","[2900, 2910]","{'A4': [(2900, 2910)]}",{'A4': 1.0},A4,,"  public final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(
      XReadParams xReadParams, Map.Entry<byte[], StreamEntryID>... streams) {
    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);
    for (Map.Entry<byte[], StreamEntryID> entry : streams) {
      args.key(entry.getKey());
    }
    for (Map.Entry<byte[], StreamEntryID> entry : streams) {
      args.add(entry.getValue());
    }
    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadBinaryAsMap,"CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(XReadParams)","[2912, 2922]","{'A4': [(2912, 2922)]}",{'A4': 1.0},A4,,"  public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(
      XReadParams xReadParams, Map.Entry<byte[], StreamEntryID>... streams) {
    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);
    for (Map.Entry<byte[], StreamEntryID> entry : streams) {
      args.key(entry.getKey());
    }
    for (Map.Entry<byte[], StreamEntryID> entry : streams) {
      args.add(entry.getValue());
    }
    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadGroup,"CommandObject<List<Object>> xreadGroup(byte[],byte[],XReadGroupParams)","[2928, 2941]","{'A1': [(2929, 2931), (2933, 2941)], 'A12': [(2932, 2932)], 'A4': [(2928, 2928)]}","{'A1': 0.8571428571428571, 'A12': 0.07142857142857142, 'A4': 0.07142857142857142}",A1,,"  @Deprecated
  public final CommandObject<List<Object>> xreadGroup(byte[] groupName, byte[] consumer,
      XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {
    CommandArguments args = commandArguments(XREADGROUP)
        .add(GROUP).add(groupName).add(consumer)
        .addParams(xReadGroupParams).add(STREAMS);
    for (Map.Entry<byte[], byte[]> entry : streams) {
      args.key(entry.getKey());
    }
    for (Map.Entry<byte[], byte[]> entry : streams) {
      args.add(entry.getValue());
    }
    return new CommandObject<>(args, BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadGroupBinary,"CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadGroupBinary(byte[],byte[],XReadGroupParams)","[2943, 2956]","{'A4': [(2943, 2956)]}",{'A4': 1.0},A4,,"  public final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadGroupBinary(
      byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams, 
      Map.Entry<byte[], StreamEntryID>... streams) {
    CommandArguments args = commandArguments(XREADGROUP)
        .add(GROUP).add(groupName).add(consumer)
        .addParams(xReadGroupParams).add(STREAMS);
    for (Map.Entry<byte[], StreamEntryID> entry : streams) {
      args.key(entry.getKey());
    }
    for (Map.Entry<byte[], StreamEntryID> entry : streams) {
      args.add(entry.getValue());
    }
    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadGroupBinaryAsMap,"CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(byte[],byte[],XReadGroupParams)","[2958, 2971]","{'A4': [(2958, 2971)]}",{'A4': 1.0},A4,,"  public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(
      byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams, 
      Map.Entry<byte[], StreamEntryID>... streams) {
    CommandArguments args = commandArguments(XREADGROUP)
        .add(GROUP).add(groupName).add(consumer)
        .addParams(xReadGroupParams).add(STREAMS);
    for (Map.Entry<byte[], StreamEntryID> entry : streams) {
      args.key(entry.getKey());
    }
    for (Map.Entry<byte[], StreamEntryID> entry : streams) {
      args.add(entry.getValue());
    }
    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadBinary,"CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(XReadParams,Map<byte[], StreamEntryID>)","[2973, 2980]","{'A4': [(2973, 2980)]}",{'A4': 1.0},A4,,"  public final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(
          XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {
    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);
    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();
    entrySet.forEach(entry -> args.key(entry.getKey()));
    entrySet.forEach(entry -> args.add(entry.getValue()));
    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadBinaryAsMap,"CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(XReadParams,Map<byte[], StreamEntryID>)","[2982, 2989]","{'A4': [(2982, 2989)]}",{'A4': 1.0},A4,,"  public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(
          XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {
      CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);
      Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();
      entrySet.forEach(entry -> args.key(entry.getKey()));
      entrySet.forEach(entry -> args.add(entry.getValue()));
      return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadGroupBinary,"CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadGroupBinary(byte[],byte[],XReadGroupParams,Map<byte[], StreamEntryID>)","[2991, 3001]","{'A4': [(2991, 3001)]}",{'A4': 1.0},A4,,"  public final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadGroupBinary(
          byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,
          Map<byte[], StreamEntryID> streams) {
      CommandArguments args = commandArguments(XREADGROUP)
              .add(GROUP).add(groupName).add(consumer)
              .addParams(xReadGroupParams).add(STREAMS);
      Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();
      entrySet.forEach(entry -> args.key(entry.getKey()));
      entrySet.forEach(entry -> args.add(entry.getValue()));
      return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,xreadGroupBinaryAsMap,"CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(byte[],byte[],XReadGroupParams,Map<byte[], StreamEntryID>)","[3003, 3013]","{'A4': [(3003, 3013)]}",{'A4': 1.0},A4,,"    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(
            byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,
            Map<byte[], StreamEntryID> streams) {
        CommandArguments args = commandArguments(XREADGROUP)
                .add(GROUP).add(groupName).add(consumer)
                .addParams(xReadGroupParams).add(STREAMS);
        Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();
        entrySet.forEach(entry -> args.key(entry.getKey()));
        entrySet.forEach(entry -> args.add(entry.getValue()));
        return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,eval,CommandObject<Object> eval(String),"[3017, 3019]","{'A1': [(3017, 3019)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> eval(String script) {
    return new CommandObject<>(commandArguments(EVAL).add(script).add(0), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,eval,"CommandObject<Object> eval(String,String)","[3021, 3023]","{'A1': [(3021, 3023)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> eval(String script, String sampleKey) {
    return new CommandObject<>(commandArguments(EVAL).add(script).add(0).processKey(sampleKey), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,eval,"CommandObject<Object> eval(String,int)","[3025, 3029]","{'A1': [(3025, 3029)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> eval(String script, int keyCount, String... params) {
    return new CommandObject<>(commandArguments(EVAL).add(script).add(keyCount)
        .addObjects((Object[]) params).processKeys(Arrays.copyOf(params, keyCount)),
        BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,eval,"CommandObject<Object> eval(String,List<String>,List<String>)","[3031, 3034]","{'A1': [(3031, 3034)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> eval(String script, List<String> keys, List<String> args) {
    return new CommandObject<>(commandArguments(EVAL).add(script).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalReadonly,"CommandObject<Object> evalReadonly(String,List<String>,List<String>)","[3036, 3039]","{'A1': [(3037, 3038)], 'A12': [(3036, 3036), (3039, 3039)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Object> evalReadonly(String script, List<String> keys, List<String> args) {
    return new CommandObject<>(commandArguments(EVAL_RO).add(script).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,eval,CommandObject<Object> eval(byte[]),"[3041, 3043]","{'A1': [(3041, 3043)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> eval(byte[] script) {
    return new CommandObject<>(commandArguments(EVAL).add(script).add(0), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,eval,"CommandObject<Object> eval(byte[],byte[])","[3045, 3047]","{'A1': [(3045, 3047)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> eval(byte[] script, byte[] sampleKey) {
    return new CommandObject<>(commandArguments(EVAL).add(script).add(0).processKey(sampleKey), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,eval,"CommandObject<Object> eval(byte[],int)","[3049, 3053]","{'A1': [(3049, 3053)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> eval(byte[] script, int keyCount, byte[]... params) {
    return new CommandObject<>(commandArguments(EVAL).add(script).add(keyCount)
        .addObjects((Object[]) params).processKeys(Arrays.copyOf(params, keyCount)),
        BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,eval,"CommandObject<Object> eval(byte[],List<byte[]>,List<byte[]>)","[3055, 3058]","{'A1': [(3055, 3058)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> eval(byte[] script, List<byte[]> keys, List<byte[]> args) {
    return new CommandObject<>(commandArguments(EVAL).add(script).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalReadonly,"CommandObject<Object> evalReadonly(byte[],List<byte[]>,List<byte[]>)","[3060, 3063]","{'A1': [(3061, 3062)], 'A12': [(3060, 3060), (3063, 3063)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Object> evalReadonly(byte[] script, List<byte[]> keys, List<byte[]> args) {
    return new CommandObject<>(commandArguments(EVAL_RO).add(script).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalsha,CommandObject<Object> evalsha(String),"[3065, 3067]","{'A1': [(3065, 3067)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> evalsha(String sha1) {
    return new CommandObject<>(commandArguments(EVALSHA).add(sha1).add(0), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalsha,"CommandObject<Object> evalsha(String,String)","[3069, 3071]","{'A1': [(3069, 3071)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> evalsha(String sha1, String sampleKey) {
    return new CommandObject<>(commandArguments(EVALSHA).add(sha1).add(0).processKey(sampleKey), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalsha,"CommandObject<Object> evalsha(String,int)","[3073, 3077]","{'A1': [(3073, 3077)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> evalsha(String sha1, int keyCount, String... params) {
    return new CommandObject<>(commandArguments(EVALSHA).add(sha1).add(keyCount)
        .addObjects((Object[]) params).processKeys(Arrays.copyOf(params, keyCount)),
        BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalsha,"CommandObject<Object> evalsha(String,List<String>,List<String>)","[3079, 3082]","{'A1': [(3079, 3082)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> evalsha(String sha1, List<String> keys, List<String> args) {
    return new CommandObject<>(commandArguments(EVALSHA).add(sha1).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalshaReadonly,"CommandObject<Object> evalshaReadonly(String,List<String>,List<String>)","[3084, 3087]","{'A1': [(3085, 3086)], 'A12': [(3084, 3084), (3087, 3087)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Object> evalshaReadonly(String sha1, List<String> keys, List<String> args) {
    return new CommandObject<>(commandArguments(EVALSHA_RO).add(sha1).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalsha,CommandObject<Object> evalsha(byte[]),"[3089, 3091]","{'A1': [(3089, 3091)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> evalsha(byte[] sha1) {
    return new CommandObject<>(commandArguments(EVALSHA).add(sha1).add(0), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalsha,"CommandObject<Object> evalsha(byte[],byte[])","[3093, 3095]","{'A1': [(3093, 3095)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> evalsha(byte[] sha1, byte[] sampleKey) {
    return new CommandObject<>(commandArguments(EVALSHA).add(sha1).add(0).processKey(sampleKey), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalsha,"CommandObject<Object> evalsha(byte[],int)","[3097, 3101]","{'A1': [(3097, 3101)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> evalsha(byte[] sha1, int keyCount, byte[]... params) {
    return new CommandObject<>(commandArguments(EVALSHA).add(sha1).add(keyCount)
        .addObjects((Object[]) params).processKeys(Arrays.copyOf(params, keyCount)),
        BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalsha,"CommandObject<Object> evalsha(byte[],List<byte[]>,List<byte[]>)","[3103, 3106]","{'A1': [(3103, 3106)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> evalsha(byte[] sha1, List<byte[]> keys, List<byte[]> args) {
    return new CommandObject<>(commandArguments(EVALSHA).add(sha1).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,evalshaReadonly,"CommandObject<Object> evalshaReadonly(byte[],List<byte[]>,List<byte[]>)","[3108, 3111]","{'A1': [(3109, 3110)], 'A12': [(3108, 3108), (3111, 3111)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Object> evalshaReadonly(byte[] sha1, List<byte[]> keys, List<byte[]> args) {
    return new CommandObject<>(commandArguments(EVALSHA_RO).add(sha1).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptExists,CommandObject<List<Boolean>> scriptExists(List<String>),"[3113, 3115]","{'A1': [(3113, 3115)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> scriptExists(List<String> sha1s) {
    return new CommandObject<>(commandArguments(SCRIPT).add(Keyword.EXISTS).addObjects(sha1s), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptExists,CommandObject<List<Boolean>> scriptExists(String),"[3117, 3120]","{'A1': [(3117, 3120)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> scriptExists(String sampleKey, String... sha1s) {
    return new CommandObject<>(commandArguments(SCRIPT).add(Keyword.EXISTS).addObjects((Object[]) sha1s)
        .processKey(sampleKey), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptLoad,CommandObject<String> scriptLoad(String),"[3122, 3124]","{'A1': [(3122, 3124)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptLoad(String script) {
    return new CommandObject<>(commandArguments(SCRIPT).add(LOAD).add(script), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptLoad,"CommandObject<String> scriptLoad(String,String)","[3126, 3128]","{'A1': [(3126, 3128)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptLoad(String script, String sampleKey) {
    return new CommandObject<>(commandArguments(SCRIPT).add(LOAD).add(script).processKey(sampleKey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptFlush,CommandObject<String> scriptFlush(),"[3132, 3134]","{'A1': [(3132, 3134)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptFlush() {
    return SCRIPT_FLUSH_COMMAND_OBJECT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptFlush,CommandObject<String> scriptFlush(String),"[3136, 3138]","{'A1': [(3136, 3138)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptFlush(String sampleKey) {
    return new CommandObject<>(commandArguments(SCRIPT).add(FLUSH).processKey(sampleKey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptFlush,"CommandObject<String> scriptFlush(String,FlushMode)","[3140, 3142]","{'A1': [(3140, 3142)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptFlush(String sampleKey, FlushMode flushMode) {
    return new CommandObject<>(commandArguments(SCRIPT).add(FLUSH).add(flushMode).processKey(sampleKey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptKill,CommandObject<String> scriptKill(),"[3146, 3148]","{'A1': [(3146, 3148)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptKill() {
    return SCRIPT_KILL_COMMAND_OBJECT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptKill,CommandObject<String> scriptKill(String),"[3150, 3152]","{'A1': [(3150, 3152)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptKill(String sampleKey) {
    return new CommandObject<>(commandArguments(SCRIPT).add(KILL).processKey(sampleKey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptExists,CommandObject<List<Boolean>> scriptExists(byte[]),"[3154, 3157]","{'A1': [(3154, 3157)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> scriptExists(byte[] sampleKey, byte[]... sha1s) {
    return new CommandObject<>(commandArguments(SCRIPT).add(Keyword.EXISTS).addObjects((Object[]) sha1s)
        .processKey(sampleKey), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptLoad,"CommandObject<byte[]> scriptLoad(byte[],byte[])","[3159, 3161]","{'A1': [(3159, 3161)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> scriptLoad(byte[] script, byte[] sampleKey) {
    return new CommandObject<>(commandArguments(SCRIPT).add(LOAD).add(script).processKey(sampleKey), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptFlush,CommandObject<String> scriptFlush(byte[]),"[3163, 3165]","{'A1': [(3163, 3165)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptFlush(byte[] sampleKey) {
    return new CommandObject<>(commandArguments(SCRIPT).add(FLUSH).processKey(sampleKey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptFlush,"CommandObject<String> scriptFlush(byte[],FlushMode)","[3167, 3169]","{'A1': [(3167, 3169)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptFlush(byte[] sampleKey, FlushMode flushMode) {
    return new CommandObject<>(commandArguments(SCRIPT).add(FLUSH).add(flushMode).processKey(sampleKey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,scriptKill,CommandObject<String> scriptKill(byte[]),"[3171, 3173]","{'A1': [(3171, 3173)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> scriptKill(byte[] sampleKey) {
    return new CommandObject<>(commandArguments(SCRIPT).add(KILL).processKey(sampleKey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,slowlogReset,CommandObject<String> slowlogReset(),"[3178, 3180]","{'A1': [(3178, 3180)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> slowlogReset() {
    return SLOWLOG_RESET_COMMAND_OBJECT;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,fcall,"CommandObject<Object> fcall(String,List<String>,List<String>)","[3182, 3185]","{'A1': [(3183, 3184)], 'A12': [(3182, 3182), (3185, 3185)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Object> fcall(String name, List<String> keys, List<String> args) {
    return new CommandObject<>(commandArguments(FCALL).add(name).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,fcallReadonly,"CommandObject<Object> fcallReadonly(String,List<String>,List<String>)","[3187, 3190]","{'A1': [(3188, 3189)], 'A12': [(3187, 3187), (3190, 3190)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Object> fcallReadonly(String name, List<String> keys, List<String> args) {
    return new CommandObject<>(commandArguments(FCALL_RO).add(name).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.AGGRESSIVE_ENCODED_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionDelete,CommandObject<String> functionDelete(String),"[3192, 3194]","{'A12': [(3192, 3194)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionDelete(String libraryName) {
    return new CommandObject<>(commandArguments(FUNCTION).add(DELETE).add(libraryName), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionList,CommandObject<List<LibraryInfo>> functionList(),"[3196, 3198]","{'A1': [(3197, 3197)], 'A12': [(3196, 3196), (3198, 3198)]}","{'A1': 0.3333333333333333, 'A12': 0.6666666666666666}",A12,,"  public final CommandObject<List<LibraryInfo>> functionList() {
    return new CommandObject<>(commandArguments(FUNCTION).add(LIST), LibraryInfo.LIBRARY_INFO_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionList,CommandObject<List<LibraryInfo>> functionList(String),"[3200, 3203]","{'A1': [(3202, 3202)], 'A12': [(3200, 3201), (3203, 3203)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  public final CommandObject<List<LibraryInfo>> functionList(String libraryNamePattern) {
    return new CommandObject<>(commandArguments(FUNCTION).add(LIST).add(LIBRARYNAME)
        .add(libraryNamePattern), LibraryInfo.LIBRARY_INFO_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionListWithCode,CommandObject<List<LibraryInfo>> functionListWithCode(),"[3205, 3207]","{'A1': [(3206, 3206)], 'A12': [(3205, 3205), (3207, 3207)]}","{'A1': 0.3333333333333333, 'A12': 0.6666666666666666}",A12,,"  public final CommandObject<List<LibraryInfo>> functionListWithCode() {
    return new CommandObject<>(commandArguments(FUNCTION).add(LIST).add(WITHCODE), LibraryInfo.LIBRARY_INFO_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionListWithCode,CommandObject<List<LibraryInfo>> functionListWithCode(String),"[3209, 3212]","{'A1': [(3211, 3211)], 'A12': [(3209, 3210), (3212, 3212)]}","{'A1': 0.25, 'A12': 0.75}",A12,,"  public final CommandObject<List<LibraryInfo>> functionListWithCode(String libraryNamePattern) {
    return new CommandObject<>(commandArguments(FUNCTION).add(LIST).add(LIBRARYNAME)
        .add(libraryNamePattern).add(WITHCODE), LibraryInfo.LIBRARY_INFO_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionLoad,CommandObject<String> functionLoad(String),"[3214, 3216]","{'A12': [(3214, 3216)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionLoad(String functionCode) {
    return new CommandObject<>(commandArguments(FUNCTION).add(LOAD).add(functionCode), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionLoadReplace,CommandObject<String> functionLoadReplace(String),"[3218, 3220]","{'A12': [(3218, 3220)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionLoadReplace(String functionCode) {
    return new CommandObject<>(commandArguments(FUNCTION).add(LOAD).add(REPLACE).add(functionCode), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionStats,CommandObject<FunctionStats> functionStats(),"[3222, 3224]","{'A12': [(3222, 3224)]}",{'A12': 1.0},A12,,"  public final CommandObject<FunctionStats> functionStats() {
    return new CommandObject<>(commandArguments(FUNCTION).add(STATS), FunctionStats.FUNCTION_STATS_BUILDER);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionStatsBinary,CommandObject<Object> functionStatsBinary(),"[3226, 3228]","{'A12': [(3226, 3228)]}",{'A12': 1.0},A12,,"  public final CommandObject<Object> functionStatsBinary() {
    return new CommandObject<>(commandArguments(FUNCTION).add(STATS), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionFlush,CommandObject<String> functionFlush(),"[3230, 3232]","{'A12': [(3230, 3232)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionFlush() {
    return new CommandObject<>(commandArguments(FUNCTION).add(FLUSH), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionFlush,CommandObject<String> functionFlush(FlushMode),"[3234, 3236]","{'A12': [(3234, 3236)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionFlush(FlushMode mode) {
    return new CommandObject<>(commandArguments(FUNCTION).add(FLUSH).add(mode), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionKill,CommandObject<String> functionKill(),"[3238, 3240]","{'A12': [(3238, 3240)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionKill() {
    return new CommandObject<>(commandArguments(FUNCTION).add(KILL), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,fcall,"CommandObject<Object> fcall(byte[],List<byte[]>,List<byte[]>)","[3242, 3245]","{'A1': [(3243, 3244)], 'A12': [(3242, 3242), (3245, 3245)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Object> fcall(byte[] name, List<byte[]> keys, List<byte[]> args) {
    return new CommandObject<>(commandArguments(FCALL).add(name).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,fcallReadonly,"CommandObject<Object> fcallReadonly(byte[],List<byte[]>,List<byte[]>)","[3247, 3250]","{'A1': [(3248, 3249)], 'A12': [(3247, 3247), (3250, 3250)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  public final CommandObject<Object> fcallReadonly(byte[] name, List<byte[]> keys, List<byte[]> args) {
    return new CommandObject<>(commandArguments(FCALL_RO).add(name).add(keys.size())
        .keys(keys).addObjects(args), BuilderFactory.RAW_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionDelete,CommandObject<String> functionDelete(byte[]),"[3252, 3254]","{'A12': [(3252, 3254)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionDelete(byte[] libraryName) {
    return new CommandObject<>(commandArguments(FUNCTION).add(DELETE).add(libraryName), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionDump,CommandObject<byte[]> functionDump(),"[3256, 3258]","{'A1': [(3257, 3257)], 'A12': [(3256, 3256), (3258, 3258)]}","{'A1': 0.3333333333333333, 'A12': 0.6666666666666666}",A12,,"  public final CommandObject<byte[]> functionDump() {
    return new CommandObject<>(commandArguments(FUNCTION).add(Keyword.DUMP), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionListBinary,CommandObject<List<Object>> functionListBinary(),"[3260, 3262]","{'A12': [(3260, 3262)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<Object>> functionListBinary() {
    return new CommandObject<>(commandArguments(FUNCTION).add(LIST), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionList,CommandObject<List<Object>> functionList(byte[]),"[3264, 3267]","{'A12': [(3264, 3267)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<Object>> functionList(byte[] libraryNamePattern) {
    return new CommandObject<>(commandArguments(FUNCTION).add(LIST).add(LIBRARYNAME)
        .add(libraryNamePattern), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionListWithCodeBinary,CommandObject<List<Object>> functionListWithCodeBinary(),"[3269, 3271]","{'A12': [(3269, 3271)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<Object>> functionListWithCodeBinary() {
    return new CommandObject<>(commandArguments(FUNCTION).add(LIST).add(WITHCODE), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionListWithCode,CommandObject<List<Object>> functionListWithCode(byte[]),"[3273, 3276]","{'A12': [(3273, 3276)]}",{'A12': 1.0},A12,,"  public final CommandObject<List<Object>> functionListWithCode(byte[] libraryNamePattern) {
    return new CommandObject<>(commandArguments(FUNCTION).add(LIST).add(LIBRARYNAME).
        add(libraryNamePattern).add(WITHCODE), BuilderFactory.RAW_OBJECT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionLoad,CommandObject<String> functionLoad(byte[]),"[3278, 3280]","{'A12': [(3278, 3280)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionLoad(byte[] functionCode) {
    return new CommandObject<>(commandArguments(FUNCTION).add(LOAD).add(functionCode), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionLoadReplace,CommandObject<String> functionLoadReplace(byte[]),"[3282, 3284]","{'A12': [(3282, 3284)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionLoadReplace(byte[] functionCode) {
    return new CommandObject<>(commandArguments(FUNCTION).add(LOAD).add(REPLACE).add(functionCode), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionRestore,CommandObject<String> functionRestore(byte[]),"[3286, 3289]","{'A12': [(3286, 3289)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionRestore(byte[] serializedValue) {
    return new CommandObject<>(commandArguments(FUNCTION).add(RESTORE).add(serializedValue),
        BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,functionRestore,"CommandObject<String> functionRestore(byte[],FunctionRestorePolicy)","[3291, 3294]","{'A12': [(3291, 3294)]}",{'A12': 1.0},A12,,"  public final CommandObject<String> functionRestore(byte[] serializedValue, FunctionRestorePolicy policy) {
    return new CommandObject<>(commandArguments(FUNCTION).add(RESTORE).add(serializedValue)
        .add(policy.getRaw()), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,copy,"CommandObject<Boolean> copy(String,String,int,boolean)","[3298, 3302]","{'A1': [(3298, 3302)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> copy(String srcKey, String dstKey, int dstDB, boolean replace) {
    CommandArguments args = commandArguments(Command.COPY).key(srcKey).key(dstKey).add(DB).add(dstDB);
    if (replace) args.add(REPLACE);
    return new CommandObject<>(args, BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,copy,"CommandObject<Boolean> copy(byte[],byte[],int,boolean)","[3304, 3308]","{'A1': [(3304, 3308)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> copy(byte[] srcKey, byte[] dstKey, int dstDB, boolean replace) {
    CommandArguments args = commandArguments(Command.COPY).key(srcKey).key(dstKey).add(DB).add(dstDB);
    if (replace) args.add(REPLACE);
    return new CommandObject<>(args, BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,migrate,"CommandObject<String> migrate(String,int,String,int)","[3310, 3312]","{'A1': [(3310, 3312)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> migrate(String host, int port, String key, int timeout) {
    return migrate(host, port, key, 0, timeout);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,migrate,"CommandObject<String> migrate(String,int,String,int,int)","[3314, 3317]","{'A1': [(3314, 3317)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> migrate(String host, int port, String key, int destinationDB, int timeout) {
    return new CommandObject<>(commandArguments(MIGRATE).add(host).add(port).key(key)
        .add(destinationDB).add(timeout), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,migrate,"CommandObject<String> migrate(String,int,int,MigrateParams)","[3319, 3321]","{'A1': [(3319, 3321)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> migrate(String host, int port, int timeout, MigrateParams params, String... keys) {
    return migrate(host, port, 0, timeout, params, keys);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,migrate,"CommandObject<String> migrate(String,int,int,int,MigrateParams)","[3323, 3328]","{'A1': [(3323, 3328)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> migrate(String host, int port, int destinationDB, int timeout,
      MigrateParams params, String... keys) {
    return new CommandObject<>(commandArguments(MIGRATE).add(host).add(port).add(new byte[0])
        .add(destinationDB).add(timeout).addParams(params).add(Keyword.KEYS).keys((Object[]) keys),
        BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,migrate,"CommandObject<String> migrate(String,int,byte[],int)","[3330, 3332]","{'A1': [(3330, 3332)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> migrate(String host, int port, byte[] key, int timeout) {
    return migrate(host, port, key, 0, timeout);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,migrate,"CommandObject<String> migrate(String,int,byte[],int,int)","[3334, 3337]","{'A1': [(3334, 3337)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> migrate(String host, int port, byte[] key, int destinationDB, int timeout) {
    return new CommandObject<>(commandArguments(MIGRATE).add(host).add(port).key(key)
        .add(destinationDB).add(timeout), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,migrate,"CommandObject<String> migrate(String,int,int,MigrateParams)","[3339, 3341]","{'A1': [(3339, 3341)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> migrate(String host, int port, int timeout, MigrateParams params, byte[]... keys) {
    return migrate(host, port, 0, timeout, params, keys);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,migrate,"CommandObject<String> migrate(String,int,int,int,MigrateParams)","[3343, 3348]","{'A1': [(3343, 3348)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> migrate(String host, int port, int destinationDB, int timeout,
      MigrateParams params, byte[]... keys) {
    return new CommandObject<>(commandArguments(MIGRATE).add(host).add(port).add(new byte[0])
        .add(destinationDB).add(timeout).addParams(params).add(Keyword.KEYS).keys((Object[]) keys),
        BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,memoryUsage,CommandObject<Long> memoryUsage(String),"[3350, 3352]","{'A1': [(3350, 3352)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> memoryUsage(String key) {
    return new CommandObject<>(commandArguments(MEMORY).add(USAGE).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,memoryUsage,"CommandObject<Long> memoryUsage(String,int)","[3354, 3356]","{'A1': [(3354, 3356)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> memoryUsage(String key, int samples) {
    return new CommandObject<>(commandArguments(MEMORY).add(USAGE).key(key).add(SAMPLES).add(samples), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,memoryUsage,CommandObject<Long> memoryUsage(byte[]),"[3358, 3360]","{'A1': [(3358, 3360)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> memoryUsage(byte[] key) {
    return new CommandObject<>(commandArguments(MEMORY).add(USAGE).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,memoryUsage,"CommandObject<Long> memoryUsage(byte[],int)","[3362, 3364]","{'A1': [(3362, 3364)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> memoryUsage(byte[] key, int samples) {
    return new CommandObject<>(commandArguments(MEMORY).add(USAGE).key(key).add(SAMPLES).add(samples), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,objectRefcount,CommandObject<Long> objectRefcount(String),"[3366, 3368]","{'A1': [(3366, 3368)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> objectRefcount(String key) {
    return new CommandObject<>(commandArguments(OBJECT).add(REFCOUNT).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,objectEncoding,CommandObject<String> objectEncoding(String),"[3370, 3372]","{'A1': [(3370, 3372)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> objectEncoding(String key) {
    return new CommandObject<>(commandArguments(OBJECT).add(ENCODING).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,objectIdletime,CommandObject<Long> objectIdletime(String),"[3374, 3376]","{'A1': [(3374, 3376)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> objectIdletime(String key) {
    return new CommandObject<>(commandArguments(OBJECT).add(IDLETIME).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,objectFreq,CommandObject<Long> objectFreq(String),"[3378, 3380]","{'A1': [(3378, 3380)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> objectFreq(String key) {
    return new CommandObject<>(commandArguments(OBJECT).add(FREQ).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,objectRefcount,CommandObject<Long> objectRefcount(byte[]),"[3382, 3384]","{'A1': [(3382, 3384)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> objectRefcount(byte[] key) {
    return new CommandObject<>(commandArguments(OBJECT).add(REFCOUNT).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,objectEncoding,CommandObject<byte[]> objectEncoding(byte[]),"[3386, 3388]","{'A1': [(3386, 3388)]}",{'A1': 1.0},A1,,"  public final CommandObject<byte[]> objectEncoding(byte[] key) {
    return new CommandObject<>(commandArguments(OBJECT).add(ENCODING).key(key), BuilderFactory.BINARY);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,objectIdletime,CommandObject<Long> objectIdletime(byte[]),"[3390, 3392]","{'A1': [(3390, 3392)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> objectIdletime(byte[] key) {
    return new CommandObject<>(commandArguments(OBJECT).add(IDLETIME).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,objectFreq,CommandObject<Long> objectFreq(byte[]),"[3394, 3396]","{'A1': [(3394, 3396)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> objectFreq(byte[] key) {
    return new CommandObject<>(commandArguments(OBJECT).add(FREQ).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,waitReplicas,"CommandObject<Long> waitReplicas(int,long)","[3398, 3400]","{'A1': [(3398, 3400)]}",{'A1': 1.0},A1,,"  public CommandObject<Long> waitReplicas(int replicas, long timeout) {
    return new CommandObject<>(commandArguments(WAIT).add(replicas).add(timeout), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,waitReplicas,"CommandObject<Long> waitReplicas(String,int,long)","[3402, 3404]","{'A1': [(3402, 3404)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> waitReplicas(String sampleKey, int replicas, long timeout) {
    return new CommandObject<>(commandArguments(WAIT).add(replicas).add(timeout).processKey(sampleKey), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,waitReplicas,"CommandObject<Long> waitReplicas(byte[],int,long)","[3406, 3408]","{'A1': [(3406, 3408)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> waitReplicas(byte[] sampleKey, int replicas, long timeout) {
    return new CommandObject<>(commandArguments(WAIT).add(replicas).add(timeout).processKey(sampleKey), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,waitAOF,"CommandObject<KeyValue<Long, Long>> waitAOF(long,long,long)","[3410, 3412]","{'A11': [(3410, 3412)]}",{'A11': 1.0},A11,,"  public CommandObject<KeyValue<Long, Long>> waitAOF(long numLocal, long numReplicas, long timeout) {
    return new CommandObject<>(commandArguments(WAITAOF).add(numLocal).add(numReplicas).add(timeout), BuilderFactory.LONG_LONG_PAIR);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,waitAOF,"CommandObject<KeyValue<Long, Long>> waitAOF(byte[],long,long,long)","[3414, 3416]","{'A11': [(3414, 3416)]}",{'A11': 1.0},A11,,"  public CommandObject<KeyValue<Long, Long>> waitAOF(byte[] sampleKey, long numLocal, long numReplicas, long timeout) {
    return new CommandObject<>(commandArguments(WAITAOF).add(numLocal).add(numReplicas).add(timeout).processKey(sampleKey), BuilderFactory.LONG_LONG_PAIR);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,waitAOF,"CommandObject<KeyValue<Long, Long>> waitAOF(String,long,long,long)","[3418, 3420]","{'A11': [(3418, 3420)]}",{'A11': 1.0},A11,,"  public CommandObject<KeyValue<Long, Long>> waitAOF(String sampleKey, long numLocal, long numReplicas, long timeout) {
    return new CommandObject<>(commandArguments(WAITAOF).add(numLocal).add(numReplicas).add(timeout).processKey(sampleKey), BuilderFactory.LONG_LONG_PAIR);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,publish,"CommandObject<Long> publish(String,String)","[3422, 3424]","{'A1': [(3422, 3424)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> publish(String channel, String message) {
    return new CommandObject<>(commandArguments(PUBLISH).add(channel).add(message), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,publish,"CommandObject<Long> publish(byte[],byte[])","[3426, 3428]","{'A1': [(3426, 3428)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> publish(byte[] channel, byte[] message) {
    return new CommandObject<>(commandArguments(PUBLISH).add(channel).add(message), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,spublish,"CommandObject<Long> spublish(String,String)","[3430, 3432]","{'A1': [(3430, 3432)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> spublish(String channel, String message) {
    return new CommandObject<>(commandArguments(SPUBLISH).key(channel).add(message), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,spublish,"CommandObject<Long> spublish(byte[],byte[])","[3434, 3436]","{'A1': [(3434, 3436)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> spublish(byte[] channel, byte[] message) {
    return new CommandObject<>(commandArguments(SPUBLISH).key(channel).add(message), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hsetObject,"CommandObject<Long> hsetObject(String,String,Object)","[3440, 3442]","{'A1': [(3440, 3442)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hsetObject(String key, String field, Object value) {
    return new CommandObject<>(commandArguments(HSET).key(key).add(field).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,hsetObject,"CommandObject<Long> hsetObject(String,Map<String, Object>)","[3444, 3446]","{'A1': [(3444, 3446)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> hsetObject(String key, Map<String, Object> hash) {
    return new CommandObject<>(addFlatMapArgs(commandArguments(HSET).key(key), hash), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,isRoundRobinSearchCommand,boolean isRoundRobinSearchCommand(),"[3448, 3455]","{'A1': [(3448, 3455)]}",{'A1': 1.0},A1,,"  private boolean isRoundRobinSearchCommand() {
    if (broadcastAndRoundRobinConfig == null) {
      return true;
    } else if (broadcastAndRoundRobinConfig.getRediSearchModeInCluster() == JedisBroadcastAndRoundRobinConfig.RediSearchMode.LIGHT) {
      return false;
    }
    return true;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,checkAndRoundRobinSearchCommand,"CommandArguments checkAndRoundRobinSearchCommand(SearchCommand,String)","[3457, 3465]","{'A1': [(3457, 3465)]}",{'A1': 1.0},A1,,"  private CommandArguments checkAndRoundRobinSearchCommand(SearchCommand sc, String idx) {
    CommandArguments ca = commandArguments(sc);
    if (isRoundRobinSearchCommand()) {
      ca.add(idx);
    } else {
      ca.key(idx);
    }
    return ca;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,checkAndRoundRobinSearchCommand,"CommandArguments checkAndRoundRobinSearchCommand(SearchCommand,String,String)","[3467, 3475]","{'A1': [(3467, 3475)]}",{'A1': 1.0},A1,,"  private CommandArguments checkAndRoundRobinSearchCommand(SearchCommand sc, String idx1, String idx2) {
    CommandArguments ca = commandArguments(sc);
    if (isRoundRobinSearchCommand()) {
      ca.add(idx1).add(idx2);
    } else {
      ca.key(idx1).key(idx2);
    }
    return ca;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,checkAndRoundRobinSearchCommand,"CommandArguments checkAndRoundRobinSearchCommand(CommandArguments,byte[])","[3477, 3479]","{'A1': [(3477, 3479)]}",{'A1': 1.0},A1,,"  private CommandArguments checkAndRoundRobinSearchCommand(CommandArguments commandArguments, byte[] indexName) {
    return isRoundRobinSearchCommand() ? commandArguments.add(indexName) : commandArguments.key(indexName);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,directSearchCommand,"CommandObject<T> directSearchCommand(CommandObject<T>,String)","[3481, 3484]","{'A1': [(3481, 3484)]}",{'A1': 1.0},A1,,"  private <T> CommandObject<T> directSearchCommand(CommandObject<T> object, String indexName) {
    object.getArguments().processKey(indexName);
    return object;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftCreate,"CommandObject<String> ftCreate(String,IndexOptions,Schema)","[3486, 3491]","{'A1': [(3486, 3491)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftCreate(String indexName, IndexOptions indexOptions, Schema schema) {
    CommandArguments args = checkAndRoundRobinSearchCommand(SearchCommand.CREATE, indexName)
        .addParams(indexOptions).add(SearchKeyword.SCHEMA);
    schema.fields.forEach(field -> args.addParams(field));
    return new CommandObject<>(args, BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftCreate,"CommandObject<String> ftCreate(String,FTCreateParams,Iterable<SchemaField>)","[3493, 3499]","{'A1': [(3493, 3499)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftCreate(String indexName, FTCreateParams createParams,
      Iterable<SchemaField> schemaFields) {
    CommandArguments args = checkAndRoundRobinSearchCommand(SearchCommand.CREATE, indexName)
        .addParams(createParams).add(SearchKeyword.SCHEMA);
    schemaFields.forEach(field -> args.addParams(field));
    return new CommandObject<>(args, BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftAlter,"CommandObject<String> ftAlter(String,Schema)","[3501, 3506]","{'A1': [(3501, 3506)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftAlter(String indexName, Schema schema) {
    CommandArguments args = checkAndRoundRobinSearchCommand(SearchCommand.ALTER, indexName)
        .add(SearchKeyword.SCHEMA).add(SearchKeyword.ADD);
    schema.fields.forEach(field -> args.addParams(field));
    return new CommandObject<>(args, BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftAlter,"CommandObject<String> ftAlter(String,Iterable<SchemaField>)","[3508, 3513]","{'A1': [(3508, 3513)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftAlter(String indexName, Iterable<SchemaField> schemaFields) {
    CommandArguments args = checkAndRoundRobinSearchCommand(SearchCommand.ALTER, indexName)
        .add(SearchKeyword.SCHEMA).add(SearchKeyword.ADD);
    schemaFields.forEach(field -> args.addParams(field));
    return new CommandObject<>(args, BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftAliasAdd,"CommandObject<String> ftAliasAdd(String,String)","[3515, 3517]","{'A1': [(3515, 3517)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftAliasAdd(String aliasName, String indexName) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.ALIASADD, aliasName, indexName), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftAliasUpdate,"CommandObject<String> ftAliasUpdate(String,String)","[3519, 3521]","{'A1': [(3519, 3521)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftAliasUpdate(String aliasName, String indexName) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.ALIASUPDATE, aliasName, indexName), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftAliasDel,CommandObject<String> ftAliasDel(String),"[3523, 3525]","{'A1': [(3523, 3525)]}",{'A1': 1.0},A1,,"   public final CommandObject<String> ftAliasDel(String aliasName) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.ALIASDEL, aliasName), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftDropIndex,CommandObject<String> ftDropIndex(String),"[3527, 3529]","{'A1': [(3527, 3529)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftDropIndex(String indexName) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.DROPINDEX, indexName), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftDropIndexDD,CommandObject<String> ftDropIndexDD(String),"[3531, 3534]","{'A1': [(3531, 3534)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftDropIndexDD(String indexName) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.DROPINDEX, indexName).add(SearchKeyword.DD),
        BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSearch,"CommandObject<SearchResult> ftSearch(String,String)","[3536, 3539]","{'A1': [(3536, 3539)]}",{'A1': 1.0},A1,,"  public final CommandObject<SearchResult> ftSearch(String indexName, String query) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SEARCH, indexName).add(query),
        getSearchResultBuilder(null, () -> new SearchResultBuilder(true, false, true)));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSearch,"CommandObject<SearchResult> ftSearch(String,String,FTSearchParams)","[3541, 3546]","{'A1': [(3541, 3546)]}",{'A1': 1.0},A1,,"  public final CommandObject<SearchResult> ftSearch(String indexName, String query, FTSearchParams params) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SEARCH, indexName)
        .add(query).addParams(params.dialectOptional(searchDialect.get())),
        getSearchResultBuilder(params.getReturnFieldDecodeMap(), () -> new SearchResultBuilder(
            !params.getNoContent(), params.getWithScores(), true, params.getReturnFieldDecodeMap())));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSearch,"CommandObject<SearchResult> ftSearch(String,Query)","[3548, 3552]","{'A1': [(3548, 3552)]}",{'A1': 1.0},A1,,"  public final CommandObject<SearchResult> ftSearch(String indexName, Query query) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SEARCH, indexName)
        .addParams(query.dialectOptional(searchDialect.get())), getSearchResultBuilder(null,
        () -> new SearchResultBuilder(!query.getNoContent(), query.getWithScores(), true)));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSearch,"CommandObject<SearchResult> ftSearch(byte[],Query)","[3554, 3562]","{'A1': [(3554, 3562)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<SearchResult> ftSearch(byte[] indexName, Query query) {
    if (protocol == RedisProtocol.RESP3) {
      throw new UnsupportedOperationException(""binary ft.search is not implemented with resp3."");
    }
    return new CommandObject<>(checkAndRoundRobinSearchCommand(commandArguments(SearchCommand.SEARCH), indexName)
        .addParams(query.dialectOptional(searchDialect.get())), getSearchResultBuilder(null,
        () -> new SearchResultBuilder(!query.getNoContent(), query.getWithScores(), false)));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftExplain,"CommandObject<String> ftExplain(String,Query)","[3564, 3567]","{'A1': [(3564, 3567)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftExplain(String indexName, Query query) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.EXPLAIN, indexName)
        .addParams(query.dialectOptional(searchDialect.get())), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftExplainCLI,"CommandObject<List<String>> ftExplainCLI(String,Query)","[3569, 3572]","{'A1': [(3569, 3572)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> ftExplainCLI(String indexName, Query query) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.EXPLAINCLI, indexName)
        .addParams(query.dialectOptional(searchDialect.get())), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftAggregate,"CommandObject<AggregationResult> ftAggregate(String,AggregationBuilder)","[3574, 3578]","{'A1': [(3574, 3578)]}",{'A1': 1.0},A1,,"  public final CommandObject<AggregationResult> ftAggregate(String indexName, AggregationBuilder aggr) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.AGGREGATE, indexName)
        .addParams(aggr.dialectOptional(searchDialect.get())), !aggr.isWithCursor() ? AggregationResult.SEARCH_AGGREGATION_RESULT
        : AggregationResult.SEARCH_AGGREGATION_RESULT_WITH_CURSOR);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftCursorRead,"CommandObject<AggregationResult> ftCursorRead(String,long,int)","[3580, 3584]","{'A1': [(3580, 3584)]}",{'A1': 1.0},A1,,"  public final CommandObject<AggregationResult> ftCursorRead(String indexName, long cursorId, int count) {
    return new CommandObject<>(commandArguments(SearchCommand.CURSOR).add(SearchKeyword.READ)
        .key(indexName).add(cursorId).add(SearchKeyword.COUNT).add(count),
        AggregationResult.SEARCH_AGGREGATION_RESULT_WITH_CURSOR);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftCursorDel,"CommandObject<String> ftCursorDel(String,long)","[3586, 3589]","{'A1': [(3586, 3589)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftCursorDel(String indexName, long cursorId) {
    return new CommandObject<>(commandArguments(SearchCommand.CURSOR).add(SearchKeyword.DEL)
        .key(indexName).add(cursorId), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftProfileAggregate,"CommandObject<Map.Entry<AggregationResult, ProfilingInfo>> ftProfileAggregate(String,FTProfileParams,AggregationBuilder)","[3591, 3598]","{'A1': [(3591, 3598)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map.Entry<AggregationResult, ProfilingInfo>> ftProfileAggregate(
      String indexName, FTProfileParams profileParams, AggregationBuilder aggr) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.PROFILE, indexName)
        .add(SearchKeyword.AGGREGATE).addParams(profileParams).add(SearchKeyword.QUERY)
        .addParams(aggr.dialectOptional(searchDialect.get())), new SearchProfileResponseBuilder<>(
        !aggr.isWithCursor() ? AggregationResult.SEARCH_AGGREGATION_RESULT
        : AggregationResult.SEARCH_AGGREGATION_RESULT_WITH_CURSOR));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftProfileSearch,"CommandObject<Map.Entry<SearchResult, ProfilingInfo>> ftProfileSearch(String,FTProfileParams,Query)","[3600, 3607]","{'A1': [(3600, 3607)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map.Entry<SearchResult, ProfilingInfo>> ftProfileSearch(
      String indexName, FTProfileParams profileParams, Query query) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.PROFILE, indexName)
        .add(SearchKeyword.SEARCH).addParams(profileParams).add(SearchKeyword.QUERY)
        .addParams(query.dialectOptional(searchDialect.get())),
        new SearchProfileResponseBuilder<>(getSearchResultBuilder(null,
            () -> new SearchResultBuilder(!query.getNoContent(), query.getWithScores(), true))));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftProfileSearch,"CommandObject<Map.Entry<SearchResult, ProfilingInfo>> ftProfileSearch(String,FTProfileParams,String,FTSearchParams)","[3609, 3617]","{'A1': [(3609, 3617)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map.Entry<SearchResult, ProfilingInfo>> ftProfileSearch(
      String indexName, FTProfileParams profileParams, String query, FTSearchParams searchParams) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.PROFILE, indexName)
        .add(SearchKeyword.SEARCH).addParams(profileParams).add(SearchKeyword.QUERY).add(query)
        .addParams(searchParams.dialectOptional(searchDialect.get())),
        new SearchProfileResponseBuilder<>(getSearchResultBuilder(searchParams.getReturnFieldDecodeMap(),
            () -> new SearchResultBuilder(!searchParams.getNoContent(), searchParams.getWithScores(), true,
                searchParams.getReturnFieldDecodeMap()))));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getSearchResultBuilder,"Builder<SearchResult> getSearchResultBuilder(Map<String, Boolean>,Supplier<Builder<SearchResult>>)","[3619, 3626]","{'A1': [(3619, 3626)]}",{'A1': 1.0},A1,,"  private Builder<SearchResult> getSearchResultBuilder(
      Map<String, Boolean> isReturnFieldDecode, Supplier<Builder<SearchResult>> resp2) {
    if (protocol == RedisProtocol.RESP3) {
      return isReturnFieldDecode == null ? SearchResult.SEARCH_RESULT_BUILDER
          : new SearchResult.PerFieldDecoderSearchResultBuilder(isReturnFieldDecode);
    }
    return resp2.get();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSynUpdate,"CommandObject<String> ftSynUpdate(String,String)","[3628, 3631]","{'A1': [(3628, 3631)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> ftSynUpdate(String indexName, String synonymGroupId, String... terms) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SYNUPDATE, indexName)
        .add(synonymGroupId).addObjects((Object[]) terms), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSynDump,"CommandObject<Map<String, List<String>>> ftSynDump(String)","[3633, 3636]","{'A1': [(3633, 3636)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, List<String>>> ftSynDump(String indexName) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SYNDUMP, indexName),
        SearchBuilderFactory.SEARCH_SYNONYM_GROUPS);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftDictAdd,CommandObject<Long> ftDictAdd(String),"[3638, 3641]","{'A1': [(3638, 3641)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> ftDictAdd(String dictionary, String... terms) {
    return new CommandObject<>(commandArguments(SearchCommand.DICTADD).add(dictionary).addObjects((Object[]) terms),
        BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftDictDel,CommandObject<Long> ftDictDel(String),"[3643, 3646]","{'A1': [(3643, 3646)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> ftDictDel(String dictionary, String... terms) {
    return new CommandObject<>(commandArguments(SearchCommand.DICTDEL).add(dictionary).addObjects((Object[]) terms),
        BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftDictDump,CommandObject<Set<String>> ftDictDump(String),"[3648, 3650]","{'A1': [(3648, 3650)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> ftDictDump(String dictionary) {
    return new CommandObject<>(commandArguments(SearchCommand.DICTDUMP).add(dictionary), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftDictAddBySampleKey,"CommandObject<Long> ftDictAddBySampleKey(String,String)","[3652, 3654]","{'A1': [(3652, 3654)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> ftDictAddBySampleKey(String indexName, String dictionary, String... terms) {
    return directSearchCommand(ftDictAdd(dictionary, terms), indexName);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftDictDelBySampleKey,"CommandObject<Long> ftDictDelBySampleKey(String,String)","[3656, 3658]","{'A1': [(3656, 3658)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> ftDictDelBySampleKey(String indexName, String dictionary, String... terms) {
    return directSearchCommand(ftDictDel(dictionary, terms), indexName);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftDictDumpBySampleKey,"CommandObject<Set<String>> ftDictDumpBySampleKey(String,String)","[3660, 3662]","{'A1': [(3660, 3662)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> ftDictDumpBySampleKey(String indexName, String dictionary) {
    return directSearchCommand(ftDictDump(dictionary), indexName);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSpellCheck,"CommandObject<Map<String, Map<String, Double>>> ftSpellCheck(String,String)","[3664, 3667]","{'A1': [(3664, 3667)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, Map<String, Double>>> ftSpellCheck(String index, String query) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SPELLCHECK, index).add(query),
        SearchBuilderFactory.SEARCH_SPELLCHECK_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSpellCheck,"CommandObject<Map<String, Map<String, Double>>> ftSpellCheck(String,String,FTSpellCheckParams)","[3669, 3673]","{'A1': [(3669, 3673)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, Map<String, Double>>> ftSpellCheck(String index, String query,
      FTSpellCheckParams spellCheckParams) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.SPELLCHECK, index).add(query)
        .addParams(spellCheckParams.dialectOptional(searchDialect.get())), SearchBuilderFactory.SEARCH_SPELLCHECK_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftInfo,"CommandObject<Map<String, Object>> ftInfo(String)","[3675, 3678]","{'A1': [(3675, 3678)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, Object>> ftInfo(String indexName) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.INFO, indexName),
        protocol == RedisProtocol.RESP3 ? BuilderFactory.AGGRESSIVE_ENCODED_OBJECT_MAP : BuilderFactory.ENCODED_OBJECT_MAP);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftTagVals,"CommandObject<Set<String>> ftTagVals(String,String)","[3680, 3683]","{'A1': [(3680, 3683)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> ftTagVals(String indexName, String fieldName) {
    return new CommandObject<>(checkAndRoundRobinSearchCommand(SearchCommand.TAGVALS, indexName)
        .add(fieldName), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftConfigGet,"CommandObject<Map<String, Object>> ftConfigGet(String)","[3685, 3689]","{'A1': [(3685, 3689)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Map<String, Object>> ftConfigGet(String option) {
    return new CommandObject<>(commandArguments(SearchCommand.CONFIG).add(SearchKeyword.GET).add(option),
        protocol == RedisProtocol.RESP3 ? BuilderFactory.AGGRESSIVE_ENCODED_OBJECT_MAP : BuilderFactory.ENCODED_OBJECT_MAP_FROM_PAIRS);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftConfigGet,"CommandObject<Map<String, Object>> ftConfigGet(String,String)","[3691, 3694]","{'A1': [(3691, 3694)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Map<String, Object>> ftConfigGet(String indexName, String option) {
    return directSearchCommand(ftConfigGet(option), indexName);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftConfigSet,"CommandObject<String> ftConfigSet(String,String)","[3696, 3699]","{'A1': [(3696, 3699)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<String> ftConfigSet(String option, String value) {
    return new CommandObject<>(commandArguments(SearchCommand.CONFIG).add(SearchKeyword.SET).add(option).add(value), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftConfigSet,"CommandObject<String> ftConfigSet(String,String,String)","[3701, 3704]","{'A1': [(3701, 3704)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<String> ftConfigSet(String indexName, String option, String value) {
    return directSearchCommand(ftConfigSet(option, value), indexName);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSugAdd,"CommandObject<Long> ftSugAdd(String,String,double)","[3706, 3708]","{'A1': [(3706, 3708)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> ftSugAdd(String key, String string, double score) {
    return new CommandObject<>(commandArguments(SearchCommand.SUGADD).key(key).add(string).add(score), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSugAddIncr,"CommandObject<Long> ftSugAddIncr(String,String,double)","[3710, 3712]","{'A1': [(3710, 3712)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> ftSugAddIncr(String key, String string, double score) {
    return new CommandObject<>(commandArguments(SearchCommand.SUGADD).key(key).add(string).add(score).add(SearchKeyword.INCR), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSugGet,"CommandObject<List<String>> ftSugGet(String,String)","[3714, 3716]","{'A1': [(3714, 3716)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> ftSugGet(String key, String prefix) {
    return new CommandObject<>(commandArguments(SearchCommand.SUGGET).key(key).add(prefix), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSugGet,"CommandObject<List<String>> ftSugGet(String,String,boolean,int)","[3718, 3723]","{'A1': [(3718, 3723)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> ftSugGet(String key, String prefix, boolean fuzzy, int max) {
    CommandArguments args = commandArguments(SearchCommand.SUGGET).key(key).add(prefix);
    if (fuzzy) args.add(SearchKeyword.FUZZY);
    args.add(SearchKeyword.MAX).add(max);
    return new CommandObject<>(args, BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSugGetWithScores,"CommandObject<List<Tuple>> ftSugGetWithScores(String,String)","[3725, 3728]","{'A1': [(3725, 3728)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> ftSugGetWithScores(String key, String prefix) {
    return new CommandObject<>(commandArguments(SearchCommand.SUGGET).key(key).add(prefix)
        .add(SearchKeyword.WITHSCORES), BuilderFactory.TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSugGetWithScores,"CommandObject<List<Tuple>> ftSugGetWithScores(String,String,boolean,int)","[3730, 3736]","{'A1': [(3730, 3736)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Tuple>> ftSugGetWithScores(String key, String prefix, boolean fuzzy, int max) {
    CommandArguments args = commandArguments(SearchCommand.SUGGET).key(key).add(prefix);
    if (fuzzy) args.add(SearchKeyword.FUZZY);
    args.add(SearchKeyword.MAX).add(max);
    args.add(SearchKeyword.WITHSCORES);
    return new CommandObject<>(args, BuilderFactory.TUPLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSugDel,"CommandObject<Boolean> ftSugDel(String,String)","[3738, 3740]","{'A1': [(3738, 3740)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> ftSugDel(String key, String string) {
    return new CommandObject<>(commandArguments(SearchCommand.SUGDEL).key(key).add(string), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftSugLen,CommandObject<Long> ftSugLen(String),"[3742, 3744]","{'A1': [(3742, 3744)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> ftSugLen(String key) {
    return new CommandObject<>(commandArguments(SearchCommand.SUGLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,ftList,CommandObject<Set<String>> ftList(),"[3746, 3748]","{'A1': [(3746, 3748)]}",{'A1': 1.0},A1,,"  public final CommandObject<Set<String>> ftList() {
    return new CommandObject<>(commandArguments(SearchCommand._LIST), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonSet,"CommandObject<String> jsonSet(String,Path2,Object)","[3752, 3754]","{'A1': [(3752, 3754)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> jsonSet(String key, Path2 path, Object object) {
    return new CommandObject<>(commandArguments(JsonCommand.SET).key(key).add(path).add(object), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonSetWithEscape,"CommandObject<String> jsonSetWithEscape(String,Path2,Object)","[3756, 3759]","{'A1': [(3756, 3756), (3759, 3759)], 'A39': [(3757, 3758)]}","{'A1': 0.5, 'A39': 0.5}",A1,,"  public final CommandObject<String> jsonSetWithEscape(String key, Path2 path, Object object) {
    return new CommandObject<>(commandArguments(JsonCommand.SET).key(key).add(path).add(
        getJsonObjectMapper().toJson(object)), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonSet,"CommandObject<String> jsonSet(String,Path,Object)","[3761, 3765]","{'A1': [(3761, 3762), (3765, 3765)], 'A39': [(3763, 3764)]}","{'A1': 0.6, 'A39': 0.4}",A1,,"  @Deprecated
  public final CommandObject<String> jsonSet(String key, Path path, Object pojo) {
    return new CommandObject<>(commandArguments(JsonCommand.SET).key(key).add(path).add(
        getJsonObjectMapper().toJson(pojo)), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonSetWithPlainString,"CommandObject<String> jsonSetWithPlainString(String,Path,String)","[3767, 3770]","{'A1': [(3767, 3770)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<String> jsonSetWithPlainString(String key, Path path, String string) {
    return new CommandObject<>(commandArguments(JsonCommand.SET).key(key).add(path).add(string), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonSet,"CommandObject<String> jsonSet(String,Path2,Object,JsonSetParams)","[3772, 3774]","{'A1': [(3772, 3774)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> jsonSet(String key, Path2 path, Object object, JsonSetParams params) {
    return new CommandObject<>(commandArguments(JsonCommand.SET).key(key).add(path).add(object).addParams(params), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonSetWithEscape,"CommandObject<String> jsonSetWithEscape(String,Path2,Object,JsonSetParams)","[3776, 3779]","{'A1': [(3776, 3776), (3779, 3779)], 'A39': [(3777, 3778)]}","{'A1': 0.5, 'A39': 0.5}",A1,,"  public final CommandObject<String> jsonSetWithEscape(String key, Path2 path, Object object, JsonSetParams params) {
    return new CommandObject<>(commandArguments(JsonCommand.SET).key(key).add(path).add(
        getJsonObjectMapper().toJson(object)).addParams(params), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonSet,"CommandObject<String> jsonSet(String,Path,Object,JsonSetParams)","[3781, 3785]","{'A1': [(3781, 3782), (3785, 3785)], 'A39': [(3783, 3784)]}","{'A1': 0.6, 'A39': 0.4}",A1,,"  @Deprecated
  public final CommandObject<String> jsonSet(String key, Path path, Object pojo, JsonSetParams params) {
    return new CommandObject<>(commandArguments(JsonCommand.SET).key(key).add(path).add(
        getJsonObjectMapper().toJson(pojo)).addParams(params), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonMerge,"CommandObject<String> jsonMerge(String,Path2,Object)","[3787, 3789]","{'A50': [(3787, 3789)]}",{'A50': 1.0},A50,,"  public final CommandObject<String> jsonMerge(String key, Path2 path, Object object) {
    return new CommandObject<>(commandArguments(JsonCommand.MERGE).key(key).add(path).add(object), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonMerge,"CommandObject<String> jsonMerge(String,Path,Object)","[3791, 3795]","{'A1': [(3791, 3791)], 'A50': [(3792, 3795)]}","{'A1': 0.2, 'A50': 0.8}",A50,,"  @Deprecated
  public final CommandObject<String> jsonMerge(String key, Path path, Object pojo) {
    return new CommandObject<>(commandArguments(JsonCommand.MERGE).key(key).add(path).add(
        getJsonObjectMapper().toJson(pojo)), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonGet,CommandObject<Object> jsonGet(String),"[3797, 3799]","{'A1': [(3797, 3799)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> jsonGet(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.GET).key(key), JSON_GENERIC_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonGet,"CommandObject<T> jsonGet(String,Class<T>)","[3801, 3804]","{'A1': [(3801, 3802), (3804, 3804)], 'A39': [(3803, 3803)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"  @Deprecated
  public final <T> CommandObject<T> jsonGet(String key, Class<T> clazz) {
    return new CommandObject<>(commandArguments(JsonCommand.GET).key(key), new JsonObjectBuilder<>(clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonGet,CommandObject<Object> jsonGet(String),"[3806, 3808]","{'A1': [(3806, 3806), (3808, 3808)], 'A100': [(3807, 3807)]}","{'A1': 0.6666666666666666, 'A100': 0.3333333333333333}",A1,,"  public final CommandObject<Object> jsonGet(String key, Path2... paths) {
    return new CommandObject<>(commandArguments(JsonCommand.GET).key(key).addObjects((Object[]) paths), JsonBuilderFactory.JSON_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonGet,CommandObject<Object> jsonGet(String),"[3810, 3813]","{'A1': [(3810, 3813)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Object> jsonGet(String key, Path... paths) {
    return new CommandObject<>(commandArguments(JsonCommand.GET).key(key).addObjects((Object[]) paths), JSON_GENERIC_OBJECT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonGetAsPlainString,"CommandObject<String> jsonGetAsPlainString(String,Path)","[3815, 3818]","{'A1': [(3815, 3818)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<String> jsonGetAsPlainString(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.GET).key(key).add(path), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonGet,"CommandObject<T> jsonGet(String,Class<T>)","[3820, 3823]","{'A1': [(3820, 3821), (3823, 3823)], 'A39': [(3822, 3822)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"  @Deprecated
  public final <T> CommandObject<T> jsonGet(String key, Class<T> clazz, Path... paths) {
    return new CommandObject<>(commandArguments(JsonCommand.GET).key(key).addObjects((Object[]) paths), new JsonObjectBuilder<>(clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonMGet,CommandObject<List<JSONArray>> jsonMGet(Path2),"[3825, 3827]","{'A1': [(3825, 3825), (3827, 3827)], 'A100': [(3826, 3826)]}","{'A1': 0.6666666666666666, 'A100': 0.3333333333333333}",A1,,"  public final CommandObject<List<JSONArray>> jsonMGet(Path2 path, String... keys) {
    return new CommandObject<>(commandArguments(JsonCommand.MGET).keys((Object[]) keys).add(path), JsonBuilderFactory.JSON_ARRAY_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonMGet,"CommandObject<List<T>> jsonMGet(Path,Class<T>)","[3829, 3832]","{'A1': [(3829, 3830), (3832, 3832)], 'A39': [(3831, 3831)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"  @Deprecated
  public final <T> CommandObject<List<T>> jsonMGet(Path path, Class<T> clazz, String... keys) {
    return new CommandObject<>(commandArguments(JsonCommand.MGET).keys((Object[]) keys).add(path), new JsonObjectListBuilder<>(clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonDel,CommandObject<Long> jsonDel(String),"[3834, 3836]","{'A1': [(3834, 3836)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> jsonDel(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.DEL).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonDel,"CommandObject<Long> jsonDel(String,Path2)","[3838, 3840]","{'A1': [(3838, 3840)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> jsonDel(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.DEL).key(key).add(path), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonDel,"CommandObject<Long> jsonDel(String,Path)","[3842, 3845]","{'A1': [(3842, 3845)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonDel(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.DEL).key(key).add(path), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonClear,CommandObject<Long> jsonClear(String),"[3847, 3849]","{'A1': [(3847, 3849)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> jsonClear(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.CLEAR).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonClear,"CommandObject<Long> jsonClear(String,Path2)","[3851, 3853]","{'A1': [(3851, 3853)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> jsonClear(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.CLEAR).key(key).add(path), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonClear,"CommandObject<Long> jsonClear(String,Path)","[3855, 3858]","{'A1': [(3855, 3858)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonClear(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.CLEAR).key(key).add(path), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonToggle,"CommandObject<List<Boolean>> jsonToggle(String,Path2)","[3860, 3862]","{'A1': [(3860, 3862)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> jsonToggle(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.TOGGLE).key(key).add(path), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonToggle,"CommandObject<String> jsonToggle(String,Path)","[3864, 3867]","{'A1': [(3864, 3867)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<String> jsonToggle(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.TOGGLE).key(key).add(path), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonType,CommandObject<Class<?>> jsonType(String),"[3869, 3872]","{'A1': [(3869, 3872)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Class<?>> jsonType(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.TYPE).key(key), JsonBuilderFactory.JSON_TYPE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonType,"CommandObject<List<Class<?>>> jsonType(String,Path2)","[3874, 3877]","{'A1': [(3874, 3877)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Class<?>>> jsonType(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.TYPE).key(key).add(path),
        protocol != RedisProtocol.RESP3 ? JsonBuilderFactory.JSON_TYPE_LIST : JsonBuilderFactory.JSON_TYPE_RESPONSE_RESP3_COMPATIBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonType,"CommandObject<Class<?>> jsonType(String,Path)","[3879, 3882]","{'A1': [(3879, 3882)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Class<?>> jsonType(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.TYPE).key(key).add(path), JsonBuilderFactory.JSON_TYPE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonStrAppend,"CommandObject<Long> jsonStrAppend(String,Object)","[3884, 3888]","{'A1': [(3884, 3885), (3888, 3888)], 'A39': [(3886, 3887)]}","{'A1': 0.6, 'A39': 0.4}",A1,,"  @Deprecated
  public final CommandObject<Long> jsonStrAppend(String key, Object string) {
    return new CommandObject<>(commandArguments(JsonCommand.STRAPPEND).key(key).add(
        getJsonObjectMapper().toJson(string)), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonStrAppend,"CommandObject<List<Long>> jsonStrAppend(String,Path2,Object)","[3890, 3893]","{'A1': [(3890, 3890), (3893, 3893)], 'A39': [(3891, 3892)]}","{'A1': 0.5, 'A39': 0.5}",A1,,"  public final CommandObject<List<Long>> jsonStrAppend(String key, Path2 path, Object string) {
    return new CommandObject<>(commandArguments(JsonCommand.STRAPPEND).key(key).add(path).add(
        getJsonObjectMapper().toJson(string)), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonStrAppend,"CommandObject<Long> jsonStrAppend(String,Path,Object)","[3895, 3899]","{'A1': [(3895, 3896), (3899, 3899)], 'A39': [(3897, 3898)]}","{'A1': 0.6, 'A39': 0.4}",A1,,"  @Deprecated
  public final CommandObject<Long> jsonStrAppend(String key, Path path, Object string) {
    return new CommandObject<>(commandArguments(JsonCommand.STRAPPEND).key(key).add(path).add(
        getJsonObjectMapper().toJson(string)), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonStrLen,CommandObject<Long> jsonStrLen(String),"[3901, 3904]","{'A1': [(3901, 3904)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonStrLen(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.STRLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonStrLen,"CommandObject<List<Long>> jsonStrLen(String,Path2)","[3906, 3908]","{'A1': [(3906, 3908)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> jsonStrLen(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.STRLEN).key(key).add(path), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonStrLen,"CommandObject<Long> jsonStrLen(String,Path)","[3910, 3913]","{'A1': [(3910, 3913)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonStrLen(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.STRLEN).key(key).add(path), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonNumIncrBy,"CommandObject<Object> jsonNumIncrBy(String,Path2,double)","[3915, 3918]","{'A1': [(3915, 3918)]}",{'A1': 1.0},A1,,"  public final CommandObject<Object> jsonNumIncrBy(String key, Path2 path, double value) {
    return new CommandObject<>(commandArguments(JsonCommand.NUMINCRBY).key(key).add(path).add(value),
        JsonBuilderFactory.JSON_ARRAY_OR_DOUBLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonNumIncrBy,"CommandObject<Double> jsonNumIncrBy(String,Path,double)","[3920, 3923]","{'A1': [(3920, 3923)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Double> jsonNumIncrBy(String key, Path path, double value) {
    return new CommandObject<>(commandArguments(JsonCommand.NUMINCRBY).key(key).add(path).add(value), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrAppend,"CommandObject<Long> jsonArrAppend(String,String)","[3925, 3932]","{'A1': [(3925, 3932)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonArrAppend(String key, String path, JSONObject... objects) {
    CommandArguments args = commandArguments(JsonCommand.ARRAPPEND).key(key).add(path);
    for (Object object : objects) {
      args.add(object);
    }
    return new CommandObject<>(args, BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrAppend,"CommandObject<List<Long>> jsonArrAppend(String,Path2)","[3934, 3937]","{'A1': [(3934, 3937)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> jsonArrAppend(String key, Path2 path, Object... objects) {
    CommandArguments args = commandArguments(JsonCommand.ARRAPPEND).key(key).add(path).addObjects(objects);
    return new CommandObject<>(args, BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrAppendWithEscape,"CommandObject<List<Long>> jsonArrAppendWithEscape(String,Path2)","[3939, 3945]","{'A1': [(3939, 3941), (3943, 3945)], 'A39': [(3942, 3942)]}","{'A1': 0.8571428571428571, 'A39': 0.14285714285714285}",A1,,"  public final CommandObject<List<Long>> jsonArrAppendWithEscape(String key, Path2 path, Object... objects) {
    CommandArguments args = commandArguments(JsonCommand.ARRAPPEND).key(key).add(path);
    for (Object object : objects) {
      args.add(getJsonObjectMapper().toJson(object));
    }
    return new CommandObject<>(args, BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrAppend,"CommandObject<Long> jsonArrAppend(String,Path)","[3947, 3954]","{'A1': [(3947, 3950), (3952, 3954)], 'A39': [(3951, 3951)]}","{'A1': 0.875, 'A39': 0.125}",A1,,"  @Deprecated
  public final CommandObject<Long> jsonArrAppend(String key, Path path, Object... pojos) {
    CommandArguments args = commandArguments(JsonCommand.ARRAPPEND).key(key).add(path);
    for (Object pojo : pojos) {
      args.add(getJsonObjectMapper().toJson(pojo));
    }
    return new CommandObject<>(args, BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrIndex,"CommandObject<List<Long>> jsonArrIndex(String,Path2,Object)","[3956, 3958]","{'A1': [(3956, 3958)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> jsonArrIndex(String key, Path2 path, Object scalar) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRINDEX).key(key).add(path).add(scalar), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrIndexWithEscape,"CommandObject<List<Long>> jsonArrIndexWithEscape(String,Path2,Object)","[3960, 3963]","{'A1': [(3960, 3960), (3963, 3963)], 'A39': [(3961, 3962)]}","{'A1': 0.5, 'A39': 0.5}",A1,,"  public final CommandObject<List<Long>> jsonArrIndexWithEscape(String key, Path2 path, Object scalar) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRINDEX).key(key).add(path).add(
        getJsonObjectMapper().toJson(scalar)), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrIndex,"CommandObject<Long> jsonArrIndex(String,Path,Object)","[3965, 3969]","{'A1': [(3965, 3966), (3969, 3969)], 'A39': [(3967, 3968)]}","{'A1': 0.6, 'A39': 0.4}",A1,,"  @Deprecated
  public final CommandObject<Long> jsonArrIndex(String key, Path path, Object scalar) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRINDEX).key(key).add(path).add(
        getJsonObjectMapper().toJson(scalar)), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrInsert,"CommandObject<List<Long>> jsonArrInsert(String,Path2,int)","[3971, 3974]","{'A1': [(3971, 3974)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> jsonArrInsert(String key, Path2 path, int index, Object... objects) {
    CommandArguments args = commandArguments(JsonCommand.ARRINSERT).key(key).add(path).add(index).addObjects(objects);
    return new CommandObject<>(args, BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrInsertWithEscape,"CommandObject<List<Long>> jsonArrInsertWithEscape(String,Path2,int)","[3976, 3982]","{'A1': [(3976, 3978), (3980, 3982)], 'A39': [(3979, 3979)]}","{'A1': 0.8571428571428571, 'A39': 0.14285714285714285}",A1,,"  public final CommandObject<List<Long>> jsonArrInsertWithEscape(String key, Path2 path, int index, Object... objects) {
    CommandArguments args = commandArguments(JsonCommand.ARRINSERT).key(key).add(path).add(index);
    for (Object object : objects) {
      args.add(getJsonObjectMapper().toJson(object));
    }
    return new CommandObject<>(args, BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrInsert,"CommandObject<Long> jsonArrInsert(String,Path,int)","[3984, 3991]","{'A1': [(3984, 3987), (3989, 3991)], 'A39': [(3988, 3988)]}","{'A1': 0.875, 'A39': 0.125}",A1,,"  @Deprecated
  public final CommandObject<Long> jsonArrInsert(String key, Path path, int index, Object... pojos) {
    CommandArguments args = commandArguments(JsonCommand.ARRINSERT).key(key).add(path).add(index);
    for (Object pojo : pojos) {
      args.add(getJsonObjectMapper().toJson(pojo));
    }
    return new CommandObject<>(args, BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrPop,CommandObject<Object> jsonArrPop(String),"[3993, 3996]","{'A1': [(3993, 3994), (3996, 3996)], 'A39': [(3995, 3995)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"  @Deprecated
  public final CommandObject<Object> jsonArrPop(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRPOP).key(key), new JsonObjectBuilder<>(Object.class));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrPop,"CommandObject<T> jsonArrPop(String,Class<T>)","[3998, 4001]","{'A1': [(3998, 3999), (4001, 4001)], 'A39': [(4000, 4000)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"  @Deprecated
  public final <T> CommandObject<T> jsonArrPop(String key, Class<T> clazz) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRPOP).key(key), new JsonObjectBuilder<>(clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrPop,"CommandObject<List<Object>> jsonArrPop(String,Path2)","[4003, 4005]","{'A1': [(4003, 4003), (4005, 4005)], 'A39': [(4004, 4004)]}","{'A1': 0.6666666666666666, 'A39': 0.3333333333333333}",A1,,"  public final CommandObject<List<Object>> jsonArrPop(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRPOP).key(key).add(path), new JsonObjectListBuilder<>(Object.class));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrPop,"CommandObject<Object> jsonArrPop(String,Path)","[4007, 4010]","{'A1': [(4007, 4008), (4010, 4010)], 'A39': [(4009, 4009)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"  @Deprecated
  public final CommandObject<Object> jsonArrPop(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRPOP).key(key).add(path), new JsonObjectBuilder<>(Object.class));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrPop,"CommandObject<T> jsonArrPop(String,Class<T>,Path)","[4012, 4015]","{'A1': [(4012, 4013), (4015, 4015)], 'A39': [(4014, 4014)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"  @Deprecated
  public final <T> CommandObject<T> jsonArrPop(String key, Class<T> clazz, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRPOP).key(key).add(path), new JsonObjectBuilder<>(clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrPop,"CommandObject<List<Object>> jsonArrPop(String,Path2,int)","[4017, 4019]","{'A1': [(4017, 4017), (4019, 4019)], 'A39': [(4018, 4018)]}","{'A1': 0.6666666666666666, 'A39': 0.3333333333333333}",A1,,"  public final CommandObject<List<Object>> jsonArrPop(String key, Path2 path, int index) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRPOP).key(key).add(path).add(index), new JsonObjectListBuilder<>(Object.class));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrPop,"CommandObject<Object> jsonArrPop(String,Path,int)","[4021, 4024]","{'A1': [(4021, 4022), (4024, 4024)], 'A39': [(4023, 4023)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"  @Deprecated
  public final CommandObject<Object> jsonArrPop(String key, Path path, int index) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRPOP).key(key).add(path).add(index), new JsonObjectBuilder<>(Object.class));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrPop,"CommandObject<T> jsonArrPop(String,Class<T>,Path,int)","[4026, 4029]","{'A1': [(4026, 4027), (4029, 4029)], 'A39': [(4028, 4028)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"  @Deprecated
  public final <T> CommandObject<T> jsonArrPop(String key, Class<T> clazz, Path path, int index) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRPOP).key(key).add(path).add(index), new JsonObjectBuilder<>(clazz));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrLen,CommandObject<Long> jsonArrLen(String),"[4031, 4034]","{'A1': [(4031, 4034)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonArrLen(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrLen,"CommandObject<List<Long>> jsonArrLen(String,Path2)","[4036, 4038]","{'A1': [(4036, 4038)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> jsonArrLen(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRLEN).key(key).add(path), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrLen,"CommandObject<Long> jsonArrLen(String,Path)","[4040, 4043]","{'A1': [(4040, 4043)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonArrLen(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRLEN).key(key).add(path), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrTrim,"CommandObject<List<Long>> jsonArrTrim(String,Path2,int,int)","[4045, 4047]","{'A1': [(4045, 4047)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> jsonArrTrim(String key, Path2 path, int start, int stop) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRTRIM).key(key).add(path).add(start).add(stop), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonArrTrim,"CommandObject<Long> jsonArrTrim(String,Path,int,int)","[4049, 4052]","{'A1': [(4049, 4052)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonArrTrim(String key, Path path, int start, int stop) {
    return new CommandObject<>(commandArguments(JsonCommand.ARRTRIM).key(key).add(path).add(start).add(stop), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonObjLen,CommandObject<Long> jsonObjLen(String),"[4054, 4057]","{'A1': [(4054, 4057)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonObjLen(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.OBJLEN).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonObjLen,"CommandObject<Long> jsonObjLen(String,Path)","[4059, 4062]","{'A1': [(4059, 4062)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonObjLen(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.OBJLEN).key(key).add(path), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonObjLen,"CommandObject<List<Long>> jsonObjLen(String,Path2)","[4064, 4066]","{'A1': [(4064, 4066)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> jsonObjLen(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.OBJLEN).key(key).add(path), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonObjKeys,CommandObject<List<String>> jsonObjKeys(String),"[4068, 4071]","{'A1': [(4068, 4071)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<List<String>> jsonObjKeys(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.OBJKEYS).key(key), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonObjKeys,"CommandObject<List<String>> jsonObjKeys(String,Path)","[4073, 4076]","{'A1': [(4073, 4076)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<List<String>> jsonObjKeys(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.OBJKEYS).key(key).add(path), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonObjKeys,"CommandObject<List<List<String>>> jsonObjKeys(String,Path2)","[4078, 4080]","{'A1': [(4078, 4080)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<List<String>>> jsonObjKeys(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.OBJKEYS).key(key).add(path), BuilderFactory.STRING_LIST_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonDebugMemory,CommandObject<Long> jsonDebugMemory(String),"[4082, 4085]","{'A1': [(4082, 4085)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonDebugMemory(String key) {
    return new CommandObject<>(commandArguments(JsonCommand.DEBUG).add(""MEMORY"").key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonDebugMemory,"CommandObject<Long> jsonDebugMemory(String,Path)","[4087, 4090]","{'A1': [(4087, 4090)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> jsonDebugMemory(String key, Path path) {
    return new CommandObject<>(commandArguments(JsonCommand.DEBUG).add(""MEMORY"").key(key).add(path), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,jsonDebugMemory,"CommandObject<List<Long>> jsonDebugMemory(String,Path2)","[4092, 4094]","{'A1': [(4092, 4094)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> jsonDebugMemory(String key, Path2 path) {
    return new CommandObject<>(commandArguments(JsonCommand.DEBUG).add(""MEMORY"").key(key).add(path), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsCreate,CommandObject<String> tsCreate(String),"[4098, 4100]","{'A1': [(4098, 4100)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tsCreate(String key) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.CREATE).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsCreate,"CommandObject<String> tsCreate(String,TSCreateParams)","[4102, 4104]","{'A1': [(4102, 4104)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tsCreate(String key, TSCreateParams createParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.CREATE).key(key).addParams(createParams), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsDel,"CommandObject<Long> tsDel(String,long,long)","[4106, 4109]","{'A1': [(4106, 4109)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsDel(String key, long fromTimestamp, long toTimestamp) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.DEL).key(key)
        .add(fromTimestamp).add(toTimestamp), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsAlter,"CommandObject<String> tsAlter(String,TSAlterParams)","[4111, 4113]","{'A1': [(4111, 4113)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tsAlter(String key, TSAlterParams alterParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.ALTER).key(key).addParams(alterParams), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsAdd,"CommandObject<Long> tsAdd(String,double)","[4115, 4117]","{'A1': [(4115, 4117)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsAdd(String key, double value) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.ADD).key(key).add(Protocol.BYTES_ASTERISK).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsAdd,"CommandObject<Long> tsAdd(String,long,double)","[4119, 4121]","{'A1': [(4119, 4121)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsAdd(String key, long timestamp, double value) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.ADD).key(key).add(timestamp).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsAdd,"CommandObject<Long> tsAdd(String,long,double,TSCreateParams)","[4123, 4127]","{'A1': [(4123, 4127)]}",{'A1': 1.0},A1,,"  @Deprecated
  public final CommandObject<Long> tsAdd(String key, long timestamp, double value, TSCreateParams createParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.ADD).key(key).add(timestamp).add(value)
        .addParams(createParams), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsAdd,"CommandObject<Long> tsAdd(String,long,double,TSAddParams)","[4129, 4132]","{'A1': [(4129, 4132)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsAdd(String key, long timestamp, double value, TSAddParams addParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.ADD).key(key).add(timestamp).add(value)
        .addParams(addParams), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsMAdd,CommandObject<List<Long>> tsMAdd(),"[4134, 4140]","{'A1': [(4134, 4140)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> tsMAdd(Map.Entry<String, TSElement>... entries) {
    CommandArguments args = commandArguments(TimeSeriesCommand.MADD);
    for (Map.Entry<String, TSElement> entry : entries) {
      args.key(entry.getKey()).add(entry.getValue().getTimestamp()).add(entry.getValue().getValue());
    }
    return new CommandObject<>(args, BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsIncrBy,"CommandObject<Long> tsIncrBy(String,double)","[4142, 4144]","{'A1': [(4142, 4144)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsIncrBy(String key, double value) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.INCRBY).key(key).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsIncrBy,"CommandObject<Long> tsIncrBy(String,double,long)","[4146, 4149]","{'A1': [(4146, 4149)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsIncrBy(String key, double value, long timestamp) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.INCRBY).key(key).add(value)
        .add(TimeSeriesKeyword.TIMESTAMP).add(timestamp), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsIncrBy,"CommandObject<Long> tsIncrBy(String,double,TSIncrByParams)","[4151, 4154]","{'A1': [(4151, 4154)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsIncrBy(String key, double addend, TSIncrByParams incrByParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.INCRBY).key(key).add(addend)
        .addParams(incrByParams), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsDecrBy,"CommandObject<Long> tsDecrBy(String,double)","[4156, 4158]","{'A1': [(4156, 4158)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsDecrBy(String key, double value) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.DECRBY).key(key).add(value), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsDecrBy,"CommandObject<Long> tsDecrBy(String,double,long)","[4160, 4163]","{'A1': [(4160, 4163)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsDecrBy(String key, double value, long timestamp) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.DECRBY).key(key).add(value)
        .add(TimeSeriesKeyword.TIMESTAMP).add(timestamp), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsDecrBy,"CommandObject<Long> tsDecrBy(String,double,TSDecrByParams)","[4165, 4168]","{'A1': [(4165, 4168)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> tsDecrBy(String key, double subtrahend, TSDecrByParams decrByParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.DECRBY).key(key).add(subtrahend)
        .addParams(decrByParams), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsRange,"CommandObject<List<TSElement>> tsRange(String,long,long)","[4170, 4173]","{'A1': [(4170, 4173)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<TSElement>> tsRange(String key, long fromTimestamp, long toTimestamp) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.RANGE).key(key)
        .add(fromTimestamp).add(toTimestamp), TimeSeriesBuilderFactory.TIMESERIES_ELEMENT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsRange,"CommandObject<List<TSElement>> tsRange(String,TSRangeParams)","[4175, 4178]","{'A1': [(4175, 4178)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<TSElement>> tsRange(String key, TSRangeParams rangeParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.RANGE).key(key)
        .addParams(rangeParams), TimeSeriesBuilderFactory.TIMESERIES_ELEMENT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsRevRange,"CommandObject<List<TSElement>> tsRevRange(String,long,long)","[4180, 4183]","{'A1': [(4180, 4183)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<TSElement>> tsRevRange(String key, long fromTimestamp, long toTimestamp) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.REVRANGE).key(key)
        .add(fromTimestamp).add(toTimestamp), TimeSeriesBuilderFactory.TIMESERIES_ELEMENT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsRevRange,"CommandObject<List<TSElement>> tsRevRange(String,TSRangeParams)","[4185, 4188]","{'A1': [(4185, 4188)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<TSElement>> tsRevRange(String key, TSRangeParams rangeParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.REVRANGE).key(key)
        .addParams(rangeParams), TimeSeriesBuilderFactory.TIMESERIES_ELEMENT_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsMRange,"CommandObject<Map<String, TSMRangeElements>> tsMRange(long,long)","[4190, 4194]","{'A1': [(4190, 4194)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, TSMRangeElements>> tsMRange(long fromTimestamp, long toTimestamp, String... filters) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.MRANGE).add(fromTimestamp)
        .add(toTimestamp).add(TimeSeriesKeyword.FILTER).addObjects((Object[]) filters),
        getTimeseriesMultiRangeResponseBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsMRange,"CommandObject<Map<String, TSMRangeElements>> tsMRange(TSMRangeParams)","[4196, 4199]","{'A1': [(4196, 4199)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, TSMRangeElements>> tsMRange(TSMRangeParams multiRangeParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.MRANGE)
        .addParams(multiRangeParams), getTimeseriesMultiRangeResponseBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsMRevRange,"CommandObject<Map<String, TSMRangeElements>> tsMRevRange(long,long)","[4201, 4205]","{'A1': [(4201, 4205)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, TSMRangeElements>> tsMRevRange(long fromTimestamp, long toTimestamp, String... filters) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.MREVRANGE).add(fromTimestamp)
        .add(toTimestamp).add(TimeSeriesKeyword.FILTER).addObjects((Object[]) filters),
        getTimeseriesMultiRangeResponseBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsMRevRange,"CommandObject<Map<String, TSMRangeElements>> tsMRevRange(TSMRangeParams)","[4207, 4210]","{'A1': [(4207, 4210)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, TSMRangeElements>> tsMRevRange(TSMRangeParams multiRangeParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.MREVRANGE).addParams(multiRangeParams),
        getTimeseriesMultiRangeResponseBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsGet,CommandObject<TSElement> tsGet(String),"[4212, 4214]","{'A1': [(4212, 4214)]}",{'A1': 1.0},A1,,"  public final CommandObject<TSElement> tsGet(String key) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.GET).key(key), TimeSeriesBuilderFactory.TIMESERIES_ELEMENT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsGet,"CommandObject<TSElement> tsGet(String,TSGetParams)","[4216, 4218]","{'A1': [(4216, 4218)]}",{'A1': 1.0},A1,,"  public final CommandObject<TSElement> tsGet(String key, TSGetParams getParams) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.GET).key(key).addParams(getParams), TimeSeriesBuilderFactory.TIMESERIES_ELEMENT);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsMGet,"CommandObject<Map<String, TSMGetElement>> tsMGet(TSMGetParams)","[4220, 4225]","{'A1': [(4220, 4225)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, TSMGetElement>> tsMGet(TSMGetParams multiGetParams, String... filters) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.MGET).addParams(multiGetParams)
        .add(TimeSeriesKeyword.FILTER).addObjects((Object[]) filters),
        protocol == RedisProtocol.RESP3 ? TimeSeriesBuilderFactory.TIMESERIES_MGET_RESPONSE_RESP3
            : TimeSeriesBuilderFactory.TIMESERIES_MGET_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsCreateRule,"CommandObject<String> tsCreateRule(String,String,AggregationType,long)","[4227, 4231]","{'A1': [(4227, 4231)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tsCreateRule(String sourceKey, String destKey, AggregationType aggregationType,
      long timeBucket) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.CREATERULE).key(sourceKey).key(destKey)
        .add(TimeSeriesKeyword.AGGREGATION).add(aggregationType).add(timeBucket), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsCreateRule,"CommandObject<String> tsCreateRule(String,String,AggregationType,long,long)","[4233, 4237]","{'A1': [(4233, 4237)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tsCreateRule(String sourceKey, String destKey, AggregationType aggregationType,
      long bucketDuration, long alignTimestamp) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.CREATERULE).key(sourceKey).key(destKey)
        .add(TimeSeriesKeyword.AGGREGATION).add(aggregationType).add(bucketDuration).add(alignTimestamp), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsDeleteRule,"CommandObject<String> tsDeleteRule(String,String)","[4239, 4241]","{'A1': [(4239, 4241)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tsDeleteRule(String sourceKey, String destKey) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.DELETERULE).key(sourceKey).key(destKey), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsQueryIndex,CommandObject<List<String>> tsQueryIndex(),"[4243, 4246]","{'A1': [(4243, 4246)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> tsQueryIndex(String... filters) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.QUERYINDEX)
        .addObjects((Object[]) filters), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsInfo,CommandObject<TSInfo> tsInfo(String),"[4248, 4250]","{'A1': [(4248, 4250)]}",{'A1': 1.0},A1,,"  public final CommandObject<TSInfo> tsInfo(String key) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.INFO).key(key), getTimeseriesInfoBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tsInfoDebug,CommandObject<TSInfo> tsInfoDebug(String),"[4252, 4255]","{'A1': [(4252, 4255)]}",{'A1': 1.0},A1,,"  public final CommandObject<TSInfo> tsInfoDebug(String key) {
    return new CommandObject<>(commandArguments(TimeSeriesCommand.INFO).key(key).add(TimeSeriesKeyword.DEBUG),
        getTimeseriesInfoBuilder());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getTimeseriesMultiRangeResponseBuilder,"Builder<Map<String, TSMRangeElements>> getTimeseriesMultiRangeResponseBuilder()","[4257, 4260]","{'A1': [(4257, 4260)]}",{'A1': 1.0},A1,,"  private Builder<Map<String, TSMRangeElements>> getTimeseriesMultiRangeResponseBuilder() {
    return protocol == RedisProtocol.RESP3 ? TimeSeriesBuilderFactory.TIMESERIES_MRANGE_RESPONSE_RESP3
        : TimeSeriesBuilderFactory.TIMESERIES_MRANGE_RESPONSE;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getTimeseriesInfoBuilder,Builder<TSInfo> getTimeseriesInfoBuilder(),"[4262, 4264]","{'A1': [(4262, 4264)]}",{'A1': 1.0},A1,,"  private Builder<TSInfo> getTimeseriesInfoBuilder() {
    return protocol == RedisProtocol.RESP3 ? TSInfo.TIMESERIES_INFO_RESP3 : TSInfo.TIMESERIES_INFO;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfReserve,"CommandObject<String> bfReserve(String,double,long)","[4268, 4271]","{'A1': [(4268, 4271)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> bfReserve(String key, double errorRate, long capacity) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.RESERVE).key(key)
        .add(errorRate).add(capacity), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfReserve,"CommandObject<String> bfReserve(String,double,long,BFReserveParams)","[4273, 4276]","{'A1': [(4273, 4276)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> bfReserve(String key, double errorRate, long capacity, BFReserveParams reserveParams) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.RESERVE).key(key)
        .add(errorRate).add(capacity).addParams(reserveParams), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfAdd,"CommandObject<Boolean> bfAdd(String,String)","[4278, 4280]","{'A1': [(4278, 4280)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> bfAdd(String key, String item) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.ADD).key(key).add(item), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfMAdd,CommandObject<List<Boolean>> bfMAdd(String),"[4282, 4285]","{'A1': [(4282, 4285)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> bfMAdd(String key, String... items) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.MADD).key(key).
        addObjects((Object[]) items), BuilderFactory.BOOLEAN_WITH_ERROR_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfInsert,CommandObject<List<Boolean>> bfInsert(String),"[4287, 4290]","{'A1': [(4287, 4290)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> bfInsert(String key, String... items) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.INSERT).key(key)
        .add(RedisBloomKeyword.ITEMS).addObjects((Object[]) items), BuilderFactory.BOOLEAN_WITH_ERROR_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfInsert,"CommandObject<List<Boolean>> bfInsert(String,BFInsertParams)","[4292, 4295]","{'A1': [(4292, 4295)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> bfInsert(String key, BFInsertParams insertParams, String... items) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.INSERT).key(key).addParams(insertParams)
        .add(RedisBloomKeyword.ITEMS).addObjects((Object[]) items), BuilderFactory.BOOLEAN_WITH_ERROR_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfExists,"CommandObject<Boolean> bfExists(String,String)","[4297, 4299]","{'A1': [(4297, 4299)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> bfExists(String key, String item) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.EXISTS).key(key).add(item), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfMExists,CommandObject<List<Boolean>> bfMExists(String),"[4301, 4304]","{'A1': [(4301, 4304)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> bfMExists(String key, String... items) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.MEXISTS).key(key).
        addObjects((Object[]) items), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfScanDump,"CommandObject<Map.Entry<Long, byte[]>> bfScanDump(String,long)","[4306, 4308]","{'A1': [(4306, 4308)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map.Entry<Long, byte[]>> bfScanDump(String key, long iterator) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.SCANDUMP).key(key).add(iterator), BLOOM_SCANDUMP_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfLoadChunk,"CommandObject<String> bfLoadChunk(String,long,byte[])","[4310, 4312]","{'A1': [(4310, 4312)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> bfLoadChunk(String key, long iterator, byte[] data) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.LOADCHUNK).key(key).add(iterator).add(data), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfCard,CommandObject<Long> bfCard(String),"[4314, 4316]","{'A1': [(4314, 4316)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> bfCard(String key) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.CARD).key(key), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,bfInfo,"CommandObject<Map<String, Object>> bfInfo(String)","[4318, 4320]","{'A1': [(4318, 4320)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, Object>> bfInfo(String key) {
    return new CommandObject<>(commandArguments(BloomFilterCommand.INFO).key(key), BuilderFactory.ENCODED_OBJECT_MAP);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfReserve,"CommandObject<String> cfReserve(String,long)","[4322, 4324]","{'A1': [(4322, 4324)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> cfReserve(String key, long capacity) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.RESERVE).key(key).add(capacity), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfReserve,"CommandObject<String> cfReserve(String,long,CFReserveParams)","[4326, 4328]","{'A1': [(4326, 4328)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> cfReserve(String key, long capacity, CFReserveParams reserveParams) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.RESERVE).key(key).add(capacity).addParams(reserveParams), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfAdd,"CommandObject<Boolean> cfAdd(String,String)","[4330, 4332]","{'A1': [(4330, 4332)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> cfAdd(String key, String item) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.ADD).key(key).add(item), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfAddNx,"CommandObject<Boolean> cfAddNx(String,String)","[4334, 4336]","{'A1': [(4334, 4336)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> cfAddNx(String key, String item) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.ADDNX).key(key).add(item), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfInsert,CommandObject<List<Boolean>> cfInsert(String),"[4338, 4341]","{'A1': [(4338, 4341)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> cfInsert(String key, String... items) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.INSERT).key(key)
        .add(RedisBloomKeyword.ITEMS).addObjects((Object[]) items), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfInsert,"CommandObject<List<Boolean>> cfInsert(String,CFInsertParams)","[4343, 4346]","{'A1': [(4343, 4346)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> cfInsert(String key, CFInsertParams insertParams, String... items) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.INSERT).key(key)
        .addParams(insertParams).add(RedisBloomKeyword.ITEMS).addObjects((Object[]) items), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfInsertNx,CommandObject<List<Boolean>> cfInsertNx(String),"[4348, 4351]","{'A1': [(4348, 4351)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> cfInsertNx(String key, String... items) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.INSERTNX).key(key)
        .add(RedisBloomKeyword.ITEMS).addObjects((Object[]) items), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfInsertNx,"CommandObject<List<Boolean>> cfInsertNx(String,CFInsertParams)","[4353, 4356]","{'A1': [(4353, 4356)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> cfInsertNx(String key, CFInsertParams insertParams, String... items) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.INSERTNX).key(key)
        .addParams(insertParams).add(RedisBloomKeyword.ITEMS).addObjects((Object[]) items), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfExists,"CommandObject<Boolean> cfExists(String,String)","[4358, 4360]","{'A1': [(4358, 4360)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> cfExists(String key, String item) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.EXISTS).key(key).add(item), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfMExists,CommandObject<List<Boolean>> cfMExists(String),"[4362, 4365]","{'A51': [(4362, 4365)]}",{'A51': 1.0},A51,,"  public final CommandObject<List<Boolean>> cfMExists(String key, String... items) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.MEXISTS).key(key)
        .addObjects((Object[]) items), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfDel,"CommandObject<Boolean> cfDel(String,String)","[4367, 4369]","{'A1': [(4367, 4369)]}",{'A1': 1.0},A1,,"  public final CommandObject<Boolean> cfDel(String key, String item) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.DEL).key(key).add(item), BuilderFactory.BOOLEAN);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfCount,"CommandObject<Long> cfCount(String,String)","[4371, 4373]","{'A1': [(4371, 4373)]}",{'A1': 1.0},A1,,"  public final CommandObject<Long> cfCount(String key, String item) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.COUNT).key(key).add(item), BuilderFactory.LONG);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfScanDump,"CommandObject<Map.Entry<Long, byte[]>> cfScanDump(String,long)","[4375, 4377]","{'A1': [(4375, 4377)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map.Entry<Long, byte[]>> cfScanDump(String key, long iterator) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.SCANDUMP).key(key).add(iterator), BLOOM_SCANDUMP_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfLoadChunk,"CommandObject<String> cfLoadChunk(String,long,byte[])","[4379, 4381]","{'A1': [(4379, 4381)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> cfLoadChunk(String key, long iterator, byte[] data) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.LOADCHUNK).key(key).add(iterator).add(data), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cfInfo,"CommandObject<Map<String, Object>> cfInfo(String)","[4383, 4385]","{'A1': [(4383, 4385)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, Object>> cfInfo(String key) {
    return new CommandObject<>(commandArguments(CuckooFilterCommand.INFO).key(key), BuilderFactory.ENCODED_OBJECT_MAP);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cmsInitByDim,"CommandObject<String> cmsInitByDim(String,long,long)","[4387, 4390]","{'A1': [(4387, 4390)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> cmsInitByDim(String key, long width, long depth) {
    return new CommandObject<>(commandArguments(CountMinSketchCommand.INITBYDIM).key(key).add(width)
        .add(depth), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cmsInitByProb,"CommandObject<String> cmsInitByProb(String,double,double)","[4392, 4395]","{'A1': [(4392, 4395)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> cmsInitByProb(String key, double error, double probability) {
    return new CommandObject<>(commandArguments(CountMinSketchCommand.INITBYPROB).key(key).add(error)
        .add(probability), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cmsIncrBy,"CommandObject<List<Long>> cmsIncrBy(String,Map<String, Long>)","[4397, 4401]","{'A1': [(4397, 4401)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> cmsIncrBy(String key, Map<String, Long> itemIncrements) {
    CommandArguments args = commandArguments(CountMinSketchCommand.INCRBY).key(key);
    itemIncrements.entrySet().forEach(entry -> args.add(entry.getKey()).add(entry.getValue()));
    return new CommandObject<>(args, BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cmsQuery,CommandObject<List<Long>> cmsQuery(String),"[4403, 4406]","{'A1': [(4403, 4406)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> cmsQuery(String key, String... items) {
    return new CommandObject<>(commandArguments(CountMinSketchCommand.QUERY).key(key)
        .addObjects((Object[]) items), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cmsMerge,CommandObject<String> cmsMerge(String),"[4408, 4411]","{'A1': [(4408, 4411)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> cmsMerge(String destKey, String... keys) {
    return new CommandObject<>(commandArguments(CountMinSketchCommand.MERGE).key(destKey)
        .add(keys.length).keys((Object[]) keys), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cmsMerge,"CommandObject<String> cmsMerge(String,Map<String, Long>)","[4413, 4420]","{'A1': [(4413, 4420)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> cmsMerge(String destKey, Map<String, Long> keysAndWeights) {
    CommandArguments args = commandArguments(CountMinSketchCommand.MERGE).key(destKey);
    args.add(keysAndWeights.size());
    keysAndWeights.entrySet().forEach(entry -> args.key(entry.getKey()));
    args.add(RedisBloomKeyword.WEIGHTS);
    keysAndWeights.entrySet().forEach(entry -> args.add(entry.getValue()));
    return new CommandObject<>(args, BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,cmsInfo,"CommandObject<Map<String, Object>> cmsInfo(String)","[4422, 4424]","{'A1': [(4422, 4424)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, Object>> cmsInfo(String key) {
    return new CommandObject<>(commandArguments(CountMinSketchCommand.INFO).key(key), BuilderFactory.ENCODED_OBJECT_MAP);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,topkReserve,"CommandObject<String> topkReserve(String,long)","[4426, 4428]","{'A1': [(4426, 4428)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> topkReserve(String key, long topk) {
    return new CommandObject<>(commandArguments(TopKCommand.RESERVE).key(key).add(topk), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,topkReserve,"CommandObject<String> topkReserve(String,long,long,long,double)","[4430, 4433]","{'A1': [(4430, 4433)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> topkReserve(String key, long topk, long width, long depth, double decay) {
    return new CommandObject<>(commandArguments(TopKCommand.RESERVE).key(key).add(topk)
        .add(width).add(depth).add(decay), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,topkAdd,CommandObject<List<String>> topkAdd(String),"[4435, 4437]","{'A1': [(4435, 4437)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> topkAdd(String key, String... items) {
    return new CommandObject<>(commandArguments(TopKCommand.ADD).key(key).addObjects((Object[]) items), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,topkIncrBy,"CommandObject<List<String>> topkIncrBy(String,Map<String, Long>)","[4439, 4443]","{'A1': [(4439, 4443)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> topkIncrBy(String key, Map<String, Long> itemIncrements) {
    CommandArguments args = commandArguments(TopKCommand.INCRBY).key(key);
    itemIncrements.entrySet().forEach(entry -> args.add(entry.getKey()).add(entry.getValue()));
    return new CommandObject<>(args, BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,topkQuery,CommandObject<List<Boolean>> topkQuery(String),"[4445, 4447]","{'A1': [(4445, 4447)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Boolean>> topkQuery(String key, String... items) {
    return new CommandObject<>(commandArguments(TopKCommand.QUERY).key(key).addObjects((Object[]) items), BuilderFactory.BOOLEAN_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,topkList,CommandObject<List<String>> topkList(String),"[4449, 4451]","{'A1': [(4449, 4451)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<String>> topkList(String key) {
    return new CommandObject<>(commandArguments(TopKCommand.LIST).key(key), BuilderFactory.STRING_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,topkListWithCount,"CommandObject<Map<String, Long>> topkListWithCount(String)","[4453, 4456]","{'A1': [(4453, 4456)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, Long>> topkListWithCount(String key) {
    return new CommandObject<>(commandArguments(TopKCommand.LIST).key(key)
        .add(RedisBloomKeyword.WITHCOUNT), BuilderFactory.STRING_LONG_MAP);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,topkInfo,"CommandObject<Map<String, Object>> topkInfo(String)","[4458, 4460]","{'A1': [(4458, 4460)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, Object>> topkInfo(String key) {
    return new CommandObject<>(commandArguments(TopKCommand.INFO).key(key), BuilderFactory.ENCODED_OBJECT_MAP);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestCreate,CommandObject<String> tdigestCreate(String),"[4462, 4464]","{'A1': [(4462, 4464)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tdigestCreate(String key) {
    return new CommandObject<>(commandArguments(TDigestCommand.CREATE).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestCreate,"CommandObject<String> tdigestCreate(String,int)","[4466, 4469]","{'A1': [(4466, 4469)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tdigestCreate(String key, int compression) {
    return new CommandObject<>(commandArguments(TDigestCommand.CREATE).key(key).add(RedisBloomKeyword.COMPRESSION)
        .add(compression), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestReset,CommandObject<String> tdigestReset(String),"[4471, 4473]","{'A1': [(4471, 4473)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tdigestReset(String key) {
    return new CommandObject<>(commandArguments(TDigestCommand.RESET).key(key), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestMerge,CommandObject<String> tdigestMerge(String),"[4475, 4478]","{'A1': [(4475, 4478)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tdigestMerge(String destinationKey, String... sourceKeys) {
    return new CommandObject<>(commandArguments(TDigestCommand.MERGE).key(destinationKey)
        .add(sourceKeys.length).keys((Object[]) sourceKeys), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestMerge,"CommandObject<String> tdigestMerge(TDigestMergeParams,String)","[4480, 4484]","{'A1': [(4480, 4484)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tdigestMerge(TDigestMergeParams mergeParams,
      String destinationKey, String... sourceKeys) {
    return new CommandObject<>(commandArguments(TDigestCommand.MERGE).key(destinationKey)
        .add(sourceKeys.length).keys((Object[]) sourceKeys).addParams(mergeParams), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestInfo,"CommandObject<Map<String, Object>> tdigestInfo(String)","[4486, 4488]","{'A1': [(4486, 4488)]}",{'A1': 1.0},A1,,"  public final CommandObject<Map<String, Object>> tdigestInfo(String key) {
    return new CommandObject<>(commandArguments(TDigestCommand.INFO).key(key), BuilderFactory.ENCODED_OBJECT_MAP);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestAdd,CommandObject<String> tdigestAdd(String),"[4490, 4493]","{'A1': [(4490, 4493)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> tdigestAdd(String key, double... values) {
    return new CommandObject<>(addFlatArgs(commandArguments(TDigestCommand.ADD).key(key), values),
        BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestCDF,CommandObject<List<Double>> tdigestCDF(String),"[4495, 4498]","{'A1': [(4495, 4498)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Double>> tdigestCDF(String key, double... values) {
    return new CommandObject<>(addFlatArgs(commandArguments(TDigestCommand.CDF).key(key), values),
        BuilderFactory.DOUBLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestQuantile,CommandObject<List<Double>> tdigestQuantile(String),"[4500, 4503]","{'A1': [(4500, 4503)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Double>> tdigestQuantile(String key, double... quantiles) {
    return new CommandObject<>(addFlatArgs(commandArguments(TDigestCommand.QUANTILE).key(key),
        quantiles), BuilderFactory.DOUBLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestMin,CommandObject<Double> tdigestMin(String),"[4505, 4507]","{'A1': [(4505, 4507)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> tdigestMin(String key) {
    return new CommandObject<>(commandArguments(TDigestCommand.MIN).key(key), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestMax,CommandObject<Double> tdigestMax(String),"[4509, 4511]","{'A1': [(4509, 4511)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> tdigestMax(String key) {
    return new CommandObject<>(commandArguments(TDigestCommand.MAX).key(key), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestTrimmedMean,"CommandObject<Double> tdigestTrimmedMean(String,double,double)","[4513, 4516]","{'A1': [(4513, 4516)]}",{'A1': 1.0},A1,,"  public final CommandObject<Double> tdigestTrimmedMean(String key, double lowCutQuantile, double highCutQuantile) {
    return new CommandObject<>(commandArguments(TDigestCommand.TRIMMED_MEAN).key(key).add(lowCutQuantile)
        .add(highCutQuantile), BuilderFactory.DOUBLE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestRank,CommandObject<List<Long>> tdigestRank(String),"[4518, 4521]","{'A1': [(4518, 4521)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> tdigestRank(String key, double... values) {
    return new CommandObject<>(addFlatArgs(commandArguments(TDigestCommand.RANK).key(key),
        values), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestRevRank,CommandObject<List<Long>> tdigestRevRank(String),"[4523, 4526]","{'A1': [(4523, 4526)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Long>> tdigestRevRank(String key, double... values) {
    return new CommandObject<>(addFlatArgs(commandArguments(TDigestCommand.REVRANK).key(key),
        values), BuilderFactory.LONG_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestByRank,CommandObject<List<Double>> tdigestByRank(String),"[4528, 4531]","{'A1': [(4528, 4531)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Double>> tdigestByRank(String key, long... ranks) {
    return new CommandObject<>(addFlatArgs(commandArguments(TDigestCommand.BYRANK).key(key),
        ranks), BuilderFactory.DOUBLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,tdigestByRevRank,CommandObject<List<Double>> tdigestByRevRank(String),"[4533, 4536]","{'A1': [(4533, 4536)]}",{'A1': 1.0},A1,,"  public final CommandObject<List<Double>> tdigestByRevRank(String key, long... ranks) {
    return new CommandObject<>(addFlatArgs(commandArguments(TDigestCommand.BYREVRANK).key(key),
        ranks), BuilderFactory.DOUBLE_LIST);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,watch,CommandObject<String> watch(),"[4540, 4542]","{'A1': [(4540, 4542)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> watch(String... keys) {
    return new CommandObject<>(commandArguments(WATCH).keys((Object[]) keys), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,watch,CommandObject<String> watch(),"[4544, 4546]","{'A1': [(4544, 4546)]}",{'A1': 1.0},A1,,"  public final CommandObject<String> watch(byte[]... keys) {
    return new CommandObject<>(commandArguments(WATCH).keys((Object[]) keys), BuilderFactory.STRING);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,getJsonObjectMapper,JsonObjectMapper getJsonObjectMapper(),"[4560, 4575]","{'A39': [(4560, 4562), (4566, 4569), (4572, 4575)], 'A98': [(4563, 4565), (4570, 4571)]}","{'A39': 0.6875, 'A98': 0.3125}",A39,,"  private JsonObjectMapper getJsonObjectMapper() {
    JsonObjectMapper localRef = this.jsonObjectMapper;
    if (Objects.isNull(localRef)) {
      mapperLock.lock();

      try {
        localRef = this.jsonObjectMapper;
        if (Objects.isNull(localRef)) {
          this.jsonObjectMapper = localRef = new DefaultGsonObjectMapper();
        }
      } finally {
        mapperLock.unlock();
      }
    }
    return localRef;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setJsonObjectMapper,void setJsonObjectMapper(JsonObjectMapper),"[4577, 4579]","{'A39': [(4577, 4579)]}",{'A39': 1.0},A39,,"  public void setJsonObjectMapper(JsonObjectMapper jsonObjectMapper) {
    this.jsonObjectMapper = jsonObjectMapper;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,setDefaultSearchDialect,void setDefaultSearchDialect(int),"[4581, 4584]","{'A1': [(4581, 4584)]}",{'A1': 1.0},A1,,"  public void setDefaultSearchDialect(int dialect) {
    if (dialect == 0) throw new IllegalArgumentException(""DIALECT=0 cannot be set."");
    this.searchDialect.set(dialect);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects.SearchProfileResponseBuilder,build,"Map.Entry<T, ProfilingInfo> build(Object)","[4599, 4631]","{'A1': [(4599, 4631)]}",{'A1': 1.0},A1,,"    @Override
    public Map.Entry<T, ProfilingInfo> build(Object data) {
      List list = (List) data;
      if (list == null || list.isEmpty()) return null;

      if (list.get(0) instanceof KeyValue) { // RESP3
        Object resultsData = null, profileData = null;

        for (KeyValue keyValue : (List<KeyValue>) data) {
          String keyStr = BuilderFactory.STRING.build(keyValue.getKey());
          switch (keyStr) {
            case PROFILE_STR_REDIS7:
            case PROFILE_STR_REDIS8:
              profileData = keyValue.getValue();
              break;
            case RESULTS_STR_REDIS7:
              resultsData = data;
              break;
            case RESULTS_STR_REDIS8:
              resultsData = keyValue.getValue();
              break;
          }
        }

        assert resultsData != null : ""Could not detect Results data."";
        assert profileData != null : ""Could not detect Profile data."";
        return KeyValue.of(resultsBuilder.build(resultsData),
                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));
      }

      return KeyValue.of(resultsBuilder.build(list.get(0)),
          ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects.JsonObjectBuilder,build,T build(Object),"[4642, 4645]","{'A1': [(4642, 4643), (4645, 4645)], 'A39': [(4644, 4644)]}","{'A1': 0.75, 'A39': 0.25}",A1,,"    @Override
    public T build(Object data) {
      return getJsonObjectMapper().fromJson(BuilderFactory.STRING.build(data), clazz);
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects.JsonObjectListBuilder,build,List<T> build(Object),"[4661, 4668]","{'A1': [(4661, 4666), (4668, 4668)], 'A39': [(4667, 4667)]}","{'A1': 0.875, 'A39': 0.125}",A1,,"    @Override
    public List<T> build(Object data) {
      if (data == null) {
        return null;
      }
      List<String> list = BuilderFactory.STRING_LIST.build(data);
      return list.stream().map(s -> getJsonObjectMapper().fromJson(s, clazz)).collect(Collectors.toList());
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,build,"Map.Entry<Long, byte[]> build(Object)","[4672, 4676]","{'A1': [(4672, 4676)]}",{'A1': 1.0},A1,,"    @Override
    public Map.Entry<Long, byte[]> build(Object data) {
      List<Object> list = (List<Object>) data;
      return new KeyValue<>(BuilderFactory.LONG.build(list.get(0)), BuilderFactory.BINARY.build(list.get(1)));
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,addFlatArgs,CommandArguments addFlatArgs(CommandArguments),"[4679, 4684]","{'A1': [(4679, 4684)]}",{'A1': 1.0},A1,,"  private CommandArguments addFlatArgs(CommandArguments args, long... values) {
    for (long value : values) {
      args.add(value);
    }
    return args;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,addFlatArgs,CommandArguments addFlatArgs(CommandArguments),"[4686, 4691]","{'A1': [(4686, 4691)]}",{'A1': 1.0},A1,,"  private CommandArguments addFlatArgs(CommandArguments args, double... values) {
    for (double value : values) {
      args.add(value);
    }
    return args;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,addFlatKeyValueArgs,CommandArguments addFlatKeyValueArgs(CommandArguments),"[4693, 4698]","{'A1': [(4693, 4698)]}",{'A1': 1.0},A1,,"  private CommandArguments addFlatKeyValueArgs(CommandArguments args, String... keyvalues) {
    for (int i = 0; i < keyvalues.length; i += 2) {
      args.key(keyvalues[i]).add(keyvalues[i + 1]);
    }
    return args;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,addFlatKeyValueArgs,CommandArguments addFlatKeyValueArgs(CommandArguments),"[4700, 4705]","{'A1': [(4700, 4705)]}",{'A1': 1.0},A1,,"  private CommandArguments addFlatKeyValueArgs(CommandArguments args, byte[]... keyvalues) {
    for (int i = 0; i < keyvalues.length; i += 2) {
      args.key(keyvalues[i]).add(keyvalues[i + 1]);
    }
    return args;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,addFlatMapArgs,"CommandArguments addFlatMapArgs(CommandArguments,Map<?, ?>)","[4707, 4713]","{'A1': [(4707, 4713)]}",{'A1': 1.0},A1,,"  private CommandArguments addFlatMapArgs(CommandArguments args, Map<?, ?> map) {
    for (Map.Entry<? extends Object, ? extends Object> entry : map.entrySet()) {
      args.add(entry.getKey());
      args.add(entry.getValue());
    }
    return args;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,addSortedSetFlatMapArgs,"CommandArguments addSortedSetFlatMapArgs(CommandArguments,Map<?, Double>)","[4715, 4721]","{'A1': [(4715, 4721)]}",{'A1': 1.0},A1,,"  private CommandArguments addSortedSetFlatMapArgs(CommandArguments args, Map<?, Double> map) {
    for (Map.Entry<? extends Object, Double> entry : map.entrySet()) {
      args.add(entry.getValue());
      args.add(entry.getKey());
    }
    return args;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/CommandObjects.java,CommandObjects,addGeoCoordinateFlatMapArgs,"CommandArguments addGeoCoordinateFlatMapArgs(CommandArguments,Map<?, GeoCoordinate>)","[4723, 4731]","{'A1': [(4723, 4731)]}",{'A1': 1.0},A1,,"  private CommandArguments addGeoCoordinateFlatMapArgs(CommandArguments args, Map<?, GeoCoordinate> map) {
    for (Map.Entry<? extends Object, GeoCoordinate> entry : map.entrySet()) {
      GeoCoordinate ord = entry.getValue();
      args.add(ord.getLongitude());
      args.add(ord.getLatitude());
      args.add(entry.getKey());
    }
    return args;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisMetaInfo.java,JedisMetaInfo,getGroupId,String getGroupId(),"[31, 33]","{'A1': [(31, 33)]}",{'A1': 1.0},A1,,"  public static String getGroupId() {
    return groupId;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisMetaInfo.java,JedisMetaInfo,getArtifactId,String getArtifactId(),"[35, 37]","{'A1': [(35, 37)]}",{'A1': 1.0},A1,,"  public static String getArtifactId() {
    return artifactId;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisMetaInfo.java,JedisMetaInfo,getVersion,String getVersion(),"[39, 41]","{'A1': [(39, 41)]}",{'A1': 1.0},A1,,"  public static String getVersion() {
    return version;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,toString,String toString(),"[80, 83]","{'A1': [(82, 82)], 'A97': [(80, 81), (83, 83)]}","{'A1': 0.25, 'A97': 0.75}",A97,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  @Override
  public String toString() {
    return getClass().getSimpleName() + ""{"" + socketFactory + ""}"";
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,toIdentityString,String toIdentityString(),"[85, 111]","{'A1': [(85, 85), (91, 91), (95, 95), (104, 104), (106, 106)], 'A33': [(86, 90), (92, 94), (96, 100), (103, 103), (105, 105), (107, 111)], 'A35': [(101, 102)]}","{'A1': 0.18518518518518517, 'A33': 0.7407407407407407, 'A35': 0.07407407407407407}",A33,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  @Experimental
  public String toIdentityString() {
    if (strValActive == broken && strVal != null) {
      return strVal;
    }

    String className = getClass().getSimpleName();
    int id = hashCode();

    if (socket == null) {
      return String.format(""%s{id: 0x%X}"", className, id);
    }

    SocketAddress remoteAddr = socket.getRemoteSocketAddress();
    SocketAddress localAddr = socket.getLocalSocketAddress();
    if (remoteAddr != null) {
      strVal = String.format(""%s{id: 0x%X, L:%s %c R:%s}"", className, id, localAddr,
        (broken ? '!' : '-'), remoteAddr);
    } else if (localAddr != null) {
      strVal = String.format(""%s{id: 0x%X, L:%s}"", className, id, localAddr);
    } else {
      strVal = String.format(""%s{id: 0x%X}"", className, id);
    }

    strValActive = broken;
    return strVal;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getRedisProtocol,RedisProtocol getRedisProtocol(),"[113, 115]","{'A1': [(113, 115)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public final RedisProtocol getRedisProtocol() {
    return protocol;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,setHandlingPool,void setHandlingPool(ConnectionPool),"[117, 119]","{'A1': [(117, 118)], 'A7': [(119, 119)]}","{'A1': 0.6666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public final void setHandlingPool(final ConnectionPool pool) {
    this.memberOf = pool;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getHostAndPort,HostAndPort getHostAndPort(),"[121, 123]","{'A1': [(121, 122)], 'A7': [(123, 123)]}","{'A1': 0.6666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  final HostAndPort getHostAndPort() {
    return ((DefaultJedisSocketFactory) socketFactory).getHostAndPort();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getSoTimeout,int getSoTimeout(),"[125, 127]","{'A1': [(126, 126)], 'A54': [(125, 125)], 'A7': [(127, 127)]}","{'A1': 0.3333333333333333, 'A54': 0.3333333333333333, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public int getSoTimeout() {
    return soTimeout;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,setSoTimeout,void setSoTimeout(int),"[129, 139]","{'A1': [(130, 138)], 'A54': [(129, 129), (139, 139)]}","{'A1': 0.8181818181818182, 'A54': 0.18181818181818182}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void setSoTimeout(int soTimeout) {
    this.soTimeout = soTimeout;
    if (this.socket != null) {
      try {
        this.socket.setSoTimeout(soTimeout);
      } catch (SocketException ex) {
        setBroken();
        throw new JedisConnectionException(ex);
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,setTimeoutInfinite,void setTimeoutInfinite(),"[141, 151]","{'A1': [(146, 146), (148, 148)], 'A7': [(141, 145), (147, 147), (149, 151)]}","{'A1': 0.18181818181818182, 'A7': 0.8181818181818182}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void setTimeoutInfinite() {
    try {
      if (!isConnected()) {
        connect();
      }
      socket.setSoTimeout(infiniteSoTimeout);
    } catch (SocketException ex) {
      setBroken();
      throw new JedisConnectionException(ex);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,rollbackTimeout,void rollbackTimeout(),"[153, 160]","{'A1': [(155, 155), (157, 157)], 'A7': [(153, 154), (156, 156), (158, 160)]}","{'A1': 0.25, 'A7': 0.75}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void rollbackTimeout() {
    try {
      socket.setSoTimeout(this.soTimeout);
    } catch (SocketException ex) {
      setBroken();
      throw new JedisConnectionException(ex);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,executeCommand,Object executeCommand(ProtocolCommand),"[162, 164]","{'A1': [(162, 164)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public Object executeCommand(final ProtocolCommand cmd) {
    return executeCommand(new CommandArguments(cmd));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,executeCommand,Object executeCommand(CommandArguments),"[166, 169]","{'A1': [(166, 169)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public Object executeCommand(final CommandArguments args) {
    sendCommand(args);
    return getOne();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,executeCommand,T executeCommand(CommandObject<T>),"[171, 184]","{'A1': [(171, 182)], 'A7': [(183, 184)]}","{'A1': 0.8571428571428571, 'A7': 0.14285714285714285}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public <T> T executeCommand(final CommandObject<T> commandObject) {
    final CommandArguments args = commandObject.getArguments();
    sendCommand(args);
    if (!args.isBlocking()) {
      return commandObject.getBuilder().build(getOne());
    } else {
      try {
        setTimeoutInfinite();
        return commandObject.getBuilder().build(getOne());
      } finally {
        rollbackTimeout();
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,sendCommand,void sendCommand(ProtocolCommand),"[186, 188]","{'A1': [(186, 188)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void sendCommand(final ProtocolCommand cmd) {
    sendCommand(new CommandArguments(cmd));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,sendCommand,"void sendCommand(ProtocolCommand,Rawable)","[190, 192]","{'A1': [(190, 192)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void sendCommand(final ProtocolCommand cmd, Rawable keyword) {
    sendCommand(new CommandArguments(cmd).add(keyword));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,sendCommand,void sendCommand(ProtocolCommand),"[194, 196]","{'A1': [(194, 195)], 'A7': [(196, 196)]}","{'A1': 0.6666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void sendCommand(final ProtocolCommand cmd, final String... args) {
    sendCommand(new CommandArguments(cmd).addObjects((Object[]) args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,sendCommand,void sendCommand(ProtocolCommand),"[198, 200]","{'A1': [(198, 200)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void sendCommand(final ProtocolCommand cmd, final byte[]... args) {
    sendCommand(new CommandArguments(cmd).addObjects((Object[]) args));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,sendCommand,void sendCommand(CommandArguments),"[202, 227]","{'A1': [(202, 202), (205, 205), (216, 216), (218, 218), (224, 224)], 'A7': [(203, 204), (206, 206), (223, 223), (225, 227)], 'A28': [(207, 215), (217, 217), (219, 222)]}","{'A1': 0.19230769230769232, 'A7': 0.2692307692307692, 'A28': 0.5384615384615384}",A28,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void sendCommand(final CommandArguments args) {
    try {
      connect();
      Protocol.sendCommand(outputStream, args);
    } catch (JedisConnectionException ex) {
      /*
       * When client send request which formed by invalid protocol, Redis send back error message
       * before close connection. We try to read it to provide reason of failure.
       */
      try {
        String errorMessage = Protocol.readErrorLineIfPossible(inputStream);
        if (errorMessage != null && errorMessage.length() > 0) {
          ex = new JedisConnectionException(errorMessage, ex.getCause());
        }
      } catch (Exception e) {
        /*
         * Catch any IOException or JedisConnectionException occurred from InputStream#read and just
         * ignore. This approach is safe because reading error message is optional and connection
         * will eventually be closed.
         */
      }
      // Any other exceptions related to connection?
      setBroken();
      throw ex;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,connect,void connect(),"[229, 257]","{'A1': [(229, 229), (232, 233), (237, 254)], 'A7': [(230, 231), (235, 236), (255, 257)], 'A36': [(234, 234)]}","{'A1': 0.7241379310344828, 'A7': 0.2413793103448276, 'A36': 0.034482758620689655}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void connect() throws JedisConnectionException {
    if (!isConnected()) {
      try {
        socket = socketFactory.createSocket();
        soTimeout = socket.getSoTimeout(); //?

        outputStream = new RedisOutputStream(socket.getOutputStream());
        inputStream = new RedisInputStream(socket.getInputStream());

        broken = false; // unset broken status when connection is (re)initialized

      } catch (JedisConnectionException jce) {

        setBroken();
        throw jce;

      } catch (IOException ioe) {

        setBroken();
        throw new JedisConnectionException(""Failed to create input/output stream"", ioe);

      } finally {

        if (broken) {
          IOUtils.closeQuietly(socket);
        }
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,close,void close(),"[259, 272]","{'A1': [(261, 271)], 'A7': [(259, 260), (272, 272)]}","{'A1': 0.7857142857142857, 'A7': 0.21428571428571427}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  @Override
  public void close() {
    if (this.memberOf != null) {
      ConnectionPool pool = this.memberOf;
      this.memberOf = null;
      if (isBroken()) {
        pool.returnBrokenResource(this);
      } else {
        pool.returnResource(this);
      }
    } else {
      disconnect();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,disconnect,void disconnect(),"[277, 289]","{'A1': [(286, 286)], 'A7': [(277, 285), (287, 289)]}","{'A1': 0.07692307692307693, 'A7': 0.9230769230769231}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void disconnect() {
    if (isConnected()) {
      try {
        outputStream.flush();
        socket.close();
      } catch (IOException ex) {
        throw new JedisConnectionException(ex);
      } finally {
        IOUtils.closeQuietly(socket);
        setBroken();
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,isConnected,boolean isConnected(),"[291, 294]","{'A7': [(291, 294)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public boolean isConnected() {
    return socket != null && socket.isBound() && !socket.isClosed() && socket.isConnected()
        && !socket.isInputShutdown() && !socket.isOutputShutdown();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,isBroken,boolean isBroken(),"[296, 298]","{'A1': [(296, 298)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public boolean isBroken() {
    return broken;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,setBroken,void setBroken(),"[300, 302]","{'A1': [(300, 302)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void setBroken() {
    broken = true;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getStatusCodeReply,String getStatusCodeReply(),"[304, 312]","{'A1': [(310, 310)], 'A7': [(304, 309), (311, 312)]}","{'A1': 0.1111111111111111, 'A7': 0.8888888888888888}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public String getStatusCodeReply() {
    flush();
    final byte[] resp = (byte[]) readProtocolWithCheckingBroken();
    if (null == resp) {
      return null;
    } else {
      return encode(resp);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getBulkReply,String getBulkReply(),"[314, 321]","{'A1': [(317, 317)], 'A7': [(314, 316), (318, 321)]}","{'A1': 0.125, 'A7': 0.875}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public String getBulkReply() {
    final byte[] result = getBinaryBulkReply();
    if (null != result) {
      return encode(result);
    } else {
      return null;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getBinaryBulkReply,byte[] getBinaryBulkReply(),"[323, 326]","{'A7': [(323, 326)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public byte[] getBinaryBulkReply() {
    flush();
    return (byte[]) readProtocolWithCheckingBroken();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getIntegerReply,Long getIntegerReply(),"[328, 331]","{'A7': [(328, 331)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public Long getIntegerReply() {
    flush();
    return (Long) readProtocolWithCheckingBroken();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getMultiBulkReply,List<String> getMultiBulkReply(),"[333, 335]","{'A7': [(333, 335)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public List<String> getMultiBulkReply() {
    return BuilderFactory.STRING_LIST.build(getBinaryMultiBulkReply());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getBinaryMultiBulkReply,List<byte[]> getBinaryMultiBulkReply(),"[337, 341]","{'A7': [(337, 341)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  @SuppressWarnings(""unchecked"")
  public List<byte[]> getBinaryMultiBulkReply() {
    flush();
    return (List<byte[]>) readProtocolWithCheckingBroken();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getUnflushedObjectMultiBulkReply,List<Object> getUnflushedObjectMultiBulkReply(),"[346, 350]","{'A1': [(346, 350)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  @Deprecated
  @SuppressWarnings(""unchecked"")
  public List<Object> getUnflushedObjectMultiBulkReply() {
    return (List<Object>) readProtocolWithCheckingBroken();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getUnflushedObject,Object getUnflushedObject(),"[352, 355]","{'A1': [(353, 354)], 'A7': [(355, 355)], 'A102': [(352, 352)]}","{'A1': 0.5, 'A7': 0.25, 'A102': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  @SuppressWarnings(""unchecked"")
  public Object getUnflushedObject() {
    return readProtocolWithCheckingBroken();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getObjectMultiBulkReply,List<Object> getObjectMultiBulkReply(),"[357, 360]","{'A1': [(359, 359)], 'A7': [(357, 357), (360, 360)], 'A102': [(358, 358)]}","{'A1': 0.25, 'A7': 0.5, 'A102': 0.25}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public List<Object> getObjectMultiBulkReply() {
    flush();
    return (List<Object>) readProtocolWithCheckingBroken();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getIntegerMultiBulkReply,List<Long> getIntegerMultiBulkReply(),"[362, 366]","{'A7': [(362, 366)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  @SuppressWarnings(""unchecked"")
  public List<Long> getIntegerMultiBulkReply() {
    flush();
    return (List<Long>) readProtocolWithCheckingBroken();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getOne,Object getOne(),"[368, 371]","{'A7': [(368, 371)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public Object getOne() {
    flush();
    return readProtocolWithCheckingBroken();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,flush,void flush(),"[373, 380]","{'A1': [(377, 377)], 'A7': [(373, 376), (378, 380)]}","{'A1': 0.125, 'A7': 0.875}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  protected void flush() {
    try {
      outputStream.flush();
    } catch (IOException ex) {
      setBroken();
      throw new JedisConnectionException(ex);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,protocolRead,Object protocolRead(RedisInputStream),"[382, 385]","{'A1': [(382, 385)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  @Experimental
  protected Object protocolRead(RedisInputStream is) {
    return Protocol.read(is);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,protocolReadPushes,void protocolReadPushes(RedisInputStream),"[387, 389]","{'A1': [(387, 389)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  @Experimental
  protected void protocolReadPushes(RedisInputStream is) {
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,readProtocolWithCheckingBroken,Object readProtocolWithCheckingBroken(),"[391, 402]","{'A1': [(393, 393), (397, 402)], 'A7': [(391, 391), (396, 396)], 'A21': [(392, 392), (394, 395)]}","{'A1': 0.5833333333333334, 'A7': 0.16666666666666666, 'A21': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  protected Object readProtocolWithCheckingBroken() {
    if (broken) {
      throw new JedisConnectionException(""Attempting to read from a broken connection."");
    }

    try {
      return protocolRead(inputStream);
    } catch (JedisConnectionException exc) {
      broken = true;
      throw exc;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,readPushesWithCheckingBroken,void readPushesWithCheckingBroken(),"[404, 420]","{'A1': [(404, 415), (417, 417)], 'A7': [(416, 416), (418, 420)]}","{'A1': 0.7647058823529411, 'A7': 0.23529411764705882}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  protected void readPushesWithCheckingBroken() {
    if (broken) {
      throw new JedisConnectionException(""Attempting to read from a broken connection."");
    }

    try {
      if (inputStream.available() > 0) {
        protocolReadPushes(inputStream);
      }
    } catch (IOException e) {
      broken = true;
      throw new JedisConnectionException(""Failed to check buffer on connection."", e);
    } catch (JedisConnectionException exc) {
      setBroken();
      throw exc;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getMany,List<Object> getMany(int),"[422, 433]","{'A7': [(422, 423), (425, 433)], 'A22': [(424, 424)]}","{'A7': 0.9166666666666666, 'A22': 0.08333333333333333}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public List<Object> getMany(final int count) {
    flush();
    final List<Object> responses = new ArrayList<>(count);
    for (int i = 0; i < count; i++) {
      try {
        responses.add(readProtocolWithCheckingBroken());
      } catch (JedisDataException e) {
        responses.add(e);
      }
    }
    return responses;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,validateClientInfo,boolean validateClientInfo(String),"[442, 451]","{'A35': [(446, 447)], 'A10': [(442, 445), (448, 451)]}","{'A35': 0.2, 'A10': 0.8}",A10,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  private static boolean validateClientInfo(String info) {
    for (int i = 0; i < info.length(); i++) {
      char c = info.charAt(i);
      if (c < '!' || c > '~') {
        throw new JedisValidationException(
            ""client info cannot contain spaces, "" + ""newlines or special characters."");
      }
    }
    return true;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,initializeFromClientConfig,void initializeFromClientConfig(JedisClientConfig),"[453, 533]","{'A1': [(453, 458), (466, 477), (481, 482), (487, 501), (503, 507), (510, 511), (517, 517), (519, 533)], 'A33': [(512, 514)], 'A35': [(459, 465), (483, 484)], 'A10': [(478, 480), (485, 486), (502, 502), (508, 509), (515, 516), (518, 518)]}","{'A1': 0.7160493827160493, 'A33': 0.037037037037037035, 'A35': 0.1111111111111111, 'A10': 0.13580246913580246}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  protected void initializeFromClientConfig(final JedisClientConfig config) {
    try {
      connect();

      protocol = config.getRedisProtocol();

      Supplier<RedisCredentials> credentialsProvider = config.getCredentialsProvider();

      authXManager = config.getAuthXManager();
      if (authXManager != null) {
        credentialsProvider = authXManager;
      }

      if (credentialsProvider instanceof RedisCredentialsProvider) {
        final RedisCredentialsProvider redisCredentialsProvider = (RedisCredentialsProvider) credentialsProvider;
        try {
          redisCredentialsProvider.prepare();
          helloAndAuth(protocol, redisCredentialsProvider.get());
        } finally {
          redisCredentialsProvider.cleanUp();
        }
      } else {
        helloAndAuth(protocol, credentialsProvider != null ? credentialsProvider.get()
            : new DefaultRedisCredentials(config.getUser(), config.getPassword()));
      }

      List<CommandArguments> fireAndForgetMsg = new ArrayList<>();

      String clientName = config.getClientName();
      if (clientName != null && validateClientInfo(clientName)) {
        fireAndForgetMsg
            .add(new CommandArguments(Command.CLIENT).add(Keyword.SETNAME).add(clientName));
      }

      ClientSetInfoConfig setInfoConfig = config.getClientSetInfoConfig();
      if (setInfoConfig == null) {
        setInfoConfig = ClientSetInfoConfig.DEFAULT;
      }

      if (!setInfoConfig.isDisabled()) {
        String libName = JedisMetaInfo.getArtifactId();
        if (libName != null && validateClientInfo(libName)) {
          String libNameSuffix = setInfoConfig.getLibNameSuffix();
          if (libNameSuffix != null) { // validation is moved into ClientSetInfoConfig constructor
            libName = libName + '(' + libNameSuffix + ')';
          }
          fireAndForgetMsg.add(new CommandArguments(Command.CLIENT).add(Keyword.SETINFO)
              .add(ClientAttributeOption.LIB_NAME.getRaw()).add(libName));
        }

        String libVersion = JedisMetaInfo.getVersion();
        if (libVersion != null && validateClientInfo(libVersion)) {
          fireAndForgetMsg.add(new CommandArguments(Command.CLIENT).add(Keyword.SETINFO)
              .add(ClientAttributeOption.LIB_VER.getRaw()).add(libVersion));
        }
      }

      // set READONLY flag to ALL connections (including master nodes) when enable read from replica
      if (config.isReadOnlyForRedisClusterReplicas()) {
        fireAndForgetMsg.add(new CommandArguments(Command.READONLY));
      }

      for (CommandArguments arg : fireAndForgetMsg) {
        sendCommand(arg);
      }
      getMany(fireAndForgetMsg.size());

      int dbIndex = config.getDatabase();
      if (dbIndex > 0) {
        select(dbIndex);
      }

    } catch (JedisException je) {
      try {
        disconnect();
      } catch (Exception e) {
        // the first exception 'je' will be thrown
      }
      throw je;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,helloAndAuth,"void helloAndAuth(RedisProtocol,RedisCredentials)","[535, 556]","{'A1': [(535, 539), (542, 545), (547, 556)], 'A35': [(540, 541), (546, 546)]}","{'A1': 0.8636363636363636, 'A35': 0.13636363636363635}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  private void helloAndAuth(final RedisProtocol protocol, final RedisCredentials credentials) {
    Map<String, Object> helloResult = null;
    if (protocol != null && credentials != null && credentials.getUser() != null) {
      byte[] rawPass = encodeToBytes(credentials.getPassword());
      try {
        helloResult = hello(encode(protocol.version()), Keyword.AUTH.getRaw(),
          encode(credentials.getUser()), rawPass);
      } finally {
        Arrays.fill(rawPass, (byte) 0); // clear sensitive data
      }
    } else {
      authenticate(credentials);
      helloResult = protocol == null ? null : hello(encode(protocol.version()));
    }
    if (helloResult != null) {
      server = (String) helloResult.get(""server"");
      version = (String) helloResult.get(""version"");
    }

    // clearing 'char[] credentials.getPassword()' should be
    // handled in RedisCredentialsProvider.cleanUp()
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,setCredentials,void setCredentials(RedisCredentials),"[558, 560]","{'A35': [(558, 560)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public void setCredentials(RedisCredentials credentials) {
    currentCredentials.set(credentials);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,authenticate,String authenticate(RedisCredentials),"[562, 577]","{'A1': [(563, 563), (565, 575)], 'A35': [(562, 562), (564, 564), (576, 577)]}","{'A1': 0.75, 'A35': 0.25}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  private String authenticate(RedisCredentials credentials) {
    if (credentials == null || credentials.getPassword() == null) {
      return null;
    }
    byte[] rawPass = encodeToBytes(credentials.getPassword());
    try {
      if (credentials.getUser() == null) {
        sendCommand(Command.AUTH, rawPass);
      } else {
        sendCommand(Command.AUTH, encode(credentials.getUser()), rawPass);
      }
    } finally {
      Arrays.fill(rawPass, (byte) 0); // clear sensitive data
    }
    return getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,reAuthenticate,String reAuthenticate(),"[579, 581]","{'A1': [(581, 581)], 'A35': [(579, 580)]}","{'A1': 0.3333333333333333, 'A35': 0.6666666666666666}",A35,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public String reAuthenticate() {
    return authenticate(currentCredentials.getAndSet(null));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,hello,"Map<String, Object> hello()","[583, 586]","{'A1': [(583, 586)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  protected Map<String, Object> hello(byte[]... args) {
    sendCommand(Command.HELLO, args);
    return BuilderFactory.ENCODED_OBJECT_MAP.build(getOne());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,encodeToBytes,byte[] encodeToBytes(char[]),"[588, 594]","{'A1': [(588, 594)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  protected byte[] encodeToBytes(char[] chars) {
    // Source: https://stackoverflow.com/a/9670279/4021802
    ByteBuffer passBuf = Protocol.CHARSET.encode(CharBuffer.wrap(chars));
    byte[] rawPass = Arrays.copyOfRange(passBuf.array(), passBuf.position(), passBuf.limit());
    Arrays.fill(passBuf.array(), (byte) 0); // clear sensitive data
    return rawPass;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,select,String select(int),"[596, 599]","{'A1': [(597, 597)], 'A10': [(596, 596), (598, 599)]}","{'A1': 0.25, 'A10': 0.75}",A10,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public String select(final int index) {
    sendCommand(Command.SELECT, Protocol.toByteArray(index));
    return getStatusCodeReply();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,ping,boolean ping(),"[601, 608]","{'A1': [(601, 608)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  public boolean ping() {
    sendCommand(Command.PING);
    String status = getStatusCodeReply();
    if (!""PONG"".equals(status)) {
      throw new JedisException(status);
    }
    return true;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,isTokenBasedAuthenticationEnabled,boolean isTokenBasedAuthenticationEnabled(),"[610, 612]","{'A35': [(610, 612)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  protected boolean isTokenBasedAuthenticationEnabled() {
    return authXManager != null;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Connection.java,Connection,getAuthXManager,AuthXManager getAuthXManager(),"[614, 616]","{'A35': [(614, 616)]}",{'A35': 1.0},A35,../projects/jedis/src/test/java/redis/clients/jedis/ConnectionTest.java,"  protected AuthXManager getAuthXManager() {
    return authXManager;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,toString,String toString(),"[37, 40]","{'A22': [(37, 40)]}",{'A22': 1.0},A22,,"  @Override
  public String toString() {
    return time + ""-"" + sequence;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,equals,boolean equals(Object),"[42, 49]","{'A22': [(42, 49)]}",{'A22': 1.0},A22,,"  @Override
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (obj == null) return false;
    if (getClass() != obj.getClass()) return false;
    StreamEntryID other = (StreamEntryID) obj;
    return this.time == other.time && this.sequence == other.sequence;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,hashCode,int hashCode(),"[51, 54]","{'A22': [(51, 54)]}",{'A22': 1.0},A22,,"  @Override
  public int hashCode() {
    return this.toString().hashCode();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,compareTo,int compareTo(StreamEntryID),"[56, 60]","{'A22': [(56, 57), (60, 60)], 'A53': [(58, 59)]}","{'A22': 0.6, 'A53': 0.4}",A22,,"  @Override
  public int compareTo(StreamEntryID other) {
    int timeCompare = Long.compare(this.time, other.time);
    return timeCompare != 0 ? timeCompare : Long.compare(this.sequence, other.sequence);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,getTime,long getTime(),"[62, 64]","{'A22': [(62, 64)]}",{'A22': 1.0},A22,,"  public long getTime() {
    return time;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,getSequence,long getSequence(),"[66, 68]","{'A22': [(66, 68)]}",{'A22': 1.0},A22,,"  public long getSequence() {
    return sequence;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,writeObject,void writeObject(java.io.ObjectOutputStream),"[70, 73]","{'A22': [(71, 73)], 'A1': [(70, 70)]}","{'A22': 0.75, 'A1': 0.25}",A22,,"  private void writeObject(java.io.ObjectOutputStream out) throws IOException {
    out.writeLong(this.time);
    out.writeLong(this.sequence);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,readObject,void readObject(java.io.ObjectInputStream),"[75, 78]","{'A22': [(76, 78)], 'A1': [(75, 75)]}","{'A22': 0.75, 'A1': 0.25}",A22,,"  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
    this.time = in.readLong();
    this.sequence = in.readLong();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,toString,String toString(),"[89, 92]","{'A1': [(89, 92)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""*"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,toString,String toString(),"[104, 107]","{'A1': [(104, 107)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""$"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,toString,String toString(),"[126, 129]","{'A1': [(126, 129)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""$"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,toString,String toString(),"[141, 144]","{'A1': [(141, 144)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return "">"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,toString,String toString(),"[160, 163]","{'A1': [(160, 163)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""-"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,toString,String toString(),"[173, 176]","{'A1': [(173, 176)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""+"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/StreamEntryID.java,StreamEntryID,toString,String toString(),"[188, 191]","{'A1': [(188, 191)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""+"";
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,commandArguments,ClusterCommandArguments commandArguments(ProtocolCommand),"[17, 22]","{'A1': [(17, 22)]}",{'A1': 1.0},A1,,"  @Override
  protected ClusterCommandArguments commandArguments(ProtocolCommand command) {
    ClusterCommandArguments comArgs = new ClusterCommandArguments(command);
    if (keyPreProcessor != null) comArgs.setKeyArgumentPreProcessor(keyPreProcessor);
    return comArgs;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,dbSize,CommandObject<Long> dbSize(),"[26, 29]","{'A1': [(26, 29)]}",{'A1': 1.0},A1,,"  @Override
  public CommandObject<Long> dbSize() {
    throw new UnsupportedOperationException(CLUSTER_UNSUPPORTED_MESSAGE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,keys,CommandObject<Set<String>> keys(String),"[37, 43]","{'A1': [(37, 43)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<Set<String>> keys(String pattern) {
    if (!JedisClusterHashTag.isClusterCompliantMatchPattern(pattern)) {
      throw new IllegalArgumentException(KEYS_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(KEYS).key(pattern).processKey(pattern), BuilderFactory.STRING_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,keys,CommandObject<Set<byte[]>> keys(byte[]),"[45, 51]","{'A1': [(45, 51)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<Set<byte[]>> keys(byte[] pattern) {
    if (!JedisClusterHashTag.isClusterCompliantMatchPattern(pattern)) {
      throw new IllegalArgumentException(KEYS_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(KEYS).key(pattern).processKey(pattern), BuilderFactory.BINARY_SET);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,scan,CommandObject<ScanResult<String>> scan(String),"[53, 56]","{'A1': [(53, 56)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<String>> scan(String cursor) {
    throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,scan,"CommandObject<ScanResult<String>> scan(String,ScanParams)","[58, 65]","{'A1': [(58, 65)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<String>> scan(String cursor, ScanParams params) {
    String match = params.match();
    if (match == null || !JedisClusterHashTag.isClusterCompliantMatchPattern(match)) {
      throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).processKey(match), BuilderFactory.SCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,scan,"CommandObject<ScanResult<String>> scan(String,ScanParams,String)","[67, 74]","{'A1': [(67, 74)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<String>> scan(String cursor, ScanParams params, String type) {
    String match = params.match();
    if (match == null || !JedisClusterHashTag.isClusterCompliantMatchPattern(match)) {
      throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).processKey(match).add(TYPE).add(type), BuilderFactory.SCAN_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,scan,CommandObject<ScanResult<byte[]>> scan(byte[]),"[76, 79]","{'A1': [(76, 79)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<byte[]>> scan(byte[] cursor) {
    throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,scan,"CommandObject<ScanResult<byte[]>> scan(byte[],ScanParams)","[81, 88]","{'A1': [(81, 88)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<byte[]>> scan(byte[] cursor, ScanParams params) {
    byte[] match = params.binaryMatch();
    if (match == null || !JedisClusterHashTag.isClusterCompliantMatchPattern(match)) {
      throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).processKey(match), BuilderFactory.SCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,scan,"CommandObject<ScanResult<byte[]>> scan(byte[],ScanParams,byte[])","[90, 97]","{'A1': [(90, 97)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<ScanResult<byte[]>> scan(byte[] cursor, ScanParams params, byte[] type) {
    byte[] match = params.binaryMatch();
    if (match == null || !JedisClusterHashTag.isClusterCompliantMatchPattern(match)) {
      throw new IllegalArgumentException(SCAN_PATTERN_MESSAGE);
    }
    return new CommandObject<>(commandArguments(SCAN).add(cursor).addParams(params).processKey(match).add(TYPE).add(type), BuilderFactory.SCAN_BINARY_RESPONSE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,waitReplicas,"CommandObject<Long> waitReplicas(int,long)","[99, 102]","{'A1': [(99, 102)]}",{'A1': 1.0},A1,,"  @Override
  public final CommandObject<Long> waitReplicas(int replicas, long timeout) {
    throw new UnsupportedOperationException(CLUSTER_UNSUPPORTED_MESSAGE);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ClusterCommandObjects.java,ClusterCommandObjects,waitAOF,"CommandObject<KeyValue<Long, Long>> waitAOF(long,long,long)","[104, 107]","{'A11': [(104, 107)]}",{'A11': 1.0},A11,,"  @Override
  public CommandObject<KeyValue<Long, Long>> waitAOF(long numLocal, long numReplicas, long timeout) {
    throw new UnsupportedOperationException(CLUSTER_UNSUPPORTED_MESSAGE);
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/CircuitBreakerFailoverConnectionProvider.java,CircuitBreakerFailoverConnectionProvider,getConnection,Connection getConnection(),"[24, 35]","{'A1': [(24, 35)]}",{'A1': 1.0},A1,,"    public Connection getConnection() {
        Cluster cluster = provider.getCluster(); // Pass this by reference for thread safety

        DecorateSupplier<Connection> supplier = Decorators.ofSupplier(() -> this.handleGetConnection(cluster));

        supplier.withRetry(cluster.getRetry());
        supplier.withCircuitBreaker(cluster.getCircuitBreaker());
        supplier.withFallback(provider.getFallbackExceptionList(),
                e -> this.handleClusterFailover(cluster.getCircuitBreaker()));

        return supplier.decorate().get();
    }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/CircuitBreakerFailoverConnectionProvider.java,CircuitBreakerFailoverConnectionProvider,handleGetConnection,Connection handleGetConnection(Cluster),"[40, 44]","{'A1': [(40, 44)]}",{'A1': 1.0},A1,,"    private Connection handleGetConnection(Cluster cluster) {
        Connection connection = cluster.getConnection();
        connection.ping();
        return connection;
    }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/CircuitBreakerFailoverConnectionProvider.java,CircuitBreakerFailoverConnectionProvider,handleClusterFailover,Connection handleClusterFailover(CircuitBreaker),"[49, 55]","{'A1': [(49, 55)]}",{'A1': 1.0},A1,,"    private Connection handleClusterFailover(CircuitBreaker circuitBreaker) {

        clusterFailover(circuitBreaker);

        // Recursive call to the initiating method so the operation can be retried on the next cluster connection
        return getConnection();
    }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/CircuitBreakerFailoverBase.java,CircuitBreakerFailoverBase,close,void close(),"[30, 33]","{'A49': [(30, 33)]}",{'A49': 1.0},A49,,"    @Override
    public void close() {
        IOUtils.closeQuietly(this.provider);
    }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/CircuitBreakerFailoverBase.java,CircuitBreakerFailoverBase,clusterFailover,void clusterFailover(CircuitBreaker),"[38, 66]","{'A49': [(44, 44), (48, 48), (52, 52), (56, 56), (65, 66)], 'A98': [(38, 43), (45, 47), (49, 51), (53, 55), (57, 64)]}","{'A49': 0.20689655172413793, 'A98': 0.7931034482758621}",A98,,"    protected void clusterFailover(CircuitBreaker circuitBreaker) {
        lock.lock();
        
        try {
            // Check state to handle race conditions since incrementActiveMultiClusterIndex() is non-idempotent
            if (!CircuitBreaker.State.FORCED_OPEN.equals(circuitBreaker.getState())) {

                // Transitions state machine to a FORCED_OPEN state, stopping state transition, metrics and event publishing.
                // To recover/transition from this forced state the user will need to manually failback
                circuitBreaker.transitionToForcedOpenState();

                // Incrementing the activeMultiClusterIndex will allow subsequent calls to the executeCommand()
                // to use the next cluster's connection pool - according to the configuration's prioritization/order
                int activeMultiClusterIndex = provider.incrementActiveMultiClusterIndex();

                // Implementation is optionally provided during configuration. Typically, used for activeMultiClusterIndex persistence or custom logging
                provider.runClusterFailoverPostProcessor(activeMultiClusterIndex);
            }

            // Once the priority list is exhausted only a manual failback can open the circuit breaker so all subsequent operations will fail
            else if (provider.isLastClusterCircuitBreakerForcedOpen()) {
                throw new JedisConnectionException(""Cluster/database endpoint could not failover since the MultiClusterClientConfig was not "" +
                                                   ""provided with an additional cluster/database endpoint according to its prioritized sequence. "" +
                                                   ""If applicable, consider failing back OR restarting with an available cluster/database endpoint"");
            }
        } finally {
            lock.unlock();
        }
    }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/CircuitBreakerCommandExecutor.java,CircuitBreakerCommandExecutor,executeCommand,T executeCommand(CommandObject<T>),"[29, 41]","{'A1': [(29, 41)]}",{'A1': 1.0},A1,,"    @Override
    public <T> T executeCommand(CommandObject<T> commandObject) {
        Cluster cluster = provider.getCluster(); // Pass this by reference for thread safety

        DecorateSupplier<T> supplier = Decorators.ofSupplier(() -> this.handleExecuteCommand(commandObject, cluster));

        supplier.withRetry(cluster.getRetry());
        supplier.withCircuitBreaker(cluster.getCircuitBreaker());
        supplier.withFallback(provider.getFallbackExceptionList(),
                e -> this.handleClusterFailover(commandObject, cluster.getCircuitBreaker()));

        return supplier.decorate().get();
    }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/CircuitBreakerCommandExecutor.java,CircuitBreakerCommandExecutor,handleExecuteCommand,"T handleExecuteCommand(CommandObject<T>,Cluster)","[46, 50]","{'A1': [(46, 50)]}",{'A1': 1.0},A1,,"    private <T> T handleExecuteCommand(CommandObject<T> commandObject, Cluster cluster) {
        try (Connection connection = cluster.getConnection()) {
            return connection.executeCommand(commandObject);
        }
    }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/CircuitBreakerCommandExecutor.java,CircuitBreakerCommandExecutor,handleClusterFailover,"T handleClusterFailover(CommandObject<T>,CircuitBreaker)","[55, 61]","{'A1': [(55, 61)]}",{'A1': 1.0},A1,,"    private <T> T handleClusterFailover(CommandObject<T> commandObject, CircuitBreaker circuitBreaker) {

        clusterFailover(circuitBreaker);

        // Recursive call to the initiating method so the operation can be retried on the next cluster connection
        return executeCommand(commandObject);
    }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterPipeline.java,MultiClusterPipeline,appendCommand,Response<T> appendCommand(CommandObject<T>),"[40, 46]","{'A1': [(40, 46)]}",{'A1': 1.0},A1,,"  @Override
  protected final <T> Response<T> appendCommand(CommandObject<T> commandObject) {
    CommandArguments args = commandObject.getArguments();
    Response<T> response = new Response<>(commandObject.getBuilder());
    commands.add(KeyValue.of(args, response));
    return response;
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterPipeline.java,MultiClusterPipeline,close,void close(),"[48, 52]","{'A1': [(48, 52)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    sync();
    // connection prepared and closed (in try-with-resources) in sync()
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterPipeline.java,MultiClusterPipeline,sync,void sync(),"[58, 70]","{'A1': [(58, 70)]}",{'A1': 1.0},A1,,"  @Override
  public void sync() {
    if (commands.isEmpty()) return;

    try (Connection connection = failoverProvider.getConnection()) {

      commands.forEach((command) -> connection.sendCommand(command.getKey()));
      // following connection.getMany(int) flushes anyway, so no flush here.

      List<Object> unformatted = connection.getMany(commands.size());
      unformatted.forEach((rawReply) -> commands.poll().getValue().set(rawReply));
    }
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterPipeline.java,MultiClusterPipeline,waitReplicas,"Response<Long> waitReplicas(int,long)","[72, 74]","{'A1': [(72, 74)]}",{'A1': 1.0},A1,,"  public Response<Long> waitReplicas(int replicas, long timeout) {
    return appendCommand(commandObjects.waitReplicas(replicas, timeout));
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterPipeline.java,MultiClusterPipeline,waitAOF,"Response<KeyValue<Long, Long>> waitAOF(long,long,long)","[76, 78]","{'A1': [(76, 78)]}",{'A1': 1.0},A1,,"  public Response<KeyValue<Long, Long>> waitAOF(long numLocal, long numReplicas, long timeout) {
    return appendCommand(commandObjects.waitAOF(numLocal, numReplicas, timeout));
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java,MultiClusterTransaction,multi,void multi(),"[81, 86]","{'A1': [(81, 86)]}",{'A1': 1.0},A1,,"  @Override
  public final void multi() {
    appendCommand(new CommandObject<>(new CommandArguments(MULTI), NO_OP_BUILDER));
    extraCommandCount.incrementAndGet();
    inMulti = true;
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java,MultiClusterTransaction,watch,String watch(),"[92, 98]","{'A1': [(92, 98)]}",{'A1': 1.0},A1,,"  @Override
  public final String watch(String... keys) {
    appendCommand(commandObjects.watch(keys));
    extraCommandCount.incrementAndGet();
    inWatch = true;
    return null;
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java,MultiClusterTransaction,watch,String watch(),"[104, 110]","{'A1': [(104, 110)]}",{'A1': 1.0},A1,,"  @Override
  public final String watch(byte[]... keys) {
    appendCommand(commandObjects.watch(keys));
    extraCommandCount.incrementAndGet();
    inWatch = true;
    return null;
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java,MultiClusterTransaction,unwatch,String unwatch(),"[115, 121]","{'A1': [(115, 121)]}",{'A1': 1.0},A1,,"  @Override
  public final String unwatch() {
    appendCommand(new CommandObject<>(new CommandArguments(UNWATCH), NO_OP_BUILDER));
    extraCommandCount.incrementAndGet();
    inWatch = false;
    return null;
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java,MultiClusterTransaction,appendCommand,Response<T> appendCommand(CommandObject<T>),"[123, 129]","{'A1': [(123, 129)]}",{'A1': 1.0},A1,,"  @Override
  protected final <T> Response<T> appendCommand(CommandObject<T> commandObject) {
    CommandArguments args = commandObject.getArguments();
    Response<T> response = new Response<>(commandObject.getBuilder());
    commands.add(KeyValue.of(args, response));
    return response;
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java,MultiClusterTransaction,close,void close(),"[131, 134]","{'A1': [(131, 134)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    clear();
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java,MultiClusterTransaction,clear,void clear(),"[136, 142]","{'A1': [(136, 142)]}",{'A1': 1.0},A1,,"  private void clear() {
    if (inMulti) {
      discard();
    } else if (inWatch) {
      unwatch();
    }
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java,MultiClusterTransaction,exec,List<Object> exec(),"[144, 187]","{'A1': [(144, 187)]}",{'A1': 1.0},A1,,"  @Override
  public final List<Object> exec() {
    if (!inMulti) {
      throw new IllegalStateException(""EXEC without MULTI"");
    }

    try (Connection connection = failoverProvider.getConnection()) {

      commands.forEach((command) -> connection.sendCommand(command.getKey()));
      // following connection.getMany(int) flushes anyway, so no flush here.

      // ignore QUEUED (or ERROR)
      connection.getMany(commands.size());

      // remove extra response builders
      for (int idx = 0; idx < extraCommandCount.get(); ++idx) {
        commands.poll();
      }

      connection.sendCommand(EXEC);

      List<Object> unformatted = connection.getObjectMultiBulkReply();
      if (unformatted == null) {
        commands.clear();
        return null;
      }

      List<Object> formatted = new ArrayList<>(unformatted.size() - extraCommandCount.get());
      for (Object rawReply: unformatted) {
        try {
          Response<?> response = commands.poll().getValue();
          response.set(rawReply);
          formatted.add(response.get());
        } catch (JedisDataException e) {
          formatted.add(e);
        }
      }
      return formatted;

    } finally {
      inMulti = false;
      inWatch = false;
    }
  }
"
redis.clients.jedis.mcf,../projects/jedis/src/main/java/redis/clients/jedis/mcf/MultiClusterTransaction.java,MultiClusterTransaction,discard,String discard(),"[189, 210]","{'A1': [(189, 210)]}",{'A1': 1.0},A1,,"  @Override
  public final String discard() {
    if (!inMulti) {
      throw new IllegalStateException(""DISCARD without MULTI"");
    }

    try (Connection connection = failoverProvider.getConnection()) {

      commands.forEach((command) -> connection.sendCommand(command.getKey()));
      // following connection.getMany(int) flushes anyway, so no flush here.

      // ignore QUEUED (or ERROR)
      connection.getMany(commands.size());

      connection.sendCommand(DISCARD);

      return connection.getStatusCodeReply();
    } finally {
      inMulti = false;
      inWatch = false;
    }
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/ListDirection.java,ListDirection,getRaw,byte[] getRaw(),"[18, 21]","{'A14': [(18, 21)]}",{'A14': 1.0},A14,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/UnblockType.java,UnblockType,getRaw,byte[] getRaw(),"[18, 21]","{'A14': [(18, 21)]}",{'A14': 1.0},A14,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/ClusterFailoverOption.java,ClusterFailoverOption,getRaw,byte[] getRaw(),"[20, 23]","{'A1': [(20, 23)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/ClientType.java,ClientType,getRaw,byte[] getRaw(),"[15, 18]","{'A1': [(15, 18)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/ClientPauseMode.java,ClientPauseMode,getRaw,byte[] getRaw(),"[18, 21]","{'A1': [(18, 21)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/SortedSetOption.java,SortedSetOption,getRaw,byte[] getRaw(),"[15, 18]","{'A1': [(15, 18)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/LatencyEvent.java,LatencyEvent,getRaw,byte[] getRaw(),"[20, 23]","{'A17': [(20, 23)]}",{'A17': 1.0},A17,,"    @Override
    public byte[] getRaw() {
        return raw;
    }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/SaveMode.java,SaveMode,getRaw,byte[] getRaw(),"[23, 26]","{'A1': [(23, 26)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/BitOP.java,BitOP,getRaw,byte[] getRaw(),"[18, 21]","{'A1': [(18, 21)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/FunctionRestorePolicy.java,FunctionRestorePolicy,getRaw,byte[] getRaw(),"[30, 33]","{'A12': [(30, 33)]}",{'A12': 1.0},A12,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/ListPosition.java,ListPosition,getRaw,byte[] getRaw(),"[15, 18]","{'A1': [(15, 18)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/GeoUnit.java,GeoUnit,getRaw,byte[] getRaw(),"[16, 19]","{'A1': [(16, 19)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/BitCountOption.java,BitCountOption,getRaw,byte[] getRaw(),"[18, 21]","{'A1': [(18, 21)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/RawableFactory.java,RawableFactory,from,Rawable from(boolean),"[18, 20]","{'A1': [(18, 20)]}",{'A1': 1.0},A1,,"  public static Rawable from(boolean b) {
    return from(toByteArray(b));
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/RawableFactory.java,RawableFactory,from,Rawable from(int),"[27, 29]","{'A1': [(27, 29)]}",{'A1': 1.0},A1,,"  public static Rawable from(int i) {
    return from(toByteArray(i));
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/RawableFactory.java,RawableFactory,from,Rawable from(long),"[36, 38]","{'A1': [(36, 38)]}",{'A1': 1.0},A1,,"  public static Rawable from(long l) {
    return from(toByteArray(l));
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/RawableFactory.java,RawableFactory,from,Rawable from(double),"[45, 47]","{'A1': [(45, 47)]}",{'A1': 1.0},A1,,"  public static Rawable from(double d) {
    return from(toByteArray(d));
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/RawableFactory.java,RawableFactory,from,Rawable from(byte[]),"[54, 56]","{'A1': [(54, 56)]}",{'A1': 1.0},A1,,"  public static Rawable from(byte[] binary) {
    return new Raw(binary);
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/RawableFactory.java,RawableFactory,from,Rawable from(String),"[63, 65]","{'A1': [(63, 65)]}",{'A1': 1.0},A1,,"  public static Rawable from(String string) {
    return new RawString(string);
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/RawableFactory.java,RawableFactory.Raw,getRaw,byte[] getRaw(),"[78, 81]","{'A1': [(78, 81)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/RawableFactory.java,RawableFactory.Raw,equals,boolean equals(Object),"[83, 88]","{'A17': [(83, 88)]}",{'A17': 1.0},A17,,"    @Override
    public boolean equals(Object o) {
      if (this == o) return true;
      if (o == null || getClass() != o.getClass()) return false;
      return Arrays.equals(raw, ((Raw) o).raw);
    }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/RawableFactory.java,RawableFactory.Raw,hashCode,int hashCode(),"[90, 93]","{'A17': [(90, 93)]}",{'A17': 1.0},A17,,"    @Override
    public int hashCode() {
      return Arrays.hashCode(raw);
    }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/ExpiryOption.java,ExpiryOption,getRaw,byte[] getRaw(),"[36, 39]","{'A12': [(36, 39)]}",{'A12': 1.0},A12,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/ClientAttributeOption.java,ClientAttributeOption,getRaw,byte[] getRaw(),"[19, 22]","{'A10': [(19, 22)]}",{'A10': 1.0},A10,,"    @Override
    public byte[] getRaw() {
        return raw;
    }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/SortingOrder.java,SortingOrder,getRaw,byte[] getRaw(),"[15, 18]","{'A1': [(15, 18)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/FlushMode.java,FlushMode,getRaw,byte[] getRaw(),"[26, 29]","{'A14': [(26, 29)]}",{'A14': 1.0},A14,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.args,../projects/jedis/src/main/java/redis/clients/jedis/args/ClusterResetType.java,ClusterResetType,getRaw,byte[] getRaw(),"[27, 30]","{'A1': [(27, 30)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonBuilderFactory.java,JsonBuilderFactory,build,Class<?> build(Object),"[18, 40]","{'A1': [(18, 40)]}",{'A1': 1.0},A1,,"    @Override
    public Class<?> build(Object data) {
      if (data == null) return null;
      String str = STRING.build(data);
      switch (str) {
        case ""null"":
          return null;
        case ""boolean"":
          return boolean.class;
        case ""integer"":
          return int.class;
        case ""number"":
          return float.class;
        case ""string"":
          return String.class;
        case ""object"":
          return Object.class;
        case ""array"":
          return List.class;
        default:
          throw new JedisException(""Unknown type: "" + str);
      }
    }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonBuilderFactory.java,JsonBuilderFactory,toString,String toString(),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"    @Override
    public String toString() {
      return ""Class<?>"";
    }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonBuilderFactory.java,JsonBuilderFactory,build,List<Class<?>> build(Object),"[49, 61]","{'A1': [(49, 61)]}",{'A1': 1.0},A1,,"    @Override
    public List<Class<?>> build(Object data) {
      List<Object> list = (List<Object>) data;
      List<Class<?>> classes = new ArrayList<>(list.size());
      for (Object elem : list) {
        try {
          classes.add(JSON_TYPE.build(elem));
        } catch (JedisException je) {
          classes.add(null);
        }
      }
      return classes;
    }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonBuilderFactory.java,JsonBuilderFactory,build,List<List<Class<?>>> build(Object),"[65, 68]","{'A1': [(65, 68)]}",{'A1': 1.0},A1,,"    @Override
    public List<List<Class<?>>> build(Object data) {
      return ((List<Object>) data).stream().map(JSON_TYPE_LIST::build).collect(Collectors.toList());
    }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonBuilderFactory.java,JsonBuilderFactory,build,List<Class<?>> build(Object),"[72, 76]","{'A1': [(72, 76)]}",{'A1': 1.0},A1,,"    @Override
    public List<Class<?>> build(Object data) {
      List<List<Class<?>>> fullReply = JSON_TYPE_RESPONSE_RESP3.build(data);
      return fullReply == null ? null : fullReply.get(0);
    }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonBuilderFactory.java,JsonBuilderFactory,build,Object build(Object),"[80, 102]","{'A1': [(80, 102)]}",{'A1': 1.0},A1,,"    @Override
    public Object build(Object data) {
      if (data == null) {
        return null;
      }

      if (!(data instanceof byte[])) {
        return data;
      }
      String str = STRING.build(data);
      if (str.charAt(0) == '{') {
        try {
          return new JSONObject(str);
        } catch (Exception ex) {
        }
      } else if (str.charAt(0) == '[') {
        try {
          return new JSONArray(str);
        } catch (Exception ex) {
        }
      }
      return str;
    }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonBuilderFactory.java,JsonBuilderFactory,build,JSONArray build(Object),"[106, 118]","{'A1': [(106, 118)]}",{'A1': 1.0},A1,,"    @Override
    public JSONArray build(Object data) {
      if (data == null) {
        return null;
      }
      String str = STRING.build(data);
      try {
        return new JSONArray(str);
      } catch (JSONException ex) { // This is not necessary but we are doing this
        // just to make it safe for com.vaadin.external.google:android-json library
        throw new JedisException(ex);
      }
    }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonBuilderFactory.java,JsonBuilderFactory,build,Object build(Object),"[122, 127]","{'A1': [(122, 127)]}",{'A1': 1.0},A1,,"    @Override
    public Object build(Object data) {
      if (data == null) return null;
      if (data instanceof List) return BuilderFactory.DOUBLE_LIST.build(data);
      return JSON_ARRAY.build(data);
    }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonBuilderFactory.java,JsonBuilderFactory,build,List<JSONArray> build(Object),"[131, 138]","{'A1': [(131, 138)]}",{'A1': 1.0},A1,,"    @Override
    public List<JSONArray> build(Object data) {
      if (data == null) {
        return null;
      }
      List<Object> list = (List<Object>) data;
      return list.stream().map(o -> JSON_ARRAY.build(o)).collect(Collectors.toList());
    }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonProtocol.java,JsonProtocol.JsonCommand,getRaw,byte[] getRaw(),"[37, 40]","{'A1': [(37, 40)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV1PipelineCommands.java,,jsonSetLegacy,"Response<String> jsonSetLegacy(String,Object)","[14, 17]","{'A1': [(14, 17)]}",{'A1': 1.0},A1,,"  @Deprecated
  default Response<String> jsonSetLegacy(String key, Object pojo) {
    return jsonSet(key, Path.ROOT_PATH, pojo);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV1PipelineCommands.java,,jsonSetLegacy,"Response<String> jsonSetLegacy(String,Object,JsonSetParams)","[19, 22]","{'A1': [(19, 22)]}",{'A1': 1.0},A1,,"  @Deprecated
  default Response<String> jsonSetLegacy(String key, Object pojo, JsonSetParams params) {
    return jsonSet(key, Path.ROOT_PATH, pojo, params);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV1PipelineCommands.java,,jsonMGet,Response<List<T>> jsonMGet(Class<T>),"[44, 47]","{'A1': [(44, 47)]}",{'A1': 1.0},A1,,"  @Deprecated
  default <T> Response<List<T>> jsonMGet(Class<T> clazz, String... keys) {
    return jsonMGet(Path.ROOT_PATH, clazz, keys);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2PipelineCommands.java,,jsonSet,"Response<String> jsonSet(String,Object)","[11, 13]","{'A1': [(11, 13)]}",{'A1': 1.0},A1,,"  default Response<String> jsonSet(String key, Object object) {
    return jsonSet(key, Path2.ROOT_PATH, object);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2PipelineCommands.java,,jsonSetWithEscape,"Response<String> jsonSetWithEscape(String,Object)","[15, 17]","{'A1': [(15, 17)]}",{'A1': 1.0},A1,,"  default Response<String> jsonSetWithEscape(String key, Object object) {
    return jsonSetWithEscape(key, Path2.ROOT_PATH, object);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2PipelineCommands.java,,jsonSet,"Response<String> jsonSet(String,Object,JsonSetParams)","[19, 21]","{'A1': [(19, 21)]}",{'A1': 1.0},A1,,"  default Response<String> jsonSet(String key, Object object, JsonSetParams params) {
    return jsonSet(key, Path2.ROOT_PATH, object, params);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2PipelineCommands.java,,jsonSetWithEscape,"Response<String> jsonSetWithEscape(String,Object,JsonSetParams)","[23, 25]","{'A1': [(23, 25)]}",{'A1': 1.0},A1,,"  default Response<String> jsonSetWithEscape(String key, Object object, JsonSetParams params) {
    return jsonSetWithEscape(key, Path2.ROOT_PATH, object, params);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2PipelineCommands.java,,jsonMGet,Response<List<JSONArray>> jsonMGet(),"[41, 43]","{'A1': [(41, 43)]}",{'A1': 1.0},A1,,"  default Response<List<JSONArray>> jsonMGet(String... keys) {
    return jsonMGet(Path2.ROOT_PATH, keys);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV1Commands.java,,jsonSetLegacy,"String jsonSetLegacy(String,Object)","[13, 16]","{'A1': [(13, 16)]}",{'A1': 1.0},A1,,"  @Deprecated
  default String jsonSetLegacy(String key, Object pojo) {
    return jsonSet(key, Path.ROOT_PATH, pojo);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV1Commands.java,,jsonSetLegacy,"String jsonSetLegacy(String,Object,JsonSetParams)","[18, 21]","{'A1': [(18, 21)]}",{'A1': 1.0},A1,,"  @Deprecated
  default String jsonSetLegacy(String key, Object pojo, JsonSetParams params) {
    return jsonSet(key, Path.ROOT_PATH, pojo, params);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV1Commands.java,,jsonMGet,List<T> jsonMGet(Class<T>),"[49, 52]","{'A1': [(49, 52)]}",{'A1': 1.0},A1,,"  @Deprecated
  default <T> List<T> jsonMGet(Class<T> clazz, String... keys) {
    return jsonMGet(Path.ROOT_PATH, clazz, keys);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2Commands.java,,jsonSet,"String jsonSet(String,Object)","[10, 12]","{'A1': [(10, 12)]}",{'A1': 1.0},A1,,"  default String jsonSet(String key, Object object) {
    return jsonSet(key, Path2.ROOT_PATH, object);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2Commands.java,,jsonSetWithEscape,"String jsonSetWithEscape(String,Object)","[14, 16]","{'A1': [(14, 16)]}",{'A1': 1.0},A1,,"  default String jsonSetWithEscape(String key, Object object) {
    return jsonSetWithEscape(key, Path2.ROOT_PATH, object);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2Commands.java,,jsonSet,"String jsonSet(String,Object,JsonSetParams)","[18, 20]","{'A1': [(18, 20)]}",{'A1': 1.0},A1,,"  default String jsonSet(String key, Object object, JsonSetParams params) {
    return jsonSet(key, Path2.ROOT_PATH, object, params);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2Commands.java,,jsonSetWithEscape,"String jsonSetWithEscape(String,Object,JsonSetParams)","[22, 24]","{'A1': [(22, 24)]}",{'A1': 1.0},A1,,"  default String jsonSetWithEscape(String key, Object object, JsonSetParams params) {
    return jsonSetWithEscape(key, Path2.ROOT_PATH, object, params);
  }
"
redis.clients.jedis.json.commands,../projects/jedis/src/main/java/redis/clients/jedis/json/commands/RedisJsonV2Commands.java,,jsonMGet,List<JSONArray> jsonMGet(),"[40, 42]","{'A1': [(40, 42)]}",{'A1': 1.0},A1,,"  default List<JSONArray> jsonMGet(String... keys) {
    return jsonMGet(Path2.ROOT_PATH, keys);
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/DefaultGsonObjectMapper.java,DefaultGsonObjectMapper,fromJson,"T fromJson(String,Class<T>)","[17, 20]","{'A39': [(17, 20)]}",{'A39': 1.0},A39,,"  @Override
  public <T> T fromJson(String value, Class<T> valueType) {
    return gson.fromJson(value, valueType);
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/DefaultGsonObjectMapper.java,DefaultGsonObjectMapper,toJson,String toJson(Object),"[22, 25]","{'A39': [(22, 25)]}",{'A39': 1.0},A39,,"  @Override
  public String toJson(Object value) {
    return gson.toJson(value);
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/Path2.java,Path2,toString,String toString(),"[28, 31]","{'A1': [(28, 31)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return str;
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/Path2.java,Path2,of,Path2 of(String),"[33, 35]","{'A1': [(33, 35)]}",{'A1': 1.0},A1,,"  public static Path2 of(final String path) {
    return new Path2(path);
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/Path2.java,Path2,equals,boolean equals(Object),"[37, 49]","{'A1': [(37, 49)]}",{'A1': 1.0},A1,,"  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (!(obj instanceof Path2)) {
      return false;
    }
    if (obj == this) {
      return true;
    }
    return this.toString().equals(((Path2) obj).toString());
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/Path2.java,Path2,hashCode,int hashCode(),"[51, 54]","{'A1': [(51, 54)]}",{'A1': 1.0},A1,,"  @Override
  public int hashCode() {
    return str.hashCode();
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/Path.java,Path,toString,String toString(),"[18, 21]","{'A1': [(18, 21)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return strPath;
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/Path.java,Path,of,Path of(String),"[23, 25]","{'A1': [(23, 25)]}",{'A1': 1.0},A1,,"  public static Path of(final String strPath) {
    return new Path(strPath);
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/Path.java,Path,equals,boolean equals(Object),"[27, 39]","{'A1': [(27, 39)]}",{'A1': 1.0},A1,,"  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (!(obj instanceof Path)) {
      return false;
    }
    if (obj == this) {
      return true;
    }
    return this.toString().equals(((Path) obj).toString());
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/Path.java,Path,hashCode,int hashCode(),"[41, 44]","{'A1': [(41, 44)]}",{'A1': 1.0},A1,,"  @Override
  public int hashCode() {
    return strPath.hashCode();
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonSetParams.java,JsonSetParams,jsonSetParams,JsonSetParams jsonSetParams(),"[14, 16]","{'A1': [(14, 16)]}",{'A1': 1.0},A1,,"  public static JsonSetParams jsonSetParams() {
    return new JsonSetParams();
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonSetParams.java,JsonSetParams,nx,JsonSetParams nx(),"[18, 22]","{'A1': [(18, 22)]}",{'A1': 1.0},A1,,"  public JsonSetParams nx() {
    this.nx = true;
    this.xx = false;
    return this;
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonSetParams.java,JsonSetParams,xx,JsonSetParams xx(),"[24, 28]","{'A1': [(24, 28)]}",{'A1': 1.0},A1,,"  public JsonSetParams xx() {
    this.nx = false;
    this.xx = true;
    return this;
  }
"
redis.clients.jedis.json,../projects/jedis/src/main/java/redis/clients/jedis/json/JsonSetParams.java,JsonSetParams,addParams,void addParams(CommandArguments),"[30, 38]","{'A1': [(30, 38)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    if (nx) {
      args.add(""NX"");
    }
    if (xx) {
      args.add(""XX"");
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisCluster.java,JedisCluster,getClusterNodes,"Map<String, ConnectionPool> getClusterNodes()","[342, 344]","{'A1': [(342, 344)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisClusterTest.java,"  public Map<String, ConnectionPool> getClusterNodes() {
    return ((ClusterConnectionProvider) provider).getNodes();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisCluster.java,JedisCluster,getConnectionFromSlot,Connection getConnectionFromSlot(int),"[351, 353]","{'A1': [(351, 353)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisClusterTest.java,"  public Connection getConnectionFromSlot(int slot) {
    return ((ClusterConnectionProvider) provider).getConnectionFromSlot(slot);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisCluster.java,JedisCluster,spublish,"long spublish(String,String)","[356, 358]","{'A1': [(356, 358)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisClusterTest.java,"  public long spublish(String channel, String message) {
    return executeCommand(commandObjects.spublish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisCluster.java,JedisCluster,spublish,"long spublish(byte[],byte[])","[360, 362]","{'A1': [(360, 362)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisClusterTest.java,"  public long spublish(byte[] channel, byte[] message) {
    return executeCommand(commandObjects.spublish(channel, message));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisCluster.java,JedisCluster,ssubscribe,void ssubscribe(JedisShardedPubSub),"[364, 368]","{'A1': [(364, 368)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisClusterTest.java,"  public void ssubscribe(final JedisShardedPubSub jedisPubSub, final String... channels) {
    try (Connection connection = getConnectionFromSlot(JedisClusterCRC16.getSlot(channels[0]))) {
      jedisPubSub.proceed(connection, channels);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisCluster.java,JedisCluster,ssubscribe,void ssubscribe(BinaryJedisShardedPubSub),"[370, 374]","{'A1': [(370, 374)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisClusterTest.java,"  public void ssubscribe(BinaryJedisShardedPubSub jedisPubSub, final byte[]... channels) {
    try (Connection connection = getConnectionFromSlot(JedisClusterCRC16.getSlot(channels[0]))) {
      jedisPubSub.proceed(connection, channels);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisCluster.java,JedisCluster,pipelined,ClusterPipeline pipelined(),"[377, 380]","{'A1': [(377, 380)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisClusterTest.java,"  @Override
  public ClusterPipeline pipelined() {
    return new ClusterPipeline((ClusterConnectionProvider) provider, (ClusterCommandObjects) commandObjects);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisCluster.java,JedisCluster,transaction,AbstractTransaction transaction(boolean),"[387, 390]","{'A1': [(387, 390)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisClusterTest.java,"  @Override
  public AbstractTransaction transaction(boolean doMulti) {
    throw new UnsupportedOperationException();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisCluster.java,JedisCluster,executeCommandToReplica,T executeCommandToReplica(CommandObject<T>),"[392, 397]","{'A33': [(392, 397)]}",{'A33': 1.0},A33,../projects/jedis/src/test/java/redis/clients/jedis/JedisClusterTest.java,"  public final <T> T executeCommandToReplica(CommandObject<T> commandObject) {
    if (!(executor instanceof ClusterCommandExecutor)) {
      throw new UnsupportedOperationException(""Support only execute to replica in ClusterCommandExecutor"");
    }
    return ((ClusterCommandExecutor) executor).executeCommandToReplica(commandObject);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandArguments.java,ShardedCommandArguments,getKeyHash,Long getKeyHash(),"[29, 31]","{'A1': [(29, 31)]}",{'A1': 1.0},A1,,"  public Long getKeyHash() {
    return keyHash;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandArguments.java,ShardedCommandArguments,processKey,CommandArguments processKey(byte[]),"[33, 42]","{'A1': [(33, 42)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments processKey(byte[] key) {
    final long hash = algo.hash(key);
    if (keyHash == null) {
      keyHash = hash;
    } else if (keyHash != hash) {
      throw new JedisException(""Keys must generate same hash."");
    }
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandArguments.java,ShardedCommandArguments,processKey,CommandArguments processKey(String),"[44, 54]","{'A1': [(44, 54)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments processKey(String key) {
    key = getKeyTag(key);
    final long hash = algo.hash(key);
    if (keyHash == null) {
      keyHash = hash;
    } else if (keyHash != hash) {
      throw new JedisException(""Keys must generate same hash."");
    }
    return this;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/ShardedCommandArguments.java,ShardedCommandArguments,getKeyTag,String getKeyTag(String),"[56, 62]","{'A1': [(56, 62)]}",{'A1': 1.0},A1,,"  private String getKeyTag(String key) {
    if (tagPattern != null) {
      Matcher m = tagPattern.matcher(key);
      if (m.find()) return m.group(1);
    }
    return key;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,createCommandObjects,CommandObjects createCommandObjects(Connection),"[34, 39]","{'A1': [(34, 39)]}",{'A1': 1.0},A1,,"  private static CommandObjects createCommandObjects(Connection connection) {
    CommandObjects commandObjects = new CommandObjects();
    RedisProtocol proto = connection.getRedisProtocol();
    if (proto != null) commandObjects.setProtocol(proto);
    return commandObjects;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,appendCommand,Response<T> appendCommand(CommandObject<T>),"[47, 53]","{'A7': [(53, 53)], 'A1': [(47, 52)]}","{'A7': 0.14285714285714285, 'A1': 0.8571428571428571}",A1,,"  @Override
  public final <T> Response<T> appendCommand(CommandObject<T> commandObject) {
    connection.sendCommand(commandObject.getArguments());
    Response<T> response = new Response<>(commandObject.getBuilder());
    pipelinedResponses.add(response);
    return response;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,close,void close(),"[55, 64]","{'A7': [(55, 55), (64, 64)], 'A1': [(56, 63)]}","{'A7': 0.2, 'A1': 0.8}",A1,,"  @Override
  public void close() {
    try {
      sync();
    } finally {
      if (closeConnection) {
        IOUtils.closeQuietly(connection);
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,sync,void sync(),"[71, 78]","{'A7': [(72, 72), (77, 78)], 'A1': [(71, 71), (73, 76)]}","{'A7': 0.375, 'A1': 0.625}",A1,,"  @Override
  public void sync() {
    if (!hasPipelinedResponse()) return;
    List<Object> unformatted = connection.getMany(pipelinedResponses.size());
    for (Object rawReply : unformatted) {
      pipelinedResponses.poll().set(rawReply);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,syncAndReturnAll,List<Object> syncAndReturnAll(),"[86, 103]","{'A7': [(86, 86), (91, 91), (95, 101), (103, 103)], 'A1': [(87, 88), (90, 90), (92, 94)], 'A22': [(89, 89)], 'A110': [(102, 102)]}","{'A7': 0.5555555555555556, 'A1': 0.3333333333333333, 'A22': 0.05555555555555555, 'A110': 0.05555555555555555}",A7,,"  public List<Object> syncAndReturnAll() {
    if (hasPipelinedResponse()) {
      List<Object> unformatted = connection.getMany(pipelinedResponses.size());
      List<Object> formatted = new ArrayList<>();
      for (Object rawReply : unformatted) {
        try {
          Response<?> response = pipelinedResponses.poll();
          response.set(rawReply);
          formatted.add(response.get());
        } catch (JedisDataException e) {
          formatted.add(e);
        }
      }
      return formatted;
    } else {
      return java.util.Collections.<Object> emptyList();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,hasPipelinedResponse,boolean hasPipelinedResponse(),"[105, 107]","{'A1': [(105, 107)]}",{'A1': 1.0},A1,,"  public final boolean hasPipelinedResponse() {
    return pipelinedResponses.size() > 0;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,waitReplicas,"Response<Long> waitReplicas(int,long)","[109, 111]","{'A1': [(109, 111)]}",{'A1': 1.0},A1,,"  public Response<Long> waitReplicas(int replicas, long timeout) {
    return appendCommand(commandObjects.waitReplicas(replicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,waitAOF,"Response<KeyValue<Long, Long>> waitAOF(long,long,long)","[113, 115]","{'A1': [(113, 115)]}",{'A1': 1.0},A1,,"  public Response<KeyValue<Long, Long>> waitAOF(long numLocal, long numReplicas, long timeout) {
    return appendCommand(commandObjects.waitAOF(numLocal, numReplicas, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,time,Response<List<String>> time(),"[117, 119]","{'A1': [(117, 119)]}",{'A1': 1.0},A1,,"  public Response<List<String>> time() {
    return appendCommand(new CommandObject<>(commandObjects.commandArguments(Protocol.Command.TIME), BuilderFactory.STRING_LIST));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,select,Response<String> select(int),"[121, 124]","{'A1': [(121, 124)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> select(final int index) {
    return appendCommand(new CommandObject<>(commandObjects.commandArguments(Protocol.Command.SELECT).add(index), BuilderFactory.STRING));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,dbSize,Response<Long> dbSize(),"[126, 129]","{'A1': [(127, 128)], 'A12': [(126, 126), (129, 129)]}","{'A1': 0.5, 'A12': 0.5}",A1,,"  @Override
  public Response<Long> dbSize() {
    return appendCommand(new CommandObject<>(commandObjects.commandArguments(Protocol.Command.DBSIZE), BuilderFactory.LONG));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,swapDB,"Response<String> swapDB(int,int)","[131, 135]","{'A1': [(131, 135)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> swapDB(final int index1, final int index2) {
    return appendCommand(new CommandObject<>(commandObjects.commandArguments(Protocol.Command.SWAPDB)
        .add(index1).add(index2), BuilderFactory.STRING));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,move,"Response<Long> move(String,int)","[137, 141]","{'A1': [(137, 141)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> move(String key, int dbIndex) {
    return appendCommand(new CommandObject<>(commandObjects.commandArguments(Protocol.Command.MOVE)
        .key(key).add(dbIndex), BuilderFactory.LONG));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,move,"Response<Long> move(byte[],int)","[143, 147]","{'A1': [(143, 147)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Long> move(final byte[] key, final int dbIndex) {
    return appendCommand(new CommandObject<>(commandObjects.commandArguments(Protocol.Command.MOVE)
        .key(key).add(dbIndex), BuilderFactory.LONG));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,copy,"Response<Boolean> copy(String,String,int,boolean)","[149, 152]","{'A1': [(149, 152)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> copy(String srcKey, String dstKey, int db, boolean replace) {
    return appendCommand(commandObjects.copy(srcKey, dstKey, db, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,copy,"Response<Boolean> copy(byte[],byte[],int,boolean)","[154, 157]","{'A1': [(154, 157)]}",{'A1': 1.0},A1,,"  @Override
  public Response<Boolean> copy(byte[] srcKey, byte[] dstKey, int db, boolean replace) {
    return appendCommand(commandObjects.copy(srcKey, dstKey, db, replace));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,migrate,"Response<String> migrate(String,int,byte[],int,int)","[159, 162]","{'A1': [(159, 162)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> migrate(String host, int port, byte[] key, int destinationDB, int timeout) {
    return appendCommand(commandObjects.migrate(host, port, key, destinationDB, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,migrate,"Response<String> migrate(String,int,String,int,int)","[164, 167]","{'A1': [(164, 167)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> migrate(String host, int port, String key, int destinationDB, int timeout) {
    return appendCommand(commandObjects.migrate(host, port, key, destinationDB, timeout));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,migrate,"Response<String> migrate(String,int,int,int,MigrateParams)","[169, 172]","{'A1': [(169, 172)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> migrate(String host, int port, int destinationDB, int timeout, MigrateParams params, byte[]... keys) {
    return appendCommand(commandObjects.migrate(host, port, destinationDB, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Pipeline.java,Pipeline,migrate,"Response<String> migrate(String,int,int,int,MigrateParams)","[174, 177]","{'A1': [(174, 177)]}",{'A1': 1.0},A1,,"  @Override
  public Response<String> migrate(String host, int port, int destinationDB, int timeout, MigrateParams params, String... keys) {
    return appendCommand(commandObjects.migrate(host, port, destinationDB, timeout, params, keys));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool,parseHostAndPorts,Set<HostAndPort> parseHostAndPorts(Set<String>),"[200, 202]","{'A1': [(200, 202)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"  private static Set<HostAndPort> parseHostAndPorts(Set<String> strings) {
    return strings.stream().map(HostAndPort::from).collect(Collectors.toSet());
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool,destroy,void destroy(),"[204, 211]","{'A92': [(208, 208)], 'A1': [(204, 204)], 'A2': [(209, 209)], 'A7': [(205, 207), (210, 211)]}","{'A92': 0.125, 'A1': 0.125, 'A2': 0.125, 'A7': 0.625}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"  @Override
  public void destroy() {
    for (MasterListener m : masterListeners) {
      m.shutdown();
    }

    super.destroy();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool,getCurrentHostMaster,HostAndPort getCurrentHostMaster(),"[213, 215]","{'A7': [(213, 215)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"  public HostAndPort getCurrentHostMaster() {
    return currentHostMaster;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool,initMaster,void initMaster(HostAndPort),"[217, 233]","{'A92': [(232, 232)], 'A1': [(217, 217), (223, 226), (228, 228)], 'A98': [(218, 220), (230, 231)], 'A7': [(229, 229), (233, 233)], 'A22': [(221, 222), (227, 227)]}","{'A92': 0.058823529411764705, 'A1': 0.35294117647058826, 'A98': 0.29411764705882354, 'A7': 0.11764705882352941, 'A22': 0.17647058823529413}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"  private void initMaster(HostAndPort master) {
    initPoolLock.lock();
    
    try {
      if (!master.equals(currentHostMaster)) {
        currentHostMaster = master;
        factory.setHostAndPort(currentHostMaster);
        // although we clear the pool, we still have to check the returned object in getResource,
        // this call only clears idle instances, not borrowed instances
        super.clear();

        LOG.info(""Created JedisSentinelPool to master at {}"", master);
      }
    } finally {
      initPoolLock.unlock();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool,initSentinels,"HostAndPort initSentinels(Set<HostAndPort>,String)","[235, 292]","{'A92': [(267, 268)], 'A1': [(235, 235), (240, 240), (242, 242), (244, 244), (246, 246), (254, 254), (259, 259), (262, 265), (271, 271), (280, 280), (282, 284)], 'A2': [(239, 239), (279, 279), (281, 281), (289, 290)], 'A7': [(237, 238), (241, 241), (243, 243), (245, 245), (247, 253), (255, 258), (260, 261), (266, 266), (269, 270), (272, 278), (285, 288), (291, 292)], 'A93': [(236, 236)]}","{'A92': 0.034482758620689655, 'A1': 0.27586206896551724, 'A2': 0.08620689655172414, 'A7': 0.5862068965517241, 'A93': 0.017241379310344827}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"  private HostAndPort initSentinels(Set<HostAndPort> sentinels, final String masterName) {

    HostAndPort master = null;
    boolean sentinelAvailable = false;

    LOG.info(""Trying to find master from available Sentinels..."");

    for (HostAndPort sentinel : sentinels) {

      LOG.debug(""Connecting to Sentinel {}"", sentinel);

      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {

        List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);

        // connected to sentinel...
        sentinelAvailable = true;

        if (masterAddr == null || masterAddr.size() != 2) {
          LOG.warn(""Can not get master addr, master name: {}. Sentinel: {}"", masterName, sentinel);
          continue;
        }

        master = toHostAndPort(masterAddr);
        LOG.debug(""Found Redis master at {}"", master);
        break;
      } catch (JedisException e) {
        // resolves #1036, it should handle JedisException there's another chance
        // of raising JedisDataException
        LOG.warn(
          ""Cannot get master address from sentinel running @ {}. Reason: {}. Trying next one."", sentinel, e);
      }
    }

    if (master == null) {
      if (sentinelAvailable) {
        // can connect to sentinel, but master name seems to not monitored
        throw new JedisException(""Can connect to sentinel, but "" + masterName
            + "" seems to be not monitored..."");
      } else {
        throw new JedisConnectionException(""All sentinels down, cannot determine where is ""
            + masterName + "" master is running..."");
      }
    }

    LOG.info(""Redis master running at {}, starting Sentinel listeners..."", master);

    for (HostAndPort sentinel : sentinels) {

      MasterListener masterListener = new MasterListener(masterName, sentinel.getHost(), sentinel.getPort());
      // whether MasterListener threads are alive or not, process can be stopped
      masterListener.setDaemon(true);
      masterListeners.add(masterListener);
      masterListener.start();
    }

    return master;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool,toHostAndPort,HostAndPort toHostAndPort(List<String>),"[294, 299]","{'A7': [(294, 299)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"  private HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {
    String host = getMasterAddrByNameResult.get(0);
    int port = Integer.parseInt(getMasterAddrByNameResult.get(1));

    return new HostAndPort(host, port);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool,getResource,Jedis getResource(),"[301, 318]","{'A1': [(309, 309)], 'A2': [(317, 317)], 'A7': [(301, 308), (310, 316), (318, 318)]}","{'A1': 0.05555555555555555, 'A2': 0.05555555555555555, 'A7': 0.8888888888888888}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"  @Override
  public Jedis getResource() {
    while (true) {
      Jedis jedis = super.getResource();
      jedis.setDataSource(this);

      // get a reference because it can change concurrently
      final HostAndPort master = currentHostMaster;
      final HostAndPort connection = jedis.getClient().getHostAndPort();

      if (master.equals(connection)) {
        // connected to the correct master
        return jedis;
      } else {
        returnBrokenResource(jedis);
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool,returnResource,void returnResource(Jedis),"[320, 331]","{'A1': [(320, 321), (325, 325), (328, 328)], 'A2': [(330, 330)], 'A7': [(322, 322), (331, 331)], 'A116': [(323, 324), (327, 327), (329, 329)], 'A37': [(326, 326)]}","{'A1': 0.3333333333333333, 'A2': 0.08333333333333333, 'A7': 0.16666666666666666, 'A116': 0.3333333333333333, 'A37': 0.08333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"  @Override
  public void returnResource(final Jedis resource) {
    if (resource != null) {
      try {
        resource.resetState();
        super.returnResource(resource);
      } catch (RuntimeException e) {
        returnBrokenResource(resource);
        LOG.debug(""Resource is returned to the pool as broken"", e);
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool.MasterListener,run,void run(),"[358, 426]","{'A1': [(371, 375), (377, 380), (386, 386), (393, 393), (395, 395), (401, 402), (410, 410), (415, 415), (418, 418)], 'A90': [(396, 397), (411, 411)], 'A7': [(359, 363), (365, 369), (382, 385), (387, 392), (394, 394), (398, 400), (403, 406), (408, 409), (412, 414), (416, 417), (419, 420), (424, 426)], 'A113': [(364, 364)], 'A38': [(358, 358)], 'A117': [(370, 370), (421, 423)], 'A118': [(376, 376), (381, 381)], 'A55': [(407, 407)]}","{'A1': 0.2463768115942029, 'A90': 0.043478260869565216, 'A7': 0.5797101449275363, 'A113': 0.014492753623188406, 'A38': 0.014492753623188406, 'A117': 0.057971014492753624, 'A118': 0.028985507246376812, 'A55': 0.014492753623188406}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"    @Override
    public void run() {

      running.set(true);

      while (running.get()) {

        try {
          // double check that it is not being shutdown
          if (!running.get()) {
            break;
          }
          
          final HostAndPort hostPort = new HostAndPort(host, port);
          j = new Jedis(hostPort, sentinelClientConfig);

          // code for active refresh
          List<String> masterAddr = j.sentinelGetMasterAddrByName(masterName);
          if (masterAddr == null || masterAddr.size() != 2) {
            LOG.warn(""Can not get master addr, master name: {}. Sentinel: {}."", masterName,
                hostPort);
          } else {
            initMaster(toHostAndPort(masterAddr));
          }

          j.subscribe(new JedisPubSub() {
            @Override
            public void onMessage(String channel, String message) {
              LOG.debug(""Sentinel {} published: {}."", hostPort, message);

              String[] switchMasterMsg = message.split("" "");

              if (switchMasterMsg.length > 3) {

                if (masterName.equals(switchMasterMsg[0])) {
                  initMaster(toHostAndPort(Arrays.asList(switchMasterMsg[3], switchMasterMsg[4])));
                } else {
                  LOG.debug(
                    ""Ignoring message on +switch-master for master name {}, our master name is {}"",
                    switchMasterMsg[0], masterName);
                }

              } else {
                LOG.error(""Invalid message received on Sentinel {} on channel +switch-master: {}"",
                    hostPort, message);
              }
            }
          }, ""+switch-master"");

        } catch (JedisException e) {

          if (running.get()) {
            LOG.error(""Lost connection to Sentinel at {}:{}. Sleeping 5000ms and retrying."", host,
              port, e);
            try {
              Thread.sleep(subscribeRetryWaitTimeMillis);
            } catch (InterruptedException e1) {
              LOG.error(""Sleep interrupted: "", e1);
            }
          } else {
            LOG.debug(""Unsubscribing from Sentinel at {}:{}"", host, port);
          }
        } finally {
          if (j != null) {
            j.close();
          }
        }
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool.MasterListener,onMessage,"void onMessage(String,String)","[384, 404]","{'A1': [(386, 386), (393, 393), (395, 395), (401, 402)], 'A90': [(396, 397)], 'A7': [(384, 385), (387, 392), (394, 394), (398, 400), (403, 404)]}","{'A1': 0.23809523809523808, 'A90': 0.09523809523809523, 'A7': 0.6666666666666666}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"            @Override
            public void onMessage(String channel, String message) {
              LOG.debug(""Sentinel {} published: {}."", hostPort, message);

              String[] switchMasterMsg = message.split("" "");

              if (switchMasterMsg.length > 3) {

                if (masterName.equals(switchMasterMsg[0])) {
                  initMaster(toHostAndPort(Arrays.asList(switchMasterMsg[3], switchMasterMsg[4])));
                } else {
                  LOG.debug(
                    ""Ignoring message on +switch-master for master name {}, our master name is {}"",
                    switchMasterMsg[0], masterName);
                }

              } else {
                LOG.error(""Invalid message received on Sentinel {} on channel +switch-master: {}"",
                    hostPort, message);
              }
            }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/JedisSentinelPool.java,JedisSentinelPool.MasterListener,shutdown,void shutdown(),"[428, 439]","{'A92': [(439, 439)], 'A1': [(430, 430), (434, 434), (437, 437)], 'A7': [(428, 429), (431, 433), (435, 435), (438, 438)], 'A37': [(436, 436)]}","{'A92': 0.08333333333333333, 'A1': 0.25, 'A7': 0.5833333333333334, 'A37': 0.08333333333333333}",A7,../projects/jedis/src/test/java/redis/clients/jedis/JedisSentinelPoolTest.java,"    public void shutdown() {
      try {
        LOG.debug(""Shutting down listener on {}:{}"", host, port);
        running.set(false);
        // This isn't good, the Jedis object is not thread safe
        if (j != null) {
          j.close();
        }
      } catch (RuntimeException e) {
        LOG.error(""Caught exception while shutting down: "", e);
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,sendCommand,"void sendCommand(RedisOutputStream,CommandArguments)","[73, 87]","{'A1': [(73, 73), (76, 77), (79, 81)], 'A7': [(74, 75), (78, 78), (82, 87)]}","{'A1': 0.4, 'A7': 0.6}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  public static void sendCommand(final RedisOutputStream os, CommandArguments args) {
    try {
      os.write(ASTERISK_BYTE);
      os.writeIntCrLf(args.size());
      for (Rawable arg : args) {
        os.write(DOLLAR_BYTE);
        final byte[] bin = arg.getRaw();
        os.writeIntCrLf(bin.length);
        os.write(bin);
        os.writeCrLf();
      }
    } catch (IOException e) {
      throw new JedisConnectionException(e);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,processError,void processError(RedisInputStream),"[89, 111]","{'A1': [(93, 93), (95, 96), (98, 99), (101, 101), (105, 107)], 'A7': [(89, 92), (94, 94), (97, 97), (100, 100), (109, 111)], 'A85': [(102, 102)], 'A20': [(103, 103), (108, 108)], 'A86': [(104, 104)]}","{'A1': 0.391304347826087, 'A7': 0.43478260869565216, 'A85': 0.043478260869565216, 'A20': 0.08695652173913043, 'A86': 0.043478260869565216}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  private static void processError(final RedisInputStream is) {
    String message = is.readLine();
    // TODO: I'm not sure if this is the best way to do this.
    // Maybe Read only first 5 bytes instead?
    if (message.startsWith(MOVED_PREFIX)) {
      String[] movedInfo = parseTargetHostAndSlot(message);
      throw new JedisMovedDataException(message, HostAndPort.from(movedInfo[1]), Integer.parseInt(movedInfo[0]));
    } else if (message.startsWith(ASK_PREFIX)) {
      String[] askInfo = parseTargetHostAndSlot(message);
      throw new JedisAskDataException(message, HostAndPort.from(askInfo[1]), Integer.parseInt(askInfo[0]));
    } else if (message.startsWith(CLUSTERDOWN_PREFIX)) {
      throw new JedisClusterException(message);
    } else if (message.startsWith(BUSY_PREFIX)) {
      throw new JedisBusyException(message);
    } else if (message.startsWith(NOSCRIPT_PREFIX)) {
      throw new JedisNoScriptException(message);
    } else if (message.startsWith(NOAUTH_PREFIX)
        || message.startsWith(WRONGPASS_PREFIX)
        || message.startsWith(NOPERM_PREFIX)) {
      throw new JedisAccessControlException(message);
    }
    throw new JedisDataException(message);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,readErrorLineIfPossible,String readErrorLineIfPossible(RedisInputStream),"[113, 120]","{'A28': [(113, 120)]}",{'A28': 1.0},A28,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  public static String readErrorLineIfPossible(RedisInputStream is) {
    final byte b = is.readByte();
    // if buffer contains other type of response, just ignore.
    if (b != MINUS_BYTE) {
      return null;
    }
    return is.readLine();
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,parseTargetHostAndSlot,String[] parseTargetHostAndSlot(String),"[122, 128]","{'A1': [(123, 123), (126, 126)], 'A7': [(122, 122), (124, 125), (127, 128)]}","{'A1': 0.2857142857142857, 'A7': 0.7142857142857143}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  private static String[] parseTargetHostAndSlot(String clusterRedirectResponse) {
    String[] response = new String[2];
    String[] messageInfo = clusterRedirectResponse.split("" "");
    response[0] = messageInfo[1];
    response[1] = messageInfo[2];
    return response;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,process,Object process(RedisInputStream),"[130, 164]","{'A1': [(132, 132), (134, 162)], 'A7': [(130, 131), (163, 164)], 'A20': [(133, 133)]}","{'A1': 0.8571428571428571, 'A7': 0.11428571428571428, 'A20': 0.02857142857142857}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  private static Object process(final RedisInputStream is) {
    final byte b = is.readByte();
    // System.out.println(""BYTE: "" + (char) b);
    switch (b) {
      case PLUS_BYTE:
        return is.readLineBytes();
      case DOLLAR_BYTE:
      case EQUAL_BYTE:
        return processBulkReply(is);
      case ASTERISK_BYTE:
        return processMultiBulkReply(is);
      case UNDERSCORE_BYTE:
        return is.readNullCrLf();
      case HASH_BYTE:
        return is.readBooleanCrLf();
      case COLON_BYTE:
        return is.readLongCrLf();
      case COMMA_BYTE:
        return is.readDoubleCrLf();
      case LEFT_BRACE_BYTE:
        return is.readBigIntegerCrLf();
      case PERCENT_BYTE: // TODO: currently just to start working with HELLO
        return processMapKeyValueReply(is);
      case TILDE_BYTE: // TODO:
        return processMultiBulkReply(is);
      case GREATER_THAN_BYTE:
        return processMultiBulkReply(is);
      case MINUS_BYTE:
        processError(is);
        return null;
      // TODO: Blob error '!'
      default:
        throw new JedisConnectionException(""Unknown reply: "" + (char) b);
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,processBulkReply,byte[] processBulkReply(RedisInputStream),"[166, 187]","{'A1': [(176, 178)], 'A7': [(166, 175), (179, 187)]}","{'A1': 0.13636363636363635, 'A7': 0.8636363636363636}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  private static byte[] processBulkReply(final RedisInputStream is) {
    final int len = is.readIntCrLf();
    if (len == -1) {
      return null;
    }

    final byte[] read = new byte[len];
    int offset = 0;
    while (offset < len) {
      final int size = is.read(read, offset, (len - offset));
      if (size == -1) {
        throw new JedisConnectionException(""It seems like server has closed the connection."");
      }
      offset += size;
    }

    // read 2 more bytes for the command delimiter
    is.readByte();
    is.readByte();

    return read;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,processMultiBulkReply,List<Object> processMultiBulkReply(RedisInputStream),"[189, 202]","{'A1': [(189, 192)], 'A7': [(194, 202)], 'A22': [(193, 193)]}","{'A1': 0.2857142857142857, 'A7': 0.6428571428571429, 'A22': 0.07142857142857142}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  private static List<Object> processMultiBulkReply(final RedisInputStream is) {
    final int num = is.readIntCrLf();
    if (num == -1)
      return null;
    final List<Object> ret = new ArrayList<>(num);
    for (int i = 0; i < num; i++) {
      try {
        ret.add(process(is));
      } catch (JedisDataException e) {
        ret.add(e);
      }
    }
    return ret;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,processMapKeyValueReply,List<KeyValue> processMapKeyValueReply(RedisInputStream),"[204, 218]","{'A1': [(204, 218)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  private static List<KeyValue> processMapKeyValueReply(final RedisInputStream is) {
    final int num = is.readIntCrLf();
    switch (num) {
      case -1:
        return null;
      case 0:
        return PROTOCOL_EMPTY_MAP;
      default:
        final List<KeyValue> ret = new ArrayList<>(num);
        for (int i = 0; i < num; i++) {
          ret.add(new KeyValue(process(is), process(is)));
        }
        return ret;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,read,Object read(RedisInputStream),"[220, 222]","{'A7': [(220, 222)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  public static Object read(final RedisInputStream is) {
    return process(is);
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,read,"Object read(RedisInputStream,Cache)","[224, 228]","{'A1': [(224, 225), (228, 228)], 'A35': [(226, 227)]}","{'A1': 0.6, 'A35': 0.4}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  @Experimental
  public static Object read(final RedisInputStream is, final Cache cache) {
    Object unhandledPush = readPushes(is, cache, false);
    return unhandledPush == null ? process(is) : unhandledPush;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,readPushes,"Object readPushes(RedisInputStream,Cache,boolean)","[230, 248]","{'A1': [(230, 230), (234, 235), (238, 242), (245, 246), (248, 248)], 'A35': [(231, 233), (236, 237), (243, 244), (247, 247)]}","{'A1': 0.5789473684210527, 'A35': 0.42105263157894735}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  @Experimental
  public static Object readPushes(final RedisInputStream is, final Cache cache,
      boolean onlyPendingBuffer) {
    Object unhandledPush = null;
    if (onlyPendingBuffer) {
      try {
        while (unhandledPush == null && is.available() > 0 && is.peek(GREATER_THAN_BYTE)) {
          unhandledPush = processPush(is, cache);
        }
      } catch (IOException e) {
        throw new JedisConnectionException(""Failed to read pending buffer for push messages!"", e);
      }
    } else {
      while (unhandledPush == null && is.peek(GREATER_THAN_BYTE)) {
        unhandledPush = processPush(is, cache);
      }
    }
    return unhandledPush;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,processPush,"Object processPush(RedisInputStream,Cache)","[250, 260]","{'A1': [(252, 255), (259, 260)], 'A35': [(250, 251), (256, 258)]}","{'A1': 0.5454545454545454, 'A35': 0.45454545454545453}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  private static Object processPush(final RedisInputStream is, Cache cache) {
    is.readByte();
    List<Object> list = processMultiBulkReply(is);
    if (list.size() == 2 && list.get(0) instanceof byte[]
        && Arrays.equals(INVALIDATE_BYTES, (byte[]) list.get(0))) {
      cache.deleteByRedisKeys((List) list.get(1));
      return null;
    } else {
      return list;
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,toByteArray,byte[] toByteArray(boolean),"[262, 264]","{'A7': [(262, 262), (264, 264)], 'A28': [(263, 263)]}","{'A7': 0.6666666666666666, 'A28': 0.3333333333333333}",A7,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  public static final byte[] toByteArray(final boolean value) {
    return value ? BYTES_TRUE : BYTES_FALSE;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,toByteArray,byte[] toByteArray(int),"[266, 268]","{'A7': [(266, 268)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  public static final byte[] toByteArray(final int value) {
    return SafeEncoder.encode(String.valueOf(value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,toByteArray,byte[] toByteArray(long),"[270, 272]","{'A7': [(270, 272)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  public static final byte[] toByteArray(final long value) {
    return SafeEncoder.encode(String.valueOf(value));
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol,toByteArray,byte[] toByteArray(double),"[274, 282]","{'A1': [(275, 280)], 'A7': [(274, 274), (282, 282)], 'A19': [(281, 281)]}","{'A1': 0.6666666666666666, 'A7': 0.2222222222222222, 'A19': 0.1111111111111111}",A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"  public static final byte[] toByteArray(final double value) {
    if (value == Double.POSITIVE_INFINITY) {
      return POSITIVE_INFINITY_BYTES;
    } else if (value == Double.NEGATIVE_INFINITY) {
      return NEGATIVE_INFINITY_BYTES;
    } else {
      return SafeEncoder.encode(String.valueOf(value));
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol.Command,getRaw,byte[] getRaw(),"[322, 325]","{'A8': [(322, 325)]}",{'A8': 1.0},A8,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol.Keyword,getRaw,byte[] getRaw(),"[350, 353]","{'A1': [(350, 353)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol.SentinelKeyword,getRaw,byte[] getRaw(),"[371, 374]","{'A1': [(371, 374)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol.ResponseKeyword,getRaw,byte[] getRaw(),"[388, 391]","{'A1': [(388, 391)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Protocol.java,Protocol.ClusterKeyword,getRaw,byte[] getRaw(),"[407, 410]","{'A1': [(407, 410)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/ProtocolTest.java,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,createCommandObjects,CommandObjects createCommandObjects(Connection),"[95, 100]","{'A1': [(95, 100)]}",{'A1': 1.0},A1,,"  private static CommandObjects createCommandObjects(Connection connection) {
    CommandObjects commandObjects = new CommandObjects();
    RedisProtocol proto = connection.getRedisProtocol();
    if (proto != null) commandObjects.setProtocol(proto);
    return commandObjects;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,multi,void multi(),"[102, 107]","{'A1': [(103, 106)], 'A7': [(102, 102), (107, 107)]}","{'A1': 0.6666666666666666, 'A7': 0.3333333333333333}",A1,,"  @Override
  public final void multi() {
    connection.sendCommand(MULTI);
    // processMultiResponse(); // do nothing
    inMulti = true;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,watch,String watch(),"[109, 114]","{'A1': [(110, 113)], 'A7': [(109, 109), (114, 114)]}","{'A1': 0.6666666666666666, 'A7': 0.3333333333333333}",A1,,"  @Override
  public String watch(final String... keys) {
    String status = connection.executeCommand(commandObjects.watch(keys));
    inWatch = true;
    return status;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,watch,String watch(),"[116, 121]","{'A1': [(116, 120)], 'A7': [(121, 121)]}","{'A1': 0.8333333333333334, 'A7': 0.16666666666666666}",A1,,"  @Override
  public String watch(final byte[]... keys) {
    String status = connection.executeCommand(commandObjects.watch(keys));
    inWatch = true;
    return status;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,unwatch,String unwatch(),"[123, 129]","{'A1': [(123, 129)]}",{'A1': 1.0},A1,,"  @Override
  public String unwatch() {
    connection.sendCommand(UNWATCH);
    String status = connection.getStatusCodeReply();
    inWatch = false;
    return status;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,appendCommand,Response<T> appendCommand(CommandObject<T>),"[131, 138]","{'A1': [(131, 138)]}",{'A1': 1.0},A1,,"  @Override
  protected final <T> Response<T> appendCommand(CommandObject<T> commandObject) {
    connection.sendCommand(commandObject.getArguments());
    // processAppendStatus(); // do nothing
    Response<T> response = new Response<>(commandObject.getBuilder());
    pipelinedResponses.add(response);
    return response;
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,close,void close(),"[140, 149]","{'A1': [(140, 149)]}",{'A1': 1.0},A1,,"  @Override
  public final void close() {
    try {
      clear();
    } finally {
      if (closeConnection) {
        connection.close();
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,clear,void clear(),"[151, 161]","{'A1': [(151, 161)]}",{'A1': 1.0},A1,,"  @Deprecated // TODO: private
  public final void clear() {
    if (broken) {
      return;
    }
    if (inMulti) {
      discard();
    } else if (inWatch) {
      unwatch();
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,exec,List<Object> exec(),"[163, 218]","{'A2': [(217, 217)], 'A1': [(163, 171), (174, 176), (191, 215)], 'A7': [(216, 216), (218, 218)], 'A61': [(172, 173), (177, 190)]}","{'A2': 0.017857142857142856, 'A1': 0.6607142857142857, 'A7': 0.03571428571428571, 'A61': 0.2857142857142857}",A1,,"  @Override
  public List<Object> exec() {
    if (!inMulti) {
      throw new IllegalStateException(""EXEC without MULTI"");
    }

    try {
      // ignore QUEUED (or ERROR)
      // processPipelinedResponses(pipelinedResponses.size());
      List<Object> queuedCmdResponses = connection.getMany(1 + pipelinedResponses.size());


      connection.sendCommand(EXEC);

      List<Object> unformatted;
      try {
        unformatted = connection.getObjectMultiBulkReply();
      } catch (JedisDataException jce) {
        // A command may fail to be queued, so there may be an error before EXEC is called
        // In this case, the server will discard all commands in the transaction and return the EXECABORT error.
        // Enhance the final error with suppressed errors.
        queuedCmdResponses.stream()
            .filter(o -> o instanceof Exception)
            .map(o -> (Exception) o)
            .forEach(jce::addSuppressed);
        throw jce;
      }

      if (unformatted == null) {
        pipelinedResponses.clear();
        return null;
      }

      List<Object> formatted = new ArrayList<>(unformatted.size());
      for (Object o : unformatted) {
        try {
          Response<?> response = pipelinedResponses.poll();
          response.set(o);
          formatted.add(response.get());
        } catch (JedisDataException e) {
          formatted.add(e);
        }
      }
      return formatted;
    } catch (JedisConnectionException jce) {
      broken = true;
      throw jce;
    } finally {
      inMulti = false;
      inWatch = false;
      pipelinedResponses.clear();
      if (jedis != null) {
        jedis.resetState();
      }
    }
  }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/Transaction.java,Transaction,discard,String discard(),"[220, 245]","{'A1': [(221, 244)], 'A7': [(220, 220), (245, 245)]}","{'A1': 0.9230769230769231, 'A7': 0.07692307692307693}",A1,,"  @Override
  public String discard() {
    if (!inMulti) {
      throw new IllegalStateException(""DISCARD without MULTI"");
    }

    try {
      // ignore QUEUED (or ERROR)
      // processPipelinedResponses(pipelinedResponses.size());
      connection.getMany(1 + pipelinedResponses.size());

      connection.sendCommand(DISCARD);

      return connection.getStatusCodeReply();
    } catch (JedisConnectionException jce) {
      broken = true;
      throw jce;
    } finally {
      inMulti = false;
      inWatch = false;
      pipelinedResponses.clear();
      if (jedis != null) {
        jedis.resetState();
      }
    }
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/RetryableCommandExecutor.java,RetryableCommandExecutor,close,void close(),"[32, 35]","{'A1': [(32, 35)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    IOUtils.closeQuietly(this.provider);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/RetryableCommandExecutor.java,RetryableCommandExecutor,executeCommand,T executeCommand(CommandObject<T>),"[37, 73]","{'A1': [(37, 73)]}",{'A1': 1.0},A1,,"  @Override
  public final <T> T executeCommand(CommandObject<T> commandObject) {

    Instant deadline = Instant.now().plus(maxTotalRetriesDuration);

    int consecutiveConnectionFailures = 0;
    JedisException lastException = null;
    for (int attemptsLeft = this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {
      Connection connection = null;
      try {
        connection = provider.getConnection(commandObject.getArguments());

        return execute(connection, commandObject);

      } catch (JedisConnectionException jce) {
        lastException = jce;
        ++consecutiveConnectionFailures;
        log.debug(""Failed connecting to Redis: {}"", connection, jce);
        // ""- 1"" because we just did one, but the attemptsLeft counter hasn't been decremented yet
        boolean reset = handleConnectionProblem(attemptsLeft - 1, consecutiveConnectionFailures, deadline);
        if (reset) {
          consecutiveConnectionFailures = 0;
        }
      } finally {
        if (connection != null) {
          connection.close();
        }
      }
      if (Instant.now().isAfter(deadline)) {
        throw new JedisException(""Retry deadline exceeded."");
      }
    }

    JedisException maxAttemptsException = new JedisException(""No more attempts left."");
    maxAttemptsException.addSuppressed(lastException);
    throw maxAttemptsException;
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/RetryableCommandExecutor.java,RetryableCommandExecutor,execute,"T execute(Connection,CommandObject<T>)","[79, 82]","{'A1': [(79, 82)]}",{'A1': 1.0},A1,,"  @VisibleForTesting
  protected <T> T execute(Connection connection, CommandObject<T> commandObject) {
    return connection.executeCommand(commandObject);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/RetryableCommandExecutor.java,RetryableCommandExecutor,handleConnectionProblem,"boolean handleConnectionProblem(int,int,Instant)","[93, 101]","{'A1': [(93, 101)]}",{'A1': 1.0},A1,,"  private boolean handleConnectionProblem(int attemptsLeft, int consecutiveConnectionFailures, Instant doneDeadline) {

    if (consecutiveConnectionFailures < 2) {
      return false;
    }

    sleep(getBackoffSleepMillis(attemptsLeft, doneDeadline));
    return true;
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/RetryableCommandExecutor.java,RetryableCommandExecutor,getBackoffSleepMillis,"long getBackoffSleepMillis(int,Instant)","[103, 114]","{'A1': [(103, 114)]}",{'A1': 1.0},A1,,"  private static long getBackoffSleepMillis(int attemptsLeft, Instant deadline) {
    if (attemptsLeft <= 0) {
      return 0;
    }

    long millisLeft = Duration.between(Instant.now(), deadline).toMillis();
    if (millisLeft < 0) {
      throw new JedisException(""Retry deadline exceeded."");
    }

    return millisLeft / (attemptsLeft * (attemptsLeft + 1));
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/RetryableCommandExecutor.java,RetryableCommandExecutor,sleep,void sleep(long),"[120, 127]","{'A1': [(120, 127)]}",{'A1': 1.0},A1,,"  @VisibleForTesting
  protected void sleep(long sleepMillis) {
    try {
      TimeUnit.MILLISECONDS.sleep(sleepMillis);
    } catch (InterruptedException e) {
      throw new JedisException(e);
    }
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/SimpleCommandExecutor.java,SimpleCommandExecutor,close,void close(),"[15, 18]","{'A1': [(15, 18)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    IOUtils.closeQuietly(connection);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/SimpleCommandExecutor.java,SimpleCommandExecutor,executeCommand,T executeCommand(CommandObject<T>),"[20, 23]","{'A1': [(20, 23)]}",{'A1': 1.0},A1,,"  @Override
  public final <T> T executeCommand(CommandObject<T> commandObject) {
    return connection.executeCommand(commandObject);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java,ClusterCommandExecutor,close,void close(),"[36, 39]","{'A1': [(36, 39)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    this.provider.close();
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java,ClusterCommandExecutor,broadcastCommand,T broadcastCommand(CommandObject<T>),"[41, 72]","{'A1': [(41, 72)]}",{'A1': 1.0},A1,,"  @Override
  public final <T> T broadcastCommand(CommandObject<T> commandObject) {
    Map<String, ConnectionPool> connectionMap = provider.getConnectionMap();

    boolean isErrored = false;
    T reply = null;
    JedisBroadcastException bcastError = new JedisBroadcastException();
    for (Map.Entry<String, ConnectionPool> entry : connectionMap.entrySet()) {
      HostAndPort node = HostAndPort.from(entry.getKey());
      ConnectionPool pool = entry.getValue();
      try (Connection connection = pool.getResource()) {
        T aReply = execute(connection, commandObject);
        bcastError.addReply(node, aReply);
        if (isErrored) { // already errored
        } else if (reply == null) {
          reply = aReply; // ok
        } else if (reply.equals(aReply)) {
          // ok
        } else {
          isErrored = true;
          reply = null;
        }
      } catch (Exception anError) {
        bcastError.addReply(node, anError);
        isErrored = true;
      }
    }
    if (isErrored) {
      throw bcastError;
    }
    return reply;
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java,ClusterCommandExecutor,executeCommand,T executeCommand(CommandObject<T>),"[74, 77]","{'A1': [(74, 75)], 'A33': [(76, 77)]}","{'A1': 0.5, 'A33': 0.5}",A1,,"  @Override
  public final <T> T executeCommand(CommandObject<T> commandObject) {
    return doExecuteCommand(commandObject, false);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java,ClusterCommandExecutor,executeCommandToReplica,T executeCommandToReplica(CommandObject<T>),"[79, 81]","{'A33': [(79, 81)]}",{'A33': 1.0},A33,,"  public final <T> T executeCommandToReplica(CommandObject<T> commandObject) {
    return doExecuteCommand(commandObject, true);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java,ClusterCommandExecutor,doExecuteCommand,"T doExecuteCommand(CommandObject<T>,boolean)","[83, 142]","{'A1': [(84, 98), (101, 133), (135, 142)], 'A33': [(83, 83), (99, 100)], 'A61': [(134, 134)]}","{'A1': 0.9333333333333333, 'A33': 0.05, 'A61': 0.016666666666666666}",A1,,"  private <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) {
    Instant deadline = Instant.now().plus(maxTotalRetriesDuration);

    JedisRedirectionException redirect = null;
    int consecutiveConnectionFailures = 0;
    Exception lastException = null;
    for (int attemptsLeft = this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {
      Connection connection = null;
      try {
        if (redirect != null) {
          connection = provider.getConnection(redirect.getTargetNode());
          if (redirect instanceof JedisAskDataException) {
            // TODO: Pipeline asking with the original command to make it faster....
            connection.executeCommand(Protocol.Command.ASKING);
          }
        } else {
          connection = toReplica ? provider.getReplicaConnection(commandObject.getArguments())
              : provider.getConnection(commandObject.getArguments());
        }

        return execute(connection, commandObject);

      } catch (JedisClusterOperationException jnrcne) {
        throw jnrcne;
      } catch (JedisConnectionException jce) {
        lastException = jce;
        ++consecutiveConnectionFailures;
        log.debug(""Failed connecting to Redis: {}"", connection, jce);
        // ""- 1"" because we just did one, but the attemptsLeft counter hasn't been decremented yet
        boolean reset = handleConnectionProblem(attemptsLeft - 1, consecutiveConnectionFailures, deadline);
        if (reset) {
          consecutiveConnectionFailures = 0;
          redirect = null;
        }
      } catch (JedisRedirectionException jre) {
        // avoid updating lastException if it is a connection exception
        if (lastException == null || lastException instanceof JedisRedirectionException) {
          lastException = jre;
        }
        log.debug(""Redirected by server to {}"", jre.getTargetNode());
        consecutiveConnectionFailures = 0;
        redirect = jre;
        // if MOVED redirection occurred,
        if (jre instanceof JedisMovedDataException) {
          // it rebuilds cluster's slot cache recommended by Redis cluster specification
          provider.renewSlotCache(connection);
        }
      } finally {
        IOUtils.closeQuietly(connection);
      }
      if (Instant.now().isAfter(deadline)) {
        throw new JedisClusterOperationException(""Cluster retry deadline exceeded."", lastException);
      }
    }

    JedisClusterOperationException maxAttemptsException
        = new JedisClusterOperationException(""No more cluster attempts left."");
    maxAttemptsException.addSuppressed(lastException);
    throw maxAttemptsException;
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java,ClusterCommandExecutor,execute,"T execute(Connection,CommandObject<T>)","[148, 151]","{'A1': [(148, 151)]}",{'A1': 1.0},A1,,"  @VisibleForTesting
  protected <T> T execute(Connection connection, CommandObject<T> commandObject) {
    return connection.executeCommand(commandObject);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java,ClusterCommandExecutor,handleConnectionProblem,"boolean handleConnectionProblem(int,int,Instant)","[162, 187]","{'A1': [(162, 187)]}",{'A1': 1.0},A1,,"  private boolean handleConnectionProblem(int attemptsLeft, int consecutiveConnectionFailures, Instant doneDeadline) {
    if (this.maxAttempts < 3) {
      // Since we only renew the slots cache after two consecutive connection
      // failures (see consecutiveConnectionFailures above), we need to special
      // case the situation where we max out after two or fewer attempts.
      // Otherwise, on two or fewer max attempts, the slots cache would never be
      // renewed.
      if (attemptsLeft == 0) {
        provider.renewSlotCache();
        return true;
      }
      return false;
    }

    if (consecutiveConnectionFailures < 2) {
      return false;
    }

    sleep(getBackoffSleepMillis(attemptsLeft, doneDeadline));
    //We need this because if node is not reachable anymore - we need to finally initiate slots
    //renewing, or we can stuck with cluster state without one node in opposite case.
    //TODO make tracking of successful/unsuccessful operations for node - do renewing only
    //if there were no successful responses from this node last few seconds
    provider.renewSlotCache();
    return true;
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java,ClusterCommandExecutor,getBackoffSleepMillis,"long getBackoffSleepMillis(int,Instant)","[189, 201]","{'A1': [(189, 198), (201, 201)], 'A95': [(199, 200)]}","{'A1': 0.8461538461538461, 'A95': 0.15384615384615385}",A1,,"  private static long getBackoffSleepMillis(int attemptsLeft, Instant deadline) {
    if (attemptsLeft <= 0) {
      return 0;
    }

    long millisLeft = Duration.between(Instant.now(), deadline).toMillis();
    if (millisLeft < 0) {
      throw new JedisClusterOperationException(""Cluster retry deadline exceeded."");
    }

    long maxBackOff = millisLeft / (attemptsLeft * attemptsLeft);
    return ThreadLocalRandom.current().nextLong(maxBackOff + 1);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/ClusterCommandExecutor.java,ClusterCommandExecutor,sleep,void sleep(long),"[207, 214]","{'A1': [(207, 214)]}",{'A1': 1.0},A1,,"  @VisibleForTesting
  protected void sleep(long sleepMillis) {
    try {
      TimeUnit.MILLISECONDS.sleep(sleepMillis);
    } catch (InterruptedException e) {
      throw new JedisClusterOperationException(e);
    }
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/CommandExecutor.java,,broadcastCommand,T broadcastCommand(CommandObject<T>),"[9, 11]","{'A1': [(9, 11)]}",{'A1': 1.0},A1,,"  default <T> T broadcastCommand(CommandObject<T> commandObject) {
    return executeCommand(commandObject);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/DefaultCommandExecutor.java,DefaultCommandExecutor,close,void close(),"[16, 19]","{'A1': [(16, 19)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    IOUtils.closeQuietly(this.provider);
  }
"
redis.clients.jedis.executors,../projects/jedis/src/main/java/redis/clients/jedis/executors/DefaultCommandExecutor.java,DefaultCommandExecutor,executeCommand,T executeCommand(CommandObject<T>),"[21, 26]","{'A1': [(21, 26)]}",{'A1': 1.0},A1,,"  @Override
  public final <T> T executeCommand(CommandObject<T> commandObject) {
    try (Connection connection = provider.getConnection(commandObject.getArguments())) {
      return connection.executeCommand(commandObject);
    }
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerInfo.java,StreamConsumerInfo,getName,String getName(),"[34, 36]","{'A1': [(34, 36)]}",{'A1': 1.0},A1,,"  public String getName() {
    return name;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerInfo.java,StreamConsumerInfo,getIdle,long getIdle(),"[38, 40]","{'A1': [(38, 40)]}",{'A1': 1.0},A1,,"  public long getIdle() {
    return idle;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerInfo.java,StreamConsumerInfo,getPending,long getPending(),"[42, 44]","{'A1': [(42, 44)]}",{'A1': 1.0},A1,,"  public long getPending() {
    return pending;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerInfo.java,StreamConsumerInfo,getInactive,Long getInactive(),"[49, 51]","{'A1': [(49, 51)]}",{'A1': 1.0},A1,,"  public Long getInactive() {
    return inactive;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerInfo.java,StreamConsumerInfo,getConsumerInfo,"Map<String, Object> getConsumerInfo()","[57, 59]","{'A1': [(57, 59)]}",{'A1': 1.0},A1,,"  public Map<String, Object> getConsumerInfo() {
    return consumerInfo;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntry.java,StreamEntry,getID,StreamEntryID getID(),"[20, 22]","{'A22': [(20, 22)]}",{'A22': 1.0},A22,,"  public StreamEntryID getID() {
    return id;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntry.java,StreamEntry,getFields,"Map<String, String> getFields()","[24, 26]","{'A22': [(24, 26)]}",{'A22': 1.0},A22,,"  public Map<String, String> getFields() {
    return fields;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntry.java,StreamEntry,toString,String toString(),"[28, 31]","{'A22': [(28, 31)]}",{'A22': 1.0},A22,,"  @Override
  public String toString() {
    return id + "" "" + fields;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntry.java,StreamEntry,writeObject,void writeObject(java.io.ObjectOutputStream),"[33, 36]","{'A1': [(33, 33)], 'A22': [(34, 36)]}","{'A1': 0.25, 'A22': 0.75}",A22,,"  private void writeObject(java.io.ObjectOutputStream out) throws IOException {
    out.writeUnshared(this.id);
    out.writeUnshared(this.fields);
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntry.java,StreamEntry,readObject,void readObject(java.io.ObjectInputStream),"[38, 41]","{'A1': [(38, 38)], 'A22': [(39, 41)]}","{'A1': 0.25, 'A22': 0.75}",A22,,"  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
    this.id = (StreamEntryID) in.readUnshared();
    this.fields = (Map<String, String>) in.readUnshared();
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Slowlog.java,Slowlog,from,List<Slowlog> from(List<Object>),"[33, 41]","{'A6': [(33, 34), (36, 41)], 'A22': [(35, 35)]}","{'A6': 0.8888888888888888, 'A22': 0.1111111111111111}",A6,,"  @SuppressWarnings(""unchecked"")
  public static List<Slowlog> from(List<Object> nestedMultiBulkReply) {
    List<Slowlog> logs = new ArrayList<>(nestedMultiBulkReply.size());
    for (Object obj : nestedMultiBulkReply) {
      List<Object> properties = (List<Object>) obj;
      logs.add(new Slowlog(properties));
    }
    return logs;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Slowlog.java,Slowlog,getId,long getId(),"[43, 45]","{'A7': [(43, 45)]}",{'A7': 1.0},A7,,"  public long getId() {
    return id;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Slowlog.java,Slowlog,getTimeStamp,long getTimeStamp(),"[47, 49]","{'A7': [(47, 49)]}",{'A7': 1.0},A7,,"  public long getTimeStamp() {
    return timeStamp;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Slowlog.java,Slowlog,getExecutionTime,long getExecutionTime(),"[51, 53]","{'A7': [(51, 53)]}",{'A7': 1.0},A7,,"  public long getExecutionTime() {
    return executionTime;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Slowlog.java,Slowlog,getArgs,List<String> getArgs(),"[55, 57]","{'A7': [(55, 57)]}",{'A7': 1.0},A7,,"  public List<String> getArgs() {
    return args;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Slowlog.java,Slowlog,getClientIpPort,HostAndPort getClientIpPort(),"[59, 61]","{'A1': [(59, 61)]}",{'A1': 1.0},A1,,"  public HostAndPort getClientIpPort() {
    return clientIpPort;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Slowlog.java,Slowlog,getClientName,String getClientName(),"[63, 65]","{'A1': [(63, 65)]}",{'A1': 1.0},A1,,"  public String getClientName() {
    return clientName;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Slowlog.java,Slowlog,toString,String toString(),"[67, 71]","{'A125': [(67, 68), (71, 71)], 'A8': [(69, 70)]}","{'A125': 0.6, 'A8': 0.4}",A125,,"  @Override
  public String toString() {
    return new StringBuilder().append(id).append(COMMA).append(timeStamp).append(COMMA)
        .append(executionTime).append(COMMA).append(args).toString();
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntryBinary.java,StreamEntryBinary,getID,StreamEntryID getID(),"[20, 22]","{'A4': [(20, 22)]}",{'A4': 1.0},A4,,"  public StreamEntryID getID() {
    return id;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntryBinary.java,StreamEntryBinary,getFields,"Map<byte[], byte[]> getFields()","[24, 26]","{'A4': [(24, 26)]}",{'A4': 1.0},A4,,"  public Map<byte[], byte[]> getFields() {
    return fields;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntryBinary.java,StreamEntryBinary,toString,String toString(),"[28, 31]","{'A4': [(28, 31)]}",{'A4': 1.0},A4,,"  @Override
  public String toString() {
    return id + "" "" + fields;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntryBinary.java,StreamEntryBinary,writeObject,void writeObject(java.io.ObjectOutputStream),"[33, 36]","{'A4': [(33, 36)]}",{'A4': 1.0},A4,,"  private void writeObject(java.io.ObjectOutputStream out) throws IOException {
    out.writeUnshared(this.id);
    out.writeUnshared(this.fields);
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamEntryBinary.java,StreamEntryBinary,readObject,void readObject(java.io.ObjectInputStream),"[38, 41]","{'A4': [(38, 41)]}",{'A4': 1.0},A4,,"  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
    this.id = (StreamEntryID) in.readUnshared();
    this.fields = (Map<byte[], byte[]>) in.readUnshared();
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getCount,long getCount(),"[56, 58]","{'A1': [(56, 58)]}",{'A1': 1.0},A1,,"  public long getCount() {
    return count;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getReason,String getReason(),"[60, 62]","{'A1': [(60, 62)]}",{'A1': 1.0},A1,,"  public String getReason() {
    return reason;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getContext,String getContext(),"[64, 66]","{'A1': [(64, 66)]}",{'A1': 1.0},A1,,"  public String getContext() {
    return context;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getObject,String getObject(),"[68, 70]","{'A1': [(68, 70)]}",{'A1': 1.0},A1,,"  public String getObject() {
    return object;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getUsername,String getUsername(),"[72, 74]","{'A1': [(72, 74)]}",{'A1': 1.0},A1,,"  public String getUsername() {
    return username;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getAgeSeconds,Double getAgeSeconds(),"[76, 78]","{'A1': [(76, 78)]}",{'A1': 1.0},A1,,"  public Double getAgeSeconds() {
    return ageSeconds;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getClientInfo,"Map<String, String> getClientInfo()","[80, 82]","{'A1': [(80, 82)]}",{'A1': 1.0},A1,,"  public Map<String, String> getClientInfo() {
    return clientInfo;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getlogEntry,"Map<String, Object> getlogEntry()","[87, 89]","{'A1': [(87, 89)]}",{'A1': 1.0},A1,,"  public Map<String, Object> getlogEntry() {
    return logEntry;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getEntryId,long getEntryId(),"[91, 93]","{'A10': [(91, 93)]}",{'A10': 1.0},A10,,"  public long getEntryId() {
    return entryId;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getTimestampCreated,long getTimestampCreated(),"[95, 97]","{'A10': [(95, 97)]}",{'A10': 1.0},A10,,"  public long getTimestampCreated() {
    return timestampCreated;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getTimestampLastUpdated,long getTimestampLastUpdated(),"[99, 101]","{'A10': [(99, 101)]}",{'A10': 1.0},A10,,"  public long getTimestampLastUpdated() {
    return timestampLastUpdated;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,getMapFromRawClientInfo,"Map<String, String> getMapFromRawClientInfo(String)","[109, 117]","{'A1': [(109, 117)]}",{'A1': 1.0},A1,,"  private Map<String, String> getMapFromRawClientInfo(String clientInfo) {
    String[] entries = clientInfo.split("" "");
    Map<String, String> clientInfoMap = new LinkedHashMap<>(entries.length);
    for (String entry : entries) {
      String[] kvArray = entry.split(""="");
      clientInfoMap.put(kvArray[0], (kvArray.length == 2) ? kvArray[1] : """");
    }
    return clientInfoMap;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlLogEntry.java,AccessControlLogEntry,toString,String toString(),"[119, 126]","{'A1': [(119, 122), (126, 126)], 'A10': [(123, 125)]}","{'A1': 0.625, 'A10': 0.375}",A1,,"  @Override
  public String toString() {
    return ""AccessControlLogEntry{"" + ""count="" + count + "", reason='"" + reason + '\''
        + "", context='"" + context + '\'' + "", object='"" + object + '\'' + "", username='"" + username
        + '\'' + "", ageSeconds='"" + ageSeconds + '\'' + "", clientInfo="" + clientInfo
        + "", entryId="" + entryId + "", timestampCreated="" + timestampCreated
        + "", timestampLastUpdated="" + timestampLastUpdated + '}';
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerFullInfo.java,StreamConsumerFullInfo,getName,String getName(),"[41, 43]","{'A26': [(41, 43)]}",{'A26': 1.0},A26,,"  public String getName() {
    return name;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerFullInfo.java,StreamConsumerFullInfo,getSeenTime,Long getSeenTime(),"[45, 47]","{'A26': [(46, 47)], 'A1': [(45, 45)]}","{'A26': 0.6666666666666666, 'A1': 0.3333333333333333}",A26,,"  public Long getSeenTime() {
    return seenTime;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerFullInfo.java,StreamConsumerFullInfo,getActiveTime,Long getActiveTime(),"[52, 54]","{'A1': [(52, 54)]}",{'A1': 1.0},A1,,"  public Long getActiveTime() {
    return activeTime;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerFullInfo.java,StreamConsumerFullInfo,getPelCount,Long getPelCount(),"[56, 58]","{'A26': [(56, 58)]}",{'A26': 1.0},A26,,"  public Long getPelCount() {
    return pelCount;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerFullInfo.java,StreamConsumerFullInfo,getPending,List<List<Object>> getPending(),"[60, 62]","{'A26': [(61, 62)], 'A1': [(60, 60)]}","{'A26': 0.6666666666666666, 'A1': 0.3333333333333333}",A26,,"  public List<List<Object>> getPending() {
    return pending;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamConsumerFullInfo.java,StreamConsumerFullInfo,getConsumerInfo,"Map<String, Object> getConsumerInfo()","[67, 69]","{'A26': [(67, 69)]}",{'A26': 1.0},A26,,"  public Map<String, Object> getConsumerInfo() {
    return consumerInfo;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Tuple.java,Tuple,hashCode,int hashCode(),"[23, 36]","{'A1': [(33, 33)], 'A2': [(32, 32)], 'A7': [(24, 31), (34, 36)], 'A38': [(23, 23)]}","{'A1': 0.07142857142857142, 'A2': 0.07142857142857142, 'A7': 0.7857142857142857, 'A38': 0.07142857142857142}",A7,,"  @Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result;
    if (null != element) {
      for (final byte b : element) {
        result = prime * result + b;
      }
    }
    long temp = Double.doubleToLongBits(score);
    result = prime * result + (int) (temp ^ (temp >>> 32));
    return result;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Tuple.java,Tuple,equals,boolean equals(Object),"[38, 47]","{'A1': [(45, 46)], 'A7': [(39, 40), (44, 44), (47, 47)], 'A38': [(38, 38)], 'A74': [(41, 43)]}","{'A1': 0.2, 'A7': 0.4, 'A38': 0.1, 'A74': 0.3}",A7,,"  @Override
  public boolean equals(Object obj) {
    if (obj == null) return false;
    if (obj == this) return true;
    if (!(obj instanceof Tuple)) return false;

    Tuple other = (Tuple) obj;
    if (!Arrays.equals(element, other.element)) return false;
    return Objects.equals(score, other.score);
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Tuple.java,Tuple,compareTo,int compareTo(Tuple),"[49, 52]","{'A1': [(51, 52)], 'A7': [(50, 50)], 'A38': [(49, 49)]}","{'A1': 0.5, 'A7': 0.25, 'A38': 0.25}",A1,,"  @Override
  public int compareTo(Tuple other) {
    return compare(this, other);
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Tuple.java,Tuple,compare,"int compare(Tuple,Tuple)","[54, 59]","{'A1': [(54, 58)], 'A7': [(59, 59)]}","{'A1': 0.8333333333333334, 'A7': 0.16666666666666666}",A1,,"  public static int compare(Tuple t1, Tuple t2) {
    int compScore = Double.compare(t1.score, t2.score);
    if (compScore != 0) return compScore;

    return ByteArrayComparator.compare(t1.element, t2.element);
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Tuple.java,Tuple,getElement,String getElement(),"[61, 67]","{'A52': [(66, 66)], 'A7': [(61, 65), (67, 67)]}","{'A52': 0.14285714285714285, 'A7': 0.8571428571428571}",A7,,"  public String getElement() {
    if (null != element) {
      return SafeEncoder.encode(element);
    } else {
      return null;
    }
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Tuple.java,Tuple,getBinaryElement,byte[] getBinaryElement(),"[69, 71]","{'A7': [(69, 71)]}",{'A7': 1.0},A7,,"  public byte[] getBinaryElement() {
    return element;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Tuple.java,Tuple,getScore,double getScore(),"[73, 75]","{'A7': [(73, 75)]}",{'A7': 1.0},A7,,"  public double getScore() {
    return score;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/Tuple.java,Tuple,toString,String toString(),"[77, 81]","{'A1': [(78, 78), (80, 80)], 'A7': [(79, 79), (81, 81)], 'A38': [(77, 77)]}","{'A1': 0.4, 'A7': 0.4, 'A38': 0.2}",A1,,"  @Override
  // TODO: element=score
  public String toString() {
    return '[' + SafeEncoder.encode(element) + ',' + score + ']';
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/TrackingInfo.java,TrackingInfo,getFlags,List<String> getFlags(),"[24, 26]","{'A70': [(24, 26)]}",{'A70': 1.0},A70,,"    public List<String> getFlags() {
        return flags;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/TrackingInfo.java,TrackingInfo,getRedirect,long getRedirect(),"[28, 30]","{'A70': [(28, 30)]}",{'A70': 1.0},A70,,"    public long getRedirect() {
        return redirect;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/TrackingInfo.java,TrackingInfo,getPrefixes,List<String> getPrefixes(),"[32, 34]","{'A70': [(32, 34)]}",{'A70': 1.0},A70,,"    public List<String> getPrefixes() {
        return prefixes;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/TrackingInfo.java,TrackingInfo,build,TrackingInfo build(Object),"[37, 68]","{'A70': [(37, 68)]}",{'A70': 1.0},A70,,"        @Override
        public TrackingInfo build(Object data) {
            List commandData = (List) data;

            if (commandData.get(0) instanceof KeyValue) {
                List<String> flags = Collections.emptyList();
                long redirect = -1;
                List<String> prefixes = Collections.emptyList();

                for (KeyValue kv : (List<KeyValue>) commandData) {
                    switch (STRING.build(kv.getKey())) {
                        case ""flags"":
                            flags = STRING_LIST.build(kv.getValue());
                            break;
                        case ""redirect"":
                            redirect = LONG.build(kv.getValue());
                            break;
                        case ""prefixes"":
                            prefixes = STRING_LIST.build(kv.getValue());
                            break;
                    }
                }

                return new TrackingInfo(flags, redirect, prefixes);
            } else {
                List<String> flags = STRING_LIST.build(commandData.get(1));
                long redirect = LONG.build(commandData.get(3));
                List<String> prefixes = STRING_LIST.build(commandData.get(5));

                return new TrackingInfo(flags, redirect, prefixes);
            }
        }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getId,String getId(),"[51, 53]","{'A18': [(51, 53)]}",{'A18': 1.0},A18,,"  public String getId() {
    return id;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getEndpoint,String getEndpoint(),"[55, 57]","{'A18': [(55, 57)]}",{'A18': 1.0},A18,,"  public String getEndpoint() {
    return endpoint;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getIp,String getIp(),"[59, 61]","{'A18': [(59, 61)]}",{'A18': 1.0},A18,,"  public String getIp() {
    return ip;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getHostname,String getHostname(),"[63, 65]","{'A18': [(63, 65)]}",{'A18': 1.0},A18,,"  public String getHostname() {
    return hostname;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getPort,Long getPort(),"[67, 69]","{'A18': [(67, 69)]}",{'A18': 1.0},A18,,"  public Long getPort() {
    return port;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getTlsPort,Long getTlsPort(),"[71, 73]","{'A18': [(71, 73)]}",{'A18': 1.0},A18,,"  public Long getTlsPort() {
    return tlsPort;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getRole,String getRole(),"[75, 77]","{'A18': [(75, 77)]}",{'A18': 1.0},A18,,"  public String getRole() {
    return role;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getReplicationOffset,Long getReplicationOffset(),"[79, 81]","{'A18': [(79, 81)]}",{'A18': 1.0},A18,,"  public Long getReplicationOffset() {
    return replicationOffset;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getHealth,String getHealth(),"[83, 85]","{'A18': [(83, 85)]}",{'A18': 1.0},A18,,"  public String getHealth() {
    return health;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,getClusterShardNodeInfo,"Map<String, Object> getClusterShardNodeInfo()","[87, 89]","{'A18': [(87, 89)]}",{'A18': 1.0},A18,,"  public Map<String, Object> getClusterShardNodeInfo() {
    return clusterShardNodeInfo;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardNodeInfo.java,ClusterShardNodeInfo,isSsl,boolean isSsl(),"[91, 93]","{'A18': [(91, 93)]}",{'A18': 1.0},A18,,"  public boolean isSsl() {
    return tlsPort != null;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,getName,String getName(),"[52, 54]","{'A1': [(52, 54)]}",{'A1': 1.0},A1,,"  public String getName() {
    return name;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,getArity,long getArity(),"[66, 68]","{'A12': [(66, 68)]}",{'A12': 1.0},A12,,"  public long getArity() {
    return arity;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,getFlags,List<String> getFlags(),"[73, 75]","{'A12': [(73, 75)]}",{'A12': 1.0},A12,,"  public List<String> getFlags() {
    return flags;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,getFirstKey,long getFirstKey(),"[80, 82]","{'A12': [(80, 82)]}",{'A12': 1.0},A12,,"  public long getFirstKey() {
    return firstKey;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,getLastKey,long getLastKey(),"[88, 90]","{'A12': [(88, 90)]}",{'A12': 1.0},A12,,"  public long getLastKey() {
    return lastKey;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,getStep,long getStep(),"[95, 97]","{'A12': [(95, 97)]}",{'A12': 1.0},A12,,"  public long getStep() {
    return step;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,getAclCategories,List<String> getAclCategories(),"[102, 104]","{'A12': [(102, 104)]}",{'A12': 1.0},A12,,"  public List<String> getAclCategories() {
    return aclCategories;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,getTips,List<String> getTips(),"[109, 111]","{'A12': [(109, 111)]}",{'A12': 1.0},A12,,"  public List<String> getTips() {
    return tips;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,getSubcommands,"Map<String, CommandInfo> getSubcommands()","[116, 118]","{'A12': [(117, 118)], 'A1': [(116, 116)]}","{'A12': 0.6666666666666666, 'A1': 0.3333333333333333}",A12,,"  public Map<String, CommandInfo> getSubcommands() {
    return subcommands;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,build,CommandInfo build(Object),"[121, 146]","{'A12': [(121, 122), (127, 127), (131, 131), (133, 137)], 'A1': [(123, 126), (128, 130), (132, 132), (138, 146)]}","{'A12': 0.34615384615384615, 'A1': 0.6538461538461539}",A1,,"    @Override
    public CommandInfo build(Object data) {
      if (data == null) {
        return null;
      }

      List<Object> commandData = (List<Object>) data;
      if (commandData.isEmpty()) {
        return null;
      }

      String name = STRING.build(commandData.get(0));
      long arity = LONG.build(commandData.get(1));
      List<String> flags = STRING_LIST.build(commandData.get(2));
      long firstKey = LONG.build(commandData.get(3));
      long lastKey = LONG.build(commandData.get(4));
      long step = LONG.build(commandData.get(5));
      // Redis 6.0
      List<String> aclCategories = commandData.size() >= 7 ? STRING_LIST.build(commandData.get(6)) : null;
      // Redis 7.0
      List<String> tips = commandData.size() >= 8 ? STRING_LIST.build(commandData.get(7)) : null;
      Map<String, CommandInfo> subcommands = commandData.size() >= 10
          ? COMMAND_INFO_RESPONSE.build(commandData.get(9)) : null;

      return new CommandInfo(name, arity, flags, firstKey, lastKey, step, aclCategories, tips, subcommands);
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandInfo.java,CommandInfo,build,"Map<String, CommandInfo> build(Object)","[150, 167]","{'A12': [(167, 167)], 'A1': [(150, 166)]}","{'A12': 0.05555555555555555, 'A1': 0.9444444444444444}",A1,,"    @Override
    public Map<String, CommandInfo> build(Object data) {
      if (data == null) {
        return null;
      }

      List<Object> rawList = (List<Object>) data;
      Map<String, CommandInfo> map = new HashMap<>(rawList.size());

      for (Object rawCommandInfo : rawList) {
        CommandInfo info = CommandInfo.COMMAND_INFO_BUILDER.build(rawCommandInfo);
        if (info != null) {
          map.put(info.getName(), info);
        }
      }

      return map;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LatencyLatestInfo.java,LatencyLatestInfo,getCommand,String getCommand(),"[24, 26]","{'A17': [(24, 26)]}",{'A17': 1.0},A17,,"    public String getCommand() {
        return command;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LatencyLatestInfo.java,LatencyLatestInfo,getTimestamp,long getTimestamp(),"[28, 30]","{'A17': [(28, 30)]}",{'A17': 1.0},A17,,"    public long getTimestamp() {
        return timestamp;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LatencyLatestInfo.java,LatencyLatestInfo,getLastEventLatency,long getLastEventLatency(),"[32, 34]","{'A17': [(32, 34)]}",{'A17': 1.0},A17,,"    public long getLastEventLatency() {
        return lastEventLatency;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LatencyLatestInfo.java,LatencyLatestInfo,getMaxEventLatency,long getMaxEventLatency(),"[36, 38]","{'A17': [(36, 38)]}",{'A17': 1.0},A17,,"    public long getMaxEventLatency() {
        return maxEventLatency;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LatencyLatestInfo.java,LatencyLatestInfo,build,LatencyLatestInfo build(Object),"[41, 51]","{'A17': [(41, 51)]}",{'A17': 1.0},A17,,"        @Override
        public LatencyLatestInfo build(Object data) {
            List<Object> commandData = (List<Object>) data;

            String command = STRING.build(commandData.get(0));
            long timestamp = LONG.build(commandData.get(1));
            long lastEventLatency = LONG.build(commandData.get(2));
            long maxEventLatency = LONG.build(commandData.get(3));

            return new LatencyLatestInfo(command, timestamp, lastEventLatency, maxEventLatency);
        }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamInfo.java,StreamInfo,getLength,long getLength(),"[47, 49]","{'A25': [(47, 49)]}",{'A25': 1.0},A25,,"  public long getLength() {
    return length;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamInfo.java,StreamInfo,getRadixTreeKeys,long getRadixTreeKeys(),"[51, 53]","{'A25': [(51, 53)]}",{'A25': 1.0},A25,,"  public long getRadixTreeKeys() {
    return radixTreeKeys;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamInfo.java,StreamInfo,getRadixTreeNodes,long getRadixTreeNodes(),"[55, 57]","{'A25': [(55, 57)]}",{'A25': 1.0},A25,,"  public long getRadixTreeNodes() {
    return radixTreeNodes;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamInfo.java,StreamInfo,getGroups,long getGroups(),"[59, 61]","{'A25': [(59, 61)]}",{'A25': 1.0},A25,,"  public long getGroups() {
    return groups;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamInfo.java,StreamInfo,getLastGeneratedId,StreamEntryID getLastGeneratedId(),"[63, 65]","{'A25': [(63, 65)]}",{'A25': 1.0},A25,,"  public StreamEntryID getLastGeneratedId() {
    return lastGeneratedId;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamInfo.java,StreamInfo,getFirstEntry,StreamEntry getFirstEntry(),"[67, 69]","{'A25': [(67, 69)]}",{'A25': 1.0},A25,,"  public StreamEntry getFirstEntry() {
    return firstEntry;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamInfo.java,StreamInfo,getLastEntry,StreamEntry getLastEntry(),"[71, 73]","{'A25': [(71, 73)]}",{'A25': 1.0},A25,,"  public StreamEntry getLastEntry() {
    return lastEntry;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamInfo.java,StreamInfo,getStreamInfo,"Map<String, Object> getStreamInfo()","[78, 80]","{'A1': [(78, 78)], 'A25': [(79, 80)]}","{'A1': 0.3333333333333333, 'A25': 0.6666666666666666}",A25,,"  public Map<String, Object> getStreamInfo() {
    return streamInfo;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/FunctionStats.java,FunctionStats,getRunningScript,"Map<String, Object> getRunningScript()","[20, 22]","{'A12': [(20, 22)]}",{'A12': 1.0},A12,,"  public Map<String, Object> getRunningScript() {
    return runningScript;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/FunctionStats.java,FunctionStats,getEngines,"Map<String, Map<String, Object>> getEngines()","[24, 26]","{'A12': [(24, 26)]}",{'A12': 1.0},A12,,"  public Map<String, Map<String, Object>> getEngines() {
    return engines;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/FunctionStats.java,FunctionStats,build,FunctionStats build(Object),"[30, 72]","{'A12': [(30, 31), (35, 35), (37, 37), (64, 72)], 'A1': [(32, 34), (36, 36), (38, 63)]}","{'A12': 0.3023255813953488, 'A1': 0.6976744186046512}",A1,,"    @Override
    public FunctionStats build(Object data) {
      if (data == null) return null;
      List list = (List) data;
      if (list.isEmpty()) return null;

      if (list.get(0) instanceof KeyValue) {

        Map<String, Object> runningScriptMap = null;
        Map<String, Map<String, Object>> enginesMap = null;

        for (KeyValue kv : (List<KeyValue>) list) {
          switch (BuilderFactory.STRING.build(kv.getKey())) {
            case ""running_script"":
              runningScriptMap = BuilderFactory.ENCODED_OBJECT_MAP.build(kv.getValue());
              break;
            case ""engines"":
              List<KeyValue> ilist = (List<KeyValue>) kv.getValue();
              enginesMap = new LinkedHashMap<>(ilist.size());
              for (KeyValue ikv : (List<KeyValue>) kv.getValue()) {
                enginesMap.put(BuilderFactory.STRING.build(ikv.getKey()),
                    BuilderFactory.ENCODED_OBJECT_MAP.build(ikv.getValue()));
              }
              break;
          }
        }

        return new FunctionStats(runningScriptMap, enginesMap);
      }

      Map<String, Object> runningScriptMap = list.get(1) == null ? null
          : BuilderFactory.ENCODED_OBJECT_MAP.build(list.get(1));

      List<Object> enginesList = (List<Object>) list.get(3);

      Map<String, Map<String, Object>> enginesMap = new LinkedHashMap<>(enginesList.size() / 2);
      for (int i = 0; i < enginesList.size(); i += 2) {
        enginesMap.put(BuilderFactory.STRING.build(enginesList.get(i)),
            BuilderFactory.ENCODED_OBJECT_MAP.build(enginesList.get(i + 1)));
      }

      return new FunctionStats(runningScriptMap, enginesMap);
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupInfo.java,StreamGroupInfo,getName,String getName(),"[38, 40]","{'A25': [(38, 40)]}",{'A25': 1.0},A25,,"  public String getName() {
    return name;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupInfo.java,StreamGroupInfo,getConsumers,long getConsumers(),"[42, 44]","{'A25': [(42, 44)]}",{'A25': 1.0},A25,,"  public long getConsumers() {
    return consumers;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupInfo.java,StreamGroupInfo,getPending,long getPending(),"[46, 48]","{'A25': [(46, 48)]}",{'A25': 1.0},A25,,"  public long getPending() {
    return pending;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupInfo.java,StreamGroupInfo,getLastDeliveredId,StreamEntryID getLastDeliveredId(),"[50, 52]","{'A25': [(50, 52)]}",{'A25': 1.0},A25,,"  public StreamEntryID getLastDeliveredId() {
    return lastDeliveredId;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupInfo.java,StreamGroupInfo,getGroupInfo,"Map<String, Object> getGroupInfo()","[57, 59]","{'A1': [(58, 59)], 'A25': [(57, 57)]}","{'A1': 0.6666666666666666, 'A25': 0.3333333333333333}",A1,,"  public Map<String, Object> getGroupInfo() {
    return groupInfo;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingSummary.java,StreamPendingSummary,getTotal,long getTotal(),"[24, 26]","{'A14': [(24, 26)]}",{'A14': 1.0},A14,,"  public long getTotal() {
    return total;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingSummary.java,StreamPendingSummary,getMinId,StreamEntryID getMinId(),"[28, 30]","{'A14': [(28, 30)]}",{'A14': 1.0},A14,,"  public StreamEntryID getMinId() {
    return minId;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingSummary.java,StreamPendingSummary,getMaxId,StreamEntryID getMaxId(),"[32, 34]","{'A14': [(32, 34)]}",{'A14': 1.0},A14,,"  public StreamEntryID getMaxId() {
    return maxId;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingSummary.java,StreamPendingSummary,getConsumerMessageCount,"Map<String, Long> getConsumerMessageCount()","[36, 38]","{'A14': [(36, 38)]}",{'A14': 1.0},A14,,"  public Map<String, Long> getConsumerMessageCount() {
    return consumerMessageCount;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupFullInfo.java,StreamGroupFullInfo,getName,String getName(),"[45, 47]","{'A26': [(45, 47)]}",{'A26': 1.0},A26,,"  public String getName() {
    return name;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupFullInfo.java,StreamGroupFullInfo,getConsumers,List<StreamConsumerFullInfo> getConsumers(),"[49, 51]","{'A26': [(49, 51)]}",{'A26': 1.0},A26,,"  public List<StreamConsumerFullInfo> getConsumers() {
    return consumers;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupFullInfo.java,StreamGroupFullInfo,getPending,List<List<Object>> getPending(),"[53, 55]","{'A26': [(54, 55)], 'A1': [(53, 53)]}","{'A26': 0.6666666666666666, 'A1': 0.3333333333333333}",A26,,"  public List<List<Object>> getPending() {
    return pending;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupFullInfo.java,StreamGroupFullInfo,getLastDeliveredId,StreamEntryID getLastDeliveredId(),"[57, 59]","{'A26': [(57, 59)]}",{'A26': 1.0},A26,,"  public StreamEntryID getLastDeliveredId() {
    return lastDeliveredId;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupFullInfo.java,StreamGroupFullInfo,getGroupFullInfo,"Map<String, Object> getGroupFullInfo()","[64, 66]","{'A26': [(64, 66)]}",{'A26': 1.0},A26,,"  public Map<String, Object> getGroupFullInfo() {
    return groupFullInfo;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamGroupFullInfo.java,StreamGroupFullInfo,getPelCount,Long getPelCount(),"[68, 70]","{'A26': [(68, 70)]}",{'A26': 1.0},A26,,"  public Long getPelCount() {
    return pelCount;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LatencyHistoryInfo.java,LatencyHistoryInfo,getTimestamp,long getTimestamp(),"[19, 21]","{'A17': [(19, 21)]}",{'A17': 1.0},A17,,"    public long getTimestamp() {
        return timestamp;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LatencyHistoryInfo.java,LatencyHistoryInfo,getLatency,long getLatency(),"[23, 25]","{'A17': [(23, 25)]}",{'A17': 1.0},A17,,"    public long getLatency() {
        return latency;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LatencyHistoryInfo.java,LatencyHistoryInfo,build,LatencyHistoryInfo build(Object),"[28, 36]","{'A17': [(28, 36)]}",{'A17': 1.0},A17,,"        @Override
        public LatencyHistoryInfo build(Object data) {
            List<Object> commandData = (List<Object>) data;

            long timestamp = LONG.build(commandData.get(0));
            long latency = LONG.build(commandData.get(1));

            return new LatencyHistoryInfo(timestamp, latency);
        }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LCSMatchResult.java,LCSMatchResult,getMatchString,String getMatchString(),"[42, 44]","{'A3': [(42, 44)]}",{'A3': 1.0},A3,,"    public String getMatchString() {
        return matchString;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LCSMatchResult.java,LCSMatchResult,getMatches,List<MatchedPosition> getMatches(),"[46, 48]","{'A3': [(46, 48)]}",{'A3': 1.0},A3,,"    public List<MatchedPosition> getMatches() {
        return matches;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LCSMatchResult.java,LCSMatchResult,getLen,long getLen(),"[50, 52]","{'A3': [(50, 52)]}",{'A3': 1.0},A3,,"    public long getLen() {
        return len;
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LCSMatchResult.java,LCSMatchResult.MatchedPosition,getA,Position getA(),"[71, 73]","{'A3': [(71, 73)]}",{'A3': 1.0},A3,,"        public Position getA() {
            return a;
        }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LCSMatchResult.java,LCSMatchResult.MatchedPosition,getB,Position getB(),"[75, 77]","{'A3': [(75, 77)]}",{'A3': 1.0},A3,,"        public Position getB() {
            return b;
        }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LCSMatchResult.java,LCSMatchResult.MatchedPosition,getMatchLen,long getMatchLen(),"[79, 81]","{'A3': [(79, 81)]}",{'A3': 1.0},A3,,"        public long getMatchLen() {
            return matchLen;
        }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LCSMatchResult.java,LCSMatchResult.Position,getStart,long getStart(),"[98, 100]","{'A3': [(98, 100)]}",{'A3': 1.0},A3,,"        public long getStart() {
            return start;
        }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LCSMatchResult.java,LCSMatchResult.Position,getEnd,long getEnd(),"[102, 104]","{'A3': [(102, 104)]}",{'A3': 1.0},A3,,"        public long getEnd() {
            return end;
        }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LibraryInfo.java,LibraryInfo,getLibraryName,String getLibraryName(),"[34, 36]","{'A12': [(34, 36)]}",{'A12': 1.0},A12,,"  public String getLibraryName() {
    return libraryName;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LibraryInfo.java,LibraryInfo,getEngine,String getEngine(),"[38, 40]","{'A12': [(38, 40)]}",{'A12': 1.0},A12,,"  public String getEngine() {
    return engine;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LibraryInfo.java,LibraryInfo,getFunctions,"List<Map<String, Object>> getFunctions()","[42, 44]","{'A12': [(42, 44)]}",{'A12': 1.0},A12,,"  public List<Map<String, Object>> getFunctions() {
    return functions;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LibraryInfo.java,LibraryInfo,getLibraryCode,String getLibraryCode(),"[46, 48]","{'A12': [(46, 48)]}",{'A12': 1.0},A12,,"  public String getLibraryCode() {
    return libraryCode;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LibraryInfo.java,LibraryInfo,build,LibraryInfo build(Object),"[51, 88]","{'A12': [(51, 52), (82, 82), (84, 85), (87, 88)], 'A1': [(53, 81), (83, 83), (86, 86)]}","{'A12': 0.18421052631578946, 'A1': 0.8157894736842105}",A1,,"    @Override
    public LibraryInfo build(Object data) {
      if (data == null) return null;
      List list = (List) data;
      if (list.isEmpty()) return null;

      if (list.get(0) instanceof KeyValue) {
        String libname = null, enginename = null, librarycode = null;
        List<Map<String, Object>> functions = null;
        for (KeyValue kv : (List<KeyValue>) list) {
          switch (BuilderFactory.STRING.build(kv.getKey())) {
            case ""library_name"":
              libname = BuilderFactory.STRING.build(kv.getValue());
              break;
            case ""engine"":
              enginename = BuilderFactory.STRING.build(kv.getValue());
              break;
            case ""functions"":
              functions = ((List<Object>) kv.getValue()).stream().map(o -> ENCODED_OBJECT_MAP.build(o)).collect(Collectors.toList());
              break;
            case ""library_code"":
              librarycode = BuilderFactory.STRING.build(kv.getValue());
              break;
          }
        }
        return new LibraryInfo(libname, enginename, functions, librarycode);
      }

      String libname = STRING.build(list.get(1));
      String engine = STRING.build(list.get(3));
      List<Object> rawFunctions = (List<Object>) list.get(5);
      List<Map<String, Object>> functions = rawFunctions.stream().map(o -> ENCODED_OBJECT_MAP.build(o)).collect(Collectors.toList());
      if (list.size() <= 6) {
        return new LibraryInfo(libname, engine, functions);
      }
      String code = STRING.build(list.get(7));
      return new LibraryInfo(libname, engine, functions, code);
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/LibraryInfo.java,LibraryInfo,build,List<LibraryInfo> build(Object),"[98, 102]","{'A1': [(98, 102)]}",{'A1': 1.0},A1,,"    @Override
    public List<LibraryInfo> build(Object data) {
      List<Object> list = (List<Object>) data;
      return list.stream().map(o -> LibraryInfo.LIBRARY_INFO.build(o)).collect(Collectors.toList());
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,setDistance,void setDistance(double),"[20, 22]","{'A7': [(20, 22)]}",{'A7': 1.0},A7,,"  public void setDistance(double distance) {
    this.distance = distance;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,setCoordinate,void setCoordinate(GeoCoordinate),"[24, 26]","{'A7': [(24, 26)]}",{'A7': 1.0},A7,,"  public void setCoordinate(GeoCoordinate coordinate) {
    this.coordinate = coordinate;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,setRawScore,void setRawScore(long),"[28, 30]","{'A1': [(28, 30)]}",{'A1': 1.0},A1,,"  public void setRawScore(long rawScore) {
    this.rawScore = rawScore;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,getMember,byte[] getMember(),"[32, 34]","{'A7': [(32, 34)]}",{'A7': 1.0},A7,,"  public byte[] getMember() {
    return member;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,getMemberByString,String getMemberByString(),"[36, 38]","{'A7': [(36, 38)]}",{'A7': 1.0},A7,,"  public String getMemberByString() {
    return SafeEncoder.encode(member);
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,getDistance,double getDistance(),"[44, 46]","{'A7': [(44, 46)]}",{'A7': 1.0},A7,,"  public double getDistance() {
    return distance;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,getCoordinate,GeoCoordinate getCoordinate(),"[51, 53]","{'A7': [(51, 53)]}",{'A7': 1.0},A7,,"  public GeoCoordinate getCoordinate() {
    return coordinate;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,getRawScore,long getRawScore(),"[60, 62]","{'A16': [(60, 62)]}",{'A16': 1.0},A16,,"  public long getRawScore() {
    return rawScore;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,equals,boolean equals(Object),"[64, 78]","{'A12': [(64, 78)]}",{'A12': 1.0},A12,,"  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }

    if (!(obj instanceof GeoRadiusResponse)) {
      return false;
    }

    GeoRadiusResponse response = (GeoRadiusResponse) obj;
    return Double.compare(distance, response.getDistance()) == 0
            && rawScore == response.getRawScore() && coordinate.equals(response.coordinate)
            && Arrays.equals(member, response.getMember());
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/GeoRadiusResponse.java,GeoRadiusResponse,hashCode,int hashCode(),"[80, 88]","{'A1': [(80, 88)]}",{'A1': 1.0},A1,,"  @Override
  public int hashCode() {
    int hash = 7;
    hash = 67 * hash + Arrays.hashCode(this.member);
    hash = 67 * hash + (int) (Double.doubleToLongBits(this.distance) ^ (Double.doubleToLongBits(this.distance) >>> 32));
    hash = 67 * hash + Objects.hashCode(this.coordinate);
    hash = 67 * hash + (int) (this.rawScore ^ (this.rawScore >>> 32));
    return hash;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandDocument.java,CommandDocument,getSummary,String getSummary(),"[59, 61]","{'A12': [(59, 61)]}",{'A12': 1.0},A12,,"  public String getSummary() {
    return summary;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandDocument.java,CommandDocument,getSince,String getSince(),"[63, 65]","{'A12': [(63, 65)]}",{'A12': 1.0},A12,,"  public String getSince() {
    return since;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandDocument.java,CommandDocument,getGroup,String getGroup(),"[67, 69]","{'A12': [(67, 69)]}",{'A12': 1.0},A12,,"  public String getGroup() {
    return group;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandDocument.java,CommandDocument,getComplexity,String getComplexity(),"[71, 73]","{'A12': [(71, 73)]}",{'A12': 1.0},A12,,"  public String getComplexity() {
    return complexity;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandDocument.java,CommandDocument,getHistory,List<String> getHistory(),"[75, 77]","{'A12': [(75, 77)]}",{'A12': 1.0},A12,,"  public List<String> getHistory() {
    return history;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/CommandDocument.java,CommandDocument,build,CommandDocument build(Object),"[81, 97]","{'A12': [(81, 97)]}",{'A12': 1.0},A12,,"    @Override
    public CommandDocument build(Object data) {
      List<Object> commandData = (List<Object>) data;
      String summary = STRING.build(commandData.get(1));
      String since = STRING.build(commandData.get(3));
      String group = STRING.build(commandData.get(5));
      String complexity = STRING.build(commandData.get(7));
      List<String> history = null;
      if (STRING.build(commandData.get(8)).equals(""history"")) {
        List<List<Object>> rawHistory = (List<List<Object>>) commandData.get(9);
        history = new ArrayList<>(rawHistory.size());
        for (List<Object> timePoint : rawHistory) {
          history.add(STRING.build(timePoint.get(0)) + "": "" + STRING.build(timePoint.get(1)));
        }
      }
      return new CommandDocument(summary, since, group, complexity, history);
    }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardInfo.java,ClusterShardInfo,getSlots,List<List<Long>> getSlots(),"[32, 34]","{'A18': [(32, 34)]}",{'A18': 1.0},A18,,"  public List<List<Long>> getSlots() {
    return slots;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardInfo.java,ClusterShardInfo,getNodes,List<ClusterShardNodeInfo> getNodes(),"[36, 38]","{'A18': [(36, 38)]}",{'A18': 1.0},A18,,"  public List<ClusterShardNodeInfo> getNodes() {
    return nodes;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ClusterShardInfo.java,ClusterShardInfo,getClusterShardInfo,"Map<String, Object> getClusterShardInfo()","[40, 42]","{'A18': [(40, 42)]}",{'A18': 1.0},A18,,"  public Map<String, Object> getClusterShardInfo() {
    return clusterShardInfo;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ScanResult.java,ScanResult,getCursor,String getCursor(),"[25, 27]","{'A7': [(25, 27)]}",{'A7': 1.0},A7,,"  public String getCursor() {
    return SafeEncoder.encode(cursor);
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ScanResult.java,ScanResult,isCompleteIteration,boolean isCompleteIteration(),"[33, 35]","{'A56': [(33, 35)]}",{'A56': 1.0},A56,,"  public boolean isCompleteIteration() {
    return ScanParams.SCAN_POINTER_START.equals(getCursor());
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ScanResult.java,ScanResult,getCursorAsBytes,byte[] getCursorAsBytes(),"[37, 39]","{'A7': [(37, 39)]}",{'A7': 1.0},A7,,"  public byte[] getCursorAsBytes() {
    return cursor;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/ScanResult.java,ScanResult,getResult,List<T> getResult(),"[45, 47]","{'A7': [(45, 47)]}",{'A7': 1.0},A7,,"  public List<T> getResult() {
    return results;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingEntry.java,StreamPendingEntry,getID,StreamEntryID getID(),"[24, 26]","{'A22': [(24, 26)]}",{'A22': 1.0},A22,,"  public StreamEntryID getID() {
    return id;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingEntry.java,StreamPendingEntry,getIdleTime,long getIdleTime(),"[28, 30]","{'A22': [(28, 30)]}",{'A22': 1.0},A22,,"  public long getIdleTime() {
    return idleTime;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingEntry.java,StreamPendingEntry,getDeliveredTimes,long getDeliveredTimes(),"[32, 34]","{'A22': [(32, 34)]}",{'A22': 1.0},A22,,"  public long getDeliveredTimes() {
    return deliveredTimes;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingEntry.java,StreamPendingEntry,getConsumerName,String getConsumerName(),"[36, 38]","{'A22': [(36, 38)]}",{'A22': 1.0},A22,,"  public String getConsumerName() {
    return consumerName;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingEntry.java,StreamPendingEntry,toString,String toString(),"[40, 44]","{'A1': [(42, 43)], 'A22': [(40, 41), (44, 44)]}","{'A1': 0.4, 'A22': 0.6}",A22,,"  @Override
  public String toString() {
    return this.id + "" "" + this.consumerName + "" idle:"" + this.idleTime + "" times:""
        + this.deliveredTimes;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingEntry.java,StreamPendingEntry,writeObject,void writeObject(java.io.ObjectOutputStream),"[46, 51]","{'A1': [(46, 46)], 'A22': [(47, 51)]}","{'A1': 0.16666666666666666, 'A22': 0.8333333333333334}",A22,,"  private void writeObject(java.io.ObjectOutputStream out) throws IOException {
    out.writeUnshared(this.id);
    out.writeUTF(this.consumerName);
    out.writeLong(idleTime);
    out.writeLong(this.deliveredTimes);
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamPendingEntry.java,StreamPendingEntry,readObject,void readObject(java.io.ObjectInputStream),"[53, 58]","{'A1': [(53, 53)], 'A22': [(54, 58)]}","{'A1': 0.16666666666666666, 'A22': 0.8333333333333334}",A22,,"  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
    this.id = (StreamEntryID) in.readUnshared();
    this.consumerName = in.readUTF();
    this.idleTime = in.readLong();
    this.deliveredTimes = in.readLong();
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,joinStrings,String joinStrings(List<String>),"[57, 61]","{'A1': [(57, 60)], 'A20': [(61, 61)]}","{'A1': 0.8, 'A20': 0.2}",A1,,"  private static String joinStrings(List<String> list) {
    StringJoiner joiner = new StringJoiner("" "");
    list.forEach(s -> joiner.add(s));
    return joiner.toString();
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getFlags,List<String> getFlags(),"[63, 65]","{'A20': [(63, 65)]}",{'A20': 1.0},A20,,"  public List<String> getFlags() {
    return flags;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getPassword,List<String> getPassword(),"[70, 73]","{'A1': [(70, 72)], 'A20': [(73, 73)]}","{'A1': 0.75, 'A20': 0.25}",A1,,"  @Deprecated
  public List<String> getPassword() {
    return passwords;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getPasswords,List<String> getPasswords(),"[75, 77]","{'A1': [(75, 77)]}",{'A1': 1.0},A1,,"  public List<String> getPasswords() {
    return passwords;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getCommands,String getCommands(),"[79, 81]","{'A1': [(79, 80)], 'A20': [(81, 81)]}","{'A1': 0.6666666666666666, 'A20': 0.3333333333333333}",A1,,"  public String getCommands() {
    return commands;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getUserInfo,"Map<String, Object> getUserInfo()","[86, 88]","{'A1': [(86, 87)], 'A20': [(88, 88)]}","{'A1': 0.6666666666666666, 'A20': 0.3333333333333333}",A1,,"  public Map<String, Object> getUserInfo() {
    return userInfo;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getKeys,String getKeys(),"[90, 92]","{'A1': [(90, 91)], 'A26': [(92, 92)]}","{'A1': 0.6666666666666666, 'A26': 0.3333333333333333}",A1,,"  public String getKeys() {
    return keys;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getKeysList,List<String> getKeysList(),"[94, 96]","{'A1': [(94, 95)], 'A26': [(96, 96)]}","{'A1': 0.6666666666666666, 'A26': 0.3333333333333333}",A1,,"  public List<String> getKeysList() {
    return keysList;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getChannelsList,List<String> getChannelsList(),"[98, 100]","{'A1': [(98, 100)]}",{'A1': 1.0},A1,,"  public List<String> getChannelsList() {
    return channelsList;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getChannels,String getChannels(),"[102, 104]","{'A1': [(102, 103)], 'A20': [(104, 104)]}","{'A1': 0.6666666666666666, 'A20': 0.3333333333333333}",A1,,"  public String getChannels() {
    return channels;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,getSelectors,List<String> getSelectors(),"[106, 108]","{'A1': [(106, 107)], 'A20': [(108, 108)]}","{'A1': 0.6666666666666666, 'A20': 0.3333333333333333}",A1,,"  public List<String> getSelectors() {
    return selectors;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/AccessControlUser.java,AccessControlUser,toString,String toString(),"[110, 115]","{'A1': [(112, 114)], 'A20': [(110, 111), (115, 115)]}","{'A1': 0.5, 'A20': 0.5}",A1,,"  @Override
  public String toString() {
    return ""AccessControlUser{"" + ""flags="" + flags + "", passwords="" + passwords
        + "", commands='"" + commands + ""', keys='"" + keys + ""', channels='"" + channels
        + ""', selectors="" + selectors + ""}"";
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamFullInfo.java,StreamFullInfo,getLength,long getLength(),"[47, 49]","{'A26': [(47, 49)]}",{'A26': 1.0},A26,,"  public long getLength() {
    return length;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamFullInfo.java,StreamFullInfo,getRadixTreeKeys,long getRadixTreeKeys(),"[51, 53]","{'A26': [(51, 53)]}",{'A26': 1.0},A26,,"  public long getRadixTreeKeys() {
    return radixTreeKeys;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamFullInfo.java,StreamFullInfo,getRadixTreeNodes,long getRadixTreeNodes(),"[55, 57]","{'A26': [(55, 57)]}",{'A26': 1.0},A26,,"  public long getRadixTreeNodes() {
    return radixTreeNodes;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamFullInfo.java,StreamFullInfo,getGroups,List<StreamGroupFullInfo> getGroups(),"[59, 61]","{'A26': [(59, 61)]}",{'A26': 1.0},A26,,"  public List<StreamGroupFullInfo> getGroups() {
    return groups;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamFullInfo.java,StreamFullInfo,getLastGeneratedId,StreamEntryID getLastGeneratedId(),"[63, 65]","{'A26': [(63, 65)]}",{'A26': 1.0},A26,,"  public StreamEntryID getLastGeneratedId() {
    return lastGeneratedId;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamFullInfo.java,StreamFullInfo,getEntries,List<StreamEntry> getEntries(),"[67, 69]","{'A26': [(67, 69)]}",{'A26': 1.0},A26,,"  public List<StreamEntry> getEntries() {
    return entries;
  }
"
redis.clients.jedis.resps,../projects/jedis/src/main/java/redis/clients/jedis/resps/StreamFullInfo.java,StreamFullInfo,getStreamFullInfo,"Map<String, Object> getStreamFullInfo()","[71, 73]","{'A26': [(71, 73)]}",{'A26': 1.0},A26,,"  public Map<String, Object> getStreamFullInfo() {
    return streamFullInfo;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,clear,void clear(),"[10, 13]","{'A4': [(10, 13)]}",{'A4': 1.0},A4,,"    @Override
    public void clear() {
        internalMap.clear();
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,containsKey,boolean containsKey(Object),"[15, 19]","{'A4': [(15, 19)]}",{'A4': 1.0},A4,,"    @Override
    public boolean containsKey(Object key) {
        if (key instanceof byte[]) return internalMap.containsKey(new ByteArrayWrapper((byte[]) key));
        return internalMap.containsKey(key);
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,containsValue,boolean containsValue(Object),"[21, 24]","{'A4': [(21, 24)]}",{'A4': 1.0},A4,,"    @Override
    public boolean containsValue(Object value) {
        return internalMap.containsValue(value);
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,entrySet,"Set<Entry<byte[], T>> entrySet()","[26, 36]","{'A4': [(26, 36)]}",{'A4': 1.0},A4,,"    @Override
    public Set<Entry<byte[], T>> entrySet() {
        Iterator<Entry<ByteArrayWrapper, T>> iterator = internalMap.entrySet()
                .iterator();
        HashSet<Entry<byte[], T>> hashSet = new HashSet<>();
        while (iterator.hasNext()) {
            Entry<ByteArrayWrapper, T> entry = iterator.next();
            hashSet.add(new JedisByteEntry(entry.getKey().data, entry.getValue()));
        }
        return hashSet;
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,get,T get(Object),"[38, 42]","{'A4': [(38, 42)]}",{'A4': 1.0},A4,,"    @Override
    public T get(Object key) {
        if (key instanceof byte[]) return internalMap.get(new ByteArrayWrapper((byte[]) key));
        return internalMap.get(key);
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,isEmpty,boolean isEmpty(),"[44, 47]","{'A4': [(44, 47)]}",{'A4': 1.0},A4,,"    @Override
    public boolean isEmpty() {
        return internalMap.isEmpty();
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,keySet,Set<byte[]> keySet(),"[49, 57]","{'A4': [(49, 57)]}",{'A4': 1.0},A4,,"    @Override
    public Set<byte[]> keySet() {
        Set<byte[]> keySet = new HashSet<>();
        Iterator<ByteArrayWrapper> iterator = internalMap.keySet().iterator();
        while (iterator.hasNext()) {
            keySet.add(iterator.next().data);
        }
        return keySet;
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,put,"T put(byte[],T)","[59, 62]","{'A4': [(59, 62)]}",{'A4': 1.0},A4,,"    @Override
    public T put(byte[] key, T value) {
        return internalMap.put(new ByteArrayWrapper(key), value);
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,putAll,"void putAll(Map<? extends byte[], ? extends T>)","[64, 73]","{'A4': [(64, 73)]}",{'A4': 1.0},A4,,"    @Override
    @SuppressWarnings(""unchecked"")
    public void putAll(Map<? extends byte[], ? extends T> m) {
        Iterator<?> iterator = m.entrySet().iterator();
        while (iterator.hasNext()) {
            Entry<? extends byte[], ? extends T> next = (Entry<? extends byte[], ? extends T>) iterator
                    .next();
            internalMap.put(new ByteArrayWrapper(next.getKey()), next.getValue());
        }
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,remove,T remove(Object),"[75, 79]","{'A4': [(75, 79)]}",{'A4': 1.0},A4,,"    @Override
    public T remove(Object key) {
        if (key instanceof byte[]) return internalMap.remove(new ByteArrayWrapper((byte[]) key));
        return internalMap.remove(key);
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,size,int size(),"[81, 84]","{'A4': [(81, 84)]}",{'A4': 1.0},A4,,"    @Override
    public int size() {
        return internalMap.size();
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap,values,Collection<T> values(),"[86, 89]","{'A4': [(86, 89)]}",{'A4': 1.0},A4,,"    @Override
    public Collection<T> values() {
        return internalMap.values();
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap.ByteArrayWrapper,equals,boolean equals(Object),"[101, 108]","{'A4': [(101, 108)]}",{'A4': 1.0},A4,,"        @Override
        public boolean equals(Object other) {
            if (other == null) return false;
            if (other == this) return true;
            if (!(other instanceof ByteArrayWrapper)) return false;

            return Arrays.equals(data, ((ByteArrayWrapper) other).data);
        }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap.ByteArrayWrapper,hashCode,int hashCode(),"[110, 113]","{'A4': [(110, 113)]}",{'A4': 1.0},A4,,"        @Override
        public int hashCode() {
            return Arrays.hashCode(data);
        }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap.JedisByteEntry,getKey,byte[] getKey(),"[125, 128]","{'A4': [(125, 128)]}",{'A4': 1.0},A4,,"        @Override
        public byte[] getKey() {
            return this.key;
        }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap.JedisByteEntry,getValue,T getValue(),"[130, 133]","{'A4': [(130, 133)]}",{'A4': 1.0},A4,,"        @Override
        public T getValue() {
            return this.value;
        }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteMap.java,JedisByteMap.JedisByteEntry,setValue,T setValue(T),"[135, 139]","{'A4': [(135, 139)]}",{'A4': 1.0},A4,,"        @Override
        public T setValue(T value) {
            this.value = value;
            return value;
        }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisClusterHashTag.java,JedisClusterHashTag,getHashTag,String getHashTag(String),"[13, 15]","{'A55': [(13, 15)]}",{'A55': 1.0},A55,,"  public static String getHashTag(String key) {
    return extractHashTag(key, true);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisClusterHashTag.java,JedisClusterHashTag,isClusterCompliantMatchPattern,boolean isClusterCompliantMatchPattern(byte[]),"[17, 19]","{'A1': [(17, 19)]}",{'A1': 1.0},A1,,"  public static boolean isClusterCompliantMatchPattern(byte[] matchPattern) {
    return isClusterCompliantMatchPattern(SafeEncoder.encode(matchPattern));
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisClusterHashTag.java,JedisClusterHashTag,isClusterCompliantMatchPattern,boolean isClusterCompliantMatchPattern(String),"[21, 24]","{'A55': [(21, 24)]}",{'A55': 1.0},A55,,"  public static boolean isClusterCompliantMatchPattern(String matchPattern) {
    String tag = extractHashTag(matchPattern, false);
    return tag != null && !tag.isEmpty();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisClusterHashTag.java,JedisClusterHashTag,extractHashTag,"String extractHashTag(String,boolean)","[26, 35]","{'A55': [(26, 35)]}",{'A55': 1.0},A55,,"  private static String extractHashTag(String key, boolean returnKeyOnAbsence) {
    int s = key.indexOf(""{"");
    if (s > -1) {
      int e = key.indexOf(""}"", s + 1);
      if (e > -1 && e != s + 1) {
        return key.substring(s + 1, e);
      }
    }
    return returnKeyOnAbsence ? key : null;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/DoublePrecision.java,DoublePrecision,parseFloatingPointNumber,Double parseFloatingPointNumber(String),"[9, 36]","{'A1': [(9, 36)]}",{'A1': 1.0},A1,,"  public static Double parseFloatingPointNumber(String str) throws NumberFormatException {

    if (str == null) return null;

    try {

      return Double.valueOf(str);

    } catch (NumberFormatException e) {

      switch (str) {

        case ""inf"":
        case ""+inf"":
          return Double.POSITIVE_INFINITY;

        case ""-inf"":
          return Double.NEGATIVE_INFINITY;

        case ""nan"":
        case ""-nan"": // for some module commands // TODO: remove
          return Double.NaN;

        default:
          throw e;
      }
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/DoublePrecision.java,DoublePrecision,parseEncodedFloatingPointNumber,Double parseEncodedFloatingPointNumber(Object),"[38, 42]","{'A1': [(38, 42)]}",{'A1': 1.0},A1,,"  public static Double parseEncodedFloatingPointNumber(Object val) throws NumberFormatException {
    if (val == null) return null;
    else if (val instanceof Double) return (Double) val;
    else return parseFloatingPointNumber((String) val);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/IOUtils.java,IOUtils,closeQuietly,void closeQuietly(Socket),"[8, 17]","{'A7': [(8, 17)]}",{'A7': 1.0},A7,,"  public static void closeQuietly(Socket sock) {
    // It's same thing as Apache Commons - IOUtils.closeQuietly()
    if (sock != null) {
      try {
        sock.close();
      } catch (IOException e) {
        // ignored
      }
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/IOUtils.java,IOUtils,closeQuietly,void closeQuietly(AutoCloseable),"[19, 28]","{'A1': [(19, 28)]}",{'A1': 1.0},A1,,"  public static void closeQuietly(AutoCloseable resource) {
    // It's same thing as Apache Commons - IOUtils.closeQuietly()
    if (resource != null) {
      try {
        resource.close();
      } catch (Exception e) {
        // ignored
      }
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/LazyRawable.java,LazyRawable,setRaw,void setRaw(byte[]),"[9, 11]","{'A1': [(9, 11)]}",{'A1': 1.0},A1,,"  public void setRaw(byte[] raw) {
    this.raw = raw;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/LazyRawable.java,LazyRawable,getRaw,byte[] getRaw(),"[13, 16]","{'A1': [(13, 16)]}",{'A1': 1.0},A1,,"  @Override
  public byte[] getRaw() {
    return raw;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/Pool.java,Pool,close,void close(),"[23, 26]","{'A7': [(23, 26)]}",{'A7': 1.0},A7,,"  @Override
  public void close() {
    destroy();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/Pool.java,Pool,destroy,void destroy(),"[28, 34]","{'A1': [(28, 34)]}",{'A1': 1.0},A1,,"  public void destroy() {
    try {
      super.close();
    } catch (RuntimeException e) {
      throw new JedisException(""Could not destroy the pool"", e);
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/Pool.java,Pool,getResource,T getResource(),"[36, 44]","{'A1': [(38, 40), (42, 42)], 'A7': [(36, 37), (41, 41), (44, 44)], 'A92': [(43, 43)]}","{'A1': 0.4444444444444444, 'A7': 0.4444444444444444, 'A92': 0.1111111111111111}",A1,,"  public T getResource() {
    try {
      return super.borrowObject();
    } catch (JedisException je) {
      throw je;
    } catch (Exception e) {
      throw new JedisException(""Could not get a resource from the pool"", e);
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/Pool.java,Pool,returnResource,void returnResource(T),"[46, 55]","{'A1': [(46, 49), (51, 51)], 'A2': [(54, 54)], 'A7': [(50, 50), (53, 53), (55, 55)], 'A37': [(52, 52)]}","{'A1': 0.5, 'A2': 0.1, 'A7': 0.3, 'A37': 0.1}",A1,,"  public void returnResource(final T resource) {
    if (resource == null) {
      return;
    }
    try {
      super.returnObject(resource);
    } catch (RuntimeException e) {
      throw new JedisException(""Could not return the resource to the pool"", e);
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/Pool.java,Pool,returnBrokenResource,void returnBrokenResource(T),"[57, 66]","{'A1': [(57, 59), (62, 62), (64, 64)], 'A2': [(65, 65)], 'A7': [(61, 61), (63, 63), (66, 66)], 'A128': [(60, 60)]}","{'A1': 0.5, 'A2': 0.1, 'A7': 0.3, 'A128': 0.1}",A1,,"  public void returnBrokenResource(final T resource) {
    if (resource == null) {
      return;
    }
    try {
      super.invalidateObject(resource);
    } catch (Exception e) {
      throw new JedisException(""Could not return the broken resource to the pool"", e);
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/Pool.java,Pool,addObjects,void addObjects(int),"[68, 77]","{'A1': [(68, 68), (72, 72)], 'A8': [(69, 71), (73, 77)]}","{'A1': 0.2, 'A8': 0.8}",A8,,"  @Override
  public void addObjects(int count) {
    try {
      for (int i = 0; i < count; i++) {
        addObject();
      }
    } catch (Exception e) {
      throw new JedisException(""Error trying to add idle objects"", e);
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,peek,boolean peek(byte),"[48, 52]","{'A1': [(48, 52)]}",{'A1': 1.0},A1,,"  @Experimental
  public boolean peek(byte b) throws JedisConnectionException {
    ensureFill(); // in current design, at least one reply is expected. so ensureFillSafe() is not necessary.
    return buf[count] == b;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readByte,byte readByte(),"[54, 57]","{'A7': [(54, 57)]}",{'A7': 1.0},A7,,"  public byte readByte() throws JedisConnectionException {
    ensureFill();
    return buf[count++];
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,ensureCrLf,void ensureCrLf(),"[59, 72]","{'A1': [(59, 72)]}",{'A1': 1.0},A1,,"  private void ensureCrLf() {
    final byte[] buf = this.buf;

    ensureFill();
    if (buf[count++] == '\r') {

      ensureFill();
      if (buf[count++] == '\n') {
        return;
      }
    }

    throw new JedisConnectionException(""Unexpected character!"");
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readLine,String readLine(),"[74, 100]","{'A121': [(92, 93), (97, 98)], 'A7': [(74, 91), (94, 94), (96, 96), (99, 100)], 'A103': [(95, 95)]}","{'A121': 0.14814814814814814, 'A7': 0.8148148148148148, 'A103': 0.037037037037037035}",A7,,"  public String readLine() {
    final StringBuilder sb = new StringBuilder();
    while (true) {
      ensureFill();

      byte b = buf[count++];
      if (b == '\r') {
        ensureFill(); // Must be one more byte

        byte c = buf[count++];
        if (c == '\n') {
          break;
        }
        sb.append((char) b);
        sb.append((char) c);
      } else {
        sb.append((char) b);
      }
    }

    final String reply = sb.toString();
    if (reply.isEmpty()) {
      throw new JedisConnectionException(""It seems like server has closed the connection."");
    }

    return reply;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readLineBytes,byte[] readLineBytes(),"[102, 135]","{'A7': [(102, 102), (104, 107), (110, 110), (112, 117), (119, 122), (124, 128), (130, 135)], 'A129': [(103, 103), (108, 109), (111, 111), (118, 118), (123, 123), (129, 129)]}","{'A7': 0.7941176470588235, 'A129': 0.20588235294117646}",A7,,"  public byte[] readLineBytes() {

    /*
     * This operation should only require one fill. In that typical case we optimize allocation and
     * copy of the byte array. In the edge case where more than one fill is required then we take a
     * slower path and expand a byte array output stream as is necessary.
     */

    ensureFill();

    int pos = count;
    final byte[] buf = this.buf;
    while (true) {
      if (pos == limit) {
        return readLineBytesSlowly();
      }

      if (buf[pos++] == '\r') {
        if (pos == limit) {
          return readLineBytesSlowly();
        }

        if (buf[pos++] == '\n') {
          break;
        }
      }
    }

    final int N = (pos - count) - 2;
    final byte[] line = new byte[N];
    System.arraycopy(buf, count, line, 0, N);
    count = pos;
    return line;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readLineBytesSlowly,byte[] readLineBytesSlowly(),"[142, 172]","{'A7': [(142, 172)]}",{'A7': 1.0},A7,,"  private byte[] readLineBytesSlowly() {
    ByteArrayOutputStream bout = null;
    while (true) {
      ensureFill();

      byte b = buf[count++];
      if (b == '\r') {
        ensureFill(); // Must be one more byte

        byte c = buf[count++];
        if (c == '\n') {
          break;
        }

        if (bout == null) {
          bout = new ByteArrayOutputStream(16);
        }

        bout.write(b);
        bout.write(c);
      } else {
        if (bout == null) {
          bout = new ByteArrayOutputStream(16);
        }

        bout.write(b);
      }
    }

    return bout == null ? new byte[0] : bout.toByteArray();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readNullCrLf,Object readNullCrLf(),"[174, 177]","{'A1': [(174, 177)]}",{'A1': 1.0},A1,,"  public Object readNullCrLf() {
    ensureCrLf();
    return null;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readBooleanCrLf,boolean readBooleanCrLf(),"[179, 194]","{'A1': [(179, 194)]}",{'A1': 1.0},A1,,"  public boolean readBooleanCrLf() {
    final byte[] buf = this.buf;

    ensureFill();
    final byte b = buf[count++];

    ensureCrLf();
    switch (b) {
      case 't':
        return true;
      case 'f':
        return false;
      default:
        throw new JedisConnectionException(""Unexpected character!"");
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readIntCrLf,int readIntCrLf(),"[196, 198]","{'A7': [(196, 198)]}",{'A7': 1.0},A7,,"  public int readIntCrLf() {
    return (int) readLongCrLf();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readLongCrLf,long readLongCrLf(),"[200, 229]","{'A121': [(226, 227)], 'A7': [(200, 201), (203, 203), (205, 207), (210, 216), (218, 225), (228, 229)], 'A129': [(202, 202), (204, 204), (208, 209), (217, 217)]}","{'A121': 0.06666666666666667, 'A7': 0.7666666666666667, 'A129': 0.16666666666666666}",A7,,"  public long readLongCrLf() {
    final byte[] buf = this.buf;

    ensureFill();

    final boolean isNeg = buf[count] == '-';
    if (isNeg) {
      ++count;
    }

    long value = 0;
    while (true) {
      ensureFill();

      final int b = buf[count++];
      if (b == '\r') {
        ensureFill();

        if (buf[count++] != '\n') {
          throw new JedisConnectionException(""Unexpected character!"");
        }

        break;
      } else {
        value = value * 10 + b - '0';
      }
    }

    return (isNeg ? -value : value);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readDoubleCrLf,double readDoubleCrLf(),"[231, 233]","{'A1': [(231, 233)]}",{'A1': 1.0},A1,,"  public double readDoubleCrLf() {
    return DoublePrecision.parseFloatingPointNumber(readLine());
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,readBigIntegerCrLf,BigInteger readBigIntegerCrLf(),"[235, 237]","{'A1': [(235, 237)]}",{'A1': 1.0},A1,,"  public BigInteger readBigIntegerCrLf() {
    return new BigInteger(readLine());
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,read,"int read(byte[],int,int)","[239, 247]","{'A7': [(240, 247)], 'A38': [(239, 239)]}","{'A7': 0.8888888888888888, 'A38': 0.1111111111111111}",A7,,"  @Override
  public int read(byte[] b, int off, int len) throws JedisConnectionException {
    ensureFill();

    final int length = Math.min(limit - count, len);
    System.arraycopy(buf, count, b, off, length);
    count += length;
    return length;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,ensureFill,void ensureFill(),"[253, 265]","{'A121': [(264, 264)], 'A7': [(253, 263), (265, 265)]}","{'A121': 0.07692307692307693, 'A7': 0.9230769230769231}",A7,,"  private void ensureFill() throws JedisConnectionException {
    if (count >= limit) {
      try {
        limit = in.read(buf);
        count = 0;
        if (limit == -1) {
          throw new JedisConnectionException(""Unexpected end of stream."");
        }
      } catch (IOException e) {
        throw new JedisConnectionException(e);
      }
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisInputStream.java,RedisInputStream,available,int available(),"[267, 272]","{'A1': [(267, 272)]}",{'A1': 1.0},A1,,"  @Override
  public int available() throws IOException {
    int availableInBuf = limit - count;
    int availableInSocket = this.in.available();
    return (availableInBuf > availableInSocket) ? availableInBuf : availableInSocket;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/PrefixedKeyArgumentPreProcessor.java,PrefixedKeyArgumentPreProcessor,actualKey,Object actualKey(Object),"[23, 26]","{'A1': [(23, 26)]}",{'A1': 1.0},A1,,"  @Override
  public Object actualKey(Object paramKey) {
    return prefixKey(paramKey, prefixString, prefixBytes);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/PrefixedKeyArgumentPreProcessor.java,PrefixedKeyArgumentPreProcessor,prefixKey,"Object prefixKey(Object,String,byte[])","[28, 39]","{'A1': [(28, 39)]}",{'A1': 1.0},A1,,"  private static Object prefixKey(Object key, String prefixString, byte[] prefixBytes) {
    if (key instanceof Rawable) {
      byte[] raw = ((Rawable) key).getRaw();
      return RawableFactory.from(prefixKeyWithBytes(raw, prefixBytes));
    } else if (key instanceof byte[]) {
      return prefixKeyWithBytes((byte[]) key, prefixBytes);
    } else if (key instanceof String) {
      String raw = (String) key;
      return prefixString + raw;
    }
    throw new IllegalArgumentException(""\"""" + key.toString() + ""\"" is not a valid argument."");
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/PrefixedKeyArgumentPreProcessor.java,PrefixedKeyArgumentPreProcessor,prefixKeyWithBytes,"byte[] prefixKeyWithBytes(byte[],byte[])","[41, 46]","{'A1': [(41, 46)]}",{'A1': 1.0},A1,,"  private static byte[] prefixKeyWithBytes(byte[] key, byte[] prefixBytes) {
    byte[] namespaced = new byte[prefixBytes.length + key.length];
    System.arraycopy(prefixBytes, 0, namespaced, 0, prefixBytes.length);
    System.arraycopy(key, 0, namespaced, prefixBytes.length, key.length);
    return namespaced;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/MurmurHash.java,MurmurHash,hash,"int hash(byte[],int)","[34, 36]","{'A7': [(34, 36)]}",{'A7': 1.0},A7,,"  public static int hash(byte[] data, int seed) {
    return hash(ByteBuffer.wrap(data), seed);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/MurmurHash.java,MurmurHash,hash,"int hash(byte[],int,int,int)","[46, 48]","{'A7': [(46, 48)]}",{'A7': 1.0},A7,,"  public static int hash(byte[] data, int offset, int length, int seed) {
    return hash(ByteBuffer.wrap(data, offset, length), seed);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/MurmurHash.java,MurmurHash,hash,"int hash(ByteBuffer,int)","[56, 93]","{'A2': [(76, 77), (85, 86), (90, 90)], 'A7': [(56, 75), (78, 84), (87, 89), (91, 93)]}","{'A2': 0.13157894736842105, 'A7': 0.868421052631579}",A7,,"  public static int hash(ByteBuffer buf, int seed) {
    // save byte order for later restoration
    ByteOrder byteOrder = buf.order();
    buf.order(ByteOrder.LITTLE_ENDIAN);

    int m = 0x5bd1e995;
    int r = 24;

    int h = seed ^ buf.remaining();

    int k;
    while (buf.remaining() >= 4) {
      k = buf.getInt();

      k *= m;
      k ^= k >>> r;
      k *= m;

      h *= m;
      h ^= k;
    }

    if (buf.remaining() > 0) {
      ByteBuffer finish = ByteBuffer.allocate(4).order(ByteOrder.LITTLE_ENDIAN);
      // for big-endian version, use this first:
      // finish.position(4-buf.remaining());
      finish.put(buf).rewind();
      h ^= finish.getInt();
      h *= m;
    }

    h ^= h >>> 13;
    h *= m;
    h ^= h >>> 15;

    buf.order(byteOrder);
    return h;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/MurmurHash.java,MurmurHash,hash64A,"long hash64A(byte[],int)","[95, 97]","{'A7': [(95, 97)]}",{'A7': 1.0},A7,,"  public static long hash64A(byte[] data, int seed) {
    return hash64A(ByteBuffer.wrap(data), seed);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/MurmurHash.java,MurmurHash,hash64A,"long hash64A(byte[],int,int,int)","[99, 101]","{'A7': [(99, 101)]}",{'A7': 1.0},A7,,"  public static long hash64A(byte[] data, int offset, int length, int seed) {
    return hash64A(ByteBuffer.wrap(data, offset, length), seed);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/MurmurHash.java,MurmurHash,hash64A,"long hash64A(ByteBuffer,int)","[103, 139]","{'A2': [(106, 106), (109, 109), (111, 111), (115, 115), (119, 119), (122, 123), (132, 132)], 'A7': [(103, 105), (107, 108), (110, 110), (112, 114), (116, 118), (120, 121), (124, 130), (133, 139)], 'A52': [(131, 131)]}","{'A2': 0.21621621621621623, 'A7': 0.7567567567567568, 'A52': 0.02702702702702703}",A7,,"  public static long hash64A(ByteBuffer buf, int seed) {
    ByteOrder byteOrder = buf.order();
    buf.order(ByteOrder.LITTLE_ENDIAN);

    long m = 0xc6a4a7935bd1e995L;
    int r = 47;

    long h = seed ^ (buf.remaining() * m);

    long k;
    while (buf.remaining() >= 8) {
      k = buf.getLong();

      k *= m;
      k ^= k >>> r;
      k *= m;

      h ^= k;
      h *= m;
    }

    if (buf.remaining() > 0) {
      ByteBuffer finish = ByteBuffer.allocate(8).order(ByteOrder.LITTLE_ENDIAN);
      // for big-endian version, do this first:
      // finish.position(8-buf.remaining());
      finish.put(buf).rewind();
      h ^= finish.getLong();
      h *= m;
    }

    h ^= h >>> r;
    h *= m;
    h ^= h >>> r;

    buf.order(byteOrder);
    return h;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/MurmurHash.java,MurmurHash,hash,long hash(byte[]),"[141, 144]","{'A7': [(142, 144)], 'A1': [(141, 141)]}","{'A7': 0.75, 'A1': 0.25}",A7,,"  @Override
  public long hash(byte[] key) {
    return hash64A(key, 0x1234ABCD);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/MurmurHash.java,MurmurHash,hash,long hash(String),"[146, 149]","{'A7': [(147, 149)], 'A1': [(146, 146)]}","{'A7': 0.75, 'A1': 0.25}",A7,,"  @Override
  public long hash(String key) {
    return hash(SafeEncoder.encode(key));
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/KeyValue.java,KeyValue,of,"KeyValue<K, V> of(K,V)","[11, 13]","{'A1': [(11, 13)]}",{'A1': 1.0},A1,,"  public static <K, V> KeyValue<K, V> of(K key, V value) {
    return new KeyValue<>(key, value);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java,JedisURIHelper,getHostAndPort,HostAndPort getHostAndPort(URI),"[43, 45]","{'A1': [(43, 45)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisURIHelperTest.java,"  public static HostAndPort getHostAndPort(URI uri) {
    return new HostAndPort(uri.getHost(), uri.getPort());
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java,JedisURIHelper,getUser,String getUser(URI),"[55, 65]","{'A1': [(60, 60)], 'A20': [(55, 59), (61, 65)]}","{'A1': 0.09090909090909091, 'A20': 0.9090909090909091}",A20,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisURIHelperTest.java,"  public static String getUser(URI uri) {
    String userInfo = uri.getUserInfo();
    if (userInfo != null) {
      String user = userInfo.split("":"", 2)[0];
      if (user.isEmpty()) {
        user = null; // return null user is not specified
      }
      return user;
    }
    return null;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java,JedisURIHelper,getPassword,String getPassword(URI),"[77, 87]","{'A7': [(77, 79), (85, 87)], 'A58': [(80, 84)]}","{'A7': 0.5454545454545454, 'A58': 0.45454545454545453}",A7,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisURIHelperTest.java,"  public static String getPassword(URI uri) {
    String userInfo = uri.getUserInfo();
    if (userInfo != null) {
      String[] userAndPassword = userInfo.split("":"", 2);
      if (userAndPassword.length < 2) {
        throw new IllegalArgumentException(""Password not provided in uri."");
      }
      return userAndPassword[1];
    }
    return null;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java,JedisURIHelper,getDBIndex,int getDBIndex(URI),"[89, 100]","{'A1': [(94, 94), (98, 100)], 'A7': [(90, 93), (95, 97)], 'A54': [(89, 89)]}","{'A1': 0.3333333333333333, 'A7': 0.5833333333333334, 'A54': 0.08333333333333333}",A7,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisURIHelperTest.java,"  public static int getDBIndex(URI uri) {
    String[] pathSplit = uri.getPath().split(""/"", 2);
    if (pathSplit.length > 1) {
      String dbIndexStr = pathSplit[1];
      if (dbIndexStr.isEmpty()) {
        return Protocol.DEFAULT_DATABASE;
      }
      return Integer.parseInt(dbIndexStr);
    } else {
      return Protocol.DEFAULT_DATABASE;
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java,JedisURIHelper,getRedisProtocol,RedisProtocol getRedisProtocol(URI),"[102, 120]","{'A1': [(102, 117), (119, 119)], 'A7': [(118, 118), (120, 120)]}","{'A1': 0.8947368421052632, 'A7': 0.10526315789473684}",A1,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisURIHelperTest.java,"  public static RedisProtocol getRedisProtocol(URI uri) {
    if (uri.getQuery() == null) return null;

    String[] params = uri.getQuery().split(""&"");
    for (String param : params) {
      int idx = param.indexOf(""="");
      if (idx < 0) continue;
      if (""protocol"".equals(param.substring(0, idx))) {
        String ver = param.substring(idx + 1);
        for (RedisProtocol proto : RedisProtocol.values()) {
          if (proto.version().equals(ver)) {
            return proto;
          }
        }
        throw new IllegalArgumentException(""Unknown protocol "" + ver);
      }
    }
    return null; // null (default) when not defined
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java,JedisURIHelper,isValid,boolean isValid(URI),"[122, 128]","{'A8': [(123, 123), (126, 126)], 'A54': [(122, 122), (124, 125), (127, 128)]}","{'A8': 0.2857142857142857, 'A54': 0.7142857142857143}",A54,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisURIHelperTest.java,"  public static boolean isValid(URI uri) {
    if (isEmpty(uri.getScheme()) || isEmpty(uri.getHost()) || uri.getPort() == -1) {
      return false;
    }

    return true;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java,JedisURIHelper,isEmpty,boolean isEmpty(String),"[130, 132]","{'A54': [(130, 132)]}",{'A54': 1.0},A54,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisURIHelperTest.java,"  private static boolean isEmpty(String value) {
    return value == null || value.trim().length() == 0;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java,JedisURIHelper,isRedisScheme,boolean isRedisScheme(URI),"[134, 136]","{'A1': [(134, 136)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisURIHelperTest.java,"  public static boolean isRedisScheme(URI uri) {
    return REDIS.equals(uri.getScheme());
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisURIHelper.java,JedisURIHelper,isRedisSSLScheme,boolean isRedisSSLScheme(URI),"[138, 140]","{'A1': [(138, 140)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisURIHelperTest.java,"  public static boolean isRedisSSLScheme(URI uri) {
    return REDISS.equals(uri.getScheme());
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisOutputStream.java,RedisOutputStream,flushBuffer,void flushBuffer(),"[55, 60]","{'A121': [(59, 59)], 'A7': [(55, 58), (60, 60)]}","{'A121': 0.16666666666666666, 'A7': 0.8333333333333334}",A7,,"  private void flushBuffer() throws IOException {
    if (count > 0) {
      out.write(buf, 0, count);
      count = 0;
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisOutputStream.java,RedisOutputStream,write,void write(byte),"[62, 67]","{'A121': [(65, 65)], 'A7': [(62, 64), (66, 67)]}","{'A121': 0.16666666666666666, 'A7': 0.8333333333333334}",A7,,"  public void write(final byte b) throws IOException {
    if (count == buf.length) {
      flushBuffer();
    }
    buf[count++] = b;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisOutputStream.java,RedisOutputStream,write,void write(byte[]),"[69, 72]","{'A7': [(70, 72)], 'A38': [(69, 69)]}","{'A7': 0.75, 'A38': 0.25}",A7,,"  @Override
  public void write(final byte[] b) throws IOException {
    write(b, 0, b.length);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisOutputStream.java,RedisOutputStream,write,"void write(byte[],int,int)","[74, 87]","{'A7': [(76, 85), (87, 87)], 'A6': [(75, 75)], 'A38': [(74, 74)], 'A52': [(86, 86)]}","{'A7': 0.7857142857142857, 'A6': 0.07142857142857142, 'A38': 0.07142857142857142, 'A52': 0.07142857142857142}",A7,,"  @Override
  public void write(final byte[] b, final int off, final int len) throws IOException {
    if (len >= buf.length) {
      flushBuffer();
      out.write(b, off, len);
    } else {
      if (len >= buf.length - count) {
        flushBuffer();
      }

      System.arraycopy(b, off, buf, count, len);
      count += len;
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisOutputStream.java,RedisOutputStream,writeCrLf,void writeCrLf(),"[89, 96]","{'A121': [(93, 93)], 'A7': [(89, 92), (94, 96)]}","{'A121': 0.125, 'A7': 0.875}",A7,,"  public void writeCrLf() throws IOException {
    if (2 >= buf.length - count) {
      flushBuffer();
    }

    buf[count++] = '\r';
    buf[count++] = '\n';
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisOutputStream.java,RedisOutputStream,writeIntCrLf,void writeIntCrLf(int),"[98, 134]","{'A121': [(102, 103), (107, 107), (111, 112), (115, 115), (122, 123), (130, 130)], 'A7': [(98, 101), (104, 106), (108, 110), (113, 114), (116, 121), (124, 129), (131, 134)]}","{'A121': 0.24324324324324326, 'A7': 0.7567567567567568}",A7,,"  public void writeIntCrLf(int value) throws IOException {
    if (value < 0) {
      write((byte) '-');
      value = -value;
    }

    int size = 0;
    while (value > sizeTable[size])
      size++;

    size++;
    if (size >= buf.length - count) {
      flushBuffer();
    }

    int q, r;
    int charPos = count + size;

    while (value >= 65536) {
      q = value / 100;
      r = value - ((q << 6) + (q << 5) + (q << 2));
      value = q;
      buf[--charPos] = DigitOnes[r];
      buf[--charPos] = DigitTens[r];
    }

    for (;;) {
      q = (value * 52429) >>> (16 + 3);
      r = value - ((q << 3) + (q << 1));
      buf[--charPos] = digits[r];
      value = q;
      if (value == 0) break;
    }
    count += size;

    writeCrLf();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/RedisOutputStream.java,RedisOutputStream,flush,void flush(),"[136, 140]","{'A7': [(137, 140)], 'A38': [(136, 136)]}","{'A7': 0.8, 'A38': 0.2}",A7,,"  @Override
  public void flush() throws IOException {
    flushBuffer();
    out.flush();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisClusterCRC16.java,JedisClusterCRC16,getSlot,int getSlot(String),"[35, 43]","{'A1': [(36, 41)], 'A7': [(35, 35), (42, 43)]}","{'A1': 0.6666666666666666, 'A7': 0.3333333333333333}",A1,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisClusterCRC16Test.java,"  public static int getSlot(String key) {
    if (key == null) {
      throw new NullPointerException(""Slot calculation of null is impossible"");
    }

    key = JedisClusterHashTag.getHashTag(key);
    // optimization with modulo operator with power of 2 equivalent to getCRC16(key) % 16384
    return getCRC16(key) & (16384 - 1);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisClusterCRC16.java,JedisClusterCRC16,getSlot,int getSlot(byte[]),"[45, 67]","{'A1': [(46, 49)], 'A7': [(45, 45), (50, 61), (63, 67)], 'A2': [(62, 62)]}","{'A1': 0.17391304347826086, 'A7': 0.782608695652174, 'A2': 0.043478260869565216}",A7,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisClusterCRC16Test.java,"  public static int getSlot(byte[] key) {
    if (key == null) {
      throw new NullPointerException(""Slot calculation of null is impossible"");
    }

    int s = -1;
    int e = -1;
    boolean sFound = false;
    for (int i = 0; i < key.length; i++) {
      if (key[i] == '{' && !sFound) {
        s = i;
        sFound = true;
      }
      if (key[i] == '}' && sFound) {
        e = i;
        break;
      }
    }
    if (s > -1 && e > -1 && e != s + 1) {
      return getCRC16(key, s + 1, e) & (16384 - 1);
    }
    return getCRC16(key) & (16384 - 1);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisClusterCRC16.java,JedisClusterCRC16,getCRC16,"int getCRC16(byte[],int,int)","[78, 85]","{'A7': [(78, 79), (81, 82), (84, 85)], 'A2': [(80, 80)], 'A130': [(83, 83)]}","{'A7': 0.75, 'A2': 0.125, 'A130': 0.125}",A7,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisClusterCRC16Test.java,"  public static int getCRC16(byte[] bytes, int s, int e) {
    int crc = 0x0000;

    for (int i = s; i < e; i++) {
      crc = ((crc << 8) ^ LOOKUP_TABLE[((crc >>> 8) ^ (bytes[i] & 0xFF)) & 0xFF]);
    }
    return crc & 0xFFFF;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisClusterCRC16.java,JedisClusterCRC16,getCRC16,int getCRC16(byte[]),"[87, 89]","{'A7': [(87, 89)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisClusterCRC16Test.java,"  public static int getCRC16(byte[] bytes) {
    return getCRC16(bytes, 0, bytes.length);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisClusterCRC16.java,JedisClusterCRC16,getCRC16,int getCRC16(String),"[91, 94]","{'A7': [(91, 94)]}",{'A7': 1.0},A7,../projects/jedis/src/test/java/redis/clients/jedis/util/JedisClusterCRC16Test.java,"  public static int getCRC16(String key) {
    byte[] bytesKey = SafeEncoder.encode(key);
    return getCRC16(bytesKey, 0, bytesKey.length);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/SafeEncoder.java,SafeEncoder,encodeMany,byte[][] encodeMany(),"[19, 25]","{'A2': [(23, 23)], 'A7': [(19, 22), (24, 25)]}","{'A2': 0.14285714285714285, 'A7': 0.8571428571428571}",A7,,"  public static byte[][] encodeMany(final String... strs) {
    byte[][] many = new byte[strs.length][];
    for (int i = 0; i < strs.length; i++) {
      many[i] = encode(strs[i]);
    }
    return many;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/SafeEncoder.java,SafeEncoder,encode,byte[] encode(String),"[27, 32]","{'A1': [(31, 31)], 'A2': [(30, 30)], 'A7': [(27, 27), (32, 32)], 'A119': [(28, 29)]}","{'A1': 0.16666666666666666, 'A2': 0.16666666666666666, 'A7': 0.3333333333333333, 'A119': 0.3333333333333333}",A7,,"  public static byte[] encode(final String str) {
    if (str == null) {
      throw new IllegalArgumentException(""null value cannot be sent to redis"");
    }
    return str.getBytes(DEFAULT_CHARSET);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/SafeEncoder.java,SafeEncoder,encode,String encode(byte[]),"[34, 36]","{'A1': [(35, 35)], 'A7': [(34, 34), (36, 36)]}","{'A1': 0.3333333333333333, 'A7': 0.6666666666666666}",A7,,"  public static String encode(final byte[] data) {
    return new String(data, DEFAULT_CHARSET);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/SafeEncoder.java,SafeEncoder,encodeObject,Object encodeObject(Object),"[44, 65]","{'A1': [(47, 53), (55, 55), (59, 59), (63, 63)], 'A20': [(44, 46), (54, 54), (56, 58), (60, 62), (64, 65)]}","{'A1': 0.45454545454545453, 'A20': 0.5454545454545454}",A20,,"  public static Object encodeObject(Object dataToEncode) {
    if (dataToEncode instanceof byte[]) {
      return SafeEncoder.encode((byte[]) dataToEncode);
    }

    if (dataToEncode instanceof KeyValue) {
      KeyValue keyValue = (KeyValue) dataToEncode;
      return new KeyValue<>(encodeObject(keyValue.getKey()), encodeObject(keyValue.getValue()));
    }

    if (dataToEncode instanceof List) {
      List arrayToDecode = (List) dataToEncode;
      List returnValueArray = new ArrayList(arrayToDecode.size());
      for (Object arrayEntry : arrayToDecode) {
        // recursive call and add to list
        returnValueArray.add(encodeObject(arrayEntry));
      }
      return returnValueArray;
    }

    return dataToEncode;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,clear,void clear(),"[16, 19]","{'A7': [(17, 19)], 'A8': [(16, 16)]}","{'A7': 0.75, 'A8': 0.25}",A7,,"  @Override
  public void clear() {
    internalMap.clear();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,containsKey,boolean containsKey(Object),"[21, 25]","{'A7': [(22, 25)], 'A8': [(21, 21)]}","{'A7': 0.8, 'A8': 0.2}",A7,,"  @Override
  public boolean containsKey(Object key) {
    if (key instanceof byte[]) return internalMap.containsKey(new ByteArrayWrapper((byte[]) key));
    return internalMap.containsKey(key);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,containsValue,boolean containsValue(Object),"[27, 30]","{'A7': [(28, 30)], 'A8': [(27, 27)]}","{'A7': 0.75, 'A8': 0.25}",A7,,"  @Override
  public boolean containsValue(Object value) {
    return internalMap.containsValue(value);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,entrySet,"Set<java.util.Map.Entry<byte[], byte[]>> entrySet()","[32, 42]","{'A2': [(40, 40)], 'A7': [(33, 35), (37, 39), (41, 42)], 'A22': [(36, 36)], 'A8': [(32, 32)]}","{'A2': 0.09090909090909091, 'A7': 0.7272727272727273, 'A22': 0.09090909090909091, 'A8': 0.09090909090909091}",A7,,"  @Override
  public Set<java.util.Map.Entry<byte[], byte[]>> entrySet() {
    Iterator<java.util.Map.Entry<ByteArrayWrapper, byte[]>> iterator = internalMap.entrySet()
        .iterator();
    HashSet<Entry<byte[], byte[]>> hashSet = new HashSet<>();
    while (iterator.hasNext()) {
      Entry<ByteArrayWrapper, byte[]> entry = iterator.next();
      hashSet.add(new JedisByteEntry(entry.getKey().data, entry.getValue()));
    }
    return hashSet;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,get,byte[] get(Object),"[44, 48]","{'A7': [(45, 48)], 'A8': [(44, 44)]}","{'A7': 0.8, 'A8': 0.2}",A7,,"  @Override
  public byte[] get(Object key) {
    if (key instanceof byte[]) return internalMap.get(new ByteArrayWrapper((byte[]) key));
    return internalMap.get(key);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,isEmpty,boolean isEmpty(),"[50, 53]","{'A7': [(51, 53)], 'A8': [(50, 50)]}","{'A7': 0.75, 'A8': 0.25}",A7,,"  @Override
  public boolean isEmpty() {
    return internalMap.isEmpty();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,keySet,Set<byte[]> keySet(),"[55, 63]","{'A2': [(61, 61)], 'A7': [(56, 56), (58, 60), (62, 63)], 'A22': [(57, 57)], 'A8': [(55, 55)]}","{'A2': 0.1111111111111111, 'A7': 0.6666666666666666, 'A22': 0.1111111111111111, 'A8': 0.1111111111111111}",A7,,"  @Override
  public Set<byte[]> keySet() {
    Set<byte[]> keySet = new HashSet<>();
    Iterator<ByteArrayWrapper> iterator = internalMap.keySet().iterator();
    while (iterator.hasNext()) {
      keySet.add(iterator.next().data);
    }
    return keySet;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,put,"byte[] put(byte[],byte[])","[65, 68]","{'A7': [(66, 68)], 'A8': [(65, 65)]}","{'A7': 0.75, 'A8': 0.25}",A7,,"  @Override
  public byte[] put(byte[] key, byte[] value) {
    return internalMap.put(new ByteArrayWrapper(key), value);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,putAll,"void putAll(Map<? extends byte[], ? extends byte[]>)","[70, 79]","{'A2': [(78, 78)], 'A7': [(71, 77), (79, 79)], 'A8': [(70, 70)]}","{'A2': 0.1, 'A7': 0.8, 'A8': 0.1}",A7,,"  @Override
  @SuppressWarnings(""unchecked"")
  public void putAll(Map<? extends byte[], ? extends byte[]> m) {
    Iterator<?> iterator = m.entrySet().iterator();
    while (iterator.hasNext()) {
      Entry<? extends byte[], ? extends byte[]> next = (Entry<? extends byte[], ? extends byte[]>) iterator
          .next();
      internalMap.put(new ByteArrayWrapper(next.getKey()), next.getValue());
    }
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,remove,byte[] remove(Object),"[81, 85]","{'A7': [(82, 85)], 'A8': [(81, 81)]}","{'A7': 0.8, 'A8': 0.2}",A7,,"  @Override
  public byte[] remove(Object key) {
    if (key instanceof byte[]) return internalMap.remove(new ByteArrayWrapper((byte[]) key));
    return internalMap.remove(key);
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,size,int size(),"[87, 90]","{'A7': [(88, 90)], 'A8': [(87, 87)]}","{'A7': 0.75, 'A8': 0.25}",A7,,"  @Override
  public int size() {
    return internalMap.size();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap,values,Collection<byte[]> values(),"[92, 95]","{'A7': [(93, 95)], 'A8': [(92, 92)]}","{'A7': 0.75, 'A8': 0.25}",A7,,"  @Override
  public Collection<byte[]> values() {
    return internalMap.values();
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap.ByteArrayWrapper,equals,boolean equals(Object),"[107, 114]","{'A2': [(114, 114)], 'A7': [(108, 108), (113, 113)], 'A38': [(107, 107)], 'A74': [(109, 112)]}","{'A2': 0.125, 'A7': 0.25, 'A38': 0.125, 'A74': 0.5}",A74,,"    @Override
    public boolean equals(Object other) {
      if (other == null) return false;
      if (other == this) return true;
      if (!(other instanceof ByteArrayWrapper)) return false;

      return Arrays.equals(data, ((ByteArrayWrapper) other).data);
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap.ByteArrayWrapper,hashCode,int hashCode(),"[116, 119]","{'A2': [(119, 119)], 'A7': [(117, 118)], 'A38': [(116, 116)]}","{'A2': 0.25, 'A7': 0.5, 'A38': 0.25}",A7,,"    @Override
    public int hashCode() {
      return Arrays.hashCode(data);
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap.JedisByteEntry,getKey,byte[] getKey(),"[131, 134]","{'A2': [(134, 134)], 'A7': [(132, 133)], 'A8': [(131, 131)]}","{'A2': 0.25, 'A7': 0.5, 'A8': 0.25}",A7,,"    @Override
    public byte[] getKey() {
      return this.key;
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap.JedisByteEntry,getValue,byte[] getValue(),"[136, 139]","{'A7': [(137, 139)], 'A8': [(136, 136)]}","{'A7': 0.75, 'A8': 0.25}",A7,,"    @Override
    public byte[] getValue() {
      return this.value;
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisByteHashMap.java,JedisByteHashMap.JedisByteEntry,setValue,byte[] setValue(byte[]),"[141, 145]","{'A2': [(145, 145)], 'A7': [(142, 144)], 'A8': [(141, 141)]}","{'A2': 0.2, 'A7': 0.6, 'A8': 0.2}",A7,,"    @Override
    public byte[] setValue(byte[] value) {
      this.value = value;
      return value;
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/ByteArrayComparator.java,ByteArrayComparator,compare,"int compare(byte[],byte[])","[8, 23]","{'A1': [(8, 23)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/util/ByteArrayComparatorTest.java,"  public static int compare(final byte[] val1, final byte[] val2) {
    int len1 = val1.length;
    int len2 = val2.length;
    int lmin = Math.min(len1, len2);

    for (int i = 0; i < lmin; i++) {
      byte b1 = val1[i];
      byte b2 = val2[i];
      if (b1 < b2) return -1;
      if (b1 > b2) return 1;
    }

    if (len1 < len2) return -1;
    if (len1 > len2) return 1;
    return 0;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/Hashing.java,,hash,long hash(String),"[15, 18]","{'A38': [(15, 15)], 'A7': [(16, 18)]}","{'A38': 0.25, 'A7': 0.75}",A7,,"    @Override
    public long hash(String key) {
      return hash(SafeEncoder.encode(key));
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/Hashing.java,,hash,long hash(byte[]),"[20, 36]","{'A2': [(30, 30)], 'A22': [(34, 34)], 'A38': [(20, 20)], 'A7': [(21, 26), (28, 29), (31, 33), (35, 36)], 'A131': [(27, 27)]}","{'A2': 0.058823529411764705, 'A22': 0.058823529411764705, 'A38': 0.058823529411764705, 'A7': 0.7647058823529411, 'A131': 0.058823529411764705}",A7,,"    @Override
    public long hash(byte[] key) {
      try {
        if (md5Holder.get() == null) {
          md5Holder.set(MessageDigest.getInstance(""MD5""));
        }
      } catch (NoSuchAlgorithmException e) {
        throw new IllegalStateException(""++++ no md5 algorithm found"");
      }
      MessageDigest md5 = md5Holder.get();

      md5.reset();
      md5.update(key);
      byte[] bKey = md5.digest();
      return ((long) (bKey[3] & 0xFF) << 24) | ((long) (bKey[2] & 0xFF) << 16)
          | ((long) (bKey[1] & 0xFF) << 8) | (long) (bKey[0] & 0xFF);
    }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisCommandIterationBase.java,JedisCommandIterationBase,isIterationCompleted,boolean isIterationCompleted(),"[44, 46]","{'A1': [(44, 46)]}",{'A1': 1.0},A1,,"  public final boolean isIterationCompleted() {
    return roundRobinCompleted;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisCommandIterationBase.java,JedisCommandIterationBase,nextBatch,B nextBatch(),"[54, 86]","{'A1': [(54, 86)]}",{'A1': 1.0},A1,,"  public final B nextBatch() {
    if (roundRobinCompleted) {
      throw new NoSuchElementException();
    }

    CommandArguments args;
    if (iterationCompleted) {
      connection = connections.poll();
      args = initCommandArguments();
    } else {
      args = nextCommandArguments(lastReply);
    }

    Object rawReply;
    if (connection.getValue() instanceof Connection) {
      rawReply = ((Connection) connection.getValue()).executeCommand(args);
    } else if (connection.getValue() instanceof Pool) {
      try (Connection c = ((Pool<Connection>) connection.getValue()).getResource()) {
        rawReply = c.executeCommand(args);
      }
    } else {
      throw new IllegalArgumentException(connection.getValue().getClass() + ""is not supported."");
    }

    lastReply = builder.build(rawReply);
    iterationCompleted = isNodeCompleted(lastReply);
    if (iterationCompleted) {
      if (connections.isEmpty()) {
        roundRobinCompleted = true;
      }
    }
    return lastReply;
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisCommandIterationBase.java,JedisCommandIterationBase,nextBatchList,Collection<D> nextBatchList(),"[90, 92]","{'A1': [(90, 92)]}",{'A1': 1.0},A1,,"  public final Collection<D> nextBatchList() {
    return convertBatchToData(nextBatch());
  }
"
redis.clients.jedis.util,../projects/jedis/src/main/java/redis/clients/jedis/util/JedisCommandIterationBase.java,JedisCommandIterationBase,collect,Collection<D> collect(Collection<D>),"[94, 99]","{'A1': [(94, 99)]}",{'A1': 1.0},A1,,"  public final Collection<D> collect(Collection<D> c) {
    while (!isIterationCompleted()) {
      c.addAll(nextBatchList());
    }
    return c;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,initializeSlotsCache,"void initializeSlotsCache(Set<HostAndPort>,JedisClientConfig)","[68, 96]","{'A1': [(68, 80), (82, 96)], 'A32': [(81, 81)]}","{'A1': 0.9655172413793104, 'A32': 0.034482758620689655}",A1,,"  private void initializeSlotsCache(Set<HostAndPort> startNodes, JedisClientConfig clientConfig) {
    if (startNodes.isEmpty()) {
      throw new JedisClusterOperationException(""No nodes to initialize cluster slots cache."");
    }

    ArrayList<HostAndPort> startNodeList = new ArrayList<>(startNodes);
    Collections.shuffle(startNodeList);

    JedisException firstException = null;
    for (HostAndPort hostAndPort : startNodeList) {
      try (Connection jedis = new Connection(hostAndPort, clientConfig)) {
        cache.discoverClusterNodesAndSlots(jedis);
        return;
      } catch (JedisException e) {
        if (firstException == null) {
          firstException = e;
        }
        // try next nodes
      }
    }

    if (System.getProperty(INIT_NO_ERROR_PROPERTY) != null) {
      return;
    }
    JedisClusterOperationException uninitializedException
        = new JedisClusterOperationException(""Could not initialize cluster slots cache."");
    uninitializedException.addSuppressed(firstException);
    throw uninitializedException;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,close,void close(),"[98, 101]","{'A1': [(98, 99), (101, 101)], 'A10': [(100, 100)]}","{'A1': 0.75, 'A10': 0.25}",A1,,"  @Override
  public void close() {
    cache.close();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,renewSlotCache,void renewSlotCache(),"[103, 105]","{'A1': [(103, 105)]}",{'A1': 1.0},A1,,"  public void renewSlotCache() {
    cache.renewClusterSlots(null);
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,renewSlotCache,void renewSlotCache(Connection),"[107, 109]","{'A1': [(107, 109)]}",{'A1': 1.0},A1,,"  public void renewSlotCache(Connection jedis) {
    cache.renewClusterSlots(jedis);
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,getNodes,"Map<String, ConnectionPool> getNodes()","[111, 113]","{'A1': [(111, 113)]}",{'A1': 1.0},A1,,"  public Map<String, ConnectionPool> getNodes() {
    return cache.getNodes();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,getNode,HostAndPort getNode(int),"[115, 117]","{'A1': [(115, 117)]}",{'A1': 1.0},A1,,"  public HostAndPort getNode(int slot) {
    return slot >= 0 ? cache.getSlotNode(slot) : null;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,getConnection,Connection getConnection(HostAndPort),"[119, 121]","{'A1': [(119, 121)]}",{'A1': 1.0},A1,,"  public Connection getConnection(HostAndPort node) {
    return node != null ? cache.setupNodeIfNotExist(node).getResource() : getConnection();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,getConnection,Connection getConnection(CommandArguments),"[123, 127]","{'A1': [(123, 127)]}",{'A1': 1.0},A1,,"  @Override
  public Connection getConnection(CommandArguments args) {
    final int slot = ((ClusterCommandArguments) args).getCommandHashSlot();
    return slot >= 0 ? getConnectionFromSlot(slot) : getConnection();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,getReplicaConnection,Connection getReplicaConnection(CommandArguments),"[129, 132]","{'A33': [(129, 132)]}",{'A33': 1.0},A33,,"  public Connection getReplicaConnection(CommandArguments args) {
    final int slot = ((ClusterCommandArguments) args).getCommandHashSlot();
    return slot >= 0 ? getReplicaConnectionFromSlot(slot) : getConnection();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,getConnection,Connection getConnection(),"[134, 168]","{'A1': [(134, 168)]}",{'A1': 1.0},A1,,"  @Override
  public Connection getConnection() {
    // In antirez's redis-rb-cluster implementation, getRandomConnection always return
    // valid connection (able to ping-pong) or exception if all connections are invalid

    List<ConnectionPool> pools = cache.getShuffledNodesPool();

    JedisException suppressed = null;
    for (ConnectionPool pool : pools) {
      Connection jedis = null;
      try {
        jedis = pool.getResource();
        if (jedis == null) {
          continue;
        }

        jedis.ping();
        return jedis;

      } catch (JedisException ex) {
        if (suppressed == null) { // remembering first suppressed exception
          suppressed = ex;
        }
        if (jedis != null) {
          jedis.close();
        }
      }
    }

    JedisClusterOperationException noReachableNode = new JedisClusterOperationException(""No reachable node in cluster."");
    if (suppressed != null) {
      noReachableNode.addSuppressed(suppressed);
    }
    throw noReachableNode;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,getConnectionFromSlot,Connection getConnectionFromSlot(int),"[170, 187]","{'A1': [(170, 187)]}",{'A1': 1.0},A1,,"  public Connection getConnectionFromSlot(int slot) {
    ConnectionPool connectionPool = cache.getSlotPool(slot);
    if (connectionPool != null) {
      // It can't guaranteed to get valid connection because of node assignment
      return connectionPool.getResource();
    } else {
      // It's abnormal situation for cluster mode that we have just nothing for slot.
      // Try to rediscover state
      renewSlotCache();
      connectionPool = cache.getSlotPool(slot);
      if (connectionPool != null) {
        return connectionPool.getResource();
      } else {
        // no choice, fallback to new connection to random node
        return getConnection();
      }
    }
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,getReplicaConnectionFromSlot,Connection getReplicaConnectionFromSlot(int),"[189, 206]","{'A33': [(189, 206)]}",{'A33': 1.0},A33,,"  public Connection getReplicaConnectionFromSlot(int slot) {
    List<ConnectionPool> connectionPools = cache.getSlotReplicaPools(slot);
    ThreadLocalRandom random = ThreadLocalRandom.current();
    if (connectionPools != null && !connectionPools.isEmpty()) {
      // pick up randomly a connection
      int idx = random.nextInt(connectionPools.size());
      return connectionPools.get(idx).getResource();
    }

    renewSlotCache();
    connectionPools = cache.getSlotReplicaPools(slot);
    if (connectionPools != null && !connectionPools.isEmpty()) {
      int idx = random.nextInt(connectionPools.size());
      return connectionPools.get(idx).getResource();
    }

    return getConnectionFromSlot(slot);
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ClusterConnectionProvider.java,ClusterConnectionProvider,getConnectionMap,"Map<String, ConnectionPool> getConnectionMap()","[208, 211]","{'A1': [(208, 211)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, ConnectionPool> getConnectionMap() {
    return Collections.unmodifiableMap(getNodes());
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ConnectionProvider.java,,getConnectionMap,"Map<?, ?> getConnectionMap()","[14, 17]","{'A1': [(14, 17)]}",{'A1': 1.0},A1,,"  default Map<?, ?> getConnectionMap() {
    final Connection c = getConnection();
    return Collections.singletonMap(c.toString(), c);
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,incrementActiveMultiClusterIndex,int incrementActiveMultiClusterIndex(),"[166, 199]","{'A49': [(166, 169), (173, 181), (183, 193), (196, 199)], 'A1': [(182, 182)], 'A98': [(170, 172), (194, 195)]}","{'A49': 0.8235294117647058, 'A1': 0.029411764705882353, 'A98': 0.14705882352941177}",A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public int incrementActiveMultiClusterIndex() {

        // Field-level synchronization is used to avoid the edge case in which
        // setActiveMultiClusterIndex(int multiClusterIndex) is called at the same time
        activeClusterIndexLock.lock();
        
        try {
            String originalClusterName = getClusterCircuitBreaker().getName();

            // Only increment if it can pass this validation otherwise we will need to check for NULL in the data path
            if (activeMultiClusterIndex + 1 > multiClusterMap.size()) {

                lastClusterCircuitBreakerForcedOpen = true;

                throw new JedisConnectionException(""Cluster/database endpoint could not failover since the MultiClusterClientConfig was not "" +
                                                   ""provided with an additional cluster/database endpoint according to its prioritized sequence. "" +
                                                   ""If applicable, consider failing back OR restarting with an available cluster/database endpoint."");
            }
            else activeMultiClusterIndex++;

            CircuitBreaker circuitBreaker = getClusterCircuitBreaker();

            // Handles edge-case in which the user resets the activeMultiClusterIndex to a higher priority prematurely
            // which forces a failover to the next prioritized cluster that has potentially not yet recovered
            if (CircuitBreaker.State.FORCED_OPEN.equals(circuitBreaker.getState()))
                incrementActiveMultiClusterIndex();

            else log.warn(""Cluster/database endpoint successfully updated from '{}' to '{}'"", originalClusterName, circuitBreaker.getName());
        } finally {
            activeClusterIndexLock.unlock();
        }

        return activeMultiClusterIndex;
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,validateTargetConnection,void validateTargetConnection(int),"[208, 230]","{'A49': [(208, 230)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public void validateTargetConnection(int multiClusterIndex) {

        CircuitBreaker circuitBreaker = getClusterCircuitBreaker(multiClusterIndex);

        State originalState = circuitBreaker.getState();
        try {
            // Transitions the state machine to a CLOSED state, allowing state transition, metrics and event publishing
            // Safe since the activeMultiClusterIndex has not yet been changed and therefore no traffic will be routed yet
            circuitBreaker.transitionToClosedState();

            try (Connection targetConnection = getConnection(multiClusterIndex)) {
                targetConnection.ping();
            }
        }
        catch (Exception e) {

            // If the original state was FORCED_OPEN, then transition it back which stops state transition, metrics and event publishing
            if (CircuitBreaker.State.FORCED_OPEN.equals(originalState))
                circuitBreaker.transitionToForcedOpenState();

            throw new JedisValidationException(circuitBreaker.getName() + "" failed to connect. Please check configuration and try again."", e);
        }
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,setActiveMultiClusterIndex,void setActiveMultiClusterIndex(int),"[240, 272]","{'A49': [(241, 243), (247, 268), (271, 272)], 'A98': [(240, 240), (244, 246), (269, 270)]}","{'A49': 0.8181818181818182, 'A98': 0.18181818181818182}",A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public void setActiveMultiClusterIndex(int multiClusterIndex) {

        // Field-level synchronization is used to avoid the edge case in which
        // incrementActiveMultiClusterIndex() is called at the same time
        activeClusterIndexLock.lock();
        
        try {

            // Allows an attempt to reset the current cluster from a FORCED_OPEN to CLOSED state in the event that no failover is possible
            if (activeMultiClusterIndex == multiClusterIndex &&
                !CircuitBreaker.State.FORCED_OPEN.equals(getClusterCircuitBreaker(multiClusterIndex).getState()))
                    return;

            if (multiClusterIndex < 1 || multiClusterIndex > multiClusterMap.size())
                throw new JedisValidationException(""MultiClusterIndex: "" + multiClusterIndex + "" is not within "" +
                          ""the configured range. Please choose an index between 1 and "" + multiClusterMap.size());

            validateTargetConnection(multiClusterIndex);

            String originalClusterName = getClusterCircuitBreaker().getName();

            if (activeMultiClusterIndex == multiClusterIndex)
                log.warn(""Cluster/database endpoint '{}' successfully closed its circuit breaker"", originalClusterName);
            else
                log.warn(""Cluster/database endpoint successfully updated from '{}' to '{}'"",
                         originalClusterName, getClusterCircuitBreaker(multiClusterIndex).getName());

            activeMultiClusterIndex = multiClusterIndex;
            lastClusterCircuitBreakerForcedOpen = false;
        } finally {
            activeClusterIndexLock.unlock();
        }
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,close,void close(),"[274, 277]","{'A49': [(274, 277)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    @Override
    public void close() {
        multiClusterMap.get(activeMultiClusterIndex).getConnectionPool().close();
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,getConnection,Connection getConnection(),"[279, 282]","{'A49': [(279, 282)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    @Override
    public Connection getConnection() {
        return multiClusterMap.get(activeMultiClusterIndex).getConnection();
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,getConnection,Connection getConnection(int),"[284, 286]","{'A49': [(284, 286)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public Connection getConnection(int multiClusterIndex) {
        return multiClusterMap.get(multiClusterIndex).getConnection();
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,getConnection,Connection getConnection(CommandArguments),"[288, 291]","{'A49': [(288, 291)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    @Override
    public Connection getConnection(CommandArguments args) {
        return multiClusterMap.get(activeMultiClusterIndex).getConnection();
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,getConnectionMap,"Map<?, Pool<Connection>> getConnectionMap()","[293, 297]","{'A49': [(293, 297)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    @Override
    public Map<?, Pool<Connection>> getConnectionMap() {
        ConnectionPool connectionPool = multiClusterMap.get(activeMultiClusterIndex).getConnectionPool();
        return Collections.singletonMap(connectionPool.getFactory(), connectionPool);
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,getCluster,Cluster getCluster(),"[299, 301]","{'A49': [(299, 301)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public Cluster getCluster() {
        return multiClusterMap.get(activeMultiClusterIndex);
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,getCluster,Cluster getCluster(int),"[303, 306]","{'A49': [(303, 306)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    @VisibleForTesting
    public Cluster getCluster(int multiClusterIndex) {
        return multiClusterMap.get(multiClusterIndex);
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,getClusterCircuitBreaker,CircuitBreaker getClusterCircuitBreaker(),"[308, 310]","{'A49': [(308, 310)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public CircuitBreaker getClusterCircuitBreaker() {
        return multiClusterMap.get(activeMultiClusterIndex).getCircuitBreaker();
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,getClusterCircuitBreaker,CircuitBreaker getClusterCircuitBreaker(int),"[312, 314]","{'A49': [(312, 314)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public CircuitBreaker getClusterCircuitBreaker(int multiClusterIndex) {
        return multiClusterMap.get(multiClusterIndex).getCircuitBreaker();
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,isLastClusterCircuitBreakerForcedOpen,boolean isLastClusterCircuitBreakerForcedOpen(),"[316, 318]","{'A49': [(316, 318)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public boolean isLastClusterCircuitBreakerForcedOpen() {
        return lastClusterCircuitBreakerForcedOpen;
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,runClusterFailoverPostProcessor,void runClusterFailoverPostProcessor(Integer),"[320, 323]","{'A49': [(320, 323)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public void runClusterFailoverPostProcessor(Integer multiClusterIndex) {
        if (clusterFailoverPostProcessor != null)
            clusterFailoverPostProcessor.accept(getClusterCircuitBreaker(multiClusterIndex).getName());
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,setClusterFailoverPostProcessor,void setClusterFailoverPostProcessor(Consumer<String>),"[325, 327]","{'A49': [(325, 327)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public void setClusterFailoverPostProcessor(Consumer<String> clusterFailoverPostProcessor) {
        this.clusterFailoverPostProcessor = clusterFailoverPostProcessor;
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider,getFallbackExceptionList,List<Class<? extends Throwable>> getFallbackExceptionList(),"[329, 331]","{'A1': [(329, 331)]}",{'A1': 1.0},A1,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"    public List<Class<? extends Throwable>> getFallbackExceptionList() {
        return fallbackExceptionList;
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider.Cluster,getConnection,Connection getConnection(),"[345, 347]","{'A49': [(345, 347)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"        public Connection getConnection() {
            return connectionPool.getResource();
        }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider.Cluster,getConnectionPool,ConnectionPool getConnectionPool(),"[349, 351]","{'A49': [(349, 351)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"        public ConnectionPool getConnectionPool() {
            return connectionPool;
        }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider.Cluster,getRetry,Retry getRetry(),"[353, 355]","{'A49': [(353, 355)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"        public Retry getRetry() {
            return retry;
        }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProvider.java,MultiClusterPooledConnectionProvider.Cluster,getCircuitBreaker,CircuitBreaker getCircuitBreaker(),"[357, 359]","{'A49': [(357, 359)]}",{'A49': 1.0},A49,../projects/jedis/src/test/java/redis/clients/jedis/providers/MultiClusterPooledConnectionProviderTest.java,"        public CircuitBreaker getCircuitBreaker() {
            return circuitBreaker;
        }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/PooledConnectionProvider.java,PooledConnectionProvider,close,void close(),"[67, 70]","{'A1': [(67, 70)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    pool.close();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/PooledConnectionProvider.java,PooledConnectionProvider,getPool,Pool<Connection> getPool(),"[72, 74]","{'A1': [(72, 74)]}",{'A1': 1.0},A1,,"  public final Pool<Connection> getPool() {
    return pool;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/PooledConnectionProvider.java,PooledConnectionProvider,getConnection,Connection getConnection(),"[76, 79]","{'A1': [(76, 79)]}",{'A1': 1.0},A1,,"  @Override
  public Connection getConnection() {
    return pool.getResource();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/PooledConnectionProvider.java,PooledConnectionProvider,getConnection,Connection getConnection(CommandArguments),"[81, 84]","{'A1': [(81, 84)]}",{'A1': 1.0},A1,,"  @Override
  public Connection getConnection(CommandArguments args) {
    return pool.getResource();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/PooledConnectionProvider.java,PooledConnectionProvider,getConnectionMap,"Map<?, Pool<Connection>> getConnectionMap()","[86, 89]","{'A1': [(86, 89)]}",{'A1': 1.0},A1,,"  @Override
  public Map<?, Pool<Connection>> getConnectionMap() {
    return Collections.singletonMap(connectionMapKey, pool);
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ManagedConnectionProvider.java,ManagedConnectionProvider,setConnection,void setConnection(Connection),"[10, 12]","{'A1': [(10, 12)]}",{'A1': 1.0},A1,,"  public final void setConnection(Connection connection) {
    this.connection = connection;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ManagedConnectionProvider.java,ManagedConnectionProvider,close,void close(),"[14, 16]","{'A1': [(14, 16)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ManagedConnectionProvider.java,ManagedConnectionProvider,getConnection,Connection getConnection(),"[18, 21]","{'A1': [(18, 21)]}",{'A1': 1.0},A1,,"  @Override
  public final Connection getConnection() {
    return connection;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ManagedConnectionProvider.java,ManagedConnectionProvider,getConnection,Connection getConnection(CommandArguments),"[23, 26]","{'A1': [(23, 26)]}",{'A1': 1.0},A1,,"  @Override
  public final Connection getConnection(CommandArguments args) {
    return connection;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,initialize,void initialize(List<HostAndPort>),"[60, 69]","{'A1': [(60, 69)]}",{'A1': 1.0},A1,,"  private void initialize(List<HostAndPort> shards) {
    for (int i = 0; i < shards.size(); i++) {
      HostAndPort shard = shards.get(i);
      for (int n = 0; n < 160; n++) {
        Long hash = this.algo.hash(""SHARD-"" + i + ""-NODE-"" + n);
        nodes.put(hash, shard);
        setupNodeIfNotExist(shard);
      }
    }
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,setupNodeIfNotExist,ConnectionPool setupNodeIfNotExist(HostAndPort),"[71, 80]","{'A1': [(71, 80)]}",{'A1': 1.0},A1,,"  private ConnectionPool setupNodeIfNotExist(final HostAndPort node) {
    String nodeKey = node.toString();
    ConnectionPool existingPool = resources.get(nodeKey);
    if (existingPool != null) return existingPool;

    ConnectionPool nodePool = poolConfig == null ? new ConnectionPool(node, clientConfig)
        : new ConnectionPool(node, clientConfig, poolConfig);
    resources.put(nodeKey, nodePool);
    return nodePool;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,getHashingAlgo,Hashing getHashingAlgo(),"[82, 84]","{'A1': [(82, 84)]}",{'A1': 1.0},A1,,"  public Hashing getHashingAlgo() {
    return algo;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,reset,void reset(),"[86, 98]","{'A1': [(86, 98)]}",{'A1': 1.0},A1,,"  private void reset() {
    for (ConnectionPool pool : resources.values()) {
      try {
        if (pool != null) {
          pool.destroy();
        }
      } catch (RuntimeException e) {
        // pass
      }
    }
    resources.clear();
    nodes.clear();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,close,void close(),"[100, 103]","{'A1': [(100, 103)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    reset();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,getNode,HostAndPort getNode(Long),"[105, 107]","{'A1': [(105, 107)]}",{'A1': 1.0},A1,,"  public HostAndPort getNode(Long hash) {
    return hash != null ? getNodeFromHash(hash) : null;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,getConnection,Connection getConnection(HostAndPort),"[109, 111]","{'A1': [(109, 111)]}",{'A1': 1.0},A1,,"  public Connection getConnection(HostAndPort node) {
    return node != null ? setupNodeIfNotExist(node).getResource() : getConnection();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,getConnection,Connection getConnection(CommandArguments),"[113, 117]","{'A1': [(113, 117)]}",{'A1': 1.0},A1,,"  @Override
  public Connection getConnection(CommandArguments args) {
    final Long hash = ((ShardedCommandArguments) args).getKeyHash();
    return hash != null ? getConnection(getNodeFromHash(hash)) : getConnection();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,getShuffledNodesPool,List<ConnectionPool> getShuffledNodesPool(),"[119, 123]","{'A1': [(119, 123)]}",{'A1': 1.0},A1,,"  private List<ConnectionPool> getShuffledNodesPool() {
    List<ConnectionPool> pools = new ArrayList<>(resources.values());
    Collections.shuffle(pools);
    return pools;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,getConnection,Connection getConnection(),"[125, 156]","{'A1': [(125, 156)]}",{'A1': 1.0},A1,,"  @Override
  public Connection getConnection() {
    List<ConnectionPool> pools = getShuffledNodesPool();

    JedisException suppressed = null;
    for (ConnectionPool pool : pools) {
      Connection jedis = null;
      try {
        jedis = pool.getResource();
        if (jedis == null) {
          continue;
        }

        jedis.ping();
        return jedis;

      } catch (JedisException ex) {
        if (suppressed == null) { // remembering first suppressed exception
          suppressed = ex;
        }
        if (jedis != null) {
          jedis.close();
        }
      }
    }

    JedisException noReachableNode = new JedisException(""No reachable shard."");
    if (suppressed != null) {
      noReachableNode.addSuppressed(suppressed);
    }
    throw noReachableNode;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,getNodeFromHash,HostAndPort getNodeFromHash(Long),"[158, 164]","{'A1': [(158, 164)]}",{'A1': 1.0},A1,,"  private HostAndPort getNodeFromHash(Long hash) {
    SortedMap<Long, HostAndPort> tail = nodes.tailMap(hash);
    if (tail.isEmpty()) {
      return nodes.get(nodes.firstKey());
    }
    return tail.get(tail.firstKey());
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/ShardedConnectionProvider.java,ShardedConnectionProvider,getConnectionMap,"Map<String, ConnectionPool> getConnectionMap()","[166, 169]","{'A1': [(166, 169)]}",{'A1': 1.0},A1,,"  @Override
  public Map<String, ConnectionPool> getConnectionMap() {
    return Collections.unmodifiableMap(resources);
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider,getConnection,Connection getConnection(),"[105, 108]","{'A1': [(105, 108)]}",{'A1': 1.0},A1,,"  @Override
  public Connection getConnection() {
    return pool.getResource();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider,getConnection,Connection getConnection(CommandArguments),"[110, 113]","{'A1': [(110, 113)]}",{'A1': 1.0},A1,,"  @Override
  public Connection getConnection(CommandArguments args) {
    return pool.getResource();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider,close,void close(),"[115, 120]","{'A1': [(115, 120)]}",{'A1': 1.0},A1,,"  @Override
  public void close() {
    sentinelListeners.forEach(SentinelListener::shutdown);

    pool.close();
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider,getCurrentMaster,HostAndPort getCurrentMaster(),"[122, 124]","{'A1': [(122, 124)]}",{'A1': 1.0},A1,,"  public HostAndPort getCurrentMaster() {
    return currentMaster;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider,initMaster,void initMaster(HostAndPort),"[126, 152]","{'A1': [(126, 126), (128, 128), (130, 148), (151, 152)], 'A98': [(127, 127), (129, 129), (149, 150)]}","{'A1': 0.8518518518518519, 'A98': 0.14814814814814814}",A1,,"  private void initMaster(HostAndPort master) {
    initPoolLock.lock();

    try {
      if (!master.equals(currentMaster)) {
        currentMaster = master;

        ConnectionPool newPool = createNodePool(currentMaster);

        ConnectionPool existingPool = pool;
        pool = newPool;
        LOG.info(""Created connection pool to master at {}."", master);
        if (clientSideCache != null) {
          clientSideCache.flush();
        }

        if (existingPool != null) {
          // although we clear the pool, we still have to check the returned object in getResource,
          // this call only clears idle instances, not borrowed instances
          // existingPool.clear(); // necessary??
          existingPool.close();
        }
      }
    } finally {
      initPoolLock.unlock();
    }
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider,createNodePool,ConnectionPool createNodePool(HostAndPort),"[154, 168]","{'A1': [(154, 168)]}",{'A1': 1.0},A1,,"  private ConnectionPool createNodePool(HostAndPort master) {
    if (masterPoolConfig == null) {
      if (clientSideCache == null) {
        return new ConnectionPool(master, masterClientConfig);
      } else {
        return new ConnectionPool(master, masterClientConfig, clientSideCache);
      }
    } else {
      if (clientSideCache == null) {
        return new ConnectionPool(master, masterClientConfig, masterPoolConfig);
      } else {
        return new ConnectionPool(master, masterClientConfig, clientSideCache, masterPoolConfig);
      }
    }
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider,initSentinels,HostAndPort initSentinels(Set<HostAndPort>),"[170, 226]","{'A1': [(170, 226)]}",{'A1': 1.0},A1,,"  private HostAndPort initSentinels(Set<HostAndPort> sentinels) {

    HostAndPort master = null;
    boolean sentinelAvailable = false;

    LOG.debug(""Trying to find master from available sentinels..."");

    for (HostAndPort sentinel : sentinels) {

      LOG.debug(""Connecting to Sentinel {}..."", sentinel);

      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {

        List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);

        // connected to sentinel...
        sentinelAvailable = true;

        if (masterAddr == null || masterAddr.size() != 2) {
          LOG.warn(""Sentinel {} is not monitoring master {}."", sentinel, masterName);
          continue;
        }

        master = toHostAndPort(masterAddr);
        LOG.debug(""Redis master reported at {}."", master);
        break;
      } catch (JedisException e) {
        // resolves #1036, it should handle JedisException there's another chance
        // of raising JedisDataException
        LOG.warn(""Could not get master address from {}."", sentinel, e);
      }
    }

    if (master == null) {
      if (sentinelAvailable) {
        // can connect to sentinel, but master name seems to not monitored
        throw new JedisException(
            ""Can connect to sentinel, but "" + masterName + "" seems to be not monitored."");
      } else {
        throw new JedisConnectionException(
            ""All sentinels down, cannot determine where "" + masterName + "" is running."");
      }
    }

    LOG.info(""Redis master running at {}. Starting sentinel listeners..."", master);

    for (HostAndPort sentinel : sentinels) {

      SentinelListener listener = new SentinelListener(sentinel);
      // whether SentinelListener threads are alive or not, process can be stopped
      listener.setDaemon(true);
      sentinelListeners.add(listener);
      listener.start();
    }

    return master;
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider,toHostAndPort,HostAndPort toHostAndPort(List<String>),"[231, 233]","{'A1': [(231, 233)]}",{'A1': 1.0},A1,,"  private static HostAndPort toHostAndPort(List<String> masterAddr) {
    return toHostAndPort(masterAddr.get(0), masterAddr.get(1));
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider,toHostAndPort,"HostAndPort toHostAndPort(String,String)","[235, 237]","{'A1': [(235, 237)]}",{'A1': 1.0},A1,,"  private static HostAndPort toHostAndPort(String hostStr, String portStr) {
    return new HostAndPort(hostStr, Integer.parseInt(portStr));
  }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider.SentinelListener,run,void run(),"[250, 314]","{'A1': [(250, 314)]}",{'A1': 1.0},A1,,"    @Override
    public void run() {

      running.set(true);

      while (running.get()) {

        try {
          // double check that it is not being shutdown
          if (!running.get()) {
            break;
          }

          sentinelJedis = new Jedis(node, sentinelClientConfig);

          // code for active refresh
          List<String> masterAddr = sentinelJedis.sentinelGetMasterAddrByName(masterName);
          if (masterAddr == null || masterAddr.size() != 2) {
            LOG.warn(""Can not get master {} address. Sentinel: {}."", masterName, node);
          } else {
            initMaster(toHostAndPort(masterAddr));
          }

          sentinelJedis.subscribe(new JedisPubSub() {
            @Override
            public void onMessage(String channel, String message) {
              LOG.debug(""Sentinel {} published: {}."", node, message);

              String[] switchMasterMsg = message.split("" "");

              if (switchMasterMsg.length > 3) {

                if (masterName.equals(switchMasterMsg[0])) {
                  initMaster(toHostAndPort(switchMasterMsg[3], switchMasterMsg[4]));
                } else {
                  LOG.debug(
                      ""Ignoring message on +switch-master for master {}. Our master is {}."",
                      switchMasterMsg[0], masterName);
                }

              } else {
                LOG.error(""Invalid message received on sentinel {} on channel +switch-master: {}."",
                    node, message);
              }
            }
          }, ""+switch-master"");

        } catch (JedisException e) {

          if (running.get()) {
            LOG.error(""Lost connection to sentinel {}. Sleeping {}ms and retrying."", node,
                subscribeRetryWaitTimeMillis, e);
            try {
              Thread.sleep(subscribeRetryWaitTimeMillis);
            } catch (InterruptedException se) {
              LOG.error(""Sleep interrupted."", se);
            }
          } else {
            LOG.debug(""Unsubscribing from sentinel {}."", node);
          }
        } finally {
          IOUtils.closeQuietly(sentinelJedis);
        }
      }
    }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider.SentinelListener,onMessage,"void onMessage(String,String)","[274, 294]","{'A1': [(274, 294)]}",{'A1': 1.0},A1,,"            @Override
            public void onMessage(String channel, String message) {
              LOG.debug(""Sentinel {} published: {}."", node, message);

              String[] switchMasterMsg = message.split("" "");

              if (switchMasterMsg.length > 3) {

                if (masterName.equals(switchMasterMsg[0])) {
                  initMaster(toHostAndPort(switchMasterMsg[3], switchMasterMsg[4]));
                } else {
                  LOG.debug(
                      ""Ignoring message on +switch-master for master {}. Our master is {}."",
                      switchMasterMsg[0], masterName);
                }

              } else {
                LOG.error(""Invalid message received on sentinel {} on channel +switch-master: {}."",
                    node, message);
              }
            }
"
redis.clients.jedis.providers,../projects/jedis/src/main/java/redis/clients/jedis/providers/SentineledConnectionProvider.java,SentineledConnectionProvider.SentinelListener,shutdown,void shutdown(),"[317, 328]","{'A1': [(317, 328)]}",{'A1': 1.0},A1,,"    public void shutdown() {
      try {
        LOG.debug(""Shutting down listener on {}."", node);
        running.set(false);
        // This isn't good, the Jedis object is not thread safe
        if (sentinelJedis != null) {
          sentinelJedis.close();
        }
      } catch (RuntimeException e) {
        LOG.error(""Error while shutting down."", e);
      }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,builder,SslOptions.Builder builder(),"[77, 79]","{'A1': [(77, 79)]}",{'A1': 1.0},A1,,"    public static SslOptions.Builder builder() {
        return new SslOptions.Builder();
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,keyStoreType,Builder keyStoreType(String),"[113, 116]","{'A1': [(113, 116)]}",{'A1': 1.0},A1,,"        public Builder keyStoreType(String keyStoreType) {
            this.keyStoreType = Objects.requireNonNull(keyStoreType, ""KeyStoreType must not be null"");
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,trustStoreType,Builder trustStoreType(String),"[124, 127]","{'A1': [(124, 127)]}",{'A1': 1.0},A1,,"        public Builder trustStoreType(String trustStoreType) {
            this.trustStoreType = Objects.requireNonNull(trustStoreType, ""TrustStoreType must not be null"");
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,keystore,Builder keystore(File),"[137, 139]","{'A1': [(137, 139)]}",{'A1': 1.0},A1,,"        public Builder keystore(File keystore) {
            return keystore(keystore, null);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,keystore,"Builder keystore(File,char[])","[150, 156]","{'A1': [(150, 156)]}",{'A1': 1.0},A1,,"        public Builder keystore(File keystore, char[] keystorePassword) {

            Objects.requireNonNull(keystore, ""Keystore must not be null"");
            assertFile(""Keystore"", keystore);

            return keystore(Resource.from(keystore), keystorePassword);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,keystore,Builder keystore(URL),"[166, 168]","{'A1': [(166, 168)]}",{'A1': 1.0},A1,,"        public Builder keystore(URL keystore) {
            return keystore(keystore, null);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,keystore,"Builder keystore(URL,char[])","[179, 184]","{'A1': [(179, 184)]}",{'A1': 1.0},A1,,"        public Builder keystore(URL keystore, char[] keystorePassword) {

            Objects.requireNonNull(keystore, ""Keystore must not be null"");

            return keystore(Resource.from(keystore), keystorePassword);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,keystore,"Builder keystore(Resource,char[])","[195, 202]","{'A1': [(195, 202)]}",{'A1': 1.0},A1,,"        public Builder keystore(Resource resource, char[] keystorePassword) {

            this.keystoreResource = Objects.requireNonNull(resource, ""Keystore InputStreamProvider must not be null"");

            this.keystorePassword = getPassword(keystorePassword);

            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,truststore,Builder truststore(File),"[212, 214]","{'A1': [(212, 214)]}",{'A1': 1.0},A1,,"        public Builder truststore(File truststore) {
            return truststore(truststore, null);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,truststore,"Builder truststore(File,char[])","[225, 231]","{'A1': [(225, 231)]}",{'A1': 1.0},A1,,"        public Builder truststore(File truststore, char[] truststorePassword) {

            Objects.requireNonNull(truststore, ""Truststore must not be null"");
            assertFile(""Truststore"", truststore);

            return truststore(Resource.from(truststore), truststorePassword);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,truststore,Builder truststore(URL),"[241, 243]","{'A1': [(241, 243)]}",{'A1': 1.0},A1,,"        public Builder truststore(URL truststore) {
            return truststore(truststore, null);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,truststore,"Builder truststore(URL,char[])","[254, 259]","{'A1': [(254, 259)]}",{'A1': 1.0},A1,,"        public Builder truststore(URL truststore, char[] truststorePassword) {

            Objects.requireNonNull(truststore, ""Truststore must not be null"");

            return truststore(Resource.from(truststore), truststorePassword);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,truststore,"Builder truststore(Resource,char[])","[270, 277]","{'A1': [(270, 277)]}",{'A1': 1.0},A1,,"        public Builder truststore(Resource resource, char[] truststorePassword) {

            this.truststoreResource = Objects.requireNonNull(resource, ""Truststore InputStreamProvider must not be null"");

            this.truststorePassword = getPassword(truststorePassword);

            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,sslParameters,Builder sslParameters(SSLParameters),"[285, 288]","{'A1': [(285, 288)]}",{'A1': 1.0},A1,,"        public Builder sslParameters(SSLParameters sslParameters) {
            this.sslParameters = sslParameters;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,sslVerifyMode,Builder sslVerifyMode(SslVerifyMode),"[296, 299]","{'A1': [(296, 299)]}",{'A1': 1.0},A1,,"        public Builder sslVerifyMode(SslVerifyMode sslVerifyMode) {
            this.sslVerifyMode = sslVerifyMode;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,sslProtocol,Builder sslProtocol(String),"[306, 309]","{'A1': [(306, 309)]}",{'A1': 1.0},A1,,"        public Builder sslProtocol(String protocol) {
            this.sslProtocol = protocol;
            return this;
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions.Builder,build,SslOptions build(),"[316, 321]","{'A1': [(316, 321)]}",{'A1': 1.0},A1,,"        public SslOptions build() {
            if (this.sslParameters == null) {
                this.sslParameters = new SSLParameters();
            }
            return new SslOptions(this);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,createSslContext,SSLContext createSslContext(),"[331, 372]","{'A1': [(331, 372)]}",{'A1': 1.0},A1,,"    public SSLContext createSslContext() throws IOException, GeneralSecurityException {

        KeyManager[] keyManagers = null;
        TrustManager[] trustManagers = null;

        if (sslVerifyMode == SslVerifyMode.FULL) {
            this.sslParameters.setEndpointIdentificationAlgorithm(""HTTPS"");
        } else if (sslVerifyMode == SslVerifyMode.CA) {
            this.sslParameters.setEndpointIdentificationAlgorithm("""");
        } else if (sslVerifyMode == SslVerifyMode.INSECURE) {
            trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };
        }

        if (keystoreResource != null) {

            KeyStore keyStore = KeyStore.getInstance(keyStoreType);
            try (InputStream keystoreStream = keystoreResource.get()) {
                keyStore.load(keystoreStream, keystorePassword);
            }

            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);
            keyManagerFactory.init(keyStore, keystorePassword);
            keyManagers = keyManagerFactory.getKeyManagers();
        }

        if (trustManagers == null && truststoreResource != null) {

            KeyStore trustStore = KeyStore.getInstance(trustStoreType);
            try (InputStream truststoreStream = truststoreResource.get()) {
                trustStore.load(truststoreStream, truststorePassword);
            }

            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);
            trustManagerFactory.init(trustStore);
            trustManagers = trustManagerFactory.getTrustManagers();
        }

        SSLContext sslContext = SSLContext.getInstance(sslProtocol);
        sslContext.init(keyManagers, trustManagers, null);

        return sslContext;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,getSslParameters,SSLParameters getSslParameters(),"[378, 380]","{'A1': [(378, 380)]}",{'A1': 1.0},A1,,"    public SSLParameters getSslParameters() {
        return sslParameters;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,getPassword,char[] getPassword(char[]),"[382, 384]","{'A1': [(382, 384)]}",{'A1': 1.0},A1,,"    private static char[] getPassword(char[] chars) {
        return chars != null ? Arrays.copyOf(chars, chars.length) : null;
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,assertFile,"void assertFile(String,File)","[393, 400]","{'A1': [(393, 400)]}",{'A1': 1.0},A1,,"    public static void assertFile(String keyword, File file) {
        if (!file.exists()) {
            throw new IllegalArgumentException(String.format(""%s file %s does not exist"", keyword, file));
        }
        if (!file.isFile()) {
            throw new IllegalArgumentException(String.format(""%s file %s is not a file"", keyword, file));
        }
    }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,from,Resource from(URL),"[415, 420]","{'A1': [(415, 420)]}",{'A1': 1.0},A1,,"        static Resource from(URL url) {

            Objects.requireNonNull(url, ""URL must not be null"");

            return () -> url.openConnection().getInputStream();
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,from,Resource from(File),"[428, 433]","{'A1': [(428, 433)]}",{'A1': 1.0},A1,,"        static Resource from(File file) {

            Objects.requireNonNull(file, ""File must not be null"");

            return () -> new FileInputStream(file);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,checkClientTrusted,"void checkClientTrusted(X509Certificate[],String)","[449, 454]","{'A1': [(449, 454)]}",{'A1': 1.0},A1,,"        @Override
        public void checkClientTrusted(X509Certificate[] chain, String s) {
            if (logger.isDebugEnabled()) {
                logger.debug(""Accepting a client certificate: "" + chain[0].getSubjectDN());
            }
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,checkServerTrusted,"void checkServerTrusted(X509Certificate[],String)","[456, 461]","{'A1': [(456, 461)]}",{'A1': 1.0},A1,,"        @Override
        public void checkServerTrusted(X509Certificate[] chain, String s) {
            if (logger.isDebugEnabled()) {
                logger.debug(""Accepting a server certificate: "" + chain[0].getSubjectDN());
            }
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,checkClientTrusted,"void checkClientTrusted(X509Certificate[],String,Socket)","[463, 467]","{'A1': [(463, 467)]}",{'A1': 1.0},A1,,"        @Override
        public void checkClientTrusted(X509Certificate[] chain, String s, Socket socket)
                throws CertificateException {
            checkClientTrusted(chain, s);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,checkClientTrusted,"void checkClientTrusted(X509Certificate[],String,SSLEngine)","[469, 473]","{'A1': [(469, 473)]}",{'A1': 1.0},A1,,"        @Override
        public void checkClientTrusted(X509Certificate[] chain, String s, SSLEngine sslEngine)
                throws CertificateException {
            checkClientTrusted(chain, s);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,checkServerTrusted,"void checkServerTrusted(X509Certificate[],String,Socket)","[475, 479]","{'A1': [(475, 479)]}",{'A1': 1.0},A1,,"        @Override
        public void checkServerTrusted(X509Certificate[] chain, String s, Socket socket)
                throws CertificateException {
            checkServerTrusted(chain, s);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,checkServerTrusted,"void checkServerTrusted(X509Certificate[],String,SSLEngine)","[481, 485]","{'A1': [(481, 485)]}",{'A1': 1.0},A1,,"        @Override
        public void checkServerTrusted(X509Certificate[] chain, String s, SSLEngine sslEngine)
                throws CertificateException {
            checkServerTrusted(chain, s);
        }
"
redis.clients.jedis,../projects/jedis/src/main/java/redis/clients/jedis/SslOptions.java,SslOptions,getAcceptedIssuers,X509Certificate[] getAcceptedIssuers(),"[487, 490]","{'A1': [(487, 490)]}",{'A1': 1.0},A1,,"        @Override
        public X509Certificate[] getAcceptedIssuers() {
            return EMPTY_X509_CERTIFICATES;
        }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/NumericField.java,NumericField,of,NumericField of(String),"[22, 24]","{'A1': [(22, 24)]}",{'A1': 1.0},A1,,"  public static NumericField of(String fieldName) {
    return new NumericField(fieldName);
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/NumericField.java,NumericField,of,NumericField of(FieldName),"[26, 28]","{'A1': [(26, 28)]}",{'A1': 1.0},A1,,"  public static NumericField of(FieldName fieldName) {
    return new NumericField(fieldName);
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/NumericField.java,NumericField,as,NumericField as(String),"[30, 34]","{'A1': [(30, 34)]}",{'A1': 1.0},A1,,"  @Override
  public NumericField as(String attribute) {
    super.as(attribute);
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/NumericField.java,NumericField,indexMissing,NumericField indexMissing(),"[36, 39]","{'A1': [(36, 39)]}",{'A1': 1.0},A1,,"  public NumericField indexMissing() {
    this.indexMissing = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/NumericField.java,NumericField,sortable,NumericField sortable(),"[44, 47]","{'A1': [(44, 47)]}",{'A1': 1.0},A1,,"  public NumericField sortable() {
    this.sortable = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/NumericField.java,NumericField,noIndex,NumericField noIndex(),"[52, 55]","{'A1': [(52, 55)]}",{'A1': 1.0},A1,,"  public NumericField noIndex() {
    this.noIndex = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/NumericField.java,NumericField,addParams,void addParams(CommandArguments),"[57, 73]","{'A1': [(57, 73)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    args.addParams(fieldName);
    args.add(NUMERIC);

    if (indexMissing) {
      args.add(INDEXMISSING);
    }

    if (sortable) {
      args.add(SORTABLE);
    }

    if (noIndex) {
      args.add(NOINDEX);
    }
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoField.java,GeoField,of,GeoField of(String),"[22, 24]","{'A1': [(22, 24)]}",{'A1': 1.0},A1,,"  public static GeoField of(String fieldName) {
    return new GeoField(fieldName);
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoField.java,GeoField,of,GeoField of(FieldName),"[26, 28]","{'A1': [(26, 28)]}",{'A1': 1.0},A1,,"  public static GeoField of(FieldName fieldName) {
    return new GeoField(fieldName);
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoField.java,GeoField,as,GeoField as(String),"[30, 34]","{'A1': [(30, 34)]}",{'A1': 1.0},A1,,"  @Override
  public GeoField as(String attribute) {
    super.as(attribute);
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoField.java,GeoField,indexMissing,GeoField indexMissing(),"[36, 39]","{'A1': [(36, 39)]}",{'A1': 1.0},A1,,"  public GeoField indexMissing() {
    this.indexMissing = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoField.java,GeoField,sortable,GeoField sortable(),"[41, 44]","{'A1': [(41, 44)]}",{'A1': 1.0},A1,,"  public GeoField sortable() {
    this.sortable = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoField.java,GeoField,noIndex,GeoField noIndex(),"[46, 49]","{'A1': [(46, 49)]}",{'A1': 1.0},A1,,"  public GeoField noIndex() {
    this.noIndex = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoField.java,GeoField,addParams,void addParams(CommandArguments),"[51, 67]","{'A1': [(51, 67)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    args.addParams(fieldName);
    args.add(GEO);

    if (indexMissing) {
      args.add(INDEXMISSING);
    }

    if (sortable) {
      args.add(SORTABLE);
    }

    if (noIndex) {
      args.add(NOINDEX);
    }
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,of,TagField of(String),"[28, 30]","{'A1': [(28, 30)]}",{'A1': 1.0},A1,,"  public static TagField of(String fieldName) {
    return new TagField(fieldName);
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,of,TagField of(FieldName),"[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"  public static TagField of(FieldName fieldName) {
    return new TagField(fieldName);
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,as,TagField as(String),"[36, 40]","{'A1': [(36, 40)]}",{'A1': 1.0},A1,,"  @Override
  public TagField as(String attribute) {
    super.as(attribute);
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,indexMissing,TagField indexMissing(),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"  public TagField indexMissing() {
    this.indexMissing = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,indexEmpty,TagField indexEmpty(),"[47, 50]","{'A1': [(47, 50)]}",{'A1': 1.0},A1,,"  public TagField indexEmpty() {
    this.indexEmpty = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,separator,TagField separator(char),"[56, 63]","{'A1': [(56, 63)]}",{'A1': 1.0},A1,,"  public TagField separator(char separator) {
    if (separator < 128) {
      this.separator = new byte[]{(byte) separator};
    } else {
      this.separator = SafeEncoder.encode(String.valueOf(separator));
    }
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,caseSensitive,TagField caseSensitive(),"[68, 71]","{'A1': [(68, 71)]}",{'A1': 1.0},A1,,"  public TagField caseSensitive() {
    this.caseSensitive = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,withSuffixTrie,TagField withSuffixTrie(),"[77, 80]","{'A1': [(77, 80)]}",{'A1': 1.0},A1,,"  public TagField withSuffixTrie() {
    this.withSuffixTrie = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,sortable,TagField sortable(),"[85, 88]","{'A1': [(85, 88)]}",{'A1': 1.0},A1,,"  public TagField sortable() {
    this.sortable = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,sortableUNF,TagField sortableUNF(),"[93, 96]","{'A1': [(93, 96)]}",{'A1': 1.0},A1,,"  public TagField sortableUNF() {
    this.sortableUNF = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,sortableUnNormalizedForm,TagField sortableUnNormalizedForm(),"[102, 105]","{'A1': [(102, 105)]}",{'A1': 1.0},A1,,"  @Deprecated
  public TagField sortableUnNormalizedForm() {
    return sortableUNF();
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,noIndex,TagField noIndex(),"[110, 113]","{'A1': [(110, 113)]}",{'A1': 1.0},A1,,"  public TagField noIndex() {
    this.noIndex = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TagField.java,TagField,addParams,void addParams(CommandArguments),"[115, 148]","{'A1': [(115, 148)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    args.addParams(fieldName);
    args.add(TAG);

    if (indexMissing) {
      args.add(INDEXMISSING);
    }
    if (indexEmpty) {
      args.add(INDEXEMPTY);
    }

    if (separator != null) {
      args.add(SEPARATOR).add(separator);
    }

    if (caseSensitive) {
      args.add(CASESENSITIVE);
    }

    if (withSuffixTrie) {
      args.add(WITHSUFFIXTRIE);
    }

    if (sortableUNF) {
      args.add(SORTABLE).add(UNF);
    } else if (sortable) {
      args.add(SORTABLE);
    }

    if (noIndex) {
      args.add(NOINDEX);
    }
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/SchemaField.java,SchemaField,as,SchemaField as(String),"[18, 21]","{'A1': [(18, 21)]}",{'A1': 1.0},A1,,"  public SchemaField as(String attribute) {
    fieldName.as(attribute);
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/SchemaField.java,SchemaField,getFieldName,FieldName getFieldName(),"[23, 25]","{'A1': [(23, 25)]}",{'A1': 1.0},A1,,"  public final FieldName getFieldName() {
    return fieldName;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/SchemaField.java,SchemaField,getName,String getName(),"[27, 29]","{'A1': [(27, 29)]}",{'A1': 1.0},A1,,"  public final String getName() {
    return fieldName.getName();
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField,as,VectorField as(String),"[36, 40]","{'A1': [(36, 40)]}",{'A1': 1.0},A1,,"  @Override
  public VectorField as(String attribute) {
    super.as(attribute);
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField,indexMissing,VectorField indexMissing(),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"  public VectorField indexMissing() {
    this.indexMissing = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField,addParams,void addParams(CommandArguments),"[47, 59]","{'A1': [(47, 59)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    args.addParams(fieldName);
    args.add(VECTOR);

    args.add(algorithm);
    args.add(attributes.size() << 1);
    attributes.forEach((name, value) -> args.add(name).add(value));

    if (indexMissing) {
      args.add(INDEXMISSING);
    }
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField,builder,Builder builder(),"[61, 63]","{'A1': [(61, 63)]}",{'A1': 1.0},A1,,"  public static Builder builder() {
    return new Builder();
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField.Builder,build,VectorField build(),"[74, 79]","{'A1': [(74, 79)]}",{'A1': 1.0},A1,,"    public VectorField build() {
      if (fieldName == null || algorithm == null || attributes == null || attributes.isEmpty()) {
        throw new IllegalArgumentException(""All required VectorField parameters are not set."");
      }
      return new VectorField(fieldName, algorithm, attributes);
    }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField.Builder,fieldName,Builder fieldName(String),"[81, 84]","{'A1': [(81, 84)]}",{'A1': 1.0},A1,,"    public Builder fieldName(String fieldName) {
      this.fieldName = FieldName.of(fieldName);
      return this;
    }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField.Builder,fieldName,Builder fieldName(FieldName),"[86, 89]","{'A1': [(86, 89)]}",{'A1': 1.0},A1,,"    public Builder fieldName(FieldName fieldName) {
      this.fieldName = fieldName;
      return this;
    }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField.Builder,as,Builder as(String),"[91, 94]","{'A1': [(91, 94)]}",{'A1': 1.0},A1,,"    public Builder as(String attribute) {
      this.fieldName.as(attribute);
      return this;
    }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField.Builder,algorithm,Builder algorithm(VectorAlgorithm),"[96, 99]","{'A1': [(96, 99)]}",{'A1': 1.0},A1,,"    public Builder algorithm(VectorAlgorithm algorithm) {
      this.algorithm = algorithm;
      return this;
    }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField.Builder,attributes,"Builder attributes(Map<String, Object>)","[101, 104]","{'A1': [(101, 104)]}",{'A1': 1.0},A1,,"    public Builder attributes(Map<String, Object> attributes) {
      this.attributes = attributes;
      return this;
    }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/VectorField.java,VectorField.Builder,addAttribute,"Builder addAttribute(String,Object)","[106, 112]","{'A1': [(106, 112)]}",{'A1': 1.0},A1,,"    public Builder addAttribute(String name, Object value) {
      if (this.attributes == null) {
        this.attributes = new LinkedHashMap<>();
      }
      this.attributes.put(name, value);
      return this;
    }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,of,TextField of(String),"[28, 30]","{'A1': [(28, 30)]}",{'A1': 1.0},A1,,"  public static TextField of(String fieldName) {
    return new TextField(fieldName);
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,of,TextField of(FieldName),"[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"  public static TextField of(FieldName fieldName) {
    return new TextField(fieldName);
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,as,TextField as(String),"[36, 40]","{'A1': [(36, 40)]}",{'A1': 1.0},A1,,"  @Override
  public TextField as(String attribute) {
    super.as(attribute);
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,indexMissing,TextField indexMissing(),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"  public TextField indexMissing() {
    this.indexMissing = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,indexEmpty,TextField indexEmpty(),"[47, 50]","{'A1': [(47, 50)]}",{'A1': 1.0},A1,,"  public TextField indexEmpty() {
    this.indexEmpty = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,weight,TextField weight(double),"[57, 60]","{'A1': [(57, 60)]}",{'A1': 1.0},A1,,"  public TextField weight(double weight) {
    this.weight = weight;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,noStem,TextField noStem(),"[65, 68]","{'A1': [(65, 68)]}",{'A1': 1.0},A1,,"  public TextField noStem() {
    this.noStem = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,phonetic,TextField phonetic(String),"[74, 77]","{'A1': [(74, 77)]}",{'A1': 1.0},A1,,"  public TextField phonetic(String matcher) {
    this.phoneticMatcher = matcher;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,withSuffixTrie,TextField withSuffixTrie(),"[83, 86]","{'A1': [(83, 86)]}",{'A1': 1.0},A1,,"  public TextField withSuffixTrie() {
    this.withSuffixTrie = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,sortable,TextField sortable(),"[91, 94]","{'A1': [(91, 94)]}",{'A1': 1.0},A1,,"  public TextField sortable() {
    this.sortable = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,sortableUNF,TextField sortableUNF(),"[99, 102]","{'A1': [(99, 102)]}",{'A1': 1.0},A1,,"  public TextField sortableUNF() {
    this.sortableUNF = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,sortableUnNormalizedForm,TextField sortableUnNormalizedForm(),"[108, 111]","{'A1': [(108, 111)]}",{'A1': 1.0},A1,,"  @Deprecated
  public TextField sortableUnNormalizedForm() {
    return sortableUNF();
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,noIndex,TextField noIndex(),"[116, 119]","{'A1': [(116, 119)]}",{'A1': 1.0},A1,,"  public TextField noIndex() {
    this.noIndex = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/TextField.java,TextField,addParams,void addParams(CommandArguments),"[121, 158]","{'A1': [(121, 158)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    args.addParams(fieldName);
    args.add(TEXT);

    if (indexMissing) {
      args.add(INDEXMISSING);
    }
    if (indexEmpty) {
      args.add(INDEXEMPTY);
    }

    if (weight != null) {
      args.add(WEIGHT).add(weight);
    }

    if (noStem) {
      args.add(NOSTEM);
    }

    if (phoneticMatcher != null) {
      args.add(PHONETIC).add(phoneticMatcher);
    }

    if (withSuffixTrie) {
      args.add(WITHSUFFIXTRIE);
    }

    if (sortableUNF) {
      args.add(SORTABLE).add(UNF);
    } else if (sortable) {
      args.add(SORTABLE);
    }

    if (noIndex) {
      args.add(NOINDEX);
    }
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoShapeField.java,GeoShapeField,of,"GeoShapeField of(String,CoordinateSystem)","[38, 40]","{'A1': [(38, 40)]}",{'A1': 1.0},A1,,"  public static GeoShapeField of(String fieldName, CoordinateSystem system) {
    return new GeoShapeField(fieldName, system);
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoShapeField.java,GeoShapeField,as,GeoShapeField as(String),"[42, 46]","{'A1': [(42, 46)]}",{'A1': 1.0},A1,,"  @Override
  public GeoShapeField as(String attribute) {
    super.as(attribute);
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoShapeField.java,GeoShapeField,indexMissing,GeoShapeField indexMissing(),"[48, 51]","{'A1': [(48, 51)]}",{'A1': 1.0},A1,,"  public GeoShapeField indexMissing() {
    this.indexMissing = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoShapeField.java,GeoShapeField,noIndex,GeoShapeField noIndex(),"[53, 56]","{'A1': [(53, 56)]}",{'A1': 1.0},A1,,"  public GeoShapeField noIndex() {
    this.noIndex = true;
    return this;
  }
"
redis.clients.jedis.search.schemafields,../projects/jedis/src/main/java/redis/clients/jedis/search/schemafields/GeoShapeField.java,GeoShapeField,addParams,void addParams(CommandArguments),"[58, 69]","{'A1': [(58, 69)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    args.addParams(fieldName).add(GEOSHAPE).add(system);

    if (indexMissing) {
      args.add(INDEXMISSING);
    }

    if (noIndex) {
      args.add(NOINDEX);
    }
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query.NumericFilter,formatNum,"byte[] formatNum(double,boolean)","[54, 56]","{'A1': [(54, 56)]}",{'A1': 1.0},A1,,"    private byte[] formatNum(double num, boolean exclude) {
      return exclude ? SafeEncoder.encode(""("" + num) : Protocol.toByteArray(num);
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query.NumericFilter,addParams,void addParams(CommandArguments),"[58, 64]","{'A1': [(58, 64)]}",{'A1': 1.0},A1,,"    @Override
    public void addParams(CommandArguments args) {
      args.add(SearchKeyword.FILTER.getRaw());
      args.add(SafeEncoder.encode(property));
      args.add(formatNum(min, exclusiveMin));
      args.add(formatNum(max, exclusiveMax));
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query.GeoFilter,addParams,void addParams(CommandArguments),"[90, 98]","{'A1': [(90, 98)]}",{'A1': 1.0},A1,,"    @Override
    public void addParams(CommandArguments args) {
      args.add(SearchKeyword.GEOFILTER.getRaw());
      args.add(SafeEncoder.encode(property));
      args.add(Protocol.toByteArray(lon));
      args.add(Protocol.toByteArray(lat));
      args.add(Protocol.toByteArray(radius));
      args.add(SafeEncoder.encode(unit));
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,addParams,void addParams(CommandArguments),"[178, 325]","{'A1': [(178, 291), (295, 295), (302, 302), (325, 325)], 'A12': [(292, 294), (296, 300)], 'A9': [(306, 324)], 'A76': [(301, 301), (303, 305)]}","{'A1': 0.7905405405405406, 'A12': 0.05405405405405406, 'A9': 0.12837837837837837, 'A76': 0.02702702702702703}",A1,,"  @Override
  public void addParams(CommandArguments args) {
    args.add(SafeEncoder.encode(_queryString));

    if (_verbatim) {
      args.add(SearchKeyword.VERBATIM.getRaw());
    }
    if (_noContent) {
      args.add(SearchKeyword.NOCONTENT.getRaw());
    }
    if (_noStopwords) {
      args.add(SearchKeyword.NOSTOPWORDS.getRaw());
    }
    if (_withScores) {
      args.add(SearchKeyword.WITHSCORES.getRaw());
    }
    if (_language != null) {
      args.add(SearchKeyword.LANGUAGE.getRaw());
      args.add(SafeEncoder.encode(_language));
    }

    if (_scorer != null) {
      args.add(SearchKeyword.SCORER.getRaw());
      args.add(SafeEncoder.encode(_scorer));
    }

    if (_fields != null && _fields.length > 0) {
      args.add(SearchKeyword.INFIELDS.getRaw());
      args.add(Protocol.toByteArray(_fields.length));
      for (String f : _fields) {
        args.add(SafeEncoder.encode(f));
      }
    }

    if (_sortBy != null) {
      args.add(SearchKeyword.SORTBY.getRaw());
      args.add(SafeEncoder.encode(_sortBy));
      args.add((_sortAsc ? SearchKeyword.ASC : SearchKeyword.DESC).getRaw());
    }

    if (_paging.offset != 0 || _paging.num != 10) {
      args.add(SearchKeyword.LIMIT.getRaw()).add(Protocol.toByteArray(_paging.offset)).add(Protocol.toByteArray(_paging.num));
    }

    if (!_filters.isEmpty()) {
      _filters.forEach(filter -> filter.addParams(args));
    }

    if (wantsHighlight) {
      args.add(SearchKeyword.HIGHLIGHT.getRaw());
      if (highlightFields != null) {
        args.add(SearchKeyword.FIELDS.getRaw());
        args.add(Protocol.toByteArray(highlightFields.length));
        for (String s : highlightFields) {
          args.add(SafeEncoder.encode(s));
        }
      }
      if (highlightTags != null) {
        args.add(SearchKeyword.TAGS.getRaw());
        for (String t : highlightTags) {
          args.add(SafeEncoder.encode(t));
        }
      }
    }
    if (wantsSummarize) {
      args.add(SearchKeyword.SUMMARIZE.getRaw());
      if (summarizeFields != null) {
        args.add(SearchKeyword.FIELDS.getRaw());
        args.add(Protocol.toByteArray(summarizeFields.length));
        for (String s : summarizeFields) {
          args.add(SafeEncoder.encode(s));
        }
      }
      if (summarizeNumFragments != -1) {
        args.add(SearchKeyword.FRAGS.getRaw());
        args.add(Protocol.toByteArray(summarizeNumFragments));
      }
      if (summarizeFragmentLen != -1) {
        args.add(SearchKeyword.LEN.getRaw());
        args.add(Protocol.toByteArray(summarizeFragmentLen));
      }
      if (summarizeSeparator != null) {
        args.add(SearchKeyword.SEPARATOR.getRaw());
        args.add(SafeEncoder.encode(summarizeSeparator));
      }
    }

    if (_keys != null && _keys.length > 0) {
      args.add(SearchKeyword.INKEYS.getRaw());
      args.add(Protocol.toByteArray(_keys.length));
      for (String f : _keys) {
        args.add(SafeEncoder.encode(f));
      }
    }

    if (_returnFields != null && _returnFields.length > 0) {
      args.add(SearchKeyword.RETURN.getRaw());
      args.add(Protocol.toByteArray(_returnFields.length));
      for (String f : _returnFields) {
        args.add(SafeEncoder.encode(f));
      }
    } else if (returnFieldNames != null && returnFieldNames.length > 0) {
      args.add(SearchKeyword.RETURN.getRaw());
//      final int returnCountIndex = args.size();
      LazyRawable returnCountObject = new LazyRawable();
//      args.add(null); // holding a place for setting the total count later.
      args.add(returnCountObject); // holding a place for setting the total count later.
      int returnCount = 0;
      for (FieldName fn : returnFieldNames) {
        returnCount += fn.addCommandArguments(args);
      }
//      args.set(returnCountIndex, Protocol.toByteArray(returnCount));
      returnCountObject.setRaw(Protocol.toByteArray(returnCount));
    }

    if (_params != null && _params.size() > 0) {
      args.add(SearchKeyword.PARAMS.getRaw());
      args.add(_params.size() << 1);
      for (Map.Entry<String, Object> entry : _params.entrySet()) {
        args.add(entry.getKey());
        args.add(entry.getValue());
      }
    }

    if (_dialect != null) {
      args.add(SearchKeyword.DIALECT.getRaw());
      args.add(_dialect);
    }

    if (_slop >= 0) {
      args.add(SearchKeyword.SLOP.getRaw());
      args.add(_slop);
    }

    if (_timeout >= 0) {
      args.add(SearchKeyword.TIMEOUT.getRaw());
      args.add(_timeout);
    }

    if (_inOrder) {
      args.add(SearchKeyword.INORDER.getRaw());
    }

    if (_expander != null) {
      args.add(SearchKeyword.EXPANDER.getRaw());
      args.add(SafeEncoder.encode(_expander));
    }
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,limit,"Query limit(Integer,Integer)","[334, 338]","{'A1': [(334, 338)]}",{'A1': 1.0},A1,,"  public Query limit(Integer offset, Integer limit) {
    _paging.offset = offset;
    _paging.num = limit;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,addFilter,Query addFilter(Filter),"[346, 349]","{'A1': [(346, 349)]}",{'A1': 1.0},A1,,"  public Query addFilter(Filter f) {
    _filters.add(f);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,setVerbatim,Query setVerbatim(),"[356, 359]","{'A1': [(356, 359)]}",{'A1': 1.0},A1,,"  public Query setVerbatim() {
    this._verbatim = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,getNoContent,boolean getNoContent(),"[361, 363]","{'A1': [(361, 363)]}",{'A1': 1.0},A1,,"  public boolean getNoContent() {
    return _noContent;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,setNoContent,Query setNoContent(),"[370, 373]","{'A1': [(370, 373)]}",{'A1': 1.0},A1,,"  public Query setNoContent() {
    this._noContent = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,setNoStopwords,Query setNoStopwords(),"[380, 383]","{'A1': [(380, 383)]}",{'A1': 1.0},A1,,"  public Query setNoStopwords() {
    this._noStopwords = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,getWithScores,boolean getWithScores(),"[385, 387]","{'A1': [(385, 387)]}",{'A1': 1.0},A1,,"  public boolean getWithScores() {
    return _withScores;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,setWithScores,Query setWithScores(),"[395, 398]","{'A1': [(395, 398)]}",{'A1': 1.0},A1,,"  public Query setWithScores() {
    this._withScores = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,setLanguage,Query setLanguage(String),"[409, 412]","{'A1': [(409, 412)]}",{'A1': 1.0},A1,,"  public Query setLanguage(String language) {
    this._language = language;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,setScorer,Query setScorer(String),"[423, 426]","{'A1': [(423, 426)]}",{'A1': 1.0},A1,,"  public Query setScorer(String scorer) {
    this._scorer = scorer;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,limitFields,Query limitFields(),"[434, 437]","{'A1': [(434, 437)]}",{'A1': 1.0},A1,,"  public Query limitFields(String... fields) {
    this._fields = fields;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,limitKeys,Query limitKeys(),"[445, 448]","{'A1': [(445, 448)]}",{'A1': 1.0},A1,,"  public Query limitKeys(String... keys) {
    this._keys = keys;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,returnFields,Query returnFields(),"[456, 460]","{'A1': [(456, 460)]}",{'A1': 1.0},A1,,"  public Query returnFields(String... fields) {
    this._returnFields = fields;
    this.returnFieldNames = null;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,returnFields,Query returnFields(),"[468, 472]","{'A1': [(468, 472)]}",{'A1': 1.0},A1,,"  public Query returnFields(FieldName... fields) {
    this.returnFieldNames = fields;
    this._returnFields = null;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,highlightFields,Query highlightFields(HighlightTags),"[474, 485]","{'A1': [(474, 485)]}",{'A1': 1.0},A1,,"  public Query highlightFields(HighlightTags tags, String... fields) {
    if (fields == null || fields.length > 0) {
      highlightFields = fields;
    }
    if (tags != null) {
      highlightTags = new String[]{tags.open, tags.close};
    } else {
      highlightTags = null;
    }
    wantsHighlight = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,highlightFields,Query highlightFields(),"[487, 489]","{'A1': [(487, 489)]}",{'A1': 1.0},A1,,"  public Query highlightFields(String... fields) {
    return highlightFields(null, fields);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,summarizeFields,"Query summarizeFields(int,int,String)","[491, 500]","{'A1': [(491, 500)]}",{'A1': 1.0},A1,,"  public Query summarizeFields(int contextLen, int fragmentCount, String separator, String... fields) {
    if (fields == null || fields.length > 0) {
      summarizeFields = fields;
    }
    summarizeFragmentLen = contextLen;
    summarizeNumFragments = fragmentCount;
    summarizeSeparator = separator;
    wantsSummarize = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,summarizeFields,Query summarizeFields(),"[502, 504]","{'A1': [(502, 504)]}",{'A1': 1.0},A1,,"  public Query summarizeFields(String... fields) {
    return summarizeFields(-1, -1, null, fields);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,setSortBy,"Query setSortBy(String,boolean)","[513, 517]","{'A1': [(513, 517)]}",{'A1': 1.0},A1,,"  public Query setSortBy(String field, boolean ascending) {
    _sortBy = field;
    _sortAsc = ascending;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,addParam,"Query addParam(String,Object)","[528, 534]","{'A12': [(528, 534)]}",{'A12': 1.0},A12,,"  public Query addParam(String name, Object value) {
    if (_params == null) {
      _params = new HashMap<>();
    }
    _params.put(name, value);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,dialect,Query dialect(int),"[542, 545]","{'A76': [(542, 545)]}",{'A76': 1.0},A76,,"  public Query dialect(int dialect) {
    _dialect = dialect;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,dialectOptional,Query dialectOptional(int),"[552, 557]","{'A1': [(552, 557)]}",{'A1': 1.0},A1,,"  public Query dialectOptional(int dialect) {
    if (dialect != 0 && this._dialect == null) {
      this._dialect = dialect;
    }
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,slop,Query slop(int),"[565, 568]","{'A9': [(565, 568)]}",{'A9': 1.0},A9,,"  public Query slop(int slop) {
    _slop = slop;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,timeout,Query timeout(long),"[576, 579]","{'A9': [(576, 579)]}",{'A9': 1.0},A9,,"  public Query timeout(long timeout) {
    _timeout = timeout;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,setInOrder,Query setInOrder(),"[586, 589]","{'A9': [(586, 589)]}",{'A9': 1.0},A9,,"  public Query setInOrder() {
    this._inOrder = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Query.java,Query,setExpander,Query setExpander(String),"[597, 600]","{'A9': [(597, 600)]}",{'A9': 1.0},A9,,"  public Query setExpander(String field) {
    _expander = field;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,from,Schema from(),"[31, 37]","{'A1': [(31, 37)]}",{'A1': 1.0},A1,,"  public static Schema from(Field... fields) {
    Schema schema = new Schema();
    for (Field field : fields) {
      schema.addField(field);
    }
    return schema;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addTextField,"Schema addTextField(String,double)","[46, 49]","{'A1': [(46, 49)]}",{'A1': 1.0},A1,,"  public Schema addTextField(String name, double weight) {
    fields.add(new TextField(name, weight));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addSortableTextField,"Schema addSortableTextField(String,double)","[58, 61]","{'A1': [(58, 61)]}",{'A1': 1.0},A1,,"  public Schema addSortableTextField(String name, double weight) {
    fields.add(new TextField(name, weight, true));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addGeoField,Schema addGeoField(String),"[69, 72]","{'A1': [(69, 72)]}",{'A1': 1.0},A1,,"  public Schema addGeoField(String name) {
    fields.add(new Field(name, FieldType.GEO, false));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addNumericField,Schema addNumericField(String),"[80, 83]","{'A1': [(80, 83)]}",{'A1': 1.0},A1,,"  public Schema addNumericField(String name) {
    fields.add(new Field(name, FieldType.NUMERIC, false));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addSortableNumericField,Schema addSortableNumericField(String),"[86, 89]","{'A1': [(86, 89)]}",{'A1': 1.0},A1,,"  public Schema addSortableNumericField(String name) {
    fields.add(new Field(name, FieldType.NUMERIC, true));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addTagField,Schema addTagField(String),"[91, 94]","{'A1': [(91, 94)]}",{'A1': 1.0},A1,,"  public Schema addTagField(String name) {
    fields.add(new TagField(name));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addTagField,"Schema addTagField(String,String)","[96, 99]","{'A1': [(96, 99)]}",{'A1': 1.0},A1,,"  public Schema addTagField(String name, String separator) {
    fields.add(new TagField(name, separator));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addTagField,"Schema addTagField(String,boolean)","[101, 104]","{'A1': [(101, 104)]}",{'A1': 1.0},A1,,"  public Schema addTagField(String name, boolean caseSensitive) {
    fields.add(new TagField(name, caseSensitive, false));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addTagField,"Schema addTagField(String,String,boolean)","[106, 109]","{'A1': [(106, 109)]}",{'A1': 1.0},A1,,"  public Schema addTagField(String name, String separator, boolean caseSensitive) {
    fields.add(new TagField(name, separator, caseSensitive, false));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addSortableTagField,"Schema addSortableTagField(String,String)","[111, 114]","{'A1': [(111, 114)]}",{'A1': 1.0},A1,,"  public Schema addSortableTagField(String name, String separator) {
    fields.add(new TagField(name, separator, true));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addSortableTagField,"Schema addSortableTagField(String,boolean)","[116, 119]","{'A1': [(116, 119)]}",{'A1': 1.0},A1,,"  public Schema addSortableTagField(String name, boolean caseSensitive) {
    fields.add(new TagField(name, caseSensitive, true));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addSortableTagField,"Schema addSortableTagField(String,String,boolean)","[121, 124]","{'A1': [(121, 124)]}",{'A1': 1.0},A1,,"  public Schema addSortableTagField(String name, String separator, boolean caseSensitive) {
    fields.add(new TagField(name, separator, caseSensitive, true));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addVectorField,"Schema addVectorField(String,VectorField.VectorAlgo,Map<String, Object>)","[126, 129]","{'A12': [(126, 129)]}",{'A12': 1.0},A12,,"  public Schema addVectorField(String name, VectorField.VectorAlgo algorithm, Map<String, Object> attributes) {
    fields.add(new VectorField(name, algorithm, attributes));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addFlatVectorField,"Schema addFlatVectorField(String,Map<String, Object>)","[131, 134]","{'A12': [(131, 134)]}",{'A12': 1.0},A12,,"  public Schema addFlatVectorField(String name, Map<String, Object> attributes) {
    fields.add(new VectorField(name, VectorField.VectorAlgo.FLAT, attributes));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addHNSWVectorField,"Schema addHNSWVectorField(String,Map<String, Object>)","[136, 139]","{'A12': [(136, 139)]}",{'A12': 1.0},A12,,"  public Schema addHNSWVectorField(String name, Map<String, Object> attributes) {
    fields.add(new VectorField(name, VectorField.VectorAlgo.HNSW, attributes));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,addField,Schema addField(Field),"[141, 144]","{'A1': [(141, 144)]}",{'A1': 1.0},A1,,"  public Schema addField(Field field) {
    fields.add(field);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,as,Schema as(String),"[151, 154]","{'A12': [(151, 154)]}",{'A12': 1.0},A12,,"  public Schema as(String attribute) {
    fields.get(fields.size() - 1).as(attribute);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema,toString,String toString(),"[156, 159]","{'A1': [(156, 159)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return ""Schema{fields="" + fields + ""}"";
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.Field,as,void as(String),"[191, 193]","{'A12': [(191, 193)]}",{'A12': 1.0},A12,,"    public void as(String attribute){
      this.fieldName.as(attribute);
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.Field,addParams,void addParams(CommandArguments),"[195, 206]","{'A1': [(195, 206)]}",{'A1': 1.0},A1,,"    @Override
    public final void addParams(CommandArguments args) {
      this.fieldName.addParams(args);
      args.add(type.name());
      addTypeArgs(args);
      if (sortable) {
        args.add(""SORTABLE"");
      }
      if (noIndex) {
        args.add(""NOINDEX"");
      }
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.Field,addTypeArgs,void addTypeArgs(CommandArguments),"[213, 213]","{'A12': [(213, 213)]}",{'A12': 1.0},A12,,"    protected void addTypeArgs(CommandArguments args) { }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.Field,toString,String toString(),"[215, 218]","{'A1': [(215, 216), (218, 218)], 'A12': [(217, 217)]}","{'A1': 0.75, 'A12': 0.25}",A1,,"    @Override
    public String toString() {
      return ""Field{name='"" + fieldName + ""', type="" + type + "", sortable="" + sortable + "", noindex="" + noIndex + ""}"";
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.TextField,addTypeArgs,void addTypeArgs(CommandArguments),"[268, 281]","{'A1': [(268, 281)]}",{'A1': 1.0},A1,,"    @Override
    protected void addTypeArgs(CommandArguments args) {
      if (weight != 1.0) {
        args.add(""WEIGHT"");
        args.add(Double.toString(weight));
      }
      if (nostem) {
        args.add(""NOSTEM"");
      }
      if (phonetic != null) {
        args.add(""PHONETIC"");
        args.add(this.phonetic);
      }
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.TextField,toString,String toString(),"[283, 287]","{'A1': [(283, 284), (286, 287)], 'A12': [(285, 285)]}","{'A1': 0.8, 'A12': 0.2}",A1,,"    @Override
    public String toString() {
      return ""TextField{name='"" + fieldName + ""', type="" + type + "", sortable="" + sortable + "", noindex="" + noIndex
          + "", weight="" + weight + "", nostem="" + nostem + "", phonetic='"" + phonetic + ""'}"";
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.TagField,addTypeArgs,void addTypeArgs(CommandArguments),"[331, 340]","{'A1': [(331, 340)]}",{'A1': 1.0},A1,,"    @Override
    public void addTypeArgs(CommandArguments args) {
      if (separator != null) {
        args.add(""SEPARATOR"");
        args.add(separator);
      }
      if (caseSensitive) {
        args.add(""CASESENSITIVE"");
      }
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.TagField,toString,String toString(),"[342, 346]","{'A1': [(342, 343), (345, 346)], 'A12': [(344, 344)]}","{'A1': 0.8, 'A12': 0.2}",A1,,"    @Override
    public String toString() {
      return ""TagField{name='"" + fieldName + ""', type="" + type + "", sortable="" + sortable + "", noindex="" + noIndex
          + "", separator='"" + separator + "", caseSensitive='"" + caseSensitive + ""'}"";
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.VectorField,addTypeArgs,void addTypeArgs(CommandArguments),"[365, 373]","{'A1': [(368, 368)], 'A12': [(365, 367), (369, 373)]}","{'A1': 0.1111111111111111, 'A12': 0.8888888888888888}",A12,,"    @Override
    public void addTypeArgs(CommandArguments args) {
      args.add(algorithm);
      args.add(attributes.size() << 1);
      for (Map.Entry<String, Object> entry : attributes.entrySet()) {
        args.add(entry.getKey());
        args.add(entry.getValue());
      }
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Schema.java,Schema.VectorField,toString,String toString(),"[375, 378]","{'A12': [(375, 378)]}",{'A12': 1.0},A12,,"    @Override
    public String toString() {
      return ""VectorField{name='"" + fieldName + ""', type="" + type + "", algorithm="" + algorithm + "", attributes="" + attributes + ""}"";
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FtSearchIteration.java,FtSearchIteration,isNodeCompleted,boolean isNodeCompleted(SearchResult),"[54, 57]","{'A1': [(54, 57)]}",{'A1': 1.0},A1,,"  @Override
  protected boolean isNodeCompleted(SearchResult reply) {
    return batchStart >= reply.getTotalResults() - batchSize;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FtSearchIteration.java,FtSearchIteration,initCommandArguments,CommandArguments initCommandArguments(),"[59, 63]","{'A1': [(59, 63)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments initCommandArguments() {
    batchStart = 0;
    return args.apply(batchStart);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FtSearchIteration.java,FtSearchIteration,nextCommandArguments,CommandArguments nextCommandArguments(SearchResult),"[65, 69]","{'A1': [(65, 69)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments nextCommandArguments(SearchResult lastReply) {
    batchStart += batchSize;
    return args.apply(batchStart);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FtSearchIteration.java,FtSearchIteration,convertBatchToData,Collection<Document> convertBatchToData(SearchResult),"[71, 74]","{'A1': [(71, 74)]}",{'A1': 1.0},A1,,"  @Override
  protected Collection<Document> convertBatchToData(SearchResult batch) {
    return batch.getDocuments();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchCommands.java,,ftCreate,String ftCreate(String),"[18, 20]","{'A1': [(18, 20)]}",{'A1': 1.0},A1,,"  default String ftCreate(String indexName, SchemaField... schemaFields) {
    return ftCreate(indexName, Arrays.asList(schemaFields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchCommands.java,,ftCreate,"String ftCreate(String,FTCreateParams)","[22, 24]","{'A1': [(22, 24)]}",{'A1': 1.0},A1,,"  default String ftCreate(String indexName, FTCreateParams createParams, SchemaField... schemaFields) {
    return ftCreate(indexName, createParams, Arrays.asList(schemaFields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchCommands.java,,ftCreate,"String ftCreate(String,Iterable<SchemaField>)","[26, 28]","{'A1': [(26, 28)]}",{'A1': 1.0},A1,,"  default String ftCreate(String indexName, Iterable<SchemaField> schemaFields) {
    return ftCreate(indexName, FTCreateParams.createParams(), schemaFields);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchCommands.java,,ftAlter,String ftAlter(String),"[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"  default String ftAlter(String indexName, Schema.Field... fields) {
    return ftAlter(indexName, Schema.from(fields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchCommands.java,,ftAlter,String ftAlter(String),"[38, 40]","{'A1': [(38, 40)]}",{'A1': 1.0},A1,,"  default String ftAlter(String indexName, SchemaField... schemaFields) {
    return ftAlter(indexName, Arrays.asList(schemaFields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchCommands.java,,ftSearch,SearchResult ftSearch(String),"[54, 56]","{'A1': [(54, 56)]}",{'A1': 1.0},A1,,"  default SearchResult ftSearch(String indexName) {
    return ftSearch(indexName, ""*"");
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,getProperties,"Iterable<Map.Entry<String, Object>> getProperties()","[50, 52]","{'A1': [(50, 52)]}",{'A1': 1.0},A1,,"  public Iterable<Map.Entry<String, Object>> getProperties() {
    return fields.entrySet();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,getId,String getId(),"[57, 59]","{'A1': [(57, 59)]}",{'A1': 1.0},A1,,"  public String getId() {
    return id;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,getScore,Double getScore(),"[64, 66]","{'A1': [(64, 66)]}",{'A1': 1.0},A1,,"  public Double getScore() {
    return score;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,get,Object get(String),"[75, 77]","{'A1': [(75, 77)]}",{'A1': 1.0},A1,,"  public Object get(String key) {
    return fields.get(key);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,getString,String getString(String),"[86, 97]","{'A1': [(86, 97)]}",{'A1': 1.0},A1,,"  public String getString(String key) {
    Object value = fields.get(key);
    if (value == null) {
      return null;
    } else if (value instanceof String) {
      return (String) value;
    } else if (value instanceof byte[]) {
      return SafeEncoder.encode((byte[]) value);
    } else {
      return String.valueOf(value);
    }
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,hasProperty,boolean hasProperty(String),"[99, 101]","{'A1': [(99, 101)]}",{'A1': 1.0},A1,,"  public boolean hasProperty(String key) {
    return fields.containsKey(key);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,set,"Document set(String,Object)","[104, 107]","{'A1': [(104, 107)]}",{'A1': 1.0},A1,,"  public Document set(String key, Object value) {
    fields.put(key, value);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,setScore,Document setScore(float),"[116, 120]","{'A1': [(116, 120)]}",{'A1': 1.0},A1,,"  @Deprecated
  public Document setScore(float score) {
    this.score = (double) score;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,toString,String toString(),"[122, 126]","{'A1': [(122, 126)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return ""id:"" + this.getId() + "", score: "" + this.getScore() +
            "", properties:"" + this.getProperties();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,load,"Document load(String,double,byte[],List<byte[]>)","[129, 131]","{'A1': [(129, 131)]}",{'A1': 1.0},A1,,"  public static Document load(String id, double score, byte[] payload, List<byte[]> fields) {
    return Document.load(id, score, fields, true);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,load,"Document load(String,double,List<byte[]>,boolean)","[133, 135]","{'A1': [(133, 135)]}",{'A1': 1.0},A1,,"  public static Document load(String id, double score, List<byte[]> fields, boolean decode) {
    return load(id, score, fields, decode, null);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,load,"Document load(String,double,List<byte[]>,boolean,Map<String, Boolean>)","[146, 161]","{'A1': [(146, 161)]}",{'A1': 1.0},A1,,"  public static Document load(String id, double score, List<byte[]> fields, boolean decode,
      Map<String, Boolean> isFieldDecode) {
    Document ret = new Document(id, score);
    if (fields != null) {
      for (int i = 0; i < fields.size(); i += 2) {
        byte[] rawKey = fields.get(i);
        byte[] rawValue = fields.get(i + 1);
        String key = SafeEncoder.encode(rawKey);
        Object value = rawValue == null ? null
            : (decode && (isFieldDecode == null || !Boolean.FALSE.equals(isFieldDecode.get(key))))
            ? SafeEncoder.encode(rawValue) : rawValue;
        ret.set(key, value);
      }
    }
    return ret;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document.PerFieldDecoderDocumentBuilder,build,Document build(Object),"[180, 201]","{'A1': [(180, 201)]}",{'A1': 1.0},A1,,"    @Override
    public Document build(Object data) {
      List<KeyValue> list = (List<KeyValue>) data;
      String id = null;
      Double score = null;
      Map<String, Object> fields = null;
      for (KeyValue kv : list) {
        String key = BuilderFactory.STRING.build(kv.getKey());
        switch (key) {
          case ID_STR:
            id = BuilderFactory.STRING.build(kv.getValue());
            break;
          case SCORE_STR:
            score = BuilderFactory.DOUBLE.build(kv.getValue());
            break;
          case FIELDS_STR:
            fields = makeFieldsMap(isFieldDecode, kv.getValue());
            break;
        }
      }
      return new Document(id, score, fields);
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/Document.java,Document,makeFieldsMap,"Map<String, Object> makeFieldsMap(Map<String, Boolean>,Object)","[204, 218]","{'A1': [(204, 218)]}",{'A1': 1.0},A1,,"  private static Map<String, Object> makeFieldsMap(Map<String, Boolean> isDecode, Object data) {
    if (data == null) return null;

    final List<KeyValue> list = (List) data;

    Map<String, Object> map = new HashMap<>(list.size(), 1f);
    list.stream().filter((kv) -> (kv != null && kv.getKey() != null && kv.getValue() != null))
        .forEach((kv) -> {
          String key = BuilderFactory.STRING.build(kv.getKey());
          map.put(key,
              (Boolean.FALSE.equals(isDecode.get(key)) ? BuilderFactory.RAW_OBJECT
                  : BuilderFactory.AGGRESSIVE_ENCODED_OBJECT).build(kv.getValue()));
        });
    return map;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/ProfilingInfo.java,ProfilingInfo,getProfilingInfo,Object getProfilingInfo(),"[15, 17]","{'A1': [(15, 17)]}",{'A1': 1.0},A1,,"  public Object getProfilingInfo() {
    return profilingInfo;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/ProfilingInfo.java,ProfilingInfo,toString,String toString(),"[19, 22]","{'A1': [(19, 22)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return String.valueOf(profilingInfo);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/ProfilingInfo.java,ProfilingInfo,build,ProfilingInfo build(Object),"[26, 29]","{'A1': [(26, 29)]}",{'A1': 1.0},A1,,"    @Override
    public ProfilingInfo build(Object data) {
      return new ProfilingInfo(AGGRESSIVE_ENCODED_OBJECT.build(data));
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchUtil.java,RediSearchUtil,toStringMap,"Map<String, String> toStringMap(Map<String, Object>)","[23, 25]","{'A1': [(23, 25)]}",{'A1': 1.0},A1,,"  public static Map<String, String> toStringMap(Map<String, Object> input) {
    return toStringMap(input, false);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchUtil.java,RediSearchUtil,toStringMap,"Map<String, String> toStringMap(Map<String, Object>,boolean)","[35, 57]","{'A1': [(35, 57)]}",{'A1': 1.0},A1,,"  public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {
    Map<String, String> output = new HashMap<>(input.size());
    for (Map.Entry<String, Object> entry : input.entrySet()) {
      String key = entry.getKey();
      Object obj = entry.getValue();
      if (key == null || obj == null) {
        throw new NullPointerException(""A null argument cannot be sent to Redis."");
      }
      String str;
      if (obj instanceof byte[]) {
        str = SafeEncoder.encode((byte[]) obj);
      } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {
        redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;
        str = geo.getLongitude() + "","" + geo.getLatitude();
      } else if (obj instanceof String) {
        str = stringEscape ? escape((String) obj) : (String) obj;
      } else {
        str = String.valueOf(obj);
      }
      output.put(key, str);
    }
    return output;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchUtil.java,RediSearchUtil,toByteArray,byte[] toByteArray(float[]),"[66, 70]","{'A1': [(66, 70)]}",{'A1': 1.0},A1,,"  public static byte[] toByteArray(float[] input) {
    byte[] bytes = new byte[Float.BYTES * input.length];
    ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN).asFloatBuffer().put(input);
    return bytes;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchUtil.java,RediSearchUtil,ToByteArray,byte[] ToByteArray(float[]),"[75, 78]","{'A1': [(75, 78)]}",{'A1': 1.0},A1,,"  @Deprecated
  public static byte[] ToByteArray(float[] input) {
    return toByteArray(input);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchUtil.java,RediSearchUtil,escape,String escape(String),"[87, 89]","{'A1': [(87, 89)]}",{'A1': 1.0},A1,,"  public static String escape(String text) {
    return escape(text, false);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchUtil.java,RediSearchUtil,escapeQuery,String escapeQuery(String),"[91, 93]","{'A1': [(91, 93)]}",{'A1': 1.0},A1,,"  public static String escapeQuery(String query) {
    return escape(query, true);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchUtil.java,RediSearchUtil,escape,"String escape(String,boolean)","[95, 107]","{'A1': [(95, 107)]}",{'A1': 1.0},A1,,"  public static String escape(String text, boolean querying) {
    char[] chars = text.toCharArray();

    StringBuilder sb = new StringBuilder();
    for (char ch : chars) {
      if (ESCAPE_CHARS.contains(ch)
          || (querying && ch == ' ')) {
        sb.append(""\\"");
      }
      sb.append(ch);
    }
    return sb.toString();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchUtil.java,RediSearchUtil,unescape,String unescape(String),"[109, 111]","{'A1': [(109, 111)]}",{'A1': 1.0},A1,,"  public static String unescape(String text) {
    return text.replace(""\\"", """");
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/IntersectNode.java,IntersectNode,getJoinString,String getJoinString(),"[9, 12]","{'A132': [(9, 12)]}",{'A132': 1.0},A132,,"  @Override
  protected String getJoinString() {
    return "" "";
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values.ScalableValue,isCombinable,boolean isCombinable(),"[17, 20]","{'A132': [(17, 20)]}",{'A132': 1.0},A132,,"    @Override
    public boolean isCombinable() {
      return true;
    }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,value,Value value(String),"[23, 30]","{'A132': [(23, 30)]}",{'A132': 1.0},A132,,"  public static Value value(String s) {
    return new ScalableValue() {
      @Override
      public String toString() {
        return s;
      }
    };
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,toString,String toString(),"[25, 28]","{'A132': [(25, 28)]}",{'A132': 1.0},A132,,"      @Override
      public String toString() {
        return s;
      }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,geo,"GeoValue geo(GeoCoordinate,double,GeoUnit)","[32, 34]","{'A132': [(32, 34)]}",{'A132': 1.0},A132,,"  public static GeoValue geo(GeoCoordinate coord, double radius, GeoUnit unit) {
    return new GeoValue(coord.getLongitude(), coord.getLatitude(), radius, unit);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,between,"RangeValue between(double,double)","[36, 38]","{'A132': [(36, 38)]}",{'A132': 1.0},A132,,"  public static RangeValue between(double from, double to) {
    return new DoubleRangeValue(from, to);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,between,"RangeValue between(int,int)","[40, 42]","{'A132': [(40, 42)]}",{'A132': 1.0},A132,,"  public static RangeValue between(int from, int to) {
    return new LongRangeValue(from, to);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,eq,RangeValue eq(double),"[46, 48]","{'A132': [(46, 48)]}",{'A132': 1.0},A132,,"  public static RangeValue eq(double d) {
    return new DoubleRangeValue(d, d);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,eq,RangeValue eq(int),"[52, 54]","{'A132': [(52, 54)]}",{'A132': 1.0},A132,,"  public static RangeValue eq(int i) {
    return new LongRangeValue(i, i);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,lt,RangeValue lt(double),"[56, 58]","{'A132': [(56, 58)]}",{'A132': 1.0},A132,,"  public static RangeValue lt(double d) {
    return new DoubleRangeValue(Double.NEGATIVE_INFINITY, d).inclusiveMax(false);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,lt,RangeValue lt(int),"[60, 62]","{'A132': [(60, 62)]}",{'A132': 1.0},A132,,"  public static RangeValue lt(int d) {
    return new LongRangeValue(Long.MIN_VALUE, d).inclusiveMax(false);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,gt,RangeValue gt(double),"[64, 66]","{'A132': [(64, 66)]}",{'A132': 1.0},A132,,"  public static RangeValue gt(double d) {
    return new DoubleRangeValue(d, Double.POSITIVE_INFINITY).inclusiveMin(false);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,gt,RangeValue gt(int),"[68, 70]","{'A132': [(68, 70)]}",{'A132': 1.0},A132,,"  public static RangeValue gt(int d) {
    return new LongRangeValue(d, Long.MAX_VALUE).inclusiveMin(false);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,le,RangeValue le(double),"[72, 74]","{'A132': [(72, 74)]}",{'A132': 1.0},A132,,"  public static RangeValue le(double d) {
    return lt(d).inclusiveMax(true);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,le,RangeValue le(int),"[76, 78]","{'A132': [(76, 78)]}",{'A132': 1.0},A132,,"  public static RangeValue le(int d) {
    return lt(d).inclusiveMax(true);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,ge,RangeValue ge(double),"[80, 82]","{'A132': [(80, 82)]}",{'A132': 1.0},A132,,"  public static RangeValue ge(double d) {
    return gt(d).inclusiveMin(true);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,ge,RangeValue ge(int),"[84, 86]","{'A132': [(84, 86)]}",{'A132': 1.0},A132,,"  public static RangeValue ge(int d) {
    return gt(d).inclusiveMin(true);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,tags,Value tags(),"[88, 102]","{'A132': [(88, 102)]}",{'A132': 1.0},A132,,"  public static Value tags(String... tags) {
    if (tags.length == 0) {
      throw new IllegalArgumentException(""Must have at least one tag"");
    }
    StringJoiner sj = new StringJoiner("" | "");
    for (String s : tags) {
      sj.add(s);
    }
    return new Value() {
      @Override
      public String toString() {
        return ""{"" + sj.toString() + ""}"";
      }
    };
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Values.java,Values,toString,String toString(),"[97, 100]","{'A132': [(97, 100)]}",{'A132': 1.0},A132,,"      @Override
      public String toString() {
        return ""{"" + sj.toString() + ""}"";
      }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/Value.java,Value,isCombinable,boolean isCombinable(),"[7, 9]","{'A132': [(7, 9)]}",{'A132': 1.0},A132,,"  public boolean isCombinable() {
    return false;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/DisjunctUnionNode.java,DisjunctUnionNode,getJoinString,String getJoinString(),"[13, 16]","{'A132': [(13, 16)]}",{'A132': 1.0},A132,,"  @Override
  protected String getJoinString() {
    return ""|"";
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/DisjunctNode.java,DisjunctNode,toString,String toString(Parenthesize),"[15, 23]","{'A132': [(15, 23)]}",{'A132': 1.0},A132,,"  @Override
  public String toString(Parenthesize mode) {
    String ret = super.toString(Parenthesize.NEVER);
    if (shouldParenthesize(mode)) {
      return ""-("" + ret + "")"";
    } else {
      return ""-"" + ret;
    }
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/UnionNode.java,UnionNode,getJoinString,String getJoinString(),"[7, 10]","{'A132': [(7, 10)]}",{'A132': 1.0},A132,,"  @Override
  protected String getJoinString() {
    return ""|"";
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/ValueNode.java,ValueNode,fromStrings,Value[] fromStrings(String[]),"[20, 26]","{'A132': [(20, 26)]}",{'A132': 1.0},A132,,"  private static Value[] fromStrings(String[] values) {
    Value[] objs = new Value[values.length];
    for (int i = 0; i < values.length; i++) {
      objs[i] = Values.value(values[i]);
    }
    return objs;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/ValueNode.java,ValueNode,formatField,String formatField(),"[32, 37]","{'A132': [(32, 37)]}",{'A132': 1.0},A132,,"  private String formatField() {
    if (field == null || field.isEmpty()) {
      return """";
    }
    return '@' + field + ':';
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/ValueNode.java,ValueNode,toStringCombinable,String toStringCombinable(Parenthesize),"[39, 53]","{'A132': [(39, 53)]}",{'A132': 1.0},A132,,"  private String toStringCombinable(Parenthesize mode) {
    StringBuilder sb = new StringBuilder(formatField());
    if (values.length > 1 || mode == Parenthesize.ALWAYS) {
      sb.append('(');
    }
    StringJoiner sj = new StringJoiner(joinString);
    for (Value v : values) {
      sj.add(v.toString());
    }
    sb.append(sj.toString());
    if (values.length > 1 || mode == Parenthesize.ALWAYS) {
      sb.append(')');
    }
    return sb.toString();
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/ValueNode.java,ValueNode,toStringDefault,String toStringDefault(Parenthesize),"[55, 73]","{'A132': [(55, 73)]}",{'A132': 1.0},A132,,"  private String toStringDefault(Parenthesize mode) {
    boolean useParen = mode == Parenthesize.ALWAYS;
    if (!useParen) {
      useParen = mode != Parenthesize.NEVER && values.length > 1;
    }
    StringBuilder sb = new StringBuilder();
    if (useParen) {
      sb.append('(');
    }
    StringJoiner sj = new StringJoiner(joinString);
    for (Value v : values) {
      sj.add(formatField() + v.toString());
    }
    sb.append(sj.toString());
    if (useParen) {
      sb.append(')');
    }
    return sb.toString();
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/ValueNode.java,ValueNode,toString,String toString(Parenthesize),"[75, 81]","{'A132': [(75, 81)]}",{'A132': 1.0},A132,,"  @Override
  public String toString(Parenthesize mode) {
    if (values[0].isCombinable()) {
      return toStringCombinable(mode);
    }
    return toStringDefault(mode);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/LongRangeValue.java,LongRangeValue,isCombinable,boolean isCombinable(),"[8, 11]","{'A132': [(8, 11)]}",{'A132': 1.0},A132,,"  @Override
  public boolean isCombinable() {
    return false;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/LongRangeValue.java,LongRangeValue,appendNum,"void appendNum(StringBuilder,long,boolean)","[13, 24]","{'A132': [(13, 24)]}",{'A132': 1.0},A132,,"  private static void appendNum(StringBuilder sb, long n, boolean inclusive) {
    if (!inclusive) {
      sb.append(""("");
    }
    if (n == Long.MIN_VALUE) {
      sb.append(""-inf"");
    } else if (n == Long.MAX_VALUE) {
      sb.append(""inf"");
    } else {
      sb.append(Long.toString(n));
    }
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/LongRangeValue.java,LongRangeValue,appendFrom,"void appendFrom(StringBuilder,boolean)","[31, 34]","{'A132': [(31, 34)]}",{'A132': 1.0},A132,,"  @Override
  protected void appendFrom(StringBuilder sb, boolean inclusive) {
    appendNum(sb, from, inclusive);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/LongRangeValue.java,LongRangeValue,appendTo,"void appendTo(StringBuilder,boolean)","[36, 39]","{'A132': [(36, 39)]}",{'A132': 1.0},A132,,"  @Override
  protected void appendTo(StringBuilder sb, boolean inclusive) {
    appendNum(sb, to, inclusive);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,intersect,QueryNode intersect(),"[25, 27]","{'A132': [(25, 27)]}",{'A132': 1.0},A132,,"  public static QueryNode intersect(Node... n) {
    return new IntersectNode().add(n);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,intersect,QueryNode intersect(String),"[38, 40]","{'A132': [(38, 40)]}",{'A132': 1.0},A132,,"  public static QueryNode intersect(String field, Value... values) {
    return new IntersectNode().add(field, values);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,intersect,"QueryNode intersect(String,String)","[49, 51]","{'A132': [(49, 51)]}",{'A132': 1.0},A132,,"  public static QueryNode intersect(String field, String stringValue) {
    return intersect(field, value(stringValue));
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,union,QueryNode union(),"[59, 61]","{'A132': [(59, 61)]}",{'A132': 1.0},A132,,"  public static QueryNode union(Node... n) {
    return new UnionNode().add(n);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,union,QueryNode union(String),"[71, 73]","{'A132': [(71, 73)]}",{'A132': 1.0},A132,,"  public static QueryNode union(String field, Value... values) {
    return new UnionNode().add(field, values);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,union,QueryNode union(String),"[83, 85]","{'A132': [(83, 85)]}",{'A132': 1.0},A132,,"  public static QueryNode union(String field, String... values) {
    return union(field, (Value[]) Arrays.stream(values).map(Values::value).toArray());
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,disjunct,QueryNode disjunct(),"[94, 96]","{'A132': [(94, 96)]}",{'A132': 1.0},A132,,"  public static QueryNode disjunct(Node... n) {
    return new DisjunctNode().add(n);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,disjunct,QueryNode disjunct(String),"[106, 108]","{'A132': [(106, 108)]}",{'A132': 1.0},A132,,"  public static QueryNode disjunct(String field, Value... values) {
    return new DisjunctNode().add(field, values);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,disjunct,QueryNode disjunct(String),"[118, 120]","{'A132': [(118, 120)]}",{'A132': 1.0},A132,,"  public static QueryNode disjunct(String field, String... values) {
    return disjunct(field, (Value[]) Arrays.stream(values).map(Values::value).toArray());
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,disjunctUnion,QueryNode disjunctUnion(),"[129, 131]","{'A132': [(129, 131)]}",{'A132': 1.0},A132,,"  public static QueryNode disjunctUnion(Node... n) {
    return new DisjunctUnionNode().add(n);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,disjunctUnion,QueryNode disjunctUnion(String),"[133, 135]","{'A132': [(133, 135)]}",{'A132': 1.0},A132,,"  public static QueryNode disjunctUnion(String field, Value... values) {
    return new DisjunctUnionNode().add(field, values);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,disjunctUnion,QueryNode disjunctUnion(String),"[137, 139]","{'A132': [(137, 139)]}",{'A132': 1.0},A132,,"  public static QueryNode disjunctUnion(String field, String... values) {
    return disjunctUnion(field, (Value[]) Arrays.stream(values).map(Values::value).toArray());
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,optional,QueryNode optional(),"[148, 150]","{'A132': [(148, 150)]}",{'A132': 1.0},A132,,"  public static QueryNode optional(Node... n) {
    return new OptionalNode().add(n);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryBuilders.java,QueryBuilders,optional,QueryNode optional(String),"[152, 154]","{'A132': [(152, 154)]}",{'A132': 1.0},A132,,"  public static QueryNode optional(String field, Value... values) {
    return new OptionalNode().add(field, values);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/OptionalNode.java,OptionalNode,toString,String toString(Parenthesize),"[14, 21]","{'A132': [(14, 21)]}",{'A132': 1.0},A132,,"  @Override
  public String toString(Parenthesize mode) {
    String ret = super.toString(Parenthesize.NEVER);
    if (shouldParenthesize(mode)) {
      return ""~("" + ret + "")"";
    }
    return ""~"" + ret;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryNode.java,QueryNode,add,QueryNode add(String),"[22, 25]","{'A132': [(22, 25)]}",{'A132': 1.0},A132,,"  public QueryNode add(String field, Value... values) {
    children.add(new ValueNode(field, getJoinString(), values));
    return this;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryNode.java,QueryNode,add,QueryNode add(String),"[34, 37]","{'A132': [(34, 37)]}",{'A132': 1.0},A132,,"  public QueryNode add(String field, String... values) {
    children.add(new ValueNode(field, getJoinString(), values));
    return this;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryNode.java,QueryNode,add,"QueryNode add(String,Collection<Value>)","[46, 48]","{'A132': [(46, 48)]}",{'A132': 1.0},A132,,"  public QueryNode add(String field, Collection<Value> values) {
    return add(field, values.toArray(new Value[0]));
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryNode.java,QueryNode,add,QueryNode add(),"[56, 59]","{'A132': [(56, 59)]}",{'A132': 1.0},A132,,"  public QueryNode add(Node... nodes) {
    children.addAll(Arrays.asList(nodes));
    return this;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryNode.java,QueryNode,shouldParenthesize,boolean shouldParenthesize(Parenthesize),"[61, 69]","{'A132': [(61, 63), (65, 65), (68, 69)], 'A1': [(64, 64), (66, 67)]}","{'A132': 0.6666666666666666, 'A1': 0.3333333333333333}",A132,,"  protected boolean shouldParenthesize(Parenthesize mode) {
    if (mode == Parenthesize.ALWAYS) {
      return true;
    } else if (mode == Parenthesize.NEVER) {
      return false;
    } else {
      return children.size() > 1;
    }
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryNode.java,QueryNode,toString,String toString(Parenthesize),"[71, 86]","{'A132': [(71, 86)]}",{'A132': 1.0},A132,,"  @Override
  public String toString(Parenthesize parenMode) {
    StringBuilder sb = new StringBuilder();
    StringJoiner sj = new StringJoiner(getJoinString());
    if (shouldParenthesize(parenMode)) {
      sb.append('(');
    }
    for (Node n : children) {
      sj.add(n.toString(parenMode));
    }
    sb.append(sj.toString());
    if (shouldParenthesize(parenMode)) {
      sb.append(')');
    }
    return sb.toString();
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/QueryNode.java,QueryNode,toString,String toString(),"[88, 91]","{'A132': [(88, 91)]}",{'A132': 1.0},A132,,"  @Override
  public String toString() {
    return toString(Parenthesize.DEFAULT);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/DoubleRangeValue.java,DoubleRangeValue,appendNum,"void appendNum(StringBuilder,double,boolean)","[11, 22]","{'A132': [(11, 22)]}",{'A132': 1.0},A132,,"  private static void appendNum(StringBuilder sb, double n, boolean inclusive) {
    if (!inclusive) {
      sb.append(""("");
    }
    if (n == Double.NEGATIVE_INFINITY) {
      sb.append(""-inf"");
    } else if (n == Double.POSITIVE_INFINITY) {
      sb.append(""inf"");
    } else {
      sb.append(n);
    }
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/DoubleRangeValue.java,DoubleRangeValue,appendFrom,"void appendFrom(StringBuilder,boolean)","[29, 32]","{'A132': [(29, 32)]}",{'A132': 1.0},A132,,"  @Override
  protected void appendFrom(StringBuilder sb, boolean inclusive) {
    appendNum(sb, from, inclusive);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/DoubleRangeValue.java,DoubleRangeValue,appendTo,"void appendTo(StringBuilder,boolean)","[34, 37]","{'A132': [(34, 37)]}",{'A132': 1.0},A132,,"  @Override
  protected void appendTo(StringBuilder sb, boolean inclusive) {
    appendNum(sb, to, inclusive);
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/RangeValue.java,RangeValue,isCombinable,boolean isCombinable(),"[11, 14]","{'A132': [(11, 14)]}",{'A132': 1.0},A132,,"  @Override
  public boolean isCombinable() {
    return false;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/RangeValue.java,RangeValue,toString,String toString(),"[20, 29]","{'A132': [(20, 29)]}",{'A132': 1.0},A132,,"  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append('[');
    appendFrom(sb, inclusiveMin);
    sb.append(' ');
    appendTo(sb, inclusiveMax);
    sb.append(']');
    return sb.toString();
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/RangeValue.java,RangeValue,inclusiveMin,RangeValue inclusiveMin(boolean),"[31, 34]","{'A132': [(31, 34)]}",{'A132': 1.0},A132,,"  public RangeValue inclusiveMin(boolean val) {
    inclusiveMin = val;
    return this;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/RangeValue.java,RangeValue,inclusiveMax,RangeValue inclusiveMax(boolean),"[36, 39]","{'A132': [(36, 39)]}",{'A132': 1.0},A132,,"  public RangeValue inclusiveMax(boolean val) {
    inclusiveMax = val;
    return this;
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/GeoValue.java,GeoValue,toString,String toString(),"[23, 27]","{'A132': [(23, 27)]}",{'A132': 1.0},A132,,"  @Override
  public String toString() {
    return ""["" + lon + "" "" + lat + "" "" + radius
        + "" "" + unit.name().toLowerCase(Locale.ENGLISH) + ""]"";
  }
"
redis.clients.jedis.search.querybuilder,../projects/jedis/src/main/java/redis/clients/jedis/search/querybuilder/GeoValue.java,GeoValue,isCombinable,boolean isCombinable(),"[29, 32]","{'A132': [(29, 32)]}",{'A132': 1.0},A132,,"  @Override
  public boolean isCombinable() {
    return false;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexOptions.java,IndexOptions,defaultOptions,IndexOptions defaultOptions(),"[55, 57]","{'A1': [(55, 57)]}",{'A1': 1.0},A1,,"  public static IndexOptions defaultOptions() {
    return new IndexOptions(DEFAULT_FLAGS);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexOptions.java,IndexOptions,setStopwords,IndexOptions setStopwords(),"[65, 68]","{'A1': [(65, 68)]}",{'A1': 1.0},A1,,"  public IndexOptions setStopwords(String... stopwords) {
    this.stopwords = Arrays.asList(stopwords);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexOptions.java,IndexOptions,setNoStopwords,IndexOptions setNoStopwords(),"[75, 78]","{'A1': [(75, 78)]}",{'A1': 1.0},A1,,"  public IndexOptions setNoStopwords() {
    stopwords = new ArrayList<>(0);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexOptions.java,IndexOptions,setTemporary,IndexOptions setTemporary(long),"[86, 89]","{'A1': [(86, 89)]}",{'A1': 1.0},A1,,"  public IndexOptions setTemporary(long expire) {
    this.expire = expire;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexOptions.java,IndexOptions,getDefinition,IndexDefinition getDefinition(),"[91, 93]","{'A1': [(91, 93)]}",{'A1': 1.0},A1,,"  public IndexDefinition getDefinition() {
    return definition;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexOptions.java,IndexOptions,setDefinition,IndexOptions setDefinition(IndexDefinition),"[95, 98]","{'A1': [(95, 98)]}",{'A1': 1.0},A1,,"  public IndexOptions setDefinition(IndexDefinition definition) {
    this.definition = definition;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexOptions.java,IndexOptions,addParams,void addParams(CommandArguments),"[100, 128]","{'A1': [(100, 128)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (definition != null) {
      definition.addParams(args);
    }

    if ((flags & USE_TERM_OFFSETS) == 0) {
      args.add(SearchKeyword.NOOFFSETS.name());
    }
    if ((flags & KEEP_FIELD_FLAGS) == 0) {
      args.add(SearchKeyword.NOFIELDS.name());
    }
    if ((flags & KEEP_TERM_FREQUENCIES) == 0) {
      args.add(SearchKeyword.NOFREQS.name());
    }
    if (expire > 0) {
      args.add(SearchKeyword.TEMPORARY.name());
      args.add(Long.toString(this.expire));
    }

    if (stopwords != null) {
      args.add(SearchKeyword.STOPWORDS.name());
      args.add(Integer.toString(stopwords.size()));
      if (!stopwords.isEmpty()) {
        args.addObjects(stopwords);
      }
    }
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FieldName.java,FieldName,as,FieldName as(String),"[22, 31]","{'A1': [(23, 28)], 'A12': [(22, 22), (29, 31)]}","{'A1': 0.6, 'A12': 0.4}",A1,,"  public FieldName as(String attribute) {
    if (attribute == null) {
      throw new IllegalArgumentException(""Setting null as field attribute is not allowed."");
    }
    if (this.attribute != null) {
      throw new IllegalStateException(""Attribute for this field is already set."");
    }
    this.attribute = attribute;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FieldName.java,FieldName,getName,String getName(),"[33, 35]","{'A1': [(33, 35)]}",{'A1': 1.0},A1,,"  public final String getName() {
    return name;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FieldName.java,FieldName,getAttribute,String getAttribute(),"[37, 39]","{'A1': [(37, 39)]}",{'A1': 1.0},A1,,"  public final String getAttribute() {
    return attribute;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FieldName.java,FieldName,addCommandArguments,int addCommandArguments(List<Object>),"[41, 50]","{'A1': [(41, 50)]}",{'A1': 1.0},A1,,"  public int addCommandArguments(List<Object> args) {
    args.add(name);
    if (attribute == null) {
      return 1;
    }

    args.add(SearchKeyword.AS);
    args.add(attribute);
    return 3;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FieldName.java,FieldName,addCommandArguments,int addCommandArguments(CommandArguments),"[52, 61]","{'A1': [(52, 61)]}",{'A1': 1.0},A1,,"  public int addCommandArguments(CommandArguments args) {
    args.add(name);
    if (attribute == null) {
      return 1;
    }

    args.add(SearchKeyword.AS);
    args.add(attribute);
    return 3;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FieldName.java,FieldName,addParams,void addParams(CommandArguments),"[63, 66]","{'A1': [(63, 66)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {
    addCommandArguments(args);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FieldName.java,FieldName,toString,String toString(),"[68, 71]","{'A1': [(68, 71)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return attribute == null ? name : (name + "" AS "" + attribute);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FieldName.java,FieldName,of,FieldName of(String),"[73, 75]","{'A1': [(73, 75)]}",{'A1': 1.0},A1,,"  public static FieldName of(String name) {
    return new FieldName(name);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FieldName.java,FieldName,convert,FieldName[] convert(),"[77, 86]","{'A1': [(77, 86)]}",{'A1': 1.0},A1,,"  public static FieldName[] convert(String... names) {
    if (names == null) {
      return null;
    }
    FieldName[] fields = new FieldName[names.length];
    for (int i = 0; i < names.length; i++) {
      fields[i] = FieldName.of(names[i]);
    }
    return fields;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,getType,Type getType(),"[34, 36]","{'A1': [(34, 36)]}",{'A1': 1.0},A1,,"  public Type getType() {
    return type;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,getPrefixes,String[] getPrefixes(),"[38, 40]","{'A1': [(38, 40)]}",{'A1': 1.0},A1,,"  public String[] getPrefixes() {
    return prefixes;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,setPrefixes,IndexDefinition setPrefixes(),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"  public IndexDefinition setPrefixes(String... prefixes) {
    this.prefixes = prefixes;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,getFilter,String getFilter(),"[47, 49]","{'A1': [(47, 49)]}",{'A1': 1.0},A1,,"  public String getFilter() {
    return filter;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,setFilter,IndexDefinition setFilter(String),"[51, 54]","{'A1': [(51, 54)]}",{'A1': 1.0},A1,,"  public IndexDefinition setFilter(String filter) {
    this.filter = filter;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,getLanguageField,String getLanguageField(),"[56, 58]","{'A1': [(56, 58)]}",{'A1': 1.0},A1,,"  public String getLanguageField() {
    return languageField;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,setLanguageField,IndexDefinition setLanguageField(String),"[60, 63]","{'A1': [(60, 63)]}",{'A1': 1.0},A1,,"  public IndexDefinition setLanguageField(String languageField) {
    this.languageField = languageField;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,getLanguage,String getLanguage(),"[65, 67]","{'A1': [(65, 67)]}",{'A1': 1.0},A1,,"  public String getLanguage() {
    return language;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,setLanguage,IndexDefinition setLanguage(String),"[69, 72]","{'A1': [(69, 72)]}",{'A1': 1.0},A1,,"  public IndexDefinition setLanguage(String language) {
    this.language = language;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,getScoreFiled,String getScoreFiled(),"[74, 76]","{'A1': [(74, 76)]}",{'A1': 1.0},A1,,"  public String getScoreFiled() {
    return scoreFiled;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,setScoreFiled,IndexDefinition setScoreFiled(String),"[78, 81]","{'A1': [(78, 81)]}",{'A1': 1.0},A1,,"  public IndexDefinition setScoreFiled(String scoreFiled) {
    this.scoreFiled = scoreFiled;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,getScore,double getScore(),"[83, 85]","{'A1': [(83, 85)]}",{'A1': 1.0},A1,,"  public double getScore() {
    return score;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,setScore,IndexDefinition setScore(double),"[87, 90]","{'A1': [(87, 90)]}",{'A1': 1.0},A1,,"  public IndexDefinition setScore(double score) {
    this.score = score;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/IndexDefinition.java,IndexDefinition,addParams,void addParams(CommandArguments),"[92, 130]","{'A1': [(92, 130)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (type != null) {
      args.add(SearchKeyword.ON.name());
      args.add(type.name());
    }

    if (prefixes != null && prefixes.length > 0) {
      args.add(SearchKeyword.PREFIX.name());
      args.add(Integer.toString(prefixes.length));
      args.addObjects((Object[]) prefixes);
    }

    if (filter != null) {
      args.add(SearchKeyword.FILTER.name());
      args.add(filter);
    }

    if (languageField != null) {
      args.add(SearchKeyword.LANGUAGE_FIELD.name());
      args.add(languageField);
    }

    if (language != null) {
      args.add(SearchKeyword.LANGUAGE.name());
      args.add(language);
    }

    if (scoreFiled != null) {
      args.add(SearchKeyword.SCORE_FIELD.name());
      args.add(scoreFiled);
    }

    if (score != 1.0) {
      args.add(SearchKeyword.SCORE.name());
      args.add(Double.toString(score));
    }
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSpellCheckParams.java,FTSpellCheckParams,spellCheckParams,FTSpellCheckParams spellCheckParams(),"[27, 29]","{'A1': [(27, 29)]}",{'A1': 1.0},A1,,"  public static FTSpellCheckParams spellCheckParams() {
    return new FTSpellCheckParams();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSpellCheckParams.java,FTSpellCheckParams,includeTerm,FTSpellCheckParams includeTerm(String),"[34, 36]","{'A1': [(34, 36)]}",{'A1': 1.0},A1,,"  public FTSpellCheckParams includeTerm(String dictionary) {
    return addTerm(dictionary, INCLUDE);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSpellCheckParams.java,FTSpellCheckParams,excludeTerm,FTSpellCheckParams excludeTerm(String),"[41, 43]","{'A1': [(41, 43)]}",{'A1': 1.0},A1,,"  public FTSpellCheckParams excludeTerm(String dictionary) {
    return addTerm(dictionary, EXCLUDE);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSpellCheckParams.java,FTSpellCheckParams,addTerm,"FTSpellCheckParams addTerm(String,Rawable)","[48, 54]","{'A1': [(48, 54)]}",{'A1': 1.0},A1,,"  private FTSpellCheckParams addTerm(String dictionary, Rawable type) {
    if (this.terms == null) {
      this.terms = new ArrayList<>();
    }
    this.terms.add(KeyValue.of(dictionary, type));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSpellCheckParams.java,FTSpellCheckParams,distance,FTSpellCheckParams distance(int),"[59, 62]","{'A1': [(59, 62)]}",{'A1': 1.0},A1,,"  public FTSpellCheckParams distance(int distance) {
    this.distance = distance;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSpellCheckParams.java,FTSpellCheckParams,dialect,FTSpellCheckParams dialect(int),"[67, 70]","{'A1': [(67, 70)]}",{'A1': 1.0},A1,,"  public FTSpellCheckParams dialect(int dialect) {
    this.dialect = dialect;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSpellCheckParams.java,FTSpellCheckParams,dialectOptional,FTSpellCheckParams dialectOptional(int),"[77, 82]","{'A1': [(77, 82)]}",{'A1': 1.0},A1,,"  public FTSpellCheckParams dialectOptional(int dialect) {
    if (dialect != 0 && this.dialect == null) {
      this.dialect = dialect;
    }
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSpellCheckParams.java,FTSpellCheckParams,addParams,void addParams(CommandArguments),"[84, 98]","{'A1': [(84, 98)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (terms != null) {
      terms.forEach(kv -> args.add(TERMS).add(kv.getValue()).add(kv.getKey()));
    }

    if (distance != null) {
      args.add(DISTANCE).add(distance);
    }

    if (dialect != null) {
      args.add(DIALECT).add(dialect);
    }
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Group.java,Group,reduce,Group reduce(Reducer),"[19, 22]","{'A1': [(19, 22)]}",{'A1': 1.0},A1,,"  public Group reduce(Reducer r) {
    reducers.add(r);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Group.java,Group,addArgs,void addArgs(List<Object>),"[24, 30]","{'A1': [(24, 30)]}",{'A1': 1.0},A1,,"  public void addArgs(List<Object> args) {

    args.add(fields.size());
    args.addAll(fields);

    reducers.forEach((r) -> r.addArgs(args));
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/SortedField.java,SortedField,getOrder,String getOrder(),"[20, 22]","{'A1': [(20, 22)]}",{'A1': 1.0},A1,,"  public final String getOrder() {
    return sortOrder.toString();
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/SortedField.java,SortedField,getField,String getField(),"[24, 26]","{'A1': [(24, 26)]}",{'A1': 1.0},A1,,"  public final String getField() {
    return fieldName;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/SortedField.java,SortedField,asc,SortedField asc(String),"[28, 30]","{'A1': [(28, 30)]}",{'A1': 1.0},A1,,"  public static SortedField asc(String field) {
    return new SortedField(field, SortOrder.ASC);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/SortedField.java,SortedField,desc,SortedField desc(String),"[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"  public static SortedField desc(String field) {
    return new SortedField(field, SortOrder.DESC);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/FtAggregateIteration.java,FtAggregateIteration,isNodeCompleted,boolean isNodeCompleted(AggregationResult),"[28, 31]","{'A1': [(28, 31)]}",{'A1': 1.0},A1,,"  @Override
  protected boolean isNodeCompleted(AggregationResult reply) {
    return reply.getCursorId() == 0L;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/FtAggregateIteration.java,FtAggregateIteration,initCommandArguments,CommandArguments initCommandArguments(),"[33, 36]","{'A1': [(33, 36)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments initCommandArguments() {
    return args;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/FtAggregateIteration.java,FtAggregateIteration,nextCommandArguments,CommandArguments nextCommandArguments(AggregationResult),"[38, 42]","{'A1': [(38, 42)]}",{'A1': 1.0},A1,,"  @Override
  protected CommandArguments nextCommandArguments(AggregationResult lastReply) {
    return new CommandArguments(SearchProtocol.SearchCommand.CURSOR).add(SearchProtocol.SearchKeyword.READ)
        .add(indexName).add(lastReply.getCursorId());
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/FtAggregateIteration.java,FtAggregateIteration,convertBatchToData,Collection<Row> convertBatchToData(AggregationResult),"[44, 47]","{'A1': [(44, 47)]}",{'A1': 1.0},A1,,"  @Override
  protected Collection<Row> convertBatchToData(AggregationResult batch) {
    return batch.getRows();
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationResult.java,AggregationResult,setCursorId,void setCursorId(Long),"[36, 38]","{'A1': [(36, 38)]}",{'A1': 1.0},A1,,"  private void setCursorId(Long cursorId) {
    this.cursorId = cursorId;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationResult.java,AggregationResult,getCursorId,Long getCursorId(),"[40, 42]","{'A1': [(40, 42)]}",{'A1': 1.0},A1,,"  public Long getCursorId() {
    return cursorId;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationResult.java,AggregationResult,getTotalResults,long getTotalResults(),"[44, 46]","{'A1': [(44, 46)]}",{'A1': 1.0},A1,,"  public long getTotalResults() {
    return totalResults;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationResult.java,AggregationResult,getResults,"List<Map<String, Object>> getResults()","[48, 50]","{'A1': [(48, 50)]}",{'A1': 1.0},A1,,"  public List<Map<String, Object>> getResults() {
    return Collections.unmodifiableList(results);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationResult.java,AggregationResult,getRows,List<Row> getRows(),"[56, 58]","{'A1': [(56, 58)]}",{'A1': 1.0},A1,,"  public List<Row> getRows() {
    return results.stream().map(Row::new).collect(Collectors.toList());
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationResult.java,AggregationResult,getRow,Row getRow(int),"[60, 62]","{'A1': [(60, 62)]}",{'A1': 1.0},A1,,"  public Row getRow(int index) {
    return new Row(results.get(index));
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationResult.java,AggregationResult,getWarnings,List<String> getWarnings(),"[64, 66]","{'A1': [(64, 66)]}",{'A1': 1.0},A1,,"  public List<String> getWarnings() {
    return warnings;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationResult.java,AggregationResult,build,AggregationResult build(Object),"[76, 132]","{'A1': [(76, 132)]}",{'A1': 1.0},A1,,"    @Override
    public AggregationResult build(Object data) {
      // return new AggregationResult(data);
      List list = (List) data;

      if (list.get(0) instanceof KeyValue) {
        List<KeyValue> kvList = (List<KeyValue>) data;
        long totalResults = -1;
        List<Map<String, Object>> results = null;
        List<String> warnings = null;
        for (KeyValue kv : kvList) {
          String key = BuilderFactory.STRING.build(kv.getKey());
          Object rawVal = kv.getValue();
          switch (key) {
            case TOTAL_RESULTS_STR:
              totalResults = BuilderFactory.LONG.build(rawVal);
              break;
            case RESULTS_STR:
              List<List<KeyValue>> resList = (List<List<KeyValue>>) rawVal;
              results = new ArrayList<>(resList.size());
              for (List<KeyValue> rikv : resList) {
                for (KeyValue ikv : rikv) {
                  if (FIELDS_STR.equals(BuilderFactory.STRING.build(ikv.getKey()))) {
                    results.add(BuilderFactory.ENCODED_OBJECT_MAP.build(ikv.getValue()));
                    break;
                  }
                }
              }
              break;
            case WARNINGS_STR:
              warnings = BuilderFactory.STRING_LIST.build(rawVal);
              break;
          }
        }
        return new AggregationResult(totalResults, results, warnings);
      }

      list = (List<Object>) SafeEncoder.encodeObject(data);

      // the first element is always the number of results
      long totalResults = (Long) list.get(0);
      List<Map<String, Object>> results = new ArrayList<>(list.size() - 1);

      for (int i = 1; i < list.size(); i++) {
        List<Object> mapList = (List<Object>) list.get(i);
        Map<String, Object> map = new HashMap<>(mapList.size() / 2, 1f);
        for (int j = 0; j < mapList.size(); j += 2) {
          Object r = mapList.get(j);
          if (r instanceof JedisDataException) {
            throw (JedisDataException) r;
          }
          map.put((String) r, mapList.get(j + 1));
        }
        results.add(map);
      }
      return new AggregationResult(totalResults, results);
    }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationResult.java,AggregationResult,build,AggregationResult build(Object),"[136, 143]","{'A1': [(136, 143)]}",{'A1': 1.0},A1,,"    @Override
    public AggregationResult build(Object data) {
      List<Object> list = (List<Object>) data;
      // return new AggregationResult(list.get(0), (long) list.get(1));
      AggregationResult r = SEARCH_AGGREGATION_RESULT.build(list.get(0));
      r.setCursorId((Long) list.get(1));
      return r;
    }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,load,AggregationBuilder load(),"[34, 36]","{'A1': [(34, 36)]}",{'A1': 1.0},A1,,"  public AggregationBuilder load(String... fields) {
    return load(FieldName.convert(fields));
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,load,AggregationBuilder load(),"[38, 48]","{'A1': [(38, 48)]}",{'A1': 1.0},A1,,"  public AggregationBuilder load(FieldName... fields) {
    aggrArgs.add(SearchKeyword.LOAD);
    LazyRawable rawLoadCount = new LazyRawable();
    aggrArgs.add(rawLoadCount);
    int loadCount = 0;
    for (FieldName fn : fields) {
      loadCount += fn.addCommandArguments(aggrArgs);
    }
    rawLoadCount.setRaw(Protocol.toByteArray(loadCount));
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,loadAll,AggregationBuilder loadAll(),"[50, 54]","{'A1': [(50, 54)]}",{'A1': 1.0},A1,,"  public AggregationBuilder loadAll() {
    aggrArgs.add(SearchKeyword.LOAD);
    aggrArgs.add(Protocol.BYTES_ASTERISK);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,limit,"AggregationBuilder limit(int,int)","[56, 61]","{'A1': [(56, 61)]}",{'A1': 1.0},A1,,"  public AggregationBuilder limit(int offset, int count) {
    aggrArgs.add(SearchKeyword.LIMIT);
    aggrArgs.add(offset);
    aggrArgs.add(count);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,limit,AggregationBuilder limit(int),"[63, 65]","{'A1': [(63, 65)]}",{'A1': 1.0},A1,,"  public AggregationBuilder limit(int count) {
    return limit(0, count);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,sortBy,AggregationBuilder sortBy(),"[67, 75]","{'A1': [(67, 75)]}",{'A1': 1.0},A1,,"  public AggregationBuilder sortBy(SortedField... fields) {
    aggrArgs.add(SearchKeyword.SORTBY);
    aggrArgs.add(fields.length << 1);
    for (SortedField field : fields) {
      aggrArgs.add(field.getField());
      aggrArgs.add(field.getOrder());
    }
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,sortByAsc,AggregationBuilder sortByAsc(String),"[77, 79]","{'A1': [(77, 79)]}",{'A1': 1.0},A1,,"  public AggregationBuilder sortByAsc(String field) {
    return sortBy(SortedField.asc(field));
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,sortByDesc,AggregationBuilder sortByDesc(String),"[81, 83]","{'A1': [(81, 83)]}",{'A1': 1.0},A1,,"  public AggregationBuilder sortByDesc(String field) {
    return sortBy(SortedField.desc(field));
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,sortByMax,AggregationBuilder sortByMax(int),"[93, 97]","{'A1': [(93, 97)]}",{'A1': 1.0},A1,,"  public AggregationBuilder sortByMax(int max) {
    aggrArgs.add(SearchKeyword.MAX);
    aggrArgs.add(max);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,sortBy,AggregationBuilder sortBy(int),"[106, 110]","{'A1': [(106, 110)]}",{'A1': 1.0},A1,,"  public AggregationBuilder sortBy(int max, SortedField... fields) {
    sortBy(fields);
    sortByMax(max);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,apply,"AggregationBuilder apply(String,String)","[112, 118]","{'A1': [(112, 118)]}",{'A1': 1.0},A1,,"  public AggregationBuilder apply(String projection, String alias) {
    aggrArgs.add(SearchKeyword.APPLY);
    aggrArgs.add(projection);
    aggrArgs.add(SearchKeyword.AS);
    aggrArgs.add(alias);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,groupBy,AggregationBuilder groupBy(Group),"[120, 124]","{'A1': [(120, 124)]}",{'A1': 1.0},A1,,"  public AggregationBuilder groupBy(Group group) {
    aggrArgs.add(SearchKeyword.GROUPBY);
    group.addArgs(aggrArgs);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,groupBy,"AggregationBuilder groupBy(Collection<String>,Collection<Reducer>)","[126, 132]","{'A1': [(126, 132)]}",{'A1': 1.0},A1,,"  public AggregationBuilder groupBy(Collection<String> fields, Collection<Reducer> reducers) {
    String[] fieldsArr = new String[fields.size()];
    Group g = new Group(fields.toArray(fieldsArr));
    reducers.forEach((r) -> g.reduce(r));
    groupBy(g);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,groupBy,AggregationBuilder groupBy(String),"[134, 136]","{'A1': [(134, 136)]}",{'A1': 1.0},A1,,"  public AggregationBuilder groupBy(String field, Reducer... reducers) {
    return groupBy(Collections.singletonList(field), Arrays.asList(reducers));
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,filter,AggregationBuilder filter(String),"[138, 142]","{'A1': [(138, 142)]}",{'A1': 1.0},A1,,"  public AggregationBuilder filter(String expression) {
    aggrArgs.add(SearchKeyword.FILTER);
    aggrArgs.add(expression);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,cursor,AggregationBuilder cursor(int),"[144, 150]","{'A1': [(144, 150)]}",{'A1': 1.0},A1,,"  public AggregationBuilder cursor(int count) {
    isWithCursor = true;
    aggrArgs.add(SearchKeyword.WITHCURSOR);
    aggrArgs.add(SearchKeyword.COUNT);
    aggrArgs.add(count);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,cursor,"AggregationBuilder cursor(int,long)","[152, 160]","{'A1': [(152, 160)]}",{'A1': 1.0},A1,,"  public AggregationBuilder cursor(int count, long maxIdle) {
    isWithCursor = true;
    aggrArgs.add(SearchKeyword.WITHCURSOR);
    aggrArgs.add(SearchKeyword.COUNT);
    aggrArgs.add(count);
    aggrArgs.add(SearchKeyword.MAXIDLE);
    aggrArgs.add(maxIdle);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,verbatim,AggregationBuilder verbatim(),"[162, 165]","{'A1': [(163, 163)], 'A9': [(162, 162), (164, 165)]}","{'A1': 0.25, 'A9': 0.75}",A9,,"  public AggregationBuilder verbatim() {
    aggrArgs.add(SearchKeyword.VERBATIM);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,timeout,AggregationBuilder timeout(long),"[167, 171]","{'A1': [(168, 169)], 'A9': [(167, 167), (170, 171)]}","{'A1': 0.4, 'A9': 0.6}",A9,,"  public AggregationBuilder timeout(long timeout) {
    aggrArgs.add(SearchKeyword.TIMEOUT);
    aggrArgs.add(timeout);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,addScores,AggregationBuilder addScores(),"[173, 176]","{'A49': [(173, 176)]}",{'A49': 1.0},A49,,"  public AggregationBuilder addScores() {
    aggrArgs.add(SearchKeyword.ADDSCORES);
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,params,"AggregationBuilder params(Map<String, Object>)","[178, 186]","{'A1': [(179, 184)], 'A9': [(178, 178), (185, 186)]}","{'A1': 0.6666666666666666, 'A9': 0.3333333333333333}",A1,,"  public AggregationBuilder params(Map<String, Object> params) {
    aggrArgs.add(SearchKeyword.PARAMS);
    aggrArgs.add(params.size() << 1);
    params.forEach((k, v) -> {
      aggrArgs.add(k);
      aggrArgs.add(v);
    });
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,dialect,AggregationBuilder dialect(int),"[188, 191]","{'A1': [(189, 189)], 'A9': [(188, 188), (190, 191)]}","{'A1': 0.25, 'A9': 0.75}",A9,,"  public AggregationBuilder dialect(int dialect) {
    this.dialect = dialect;
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,dialectOptional,AggregationBuilder dialectOptional(int),"[198, 203]","{'A1': [(198, 203)]}",{'A1': 1.0},A1,,"  public AggregationBuilder dialectOptional(int dialect) {
    if (dialect != 0 && this.dialect == null) {
      this.dialect = dialect;
    }
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,isWithCursor,boolean isWithCursor(),"[205, 207]","{'A1': [(205, 207)]}",{'A1': 1.0},A1,,"  public boolean isWithCursor() {
    return isWithCursor;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/AggregationBuilder.java,AggregationBuilder,addParams,void addParams(CommandArguments),"[209, 215]","{'A1': [(209, 215)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments commArgs) {
    commArgs.addObjects(aggrArgs);
    if (dialect != null) {
      commArgs.add(SearchKeyword.DIALECT).add(dialect);
    }
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Row.java,Row,containsKey,boolean containsKey(String),"[14, 16]","{'A1': [(14, 16)]}",{'A1': 1.0},A1,,"  public boolean containsKey(String key) {
    return fields.containsKey(key);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Row.java,Row,get,Object get(String),"[18, 20]","{'A1': [(18, 20)]}",{'A1': 1.0},A1,,"  public Object get(String key) {
    return fields.get(key);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Row.java,Row,getString,String getString(String),"[22, 27]","{'A1': [(22, 27)]}",{'A1': 1.0},A1,,"  public String getString(String key) {
    if (!containsKey(key)) {
      return """";
    }
    return (String) fields.get(key);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Row.java,Row,getLong,long getLong(String),"[29, 34]","{'A1': [(29, 34)]}",{'A1': 1.0},A1,,"  public long getLong(String key) {
    if (!containsKey(key)) {
      return 0;
    }
    return Long.parseLong((String) fields.get(key));
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Row.java,Row,getDouble,double getDouble(String),"[36, 41]","{'A1': [(36, 41)]}",{'A1': 1.0},A1,,"  public double getDouble(String key) {
    if (!containsKey(key)) {
      return 0;
    }
    return DoublePrecision.parseFloatingPointNumber((String) fields.get(key));
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Row.java,Row,toString,String toString(),"[43, 46]","{'A1': [(43, 46)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return String.valueOf(fields);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducer.java,Reducer,as,Reducer as(String),"[27, 30]","{'A1': [(27, 30)]}",{'A1': 1.0},A1,,"  public final Reducer as(String alias) {
    this.alias = alias;
    return this;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducer.java,Reducer,getName,String getName(),"[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"  public final String getName() {
    return name;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducer.java,Reducer,getField,String getField(),"[36, 38]","{'A1': [(36, 38)]}",{'A1': 1.0},A1,,"  public final String getField() {
    return field;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducer.java,Reducer,getAlias,String getAlias(),"[40, 42]","{'A1': [(40, 42)]}",{'A1': 1.0},A1,,"  public final String getAlias() {
    return alias;
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducer.java,Reducer,addArgs,void addArgs(List<Object>),"[46, 64]","{'A1': [(46, 64)]}",{'A1': 1.0},A1,,"  public final void addArgs(List<Object> args) {

    args.add(SearchKeyword.REDUCE);
    args.add(name);

    List<Object> ownArgs = getOwnArgs();
    if (field != null) {
      args.add(1 + ownArgs.size());
      args.add(field);
    } else {
      args.add(ownArgs.size());
    }
    args.addAll(ownArgs);

    if (alias != null) {
      args.add(SearchKeyword.AS);
      args.add(alias);
    }
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,count,Reducer count(),"[12, 18]","{'A1': [(12, 18)]}",{'A1': 1.0},A1,,"  public static Reducer count() {
    return new Reducer(""COUNT"") {
      @Override protected List<Object> getOwnArgs() {
        return Collections.emptyList();
      }
    };
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,getOwnArgs,List<Object> getOwnArgs(),"[14, 16]","{'A1': [(14, 16)]}",{'A1': 1.0},A1,,"      @Override protected List<Object> getOwnArgs() {
        return Collections.emptyList();
      }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,singleFieldReducer,"Reducer singleFieldReducer(String,String)","[20, 26]","{'A1': [(20, 26)]}",{'A1': 1.0},A1,,"  private static Reducer singleFieldReducer(String name, String field) {
    return new Reducer(name, field) {
      @Override protected List<Object> getOwnArgs() {
        return Collections.emptyList();
      }
    };
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,getOwnArgs,List<Object> getOwnArgs(),"[22, 24]","{'A1': [(22, 24)]}",{'A1': 1.0},A1,,"      @Override protected List<Object> getOwnArgs() {
        return Collections.emptyList();
      }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,count_distinct,Reducer count_distinct(String),"[28, 30]","{'A1': [(28, 30)]}",{'A1': 1.0},A1,,"  public static Reducer count_distinct(String field) {
    return singleFieldReducer(""COUNT_DISTINCT"", field);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,count_distinctish,Reducer count_distinctish(String),"[32, 34]","{'A1': [(32, 34)]}",{'A1': 1.0},A1,,"  public static Reducer count_distinctish(String field) {
    return singleFieldReducer(""COUNT_DISTINCTISH"", field);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,sum,Reducer sum(String),"[36, 38]","{'A1': [(36, 38)]}",{'A1': 1.0},A1,,"  public static Reducer sum(String field) {
    return singleFieldReducer(""SUM"", field);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,min,Reducer min(String),"[40, 42]","{'A1': [(40, 42)]}",{'A1': 1.0},A1,,"  public static Reducer min(String field) {
    return singleFieldReducer(""MIN"", field);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,max,Reducer max(String),"[44, 46]","{'A1': [(44, 46)]}",{'A1': 1.0},A1,,"  public static Reducer max(String field) {
    return singleFieldReducer(""MAX"", field);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,avg,Reducer avg(String),"[48, 50]","{'A1': [(48, 50)]}",{'A1': 1.0},A1,,"  public static Reducer avg(String field) {
    return singleFieldReducer(""AVG"", field);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,stddev,Reducer stddev(String),"[52, 54]","{'A1': [(52, 54)]}",{'A1': 1.0},A1,,"  public static Reducer stddev(String field) {
    return singleFieldReducer(""STDDEV"", field);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,quantile,"Reducer quantile(String,double)","[56, 62]","{'A1': [(56, 62)]}",{'A1': 1.0},A1,,"  public static Reducer quantile(String field, double percentile) {
    return new Reducer(""QUANTILE"", field) {
      @Override protected List<Object> getOwnArgs() {
        return Arrays.asList(percentile);
      }
    };
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,getOwnArgs,List<Object> getOwnArgs(),"[58, 60]","{'A1': [(58, 60)]}",{'A1': 1.0},A1,,"      @Override protected List<Object> getOwnArgs() {
        return Arrays.asList(percentile);
      }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,first_value,Reducer first_value(String),"[64, 66]","{'A1': [(64, 66)]}",{'A1': 1.0},A1,,"  public static Reducer first_value(String field) {
    return singleFieldReducer(""FIRST_VALUE"", field);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,first_value,"Reducer first_value(String,SortedField)","[75, 81]","{'A1': [(75, 81)]}",{'A1': 1.0},A1,,"  public static Reducer first_value(String field, SortedField sortBy) {
    return new Reducer(""FIRST_VALUE"", field) {
      @Override protected List<Object> getOwnArgs() {
        return Arrays.asList(""BY"", sortBy.getField(), sortBy.getOrder());
      }
    };
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,getOwnArgs,List<Object> getOwnArgs(),"[77, 79]","{'A1': [(77, 79)]}",{'A1': 1.0},A1,,"      @Override protected List<Object> getOwnArgs() {
        return Arrays.asList(""BY"", sortBy.getField(), sortBy.getOrder());
      }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,to_list,Reducer to_list(String),"[83, 85]","{'A1': [(83, 85)]}",{'A1': 1.0},A1,,"  public static Reducer to_list(String field) {
    return singleFieldReducer(""TOLIST"", field);
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,random_sample,"Reducer random_sample(String,int)","[87, 93]","{'A1': [(87, 93)]}",{'A1': 1.0},A1,,"  public static Reducer random_sample(String field, int size) {
    return new Reducer(""RANDOM_SAMPLE"", field) {
      @Override protected List<Object> getOwnArgs() {
        return Arrays.asList(size);
      }
    };
  }
"
redis.clients.jedis.search.aggr,../projects/jedis/src/main/java/redis/clients/jedis/search/aggr/Reducers.java,Reducers,getOwnArgs,List<Object> getOwnArgs(),"[89, 91]","{'A1': [(89, 91)]}",{'A1': 1.0},A1,,"      @Override protected List<Object> getOwnArgs() {
        return Arrays.asList(size);
      }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTProfileParams.java,FTProfileParams,profileParams,FTProfileParams profileParams(),"[15, 17]","{'A1': [(15, 17)]}",{'A1': 1.0},A1,,"  public static FTProfileParams profileParams() {
    return new FTProfileParams();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTProfileParams.java,FTProfileParams,limited,FTProfileParams limited(),"[22, 25]","{'A1': [(22, 25)]}",{'A1': 1.0},A1,,"  public FTProfileParams limited() {
    this.limited = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTProfileParams.java,FTProfileParams,addParams,void addParams(CommandArguments),"[27, 33]","{'A1': [(27, 33)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (limited) {
      args.add(LIMITED);
    }
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchProtocol.java,SearchProtocol.SearchCommand,getRaw,byte[] getRaw(),"[44, 47]","{'A1': [(44, 47)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchProtocol.java,SearchProtocol.SearchKeyword,getRaw,byte[] getRaw(),"[68, 71]","{'A1': [(68, 71)]}",{'A1': 1.0},A1,,"    @Override
    public byte[] getRaw() {
      return raw;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,searchParams,FTSearchParams searchParams(),"[51, 53]","{'A1': [(51, 53)]}",{'A1': 1.0},A1,,"  public static FTSearchParams searchParams() {
    return new FTSearchParams();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,addParams,void addParams(CommandArguments),"[55, 153]","{'A1': [(55, 153)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (noContent) {
      args.add(NOCONTENT);
    }
    if (verbatim) {
      args.add(VERBATIM);
    }
    if (noStopwords) {
      args.add(NOSTOPWORDS);
    }
    if (withScores) {
      args.add(WITHSCORES);
    }

    if (!filters.isEmpty()) {
      filters.forEach(filter -> filter.addParams(args));
    }

    if (inKeys != null && !inKeys.isEmpty()) {
      args.add(INKEYS).add(inKeys.size()).addObjects(inKeys);
    }

    if (inFields != null && !inFields.isEmpty()) {
      args.add(INFIELDS).add(inFields.size()).addObjects(inFields);
    }

    if (returnFieldsNames != null && !returnFieldsNames.isEmpty()) {
      args.add(RETURN);
      LazyRawable returnCountObject = new LazyRawable();
      args.add(returnCountObject); // holding a place for setting the total count later.
      int returnCount = 0;
      for (FieldName fn : returnFieldsNames) {
        returnCount += fn.addCommandArguments(args);
      }
      returnCountObject.setRaw(Protocol.toByteArray(returnCount));
    }

    if (summarizeParams != null) {
      args.addParams(summarizeParams);
    } else if (summarize) {
      args.add(SUMMARIZE);
    }

    if (highlightParams != null) {
      args.addParams(highlightParams);
    } else if (highlight) {
      args.add(HIGHLIGHT);
    }

    if (slop != null) {
      args.add(SLOP).add(slop);
    }

    if (timeout != null) {
      args.add(TIMEOUT).add(timeout);
    }

    if (inOrder) {
      args.add(INORDER);
    }

    if (language != null) {
      args.add(LANGUAGE).add(language);
    }

    if (expander != null) {
      args.add(EXPANDER).add(expander);
    }

    if (scorer != null) {
      args.add(SCORER).add(scorer);
    }
//
//    if (explainScore) {
//      args.add(EXPLAINSCORE);
//    }

    if (sortBy != null) {
      args.add(SORTBY).add(sortBy);
      if (sortOrder != null) {
        args.add(sortOrder);
      }
    }

    if (limit != null) {
      args.add(LIMIT).add(limit[0]).add(limit[1]);
    }

    if (params != null && !params.isEmpty()) {
      args.add(PARAMS).add(params.size() << 1);
      params.entrySet().forEach(entry -> args.add(entry.getKey()).add(entry.getValue()));
    }

    if (dialect != null) {
      args.add(DIALECT).add(dialect);
    }
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,noContent,FTSearchParams noContent(),"[160, 163]","{'A1': [(160, 163)]}",{'A1': 1.0},A1,,"  public FTSearchParams noContent() {
    this.noContent = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,verbatim,FTSearchParams verbatim(),"[170, 173]","{'A1': [(170, 173)]}",{'A1': 1.0},A1,,"  public FTSearchParams verbatim() {
    this.verbatim = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,noStopwords,FTSearchParams noStopwords(),"[180, 183]","{'A1': [(180, 183)]}",{'A1': 1.0},A1,,"  public FTSearchParams noStopwords() {
    this.noStopwords = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,withScores,FTSearchParams withScores(),"[191, 194]","{'A1': [(191, 194)]}",{'A1': 1.0},A1,,"  public FTSearchParams withScores() {
    this.withScores = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,filter,"FTSearchParams filter(String,double,double)","[196, 198]","{'A1': [(196, 198)]}",{'A1': 1.0},A1,,"  public FTSearchParams filter(String field, double min, double max) {
    return filter(new NumericFilter(field, min, max));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,filter,"FTSearchParams filter(String,double,boolean,double,boolean)","[200, 202]","{'A1': [(200, 202)]}",{'A1': 1.0},A1,,"  public FTSearchParams filter(String field, double min, boolean exclusiveMin, double max, boolean exclusiveMax) {
    return filter(new NumericFilter(field, min, exclusiveMin, max, exclusiveMax));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,filter,FTSearchParams filter(NumericFilter),"[204, 207]","{'A1': [(204, 207)]}",{'A1': 1.0},A1,,"  public FTSearchParams filter(NumericFilter numericFilter) {
    filters.add(numericFilter);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,geoFilter,"FTSearchParams geoFilter(String,double,double,double,GeoUnit)","[209, 211]","{'A1': [(209, 211)]}",{'A1': 1.0},A1,,"  public FTSearchParams geoFilter(String field, double lon, double lat, double radius, GeoUnit unit) {
    return geoFilter(new GeoFilter(field, lon, lat, radius, unit));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,geoFilter,FTSearchParams geoFilter(GeoFilter),"[213, 216]","{'A1': [(213, 216)]}",{'A1': 1.0},A1,,"  public FTSearchParams geoFilter(GeoFilter geoFilter) {
    filters.add(geoFilter);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,inKeys,FTSearchParams inKeys(),"[224, 226]","{'A1': [(224, 226)]}",{'A1': 1.0},A1,,"  public FTSearchParams inKeys(String... keys) {
    return inKeys(Arrays.asList(keys));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,inKeys,FTSearchParams inKeys(Collection<String>),"[228, 231]","{'A1': [(228, 231)]}",{'A1': 1.0},A1,,"  public FTSearchParams inKeys(Collection<String> keys) {
    this.inKeys = keys;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,inFields,FTSearchParams inFields(),"[239, 241]","{'A1': [(239, 241)]}",{'A1': 1.0},A1,,"  public FTSearchParams inFields(String... fields) {
    return inFields(Arrays.asList(fields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,inFields,FTSearchParams inFields(Collection<String>),"[243, 250]","{'A1': [(243, 250)]}",{'A1': 1.0},A1,,"  public FTSearchParams inFields(Collection<String> fields) {
    if (this.inFields == null) {
      this.inFields = new ArrayList<>(fields);
    } else {
      this.inFields.addAll(fields);
    }
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,returnFields,FTSearchParams returnFields(),"[258, 264]","{'A1': [(258, 264)]}",{'A1': 1.0},A1,,"  public FTSearchParams returnFields(String... fields) {
    if (returnFieldsNames == null) {
      returnFieldsNames = new ArrayList<>();
    }
    Arrays.stream(fields).forEach(f -> returnFieldsNames.add(FieldName.of(f)));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,returnField,FTSearchParams returnField(FieldName),"[266, 268]","{'A1': [(266, 268)]}",{'A1': 1.0},A1,,"  public FTSearchParams returnField(FieldName field) {
    return returnFields(Collections.singleton(field));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,returnFields,FTSearchParams returnFields(),"[270, 272]","{'A1': [(270, 272)]}",{'A1': 1.0},A1,,"  public FTSearchParams returnFields(FieldName... fields) {
    return returnFields(Arrays.asList(fields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,returnFields,FTSearchParams returnFields(Collection<FieldName>),"[274, 280]","{'A1': [(274, 280)]}",{'A1': 1.0},A1,,"  public FTSearchParams returnFields(Collection<FieldName> fields) {
    if (returnFieldsNames == null) {
      returnFieldsNames = new ArrayList<>();
    }
    returnFieldsNames.addAll(fields);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,returnField,"FTSearchParams returnField(String,boolean)","[282, 286]","{'A1': [(282, 286)]}",{'A1': 1.0},A1,,"  public FTSearchParams returnField(String field, boolean decode) {
    returnFields(field);
    addReturnFieldDecode(field, decode);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,returnField,"FTSearchParams returnField(FieldName,boolean)","[288, 292]","{'A1': [(288, 292)]}",{'A1': 1.0},A1,,"  public FTSearchParams returnField(FieldName field, boolean decode) {
    returnFields(field);
    addReturnFieldDecode(field.getAttribute() != null ? field.getAttribute() : field.getName(), decode);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,addReturnFieldDecode,"void addReturnFieldDecode(String,boolean)","[294, 299]","{'A1': [(294, 299)]}",{'A1': 1.0},A1,,"  private void addReturnFieldDecode(String returnName, boolean decode) {
    if (returnFieldDecodeMap == null) {
      returnFieldDecodeMap = new HashMap<>();
    }
    returnFieldDecodeMap.put(returnName, decode);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,summarize,FTSearchParams summarize(),"[301, 304]","{'A1': [(301, 304)]}",{'A1': 1.0},A1,,"  public FTSearchParams summarize() {
    this.summarize = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,summarize,FTSearchParams summarize(SummarizeParams),"[306, 309]","{'A1': [(306, 309)]}",{'A1': 1.0},A1,,"  public FTSearchParams summarize(SummarizeParams summarizeParams) {
    this.summarizeParams = summarizeParams;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,highlight,FTSearchParams highlight(),"[311, 314]","{'A1': [(311, 314)]}",{'A1': 1.0},A1,,"  public FTSearchParams highlight() {
    this.highlight = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,highlight,FTSearchParams highlight(HighlightParams),"[316, 319]","{'A1': [(316, 319)]}",{'A1': 1.0},A1,,"  public FTSearchParams highlight(HighlightParams highlightParams) {
    this.highlightParams = highlightParams;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,scorer,FTSearchParams scorer(String),"[330, 333]","{'A1': [(330, 333)]}",{'A1': 1.0},A1,,"  public FTSearchParams scorer(String scorer) {
    this.scorer = scorer;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,slop,FTSearchParams slop(int),"[340, 343]","{'A1': [(340, 343)]}",{'A1': 1.0},A1,,"  public FTSearchParams slop(int slop) {
    this.slop = slop;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,timeout,FTSearchParams timeout(long),"[345, 348]","{'A1': [(345, 348)]}",{'A1': 1.0},A1,,"  public FTSearchParams timeout(long timeout) {
    this.timeout = timeout;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,inOrder,FTSearchParams inOrder(),"[350, 353]","{'A1': [(350, 353)]}",{'A1': 1.0},A1,,"  public FTSearchParams inOrder() {
    this.inOrder = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,language,FTSearchParams language(String),"[364, 367]","{'A1': [(364, 367)]}",{'A1': 1.0},A1,,"  public FTSearchParams language(String language) {
    this.language = language;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,sortBy,"FTSearchParams sortBy(String,SortingOrder)","[376, 380]","{'A1': [(376, 380)]}",{'A1': 1.0},A1,,"  public FTSearchParams sortBy(String sortBy, SortingOrder order) {
    this.sortBy = sortBy;
    this.sortOrder = order;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,limit,"FTSearchParams limit(int,int)","[389, 392]","{'A1': [(389, 392)]}",{'A1': 1.0},A1,,"  public FTSearchParams limit(int offset, int num) {
    this.limit = new int[]{offset, num};
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,addParam,"FTSearchParams addParam(String,Object)","[403, 409]","{'A1': [(403, 409)]}",{'A1': 1.0},A1,,"  public FTSearchParams addParam(String name, Object value) {
    if (params == null) {
      params = new HashMap<>();
    }
    params.put(name, value);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,params,"FTSearchParams params(Map<String, Object>)","[411, 418]","{'A1': [(411, 418)]}",{'A1': 1.0},A1,,"  public FTSearchParams params(Map<String, Object> paramValues) {
    if (this.params == null) {
      this.params = new HashMap<>(paramValues);
    } else {
      this.params.putAll(params);
    }
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,dialect,FTSearchParams dialect(int),"[426, 429]","{'A1': [(426, 429)]}",{'A1': 1.0},A1,,"  public FTSearchParams dialect(int dialect) {
    this.dialect = dialect;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,dialectOptional,FTSearchParams dialectOptional(int),"[436, 442]","{'A1': [(436, 442)]}",{'A1': 1.0},A1,,"  @Internal
  public FTSearchParams dialectOptional(int dialect) {
    if (dialect != 0 && this.dialect == null) {
      this.dialect = dialect;
    }
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,getNoContent,boolean getNoContent(),"[444, 447]","{'A1': [(444, 447)]}",{'A1': 1.0},A1,,"  @Internal
  public boolean getNoContent() {
    return noContent;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,getWithScores,boolean getWithScores(),"[449, 452]","{'A1': [(449, 452)]}",{'A1': 1.0},A1,,"  @Internal
  public boolean getWithScores() {
    return withScores;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,getReturnFieldDecodeMap,"Map<String, Boolean> getReturnFieldDecodeMap()","[454, 457]","{'A1': [(454, 457)]}",{'A1': 1.0},A1,,"  @Internal
  public Map<String, Boolean> getReturnFieldDecodeMap() {
    return returnFieldDecodeMap;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.NumericFilter,addParams,void addParams(CommandArguments),"[482, 487]","{'A1': [(482, 487)]}",{'A1': 1.0},A1,,"    @Override
    public void addParams(CommandArguments args) {
      args.add(FILTER).add(field)
          .add(formatNum(min, exclusiveMin))
          .add(formatNum(max, exclusiveMax));
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.NumericFilter,formatNum,"Object formatNum(double,boolean)","[489, 491]","{'A1': [(489, 491)]}",{'A1': 1.0},A1,,"    private Object formatNum(double num, boolean exclude) {
      return exclude ? (""("" + num) : Protocol.toByteArray(num);
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.GeoFilter,addParams,void addParams(CommandArguments),"[513, 518]","{'A1': [(513, 518)]}",{'A1': 1.0},A1,,"    @Override
    public void addParams(CommandArguments args) {
      args.add(GEOFILTER).add(field)
          .add(lon).add(lat)
          .add(radius).add(unit);
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.SummarizeParams,fields,SummarizeParams fields(),"[531, 533]","{'A1': [(531, 533)]}",{'A1': 1.0},A1,,"    public SummarizeParams fields(String... fields) {
      return fields(Arrays.asList(fields));
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.SummarizeParams,fields,SummarizeParams fields(Collection<String>),"[535, 538]","{'A1': [(535, 538)]}",{'A1': 1.0},A1,,"    public SummarizeParams fields(Collection<String> fields) {
      this.fields = fields;
      return this;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.SummarizeParams,fragsNum,SummarizeParams fragsNum(int),"[540, 543]","{'A1': [(540, 543)]}",{'A1': 1.0},A1,,"    public SummarizeParams fragsNum(int num) {
      this.fragsNum = num;
      return this;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.SummarizeParams,fragSize,SummarizeParams fragSize(int),"[545, 548]","{'A1': [(545, 548)]}",{'A1': 1.0},A1,,"    public SummarizeParams fragSize(int size) {
      this.fragSize = size;
      return this;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.SummarizeParams,separator,SummarizeParams separator(String),"[550, 553]","{'A1': [(550, 553)]}",{'A1': 1.0},A1,,"    public SummarizeParams separator(String separator) {
      this.separator = separator;
      return this;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.SummarizeParams,addParams,void addParams(CommandArguments),"[555, 571]","{'A1': [(555, 571)]}",{'A1': 1.0},A1,,"    @Override
    public void addParams(CommandArguments args) {
      args.add(SUMMARIZE);

      if (fields != null) {
        args.add(FIELDS).add(fields.size()).addObjects(fields);
      }
      if (fragsNum != null) {
        args.add(FRAGS).add(fragsNum);
      }
      if (fragSize != null) {
        args.add(LEN).add(fragSize);
      }
      if (separator != null) {
        args.add(SEPARATOR).add(separator);
      }
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,summarizeParams,SummarizeParams summarizeParams(),"[574, 576]","{'A1': [(574, 576)]}",{'A1': 1.0},A1,,"  public static SummarizeParams summarizeParams() {
    return new SummarizeParams();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.HighlightParams,fields,HighlightParams fields(String),"[586, 588]","{'A1': [(586, 588)]}",{'A1': 1.0},A1,,"    public HighlightParams fields(String fields) {
      return fields(Arrays.asList(fields));
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.HighlightParams,fields,HighlightParams fields(Collection<String>),"[590, 593]","{'A1': [(590, 593)]}",{'A1': 1.0},A1,,"    public HighlightParams fields(Collection<String> fields) {
      this.fields = fields;
      return this;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.HighlightParams,tags,"HighlightParams tags(String,String)","[595, 598]","{'A1': [(595, 598)]}",{'A1': 1.0},A1,,"    public HighlightParams tags(String open, String close) {
      this.tags = new String[]{open, close};
      return this;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams.HighlightParams,addParams,void addParams(CommandArguments),"[600, 610]","{'A1': [(600, 610)]}",{'A1': 1.0},A1,,"    @Override
    public void addParams(CommandArguments args) {
      args.add(HIGHLIGHT);

      if (fields != null) {
        args.add(FIELDS).add(fields.size()).addObjects(fields);
      }
      if (tags != null) {
        args.add(TAGS).add(tags[0]).add(tags[1]);
      }
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTSearchParams.java,FTSearchParams,highlightParams,HighlightParams highlightParams(),"[613, 615]","{'A1': [(613, 615)]}",{'A1': 1.0},A1,,"  public static HighlightParams highlightParams() {
    return new HighlightParams();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchBuilderFactory.java,SearchBuilderFactory,build,"Map<String, List<String>> build(Object)","[19, 34]","{'A1': [(19, 34)]}",{'A1': 1.0},A1,,"    @Override
    public Map<String, List<String>> build(Object data) {
      List list = (List) data;
      if (list.isEmpty()) return Collections.emptyMap();

      if (list.get(0) instanceof KeyValue) {
        return ((List<KeyValue>) data).stream().collect(Collectors.toMap(
            kv -> STRING.build(kv.getKey()), kv -> BuilderFactory.STRING_LIST.build(kv.getValue())));
      }

      Map<String, List<String>> dump = new HashMap<>(list.size() / 2, 1f);
      for (int i = 0; i < list.size(); i += 2) {
        dump.put(STRING.build(list.get(i)), BuilderFactory.STRING_LIST.build(list.get(i + 1)));
      }
      return dump;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchBuilderFactory.java,SearchBuilderFactory,build,"Map<String, Map<String, Double>> build(Object)","[43, 81]","{'A1': [(43, 81)]}",{'A1': 1.0},A1,,"    @Override
    public Map<String, Map<String, Double>> build(Object data) {
      List rawDataList = (List) data;
      if (rawDataList.isEmpty()) return Collections.emptyMap();

      if (rawDataList.get(0) instanceof KeyValue) {
        KeyValue rawData = (KeyValue) rawDataList.get(0);
        String header = STRING.build(rawData.getKey());
        if (!RESULTS.equals(header)) {
          throw new IllegalStateException(""Unrecognized header: "" + header);
        }

        return ((List<KeyValue>) rawData.getValue()).stream().collect(Collectors.toMap(
            rawTerm -> STRING.build(rawTerm.getKey()),
            rawTerm -> ((List<List<KeyValue>>) rawTerm.getValue()).stream()
                .collect(Collectors.toMap(entry -> STRING.build(entry.get(0).getKey()),
                      entry -> BuilderFactory.DOUBLE.build(entry.get(0).getValue()))),
            (x, y) -> x, LinkedHashMap::new));
      }

      Map<String, Map<String, Double>> returnTerms = new LinkedHashMap<>(rawDataList.size());

      for (Object rawData : rawDataList) {
        List<Object> rawElements = (List<Object>) rawData;

        String header = STRING.build(rawElements.get(0));
        if (!TERM.equals(header)) {
          throw new IllegalStateException(""Unrecognized header: "" + header);
        }
        String term = STRING.build(rawElements.get(1));

        List<List<Object>> list = (List<List<Object>>) rawElements.get(2);
        Map<String, Double> entries = new LinkedHashMap<>(list.size());
        list.forEach(entry -> entries.put(STRING.build(entry.get(1)), BuilderFactory.DOUBLE.build(entry.get(0))));

        returnTerms.put(term, entries);
      }
      return returnTerms;
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,createParams,FTCreateParams createParams(),"[34, 36]","{'A1': [(34, 36)]}",{'A1': 1.0},A1,,"  public static FTCreateParams createParams() {
    return new FTCreateParams();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,on,FTCreateParams on(IndexDataType),"[42, 45]","{'A1': [(42, 45)]}",{'A1': 1.0},A1,,"  public FTCreateParams on(IndexDataType dataType) {
    this.dataType = dataType;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,prefix,FTCreateParams prefix(),"[50, 56]","{'A1': [(50, 56)]}",{'A1': 1.0},A1,,"  public FTCreateParams prefix(String... prefixes) {
    if (this.prefix == null) {
      this.prefix = new ArrayList<>(prefixes.length);
    }
    Arrays.stream(prefixes).forEach(p -> this.prefix.add(p));
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,addPrefix,FTCreateParams addPrefix(String),"[63, 69]","{'A1': [(63, 69)]}",{'A1': 1.0},A1,,"  public FTCreateParams addPrefix(String prefix) {
    if (this.prefix == null) {
      this.prefix = new ArrayList<>();
    }
    this.prefix.add(prefix);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,filter,FTCreateParams filter(String),"[74, 77]","{'A1': [(74, 77)]}",{'A1': 1.0},A1,,"  public FTCreateParams filter(String filter) {
    this.filter = filter;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,language,FTCreateParams language(String),"[82, 85]","{'A1': [(82, 85)]}",{'A1': 1.0},A1,,"  public FTCreateParams language(String defaultLanguage) {
    this.language = defaultLanguage;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,languageField,FTCreateParams languageField(String),"[90, 93]","{'A1': [(90, 93)]}",{'A1': 1.0},A1,,"  public FTCreateParams languageField(String languageAttribute) {
    this.languageField = languageAttribute;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,score,FTCreateParams score(double),"[98, 101]","{'A1': [(98, 101)]}",{'A1': 1.0},A1,,"  public FTCreateParams score(double defaultScore) {
    this.score = defaultScore;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,scoreField,FTCreateParams scoreField(String),"[107, 110]","{'A1': [(107, 110)]}",{'A1': 1.0},A1,,"  public FTCreateParams scoreField(String scoreField) {
    this.scoreField = scoreField;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,maxTextFields,FTCreateParams maxTextFields(),"[115, 118]","{'A1': [(115, 118)]}",{'A1': 1.0},A1,,"  public FTCreateParams maxTextFields() {
    this.maxTextFields = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,noOffsets,FTCreateParams noOffsets(),"[124, 127]","{'A1': [(124, 127)]}",{'A1': 1.0},A1,,"  public FTCreateParams noOffsets() {
    this.noOffsets = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,temporary,FTCreateParams temporary(long),"[132, 135]","{'A1': [(132, 135)]}",{'A1': 1.0},A1,,"  public FTCreateParams temporary(long seconds) {
    this.temporary = seconds;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,noHL,FTCreateParams noHL(),"[140, 143]","{'A1': [(140, 143)]}",{'A1': 1.0},A1,,"  public FTCreateParams noHL() {
    this.noHL = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,noHighlights,FTCreateParams noHighlights(),"[148, 150]","{'A1': [(148, 150)]}",{'A1': 1.0},A1,,"  public FTCreateParams noHighlights() {
    return noHL();
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,noFields,FTCreateParams noFields(),"[156, 159]","{'A1': [(156, 159)]}",{'A1': 1.0},A1,,"  public FTCreateParams noFields() {
    this.noFields = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,noFreqs,FTCreateParams noFreqs(),"[165, 168]","{'A1': [(165, 168)]}",{'A1': 1.0},A1,,"  public FTCreateParams noFreqs() {
    this.noFreqs = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,stopwords,FTCreateParams stopwords(),"[173, 176]","{'A1': [(173, 176)]}",{'A1': 1.0},A1,,"  public FTCreateParams stopwords(String... stopwords) {
    this.stopwords = Arrays.asList(stopwords);
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,noStopwords,FTCreateParams noStopwords(),"[181, 184]","{'A1': [(181, 184)]}",{'A1': 1.0},A1,,"  public FTCreateParams noStopwords() {
    this.stopwords = Collections.emptyList();
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,skipInitialScan,FTCreateParams skipInitialScan(),"[189, 192]","{'A1': [(189, 192)]}",{'A1': 1.0},A1,,"  public FTCreateParams skipInitialScan() {
    this.skipInitialScan = true;
    return this;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/FTCreateParams.java,FTCreateParams,addParams,void addParams(CommandArguments),"[194, 255]","{'A1': [(194, 255)]}",{'A1': 1.0},A1,,"  @Override
  public void addParams(CommandArguments args) {

    if (dataType != null) {
      args.add(ON).add(dataType);
    }

    if (prefix != null) {
      args.add(PREFIX).add(prefix.size()).addObjects(prefix);
    }

    if (filter != null) {
      args.add(FILTER).add(filter);
    }

    if (language != null) {
      args.add(LANGUAGE).add(language);
    }
    if (languageField != null) {
      args.add(LANGUAGE_FIELD).add(languageField);
    }

    if (score != null) {
      args.add(SCORE).add(score);
    }
    if (scoreField != null) {
      args.add(SCORE_FIELD).add(scoreField);
    }

    if (maxTextFields) {
      args.add(MAXTEXTFIELDS);
    }

    if (noOffsets) {
      args.add(NOOFFSETS);
    }

    if (temporary != null) {
      args.add(TEMPORARY).add(temporary);
    }

    if (noHL) {
      args.add(NOHL);
    }

    if (noFields) {
      args.add(NOFIELDS);
    }

    if (noFreqs) {
      args.add(NOFREQS);
    }

    if (stopwords != null) {
      args.add(STOPWORDS).add(stopwords.size());
      stopwords.forEach(w -> args.add(w));
    }

    if (skipInitialScan) {
      args.add(SKIPINITIALSCAN);
    }
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchPipelineCommands.java,,ftCreate,Response<String> ftCreate(String),"[18, 20]","{'A1': [(18, 20)]}",{'A1': 1.0},A1,,"  default Response<String> ftCreate(String indexName, SchemaField... schemaFields) {
    return ftCreate(indexName, Arrays.asList(schemaFields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchPipelineCommands.java,,ftCreate,"Response<String> ftCreate(String,FTCreateParams)","[22, 24]","{'A1': [(22, 24)]}",{'A1': 1.0},A1,,"  default Response<String> ftCreate(String indexName, FTCreateParams createParams, SchemaField... schemaFields) {
    return ftCreate(indexName, createParams, Arrays.asList(schemaFields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchPipelineCommands.java,,ftCreate,"Response<String> ftCreate(String,Iterable<SchemaField>)","[26, 28]","{'A1': [(26, 28)]}",{'A1': 1.0},A1,,"  default Response<String> ftCreate(String indexName, Iterable<SchemaField> schemaFields) {
    return ftCreate(indexName, FTCreateParams.createParams(), schemaFields);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchPipelineCommands.java,,ftAlter,Response<String> ftAlter(String),"[32, 34]","{'A12': [(32, 34)]}",{'A12': 1.0},A12,,"  default Response<String> ftAlter(String indexName, Schema.Field... fields) {
    return ftAlter(indexName, Schema.from(fields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchPipelineCommands.java,,ftAlter,Response<String> ftAlter(String),"[38, 40]","{'A1': [(38, 40)]}",{'A1': 1.0},A1,,"  default Response<String> ftAlter(String indexName, SchemaField... schemaFields) {
    return ftAlter(indexName, Arrays.asList(schemaFields));
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/RediSearchPipelineCommands.java,,ftSearch,Response<SearchResult> ftSearch(String),"[54, 56]","{'A1': [(54, 56)]}",{'A1': 1.0},A1,,"  default Response<SearchResult> ftSearch(String indexName) {
    return ftSearch(indexName, ""*"");
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchResult.java,SearchResult,getTotalResults,long getTotalResults(),"[36, 38]","{'A1': [(36, 38)]}",{'A1': 1.0},A1,,"  public long getTotalResults() {
    return totalResults;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchResult.java,SearchResult,getDocuments,List<Document> getDocuments(),"[40, 42]","{'A1': [(40, 42)]}",{'A1': 1.0},A1,,"  public List<Document> getDocuments() {
    return Collections.unmodifiableList(documents);
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchResult.java,SearchResult,getWarnings,List<String> getWarnings(),"[44, 46]","{'A1': [(44, 46)]}",{'A1': 1.0},A1,,"  public List<String> getWarnings() {
    return warnings;
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchResult.java,SearchResult,toString,String toString(),"[48, 54]","{'A1': [(48, 54)]}",{'A1': 1.0},A1,,"  @Override
  public String toString() {
    return getClass().getSimpleName() + ""{Total results:"" + totalResults
        + "", Documents:"" + documents
        + (warnings != null ? "", Warnings:"" + warnings : """")
        + ""}"";
  }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchResult.java,SearchResult.SearchResultBuilder,build,SearchResult build(Object),"[76, 106]","{'A1': [(76, 106)]}",{'A1': 1.0},A1,,"    @Override
    public SearchResult build(Object data) {
      List<Object> resp = (List<Object>) data;

      int step = 1;
      int scoreOffset = 0;
      int contentOffset = 1;
      if (hasScores) {
        step += 1;
        scoreOffset = 1;
        contentOffset += 1;
      }
      if (hasContent) {
        step += 1;
      }

      // the first element is always the number of results
      long totalResults = (Long) resp.get(0);
      List<Document> documents = new ArrayList<>(resp.size() - 1);

      for (int i = 1; i < resp.size(); i += step) {

        String id = BuilderFactory.STRING.build(resp.get(i));
        double score = hasScores ? BuilderFactory.DOUBLE.build(resp.get(i + scoreOffset)) : 1.0;
        List<byte[]> fields = hasContent ? (List<byte[]>) resp.get(i + contentOffset) : null;

        documents.add(Document.load(id, score, fields, decode, isFieldDecode));
      }

      return new SearchResult(totalResults, documents);
    }
"
redis.clients.jedis.search,../projects/jedis/src/main/java/redis/clients/jedis/search/SearchResult.java,SearchResult.PerFieldDecoderSearchResultBuilder,build,SearchResult build(Object),"[131, 155]","{'A1': [(131, 155)]}",{'A1': 1.0},A1,,"    @Override
    public SearchResult build(Object data) {
      List<KeyValue> list = (List<KeyValue>) data;
      long totalResults = -1;
      List<Document> results = null;
      List<String> warnings = null;
      for (KeyValue kv : list) {
        String key = BuilderFactory.STRING.build(kv.getKey());
        Object rawVal = kv.getValue();
        switch (key) {
          case TOTAL_RESULTS_STR:
            totalResults = BuilderFactory.LONG.build(rawVal);
            break;
          case RESULTS_STR:
            results = ((List<Object>) rawVal).stream()
                .map(documentBuilder::build)
                .collect(Collectors.toList());
            break;
          case WARNINGS_STR:
            warnings = BuilderFactory.STRING_LIST.build(rawVal);
            break;
        }
      }
      return new SearchResult(totalResults, results, warnings);
    }
"
